
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017954  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ba4  08017b18  08017b18  00027b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080186bc  080186bc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  080186bc  080186bc  000286bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080186c4  080186c4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080186c4  080186c4  000286c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080186cc  080186cc  000286cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080186d0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023cf4  200001e0  080188ac  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20023ed4  080188ac  00033ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000354a8  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007632  00000000  00000000  000656b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002110  00000000  00000000  0006cce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e40  00000000  00000000  0006edf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036bdc  00000000  00000000  00070c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024c82  00000000  00000000  000a7814  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001100f9  00000000  00000000  000cc496  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc58f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a144  00000000  00000000  001dc60c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08017afc 	.word	0x08017afc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08017afc 	.word	0x08017afc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fe46 	bl	8007c68 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200219c8 	.word	0x200219c8

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 fe2e 	bl	8007c68 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200219c8 	.word	0x200219c8

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 fcb7 	bl	8007994 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 fa1e 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 fa18 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 fa12 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 fa0c 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 fa06 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 fa00 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 f9fa 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 f9f4 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 f9ee 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 f9e8 	bl	8006468 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 f9dc 	bl	8006468 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 f9d6 	bl	8006468 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fc35 	bl	8014998 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a fbe6 	bl	800b998 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a fbe2 	bl	800b998 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20021c1c 	.word	0x20021c1c
 80011f0:	20021900 	.word	0x20021900
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f9f1 	bl	8001840 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa05 	bl	800186c <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fcbf 	bl	8010dfa <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2002080c 	.word	0x2002080c

0800148c <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write+0x98>)
 80014c6:	f012 fad7 	bl	8013a78 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write+0x9c>)
 80014d8:	f00f fd03 	bl	8010ee2 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write+0x9c>)
 80014e2:	f00f fcfe 	bl	8010ee2 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write+0x9c>)
 80014f4:	f00f fa6f 	bl	80109d6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 f9d2 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	08017b18 	.word	0x08017b18
 8001524:	2002077c 	.word	0x2002077c
 8001528:	2002080c 	.word	0x2002080c
 800152c:	200207fc 	.word	0x200207fc

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f97a 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fc7a 	bl	8010e4e <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fee5 	bl	801132a <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f fc74 	bl	8010e4e <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f981 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f012 fa72 	bl	8013a78 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fca1 	bl	8010ee2 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f fa12 	bl	80109d6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f975 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fc13 	bl	8010dfa <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	2002067c 	.word	0x2002067c
 80015e4:	2001f538 	.word	0x2001f538
 80015e8:	08017b28 	.word	0x08017b28
 80015ec:	08017b18 	.word	0x08017b18
 80015f0:	2002077c 	.word	0x2002077c
 80015f4:	2002080c 	.word	0x2002080c
 80015f8:	200207fc 	.word	0x200207fc

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f914 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fc14 	bl	8010e4e <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fe7f 	bl	801132a <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fc0e 	bl	8010e4e <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f91b 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f012 fa10 	bl	8013a78 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f fc3f 	bl	8010ee2 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f f9b0 	bl	80109d6 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f913 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fbb1 	bl	8010dfa <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2002067c 	.word	0x2002067c
 80016a8:	2001f538 	.word	0x2001f538
 80016ac:	08017b28 	.word	0x08017b28
 80016b0:	08017b2c 	.word	0x08017b2c
 80016b4:	2002077c 	.word	0x2002077c
 80016b8:	2002080c 	.word	0x2002080c
 80016bc:	200207fc 	.word	0x200207fc

080016c0 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f8b2 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 80016dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80016e4:	481e      	ldr	r0, [pc, #120]	; (8001760 <sd_write_array_int+0xa0>)
 80016e6:	f00f fbb2 	bl	8010e4e <f_chdir>
		f_unlink(filepath);	//一回消す
 80016ea:	481e      	ldr	r0, [pc, #120]	; (8001764 <sd_write_array_int+0xa4>)
 80016ec:	f00f fe1d 	bl	801132a <f_unlink>
		f_chdir("..");
 80016f0:	481d      	ldr	r0, [pc, #116]	; (8001768 <sd_write_array_int+0xa8>)
 80016f2:	f00f fbac 	bl	8010e4e <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80016f6:	f000 f8b9 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80016fa:	2300      	movs	r3, #0
 80016fc:	82fb      	strh	r3, [r7, #22]
 80016fe:	e021      	b.n	8001744 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <sd_write_array_int+0xac>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <sd_write_array_int+0xb0>)
 8001712:	f012 f9b1 	bl	8013a78 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <sd_write_array_int+0xb4>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	4619      	mov	r1, r3
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <sd_write_array_int+0xb4>)
 800171e:	f00f fbe0 	bl	8010ee2 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <sd_write_array_int+0xb0>)
 8001724:	f7fe fd6c 	bl	8000200 <strlen>
 8001728:	4602      	mov	r2, r0
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <sd_write_array_int+0xb8>)
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <sd_write_array_int+0xb0>)
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <sd_write_array_int+0xb4>)
 8001730:	f00f f951 	bl	80109d6 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001734:	f000 f8b4 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	82fb      	strh	r3, [r7, #22]
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbd7      	blt.n	8001700 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <sd_write_array_int+0xb4>)
 8001752:	f00f fb52 	bl	8010dfa <f_close>

	return ret;
 8001756:	7d7b      	ldrb	r3, [r7, #21]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	2002067c 	.word	0x2002067c
 8001764:	2001f538 	.word	0x2001f538
 8001768:	08017b28 	.word	0x08017b28
 800176c:	08017b3c 	.word	0x08017b3c
 8001770:	2002077c 	.word	0x2002077c
 8001774:	2002080c 	.word	0x2002080c
 8001778:	200207fc 	.word	0x200207fc

0800177c <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f852 	bl	8001840 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800179c:	f000 f866 	bl	800186c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017a0:	e019      	b.n	80017d6 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 80017a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4913      	ldr	r1, [pc, #76]	; (80017fc <sd_read_array_int+0x80>)
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <sd_read_array_int+0x84>)
 80017b2:	f012 f9b5 	bl	8013b20 <siscanf>
		i++;
 80017b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	db03      	blt.n	80017d6 <sd_read_array_int+0x5a>
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <sd_read_array_int+0x88>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_read_array_int+0x84>)
 80017dc:	f00f ff80 	bl	80116e0 <f_gets>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1dd      	bne.n	80017a2 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017e6:	f000 f85b 	bl	80018a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <sd_read_array_int+0x88>)
 80017ec:	f00f fb05 	bl	8010dfa <f_close>

	return ret;
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08017b40 	.word	0x08017b40
 8001800:	2002077c 	.word	0x2002077c
 8001804:	2002080c 	.word	0x2002080c

08001808 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001812:	2201      	movs	r2, #1
 8001814:	4908      	ldr	r1, [pc, #32]	; (8001838 <sd_mount+0x30>)
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <sd_mount+0x34>)
 8001818:	f00e fd6c 	bl	80102f4 <f_mount>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <sd_mount+0x20>
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <sd_mount+0x24>
	else ret = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	08017b44 	.word	0x08017b44
 800183c:	2001f638 	.word	0x2001f638

08001840 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <create_path+0x24>)
 800184e:	f012 f9d6 	bl	8013bfe <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <create_path+0x28>)
 8001856:	f012 f9d2 	bl	8013bfe <strcpy>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2002067c 	.word	0x2002067c
 8001868:	2001f538 	.word	0x2001f538

0800186c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <fopen_folder_and_file+0x24>)
 8001872:	f00f fe1b 	bl	80114ac <f_mkdir>

	f_chdir(dirpath);
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <fopen_folder_and_file+0x24>)
 8001878:	f00f fae9 	bl	8010e4e <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800187c:	2213      	movs	r2, #19
 800187e:	4905      	ldr	r1, [pc, #20]	; (8001894 <fopen_folder_and_file+0x28>)
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <fopen_folder_and_file+0x2c>)
 8001882:	f00e fd7d 	bl	8010380 <f_open>

	f_chdir("..");
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <fopen_folder_and_file+0x30>)
 8001888:	f00f fae1 	bl	8010e4e <f_chdir>


}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	2002067c 	.word	0x2002067c
 8001894:	2001f538 	.word	0x2001f538
 8001898:	2002080c 	.word	0x2002080c
 800189c:	08017b28 	.word	0x08017b28

080018a0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e007      	b.n	80018bc <bufclear+0x1c>
		buffer[i] = '\0';
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <bufclear+0x30>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b7f      	cmp	r3, #127	; 0x7f
 80018c0:	ddf4      	ble.n	80018ac <bufclear+0xc>
	}
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2002077c 	.word	0x2002077c

080018d4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <read_byte+0x54>)
 80018f0:	f006 f850 	bl	8007994 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018f4:	f107 010f 	add.w	r1, r7, #15
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	2201      	movs	r2, #1
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <read_byte+0x58>)
 80018fe:	f009 fa11 	bl	800ad24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001902:	f107 010e 	add.w	r1, r7, #14
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	2201      	movs	r2, #1
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <read_byte+0x58>)
 800190c:	f009 fb3e 	bl	800af8c <HAL_SPI_Receive>
	CS_SET;
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <read_byte+0x54>)
 8001918:	f006 f83c 	bl	8007994 <HAL_GPIO_WritePin>

	return val;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020400 	.word	0x40020400
 800192c:	200218a8 	.word	0x200218a8

08001930 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <write_byte+0x54>)
 8001952:	f006 f81f 	bl	8007994 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001956:	f107 010f 	add.w	r1, r7, #15
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2201      	movs	r2, #1
 800195e:	480a      	ldr	r0, [pc, #40]	; (8001988 <write_byte+0x58>)
 8001960:	f009 f9e0 	bl	800ad24 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001964:	1db9      	adds	r1, r7, #6
 8001966:	2364      	movs	r3, #100	; 0x64
 8001968:	2201      	movs	r2, #1
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <write_byte+0x58>)
 800196c:	f009 f9da 	bl	800ad24 <HAL_SPI_Transmit>
	CS_SET;
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <write_byte+0x54>)
 8001978:	f006 f80c 	bl	8007994 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400
 8001988:	200218a8 	.word	0x200218a8

0800198c <IMU_init>:

uint16_t IMU_init() {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff ff9c 	bl	80018d4 <read_byte>
 800199c:	4603      	mov	r3, r0
 800199e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	2be0      	cmp	r3, #224	; 0xe0
 80019a4:	d119      	bne.n	80019da <IMU_init+0x4e>
		ret = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019aa:	2101      	movs	r1, #1
 80019ac:	2006      	movs	r0, #6
 80019ae:	f7ff ffbf 	bl	8001930 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019b2:	2110      	movs	r1, #16
 80019b4:	2003      	movs	r0, #3
 80019b6:	f7ff ffbb 	bl	8001930 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019ba:	2120      	movs	r1, #32
 80019bc:	207f      	movs	r0, #127	; 0x7f
 80019be:	f7ff ffb7 	bl	8001930 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019c2:	2106      	movs	r1, #6
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ffb3 	bl	8001930 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019ca:	2106      	movs	r1, #6
 80019cc:	2014      	movs	r0, #20
 80019ce:	f7ff ffaf 	bl	8001930 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019d2:	2100      	movs	r1, #0
 80019d4:	207f      	movs	r0, #127	; 0x7f
 80019d6:	f7ff ffab 	bl	8001930 <write_byte>
	}
	return ret;
 80019da:	88fb      	ldrh	r3, [r7, #6]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <read_gyro_data>:

void read_gyro_data() {
 80019e4:	b598      	push	{r3, r4, r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019e8:	2033      	movs	r0, #51	; 0x33
 80019ea:	f7ff ff73 	bl	80018d4 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2034      	movs	r0, #52	; 0x34
 80019f6:	f7ff ff6d 	bl	80018d4 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <read_gyro_data+0x64>)
 8001a04:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a06:	2035      	movs	r0, #53	; 0x35
 8001a08:	f7ff ff64 	bl	80018d4 <read_byte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	2036      	movs	r0, #54	; 0x36
 8001a14:	f7ff ff5e 	bl	80018d4 <read_byte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <read_gyro_data+0x68>)
 8001a22:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a24:	2037      	movs	r0, #55	; 0x37
 8001a26:	f7ff ff55 	bl	80018d4 <read_byte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21c      	sxth	r4, r3
 8001a30:	2038      	movs	r0, #56	; 0x38
 8001a32:	f7ff ff4f 	bl	80018d4 <read_byte>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <read_gyro_data+0x6c>)
 8001a40:	801a      	strh	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	bd98      	pop	{r3, r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20021844 	.word	0x20021844
 8001a4c:	20021842 	.word	0x20021842
 8001a50:	2002183c 	.word	0x2002183c

08001a54 <read_accel_data>:

void read_accel_data() {
 8001a54:	b598      	push	{r3, r4, r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001a58:	202d      	movs	r0, #45	; 0x2d
 8001a5a:	f7ff ff3b 	bl	80018d4 <read_byte>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21c      	sxth	r4, r3
 8001a64:	202e      	movs	r0, #46	; 0x2e
 8001a66:	f7ff ff35 	bl	80018d4 <read_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <read_accel_data+0x64>)
 8001a74:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001a76:	202f      	movs	r0, #47	; 0x2f
 8001a78:	f7ff ff2c 	bl	80018d4 <read_byte>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21c      	sxth	r4, r3
 8001a82:	2030      	movs	r0, #48	; 0x30
 8001a84:	f7ff ff26 	bl	80018d4 <read_byte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4323      	orrs	r3, r4
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <read_accel_data+0x68>)
 8001a92:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001a94:	2031      	movs	r0, #49	; 0x31
 8001a96:	f7ff ff1d 	bl	80018d4 <read_byte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21c      	sxth	r4, r3
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f7ff ff17 	bl	80018d4 <read_byte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <read_accel_data+0x6c>)
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	bd98      	pop	{r3, r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20021840 	.word	0x20021840
 8001abc:	20021846 	.word	0x20021846
 8001ac0:	2002183e 	.word	0x2002183e

08001ac4 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001ac4:	b490      	push	{r4, r7}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	805a      	strh	r2, [r3, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	809a      	strh	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	80da      	strh	r2, [r3, #6]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	811a      	strh	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	815a      	strh	r2, [r3, #10]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	f04f 0400 	mov.w	r4, #0
 8001afa:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc90      	pop	{r4, r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b14:	f7ff ff3a 	bl	800198c <IMU_init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <_ZN3IMU4initEv+0x24>)
 8001b22:	f011 ff13 	bl	801394c <iprintf>

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08017b48 	.word	0x08017b48

08001b34 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b3c:	f7ff ff52 	bl	80019e4 <read_gyro_data>
	read_accel_data();
 8001b40:	f7ff ff88 	bl	8001a54 <read_accel_data>

	xa_ = xa;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_ZN3IMU12updateValuesEv+0x54>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <_ZN3IMU12updateValuesEv+0x58>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <_ZN3IMU12updateValuesEv+0x5c>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <_ZN3IMU12updateValuesEv+0x60>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_ZN3IMU12updateValuesEv+0x64>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_ZN3IMU12updateValuesEv+0x68>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	815a      	strh	r2, [r3, #10]

}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20021840 	.word	0x20021840
 8001b8c:	20021846 	.word	0x20021846
 8001b90:	2002183e 	.word	0x2002183e
 8001b94:	20021844 	.word	0x20021844
 8001b98:	20021842 	.word	0x20021842
 8001b9c:	2002183c 	.word	0x2002183c

08001ba0 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcd0 	bl	8000554 <__aeabi_i2d>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bba:	f7fe fb7d 	bl	80002b8 <__aeabi_dsub>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bc6:	a315      	add	r3, pc, #84	; (adr r3, 8001c1c <_ZN3IMU8getOmegaEv+0x7c>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd0:	f7fe fe54 	bl	800087c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bde:	a311      	add	r3, pc, #68	; (adr r3, 8001c24 <_ZN3IMU8getOmegaEv+0x84>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fd1e 	bl	8000628 <__aeabi_dmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_ZN3IMU8getOmegaEv+0x78>)
 8001bfa:	f7fe fe3f 	bl	800087c <__aeabi_ddiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c06:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	40668000 	.word	0x40668000
 8001c1c:	66666666 	.word	0x66666666
 8001c20:	40306666 	.word	0x40306666
 8001c24:	54411744 	.word	0x54411744
 8001c28:	400921fb 	.word	0x400921fb

08001c2c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c30:	b08a      	sub	sp, #40	; 0x28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c36:	466b      	mov	r3, sp
 8001c38:	4698      	mov	r8, r3
	HAL_Delay(1000);
 8001c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3e:	f004 fc13 	bl	8006468 <HAL_Delay>
	int16_t num = 2000;
 8001c42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c46:	83bb      	strh	r3, [r7, #28]
	double zg_vals[num];
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	1e5d      	subs	r5, r3, #1
 8001c4e:	61bd      	str	r5, [r7, #24]
 8001c50:	462b      	mov	r3, r5
 8001c52:	3301      	adds	r3, #1
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	f04f 0400 	mov.w	r4, #0
 8001c62:	0194      	lsls	r4, r2, #6
 8001c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	f04f 0400 	mov.w	r4, #0
 8001c7c:	0194      	lsls	r4, r2, #6
 8001c7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	462b      	mov	r3, r5
 8001c86:	3301      	adds	r3, #1
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	ebad 0d03 	sub.w	sp, sp, r3
 8001c96:	466b      	mov	r3, sp
 8001c98:	3307      	adds	r3, #7
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	83fb      	strh	r3, [r7, #30]
 8001ca4:	8bfa      	ldrh	r2, [r7, #30]
 8001ca6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	da14      	bge.n	8001cd8 <_ZN3IMU11calibrationEv+0xac>
		zg_vals[i] = double(zg_);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cb4:	8bfe      	ldrh	r6, [r7, #30]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc4c 	bl	8000554 <__aeabi_i2d>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	00f2      	lsls	r2, r6, #3
 8001cc4:	440a      	add	r2, r1
 8001cc6:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f004 fbcc 	bl	8006468 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	83fb      	strh	r3, [r7, #30]
 8001cd6:	e7e5      	b.n	8001ca4 <_ZN3IMU11calibrationEv+0x78>
	for(const auto &v : zg_vals){
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	462b      	mov	r3, r5
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d017      	beq.n	8001d20 <_ZN3IMU11calibrationEv+0xf4>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf4:	6a38      	ldr	r0, [r7, #32]
 8001cf6:	f7fe fc3f 	bl	8000578 <__aeabi_f2d>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	f7fe fada 	bl	80002bc <__adddf3>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe ff82 	bl	8000c18 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	623b      	str	r3, [r7, #32]
	for(const auto &v : zg_vals){
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e7e3      	b.n	8001ce8 <_ZN3IMU11calibrationEv+0xbc>
	offset_ = sum / num;
 8001d20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d34:	ee16 0a90 	vmov	r0, s13
 8001d38:	f7fe fc1e 	bl	8000578 <__aeabi_f2d>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001d46:	46c5      	mov	sp, r8
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d54 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	b299      	uxth	r1, r3
 8001d68:	1dfa      	adds	r2, r7, #7
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <INA260_read+0x50>)
 8001d72:	f005 ff79 	bl	8007c68 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	f107 020c 	add.w	r2, r7, #12
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <INA260_read+0x50>)
 8001d86:	f006 f86d 	bl	8007e64 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d8a:	7b3b      	ldrb	r3, [r7, #12]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20021a5c 	.word	0x20021a5c

08001da8 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	717b      	strb	r3, [r7, #5]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	733b      	strb	r3, [r7, #12]
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	737b      	strb	r3, [r7, #13]
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001dd2:	793b      	ldrb	r3, [r7, #4]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	2364      	movs	r3, #100	; 0x64
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2303      	movs	r3, #3
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <INA260_write+0x48>)
 8001de2:	f005 ff41 	bl	8007c68 <HAL_I2C_Master_Transmit>
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20021a5c 	.word	0x20021a5c

08001df4 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	71bb      	strb	r3, [r7, #6]
 8001e02:	4613      	mov	r3, r2
 8001e04:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e06:	797b      	ldrb	r3, [r7, #5]
 8001e08:	79ba      	ldrb	r2, [r7, #6]
 8001e0a:	79f9      	ldrb	r1, [r7, #7]
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff ffcb 	bl	8001da8 <INA260_write>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	461a      	mov	r2, r3
 8001e28:	21df      	movs	r1, #223	; 0xdf
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff ffe2 	bl	8001df4 <setConfig>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
{

}
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e60:	482a      	ldr	r0, [pc, #168]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001e62:	f005 fd7f 	bl	8007964 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <_ZN8JoyStick8getValueEv+0x2e>
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4823      	ldr	r0, [pc, #140]	; (8001f10 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e82:	f005 fd6f 	bl	8007964 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <_ZN8JoyStick8getValueEv+0x4e>
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ea4:	f005 fd5e 	bl	8007964 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <_ZN8JoyStick8getValueEv+0x70>
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ec4:	f005 fd4e 	bl	8007964 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <_ZN8JoyStick8getValueEv+0x90>
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ee4:	f005 fd3e 	bl	8007964 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <_ZN8JoyStick8getValueEv+0xb0>
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f00:	89fb      	ldrh	r3, [r7, #14]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40020400 	.word	0x40020400

08001f18 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b52      	cmp	r3, #82	; 0x52
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4856      	ldr	r0, [pc, #344]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f005 fd2f 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4853      	ldr	r0, [pc, #332]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f005 fd29 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4850      	ldr	r0, [pc, #320]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f005 fd23 	bl	8007994 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f4e:	e098      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b47      	cmp	r3, #71	; 0x47
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	484b      	ldr	r0, [pc, #300]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f005 fd19 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4848      	ldr	r0, [pc, #288]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f005 fd13 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4845      	ldr	r0, [pc, #276]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f005 fd0d 	bl	8007994 <HAL_GPIO_WritePin>
}
 8001f7a:	e082      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b42      	cmp	r3, #66	; 0x42
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4840      	ldr	r0, [pc, #256]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f005 fd03 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	483d      	ldr	r0, [pc, #244]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f005 fcfd 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	483a      	ldr	r0, [pc, #232]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f005 fcf7 	bl	8007994 <HAL_GPIO_WritePin>
}
 8001fa6:	e06c      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b43      	cmp	r3, #67	; 0x43
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4835      	ldr	r0, [pc, #212]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f005 fced 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4832      	ldr	r0, [pc, #200]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f005 fce7 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	482f      	ldr	r0, [pc, #188]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f005 fce1 	bl	8007994 <HAL_GPIO_WritePin>
}
 8001fd2:	e056      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b4d      	cmp	r3, #77	; 0x4d
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	482a      	ldr	r0, [pc, #168]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f005 fcd7 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4827      	ldr	r0, [pc, #156]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f005 fcd1 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4824      	ldr	r0, [pc, #144]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f005 fccb 	bl	8007994 <HAL_GPIO_WritePin>
}
 8001ffe:	e040      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b59      	cmp	r3, #89	; 0x59
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	481f      	ldr	r0, [pc, #124]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800200e:	f005 fcc1 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	481c      	ldr	r0, [pc, #112]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800201a:	f005 fcbb 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	4819      	ldr	r0, [pc, #100]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002026:	f005 fcb5 	bl	8007994 <HAL_GPIO_WritePin>
}
 800202a:	e02a      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b57      	cmp	r3, #87	; 0x57
 8002030:	d112      	bne.n	8002058 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4814      	ldr	r0, [pc, #80]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800203a:	f005 fcab 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002046:	f005 fca5 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	480e      	ldr	r0, [pc, #56]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002052:	f005 fc9f 	bl	8007994 <HAL_GPIO_WritePin>
}
 8002056:	e014      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b7e      	cmp	r3, #126	; 0x7e
 800205c:	d111      	bne.n	8002082 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002066:	f005 fc95 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002072:	f005 fc8f 	bl	8007994 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800207e:	f005 fc89 	bl	8007994 <HAL_GPIO_WritePin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020000 	.word	0x40020000

08002090 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
 800209c:	4613      	mov	r3, r2
 800209e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80020a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020b0:	f005 fc70 	bl	8007994 <HAL_GPIO_WritePin>
 80020b4:	e009      	b.n	80020ca <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80020b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020c6:	f005 fc65 	bl	8007994 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020da:	f005 fc5b 	bl	8007994 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020de:	e009      	b.n	80020f4 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020f0:	f005 fc50 	bl	8007994 <HAL_GPIO_WritePin>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020000 	.word	0x40020000

08002100 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002100:	b580      	push	{r7, lr}
 8002102:	b092      	sub	sp, #72	; 0x48
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe92 	bl	8001e38 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	331c      	adds	r3, #28
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	429a      	cmp	r2, r3
 8002128:	d008      	beq.n	800213c <_ZN10LineSensorC1Ev+0x3c>
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002136:	3302      	adds	r3, #2
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
 800213a:	e7f2      	b.n	8002122 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	429a      	cmp	r2, r3
 8002154:	d009      	beq.n	800216a <_ZN10LineSensorC1Ev+0x6a>
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	623b      	str	r3, [r7, #32]
		s = 0;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002164:	3304      	adds	r3, #4
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
 8002168:	e7f1      	b.n	800214e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	429a      	cmp	r2, r3
 8002182:	d009      	beq.n	8002198 <_ZN10LineSensorC1Ev+0x98>
 8002184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002186:	617b      	str	r3, [r7, #20]
		m = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	3304      	adds	r3, #4
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002196:	e7f1      	b.n	800217c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	3338      	adds	r3, #56	; 0x38
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d009      	beq.n	80021c6 <_ZN10LineSensorC1Ev+0xc6>
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	60bb      	str	r3, [r7, #8]
		s = 1;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	3304      	adds	r3, #4
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c4:	e7f1      	b.n	80021aa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	3748      	adds	r7, #72	; 0x48
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	220e      	movs	r2, #14
 80021dc:	4619      	mov	r1, r3
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021e0:	f004 f9a8 	bl	8006534 <HAL_ADC_Start_DMA>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20021980 	.word	0x20021980

080021f0 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	dc2f      	bgt.n	8002262 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3392      	adds	r3, #146	; 0x92
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	33a0      	adds	r3, #160	; 0xa0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	1a5b      	subs	r3, r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	440b      	add	r3, r1
 800224e:	3306      	adds	r3, #6
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e7cc      	b.n	80021fc <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800226c:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d902      	bls.n	800227c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]


}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000200 	.word	0x20000200

0800228c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800229a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800229e:	2b0d      	cmp	r3, #13
 80022a0:	f200 8087 	bhi.w	80023b2 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d81c      	bhi.n	80022ec <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80022b2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022b6:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022ba:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4423      	add	r3, r4
 80022ca:	3306      	adds	r3, #6
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4403      	add	r3, r0
 80022d0:	3304      	adds	r3, #4
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	008b      	lsls	r3, r1, #2
 80022d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022da:	440b      	add	r3, r1
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022e4:	3301      	adds	r3, #1
 80022e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ea:	e7de      	b.n	80022aa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d84d      	bhi.n	8002396 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002308:	2b09      	cmp	r3, #9
 800230a:	d83e      	bhi.n	800238a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800230c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002316:	4413      	add	r3, r2
 8002318:	3b30      	subs	r3, #48	; 0x30
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d521      	bpl.n	800237e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800233a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002344:	4413      	add	r3, r2
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 800234c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002350:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800235a:	440a      	add	r2, r1
 800235c:	3a30      	subs	r2, #48	; 0x30
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002366:	440b      	add	r3, r1
 8002368:	3b30      	subs	r3, #48	; 0x30
 800236a:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 800236c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002376:	4413      	add	r3, r2
 8002378:	3b30      	subs	r3, #48	; 0x30
 800237a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800237e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002382:	3301      	adds	r3, #1
 8002384:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002388:	e7bc      	b.n	8002304 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800238a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800238e:	3301      	adds	r3, #1
 8002390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002394:	e7ad      	b.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	33b0      	adds	r3, #176	; 0xb0
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023aa:	3301      	adds	r3, #1
 80023ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023b0:	e773      	b.n	800229a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 80023b2:	bf00      	nop
 80023b4:	3738      	adds	r7, #56	; 0x38
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc90      	pop	{r4, r7}
 80023ba:	4770      	bx	lr

080023bc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b0a9      	sub	sp, #164	; 0xa4
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f004 f84f 	bl	8006468 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80023d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023d4:	2b0d      	cmp	r3, #13
 80023d6:	d823      	bhi.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 80023d8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	32b0      	adds	r2, #176	; 0xb0
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	440a      	add	r2, r1
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023f0:	440b      	add	r3, r1
 80023f2:	3b60      	subs	r3, #96	; 0x60
 80023f4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80023f6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	32b0      	adds	r2, #176	; 0xb0
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	440a      	add	r2, r1
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800240e:	440b      	add	r3, r1
 8002410:	3b98      	subs	r3, #152	; 0x98
 8002412:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002414:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002418:	3301      	adds	r3, #1
 800241a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800241e:	e7d7      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd12 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 800242c:	4603      	mov	r3, r0
 800242e:	2b02      	cmp	r3, #2
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d079      	beq.n	8002530 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800243c:	2300      	movs	r3, #0
 800243e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002442:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002446:	2b0d      	cmp	r3, #13
 8002448:	d850      	bhi.n	80024ec <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 800244a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002454:	4413      	add	r3, r2
 8002456:	3b60      	subs	r3, #96	; 0x60
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	33b0      	adds	r3, #176	; 0xb0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d50f      	bpl.n	8002496 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 8002476:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	32b0      	adds	r2, #176	; 0xb0
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	440a      	add	r2, r1
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800248e:	440b      	add	r3, r1
 8002490:	3b60      	subs	r3, #96	; 0x60
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e024      	b.n	80024e0 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 8002496:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024a0:	4413      	add	r3, r2
 80024a2:	3b98      	subs	r3, #152	; 0x98
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	33b0      	adds	r3, #176	; 0xb0
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	dd0e      	ble.n	80024e0 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 80024c2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	32b0      	adds	r2, #176	; 0xb0
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	440a      	add	r2, r1
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024da:	440b      	add	r3, r1
 80024dc:	3b98      	subs	r3, #152	; 0x98
 80024de:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e4:	3301      	adds	r3, #1
 80024e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ea:	e7aa      	b.n	8002442 <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ff6a 	bl	80033cc <_ZN12RotarySwitch8getValueEv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800250e:	2201      	movs	r2, #1
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fdbb 	bl	8002090 <_ZN3LED2LREaa>
 800251a:	e781      	b.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002522:	2200      	movs	r2, #0
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fdb1 	bl	8002090 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800252e:	e777      	b.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8002530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800254a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800254e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002552:	429a      	cmp	r2, r3
 8002554:	d016      	beq.n	8002584 <_ZN10LineSensor11calibrationEv+0x1c8>
 8002556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800255e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe f807 	bl	8000578 <__aeabi_f2d>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	461a      	mov	r2, r3
 8002570:	4623      	mov	r3, r4
 8002572:	4842      	ldr	r0, [pc, #264]	; (800267c <_ZN10LineSensor11calibrationEv+0x2c0>)
 8002574:	f011 f9ea 	bl	801394c <iprintf>
	for(const auto &m : max_values){
 8002578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800257c:	3304      	adds	r3, #4
 800257e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002582:	e7e2      	b.n	800254a <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8002584:	200a      	movs	r0, #10
 8002586:	f011 f9f9 	bl	801397c <putchar>
	for(const auto &m : min_values){
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d014      	beq.n	80025d6 <_ZN10LineSensor11calibrationEv+0x21a>
 80025ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffde 	bl	8000578 <__aeabi_f2d>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	482d      	ldr	r0, [pc, #180]	; (800267c <_ZN10LineSensor11calibrationEv+0x2c0>)
 80025c6:	f011 f9c1 	bl	801394c <iprintf>
	for(const auto &m : min_values){
 80025ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ce:	3304      	adds	r3, #4
 80025d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025d4:	e7e5      	b.n	80025a2 <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80025d6:	200a      	movs	r0, #10
 80025d8:	f011 f9d0 	bl	801397c <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025dc:	2300      	movs	r3, #0
 80025de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80025e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025e6:	2b0d      	cmp	r3, #13
 80025e8:	d826      	bhi.n	8002638 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80025f4:	4413      	add	r3, r2
 80025f6:	3b60      	subs	r3, #96	; 0x60
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002606:	4413      	add	r3, r2
 8002608:	3b98      	subs	r3, #152	; 0x98
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002680 <_ZN10LineSensor11calibrationEv+0x2c4>
 800261a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	3392      	adds	r3, #146	; 0x92
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	3301      	adds	r3, #1
 8002632:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002636:	e7d4      	b.n	80025e2 <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002638:	2300      	movs	r3, #0
 800263a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800263e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d815      	bhi.n	8002672 <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8002646:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800264a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002654:	440a      	add	r2, r1
 8002656:	3a98      	subs	r2, #152	; 0x98
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	33a0      	adds	r3, #160	; 0xa0
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3304      	adds	r3, #4
 8002664:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002666:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800266a:	3301      	adds	r3, #1
 800266c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002670:	e7e5      	b.n	800263e <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 8002672:	bf00      	nop
 8002674:	37a4      	adds	r7, #164	; 0xa4
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	08017b58 	.word	0x08017b58
 8002680:	447a0000 	.word	0x447a0000

08002684 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3338      	adds	r3, #56	; 0x38
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d012      	beq.n	80026d0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80026f0 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	db02      	blt.n	80026c8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026c2:	7ffb      	ldrb	r3, [r7, #31]
 80026c4:	3301      	adds	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3304      	adds	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e7e8      	b.n	80026a2 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	2b0d      	cmp	r3, #13
 80026d4:	d902      	bls.n	80026dc <_ZN10LineSensor13emergencyStopEv+0x58>
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	e001      	b.n	80026e0 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80026dc:	2300      	movs	r3, #0
 80026de:	75fb      	strb	r3, [r7, #23]

	return flag;
 80026e0:	7dfb      	ldrb	r3, [r7, #23]

}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	44160000 	.word	0x44160000

080026f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800279c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80027bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80027c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80027d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80027e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80027ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80027f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f4:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	ee07 3a90 	vmov	s15, r3

}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	0000      	movs	r0, r0
	...

08002810 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff95 	bl	8002748 <_ZN9LineTrace9calcErrorEv>
 800281e:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	edd3 7a04 	vldr	s15, [r3, #16]
 8002828:	ed97 7a07 	vldr	s14, [r7, #28]
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	ed93 7a05 	vldr	s14, [r3, #20]
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <_ZN9LineTrace3pidEv+0x130>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	edd7 6a07 	vldr	s13, [r7, #28]
 8002844:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284c:	ee17 0a90 	vmov	r0, s15
 8002850:	f7fd fe92 	bl	8000578 <__aeabi_f2d>
 8002854:	a338      	add	r3, pc, #224	; (adr r3, 8002938 <_ZN9LineTrace3pidEv+0x128>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fe f80f 	bl	800087c <__aeabi_ddiv>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4618      	mov	r0, r3
 8002864:	4621      	mov	r1, r4
 8002866:	f7fe f9d7 	bl	8000c18 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe80 	bl	8000578 <__aeabi_f2d>
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002882:	edd7 7a07 	vldr	s15, [r7, #28]
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	ee17 0a90 	vmov	r0, s15
 800288e:	f7fd fe73 	bl	8000578 <__aeabi_f2d>
 8002892:	a329      	add	r3, pc, #164	; (adr r3, 8002938 <_ZN9LineTrace3pidEv+0x128>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd fec6 	bl	8000628 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fd0a 	bl	80002bc <__adddf3>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	4618      	mov	r0, r3
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fe f9b2 	bl	8000c18 <__aeabi_d2f>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028b8:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80028c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80028e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80028e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fe:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681c      	ldr	r4, [r3, #0]
 8002906:	6938      	ldr	r0, [r7, #16]
 8002908:	f7fd fe36 	bl	8000578 <__aeabi_f2d>
 800290c:	4605      	mov	r5, r0
 800290e:	460e      	mov	r6, r1
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fd fe31 	bl	8000578 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	ec43 2b11 	vmov	d1, r2, r3
 800291e:	ec46 5b10 	vmov	d0, r5, r6
 8002922:	4620      	mov	r0, r4
 8002924:	f000 fa10 	bl	8002d48 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002928:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_ZN9LineTrace3pidEv+0x130>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	6013      	str	r3, [r2, #0]

}
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002936:	bf00      	nop
 8002938:	d2f1a9fc 	.word	0xd2f1a9fc
 800293c:	3f50624d 	.word	0x3f50624d
 8002940:	20000204 	.word	0x20000204
 8002944:	20000208 	.word	0x20000208

08002948 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	ed87 0a02 	vstr	s0, [r7, #8]
 8002954:	edc7 0a01 	vstr	s1, [r7, #4]
 8002958:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <_ZN9LineTrace4flipEv+0x16>
		pid();
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff21 	bl	8002810 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe56 	bl	8002684 <_ZN10LineSensor13emergencyStopEv>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002a20 <_ZN9LineTrace4flipEv+0x68>
 80029e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002a20 <_ZN9LineTrace4flipEv+0x68>
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9ac 	bl	8002d48 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	330c      	adds	r3, #12
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb48 	bl	8002090 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002a00:	e007      	b.n	8002a12 <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	330c      	adds	r3, #12
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb3f 	bl	8002090 <_ZN3LED2LREaa>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	f3af 8000 	nop.w
	...

08002a28 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	771a      	strb	r2, [r3, #28]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	0000      	movs	r0, r0
 8002a44:	0000      	movs	r0, r0
	...

08002a48 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002a70 <_ZN9LineTrace4stopEv+0x28>
 8002a5e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002a70 <_ZN9LineTrace4stopEv+0x28>
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f970 	bl	8002d48 <_ZN5Motor8setRatioEdd>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
	...

08002a78 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a86:	3330      	adds	r3, #48	; 0x30
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	2200      	movs	r2, #0
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a9e:	3334      	adds	r3, #52	; 0x34
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002ac0:	f7fe fea2 	bl	8001808 <sd_mount>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002ad4:	4816      	ldr	r0, [pc, #88]	; (8002b30 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002ad6:	f010 ffc1 	bl	8013a5c <puts>
	  ret = true;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
 8002ade:	e004      	b.n	8002aea <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002ae0:	4814      	ldr	r0, [pc, #80]	; (8002b34 <_ZN6Logger10sdCardInitEv+0x80>)
 8002ae2:	f010 ffbb 	bl	8013a5c <puts>
	  ret = false;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002aee:	f107 0210 	add.w	r2, r7, #16
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	2201      	movs	r2, #1
 8002afa:	490f      	ldr	r1, [pc, #60]	; (8002b38 <_ZN6Logger10sdCardInitEv+0x84>)
 8002afc:	480f      	ldr	r0, [pc, #60]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002afe:	f7fe fddf 	bl	80016c0 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2201      	movs	r2, #1
 8002b08:	490b      	ldr	r1, [pc, #44]	; (8002b38 <_ZN6Logger10sdCardInitEv+0x84>)
 8002b0a:	480c      	ldr	r0, [pc, #48]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002b0c:	f7fe fe36 	bl	800177c <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 8002b10:	f107 020c 	add.w	r2, r7, #12
 8002b14:	2301      	movs	r3, #1
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4908      	ldr	r1, [pc, #32]	; (8002b40 <_ZN6Logger10sdCardInitEv+0x8c>)
 8002b1e:	4807      	ldr	r0, [pc, #28]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002b20:	f7fe fdce 	bl	80016c0 <sd_write_array_int>

	return ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	08017b98 	.word	0x08017b98
 8002b34:	08017ba8 	.word	0x08017ba8
 8002b38:	08017bb8 	.word	0x08017bb8
 8002b3c:	08017bc4 	.word	0x08017bc4
 8002b40:	08017bcc 	.word	0x08017bcc

08002b44 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b56:	3330      	adds	r3, #48	; 0x30
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d024      	beq.n	8002ba8 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b86:	3332      	adds	r3, #50	; 0x32
 8002b88:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d905      	bls.n	8002ba8 <_ZN6Logger8storeLogEf+0x64>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	801a      	strh	r2, [r3, #0]
	}
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68b8      	ldr	r0, [r7, #8]
 8002bd0:	f7fe fcae 	bl	8001530 <sd_write_array_float>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	f7fe fcfd 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002c08:	33b0      	adds	r3, #176	; 0xb0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f7fe fcf1 	bl	80015fc <sd_write_array_double>
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c30:	3330      	adds	r3, #48	; 0x30
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c50:	3330      	adds	r3, #48	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	805a      	strh	r2, [r3, #2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <_ZN5Motor4initEv+0x20>)
 8002c90:	f008 fdb2 	bl	800b7f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002c94:	210c      	movs	r1, #12
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <_ZN5Motor4initEv+0x20>)
 8002c98:	f008 fdae 	bl	800b7f8 <HAL_TIM_PWM_Start>

}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20021940 	.word	0x20021940

08002ca8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0d      	bge.n	8002cd6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc0:	481f      	ldr	r0, [pc, #124]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cc2:	f004 fe67 	bl	8007994 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	425b      	negs	r3, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	81fb      	strh	r3, [r7, #14]
 8002cd4:	e00a      	b.n	8002cec <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cde:	f004 fe59 	bl	8007994 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da0d      	bge.n	8002d12 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cfc:	4810      	ldr	r0, [pc, #64]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cfe:	f004 fe49 	bl	8007994 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	425b      	negs	r3, r3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	81bb      	strh	r3, [r7, #12]
 8002d10:	e00a      	b.n	8002d28 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d18:	4809      	ldr	r0, [pc, #36]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002d1a:	f004 fe3b 	bl	8007994 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002d28:	89fa      	ldrh	r2, [r7, #14]
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002d30:	89ba      	ldrh	r2, [r7, #12]
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	20021940 	.word	0x20021940

08002d48 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6178      	str	r0, [r7, #20]
 8002d50:	ed87 0b02 	vstr	d0, [r7, #8]
 8002d54:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d62:	f7fd fef1 	bl	8000b48 <__aeabi_dcmpgt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <_ZN5Motor8setRatioEdd+0x30>
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	4c2b      	ldr	r4, [pc, #172]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d72:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002d76:	e00e      	b.n	8002d96 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d82:	f7fd fec3 	bl	8000b0c <__aeabi_dcmplt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <_ZN5Motor8setRatioEdd+0x4e>
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	4c24      	ldr	r4, [pc, #144]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d92:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002da0:	f7fd fed2 	bl	8000b48 <__aeabi_dcmpgt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <_ZN5Motor8setRatioEdd+0x6e>
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	4c1c      	ldr	r4, [pc, #112]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002db0:	e9c7 3400 	strd	r3, r4, [r7]
 8002db4:	e00e      	b.n	8002dd4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc0:	f7fd fea4 	bl	8000b0c <__aeabi_dcmplt>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <_ZN5Motor8setRatioEdd+0x8c>
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	4c15      	ldr	r4, [pc, #84]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002dd0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8002dda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dde:	f7fd fc23 	bl	8000628 <__aeabi_dmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	4618      	mov	r0, r3
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7fd fecd 	bl	8000b88 <__aeabi_d2iz>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8002dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e00:	f7fd fc12 	bl	8000628 <__aeabi_dmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f7fd febc 	bl	8000b88 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	805a      	strh	r2, [r3, #2]

}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}
 8002e20:	3ff00000 	.word	0x3ff00000
 8002e24:	bff00000 	.word	0xbff00000
 8002e28:	409c2000 	.word	0x409c2000

08002e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc90      	pop	{r4, r7}
 8002e80:	4770      	bx	lr
 8002e82:	0000      	movs	r0, r0
 8002e84:	0000      	movs	r0, r0
	...

08002e88 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fe82 	bl	8001ba0 <_ZN3IMU8getOmegaEv>
 8002e9c:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fa66 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002eaa:	ec54 3b10 	vmov	r3, r4, d0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	f7fd feb1 	bl	8000c18 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002eba:	a358      	add	r3, pc, #352	; (adr r3, 800301c <_ZN8Odometry12calcPotitionEv+0x194>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec4:	f7fd fbb0 	bl	8000628 <__aeabi_dmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7fd fb4d 	bl	8000578 <__aeabi_f2d>
 8002ede:	4682      	mov	sl, r0
 8002ee0:	468b      	mov	fp, r1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef6:	f7fd fcc1 	bl	800087c <__aeabi_ddiv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f7fd f9db 	bl	80002bc <__adddf3>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b17 	vmov	d7, r2, r3
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f00e fd43 	bl	80119a0 <cos>
 8002f1a:	ec53 2b10 	vmov	r2, r3, d0
 8002f1e:	4650      	mov	r0, sl
 8002f20:	4659      	mov	r1, fp
 8002f22:	f7fd fb81 	bl	8000628 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9c5 	bl	80002bc <__adddf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7fd fb18 	bl	8000578 <__aeabi_f2d>
 8002f48:	4682      	mov	sl, r0
 8002f4a:	468b      	mov	fp, r1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f60:	f7fd fc8c 	bl	800087c <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd f9a6 	bl	80002bc <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ec43 2b17 	vmov	d7, r2, r3
 8002f78:	eeb0 0a47 	vmov.f32	s0, s14
 8002f7c:	eef0 0a67 	vmov.f32	s1, s15
 8002f80:	f00e fd52 	bl	8011a28 <sin>
 8002f84:	ec53 2b10 	vmov	r2, r3, d0
 8002f88:	4650      	mov	r0, sl
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	f7fd fb4c 	bl	8000628 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd f990 	bl	80002bc <__adddf3>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f7fd f981 	bl	80002bc <__adddf3>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4621      	mov	r1, r4
 8002fce:	f7fd fe23 	bl	8000c18 <__aeabi_d2f>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002fd6:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	f7fd fe19 	bl	8000c18 <__aeabi_d2f>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002fea:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	f7fd fe0f 	bl	8000c18 <__aeabi_d2f>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002ffe:	601a      	str	r2, [r3, #0]


}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	f3af 8000 	nop.w
 8003010:	2000020c 	.word	0x2000020c
 8003014:	20000210 	.word	0x20000210
 8003018:	20000214 	.word	0x20000214
 800301c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003020:	3f50624d 	.word	0x3f50624d

08003024 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	calcPotition();
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff2b 	bl	8002e88 <_ZN8Odometry12calcPotitionEv>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 800303a:	b490      	push	{r4, r7}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	return x_;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003048:	ec44 3b17 	vmov	d7, r3, r4
}
 800304c:	eeb0 0a47 	vmov.f32	s0, s14
 8003050:	eef0 0a67 	vmov.f32	s1, s15
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bc90      	pop	{r4, r7}
 800305a:	4770      	bx	lr

0800305c <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 800305c:	b490      	push	{r4, r7}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	return y_;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800306a:	ec44 3b17 	vmov	d7, r3, r4
}
 800306e:	eeb0 0a47 	vmov.f32	s0, s14
 8003072:	eef0 0a67 	vmov.f32	s1, s15
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bc90      	pop	{r4, r7}
 800307c:	4770      	bx	lr

0800307e <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 800307e:	b490      	push	{r4, r7}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	return theta_;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800308c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003090:	eeb0 0a47 	vmov.f32	s0, s14
 8003094:	eef0 0a67 	vmov.f32	s1, s15
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bc90      	pop	{r4, r7}
 800309e:	4770      	bx	lr

080030a0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80030a0:	b490      	push	{r4, r7}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	x_ = 0;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc90      	pop	{r4, r7}
 80030da:	4770      	bx	lr

080030dc <_ZN13PathFollowingC1Ev>:
 */

#include "PathFollowing.hpp"
#include "path_following.h"

PathFollowing::PathFollowing() : execute_flag_(false)
 80030dc:	b490      	push	{r4, r7}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
{
	rtParam.kx = 0;
 80030ea:	4a29      	ldr	r2, [pc, #164]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	f04f 0400 	mov.w	r4, #0
 80030f4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80030f8:	4a25      	ldr	r2, [pc, #148]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	f04f 0400 	mov.w	r4, #0
 8003102:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003106:	4a22      	ldr	r2, [pc, #136]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	f04f 0400 	mov.w	r4, #0
 8003110:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003116:	f04f 0300 	mov.w	r3, #0
 800311a:	f04f 0400 	mov.w	r4, #0
 800311e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8003122:	4a1c      	ldr	r2, [pc, #112]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	f04f 0400 	mov.w	r4, #0
 800312c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8003130:	4a18      	ldr	r2, [pc, #96]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	f04f 0400 	mov.w	r4, #0
 800313a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800313e:	4a15      	ldr	r2, [pc, #84]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f04f 0400 	mov.w	r4, #0
 8003148:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800314c:	4a11      	ldr	r2, [pc, #68]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	f04f 0400 	mov.w	r4, #0
 8003156:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	f04f 0400 	mov.w	r4, #0
 8003164:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003168:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <_ZN13PathFollowingC1Ev+0xbc>)
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	f04f 0400 	mov.w	r4, #0
 8003172:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003176:	4a08      	ldr	r2, [pc, #32]	; (8003198 <_ZN13PathFollowingC1Ev+0xbc>)
 8003178:	f04f 0300 	mov.w	r3, #0
 800317c:	f04f 0400 	mov.w	r4, #0
 8003180:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bc90      	pop	{r4, r7}
 800318e:	4770      	bx	lr
 8003190:	20021e40 	.word	0x20021e40
 8003194:	20021dd0 	.word	0x20021dd0
 8003198:	20021e30 	.word	0x20021e30

0800319c <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80031a4:	f001 fd6a 	bl	8004c7c <path_following_initialize>
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80031b0:	b490      	push	{r4, r7}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	61f8      	str	r0, [r7, #28]
 80031b8:	ed87 0b04 	vstr	d0, [r7, #16]
 80031bc:	ed87 1b02 	vstr	d1, [r7, #8]
 80031c0:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031c6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031ca:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80031ce:	4a07      	ldr	r2, [pc, #28]	; (80031ec <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031d0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031d4:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031de:	e9c2 3404 	strd	r3, r4, [r2, #16]

}
 80031e2:	bf00      	nop
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc90      	pop	{r4, r7}
 80031ea:	4770      	bx	lr
 80031ec:	20021e40 	.word	0x20021e40

080031f0 <_ZN13PathFollowing13setTargetPathEddd>:

void PathFollowing::setTargetPath(double x, double y, double th)
{
 80031f0:	b490      	push	{r4, r7}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	61f8      	str	r0, [r7, #28]
 80031f8:	ed87 0b04 	vstr	d0, [r7, #16]
 80031fc:	ed87 1b02 	vstr	d1, [r7, #8]
 8003200:	ed87 2b00 	vstr	d2, [r7]
	rtU.target_x = x;
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 8003206:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800320a:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = y;
 800320e:	4a07      	ldr	r2, [pc, #28]	; (800322c <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 8003210:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003214:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = th;
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 800321a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800321e:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8003222:	bf00      	nop
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bc90      	pop	{r4, r7}
 800322a:	4770      	bx	lr
 800322c:	20021dd0 	.word	0x20021dd0

08003230 <_ZN13PathFollowing14setCurrentPathEddd>:

void PathFollowing::setCurrentPath(double x, double y, double th)
{
 8003230:	b490      	push	{r4, r7}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	61f8      	str	r0, [r7, #28]
 8003238:	ed87 0b04 	vstr	d0, [r7, #16]
 800323c:	ed87 1b02 	vstr	d1, [r7, #8]
 8003240:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 8003244:	4a09      	ldr	r2, [pc, #36]	; (800326c <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003246:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800324a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 800324e:	4a07      	ldr	r2, [pc, #28]	; (800326c <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003250:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003254:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 8003258:	4a04      	ldr	r2, [pc, #16]	; (800326c <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 800325a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800325e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 8003262:	bf00      	nop
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bc90      	pop	{r4, r7}
 800326a:	4770      	bx	lr
 800326c:	20021dd0 	.word	0x20021dd0

08003270 <_ZN13PathFollowing18getTargetVelocitysERdS0_>:

void PathFollowing::getTargetVelocitys(double &v, double &omega)
{
 8003270:	b490      	push	{r4, r7}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
	v = rtY.V_tar;
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 800327e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	e9c2 3400 	strd	r3, r4, [r2]
	omega = rtY.tar;
 8003288:	4b05      	ldr	r3, [pc, #20]	; (80032a0 <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 800328a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bc90      	pop	{r4, r7}
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20021e30 	.word	0x20021e30

080032a4 <_ZN13PathFollowing4flipEv>:
void PathFollowing::flip()
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	if(execute_flag_ == true){
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <_ZN13PathFollowing4flipEv+0x14>
		path_following_step();
 80032b4:	f001 fbda 	bl	8004a6c <path_following_step>
	}
}
 80032b8:	bf00      	nop
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_ZN13PathFollowing5startEv>:

void PathFollowing::start()
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	execute_flag_ = true;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	701a      	strb	r2, [r3, #0]
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <_ZN13PathFollowing4stopEv>:

void PathFollowing::stop()
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
	execute_flag_ = false;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80032fc:	2088      	movs	r0, #136	; 0x88
 80032fe:	f7fe fd8c 	bl	8001e1a <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8003302:	2080      	movs	r0, #128	; 0x80
 8003304:	f7fe fd89 	bl	8001e1a <INA260_init>
}
 8003308:	bf00      	nop
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8003310:	b590      	push	{r4, r7, lr}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8003318:	2188      	movs	r1, #136	; 0x88
 800331a:	2002      	movs	r0, #2
 800331c:	f7fe fd1a 	bl	8001d54 <INA260_read>
 8003320:	4603      	mov	r3, r0
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f916 	bl	8000554 <__aeabi_i2d>
 8003328:	a30c      	add	r3, pc, #48	; (adr r3, 800335c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f7fd f97b 	bl	8000628 <__aeabi_dmul>
 8003332:	4603      	mov	r3, r0
 8003334:	460c      	mov	r4, r1
 8003336:	4618      	mov	r0, r3
 8003338:	4621      	mov	r1, r4
 800333a:	f7fd fc6d 	bl	8000c18 <__aeabi_d2f>
 800333e:	4602      	mov	r2, r0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a03      	ldr	r2, [pc, #12]	; (8003358 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	f3af 8000 	nop.w
 8003358:	20000218 	.word	0x20000218
 800335c:	47ae147b 	.word	0x47ae147b
 8003360:	3f547ae1 	.word	0x3f547ae1
 8003364:	00000000 	.word	0x00000000

08003368 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003370:	2300      	movs	r3, #0
 8003372:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8fd 	bl	8000578 <__aeabi_f2d>
 800337e:	a311      	add	r3, pc, #68	; (adr r3, 80033c4 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd fbc2 	bl	8000b0c <__aeabi_dcmplt>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <_ZN11PowerSensor12butteryCheckEv+0x34>
 800338e:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003398:	801a      	strh	r2, [r3, #0]
 800339a:	e002      	b.n	80033a2 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800339e:	2200      	movs	r2, #0
 80033a0:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 80033a2:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80033a4:	881b      	ldrh	r3, [r3, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d004      	beq.n	80033b4 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 80033ae:	4b04      	ldr	r3, [pc, #16]	; (80033c0 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000021c 	.word	0x2000021c
 80033c4:	9999999a 	.word	0x9999999a
 80033c8:	401d9999 	.word	0x401d9999

080033cc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80033d8:	2102      	movs	r1, #2
 80033da:	4822      	ldr	r0, [pc, #136]	; (8003464 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033dc:	f004 fac2 	bl	8007964 <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80033f8:	2108      	movs	r1, #8
 80033fa:	481a      	ldr	r0, [pc, #104]	; (8003464 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033fc:	f004 fab2 	bl	8007964 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <_ZN12RotarySwitch8getValueEv+0x4c>
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	f043 0302 	orr.w	r3, r3, #2
 8003416:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8003418:	2110      	movs	r1, #16
 800341a:	4812      	ldr	r0, [pc, #72]	; (8003464 <_ZN12RotarySwitch8getValueEv+0x98>)
 800341c:	f004 faa2 	bl	8007964 <HAL_GPIO_ReadPin>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <_ZN12RotarySwitch8getValueEv+0x6c>
 8003430:	89fb      	ldrh	r3, [r7, #14]
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	480a      	ldr	r0, [pc, #40]	; (8003464 <_ZN12RotarySwitch8getValueEv+0x98>)
 800343c:	f004 fa92 	bl	8007964 <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf0c      	ite	eq
 8003446:	2301      	moveq	r3, #1
 8003448:	2300      	movne	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d003      	beq.n	8003458 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003450:	89fb      	ldrh	r3, [r7, #14]
 8003452:	f043 0308 	orr.w	r3, r3, #8
 8003456:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003458:	89fb      	ldrh	r3, [r7, #14]

}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40020c00 	.word	0x40020c00

08003468 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
{

}
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 800348c:	887b      	ldrh	r3, [r7, #2]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d111      	bne.n	80034b6 <_ZN10SideSensor12updateStatusEt+0x36>
 8003492:	4b28      	ldr	r3, [pc, #160]	; (8003534 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	f083 0301 	eor.w	r3, r3, #1
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 80034ae:	4b21      	ldr	r3, [pc, #132]	; (8003534 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80034b0:	2201      	movs	r2, #1
 80034b2:	701a      	strb	r2, [r3, #0]
 80034b4:	e010      	b.n	80034d8 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 80034b6:	887b      	ldrh	r3, [r7, #2]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d10d      	bne.n	80034d8 <_ZN10SideSensor12updateStatusEt+0x58>
 80034bc:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 80034d2:	4b18      	ldr	r3, [pc, #96]	; (8003534 <_ZN10SideSensor12updateStatusEt+0xb4>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 80034d8:	887b      	ldrh	r3, [r7, #2]
 80034da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034de:	d111      	bne.n	8003504 <_ZN10SideSensor12updateStatusEt+0x84>
 80034e0:	4b15      	ldr	r3, [pc, #84]	; (8003538 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	f083 0301 	eor.w	r3, r3, #1
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	f043 0302 	orr.w	r3, r3, #2
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80034fc:	4b0e      	ldr	r3, [pc, #56]	; (8003538 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8003502:	e011      	b.n	8003528 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8003504:	887b      	ldrh	r3, [r7, #2]
 8003506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350a:	d10d      	bne.n	8003528 <_ZN10SideSensor12updateStatusEt+0xa8>
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <_ZN10SideSensor12updateStatusEt+0xb8>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d009      	beq.n	8003528 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	881b      	ldrh	r3, [r3, #0]
 8003518:	f083 0302 	eor.w	r3, r3, #2
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	2000021e 	.word	0x2000021e
 8003538:	2000021f 	.word	0x2000021f

0800353c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 800353c:	b490      	push	{r4, r7}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	f04f 0400 	mov.w	r4, #0
 800356c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	61da      	str	r2, [r3, #28]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	621a      	str	r2, [r3, #32]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	629a      	str	r2, [r3, #40]	; 0x28
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	63da      	str	r2, [r3, #60]	; 0x3c

}
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc90      	pop	{r4, r7}
 80035c4:	4770      	bx	lr
	...

080035c8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b089      	sub	sp, #36	; 0x24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	f107 0208 	add.w	r2, r7, #8
 80035d8:	f107 0110 	add.w	r1, r7, #16
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd feb3 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 80035e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4623      	mov	r3, r4
 80035ee:	f7fc fe65 	bl	80002bc <__adddf3>
 80035f2:	4603      	mov	r3, r0
 80035f4:	460c      	mov	r4, r1
 80035f6:	4618      	mov	r0, r3
 80035f8:	4621      	mov	r1, r4
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003602:	f7fd f93b 	bl	800087c <__aeabi_ddiv>
 8003606:	4603      	mov	r3, r0
 8003608:	460c      	mov	r4, r1
 800360a:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 800360e:	a310      	add	r3, pc, #64	; (adr r3, 8003650 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003618:	f7fd f806 	bl	8000628 <__aeabi_dmul>
 800361c:	4603      	mov	r3, r0
 800361e:	460c      	mov	r4, r1
 8003620:	4618      	mov	r0, r3
 8003622:	4621      	mov	r1, r4
 8003624:	f7fd faf8 	bl	8000c18 <__aeabi_d2f>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc ffa0 	bl	8000578 <__aeabi_f2d>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003640:	eeb0 0a47 	vmov.f32	s0, s14
 8003644:	eef0 0a67 	vmov.f32	s1, s15
 8003648:	3724      	adds	r7, #36	; 0x24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd90      	pop	{r4, r7, pc}
 800364e:	bf00      	nop
 8003650:	1ab1d998 	.word	0x1ab1d998
 8003654:	3f7830b5 	.word	0x3f7830b5

08003658 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800365a:	b08d      	sub	sp, #52	; 0x34
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	ed93 7a00 	vldr	s14, [r3]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	edd3 7a02 	vldr	s15, [r3, #8]
 800366c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003670:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff7d 	bl	8000578 <__aeabi_f2d>
 800367e:	4604      	mov	r4, r0
 8003680:	460d      	mov	r5, r1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003686:	4618      	mov	r0, r3
 8003688:	f7fe fa8a 	bl	8001ba0 <_ZN3IMU8getOmegaEv>
 800368c:	ec53 2b10 	vmov	r2, r3, d0
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc fe10 	bl	80002b8 <__aeabi_dsub>
 8003698:	4603      	mov	r3, r0
 800369a:	460c      	mov	r4, r1
 800369c:	4618      	mov	r0, r3
 800369e:	4621      	mov	r1, r4
 80036a0:	f7fd faba 	bl	8000c18 <__aeabi_d2f>
 80036a4:	4603      	mov	r3, r0
 80036a6:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	edd3 7a06 	vldr	s15, [r3, #24]
 80036ae:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80036c0:	4b73      	ldr	r3, [pc, #460]	; (8003890 <_ZN12VelocityCtrl3pidEv+0x238>)
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80036ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80036ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d2:	ee17 0a90 	vmov	r0, s15
 80036d6:	f7fc ff4f 	bl	8000578 <__aeabi_f2d>
 80036da:	a36b      	add	r3, pc, #428	; (adr r3, 8003888 <_ZN12VelocityCtrl3pidEv+0x230>)
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f7fc ffa2 	bl	8000628 <__aeabi_dmul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	460c      	mov	r4, r1
 80036e8:	4618      	mov	r0, r3
 80036ea:	4621      	mov	r1, r4
 80036ec:	f7fd fa94 	bl	8000c18 <__aeabi_d2f>
 80036f0:	4603      	mov	r3, r0
 80036f2:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80036f4:	4b67      	ldr	r3, [pc, #412]	; (8003894 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc ff3d 	bl	8000578 <__aeabi_f2d>
 80036fe:	4604      	mov	r4, r0
 8003700:	460d      	mov	r5, r1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	ed93 7a08 	vldr	s14, [r3, #32]
 8003708:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800370c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003710:	ee17 0a90 	vmov	r0, s15
 8003714:	f7fc ff30 	bl	8000578 <__aeabi_f2d>
 8003718:	a35b      	add	r3, pc, #364	; (adr r3, 8003888 <_ZN12VelocityCtrl3pidEv+0x230>)
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f7fc ff83 	bl	8000628 <__aeabi_dmul>
 8003722:	4602      	mov	r2, r0
 8003724:	460b      	mov	r3, r1
 8003726:	4620      	mov	r0, r4
 8003728:	4629      	mov	r1, r5
 800372a:	f7fc fdc7 	bl	80002bc <__adddf3>
 800372e:	4603      	mov	r3, r0
 8003730:	460c      	mov	r4, r1
 8003732:	4618      	mov	r0, r3
 8003734:	4621      	mov	r1, r4
 8003736:	f7fd fa6f 	bl	8000c18 <__aeabi_d2f>
 800373a:	4602      	mov	r2, r0
 800373c:	4b55      	ldr	r3, [pc, #340]	; (8003894 <_ZN12VelocityCtrl3pidEv+0x23c>)
 800373e:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003746:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800374a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374e:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003758:	4b4f      	ldr	r3, [pc, #316]	; (8003898 <_ZN12VelocityCtrl3pidEv+0x240>)
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003762:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376a:	ee17 0a90 	vmov	r0, s15
 800376e:	f7fc ff03 	bl	8000578 <__aeabi_f2d>
 8003772:	a345      	add	r3, pc, #276	; (adr r3, 8003888 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc ff56 	bl	8000628 <__aeabi_dmul>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	4618      	mov	r0, r3
 8003782:	4621      	mov	r1, r4
 8003784:	f7fd fa48 	bl	8000c18 <__aeabi_d2f>
 8003788:	4603      	mov	r3, r0
 800378a:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <_ZN12VelocityCtrl3pidEv+0x244>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fef1 	bl	8000578 <__aeabi_f2d>
 8003796:	4604      	mov	r4, r0
 8003798:	460d      	mov	r5, r1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80037a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037a8:	ee17 0a90 	vmov	r0, s15
 80037ac:	f7fc fee4 	bl	8000578 <__aeabi_f2d>
 80037b0:	a335      	add	r3, pc, #212	; (adr r3, 8003888 <_ZN12VelocityCtrl3pidEv+0x230>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f7fc ff37 	bl	8000628 <__aeabi_dmul>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4620      	mov	r0, r4
 80037c0:	4629      	mov	r1, r5
 80037c2:	f7fc fd7b 	bl	80002bc <__adddf3>
 80037c6:	4603      	mov	r3, r0
 80037c8:	460c      	mov	r4, r1
 80037ca:	4618      	mov	r0, r3
 80037cc:	4621      	mov	r1, r4
 80037ce:	f7fd fa23 	bl	8000c18 <__aeabi_d2f>
 80037d2:	4602      	mov	r2, r0
 80037d4:	4b31      	ldr	r3, [pc, #196]	; (800389c <_ZN12VelocityCtrl3pidEv+0x244>)
 80037d6:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 80037d8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80037dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80037e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037e4:	4b2b      	ldr	r3, [pc, #172]	; (8003894 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037e6:	edd3 7a00 	vldr	s15, [r3]
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	edc7 7a05 	vstr	s15, [r7, #20]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80037f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80037fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80037fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003802:	4b26      	ldr	r3, [pc, #152]	; (800389c <_ZN12VelocityCtrl3pidEv+0x244>)
 8003804:	edd3 7a00 	vldr	s15, [r3]
 8003808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380c:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003810:	ed97 7a07 	vldr	s14, [r7, #28]
 8003814:	edd7 7a06 	vldr	s15, [r7, #24]
 8003818:	ee37 7a27 	vadd.f32	s14, s14, s15
 800381c:	4b1f      	ldr	r3, [pc, #124]	; (800389c <_ZN12VelocityCtrl3pidEv+0x244>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003826:	eef1 7a67 	vneg.f32	s15, s15
 800382a:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003832:	ed97 7a04 	vldr	s14, [r7, #16]
 8003836:	edd7 7a03 	vldr	s15, [r7, #12]
 800383a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383e:	ee17 0a90 	vmov	r0, s15
 8003842:	f7fc fe99 	bl	8000578 <__aeabi_f2d>
 8003846:	4605      	mov	r5, r0
 8003848:	460e      	mov	r6, r1
 800384a:	ed97 7a05 	vldr	s14, [r7, #20]
 800384e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003856:	ee17 0a90 	vmov	r0, s15
 800385a:	f7fc fe8d 	bl	8000578 <__aeabi_f2d>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	ec43 2b11 	vmov	d1, r2, r3
 8003866:	ec46 5b10 	vmov	d0, r5, r6
 800386a:	4620      	mov	r0, r4
 800386c:	f7ff fa6c 	bl	8002d48 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <_ZN12VelocityCtrl3pidEv+0x238>)
 8003872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003874:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003876:	4a08      	ldr	r2, [pc, #32]	; (8003898 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	3734      	adds	r7, #52	; 0x34
 8003880:	46bd      	mov	sp, r7
 8003882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003884:	f3af 8000 	nop.w
 8003888:	d2f1a9fc 	.word	0xd2f1a9fc
 800388c:	3f50624d 	.word	0x3f50624d
 8003890:	20000220 	.word	0x20000220
 8003894:	20000228 	.word	0x20000228
 8003898:	20000224 	.word	0x20000224
 800389c:	2000022c 	.word	0x2000022c

080038a0 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80038ac:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	605a      	str	r2, [r3, #4]
}
 80038bc:	bf00      	nop
 80038be:	3714      	adds	r7, #20
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80038d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80038d8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	3714      	adds	r7, #20
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr

080038fa <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80038fa:	b480      	push	{r7}
 80038fc:	b085      	sub	sp, #20
 80038fe:	af00      	add	r7, sp, #0
 8003900:	60f8      	str	r0, [r7, #12]
 8003902:	ed87 0a02 	vstr	s0, [r7, #8]
 8003906:	edc7 0a01 	vstr	s1, [r7, #4]
 800390a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f7ff fe47 	bl	80035c8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003940:	2b00      	cmp	r3, #0
 8003942:	d002      	beq.n	800394a <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7ff fe87 	bl	8003658 <_ZN12VelocityCtrl3pidEv>
	}


}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003952:	b480      	push	{r7}
 8003954:	b083      	sub	sp, #12
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80039a0 <_ZN12VelocityCtrl4stopEv+0x30>
 8003988:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80039a0 <_ZN12VelocityCtrl4stopEv+0x30>
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff f9db 	bl	8002d48 <_ZN5Motor8setRatioEdd>

}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	f3af 8000 	nop.w
	...

080039a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80039b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d013      	beq.n	80039e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80039c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80039c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00b      	beq.n	80039e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80039d0:	e000      	b.n	80039d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80039d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80039d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f9      	beq.n	80039d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80039de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039e8:	687b      	ldr	r3, [r7, #4]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	e009      	b.n	8003a1c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60ba      	str	r2, [r7, #8]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ffc9 	bl	80039a8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	dbf1      	blt.n	8003a08 <_write+0x12>
  }
  return len;
 8003a24:	687b      	ldr	r3, [r7, #4]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3718      	adds	r7, #24
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f002 f906 	bl	8005c4c <cppExit>
}
 8003a40:	bf00      	nop
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}

08003a48 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10e      	bne.n	8003a78 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003a5a:	f002 f801 	bl	8005a60 <cppFlip1ms>

		tim6_timer++;
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a1b      	ldr	r2, [pc, #108]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a66:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003a68:	4b1a      	ldr	r3, [pc, #104]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1a      	ldr	r2, [pc, #104]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d902      	bls.n	8003a78 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003a72:	4b18      	ldr	r3, [pc, #96]	; (8003ad4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10e      	bne.n	8003aa0 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003a82:	f002 f817 	bl	8005ab4 <cppFlip100ns>

		tim7_timer++;
 8003a86:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	4a14      	ldr	r2, [pc, #80]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a8e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003a90:	4b13      	ldr	r3, [pc, #76]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a10      	ldr	r2, [pc, #64]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d902      	bls.n	8003aa0 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003a9a:	4b11      	ldr	r3, [pc, #68]	; (8003ae0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003aaa:	f002 f80d 	bl	8005ac8 <cppFlip10ms>

		tim13_timer++;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ab6:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a06      	ldr	r2, [pc, #24]	; (8003ad8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d902      	bls.n	8003ac8 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	601a      	str	r2, [r3, #0]
	}

}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40001000 	.word	0x40001000
 8003ad4:	20021ab0 	.word	0x20021ab0
 8003ad8:	0001869f 	.word	0x0001869f
 8003adc:	40001400 	.word	0x40001400
 8003ae0:	20021af4 	.word	0x20021af4
 8003ae4:	40001c00 	.word	0x40001c00
 8003ae8:	20021af8 	.word	0x20021af8

08003aec <init>:

void init()
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003af0:	2201      	movs	r2, #1
 8003af2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003af6:	4808      	ldr	r0, [pc, #32]	; (8003b18 <init+0x2c>)
 8003af8:	f003 ff4c 	bl	8007994 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003afc:	4807      	ldr	r0, [pc, #28]	; (8003b1c <init+0x30>)
 8003afe:	f007 fe2c 	bl	800b75a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003b02:	4807      	ldr	r0, [pc, #28]	; (8003b20 <init+0x34>)
 8003b04:	f007 fe29 	bl	800b75a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003b08:	4806      	ldr	r0, [pc, #24]	; (8003b24 <init+0x38>)
 8003b0a:	f007 fe26 	bl	800b75a <HAL_TIM_Base_Start_IT>

	cppInit();
 8003b0e:	f001 ff1f 	bl	8005950 <cppInit>

	//path_following_initialize();

}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	20021bdc 	.word	0x20021bdc
 8003b20:	20021d80 	.word	0x20021d80
 8003b24:	20021afc 	.word	0x20021afc

08003b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003b2c:	f002 fc2a 	bl	8006384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003b30:	f000 f82a 	bl	8003b88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003b34:	f000 fdbc 	bl	80046b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8003b38:	f000 fd8a 	bl	8004650 <MX_DMA_Init>
  MX_I2C2_Init();
 8003b3c:	f000 f9e8 	bl	8003f10 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003b40:	f000 fa14 	bl	8003f6c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003b44:	f000 fa32 	bl	8003fac <MX_SPI2_Init>
  MX_TIM1_Init();
 8003b48:	f000 fa66 	bl	8004018 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003b4c:	f000 fb70 	bl	8004230 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003b50:	f000 fc3c 	bl	80043cc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003b54:	f000 fd52 	bl	80045fc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003b58:	f009 fdd2 	bl	800d700 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003b5c:	f000 fbcc 	bl	80042f8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003b60:	f000 f9a8 	bl	8003eb4 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003b64:	f000 fb00 	bl	8004168 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003b68:	f000 fc88 	bl	800447c <MX_TIM10_Init>
  MX_TIM11_Init();
 8003b6c:	f000 fcd4 	bl	8004518 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003b70:	f000 f898 	bl	8003ca4 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003b74:	f000 fbf6 	bl	8004364 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003b78:	f000 fd1c 	bl	80045b4 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003b7c:	f7ff ffb6 	bl	8003aec <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003b80:	f002 f876 	bl	8005c70 <cppLoop>
 8003b84:	e7fc      	b.n	8003b80 <main+0x58>
	...

08003b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b0a4      	sub	sp, #144	; 0x90
 8003b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b92:	2234      	movs	r2, #52	; 0x34
 8003b94:	2100      	movs	r1, #0
 8003b96:	4618      	mov	r0, r3
 8003b98:	f00f f892 	bl	8012cc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bac:	f107 030c 	add.w	r3, r7, #12
 8003bb0:	223c      	movs	r2, #60	; 0x3c
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f00f f883 	bl	8012cc0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bba:	2300      	movs	r3, #0
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <SystemClock_Config+0x114>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a36      	ldr	r2, [pc, #216]	; (8003c9c <SystemClock_Config+0x114>)
 8003bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003bca:	4b34      	ldr	r3, [pc, #208]	; (8003c9c <SystemClock_Config+0x114>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	4b31      	ldr	r3, [pc, #196]	; (8003ca0 <SystemClock_Config+0x118>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a30      	ldr	r2, [pc, #192]	; (8003ca0 <SystemClock_Config+0x118>)
 8003be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b2e      	ldr	r3, [pc, #184]	; (8003ca0 <SystemClock_Config+0x118>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bfa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bfc:	2302      	movs	r3, #2
 8003bfe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c00:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003c04:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003c06:	2308      	movs	r3, #8
 8003c08:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003c0a:	23b4      	movs	r3, #180	; 0xb4
 8003c0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c10:	2302      	movs	r3, #2
 8003c12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003c16:	2308      	movs	r3, #8
 8003c18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003c26:	4618      	mov	r0, r3
 8003c28:	f005 faee 	bl	8009208 <HAL_RCC_OscConfig>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003c32:	f000 fe93 	bl	800495c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003c36:	f004 fe69 	bl	800890c <HAL_PWREx_EnableOverDrive>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003c40:	f000 fe8c 	bl	800495c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c44:	230f      	movs	r3, #15
 8003c46:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c54:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c5a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c60:	2105      	movs	r1, #5
 8003c62:	4618      	mov	r0, r3
 8003c64:	f004 fea2 	bl	80089ac <HAL_RCC_ClockConfig>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003c6e:	f000 fe75 	bl	800495c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003c72:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c76:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c80:	f107 030c 	add.w	r3, r7, #12
 8003c84:	4618      	mov	r0, r3
 8003c86:	f005 f881 	bl	8008d8c <HAL_RCCEx_PeriphCLKConfig>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003c90:	f000 fe64 	bl	800495c <Error_Handler>
  }
}
 8003c94:	bf00      	nop
 8003c96:	3790      	adds	r7, #144	; 0x90
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	40007000 	.word	0x40007000

08003ca4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003caa:	463b      	mov	r3, r7
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	605a      	str	r2, [r3, #4]
 8003cb2:	609a      	str	r2, [r3, #8]
 8003cb4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003cb6:	4b7c      	ldr	r3, [pc, #496]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cb8:	4a7c      	ldr	r2, [pc, #496]	; (8003eac <MX_ADC2_Init+0x208>)
 8003cba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003cbc:	4b7a      	ldr	r3, [pc, #488]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cc2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003cc4:	4b78      	ldr	r3, [pc, #480]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003cca:	4b77      	ldr	r3, [pc, #476]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003cd0:	4b75      	ldr	r3, [pc, #468]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003cd6:	4b74      	ldr	r3, [pc, #464]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cde:	4b72      	ldr	r3, [pc, #456]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ce4:	4b70      	ldr	r3, [pc, #448]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003ce6:	4a72      	ldr	r2, [pc, #456]	; (8003eb0 <MX_ADC2_Init+0x20c>)
 8003ce8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cea:	4b6f      	ldr	r3, [pc, #444]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003cf0:	4b6d      	ldr	r3, [pc, #436]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cf2:	220e      	movs	r2, #14
 8003cf4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cfe:	4b6a      	ldr	r3, [pc, #424]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003d04:	4868      	ldr	r0, [pc, #416]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d06:	f002 fbd1 	bl	80064ac <HAL_ADC_Init>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003d10:	f000 fe24 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003d14:	230a      	movs	r3, #10
 8003d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003d1c:	2306      	movs	r3, #6
 8003d1e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d20:	463b      	mov	r3, r7
 8003d22:	4619      	mov	r1, r3
 8003d24:	4860      	ldr	r0, [pc, #384]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d26:	f002 fd15 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003d30:	f000 fe14 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003d34:	230b      	movs	r3, #11
 8003d36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d3c:	463b      	mov	r3, r7
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4859      	ldr	r0, [pc, #356]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d42:	f002 fd07 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003d4c:	f000 fe06 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d50:	230c      	movs	r3, #12
 8003d52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003d54:	2303      	movs	r3, #3
 8003d56:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d58:	463b      	mov	r3, r7
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4852      	ldr	r0, [pc, #328]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d5e:	f002 fcf9 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003d68:	f000 fdf8 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d6c:	230d      	movs	r3, #13
 8003d6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003d70:	2304      	movs	r3, #4
 8003d72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d74:	463b      	mov	r3, r7
 8003d76:	4619      	mov	r1, r3
 8003d78:	484b      	ldr	r0, [pc, #300]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d7a:	f002 fceb 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d001      	beq.n	8003d88 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003d84:	f000 fdea 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003d8c:	2305      	movs	r3, #5
 8003d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d90:	463b      	mov	r3, r7
 8003d92:	4619      	mov	r1, r3
 8003d94:	4844      	ldr	r0, [pc, #272]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003d96:	f002 fcdd 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003da0:	f000 fddc 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003da4:	2301      	movs	r3, #1
 8003da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003da8:	2306      	movs	r3, #6
 8003daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dac:	463b      	mov	r3, r7
 8003dae:	4619      	mov	r1, r3
 8003db0:	483d      	ldr	r0, [pc, #244]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003db2:	f002 fccf 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003dbc:	f000 fdce 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003dc4:	2307      	movs	r3, #7
 8003dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4619      	mov	r1, r3
 8003dcc:	4836      	ldr	r0, [pc, #216]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003dce:	f002 fcc1 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003dd8:	f000 fdc0 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003de0:	2308      	movs	r3, #8
 8003de2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003de4:	463b      	mov	r3, r7
 8003de6:	4619      	mov	r1, r3
 8003de8:	482f      	ldr	r0, [pc, #188]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003dea:	f002 fcb3 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003df4:	f000 fdb2 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003df8:	2304      	movs	r3, #4
 8003dfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003dfc:	2309      	movs	r3, #9
 8003dfe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e00:	463b      	mov	r3, r7
 8003e02:	4619      	mov	r1, r3
 8003e04:	4828      	ldr	r0, [pc, #160]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003e06:	f002 fca5 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003e10:	f000 fda4 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003e14:	2305      	movs	r3, #5
 8003e16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003e18:	230a      	movs	r3, #10
 8003e1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e1c:	463b      	mov	r3, r7
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4821      	ldr	r0, [pc, #132]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003e22:	f002 fc97 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003e2c:	f000 fd96 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003e30:	2306      	movs	r3, #6
 8003e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003e34:	230b      	movs	r3, #11
 8003e36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e38:	463b      	mov	r3, r7
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	481a      	ldr	r0, [pc, #104]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003e3e:	f002 fc89 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003e48:	f000 fd88 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e4c:	2307      	movs	r3, #7
 8003e4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003e50:	230c      	movs	r3, #12
 8003e52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e54:	463b      	mov	r3, r7
 8003e56:	4619      	mov	r1, r3
 8003e58:	4813      	ldr	r0, [pc, #76]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003e5a:	f002 fc7b 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003e64:	f000 fd7a 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e68:	2308      	movs	r3, #8
 8003e6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003e6c:	230d      	movs	r3, #13
 8003e6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e70:	463b      	mov	r3, r7
 8003e72:	4619      	mov	r1, r3
 8003e74:	480c      	ldr	r0, [pc, #48]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003e76:	f002 fc6d 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003e80:	f000 fd6c 	bl	800495c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003e84:	2309      	movs	r3, #9
 8003e86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003e88:	230e      	movs	r3, #14
 8003e8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e8c:	463b      	mov	r3, r7
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4805      	ldr	r0, [pc, #20]	; (8003ea8 <MX_ADC2_Init+0x204>)
 8003e92:	f002 fc5f 	bl	8006754 <HAL_ADC_ConfigChannel>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003e9c:	f000 fd5e 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20021980 	.word	0x20021980
 8003eac:	40012100 	.word	0x40012100
 8003eb0:	0f000001 	.word	0x0f000001

08003eb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003eb8:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <MX_I2C1_Init+0x54>)
 8003ebc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ebe:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ec0:	4a12      	ldr	r2, [pc, #72]	; (8003f0c <MX_I2C1_Init+0x58>)
 8003ec2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ed0:	4b0c      	ldr	r3, [pc, #48]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ed2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ed6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ede:	4b09      	ldr	r3, [pc, #36]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ee4:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003eea:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <MX_I2C1_Init+0x50>)
 8003ef2:	f003 fd81 	bl	80079f8 <HAL_I2C_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003efc:	f000 fd2e 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003f00:	bf00      	nop
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	200219c8 	.word	0x200219c8
 8003f08:	40005400 	.word	0x40005400
 8003f0c:	000186a0 	.word	0x000186a0

08003f10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f16:	4a13      	ldr	r2, [pc, #76]	; (8003f64 <MX_I2C2_Init+0x54>)
 8003f18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003f1a:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f1c:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <MX_I2C2_Init+0x58>)
 8003f1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003f20:	4b0f      	ldr	r3, [pc, #60]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003f26:	4b0e      	ldr	r3, [pc, #56]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003f2c:	4b0c      	ldr	r3, [pc, #48]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f32:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003f3a:	4b09      	ldr	r3, [pc, #36]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003f46:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f48:	2280      	movs	r2, #128	; 0x80
 8003f4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f4c:	4804      	ldr	r0, [pc, #16]	; (8003f60 <MX_I2C2_Init+0x50>)
 8003f4e:	f003 fd53 	bl	80079f8 <HAL_I2C_Init>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f58:	f000 fd00 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f5c:	bf00      	nop
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	20021a5c 	.word	0x20021a5c
 8003f64:	40005800 	.word	0x40005800
 8003f68:	000186a0 	.word	0x000186a0

08003f6c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f72:	4a0d      	ldr	r2, [pc, #52]	; (8003fa8 <MX_SDIO_SD_Init+0x3c>)
 8003f74:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f82:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <MX_SDIO_SD_Init+0x38>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003f9a:	bf00      	nop
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	20021c5c 	.word	0x20021c5c
 8003fa8:	40012c00 	.word	0x40012c00

08003fac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fb2:	4a18      	ldr	r2, [pc, #96]	; (8004014 <MX_SPI2_Init+0x68>)
 8003fb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003fb6:	4b16      	ldr	r3, [pc, #88]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003fbe:	4b14      	ldr	r3, [pc, #80]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fc4:	4b12      	ldr	r3, [pc, #72]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fcc:	2202      	movs	r2, #2
 8003fce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003fd0:	4b0f      	ldr	r3, [pc, #60]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fdc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003fde:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fe0:	2228      	movs	r2, #40	; 0x28
 8003fe2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <MX_SPI2_Init+0x64>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff0:	4b07      	ldr	r3, [pc, #28]	; (8004010 <MX_SPI2_Init+0x64>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <MX_SPI2_Init+0x64>)
 8003ff8:	220a      	movs	r2, #10
 8003ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ffc:	4804      	ldr	r0, [pc, #16]	; (8004010 <MX_SPI2_Init+0x64>)
 8003ffe:	f006 fe2d 	bl	800ac5c <HAL_SPI_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004008:	f000 fca8 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}
 8004010:	200218a8 	.word	0x200218a8
 8004014:	40003800 	.word	0x40003800

08004018 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b09a      	sub	sp, #104	; 0x68
 800401c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800401e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004022:	2224      	movs	r2, #36	; 0x24
 8004024:	2100      	movs	r1, #0
 8004026:	4618      	mov	r0, r3
 8004028:	f00e fe4a 	bl	8012cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800402c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004036:	f107 0320 	add.w	r3, r7, #32
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]
 8004044:	611a      	str	r2, [r3, #16]
 8004046:	615a      	str	r2, [r3, #20]
 8004048:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800404a:	463b      	mov	r3, r7
 800404c:	2220      	movs	r2, #32
 800404e:	2100      	movs	r1, #0
 8004050:	4618      	mov	r0, r3
 8004052:	f00e fe35 	bl	8012cc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004056:	4b42      	ldr	r3, [pc, #264]	; (8004160 <MX_TIM1_Init+0x148>)
 8004058:	4a42      	ldr	r2, [pc, #264]	; (8004164 <MX_TIM1_Init+0x14c>)
 800405a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800405c:	4b40      	ldr	r3, [pc, #256]	; (8004160 <MX_TIM1_Init+0x148>)
 800405e:	2200      	movs	r2, #0
 8004060:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004062:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <MX_TIM1_Init+0x148>)
 8004064:	2200      	movs	r2, #0
 8004066:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004068:	4b3d      	ldr	r3, [pc, #244]	; (8004160 <MX_TIM1_Init+0x148>)
 800406a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800406e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004070:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <MX_TIM1_Init+0x148>)
 8004072:	2200      	movs	r2, #0
 8004074:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004076:	4b3a      	ldr	r3, [pc, #232]	; (8004160 <MX_TIM1_Init+0x148>)
 8004078:	2200      	movs	r2, #0
 800407a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800407c:	4b38      	ldr	r3, [pc, #224]	; (8004160 <MX_TIM1_Init+0x148>)
 800407e:	2200      	movs	r2, #0
 8004080:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004082:	4837      	ldr	r0, [pc, #220]	; (8004160 <MX_TIM1_Init+0x148>)
 8004084:	f007 fb8d 	bl	800b7a2 <HAL_TIM_PWM_Init>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800408e:	f000 fc65 	bl	800495c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004092:	2303      	movs	r3, #3
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004096:	2300      	movs	r3, #0
 8004098:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800409a:	2301      	movs	r3, #1
 800409c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800409e:	2300      	movs	r3, #0
 80040a0:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80040a6:	2300      	movs	r3, #0
 80040a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80040aa:	2301      	movs	r3, #1
 80040ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80040ae:	2300      	movs	r3, #0
 80040b0:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80040b2:	2300      	movs	r3, #0
 80040b4:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80040b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80040ba:	4619      	mov	r1, r3
 80040bc:	4828      	ldr	r0, [pc, #160]	; (8004160 <MX_TIM1_Init+0x148>)
 80040be:	f007 fbd9 	bl	800b874 <HAL_TIM_Encoder_Init>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80040c8:	f000 fc48 	bl	800495c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040cc:	2300      	movs	r3, #0
 80040ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80040d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80040d8:	4619      	mov	r1, r3
 80040da:	4821      	ldr	r0, [pc, #132]	; (8004160 <MX_TIM1_Init+0x148>)
 80040dc:	f008 f900 	bl	800c2e0 <HAL_TIMEx_MasterConfigSynchronization>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80040e6:	f000 fc39 	bl	800495c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ea:	2360      	movs	r3, #96	; 0x60
 80040ec:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040f6:	2300      	movs	r3, #0
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004106:	f107 0320 	add.w	r3, r7, #32
 800410a:	2208      	movs	r2, #8
 800410c:	4619      	mov	r1, r3
 800410e:	4814      	ldr	r0, [pc, #80]	; (8004160 <MX_TIM1_Init+0x148>)
 8004110:	f007 fd82 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800411a:	f000 fc1f 	bl	800495c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800411e:	2300      	movs	r3, #0
 8004120:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800412e:	2300      	movs	r3, #0
 8004130:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004132:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004136:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004138:	2300      	movs	r3, #0
 800413a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800413c:	463b      	mov	r3, r7
 800413e:	4619      	mov	r1, r3
 8004140:	4807      	ldr	r0, [pc, #28]	; (8004160 <MX_TIM1_Init+0x148>)
 8004142:	f008 f949 	bl	800c3d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800414c:	f000 fc06 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004150:	4803      	ldr	r0, [pc, #12]	; (8004160 <MX_TIM1_Init+0x148>)
 8004152:	f001 f97f 	bl	8005454 <HAL_TIM_MspPostInit>

}
 8004156:	bf00      	nop
 8004158:	3768      	adds	r7, #104	; 0x68
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20021c1c 	.word	0x20021c1c
 8004164:	40010000 	.word	0x40010000

08004168 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	; 0x28
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800416e:	f107 0320 	add.w	r3, r7, #32
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]
 8004180:	609a      	str	r2, [r3, #8]
 8004182:	60da      	str	r2, [r3, #12]
 8004184:	611a      	str	r2, [r3, #16]
 8004186:	615a      	str	r2, [r3, #20]
 8004188:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800418a:	4b27      	ldr	r3, [pc, #156]	; (8004228 <MX_TIM3_Init+0xc0>)
 800418c:	4a27      	ldr	r2, [pc, #156]	; (800422c <MX_TIM3_Init+0xc4>)
 800418e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <MX_TIM3_Init+0xc0>)
 8004192:	2200      	movs	r2, #0
 8004194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <MX_TIM3_Init+0xc0>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <MX_TIM3_Init+0xc0>)
 800419e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a4:	4b20      	ldr	r3, [pc, #128]	; (8004228 <MX_TIM3_Init+0xc0>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041aa:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <MX_TIM3_Init+0xc0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80041b0:	481d      	ldr	r0, [pc, #116]	; (8004228 <MX_TIM3_Init+0xc0>)
 80041b2:	f007 faf6 	bl	800b7a2 <HAL_TIM_PWM_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80041bc:	f000 fbce 	bl	800495c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041c0:	2300      	movs	r3, #0
 80041c2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80041c8:	f107 0320 	add.w	r3, r7, #32
 80041cc:	4619      	mov	r1, r3
 80041ce:	4816      	ldr	r0, [pc, #88]	; (8004228 <MX_TIM3_Init+0xc0>)
 80041d0:	f008 f886 	bl	800c2e0 <HAL_TIMEx_MasterConfigSynchronization>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80041da:	f000 fbbf 	bl	800495c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041de:	2360      	movs	r3, #96	; 0x60
 80041e0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ee:	1d3b      	adds	r3, r7, #4
 80041f0:	2200      	movs	r2, #0
 80041f2:	4619      	mov	r1, r3
 80041f4:	480c      	ldr	r0, [pc, #48]	; (8004228 <MX_TIM3_Init+0xc0>)
 80041f6:	f007 fd0f 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8004200:	f000 fbac 	bl	800495c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004204:	1d3b      	adds	r3, r7, #4
 8004206:	2204      	movs	r2, #4
 8004208:	4619      	mov	r1, r3
 800420a:	4807      	ldr	r0, [pc, #28]	; (8004228 <MX_TIM3_Init+0xc0>)
 800420c:	f007 fd04 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8004216:	f000 fba1 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800421a:	4803      	ldr	r0, [pc, #12]	; (8004228 <MX_TIM3_Init+0xc0>)
 800421c:	f001 f91a 	bl	8005454 <HAL_TIM_MspPostInit>

}
 8004220:	bf00      	nop
 8004222:	3728      	adds	r7, #40	; 0x28
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20021ab4 	.word	0x20021ab4
 800422c:	40000400 	.word	0x40000400

08004230 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004236:	f107 0320 	add.w	r3, r7, #32
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004240:	1d3b      	adds	r3, r7, #4
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	609a      	str	r2, [r3, #8]
 800424a:	60da      	str	r2, [r3, #12]
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	615a      	str	r2, [r3, #20]
 8004250:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004252:	4b27      	ldr	r3, [pc, #156]	; (80042f0 <MX_TIM4_Init+0xc0>)
 8004254:	4a27      	ldr	r2, [pc, #156]	; (80042f4 <MX_TIM4_Init+0xc4>)
 8004256:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004258:	4b25      	ldr	r3, [pc, #148]	; (80042f0 <MX_TIM4_Init+0xc0>)
 800425a:	2200      	movs	r2, #0
 800425c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800425e:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <MX_TIM4_Init+0xc0>)
 8004260:	2200      	movs	r2, #0
 8004262:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004264:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <MX_TIM4_Init+0xc0>)
 8004266:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800426a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800426c:	4b20      	ldr	r3, [pc, #128]	; (80042f0 <MX_TIM4_Init+0xc0>)
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004272:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <MX_TIM4_Init+0xc0>)
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004278:	481d      	ldr	r0, [pc, #116]	; (80042f0 <MX_TIM4_Init+0xc0>)
 800427a:	f007 fa92 	bl	800b7a2 <HAL_TIM_PWM_Init>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004284:	f000 fb6a 	bl	800495c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004288:	2300      	movs	r3, #0
 800428a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004290:	f107 0320 	add.w	r3, r7, #32
 8004294:	4619      	mov	r1, r3
 8004296:	4816      	ldr	r0, [pc, #88]	; (80042f0 <MX_TIM4_Init+0xc0>)
 8004298:	f008 f822 	bl	800c2e0 <HAL_TIMEx_MasterConfigSynchronization>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80042a2:	f000 fb5b 	bl	800495c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80042a6:	2360      	movs	r3, #96	; 0x60
 80042a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80042b2:	2300      	movs	r3, #0
 80042b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80042b6:	1d3b      	adds	r3, r7, #4
 80042b8:	2208      	movs	r2, #8
 80042ba:	4619      	mov	r1, r3
 80042bc:	480c      	ldr	r0, [pc, #48]	; (80042f0 <MX_TIM4_Init+0xc0>)
 80042be:	f007 fcab 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80042c8:	f000 fb48 	bl	800495c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80042cc:	1d3b      	adds	r3, r7, #4
 80042ce:	220c      	movs	r2, #12
 80042d0:	4619      	mov	r1, r3
 80042d2:	4807      	ldr	r0, [pc, #28]	; (80042f0 <MX_TIM4_Init+0xc0>)
 80042d4:	f007 fca0 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80042de:	f000 fb3d 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042e2:	4803      	ldr	r0, [pc, #12]	; (80042f0 <MX_TIM4_Init+0xc0>)
 80042e4:	f001 f8b6 	bl	8005454 <HAL_TIM_MspPostInit>

}
 80042e8:	bf00      	nop
 80042ea:	3728      	adds	r7, #40	; 0x28
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20021940 	.word	0x20021940
 80042f4:	40000800 	.word	0x40000800

080042f8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042fe:	463b      	mov	r3, r7
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004306:	4b15      	ldr	r3, [pc, #84]	; (800435c <MX_TIM6_Init+0x64>)
 8004308:	4a15      	ldr	r2, [pc, #84]	; (8004360 <MX_TIM6_Init+0x68>)
 800430a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <MX_TIM6_Init+0x64>)
 800430e:	2259      	movs	r2, #89	; 0x59
 8004310:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004312:	4b12      	ldr	r3, [pc, #72]	; (800435c <MX_TIM6_Init+0x64>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004318:	4b10      	ldr	r3, [pc, #64]	; (800435c <MX_TIM6_Init+0x64>)
 800431a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800431e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004320:	4b0e      	ldr	r3, [pc, #56]	; (800435c <MX_TIM6_Init+0x64>)
 8004322:	2280      	movs	r2, #128	; 0x80
 8004324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004326:	480d      	ldr	r0, [pc, #52]	; (800435c <MX_TIM6_Init+0x64>)
 8004328:	f007 f9ec 	bl	800b704 <HAL_TIM_Base_Init>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004332:	f000 fb13 	bl	800495c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800433e:	463b      	mov	r3, r7
 8004340:	4619      	mov	r1, r3
 8004342:	4806      	ldr	r0, [pc, #24]	; (800435c <MX_TIM6_Init+0x64>)
 8004344:	f007 ffcc 	bl	800c2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800434e:	f000 fb05 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004352:	bf00      	nop
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20021bdc 	.word	0x20021bdc
 8004360:	40001000 	.word	0x40001000

08004364 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800436a:	463b      	mov	r3, r7
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <MX_TIM7_Init+0x60>)
 8004374:	4a14      	ldr	r2, [pc, #80]	; (80043c8 <MX_TIM7_Init+0x64>)
 8004376:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004378:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <MX_TIM7_Init+0x60>)
 800437a:	22b3      	movs	r2, #179	; 0xb3
 800437c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800437e:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <MX_TIM7_Init+0x60>)
 8004380:	2200      	movs	r2, #0
 8004382:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004384:	4b0f      	ldr	r3, [pc, #60]	; (80043c4 <MX_TIM7_Init+0x60>)
 8004386:	2231      	movs	r2, #49	; 0x31
 8004388:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800438a:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <MX_TIM7_Init+0x60>)
 800438c:	2280      	movs	r2, #128	; 0x80
 800438e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004390:	480c      	ldr	r0, [pc, #48]	; (80043c4 <MX_TIM7_Init+0x60>)
 8004392:	f007 f9b7 	bl	800b704 <HAL_TIM_Base_Init>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800439c:	f000 fade 	bl	800495c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a0:	2300      	movs	r3, #0
 80043a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043a8:	463b      	mov	r3, r7
 80043aa:	4619      	mov	r1, r3
 80043ac:	4805      	ldr	r0, [pc, #20]	; (80043c4 <MX_TIM7_Init+0x60>)
 80043ae:	f007 ff97 	bl	800c2e0 <HAL_TIMEx_MasterConfigSynchronization>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80043b8:	f000 fad0 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043bc:	bf00      	nop
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20021d80 	.word	0x20021d80
 80043c8:	40001400 	.word	0x40001400

080043cc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80043d2:	f107 030c 	add.w	r3, r7, #12
 80043d6:	2224      	movs	r2, #36	; 0x24
 80043d8:	2100      	movs	r1, #0
 80043da:	4618      	mov	r0, r3
 80043dc:	f00e fc70 	bl	8012cc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80043e8:	4b22      	ldr	r3, [pc, #136]	; (8004474 <MX_TIM8_Init+0xa8>)
 80043ea:	4a23      	ldr	r2, [pc, #140]	; (8004478 <MX_TIM8_Init+0xac>)
 80043ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80043ee:	4b21      	ldr	r3, [pc, #132]	; (8004474 <MX_TIM8_Init+0xa8>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043f4:	4b1f      	ldr	r3, [pc, #124]	; (8004474 <MX_TIM8_Init+0xa8>)
 80043f6:	2210      	movs	r2, #16
 80043f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80043fa:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <MX_TIM8_Init+0xa8>)
 80043fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004400:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004402:	4b1c      	ldr	r3, [pc, #112]	; (8004474 <MX_TIM8_Init+0xa8>)
 8004404:	2200      	movs	r2, #0
 8004406:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <MX_TIM8_Init+0xa8>)
 800440a:	2200      	movs	r2, #0
 800440c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <MX_TIM8_Init+0xa8>)
 8004410:	2200      	movs	r2, #0
 8004412:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004414:	2303      	movs	r3, #3
 8004416:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004418:	2300      	movs	r3, #0
 800441a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800441c:	2301      	movs	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8004424:	2300      	movs	r3, #0
 8004426:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004428:	2300      	movs	r3, #0
 800442a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800442c:	2301      	movs	r3, #1
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004430:	2300      	movs	r3, #0
 8004432:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8004438:	f107 030c 	add.w	r3, r7, #12
 800443c:	4619      	mov	r1, r3
 800443e:	480d      	ldr	r0, [pc, #52]	; (8004474 <MX_TIM8_Init+0xa8>)
 8004440:	f007 fa18 	bl	800b874 <HAL_TIM_Encoder_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800444a:	f000 fa87 	bl	800495c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004456:	1d3b      	adds	r3, r7, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4806      	ldr	r0, [pc, #24]	; (8004474 <MX_TIM8_Init+0xa8>)
 800445c:	f007 ff40 	bl	800c2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004466:	f000 fa79 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800446a:	bf00      	nop
 800446c:	3730      	adds	r7, #48	; 0x30
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	20021900 	.word	0x20021900
 8004478:	40010400 	.word	0x40010400

0800447c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	2200      	movs	r2, #0
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	605a      	str	r2, [r3, #4]
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	611a      	str	r2, [r3, #16]
 8004490:	615a      	str	r2, [r3, #20]
 8004492:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004494:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <MX_TIM10_Init+0x94>)
 8004496:	4a1f      	ldr	r2, [pc, #124]	; (8004514 <MX_TIM10_Init+0x98>)
 8004498:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800449a:	4b1d      	ldr	r3, [pc, #116]	; (8004510 <MX_TIM10_Init+0x94>)
 800449c:	2200      	movs	r2, #0
 800449e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <MX_TIM10_Init+0x94>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <MX_TIM10_Init+0x94>)
 80044a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044ac:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <MX_TIM10_Init+0x94>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b4:	4b16      	ldr	r3, [pc, #88]	; (8004510 <MX_TIM10_Init+0x94>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80044ba:	4815      	ldr	r0, [pc, #84]	; (8004510 <MX_TIM10_Init+0x94>)
 80044bc:	f007 f922 	bl	800b704 <HAL_TIM_Base_Init>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80044c6:	f000 fa49 	bl	800495c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80044ca:	4811      	ldr	r0, [pc, #68]	; (8004510 <MX_TIM10_Init+0x94>)
 80044cc:	f007 f969 	bl	800b7a2 <HAL_TIM_PWM_Init>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80044d6:	f000 fa41 	bl	800495c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044da:	2360      	movs	r3, #96	; 0x60
 80044dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	2200      	movs	r2, #0
 80044ee:	4619      	mov	r1, r3
 80044f0:	4807      	ldr	r0, [pc, #28]	; (8004510 <MX_TIM10_Init+0x94>)
 80044f2:	f007 fb91 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d001      	beq.n	8004500 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80044fc:	f000 fa2e 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004500:	4803      	ldr	r0, [pc, #12]	; (8004510 <MX_TIM10_Init+0x94>)
 8004502:	f000 ffa7 	bl	8005454 <HAL_TIM_MspPostInit>

}
 8004506:	bf00      	nop
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20021a1c 	.word	0x20021a1c
 8004514:	40014400 	.word	0x40014400

08004518 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800451e:	1d3b      	adds	r3, r7, #4
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]
 8004524:	605a      	str	r2, [r3, #4]
 8004526:	609a      	str	r2, [r3, #8]
 8004528:	60da      	str	r2, [r3, #12]
 800452a:	611a      	str	r2, [r3, #16]
 800452c:	615a      	str	r2, [r3, #20]
 800452e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8004530:	4b1e      	ldr	r3, [pc, #120]	; (80045ac <MX_TIM11_Init+0x94>)
 8004532:	4a1f      	ldr	r2, [pc, #124]	; (80045b0 <MX_TIM11_Init+0x98>)
 8004534:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004536:	4b1d      	ldr	r3, [pc, #116]	; (80045ac <MX_TIM11_Init+0x94>)
 8004538:	2200      	movs	r2, #0
 800453a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800453c:	4b1b      	ldr	r3, [pc, #108]	; (80045ac <MX_TIM11_Init+0x94>)
 800453e:	2200      	movs	r2, #0
 8004540:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004542:	4b1a      	ldr	r3, [pc, #104]	; (80045ac <MX_TIM11_Init+0x94>)
 8004544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004548:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800454a:	4b18      	ldr	r3, [pc, #96]	; (80045ac <MX_TIM11_Init+0x94>)
 800454c:	2200      	movs	r2, #0
 800454e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004550:	4b16      	ldr	r3, [pc, #88]	; (80045ac <MX_TIM11_Init+0x94>)
 8004552:	2200      	movs	r2, #0
 8004554:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004556:	4815      	ldr	r0, [pc, #84]	; (80045ac <MX_TIM11_Init+0x94>)
 8004558:	f007 f8d4 	bl	800b704 <HAL_TIM_Base_Init>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004562:	f000 f9fb 	bl	800495c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004566:	4811      	ldr	r0, [pc, #68]	; (80045ac <MX_TIM11_Init+0x94>)
 8004568:	f007 f91b 	bl	800b7a2 <HAL_TIM_PWM_Init>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004572:	f000 f9f3 	bl	800495c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004576:	2360      	movs	r3, #96	; 0x60
 8004578:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800457a:	2300      	movs	r3, #0
 800457c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004582:	2300      	movs	r3, #0
 8004584:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004586:	1d3b      	adds	r3, r7, #4
 8004588:	2200      	movs	r2, #0
 800458a:	4619      	mov	r1, r3
 800458c:	4807      	ldr	r0, [pc, #28]	; (80045ac <MX_TIM11_Init+0x94>)
 800458e:	f007 fb43 	bl	800bc18 <HAL_TIM_PWM_ConfigChannel>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004598:	f000 f9e0 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800459c:	4803      	ldr	r0, [pc, #12]	; (80045ac <MX_TIM11_Init+0x94>)
 800459e:	f000 ff59 	bl	8005454 <HAL_TIM_MspPostInit>

}
 80045a2:	bf00      	nop
 80045a4:	3720      	adds	r7, #32
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	20021b3c 	.word	0x20021b3c
 80045b0:	40014800 	.word	0x40014800

080045b4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80045b8:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045ba:	4a0f      	ldr	r2, [pc, #60]	; (80045f8 <MX_TIM13_Init+0x44>)
 80045bc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 80045be:	4b0d      	ldr	r3, [pc, #52]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045c0:	2259      	movs	r2, #89	; 0x59
 80045c2:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 80045ca:	4b0a      	ldr	r3, [pc, #40]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80045d0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d2:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80045de:	4805      	ldr	r0, [pc, #20]	; (80045f4 <MX_TIM13_Init+0x40>)
 80045e0:	f007 f890 	bl	800b704 <HAL_TIM_Base_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d001      	beq.n	80045ee <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80045ea:	f000 f9b7 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	20021afc 	.word	0x20021afc
 80045f8:	40001c00 	.word	0x40001c00

080045fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004600:	4b11      	ldr	r3, [pc, #68]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004602:	4a12      	ldr	r2, [pc, #72]	; (800464c <MX_USART2_UART_Init+0x50>)
 8004604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004606:	4b10      	ldr	r3, [pc, #64]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800460c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800460e:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004610:	2200      	movs	r2, #0
 8004612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004616:	2200      	movs	r2, #0
 8004618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 800461c:	2200      	movs	r2, #0
 800461e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004620:	4b09      	ldr	r3, [pc, #36]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004622:	220c      	movs	r2, #12
 8004624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004626:	4b08      	ldr	r3, [pc, #32]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004628:	2200      	movs	r2, #0
 800462a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800462c:	4b06      	ldr	r3, [pc, #24]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004632:	4805      	ldr	r0, [pc, #20]	; (8004648 <MX_USART2_UART_Init+0x4c>)
 8004634:	f007 ff36 	bl	800c4a4 <HAL_UART_Init>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d001      	beq.n	8004642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800463e:	f000 f98d 	bl	800495c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20021ce0 	.word	0x20021ce0
 800464c:	40004400 	.word	0x40004400

08004650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004656:	2300      	movs	r3, #0
 8004658:	607b      	str	r3, [r7, #4]
 800465a:	4b14      	ldr	r3, [pc, #80]	; (80046ac <MX_DMA_Init+0x5c>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	4a13      	ldr	r2, [pc, #76]	; (80046ac <MX_DMA_Init+0x5c>)
 8004660:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004664:	6313      	str	r3, [r2, #48]	; 0x30
 8004666:	4b11      	ldr	r3, [pc, #68]	; (80046ac <MX_DMA_Init+0x5c>)
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	607b      	str	r3, [r7, #4]
 8004670:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004672:	2200      	movs	r2, #0
 8004674:	2100      	movs	r1, #0
 8004676:	203a      	movs	r0, #58	; 0x3a
 8004678:	f002 fbf7 	bl	8006e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800467c:	203a      	movs	r0, #58	; 0x3a
 800467e:	f002 fc10 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004682:	2200      	movs	r2, #0
 8004684:	2100      	movs	r1, #0
 8004686:	203b      	movs	r0, #59	; 0x3b
 8004688:	f002 fbef 	bl	8006e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800468c:	203b      	movs	r0, #59	; 0x3b
 800468e:	f002 fc08 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004692:	2200      	movs	r2, #0
 8004694:	2100      	movs	r1, #0
 8004696:	2045      	movs	r0, #69	; 0x45
 8004698:	f002 fbe7 	bl	8006e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800469c:	2045      	movs	r0, #69	; 0x45
 800469e:	f002 fc00 	bl	8006ea2 <HAL_NVIC_EnableIRQ>

}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b08c      	sub	sp, #48	; 0x30
 80046b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b6:	f107 031c 	add.w	r3, r7, #28
 80046ba:	2200      	movs	r2, #0
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	609a      	str	r2, [r3, #8]
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80046c6:	2300      	movs	r3, #0
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	4b9c      	ldr	r3, [pc, #624]	; (800493c <MX_GPIO_Init+0x28c>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	4a9b      	ldr	r2, [pc, #620]	; (800493c <MX_GPIO_Init+0x28c>)
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	6313      	str	r3, [r2, #48]	; 0x30
 80046d6:	4b99      	ldr	r3, [pc, #612]	; (800493c <MX_GPIO_Init+0x28c>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	4b95      	ldr	r3, [pc, #596]	; (800493c <MX_GPIO_Init+0x28c>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	4a94      	ldr	r2, [pc, #592]	; (800493c <MX_GPIO_Init+0x28c>)
 80046ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f0:	6313      	str	r3, [r2, #48]	; 0x30
 80046f2:	4b92      	ldr	r3, [pc, #584]	; (800493c <MX_GPIO_Init+0x28c>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
 8004702:	4b8e      	ldr	r3, [pc, #568]	; (800493c <MX_GPIO_Init+0x28c>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004706:	4a8d      	ldr	r2, [pc, #564]	; (800493c <MX_GPIO_Init+0x28c>)
 8004708:	f043 0304 	orr.w	r3, r3, #4
 800470c:	6313      	str	r3, [r2, #48]	; 0x30
 800470e:	4b8b      	ldr	r3, [pc, #556]	; (800493c <MX_GPIO_Init+0x28c>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	4b87      	ldr	r3, [pc, #540]	; (800493c <MX_GPIO_Init+0x28c>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004722:	4a86      	ldr	r2, [pc, #536]	; (800493c <MX_GPIO_Init+0x28c>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6313      	str	r3, [r2, #48]	; 0x30
 800472a:	4b84      	ldr	r3, [pc, #528]	; (800493c <MX_GPIO_Init+0x28c>)
 800472c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60bb      	str	r3, [r7, #8]
 800473a:	4b80      	ldr	r3, [pc, #512]	; (800493c <MX_GPIO_Init+0x28c>)
 800473c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473e:	4a7f      	ldr	r2, [pc, #508]	; (800493c <MX_GPIO_Init+0x28c>)
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6313      	str	r3, [r2, #48]	; 0x30
 8004746:	4b7d      	ldr	r3, [pc, #500]	; (800493c <MX_GPIO_Init+0x28c>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	4b79      	ldr	r3, [pc, #484]	; (800493c <MX_GPIO_Init+0x28c>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a78      	ldr	r2, [pc, #480]	; (800493c <MX_GPIO_Init+0x28c>)
 800475c:	f043 0308 	orr.w	r3, r3, #8
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b76      	ldr	r3, [pc, #472]	; (800493c <MX_GPIO_Init+0x28c>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0308 	and.w	r3, r3, #8
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800476e:	2200      	movs	r2, #0
 8004770:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004774:	4872      	ldr	r0, [pc, #456]	; (8004940 <MX_GPIO_Init+0x290>)
 8004776:	f003 f90d 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800477a:	2200      	movs	r2, #0
 800477c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004780:	4870      	ldr	r0, [pc, #448]	; (8004944 <MX_GPIO_Init+0x294>)
 8004782:	f003 f907 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004786:	2200      	movs	r2, #0
 8004788:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800478c:	486e      	ldr	r0, [pc, #440]	; (8004948 <MX_GPIO_Init+0x298>)
 800478e:	f003 f901 	bl	8007994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004792:	2200      	movs	r2, #0
 8004794:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004798:	486c      	ldr	r0, [pc, #432]	; (800494c <MX_GPIO_Init+0x29c>)
 800479a:	f003 f8fb 	bl	8007994 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800479e:	2304      	movs	r3, #4
 80047a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80047a2:	4b6b      	ldr	r3, [pc, #428]	; (8004950 <MX_GPIO_Init+0x2a0>)
 80047a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a6:	2300      	movs	r3, #0
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047aa:	f107 031c 	add.w	r3, r7, #28
 80047ae:	4619      	mov	r1, r3
 80047b0:	4863      	ldr	r0, [pc, #396]	; (8004940 <MX_GPIO_Init+0x290>)
 80047b2:	f002 ff2d 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80047b6:	230f      	movs	r3, #15
 80047b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ba:	2303      	movs	r3, #3
 80047bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	2300      	movs	r3, #0
 80047c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c2:	f107 031c 	add.w	r3, r7, #28
 80047c6:	4619      	mov	r1, r3
 80047c8:	4862      	ldr	r0, [pc, #392]	; (8004954 <MX_GPIO_Init+0x2a4>)
 80047ca:	f002 ff21 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047ce:	23e1      	movs	r3, #225	; 0xe1
 80047d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047d2:	2303      	movs	r3, #3
 80047d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047da:	f107 031c 	add.w	r3, r7, #28
 80047de:	4619      	mov	r1, r3
 80047e0:	485a      	ldr	r0, [pc, #360]	; (800494c <MX_GPIO_Init+0x29c>)
 80047e2:	f002 ff15 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047e6:	2303      	movs	r3, #3
 80047e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ea:	2303      	movs	r3, #3
 80047ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047f2:	f107 031c 	add.w	r3, r7, #28
 80047f6:	4619      	mov	r1, r3
 80047f8:	4852      	ldr	r0, [pc, #328]	; (8004944 <MX_GPIO_Init+0x294>)
 80047fa:	f002 ff09 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047fe:	2304      	movs	r3, #4
 8004800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004802:	2300      	movs	r3, #0
 8004804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004806:	2301      	movs	r3, #1
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800480a:	f107 031c 	add.w	r3, r7, #28
 800480e:	4619      	mov	r1, r3
 8004810:	484c      	ldr	r0, [pc, #304]	; (8004944 <MX_GPIO_Init+0x294>)
 8004812:	f002 fefd 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8004816:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800481a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800481c:	2300      	movs	r3, #0
 800481e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004820:	2301      	movs	r3, #1
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004824:	f107 031c 	add.w	r3, r7, #28
 8004828:	4619      	mov	r1, r3
 800482a:	4845      	ldr	r0, [pc, #276]	; (8004940 <MX_GPIO_Init+0x290>)
 800482c:	f002 fef0 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004830:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004836:	2301      	movs	r3, #1
 8004838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004842:	f107 031c 	add.w	r3, r7, #28
 8004846:	4619      	mov	r1, r3
 8004848:	483d      	ldr	r0, [pc, #244]	; (8004940 <MX_GPIO_Init+0x290>)
 800484a:	f002 fee1 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800484e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004854:	2301      	movs	r3, #1
 8004856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004858:	2300      	movs	r3, #0
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800485c:	2300      	movs	r3, #0
 800485e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004860:	f107 031c 	add.w	r3, r7, #28
 8004864:	4619      	mov	r1, r3
 8004866:	4837      	ldr	r0, [pc, #220]	; (8004944 <MX_GPIO_Init+0x294>)
 8004868:	f002 fed2 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800486c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004872:	4b39      	ldr	r3, [pc, #228]	; (8004958 <MX_GPIO_Init+0x2a8>)
 8004874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004876:	2300      	movs	r3, #0
 8004878:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800487a:	f107 031c 	add.w	r3, r7, #28
 800487e:	4619      	mov	r1, r3
 8004880:	4831      	ldr	r0, [pc, #196]	; (8004948 <MX_GPIO_Init+0x298>)
 8004882:	f002 fec5 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800488a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800488c:	2301      	movs	r3, #1
 800488e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004894:	2300      	movs	r3, #0
 8004896:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004898:	f107 031c 	add.w	r3, r7, #28
 800489c:	4619      	mov	r1, r3
 800489e:	482a      	ldr	r0, [pc, #168]	; (8004948 <MX_GPIO_Init+0x298>)
 80048a0:	f002 feb6 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80048a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048aa:	2301      	movs	r3, #1
 80048ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ae:	2301      	movs	r3, #1
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b2:	2300      	movs	r3, #0
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048b6:	f107 031c 	add.w	r3, r7, #28
 80048ba:	4619      	mov	r1, r3
 80048bc:	4822      	ldr	r0, [pc, #136]	; (8004948 <MX_GPIO_Init+0x298>)
 80048be:	f002 fea7 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80048c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80048c6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048c8:	2301      	movs	r3, #1
 80048ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048cc:	2300      	movs	r3, #0
 80048ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048d0:	2300      	movs	r3, #0
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d4:	f107 031c 	add.w	r3, r7, #28
 80048d8:	4619      	mov	r1, r3
 80048da:	481c      	ldr	r0, [pc, #112]	; (800494c <MX_GPIO_Init+0x29c>)
 80048dc:	f002 fe98 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ee:	f107 031c 	add.w	r3, r7, #28
 80048f2:	4619      	mov	r1, r3
 80048f4:	4815      	ldr	r0, [pc, #84]	; (800494c <MX_GPIO_Init+0x29c>)
 80048f6:	f002 fe8b 	bl	8007610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80048fa:	239b      	movs	r3, #155	; 0x9b
 80048fc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004902:	2301      	movs	r3, #1
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004906:	f107 031c 	add.w	r3, r7, #28
 800490a:	4619      	mov	r1, r3
 800490c:	480e      	ldr	r0, [pc, #56]	; (8004948 <MX_GPIO_Init+0x298>)
 800490e:	f002 fe7f 	bl	8007610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8004912:	2200      	movs	r2, #0
 8004914:	2100      	movs	r1, #0
 8004916:	2008      	movs	r0, #8
 8004918:	f002 faa7 	bl	8006e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800491c:	2008      	movs	r0, #8
 800491e:	f002 fac0 	bl	8006ea2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004922:	2200      	movs	r2, #0
 8004924:	2100      	movs	r1, #0
 8004926:	2017      	movs	r0, #23
 8004928:	f002 fa9f 	bl	8006e6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800492c:	2017      	movs	r0, #23
 800492e:	f002 fab8 	bl	8006ea2 <HAL_NVIC_EnableIRQ>

}
 8004932:	bf00      	nop
 8004934:	3730      	adds	r7, #48	; 0x30
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	40021000 	.word	0x40021000
 8004944:	40020400 	.word	0x40020400
 8004948:	40020c00 	.word	0x40020c00
 800494c:	40020000 	.word	0x40020000
 8004950:	10310000 	.word	0x10310000
 8004954:	40020800 	.word	0x40020800
 8004958:	10110000 	.word	0x10110000

0800495c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004960:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004962:	e7fe      	b.n	8004962 <Error_Handler+0x6>

08004964 <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004964:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 800496c:	4b3d      	ldr	r3, [pc, #244]	; (8004a64 <CalcError1+0x100>)
 800496e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004972:	4b3c      	ldr	r3, [pc, #240]	; (8004a64 <CalcError1+0x100>)
 8004974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004978:	f7fb fc9e 	bl	80002b8 <__aeabi_dsub>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004984:	4b37      	ldr	r3, [pc, #220]	; (8004a64 <CalcError1+0x100>)
 8004986:	e9d3 0100 	ldrd	r0, r1, [r3]
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <CalcError1+0x100>)
 800498c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004990:	f7fb fc92 	bl	80002b8 <__aeabi_dsub>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 800499c:	4b31      	ldr	r3, [pc, #196]	; (8004a64 <CalcError1+0x100>)
 800499e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80049a2:	eeb0 0a47 	vmov.f32	s0, s14
 80049a6:	eef0 0a67 	vmov.f32	s1, s15
 80049aa:	f00d f83d 	bl	8011a28 <sin>
 80049ae:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 80049b2:	4b2c      	ldr	r3, [pc, #176]	; (8004a64 <CalcError1+0x100>)
 80049b4:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80049b8:	eeb0 0a47 	vmov.f32	s0, s14
 80049bc:	eef0 0a67 	vmov.f32	s1, s15
 80049c0:	f00c ffee 	bl	80119a0 <cos>
 80049c4:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 80049c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049d0:	f7fb fe2a 	bl	8000628 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4690      	mov	r8, r2
 80049da:	4699      	mov	r9, r3
 80049dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049e0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049e4:	f7fb fe20 	bl	8000628 <__aeabi_dmul>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4640      	mov	r0, r8
 80049ee:	4649      	mov	r1, r9
 80049f0:	f7fb fc64 	bl	80002bc <__adddf3>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	491b      	ldr	r1, [pc, #108]	; (8004a68 <CalcError1+0x104>)
 80049fa:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 80049fe:	68bc      	ldr	r4, [r7, #8]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004a06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fb fe0b 	bl	8000628 <__aeabi_dmul>
 8004a12:	4603      	mov	r3, r0
 8004a14:	460c      	mov	r4, r1
 8004a16:	4625      	mov	r5, r4
 8004a18:	461c      	mov	r4, r3
 8004a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a22:	f7fb fe01 	bl	8000628 <__aeabi_dmul>
 8004a26:	4602      	mov	r2, r0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	f7fb fc45 	bl	80002bc <__adddf3>
 8004a32:	4603      	mov	r3, r0
 8004a34:	460c      	mov	r4, r1
 8004a36:	4a0c      	ldr	r2, [pc, #48]	; (8004a68 <CalcError1+0x104>)
 8004a38:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <CalcError1+0x100>)
 8004a3e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <CalcError1+0x100>)
 8004a44:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4623      	mov	r3, r4
 8004a4c:	f7fb fc34 	bl	80002b8 <__aeabi_dsub>
 8004a50:	4603      	mov	r3, r0
 8004a52:	460c      	mov	r4, r1
 8004a54:	4a04      	ldr	r2, [pc, #16]	; (8004a68 <CalcError1+0x104>)
 8004a56:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004a5a:	bf00      	nop
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a64:	20021dd0 	.word	0x20021dd0
 8004a68:	20021e00 	.word	0x20021e00

08004a6c <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004a6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a70:	b08a      	sub	sp, #40	; 0x28
 8004a72:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004a74:	4b7a      	ldr	r3, [pc, #488]	; (8004c60 <path_following_step+0x1f4>)
 8004a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	4b79      	ldr	r3, [pc, #484]	; (8004c64 <path_following_step+0x1f8>)
 8004a80:	f7fb fdd2 	bl	8000628 <__aeabi_dmul>
 8004a84:	4603      	mov	r3, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004a8c:	4b76      	ldr	r3, [pc, #472]	; (8004c68 <path_following_step+0x1fc>)
 8004a8e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004a92:	461a      	mov	r2, r3
 8004a94:	4623      	mov	r3, r4
 8004a96:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004a9a:	f7fb fc0d 	bl	80002b8 <__aeabi_dsub>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	e9c7 3406 	strd	r3, r4, [r7, #24]
  mon1 = rtb_TSamp;
 8004aa6:	4a71      	ldr	r2, [pc, #452]	; (8004c6c <path_following_step+0x200>)
 8004aa8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004aac:	e9c2 3400 	strd	r3, r4, [r2]
  mon2 = rtDW.UD_DSTATE;
 8004ab0:	4b6d      	ldr	r3, [pc, #436]	; (8004c68 <path_following_step+0x1fc>)
 8004ab2:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004ab6:	4a6e      	ldr	r2, [pc, #440]	; (8004c70 <path_following_step+0x204>)
 8004ab8:	e9c2 3400 	strd	r3, r4, [r2]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004ac4:	f7fb fdb0 	bl	8000628 <__aeabi_dmul>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	460c      	mov	r4, r1
 8004acc:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004ad0:	4b63      	ldr	r3, [pc, #396]	; (8004c60 <path_following_step+0x1f4>)
 8004ad2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004ad6:	f04f 0200 	mov.w	r2, #0
 8004ada:	4b62      	ldr	r3, [pc, #392]	; (8004c64 <path_following_step+0x1f8>)
 8004adc:	f7fb fda4 	bl	8000628 <__aeabi_dmul>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	460c      	mov	r4, r1
 8004ae4:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004ae8:	4b5f      	ldr	r3, [pc, #380]	; (8004c68 <path_following_step+0x1fc>)
 8004aea:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004aee:	461a      	mov	r2, r3
 8004af0:	4623      	mov	r3, r4
 8004af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004af6:	f7fb fbdf 	bl	80002b8 <__aeabi_dsub>
 8004afa:	4603      	mov	r3, r0
 8004afc:	460c      	mov	r4, r1
 8004afe:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004b02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b06:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004b0a:	f7fb fd8d 	bl	8000628 <__aeabi_dmul>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	460c      	mov	r4, r1
 8004b12:	4618      	mov	r0, r3
 8004b14:	4621      	mov	r1, r4
 8004b16:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b1a:	f7fb fbcf 	bl	80002bc <__adddf3>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	ec44 3b17 	vmov	d7, r3, r4
 8004b26:	eeb0 0a47 	vmov.f32	s0, s14
 8004b2a:	eef0 0a67 	vmov.f32	s1, s15
 8004b2e:	f00c ffc3 	bl	8011ab8 <sqrt>
 8004b32:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004b36:	f7ff ff15 	bl	8004964 <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004b3a:	4b49      	ldr	r3, [pc, #292]	; (8004c60 <path_following_step+0x1f4>)
 8004b3c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <path_following_step+0x1f8>)
 8004b46:	f7fb fd6f 	bl	8000628 <__aeabi_dmul>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	460c      	mov	r4, r1
 8004b4e:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004b52:	4b45      	ldr	r3, [pc, #276]	; (8004c68 <path_following_step+0x1fc>)
 8004b54:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4623      	mov	r3, r4
 8004b5c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b60:	f7fb fbaa 	bl	80002b8 <__aeabi_dsub>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004b6c:	4a3e      	ldr	r2, [pc, #248]	; (8004c68 <path_following_step+0x1fc>)
 8004b6e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b72:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004b76:	4a3c      	ldr	r2, [pc, #240]	; (8004c68 <path_following_step+0x1fc>)
 8004b78:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b7c:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004b80:	4a39      	ldr	r2, [pc, #228]	; (8004c68 <path_following_step+0x1fc>)
 8004b82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004b86:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004b8a:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <path_following_step+0x208>)
 8004b8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <path_following_step+0x1fc>)
 8004b92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b96:	461a      	mov	r2, r3
 8004b98:	4623      	mov	r3, r4
 8004b9a:	f7fb fd45 	bl	8000628 <__aeabi_dmul>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	4625      	mov	r5, r4
 8004ba4:	461c      	mov	r4, r3
 8004ba6:	4b30      	ldr	r3, [pc, #192]	; (8004c68 <path_following_step+0x1fc>)
 8004ba8:	ed93 7b04 	vldr	d7, [r3, #16]
 8004bac:	eeb0 0a47 	vmov.f32	s0, s14
 8004bb0:	eef0 0a67 	vmov.f32	s1, s15
 8004bb4:	f00c fef4 	bl	80119a0 <cos>
 8004bb8:	ec51 0b10 	vmov	r0, r1, d0
 8004bbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bc0:	f7fb fd32 	bl	8000628 <__aeabi_dmul>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	4620      	mov	r0, r4
 8004bca:	4629      	mov	r1, r5
 8004bcc:	f7fb fb76 	bl	80002bc <__adddf3>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <path_following_step+0x20c>)
 8004bd6:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004bda:	4b26      	ldr	r3, [pc, #152]	; (8004c74 <path_following_step+0x208>)
 8004bdc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004be0:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <path_following_step+0x1fc>)
 8004be2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004be6:	461a      	mov	r2, r3
 8004be8:	4623      	mov	r3, r4
 8004bea:	f7fb fd1d 	bl	8000628 <__aeabi_dmul>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	4698      	mov	r8, r3
 8004bf4:	46a1      	mov	r9, r4
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <path_following_step+0x208>)
 8004bf8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004bfc:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <path_following_step+0x1fc>)
 8004bfe:	ed93 7b04 	vldr	d7, [r3, #16]
 8004c02:	eeb0 0a47 	vmov.f32	s0, s14
 8004c06:	eef0 0a67 	vmov.f32	s1, s15
 8004c0a:	f00c ff0d 	bl	8011a28 <sin>
 8004c0e:	ec53 2b10 	vmov	r2, r3, d0
 8004c12:	4620      	mov	r0, r4
 8004c14:	4629      	mov	r1, r5
 8004c16:	f7fb fd07 	bl	8000628 <__aeabi_dmul>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	460c      	mov	r4, r1
 8004c1e:	461a      	mov	r2, r3
 8004c20:	4623      	mov	r3, r4
 8004c22:	4640      	mov	r0, r8
 8004c24:	4649      	mov	r1, r9
 8004c26:	f7fb fb49 	bl	80002bc <__adddf3>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4618      	mov	r0, r3
 8004c30:	4621      	mov	r1, r4
 8004c32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c36:	f7fb fcf7 	bl	8000628 <__aeabi_dmul>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	460c      	mov	r4, r1
 8004c3e:	4618      	mov	r0, r3
 8004c40:	4621      	mov	r1, r4
 8004c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c46:	f7fb fb39 	bl	80002bc <__adddf3>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <path_following_step+0x20c>)
 8004c50:	e9c2 3402 	strd	r3, r4, [r2, #8]
  //mon2 = rtb_Diff;


  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004c54:	bf00      	nop
 8004c56:	3728      	adds	r7, #40	; 0x28
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c5e:	bf00      	nop
 8004c60:	20021dd0 	.word	0x20021dd0
 8004c64:	408f4000 	.word	0x408f4000
 8004c68:	20021e00 	.word	0x20021e00
 8004c6c:	20021dc0 	.word	0x20021dc0
 8004c70:	20021dc8 	.word	0x20021dc8
 8004c74:	20021e40 	.word	0x20021e40
 8004c78:	20021e30 	.word	0x20021e30

08004c7c <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004c80:	bf00      	nop
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	4b10      	ldr	r3, [pc, #64]	; (8004cd8 <HAL_MspInit+0x4c>)
 8004c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9a:	4a0f      	ldr	r2, [pc, #60]	; (8004cd8 <HAL_MspInit+0x4c>)
 8004c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	; (8004cd8 <HAL_MspInit+0x4c>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	4b09      	ldr	r3, [pc, #36]	; (8004cd8 <HAL_MspInit+0x4c>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	4a08      	ldr	r2, [pc, #32]	; (8004cd8 <HAL_MspInit+0x4c>)
 8004cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_MspInit+0x4c>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	370c      	adds	r7, #12
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40023800 	.word	0x40023800

08004cdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	; 0x30
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ce4:	f107 031c 	add.w	r3, r7, #28
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a4a      	ldr	r2, [pc, #296]	; (8004e24 <HAL_ADC_MspInit+0x148>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	f040 808e 	bne.w	8004e1c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004d00:	2300      	movs	r3, #0
 8004d02:	61bb      	str	r3, [r7, #24]
 8004d04:	4b48      	ldr	r3, [pc, #288]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d08:	4a47      	ldr	r2, [pc, #284]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8004d10:	4b45      	ldr	r3, [pc, #276]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d18:	61bb      	str	r3, [r7, #24]
 8004d1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
 8004d20:	4b41      	ldr	r3, [pc, #260]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d24:	4a40      	ldr	r2, [pc, #256]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d26:	f043 0304 	orr.w	r3, r3, #4
 8004d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d2c:	4b3e      	ldr	r3, [pc, #248]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	617b      	str	r3, [r7, #20]
 8004d36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]
 8004d3c:	4b3a      	ldr	r3, [pc, #232]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d40:	4a39      	ldr	r2, [pc, #228]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d42:	f043 0301 	orr.w	r3, r3, #1
 8004d46:	6313      	str	r3, [r2, #48]	; 0x30
 8004d48:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	613b      	str	r3, [r7, #16]
 8004d52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	4b33      	ldr	r3, [pc, #204]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5c:	4a32      	ldr	r2, [pc, #200]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d5e:	f043 0302 	orr.w	r3, r3, #2
 8004d62:	6313      	str	r3, [r2, #48]	; 0x30
 8004d64:	4b30      	ldr	r3, [pc, #192]	; (8004e28 <HAL_ADC_MspInit+0x14c>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	60fb      	str	r3, [r7, #12]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004d70:	230f      	movs	r3, #15
 8004d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d74:	2303      	movs	r3, #3
 8004d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d78:	2300      	movs	r3, #0
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d7c:	f107 031c 	add.w	r3, r7, #28
 8004d80:	4619      	mov	r1, r3
 8004d82:	482a      	ldr	r0, [pc, #168]	; (8004e2c <HAL_ADC_MspInit+0x150>)
 8004d84:	f002 fc44 	bl	8007610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004d88:	23ff      	movs	r3, #255	; 0xff
 8004d8a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d94:	f107 031c 	add.w	r3, r7, #28
 8004d98:	4619      	mov	r1, r3
 8004d9a:	4825      	ldr	r0, [pc, #148]	; (8004e30 <HAL_ADC_MspInit+0x154>)
 8004d9c:	f002 fc38 	bl	8007610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004da0:	2303      	movs	r3, #3
 8004da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004da4:	2303      	movs	r3, #3
 8004da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004da8:	2300      	movs	r3, #0
 8004daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dac:	f107 031c 	add.w	r3, r7, #28
 8004db0:	4619      	mov	r1, r3
 8004db2:	4820      	ldr	r0, [pc, #128]	; (8004e34 <HAL_ADC_MspInit+0x158>)
 8004db4:	f002 fc2c 	bl	8007610 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004db8:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_ADC_MspInit+0x160>)
 8004dbc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dc0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004dc4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004dc6:	4b1c      	ldr	r3, [pc, #112]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004dd2:	4b19      	ldr	r3, [pc, #100]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dd8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004ddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004de0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004de2:	4b15      	ldr	r3, [pc, #84]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004de4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004de8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004df0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004df2:	4b11      	ldr	r3, [pc, #68]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004df4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004df8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004e00:	480d      	ldr	r0, [pc, #52]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004e02:	f002 f869 	bl	8006ed8 <HAL_DMA_Init>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004e0c:	f7ff fda6 	bl	800495c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a09      	ldr	r2, [pc, #36]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004e14:	639a      	str	r2, [r3, #56]	; 0x38
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <HAL_ADC_MspInit+0x15c>)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004e1c:	bf00      	nop
 8004e1e:	3730      	adds	r7, #48	; 0x30
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	40012100 	.word	0x40012100
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40020800 	.word	0x40020800
 8004e30:	40020000 	.word	0x40020000
 8004e34:	40020400 	.word	0x40020400
 8004e38:	20021d20 	.word	0x20021d20
 8004e3c:	40026440 	.word	0x40026440

08004e40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08c      	sub	sp, #48	; 0x30
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e48:	f107 031c 	add.w	r3, r7, #28
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a32      	ldr	r2, [pc, #200]	; (8004f28 <HAL_I2C_MspInit+0xe8>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d12c      	bne.n	8004ebc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6a:	4a30      	ldr	r2, [pc, #192]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004e6c:	f043 0302 	orr.w	r3, r3, #2
 8004e70:	6313      	str	r3, [r2, #48]	; 0x30
 8004e72:	4b2e      	ldr	r3, [pc, #184]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	61bb      	str	r3, [r7, #24]
 8004e7c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e7e:	23c0      	movs	r3, #192	; 0xc0
 8004e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e82:	2312      	movs	r3, #18
 8004e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e86:	2301      	movs	r3, #1
 8004e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e8e:	2304      	movs	r3, #4
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e92:	f107 031c 	add.w	r3, r7, #28
 8004e96:	4619      	mov	r1, r3
 8004e98:	4825      	ldr	r0, [pc, #148]	; (8004f30 <HAL_I2C_MspInit+0xf0>)
 8004e9a:	f002 fbb9 	bl	8007610 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea6:	4a21      	ldr	r2, [pc, #132]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004ea8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eac:	6413      	str	r3, [r2, #64]	; 0x40
 8004eae:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004eb6:	617b      	str	r3, [r7, #20]
 8004eb8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004eba:	e031      	b.n	8004f20 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1c      	ldr	r2, [pc, #112]	; (8004f34 <HAL_I2C_MspInit+0xf4>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d12c      	bne.n	8004f20 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004ed0:	f043 0302 	orr.w	r3, r3, #2
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b15      	ldr	r3, [pc, #84]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	613b      	str	r3, [r7, #16]
 8004ee0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ee2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ee8:	2312      	movs	r3, #18
 8004eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eec:	2301      	movs	r3, #1
 8004eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ef8:	f107 031c 	add.w	r3, r7, #28
 8004efc:	4619      	mov	r1, r3
 8004efe:	480c      	ldr	r0, [pc, #48]	; (8004f30 <HAL_I2C_MspInit+0xf0>)
 8004f00:	f002 fb86 	bl	8007610 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	4b08      	ldr	r3, [pc, #32]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	4a07      	ldr	r2, [pc, #28]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f12:	6413      	str	r3, [r2, #64]	; 0x40
 8004f14:	4b05      	ldr	r3, [pc, #20]	; (8004f2c <HAL_I2C_MspInit+0xec>)
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
}
 8004f20:	bf00      	nop
 8004f22:	3730      	adds	r7, #48	; 0x30
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	40005400 	.word	0x40005400
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40020400 	.word	0x40020400
 8004f34:	40005800 	.word	0x40005800

08004f38 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08a      	sub	sp, #40	; 0x28
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f40:	f107 0314 	add.w	r3, r7, #20
 8004f44:	2200      	movs	r2, #0
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	605a      	str	r2, [r3, #4]
 8004f4a:	609a      	str	r2, [r3, #8]
 8004f4c:	60da      	str	r2, [r3, #12]
 8004f4e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a69      	ldr	r2, [pc, #420]	; (80050fc <HAL_SD_MspInit+0x1c4>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	f040 80cb 	bne.w	80050f2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	4b67      	ldr	r3, [pc, #412]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f64:	4a66      	ldr	r2, [pc, #408]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6c:	4b64      	ldr	r3, [pc, #400]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f74:	613b      	str	r3, [r7, #16]
 8004f76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	4b60      	ldr	r3, [pc, #384]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	4a5f      	ldr	r2, [pc, #380]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f82:	f043 0304 	orr.w	r3, r3, #4
 8004f86:	6313      	str	r3, [r2, #48]	; 0x30
 8004f88:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f94:	2300      	movs	r3, #0
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	4b59      	ldr	r3, [pc, #356]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9c:	4a58      	ldr	r2, [pc, #352]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004f9e:	f043 0308 	orr.w	r3, r3, #8
 8004fa2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa4:	4b56      	ldr	r3, [pc, #344]	; (8005100 <HAL_SD_MspInit+0x1c8>)
 8004fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004fb0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004fb4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fc2:	230c      	movs	r3, #12
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fc6:	f107 0314 	add.w	r3, r7, #20
 8004fca:	4619      	mov	r1, r3
 8004fcc:	484d      	ldr	r0, [pc, #308]	; (8005104 <HAL_SD_MspInit+0x1cc>)
 8004fce:	f002 fb1f 	bl	8007610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fe6:	f107 0314 	add.w	r3, r7, #20
 8004fea:	4619      	mov	r1, r3
 8004fec:	4846      	ldr	r0, [pc, #280]	; (8005108 <HAL_SD_MspInit+0x1d0>)
 8004fee:	f002 fb0f 	bl	8007610 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004ff2:	4b46      	ldr	r3, [pc, #280]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8004ff4:	4a46      	ldr	r2, [pc, #280]	; (8005110 <HAL_SD_MspInit+0x1d8>)
 8004ff6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004ff8:	4b44      	ldr	r3, [pc, #272]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8004ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ffe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005000:	4b42      	ldr	r3, [pc, #264]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005006:	4b41      	ldr	r3, [pc, #260]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005008:	2200      	movs	r2, #0
 800500a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800500c:	4b3f      	ldr	r3, [pc, #252]	; (800510c <HAL_SD_MspInit+0x1d4>)
 800500e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005012:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005014:	4b3d      	ldr	r3, [pc, #244]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005016:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800501a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800501c:	4b3b      	ldr	r3, [pc, #236]	; (800510c <HAL_SD_MspInit+0x1d4>)
 800501e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005022:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005026:	2220      	movs	r2, #32
 8005028:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800502a:	4b38      	ldr	r3, [pc, #224]	; (800510c <HAL_SD_MspInit+0x1d4>)
 800502c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005030:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005032:	4b36      	ldr	r3, [pc, #216]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005034:	2204      	movs	r2, #4
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005038:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_SD_MspInit+0x1d4>)
 800503a:	2203      	movs	r2, #3
 800503c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800503e:	4b33      	ldr	r3, [pc, #204]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005040:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005046:	4b31      	ldr	r3, [pc, #196]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005048:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800504c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800504e:	482f      	ldr	r0, [pc, #188]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005050:	f001 ff42 	bl	8006ed8 <HAL_DMA_Init>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d001      	beq.n	800505e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800505a:	f7ff fc7f 	bl	800495c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a2a      	ldr	r2, [pc, #168]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
 8005064:	4a29      	ldr	r2, [pc, #164]	; (800510c <HAL_SD_MspInit+0x1d4>)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800506a:	4b2a      	ldr	r3, [pc, #168]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 800506c:	4a2a      	ldr	r2, [pc, #168]	; (8005118 <HAL_SD_MspInit+0x1e0>)
 800506e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005070:	4b28      	ldr	r3, [pc, #160]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 8005072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005076:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005078:	4b26      	ldr	r3, [pc, #152]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 800507a:	2240      	movs	r2, #64	; 0x40
 800507c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800507e:	4b25      	ldr	r3, [pc, #148]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 8005080:	2200      	movs	r2, #0
 8005082:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005084:	4b23      	ldr	r3, [pc, #140]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 8005086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800508a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800508c:	4b21      	ldr	r3, [pc, #132]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 800508e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005092:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005094:	4b1f      	ldr	r3, [pc, #124]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 8005096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800509a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800509c:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 800509e:	2220      	movs	r2, #32
 80050a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80050a2:	4b1c      	ldr	r3, [pc, #112]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80050a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050aa:	4b1a      	ldr	r3, [pc, #104]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050ac:	2204      	movs	r2, #4
 80050ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80050b0:	4b18      	ldr	r3, [pc, #96]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050b2:	2203      	movs	r2, #3
 80050b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80050b6:	4b17      	ldr	r3, [pc, #92]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80050bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80050be:	4b15      	ldr	r3, [pc, #84]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80050c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80050c6:	4813      	ldr	r0, [pc, #76]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050c8:	f001 ff06 	bl	8006ed8 <HAL_DMA_Init>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80050d2:	f7ff fc43 	bl	800495c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c
 80050dc:	4a0d      	ldr	r2, [pc, #52]	; (8005114 <HAL_SD_MspInit+0x1dc>)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2100      	movs	r1, #0
 80050e6:	2031      	movs	r0, #49	; 0x31
 80050e8:	f001 febf 	bl	8006e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80050ec:	2031      	movs	r0, #49	; 0x31
 80050ee:	f001 fed8 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80050f2:	bf00      	nop
 80050f4:	3728      	adds	r7, #40	; 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	40012c00 	.word	0x40012c00
 8005100:	40023800 	.word	0x40023800
 8005104:	40020800 	.word	0x40020800
 8005108:	40020c00 	.word	0x40020c00
 800510c:	20021848 	.word	0x20021848
 8005110:	40026458 	.word	0x40026458
 8005114:	20021b7c 	.word	0x20021b7c
 8005118:	400264a0 	.word	0x400264a0

0800511c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005124:	f107 0314 	add.w	r3, r7, #20
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <HAL_SPI_MspInit+0x84>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d12c      	bne.n	8005198 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	4b18      	ldr	r3, [pc, #96]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	4a17      	ldr	r2, [pc, #92]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800514c:	6413      	str	r3, [r2, #64]	; 0x40
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005156:	613b      	str	r3, [r7, #16]
 8005158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005162:	4a10      	ldr	r2, [pc, #64]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 8005164:	f043 0302 	orr.w	r3, r3, #2
 8005168:	6313      	str	r3, [r2, #48]	; 0x30
 800516a:	4b0e      	ldr	r3, [pc, #56]	; (80051a4 <HAL_SPI_MspInit+0x88>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005176:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800517a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517c:	2302      	movs	r3, #2
 800517e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005184:	2303      	movs	r3, #3
 8005186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005188:	2305      	movs	r3, #5
 800518a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800518c:	f107 0314 	add.w	r3, r7, #20
 8005190:	4619      	mov	r1, r3
 8005192:	4805      	ldr	r0, [pc, #20]	; (80051a8 <HAL_SPI_MspInit+0x8c>)
 8005194:	f002 fa3c 	bl	8007610 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005198:	bf00      	nop
 800519a:	3728      	adds	r7, #40	; 0x28
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	40003800 	.word	0x40003800
 80051a4:	40023800 	.word	0x40023800
 80051a8:	40020400 	.word	0x40020400

080051ac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08c      	sub	sp, #48	; 0x30
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	605a      	str	r2, [r3, #4]
 80051be:	609a      	str	r2, [r3, #8]
 80051c0:	60da      	str	r2, [r3, #12]
 80051c2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a2d      	ldr	r2, [pc, #180]	; (8005280 <HAL_TIM_PWM_MspInit+0xd4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d12d      	bne.n	800522a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80051ce:	2300      	movs	r3, #0
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	4b2c      	ldr	r3, [pc, #176]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 80051d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051d6:	4a2b      	ldr	r2, [pc, #172]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	6453      	str	r3, [r2, #68]	; 0x44
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	61bb      	str	r3, [r7, #24]
 80051e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051ea:	2300      	movs	r3, #0
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	4b25      	ldr	r3, [pc, #148]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	4a24      	ldr	r2, [pc, #144]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 80051f4:	f043 0310 	orr.w	r3, r3, #16
 80051f8:	6313      	str	r3, [r2, #48]	; 0x30
 80051fa:	4b22      	ldr	r3, [pc, #136]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 80051fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8005206:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800520a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005214:	2300      	movs	r3, #0
 8005216:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005218:	2301      	movs	r3, #1
 800521a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800521c:	f107 031c 	add.w	r3, r7, #28
 8005220:	4619      	mov	r1, r3
 8005222:	4819      	ldr	r0, [pc, #100]	; (8005288 <HAL_TIM_PWM_MspInit+0xdc>)
 8005224:	f002 f9f4 	bl	8007610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005228:	e026      	b.n	8005278 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a17      	ldr	r2, [pc, #92]	; (800528c <HAL_TIM_PWM_MspInit+0xe0>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d10e      	bne.n	8005252 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]
 8005238:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 800523e:	f043 0302 	orr.w	r3, r3, #2
 8005242:	6413      	str	r3, [r2, #64]	; 0x40
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	613b      	str	r3, [r7, #16]
 800524e:	693b      	ldr	r3, [r7, #16]
}
 8005250:	e012      	b.n	8005278 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a0e      	ldr	r2, [pc, #56]	; (8005290 <HAL_TIM_PWM_MspInit+0xe4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d10d      	bne.n	8005278 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]
 8005260:	4b08      	ldr	r3, [pc, #32]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	4a07      	ldr	r2, [pc, #28]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 8005266:	f043 0304 	orr.w	r3, r3, #4
 800526a:	6413      	str	r3, [r2, #64]	; 0x40
 800526c:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_TIM_PWM_MspInit+0xd8>)
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	68fb      	ldr	r3, [r7, #12]
}
 8005278:	bf00      	nop
 800527a:	3730      	adds	r7, #48	; 0x30
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	40010000 	.word	0x40010000
 8005284:	40023800 	.word	0x40023800
 8005288:	40021000 	.word	0x40021000
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800

08005294 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a3e      	ldr	r2, [pc, #248]	; (800539c <HAL_TIM_Base_MspInit+0x108>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d116      	bne.n	80052d4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80052a6:	2300      	movs	r3, #0
 80052a8:	61fb      	str	r3, [r7, #28]
 80052aa:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 80052ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ae:	4a3c      	ldr	r2, [pc, #240]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 80052b0:	f043 0310 	orr.w	r3, r3, #16
 80052b4:	6413      	str	r3, [r2, #64]	; 0x40
 80052b6:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	f003 0310 	and.w	r3, r3, #16
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80052c2:	2200      	movs	r2, #0
 80052c4:	2101      	movs	r1, #1
 80052c6:	2036      	movs	r0, #54	; 0x36
 80052c8:	f001 fdcf 	bl	8006e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80052cc:	2036      	movs	r0, #54	; 0x36
 80052ce:	f001 fde8 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80052d2:	e05e      	b.n	8005392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a32      	ldr	r2, [pc, #200]	; (80053a4 <HAL_TIM_Base_MspInit+0x110>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d116      	bne.n	800530c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	61bb      	str	r3, [r7, #24]
 80052e2:	4b2f      	ldr	r3, [pc, #188]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a2e      	ldr	r2, [pc, #184]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 80052e8:	f043 0320 	orr.w	r3, r3, #32
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80052fa:	2200      	movs	r2, #0
 80052fc:	2100      	movs	r1, #0
 80052fe:	2037      	movs	r0, #55	; 0x37
 8005300:	f001 fdb3 	bl	8006e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005304:	2037      	movs	r0, #55	; 0x37
 8005306:	f001 fdcc 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
}
 800530a:	e042      	b.n	8005392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a25      	ldr	r2, [pc, #148]	; (80053a8 <HAL_TIM_Base_MspInit+0x114>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10e      	bne.n	8005334 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	4b21      	ldr	r3, [pc, #132]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 800531c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531e:	4a20      	ldr	r2, [pc, #128]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005324:	6453      	str	r3, [r2, #68]	; 0x44
 8005326:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532e:	617b      	str	r3, [r7, #20]
 8005330:	697b      	ldr	r3, [r7, #20]
}
 8005332:	e02e      	b.n	8005392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a1c      	ldr	r2, [pc, #112]	; (80053ac <HAL_TIM_Base_MspInit+0x118>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10e      	bne.n	800535c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800533e:	2300      	movs	r3, #0
 8005340:	613b      	str	r3, [r7, #16]
 8005342:	4b17      	ldr	r3, [pc, #92]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800534c:	6453      	str	r3, [r2, #68]	; 0x44
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005356:	613b      	str	r3, [r7, #16]
 8005358:	693b      	ldr	r3, [r7, #16]
}
 800535a:	e01a      	b.n	8005392 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <HAL_TIM_Base_MspInit+0x11c>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d115      	bne.n	8005392 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005366:	2300      	movs	r3, #0
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	4b0d      	ldr	r3, [pc, #52]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	4a0c      	ldr	r2, [pc, #48]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005374:	6413      	str	r3, [r2, #64]	; 0x40
 8005376:	4b0a      	ldr	r3, [pc, #40]	; (80053a0 <HAL_TIM_Base_MspInit+0x10c>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	60fb      	str	r3, [r7, #12]
 8005380:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005382:	2200      	movs	r2, #0
 8005384:	2100      	movs	r1, #0
 8005386:	202c      	movs	r0, #44	; 0x2c
 8005388:	f001 fd6f 	bl	8006e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800538c:	202c      	movs	r0, #44	; 0x2c
 800538e:	f001 fd88 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
}
 8005392:	bf00      	nop
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40001000 	.word	0x40001000
 80053a0:	40023800 	.word	0x40023800
 80053a4:	40001400 	.word	0x40001400
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40001c00 	.word	0x40001c00

080053b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08a      	sub	sp, #40	; 0x28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053bc:	f107 0314 	add.w	r3, r7, #20
 80053c0:	2200      	movs	r2, #0
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	605a      	str	r2, [r3, #4]
 80053c6:	609a      	str	r2, [r3, #8]
 80053c8:	60da      	str	r2, [r3, #12]
 80053ca:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	; (8005448 <HAL_TIM_Encoder_MspInit+0x94>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d133      	bne.n	800543e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80053d6:	2300      	movs	r3, #0
 80053d8:	613b      	str	r3, [r7, #16]
 80053da:	4b1c      	ldr	r3, [pc, #112]	; (800544c <HAL_TIM_Encoder_MspInit+0x98>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	4a1b      	ldr	r2, [pc, #108]	; (800544c <HAL_TIM_Encoder_MspInit+0x98>)
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6453      	str	r3, [r2, #68]	; 0x44
 80053e6:	4b19      	ldr	r3, [pc, #100]	; (800544c <HAL_TIM_Encoder_MspInit+0x98>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_TIM_Encoder_MspInit+0x98>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053fa:	4a14      	ldr	r2, [pc, #80]	; (800544c <HAL_TIM_Encoder_MspInit+0x98>)
 80053fc:	f043 0304 	orr.w	r3, r3, #4
 8005400:	6313      	str	r3, [r2, #48]	; 0x30
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <HAL_TIM_Encoder_MspInit+0x98>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	f003 0304 	and.w	r3, r3, #4
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800540e:	23c0      	movs	r3, #192	; 0xc0
 8005410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005412:	2302      	movs	r3, #2
 8005414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	2300      	movs	r3, #0
 8005418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541a:	2300      	movs	r3, #0
 800541c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800541e:	2303      	movs	r3, #3
 8005420:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005422:	f107 0314 	add.w	r3, r7, #20
 8005426:	4619      	mov	r1, r3
 8005428:	4809      	ldr	r0, [pc, #36]	; (8005450 <HAL_TIM_Encoder_MspInit+0x9c>)
 800542a:	f002 f8f1 	bl	8007610 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800542e:	2200      	movs	r2, #0
 8005430:	2100      	movs	r1, #0
 8005432:	202c      	movs	r0, #44	; 0x2c
 8005434:	f001 fd19 	bl	8006e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8005438:	202c      	movs	r0, #44	; 0x2c
 800543a:	f001 fd32 	bl	8006ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800543e:	bf00      	nop
 8005440:	3728      	adds	r7, #40	; 0x28
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	40010400 	.word	0x40010400
 800544c:	40023800 	.word	0x40023800
 8005450:	40020800 	.word	0x40020800

08005454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800545c:	f107 031c 	add.w	r3, r7, #28
 8005460:	2200      	movs	r2, #0
 8005462:	601a      	str	r2, [r3, #0]
 8005464:	605a      	str	r2, [r3, #4]
 8005466:	609a      	str	r2, [r3, #8]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a5c      	ldr	r2, [pc, #368]	; (80055e4 <HAL_TIM_MspPostInit+0x190>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d11f      	bne.n	80054b6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	4b5b      	ldr	r3, [pc, #364]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	4a5a      	ldr	r2, [pc, #360]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 8005480:	f043 0310 	orr.w	r3, r3, #16
 8005484:	6313      	str	r3, [r2, #48]	; 0x30
 8005486:	4b58      	ldr	r3, [pc, #352]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548a:	f003 0310 	and.w	r3, r3, #16
 800548e:	61bb      	str	r3, [r7, #24]
 8005490:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005492:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005498:	2302      	movs	r3, #2
 800549a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a0:	2300      	movs	r3, #0
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054a4:	2301      	movs	r3, #1
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054a8:	f107 031c 	add.w	r3, r7, #28
 80054ac:	4619      	mov	r1, r3
 80054ae:	484f      	ldr	r0, [pc, #316]	; (80055ec <HAL_TIM_MspPostInit+0x198>)
 80054b0:	f002 f8ae 	bl	8007610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80054b4:	e091      	b.n	80055da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a4d      	ldr	r2, [pc, #308]	; (80055f0 <HAL_TIM_MspPostInit+0x19c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d11e      	bne.n	80054fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	4b48      	ldr	r3, [pc, #288]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a47      	ldr	r2, [pc, #284]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 80054ca:	f043 0302 	orr.w	r3, r3, #2
 80054ce:	6313      	str	r3, [r2, #48]	; 0x30
 80054d0:	4b45      	ldr	r3, [pc, #276]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	617b      	str	r3, [r7, #20]
 80054da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80054dc:	2330      	movs	r3, #48	; 0x30
 80054de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e0:	2302      	movs	r3, #2
 80054e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e4:	2300      	movs	r3, #0
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054e8:	2300      	movs	r3, #0
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054ec:	2302      	movs	r3, #2
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f0:	f107 031c 	add.w	r3, r7, #28
 80054f4:	4619      	mov	r1, r3
 80054f6:	483f      	ldr	r0, [pc, #252]	; (80055f4 <HAL_TIM_MspPostInit+0x1a0>)
 80054f8:	f002 f88a 	bl	8007610 <HAL_GPIO_Init>
}
 80054fc:	e06d      	b.n	80055da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a3d      	ldr	r2, [pc, #244]	; (80055f8 <HAL_TIM_MspPostInit+0x1a4>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d11f      	bne.n	8005548 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005508:	2300      	movs	r3, #0
 800550a:	613b      	str	r3, [r7, #16]
 800550c:	4b36      	ldr	r3, [pc, #216]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 800550e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005510:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 8005512:	f043 0308 	orr.w	r3, r3, #8
 8005516:	6313      	str	r3, [r2, #48]	; 0x30
 8005518:	4b33      	ldr	r3, [pc, #204]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	613b      	str	r3, [r7, #16]
 8005522:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005524:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552a:	2302      	movs	r3, #2
 800552c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	2300      	movs	r3, #0
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005532:	2300      	movs	r3, #0
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005536:	2302      	movs	r3, #2
 8005538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800553a:	f107 031c 	add.w	r3, r7, #28
 800553e:	4619      	mov	r1, r3
 8005540:	482e      	ldr	r0, [pc, #184]	; (80055fc <HAL_TIM_MspPostInit+0x1a8>)
 8005542:	f002 f865 	bl	8007610 <HAL_GPIO_Init>
}
 8005546:	e048      	b.n	80055da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a2c      	ldr	r2, [pc, #176]	; (8005600 <HAL_TIM_MspPostInit+0x1ac>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d11f      	bne.n	8005592 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005552:	2300      	movs	r3, #0
 8005554:	60fb      	str	r3, [r7, #12]
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 8005558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555a:	4a23      	ldr	r2, [pc, #140]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 800555c:	f043 0302 	orr.w	r3, r3, #2
 8005560:	6313      	str	r3, [r2, #48]	; 0x30
 8005562:	4b21      	ldr	r3, [pc, #132]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 8005564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800556e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005574:	2302      	movs	r3, #2
 8005576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800557c:	2300      	movs	r3, #0
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005580:	2303      	movs	r3, #3
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005584:	f107 031c 	add.w	r3, r7, #28
 8005588:	4619      	mov	r1, r3
 800558a:	481a      	ldr	r0, [pc, #104]	; (80055f4 <HAL_TIM_MspPostInit+0x1a0>)
 800558c:	f002 f840 	bl	8007610 <HAL_GPIO_Init>
}
 8005590:	e023      	b.n	80055da <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <HAL_TIM_MspPostInit+0x1b0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d11e      	bne.n	80055da <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800559c:	2300      	movs	r3, #0
 800559e:	60bb      	str	r3, [r7, #8]
 80055a0:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	4a10      	ldr	r2, [pc, #64]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 80055a6:	f043 0302 	orr.w	r3, r3, #2
 80055aa:	6313      	str	r3, [r2, #48]	; 0x30
 80055ac:	4b0e      	ldr	r3, [pc, #56]	; (80055e8 <HAL_TIM_MspPostInit+0x194>)
 80055ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80055b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055be:	2302      	movs	r3, #2
 80055c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055c6:	2300      	movs	r3, #0
 80055c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80055ca:	2303      	movs	r3, #3
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055ce:	f107 031c 	add.w	r3, r7, #28
 80055d2:	4619      	mov	r1, r3
 80055d4:	4807      	ldr	r0, [pc, #28]	; (80055f4 <HAL_TIM_MspPostInit+0x1a0>)
 80055d6:	f002 f81b 	bl	8007610 <HAL_GPIO_Init>
}
 80055da:	bf00      	nop
 80055dc:	3730      	adds	r7, #48	; 0x30
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40023800 	.word	0x40023800
 80055ec:	40021000 	.word	0x40021000
 80055f0:	40000400 	.word	0x40000400
 80055f4:	40020400 	.word	0x40020400
 80055f8:	40000800 	.word	0x40000800
 80055fc:	40020c00 	.word	0x40020c00
 8005600:	40014400 	.word	0x40014400
 8005604:	40014800 	.word	0x40014800

08005608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005610:	f107 0314 	add.w	r3, r7, #20
 8005614:	2200      	movs	r2, #0
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	605a      	str	r2, [r3, #4]
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	60da      	str	r2, [r3, #12]
 800561e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a19      	ldr	r2, [pc, #100]	; (800568c <HAL_UART_MspInit+0x84>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d12b      	bne.n	8005682 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800562a:	2300      	movs	r3, #0
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_UART_MspInit+0x88>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	4a17      	ldr	r2, [pc, #92]	; (8005690 <HAL_UART_MspInit+0x88>)
 8005634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005638:	6413      	str	r3, [r2, #64]	; 0x40
 800563a:	4b15      	ldr	r3, [pc, #84]	; (8005690 <HAL_UART_MspInit+0x88>)
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005642:	613b      	str	r3, [r7, #16]
 8005644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	4b11      	ldr	r3, [pc, #68]	; (8005690 <HAL_UART_MspInit+0x88>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	4a10      	ldr	r2, [pc, #64]	; (8005690 <HAL_UART_MspInit+0x88>)
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	6313      	str	r3, [r2, #48]	; 0x30
 8005656:	4b0e      	ldr	r3, [pc, #56]	; (8005690 <HAL_UART_MspInit+0x88>)
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005662:	2360      	movs	r3, #96	; 0x60
 8005664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005666:	2302      	movs	r3, #2
 8005668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800566a:	2300      	movs	r3, #0
 800566c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800566e:	2303      	movs	r3, #3
 8005670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005672:	2307      	movs	r3, #7
 8005674:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005676:	f107 0314 	add.w	r3, r7, #20
 800567a:	4619      	mov	r1, r3
 800567c:	4805      	ldr	r0, [pc, #20]	; (8005694 <HAL_UART_MspInit+0x8c>)
 800567e:	f001 ffc7 	bl	8007610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005682:	bf00      	nop
 8005684:	3728      	adds	r7, #40	; 0x28
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40004400 	.word	0x40004400
 8005690:	40023800 	.word	0x40023800
 8005694:	40020c00 	.word	0x40020c00

08005698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005698:	b480      	push	{r7}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800569c:	e7fe      	b.n	800569c <NMI_Handler+0x4>

0800569e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800569e:	b480      	push	{r7}
 80056a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80056a2:	e7fe      	b.n	80056a2 <HardFault_Handler+0x4>

080056a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80056a8:	e7fe      	b.n	80056a8 <MemManage_Handler+0x4>

080056aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80056aa:	b480      	push	{r7}
 80056ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80056ae:	e7fe      	b.n	80056ae <BusFault_Handler+0x4>

080056b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80056b4:	e7fe      	b.n	80056b4 <UsageFault_Handler+0x4>

080056b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80056b6:	b480      	push	{r7}
 80056b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80056ba:	bf00      	nop
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80056c4:	b480      	push	{r7}
 80056c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80056c8:	bf00      	nop
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80056d2:	b480      	push	{r7}
 80056d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80056d6:	bf00      	nop
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056e4:	f000 fea0 	bl	8006428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056e8:	bf00      	nop
 80056ea:	bd80      	pop	{r7, pc}

080056ec <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80056f0:	2004      	movs	r0, #4
 80056f2:	f002 f969 	bl	80079c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80056f6:	bf00      	nop
 80056f8:	bd80      	pop	{r7, pc}

080056fa <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80056fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005702:	f002 f961 	bl	80079c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
	...

0800570c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8005710:	4803      	ldr	r0, [pc, #12]	; (8005720 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8005712:	f006 f978 	bl	800ba06 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8005716:	4803      	ldr	r0, [pc, #12]	; (8005724 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8005718:	f006 f975 	bl	800ba06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800571c:	bf00      	nop
 800571e:	bd80      	pop	{r7, pc}
 8005720:	20021900 	.word	0x20021900
 8005724:	20021afc 	.word	0x20021afc

08005728 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800572c:	4802      	ldr	r0, [pc, #8]	; (8005738 <SDIO_IRQHandler+0x10>)
 800572e:	f004 fa11 	bl	8009b54 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005732:	bf00      	nop
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20021c5c 	.word	0x20021c5c

0800573c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005740:	4802      	ldr	r0, [pc, #8]	; (800574c <TIM6_DAC_IRQHandler+0x10>)
 8005742:	f006 f960 	bl	800ba06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005746:	bf00      	nop
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20021bdc 	.word	0x20021bdc

08005750 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005754:	4802      	ldr	r0, [pc, #8]	; (8005760 <TIM7_IRQHandler+0x10>)
 8005756:	f006 f956 	bl	800ba06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800575a:	bf00      	nop
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20021d80 	.word	0x20021d80

08005764 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005768:	4802      	ldr	r0, [pc, #8]	; (8005774 <DMA2_Stream2_IRQHandler+0x10>)
 800576a:	f001 fcdd 	bl	8007128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20021d20 	.word	0x20021d20

08005778 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800577c:	4802      	ldr	r0, [pc, #8]	; (8005788 <DMA2_Stream3_IRQHandler+0x10>)
 800577e:	f001 fcd3 	bl	8007128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005782:	bf00      	nop
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20021848 	.word	0x20021848

0800578c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005790:	4802      	ldr	r0, [pc, #8]	; (800579c <DMA2_Stream6_IRQHandler+0x10>)
 8005792:	f001 fcc9 	bl	8007128 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005796:	bf00      	nop
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	20021b7c 	.word	0x20021b7c

080057a0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
 80057b0:	e00a      	b.n	80057c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80057b2:	f3af 8000 	nop.w
 80057b6:	4601      	mov	r1, r0
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60ba      	str	r2, [r7, #8]
 80057be:	b2ca      	uxtb	r2, r1
 80057c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	dbf0      	blt.n	80057b2 <_read+0x12>
	}

return len;
 80057d0:	687b      	ldr	r3, [r7, #4]
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3718      	adds	r7, #24
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <_close>:
	}
	return len;
}

int _close(int file)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
	return -1;
 80057e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005802:	605a      	str	r2, [r3, #4]
	return 0;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <_isatty>:

int _isatty(int file)
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
	return 1;
 800581a:	2301      	movs	r3, #1
}
 800581c:	4618      	mov	r0, r3
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr

08005828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
	return 0;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
	...

08005844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800584c:	4a14      	ldr	r2, [pc, #80]	; (80058a0 <_sbrk+0x5c>)
 800584e:	4b15      	ldr	r3, [pc, #84]	; (80058a4 <_sbrk+0x60>)
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005858:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <_sbrk+0x64>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d102      	bne.n	8005866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <_sbrk+0x64>)
 8005862:	4a12      	ldr	r2, [pc, #72]	; (80058ac <_sbrk+0x68>)
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <_sbrk+0x64>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4413      	add	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	429a      	cmp	r2, r3
 8005872:	d207      	bcs.n	8005884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005874:	f00d f9fa 	bl	8012c6c <__errno>
 8005878:	4602      	mov	r2, r0
 800587a:	230c      	movs	r3, #12
 800587c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	e009      	b.n	8005898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005884:	4b08      	ldr	r3, [pc, #32]	; (80058a8 <_sbrk+0x64>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800588a:	4b07      	ldr	r3, [pc, #28]	; (80058a8 <_sbrk+0x64>)
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4413      	add	r3, r2
 8005892:	4a05      	ldr	r2, [pc, #20]	; (80058a8 <_sbrk+0x64>)
 8005894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005896:	68fb      	ldr	r3, [r7, #12]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20050000 	.word	0x20050000
 80058a4:	00000400 	.word	0x00000400
 80058a8:	20000230 	.word	0x20000230
 80058ac:	20023ed8 	.word	0x20023ed8

080058b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <SystemInit+0x28>)
 80058b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <SystemInit+0x28>)
 80058bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <SystemInit+0x28>)
 80058c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058ca:	609a      	str	r2, [r3, #8]
#endif
}
 80058cc:	bf00      	nop
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <batteryLowMode>:
double mon_v, mon_w;

bool flag = false;

void batteryLowMode()
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
	lcd_clear();
 80058e0:	f7fb fbde 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80058e4:	2100      	movs	r1, #0
 80058e6:	2000      	movs	r0, #0
 80058e8:	f7fb fbea 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80058ec:	4814      	ldr	r0, [pc, #80]	; (8005940 <batteryLowMode+0x64>)
 80058ee:	f7fb fc11 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80058f2:	2101      	movs	r1, #1
 80058f4:	2000      	movs	r0, #0
 80058f6:	f7fb fbe3 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80058fa:	4812      	ldr	r0, [pc, #72]	; (8005944 <batteryLowMode+0x68>)
 80058fc:	f7fb fc0a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 8005900:	2152      	movs	r1, #82	; 0x52
 8005902:	4811      	ldr	r0, [pc, #68]	; (8005948 <batteryLowMode+0x6c>)
 8005904:	f7fc fb08 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005908:	2064      	movs	r0, #100	; 0x64
 800590a:	f000 fdad 	bl	8006468 <HAL_Delay>
		led.fullColor('Y');
 800590e:	2159      	movs	r1, #89	; 0x59
 8005910:	480d      	ldr	r0, [pc, #52]	; (8005948 <batteryLowMode+0x6c>)
 8005912:	f7fc fb01 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8005916:	2064      	movs	r0, #100	; 0x64
 8005918:	f000 fda6 	bl	8006468 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 800591c:	480b      	ldr	r0, [pc, #44]	; (800594c <batteryLowMode+0x70>)
 800591e:	f7fc fa97 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005922:	4603      	mov	r3, r0
 8005924:	2b02      	cmp	r3, #2
 8005926:	bf0c      	ite	eq
 8005928:	2301      	moveq	r3, #1
 800592a:	2300      	movne	r3, #0
 800592c:	b2db      	uxtb	r3, r3
 800592e:	2b00      	cmp	r3, #0
 8005930:	d0e6      	beq.n	8005900 <batteryLowMode+0x24>
			HAL_Delay(500);
 8005932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005936:	f000 fd97 	bl	8006468 <HAL_Delay>
			break;
 800593a:	bf00      	nop
		}
	}
}
 800593c:	bf00      	nop
 800593e:	bd80      	pop	{r7, pc}
 8005940:	08017bd8 	.word	0x08017bd8
 8005944:	08017be0 	.word	0x08017be0
 8005948:	2000053c 	.word	0x2000053c
 800594c:	20000530 	.word	0x20000530

08005950 <cppInit>:

void cppInit(void)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	af00      	add	r7, sp, #0
	lcd_init();
 8005954:	f7fb fb60 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005958:	4832      	ldr	r0, [pc, #200]	; (8005a24 <cppInit+0xd4>)
 800595a:	f7fd fccb 	bl	80032f4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800595e:	2064      	movs	r0, #100	; 0x64
 8005960:	f000 fd82 	bl	8006468 <HAL_Delay>
	power_sensor.updateValues();
 8005964:	482f      	ldr	r0, [pc, #188]	; (8005a24 <cppInit+0xd4>)
 8005966:	f7fd fcd3 	bl	8003310 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 800596a:	482e      	ldr	r0, [pc, #184]	; (8005a24 <cppInit+0xd4>)
 800596c:	f7fd fcfc 	bl	8003368 <_ZN11PowerSensor12butteryCheckEv>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <cppInit+0x2a>
 8005976:	f7ff ffb1 	bl	80058dc <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800597a:	482b      	ldr	r0, [pc, #172]	; (8005a28 <cppInit+0xd8>)
 800597c:	f7fd f89a 	bl	8002ab4 <_ZN6Logger10sdCardInitEv>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <cppInit+0x46>
		led.fullColor('G');
 8005986:	2147      	movs	r1, #71	; 0x47
 8005988:	4828      	ldr	r0, [pc, #160]	; (8005a2c <cppInit+0xdc>)
 800598a:	f7fc fac5 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800598e:	2064      	movs	r0, #100	; 0x64
 8005990:	f000 fd6a 	bl	8006468 <HAL_Delay>
 8005994:	e006      	b.n	80059a4 <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005996:	2152      	movs	r1, #82	; 0x52
 8005998:	4824      	ldr	r0, [pc, #144]	; (8005a2c <cppInit+0xdc>)
 800599a:	f7fc fabd 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800599e:	2064      	movs	r0, #100	; 0x64
 80059a0:	f000 fd62 	bl	8006468 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80059a4:	4822      	ldr	r0, [pc, #136]	; (8005a30 <cppInit+0xe0>)
 80059a6:	f7fc fc13 	bl	80021d0 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80059aa:	4822      	ldr	r0, [pc, #136]	; (8005a34 <cppInit+0xe4>)
 80059ac:	f7fd f96a 	bl	8002c84 <_ZN5Motor4initEv>
	encoder.init();
 80059b0:	4821      	ldr	r0, [pc, #132]	; (8005a38 <cppInit+0xe8>)
 80059b2:	f7fb fc03 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 80059b6:	4821      	ldr	r0, [pc, #132]	; (8005a3c <cppInit+0xec>)
 80059b8:	f7fc f8a8 	bl	8001b0c <_ZN3IMU4initEv>

	line_sensor.calibration();
 80059bc:	481c      	ldr	r0, [pc, #112]	; (8005a30 <cppInit+0xe0>)
 80059be:	f7fc fcfd 	bl	80023bc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80059c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059c6:	f000 fd4f 	bl	8006468 <HAL_Delay>

	led.fullColor('M');
 80059ca:	214d      	movs	r1, #77	; 0x4d
 80059cc:	4817      	ldr	r0, [pc, #92]	; (8005a2c <cppInit+0xdc>)
 80059ce:	f7fc faa3 	bl	8001f18 <_ZN3LED9fullColorEc>
	imu.calibration();
 80059d2:	481a      	ldr	r0, [pc, #104]	; (8005a3c <cppInit+0xec>)
 80059d4:	f7fc f92a 	bl	8001c2c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 80059d8:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8005a40 <cppInit+0xf0>
 80059dc:	eddf 0a19 	vldr	s1, [pc, #100]	; 8005a44 <cppInit+0xf4>
 80059e0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8005a48 <cppInit+0xf8>
 80059e4:	4819      	ldr	r0, [pc, #100]	; (8005a4c <cppInit+0xfc>)
 80059e6:	f7fc ffaf 	bl	8002948 <_ZN9LineTrace7setGainEfff>

	velocity_ctrl.setVelocityGain(1.5, 0, 20);
 80059ea:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 80059ee:	eddf 0a14 	vldr	s1, [pc, #80]	; 8005a40 <cppInit+0xf0>
 80059f2:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80059f6:	4816      	ldr	r0, [pc, #88]	; (8005a50 <cppInit+0x100>)
 80059f8:	f7fd ff66 	bl	80038c8 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(0, 0, 0);
	velocity_ctrl.setOmegaGain(0.05, 0, 7);
 80059fc:	eeb1 1a0c 	vmov.f32	s2, #28	; 0x40e00000  7.0
 8005a00:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005a40 <cppInit+0xf0>
 8005a04:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005a54 <cppInit+0x104>
 8005a08:	4811      	ldr	r0, [pc, #68]	; (8005a50 <cppInit+0x100>)
 8005a0a:	f7fd ff76 	bl	80038fa <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	encoder.clearDistance();
 8005a0e:	480a      	ldr	r0, [pc, #40]	; (8005a38 <cppInit+0xe8>)
 8005a10:	f7fb fcc2 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 8005a14:	4810      	ldr	r0, [pc, #64]	; (8005a58 <cppInit+0x108>)
 8005a16:	f7fd fb43 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8005a1a:	4810      	ldr	r0, [pc, #64]	; (8005a5c <cppInit+0x10c>)
 8005a1c:	f7fd fbbe 	bl	800319c <_ZN13PathFollowing4initEv>

}
 8005a20:	bf00      	nop
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	20000540 	.word	0x20000540
 8005a28:	20000570 	.word	0x20000570
 8005a2c:	2000053c 	.word	0x2000053c
 8005a30:	20000234 	.word	0x20000234
 8005a34:	20000538 	.word	0x20000538
 8005a38:	2001f1a8 	.word	0x2001f1a8
 8005a3c:	20000550 	.word	0x20000550
 8005a40:	00000000 	.word	0x00000000
 8005a44:	360637bd 	.word	0x360637bd
 8005a48:	3a03126f 	.word	0x3a03126f
 8005a4c:	2001f218 	.word	0x2001f218
 8005a50:	2001f1d8 	.word	0x2001f1d8
 8005a54:	3d4ccccd 	.word	0x3d4ccccd
 8005a58:	2001f278 	.word	0x2001f278
 8005a5c:	2001f2a8 	.word	0x2001f2a8

08005a60 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005a64:	480c      	ldr	r0, [pc, #48]	; (8005a98 <cppFlip1ms+0x38>)
 8005a66:	f7fc fc11 	bl	800228c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005a6a:	480c      	ldr	r0, [pc, #48]	; (8005a9c <cppFlip1ms+0x3c>)
 8005a6c:	f7fc f862 	bl	8001b34 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005a70:	480b      	ldr	r0, [pc, #44]	; (8005aa0 <cppFlip1ms+0x40>)
 8005a72:	f7fb fbc5 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005a76:	480b      	ldr	r0, [pc, #44]	; (8005aa4 <cppFlip1ms+0x44>)
 8005a78:	f7fc ff9e 	bl	80029b8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005a7c:	480a      	ldr	r0, [pc, #40]	; (8005aa8 <cppFlip1ms+0x48>)
 8005a7e:	f7fd ff55 	bl	800392c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005a82:	480a      	ldr	r0, [pc, #40]	; (8005aac <cppFlip1ms+0x4c>)
 8005a84:	f7fd face 	bl	8003024 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005a88:	4809      	ldr	r0, [pc, #36]	; (8005ab0 <cppFlip1ms+0x50>)
 8005a8a:	f7fd f90d 	bl	8002ca8 <_ZN5Motor9motorCtrlEv>
		odometry.clearPotition();
	}
	*/


	encoder.clearCnt();
 8005a8e:	4804      	ldr	r0, [pc, #16]	; (8005aa0 <cppFlip1ms+0x40>)
 8005a90:	f7fb fc92 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005a94:	bf00      	nop
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000234 	.word	0x20000234
 8005a9c:	20000550 	.word	0x20000550
 8005aa0:	2001f1a8 	.word	0x2001f1a8
 8005aa4:	2001f218 	.word	0x2001f218
 8005aa8:	2001f1d8 	.word	0x2001f1d8
 8005aac:	2001f278 	.word	0x2001f278
 8005ab0:	20000538 	.word	0x20000538

08005ab4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005ab8:	4802      	ldr	r0, [pc, #8]	; (8005ac4 <cppFlip100ns+0x10>)
 8005aba:	f7fc fb99 	bl	80021f0 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005abe:	bf00      	nop
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000234 	.word	0x20000234

08005ac8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005ac8:	b5b0      	push	{r4, r5, r7, lr}
 8005aca:	ed2d 8b04 	vpush	{d8-d9}
 8005ace:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005ad0:	4b53      	ldr	r3, [pc, #332]	; (8005c20 <cppFlip10ms+0x158>)
 8005ad2:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8005ada:	4852      	ldr	r0, [pc, #328]	; (8005c24 <cppFlip10ms+0x15c>)
 8005adc:	f7fd f832 	bl	8002b44 <_ZN6Logger8storeLogEf>

	path_following.setGain(0.01, 0.01, 0.01);
 8005ae0:	ed9f 2b4b 	vldr	d2, [pc, #300]	; 8005c10 <cppFlip10ms+0x148>
 8005ae4:	ed9f 1b4a 	vldr	d1, [pc, #296]	; 8005c10 <cppFlip10ms+0x148>
 8005ae8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 8005c10 <cppFlip10ms+0x148>
 8005aec:	484e      	ldr	r0, [pc, #312]	; (8005c28 <cppFlip10ms+0x160>)
 8005aee:	f7fd fb5f 	bl	80031b0 <_ZN13PathFollowing7setGainEddd>
	static double x, y, th;
	if(flag == true){
 8005af2:	4b4e      	ldr	r3, [pc, #312]	; (8005c2c <cppFlip10ms+0x164>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d028      	beq.n	8005b4c <cppFlip10ms+0x84>
		x += 0.001;
 8005afa:	4b4d      	ldr	r3, [pc, #308]	; (8005c30 <cppFlip10ms+0x168>)
 8005afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b00:	a345      	add	r3, pc, #276	; (adr r3, 8005c18 <cppFlip10ms+0x150>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f7fa fbd9 	bl	80002bc <__adddf3>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	460c      	mov	r4, r1
 8005b0e:	4a48      	ldr	r2, [pc, #288]	; (8005c30 <cppFlip10ms+0x168>)
 8005b10:	e9c2 3400 	strd	r3, r4, [r2]
		y += 0.00;
 8005b14:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <cppFlip10ms+0x16c>)
 8005b16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b1a:	f04f 0200 	mov.w	r2, #0
 8005b1e:	f04f 0300 	mov.w	r3, #0
 8005b22:	f7fa fbcb 	bl	80002bc <__adddf3>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	4a42      	ldr	r2, [pc, #264]	; (8005c34 <cppFlip10ms+0x16c>)
 8005b2c:	e9c2 3400 	strd	r3, r4, [r2]
		th += 0.00;
 8005b30:	4b41      	ldr	r3, [pc, #260]	; (8005c38 <cppFlip10ms+0x170>)
 8005b32:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	f7fa fbbd 	bl	80002bc <__adddf3>
 8005b42:	4603      	mov	r3, r0
 8005b44:	460c      	mov	r4, r1
 8005b46:	4a3c      	ldr	r2, [pc, #240]	; (8005c38 <cppFlip10ms+0x170>)
 8005b48:	e9c2 3400 	strd	r3, r4, [r2]
	}
	path_following.setTargetPath(x, y, th);
 8005b4c:	4b38      	ldr	r3, [pc, #224]	; (8005c30 <cppFlip10ms+0x168>)
 8005b4e:	ed93 7b00 	vldr	d7, [r3]
 8005b52:	4b38      	ldr	r3, [pc, #224]	; (8005c34 <cppFlip10ms+0x16c>)
 8005b54:	ed93 6b00 	vldr	d6, [r3]
 8005b58:	4b37      	ldr	r3, [pc, #220]	; (8005c38 <cppFlip10ms+0x170>)
 8005b5a:	ed93 5b00 	vldr	d5, [r3]
 8005b5e:	eeb0 2a45 	vmov.f32	s4, s10
 8005b62:	eef0 2a65 	vmov.f32	s5, s11
 8005b66:	eeb0 1a46 	vmov.f32	s2, s12
 8005b6a:	eef0 1a66 	vmov.f32	s3, s13
 8005b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8005b72:	eef0 0a67 	vmov.f32	s1, s15
 8005b76:	482c      	ldr	r0, [pc, #176]	; (8005c28 <cppFlip10ms+0x160>)
 8005b78:	f7fd fb3a 	bl	80031f0 <_ZN13PathFollowing13setTargetPathEddd>
	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005b7c:	482f      	ldr	r0, [pc, #188]	; (8005c3c <cppFlip10ms+0x174>)
 8005b7e:	f7fd fa5c 	bl	800303a <_ZN8Odometry4getXEv>
 8005b82:	eeb0 8a40 	vmov.f32	s16, s0
 8005b86:	eef0 8a60 	vmov.f32	s17, s1
 8005b8a:	482c      	ldr	r0, [pc, #176]	; (8005c3c <cppFlip10ms+0x174>)
 8005b8c:	f7fd fa66 	bl	800305c <_ZN8Odometry4getYEv>
 8005b90:	eeb0 9a40 	vmov.f32	s18, s0
 8005b94:	eef0 9a60 	vmov.f32	s19, s1
 8005b98:	4828      	ldr	r0, [pc, #160]	; (8005c3c <cppFlip10ms+0x174>)
 8005b9a:	f7fd fa70 	bl	800307e <_ZN8Odometry8getThetaEv>
 8005b9e:	eeb0 7a40 	vmov.f32	s14, s0
 8005ba2:	eef0 7a60 	vmov.f32	s15, s1
 8005ba6:	eeb0 2a47 	vmov.f32	s4, s14
 8005baa:	eef0 2a67 	vmov.f32	s5, s15
 8005bae:	eeb0 1a49 	vmov.f32	s2, s18
 8005bb2:	eef0 1a69 	vmov.f32	s3, s19
 8005bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8005bba:	eef0 0a68 	vmov.f32	s1, s17
 8005bbe:	481a      	ldr	r0, [pc, #104]	; (8005c28 <cppFlip10ms+0x160>)
 8005bc0:	f7fd fb36 	bl	8003230 <_ZN13PathFollowing14setCurrentPathEddd>
	path_following.flip();
 8005bc4:	4818      	ldr	r0, [pc, #96]	; (8005c28 <cppFlip10ms+0x160>)
 8005bc6:	f7fd fb6d 	bl	80032a4 <_ZN13PathFollowing4flipEv>

	path_following.getTargetVelocitys(mon_v, mon_w);
 8005bca:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <cppFlip10ms+0x178>)
 8005bcc:	491d      	ldr	r1, [pc, #116]	; (8005c44 <cppFlip10ms+0x17c>)
 8005bce:	4816      	ldr	r0, [pc, #88]	; (8005c28 <cppFlip10ms+0x160>)
 8005bd0:	f7fd fb4e 	bl	8003270 <_ZN13PathFollowing18getTargetVelocitysERdS0_>

	velocity_ctrl.setVelocity(mon_v, mon_w);
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <cppFlip10ms+0x17c>)
 8005bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	4621      	mov	r1, r4
 8005bde:	f7fb f81b 	bl	8000c18 <__aeabi_d2f>
 8005be2:	4605      	mov	r5, r0
 8005be4:	4b16      	ldr	r3, [pc, #88]	; (8005c40 <cppFlip10ms+0x178>)
 8005be6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bea:	4618      	mov	r0, r3
 8005bec:	4621      	mov	r1, r4
 8005bee:	f7fb f813 	bl	8000c18 <__aeabi_d2f>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	ee00 3a90 	vmov	s1, r3
 8005bf8:	ee00 5a10 	vmov	s0, r5
 8005bfc:	4812      	ldr	r0, [pc, #72]	; (8005c48 <cppFlip10ms+0x180>)
 8005bfe:	f7fd fe4f 	bl	80038a0 <_ZN12VelocityCtrl11setVelocityEff>
}
 8005c02:	bf00      	nop
 8005c04:	46bd      	mov	sp, r7
 8005c06:	ecbd 8b04 	vpop	{d8-d9}
 8005c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c0c:	f3af 8000 	nop.w
 8005c10:	47ae147b 	.word	0x47ae147b
 8005c14:	3f847ae1 	.word	0x3f847ae1
 8005c18:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c1c:	3f50624d 	.word	0x3f50624d
 8005c20:	20000234 	.word	0x20000234
 8005c24:	20000570 	.word	0x20000570
 8005c28:	2001f2a8 	.word	0x2001f2a8
 8005c2c:	2001f2d0 	.word	0x2001f2d0
 8005c30:	2001f2d8 	.word	0x2001f2d8
 8005c34:	2001f2e0 	.word	0x2001f2e0
 8005c38:	2001f2e8 	.word	0x2001f2e8
 8005c3c:	2001f278 	.word	0x2001f278
 8005c40:	2001f2c8 	.word	0x2001f2c8
 8005c44:	2001f2c0 	.word	0x2001f2c0
 8005c48:	2001f1d8 	.word	0x2001f1d8

08005c4c <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005c56:	88fb      	ldrh	r3, [r7, #6]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4803      	ldr	r0, [pc, #12]	; (8005c68 <cppExit+0x1c>)
 8005c5c:	f7fd fc10 	bl	8003480 <_ZN10SideSensor12updateStatusEt>
}
 8005c60:	bf00      	nop
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	2000052c 	.word	0x2000052c
 8005c6c:	00000000 	.word	0x00000000

08005c70 <cppLoop>:

void cppLoop(void)
{
 8005c70:	b590      	push	{r4, r7, lr}
 8005c72:	b089      	sub	sp, #36	; 0x24
 8005c74:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005c76:	48be      	ldr	r0, [pc, #760]	; (8005f70 <cppLoop+0x300>)
 8005c78:	f7fd fba8 	bl	80033cc <_ZN12RotarySwitch8getValueEv>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b0f      	cmp	r3, #15
 8005c80:	f200 82bd 	bhi.w	80061fe <cppLoop+0x58e>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <cppLoop+0x1c>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005ccd 	.word	0x08005ccd
 8005c90:	08005cef 	.word	0x08005cef
 8005c94:	08005d77 	.word	0x08005d77
 8005c98:	08005e23 	.word	0x08005e23
 8005c9c:	08005edb 	.word	0x08005edb
 8005ca0:	08005fd5 	.word	0x08005fd5
 8005ca4:	0800609f 	.word	0x0800609f
 8005ca8:	08006159 	.word	0x08006159
 8005cac:	080061ff 	.word	0x080061ff
 8005cb0:	080061ff 	.word	0x080061ff
 8005cb4:	080061ff 	.word	0x080061ff
 8005cb8:	080061ff 	.word	0x080061ff
 8005cbc:	080061ff 	.word	0x080061ff
 8005cc0:	080061ff 	.word	0x080061ff
 8005cc4:	080061ff 	.word	0x080061ff
 8005cc8:	080061ff 	.word	0x080061ff

	case 0:
		lcd_clear();
 8005ccc:	f7fb f9e8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f7fb f9f4 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005cd8:	48a6      	ldr	r0, [pc, #664]	; (8005f74 <cppLoop+0x304>)
 8005cda:	f7fb fa1b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005cde:	2101      	movs	r1, #1
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f7fb f9ed 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005ce6:	48a4      	ldr	r0, [pc, #656]	; (8005f78 <cppLoop+0x308>)
 8005ce8:	f7fb fa14 	bl	8001114 <lcd_printf>
		break;
 8005cec:	e296      	b.n	800621c <cppLoop+0x5ac>

	case 1:
		lcd_clear();
 8005cee:	f7fb f9d7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	2000      	movs	r0, #0
 8005cf6:	f7fb f9e3 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005cfa:	48a0      	ldr	r0, [pc, #640]	; (8005f7c <cppLoop+0x30c>)
 8005cfc:	f7fb fa0a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d00:	2101      	movs	r1, #1
 8005d02:	2000      	movs	r0, #0
 8005d04:	f7fb f9dc 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005d08:	489d      	ldr	r0, [pc, #628]	; (8005f80 <cppLoop+0x310>)
 8005d0a:	f7fb fa03 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d0e:	489d      	ldr	r0, [pc, #628]	; (8005f84 <cppLoop+0x314>)
 8005d10:	f7fc f89e 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005d14:	4603      	mov	r3, r0
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	bf0c      	ite	eq
 8005d1a:	2301      	moveq	r3, #1
 8005d1c:	2300      	movne	r3, #0
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f000 826e 	beq.w	8006202 <cppLoop+0x592>
			HAL_Delay(500);
 8005d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d2a:	f000 fb9d 	bl	8006468 <HAL_Delay>

			logger.start();
 8005d2e:	4896      	ldr	r0, [pc, #600]	; (8005f88 <cppLoop+0x318>)
 8005d30:	f7fc ff77 	bl	8002c22 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005d34:	4895      	ldr	r0, [pc, #596]	; (8005f8c <cppLoop+0x31c>)
 8005d36:	f7fd fe0c 	bl	8003952 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005d3a:	eddf 0a95 	vldr	s1, [pc, #596]	; 8005f90 <cppLoop+0x320>
 8005d3e:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005f90 <cppLoop+0x320>
 8005d42:	4892      	ldr	r0, [pc, #584]	; (8005f8c <cppLoop+0x31c>)
 8005d44:	f7fd fdac 	bl	80038a0 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4891      	ldr	r0, [pc, #580]	; (8005f94 <cppLoop+0x324>)
 8005d50:	f7fc f99e 	bl	8002090 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005d54:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005d58:	f000 fb86 	bl	8006468 <HAL_Delay>

			velocity_ctrl.stop();
 8005d5c:	488b      	ldr	r0, [pc, #556]	; (8005f8c <cppLoop+0x31c>)
 8005d5e:	f7fd fe07 	bl	8003970 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005d62:	f04f 32ff 	mov.w	r2, #4294967295
 8005d66:	2100      	movs	r1, #0
 8005d68:	488a      	ldr	r0, [pc, #552]	; (8005f94 <cppLoop+0x324>)
 8005d6a:	f7fc f991 	bl	8002090 <_ZN3LED2LREaa>

			logger.stop();
 8005d6e:	4886      	ldr	r0, [pc, #536]	; (8005f88 <cppLoop+0x318>)
 8005d70:	f7fc ff67 	bl	8002c42 <_ZN6Logger4stopEv>
		}

		break;
 8005d74:	e245      	b.n	8006202 <cppLoop+0x592>

	case 2:
		lcd_clear();
 8005d76:	f7fb f993 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	f7fb f99f 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005d82:	4885      	ldr	r0, [pc, #532]	; (8005f98 <cppLoop+0x328>)
 8005d84:	f7fb f9c6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d88:	2101      	movs	r1, #1
 8005d8a:	2000      	movs	r0, #0
 8005d8c:	f7fb f998 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005d90:	4882      	ldr	r0, [pc, #520]	; (8005f9c <cppLoop+0x32c>)
 8005d92:	f7fb f9bf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d96:	487b      	ldr	r0, [pc, #492]	; (8005f84 <cppLoop+0x314>)
 8005d98:	f7fc f85a 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b02      	cmp	r3, #2
 8005da0:	bf0c      	ite	eq
 8005da2:	2301      	moveq	r3, #1
 8005da4:	2300      	movne	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 822c 	beq.w	8006206 <cppLoop+0x596>
			led.LR(-1, 1);
 8005dae:	2201      	movs	r2, #1
 8005db0:	f04f 31ff 	mov.w	r1, #4294967295
 8005db4:	4877      	ldr	r0, [pc, #476]	; (8005f94 <cppLoop+0x324>)
 8005db6:	f7fc f96b 	bl	8002090 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005dba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dbe:	f000 fb53 	bl	8006468 <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005dc2:	4b77      	ldr	r3, [pc, #476]	; (8005fa0 <cppLoop+0x330>)
 8005dc4:	617b      	str	r3, [r7, #20]
			double d = 0.123456789123456789123456789;
 8005dc6:	a468      	add	r4, pc, #416	; (adr r4, 8005f68 <cppLoop+0x2f8>)
 8005dc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005dcc:	e9c7 3402 	strd	r3, r4, [r7, #8]
			mon_f = f;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7fa fbd0 	bl	8000578 <__aeabi_f2d>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	460c      	mov	r4, r1
 8005ddc:	4a71      	ldr	r2, [pc, #452]	; (8005fa4 <cppLoop+0x334>)
 8005dde:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005de2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005de6:	4a70      	ldr	r2, [pc, #448]	; (8005fa8 <cppLoop+0x338>)
 8005de8:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005dec:	f107 0214 	add.w	r2, r7, #20
 8005df0:	2300      	movs	r3, #0
 8005df2:	9300      	str	r3, [sp, #0]
 8005df4:	4613      	mov	r3, r2
 8005df6:	2201      	movs	r2, #1
 8005df8:	496c      	ldr	r1, [pc, #432]	; (8005fac <cppLoop+0x33c>)
 8005dfa:	486d      	ldr	r0, [pc, #436]	; (8005fb0 <cppLoop+0x340>)
 8005dfc:	f7fb fb98 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005e00:	f107 0208 	add.w	r2, r7, #8
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	4969      	ldr	r1, [pc, #420]	; (8005fb4 <cppLoop+0x344>)
 8005e0e:	4868      	ldr	r0, [pc, #416]	; (8005fb0 <cppLoop+0x340>)
 8005e10:	f7fb fbf4 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8005e14:	2200      	movs	r2, #0
 8005e16:	f04f 31ff 	mov.w	r1, #4294967295
 8005e1a:	485e      	ldr	r0, [pc, #376]	; (8005f94 <cppLoop+0x324>)
 8005e1c:	f7fc f938 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 8005e20:	e1f1      	b.n	8006206 <cppLoop+0x596>

	case 3:
		led.fullColor('C');
 8005e22:	2143      	movs	r1, #67	; 0x43
 8005e24:	485b      	ldr	r0, [pc, #364]	; (8005f94 <cppLoop+0x324>)
 8005e26:	f7fc f877 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005e2a:	f7fb f939 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e2e:	2100      	movs	r1, #0
 8005e30:	2000      	movs	r0, #0
 8005e32:	f7fb f945 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005e36:	4860      	ldr	r0, [pc, #384]	; (8005fb8 <cppLoop+0x348>)
 8005e38:	f7fb f96c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e3c:	2101      	movs	r1, #1
 8005e3e:	2000      	movs	r0, #0
 8005e40:	f7fb f93e 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005e44:	485d      	ldr	r0, [pc, #372]	; (8005fbc <cppLoop+0x34c>)
 8005e46:	f7fb f965 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005e4a:	484e      	ldr	r0, [pc, #312]	; (8005f84 <cppLoop+0x314>)
 8005e4c:	f7fc f800 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	bf0c      	ite	eq
 8005e56:	2301      	moveq	r3, #1
 8005e58:	2300      	movne	r3, #0
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 81d4 	beq.w	800620a <cppLoop+0x59a>
			led.LR(-1, 1);
 8005e62:	2201      	movs	r2, #1
 8005e64:	f04f 31ff 	mov.w	r1, #4294967295
 8005e68:	484a      	ldr	r0, [pc, #296]	; (8005f94 <cppLoop+0x324>)
 8005e6a:	f7fc f911 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e72:	f000 faf9 	bl	8006468 <HAL_Delay>

			logger.start();
 8005e76:	4844      	ldr	r0, [pc, #272]	; (8005f88 <cppLoop+0x318>)
 8005e78:	f7fc fed3 	bl	8002c22 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005e7c:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005fc0 <cppLoop+0x350>
 8005e80:	4850      	ldr	r0, [pc, #320]	; (8005fc4 <cppLoop+0x354>)
 8005e82:	f7fc fd7a 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005e86:	484f      	ldr	r0, [pc, #316]	; (8005fc4 <cppLoop+0x354>)
 8005e88:	f7fc fdce 	bl	8002a28 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005e8c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005e90:	f000 faea 	bl	8006468 <HAL_Delay>

			logger.stop();
 8005e94:	483c      	ldr	r0, [pc, #240]	; (8005f88 <cppLoop+0x318>)
 8005e96:	f7fc fed4 	bl	8002c42 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005e9a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005fc0 <cppLoop+0x350>
 8005e9e:	4849      	ldr	r0, [pc, #292]	; (8005fc4 <cppLoop+0x354>)
 8005ea0:	f7fc fd6b 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005ea4:	4847      	ldr	r0, [pc, #284]	; (8005fc4 <cppLoop+0x354>)
 8005ea6:	f7fc fdcf 	bl	8002a48 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8005eae:	2101      	movs	r1, #1
 8005eb0:	4838      	ldr	r0, [pc, #224]	; (8005f94 <cppLoop+0x324>)
 8005eb2:	f7fc f8ed 	bl	8002090 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005eb6:	4a44      	ldr	r2, [pc, #272]	; (8005fc8 <cppLoop+0x358>)
 8005eb8:	4944      	ldr	r1, [pc, #272]	; (8005fcc <cppLoop+0x35c>)
 8005eba:	4833      	ldr	r0, [pc, #204]	; (8005f88 <cppLoop+0x318>)
 8005ebc:	f7fc fe7a 	bl	8002bb4 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	4833      	ldr	r0, [pc, #204]	; (8005f94 <cppLoop+0x324>)
 8005ec8:	f7fc f8e2 	bl	8002090 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f04f 31ff 	mov.w	r1, #4294967295
 8005ed2:	4830      	ldr	r0, [pc, #192]	; (8005f94 <cppLoop+0x324>)
 8005ed4:	f7fc f8dc 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 8005ed8:	e197      	b.n	800620a <cppLoop+0x59a>

	case 4:
		led.fullColor('M');
 8005eda:	214d      	movs	r1, #77	; 0x4d
 8005edc:	482d      	ldr	r0, [pc, #180]	; (8005f94 <cppLoop+0x324>)
 8005ede:	f7fc f81b 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005ee2:	f7fb f8dd 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	2000      	movs	r0, #0
 8005eea:	f7fb f8e9 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005eee:	4838      	ldr	r0, [pc, #224]	; (8005fd0 <cppLoop+0x360>)
 8005ef0:	f7fb f910 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005ef4:	2101      	movs	r1, #1
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f7fb f8e2 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005efc:	482f      	ldr	r0, [pc, #188]	; (8005fbc <cppLoop+0x34c>)
 8005efe:	f7fb f909 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f02:	4820      	ldr	r0, [pc, #128]	; (8005f84 <cppLoop+0x314>)
 8005f04:	f7fb ffa4 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	bf0c      	ite	eq
 8005f0e:	2301      	moveq	r3, #1
 8005f10:	2300      	movne	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 817a 	beq.w	800620e <cppLoop+0x59e>
			led.LR(-1, 1);
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f20:	481c      	ldr	r0, [pc, #112]	; (8005f94 <cppLoop+0x324>)
 8005f22:	f7fc f8b5 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005f26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f2a:	f000 fa9d 	bl	8006468 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005f2e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8005fc0 <cppLoop+0x350>
 8005f32:	4824      	ldr	r0, [pc, #144]	; (8005fc4 <cppLoop+0x354>)
 8005f34:	f7fc fd30 	bl	8002998 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005f38:	4814      	ldr	r0, [pc, #80]	; (8005f8c <cppLoop+0x31c>)
 8005f3a:	f7fd fd0a 	bl	8003952 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005f3e:	4821      	ldr	r0, [pc, #132]	; (8005fc4 <cppLoop+0x354>)
 8005f40:	f7fc fd72 	bl	8002a28 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005f44:	f242 7010 	movw	r0, #10000	; 0x2710
 8005f48:	f000 fa8e 	bl	8006468 <HAL_Delay>

			line_trace.stop();
 8005f4c:	481d      	ldr	r0, [pc, #116]	; (8005fc4 <cppLoop+0x354>)
 8005f4e:	f7fc fd7b 	bl	8002a48 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005f52:	480e      	ldr	r0, [pc, #56]	; (8005f8c <cppLoop+0x31c>)
 8005f54:	f7fd fd0c 	bl	8003970 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f04f 31ff 	mov.w	r1, #4294967295
 8005f5e:	480d      	ldr	r0, [pc, #52]	; (8005f94 <cppLoop+0x324>)
 8005f60:	f7fc f896 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 8005f64:	e153      	b.n	800620e <cppLoop+0x59e>
 8005f66:	bf00      	nop
 8005f68:	37c1215e 	.word	0x37c1215e
 8005f6c:	3fbf9add 	.word	0x3fbf9add
 8005f70:	20000534 	.word	0x20000534
 8005f74:	08017be4 	.word	0x08017be4
 8005f78:	08017be8 	.word	0x08017be8
 8005f7c:	08017bf0 	.word	0x08017bf0
 8005f80:	08017bfc 	.word	0x08017bfc
 8005f84:	20000530 	.word	0x20000530
 8005f88:	20000570 	.word	0x20000570
 8005f8c:	2001f1d8 	.word	0x2001f1d8
 8005f90:	00000000 	.word	0x00000000
 8005f94:	2000053c 	.word	0x2000053c
 8005f98:	08017c04 	.word	0x08017c04
 8005f9c:	08017c08 	.word	0x08017c08
 8005fa0:	3dfcd6ea 	.word	0x3dfcd6ea
 8005fa4:	2001f2b0 	.word	0x2001f2b0
 8005fa8:	2001f2b8 	.word	0x2001f2b8
 8005fac:	08017c10 	.word	0x08017c10
 8005fb0:	08017c1c 	.word	0x08017c1c
 8005fb4:	08017c28 	.word	0x08017c28
 8005fb8:	08017c34 	.word	0x08017c34
 8005fbc:	08017c3c 	.word	0x08017c3c
 8005fc0:	3dcccccd 	.word	0x3dcccccd
 8005fc4:	2001f218 	.word	0x2001f218
 8005fc8:	08017c44 	.word	0x08017c44
 8005fcc:	08017c50 	.word	0x08017c50
 8005fd0:	08017c60 	.word	0x08017c60

	case 5:
		led.fullColor('Y');
 8005fd4:	2159      	movs	r1, #89	; 0x59
 8005fd6:	4895      	ldr	r0, [pc, #596]	; (800622c <cppLoop+0x5bc>)
 8005fd8:	f7fb ff9e 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005fdc:	f7fb f860 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f7fb f86c 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8005fe8:	4891      	ldr	r0, [pc, #580]	; (8006230 <cppLoop+0x5c0>)
 8005fea:	f7fb f893 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005fee:	2101      	movs	r1, #1
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	f7fb f865 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8005ff6:	488f      	ldr	r0, [pc, #572]	; (8006234 <cppLoop+0x5c4>)
 8005ff8:	f7fb f88c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005ffc:	488e      	ldr	r0, [pc, #568]	; (8006238 <cppLoop+0x5c8>)
 8005ffe:	f7fb ff27 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8006002:	4603      	mov	r3, r0
 8006004:	2b02      	cmp	r3, #2
 8006006:	bf0c      	ite	eq
 8006008:	2301      	moveq	r3, #1
 800600a:	2300      	movne	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	f000 80ff 	beq.w	8006212 <cppLoop+0x5a2>
			led.LR(-1, 1);
 8006014:	2201      	movs	r2, #1
 8006016:	f04f 31ff 	mov.w	r1, #4294967295
 800601a:	4884      	ldr	r0, [pc, #528]	; (800622c <cppLoop+0x5bc>)
 800601c:	f7fc f838 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8006020:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006024:	f000 fa20 	bl	8006468 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8006028:	ed9f 0a84 	vldr	s0, [pc, #528]	; 800623c <cppLoop+0x5cc>
 800602c:	4884      	ldr	r0, [pc, #528]	; (8006240 <cppLoop+0x5d0>)
 800602e:	f7fc fca4 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8006032:	4883      	ldr	r0, [pc, #524]	; (8006240 <cppLoop+0x5d0>)
 8006034:	f7fc fcf8 	bl	8002a28 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006038:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800603c:	f000 fa14 	bl	8006468 <HAL_Delay>

			led.fullColor('R');
 8006040:	2152      	movs	r1, #82	; 0x52
 8006042:	487a      	ldr	r0, [pc, #488]	; (800622c <cppLoop+0x5bc>)
 8006044:	f7fb ff68 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006048:	487e      	ldr	r0, [pc, #504]	; (8006244 <cppLoop+0x5d4>)
 800604a:	f7fb f9df 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 800604e:	487d      	ldr	r0, [pc, #500]	; (8006244 <cppLoop+0x5d4>)
 8006050:	f7fb f9a2 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8006054:	f242 7010 	movw	r0, #10000	; 0x2710
 8006058:	f000 fa06 	bl	8006468 <HAL_Delay>

			line_trace.stop();
 800605c:	4878      	ldr	r0, [pc, #480]	; (8006240 <cppLoop+0x5d0>)
 800605e:	f7fc fcf3 	bl	8002a48 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8006062:	4979      	ldr	r1, [pc, #484]	; (8006248 <cppLoop+0x5d8>)
 8006064:	4879      	ldr	r0, [pc, #484]	; (800624c <cppLoop+0x5dc>)
 8006066:	f7fb f9ef 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 800606a:	4876      	ldr	r0, [pc, #472]	; (8006244 <cppLoop+0x5d4>)
 800606c:	f7fb f983 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8006070:	ec54 3b10 	vmov	r3, r4, d0
 8006074:	4618      	mov	r0, r3
 8006076:	4621      	mov	r1, r4
 8006078:	f7fa fdce 	bl	8000c18 <__aeabi_d2f>
 800607c:	4603      	mov	r3, r0
 800607e:	607b      	str	r3, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	2201      	movs	r2, #1
 8006084:	4619      	mov	r1, r3
 8006086:	2001      	movs	r0, #1
 8006088:	f7fb fa00 	bl	800148c <sd_write>
			user_fclose();
 800608c:	f7fb f9ee 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 8006090:	2200      	movs	r2, #0
 8006092:	f04f 31ff 	mov.w	r1, #4294967295
 8006096:	4865      	ldr	r0, [pc, #404]	; (800622c <cppLoop+0x5bc>)
 8006098:	f7fb fffa 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 800609c:	e0b9      	b.n	8006212 <cppLoop+0x5a2>

	case 6:
		led.fullColor('C');
 800609e:	2143      	movs	r1, #67	; 0x43
 80060a0:	4862      	ldr	r0, [pc, #392]	; (800622c <cppLoop+0x5bc>)
 80060a2:	f7fb ff39 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 80060a6:	f7fa fffb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80060aa:	2100      	movs	r1, #0
 80060ac:	2000      	movs	r0, #0
 80060ae:	f7fb f807 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 80060b2:	4867      	ldr	r0, [pc, #412]	; (8006250 <cppLoop+0x5e0>)
 80060b4:	f7fb f82e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80060b8:	2101      	movs	r1, #1
 80060ba:	2000      	movs	r0, #0
 80060bc:	f7fb f800 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 80060c0:	4864      	ldr	r0, [pc, #400]	; (8006254 <cppLoop+0x5e4>)
 80060c2:	f7fb f827 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80060c6:	485c      	ldr	r0, [pc, #368]	; (8006238 <cppLoop+0x5c8>)
 80060c8:	f7fb fec2 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	bf0c      	ite	eq
 80060d2:	2301      	moveq	r3, #1
 80060d4:	2300      	movne	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 809c 	beq.w	8006216 <cppLoop+0x5a6>
			HAL_Delay(500);
 80060de:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060e2:	f000 f9c1 	bl	8006468 <HAL_Delay>
			led.LR(-1, 1);
 80060e6:	2201      	movs	r2, #1
 80060e8:	f04f 31ff 	mov.w	r1, #4294967295
 80060ec:	484f      	ldr	r0, [pc, #316]	; (800622c <cppLoop+0x5bc>)
 80060ee:	f7fb ffcf 	bl	8002090 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 80060f2:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006258 <cppLoop+0x5e8>
 80060f6:	4852      	ldr	r0, [pc, #328]	; (8006240 <cppLoop+0x5d0>)
 80060f8:	f7fc fc3f 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80060fc:	4850      	ldr	r0, [pc, #320]	; (8006240 <cppLoop+0x5d0>)
 80060fe:	f7fc fc93 	bl	8002a28 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006102:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006106:	f000 f9af 	bl	8006468 <HAL_Delay>

			led.fullColor('R');
 800610a:	2152      	movs	r1, #82	; 0x52
 800610c:	4847      	ldr	r0, [pc, #284]	; (800622c <cppLoop+0x5bc>)
 800610e:	f7fb ff03 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8006112:	484c      	ldr	r0, [pc, #304]	; (8006244 <cppLoop+0x5d4>)
 8006114:	f7fb f97a 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8006118:	484a      	ldr	r0, [pc, #296]	; (8006244 <cppLoop+0x5d4>)
 800611a:	f7fb f93d 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 800611e:	484f      	ldr	r0, [pc, #316]	; (800625c <cppLoop+0x5ec>)
 8006120:	f7fc ffbe 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 8006124:	484e      	ldr	r0, [pc, #312]	; (8006260 <cppLoop+0x5f0>)
 8006126:	f7fc fd7c 	bl	8002c22 <_ZN6Logger5startEv>

			HAL_Delay(10000);
 800612a:	f242 7010 	movw	r0, #10000	; 0x2710
 800612e:	f000 f99b 	bl	8006468 <HAL_Delay>

			line_trace.stop();
 8006132:	4843      	ldr	r0, [pc, #268]	; (8006240 <cppLoop+0x5d0>)
 8006134:	f7fc fc88 	bl	8002a48 <_ZN9LineTrace4stopEv>
			logger.stop();
 8006138:	4849      	ldr	r0, [pc, #292]	; (8006260 <cppLoop+0x5f0>)
 800613a:	f7fc fd82 	bl	8002c42 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 800613e:	4b49      	ldr	r3, [pc, #292]	; (8006264 <cppLoop+0x5f4>)
 8006140:	4a49      	ldr	r2, [pc, #292]	; (8006268 <cppLoop+0x5f8>)
 8006142:	4943      	ldr	r1, [pc, #268]	; (8006250 <cppLoop+0x5e0>)
 8006144:	4846      	ldr	r0, [pc, #280]	; (8006260 <cppLoop+0x5f0>)
 8006146:	f7fc fd49 	bl	8002bdc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 800614a:	2200      	movs	r2, #0
 800614c:	f04f 31ff 	mov.w	r1, #4294967295
 8006150:	4836      	ldr	r0, [pc, #216]	; (800622c <cppLoop+0x5bc>)
 8006152:	f7fb ff9d 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 8006156:	e05e      	b.n	8006216 <cppLoop+0x5a6>

	case 7:
		led.fullColor('M');
 8006158:	214d      	movs	r1, #77	; 0x4d
 800615a:	4834      	ldr	r0, [pc, #208]	; (800622c <cppLoop+0x5bc>)
 800615c:	f7fb fedc 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006160:	f7fa ff9e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8006164:	2100      	movs	r1, #0
 8006166:	2000      	movs	r0, #0
 8006168:	f7fa ffaa 	bl	80010c0 <lcd_locate>
		lcd_printf("Path");
 800616c:	483f      	ldr	r0, [pc, #252]	; (800626c <cppLoop+0x5fc>)
 800616e:	f7fa ffd1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006172:	2101      	movs	r1, #1
 8006174:	2000      	movs	r0, #0
 8006176:	f7fa ffa3 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800617a:	482e      	ldr	r0, [pc, #184]	; (8006234 <cppLoop+0x5c4>)
 800617c:	f7fa ffca 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006180:	482d      	ldr	r0, [pc, #180]	; (8006238 <cppLoop+0x5c8>)
 8006182:	f7fb fe65 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8006186:	4603      	mov	r3, r0
 8006188:	2b02      	cmp	r3, #2
 800618a:	bf0c      	ite	eq
 800618c:	2301      	moveq	r3, #1
 800618e:	2300      	movne	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d041      	beq.n	800621a <cppLoop+0x5aa>
			HAL_Delay(500);
 8006196:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800619a:	f000 f965 	bl	8006468 <HAL_Delay>
			led.LR(-1, 1);
 800619e:	2201      	movs	r2, #1
 80061a0:	f04f 31ff 	mov.w	r1, #4294967295
 80061a4:	4821      	ldr	r0, [pc, #132]	; (800622c <cppLoop+0x5bc>)
 80061a6:	f7fb ff73 	bl	8002090 <_ZN3LED2LREaa>

			led.fullColor('R');
 80061aa:	2152      	movs	r1, #82	; 0x52
 80061ac:	481f      	ldr	r0, [pc, #124]	; (800622c <cppLoop+0x5bc>)
 80061ae:	f7fb feb3 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80061b2:	4824      	ldr	r0, [pc, #144]	; (8006244 <cppLoop+0x5d4>)
 80061b4:	f7fb f92a 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80061b8:	4822      	ldr	r0, [pc, #136]	; (8006244 <cppLoop+0x5d4>)
 80061ba:	f7fb f8ed 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80061be:	4827      	ldr	r0, [pc, #156]	; (800625c <cppLoop+0x5ec>)
 80061c0:	f7fc ff6e 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>
			path_following.start();
 80061c4:	482a      	ldr	r0, [pc, #168]	; (8006270 <cppLoop+0x600>)
 80061c6:	f7fd f87b 	bl	80032c0 <_ZN13PathFollowing5startEv>
			velocity_ctrl.start();
 80061ca:	482a      	ldr	r0, [pc, #168]	; (8006274 <cppLoop+0x604>)
 80061cc:	f7fd fbc1 	bl	8003952 <_ZN12VelocityCtrl5startEv>
			flag = true;
 80061d0:	4b29      	ldr	r3, [pc, #164]	; (8006278 <cppLoop+0x608>)
 80061d2:	2201      	movs	r2, #1
 80061d4:	701a      	strb	r2, [r3, #0]

			HAL_Delay(1000);
 80061d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061da:	f000 f945 	bl	8006468 <HAL_Delay>

			path_following.stop();
 80061de:	4824      	ldr	r0, [pc, #144]	; (8006270 <cppLoop+0x600>)
 80061e0:	f7fd f87b 	bl	80032da <_ZN13PathFollowing4stopEv>
			velocity_ctrl.stop();
 80061e4:	4823      	ldr	r0, [pc, #140]	; (8006274 <cppLoop+0x604>)
 80061e6:	f7fd fbc3 	bl	8003970 <_ZN12VelocityCtrl4stopEv>
			flag = false;
 80061ea:	4b23      	ldr	r3, [pc, #140]	; (8006278 <cppLoop+0x608>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]

			led.LR(-1, 0);
 80061f0:	2200      	movs	r2, #0
 80061f2:	f04f 31ff 	mov.w	r1, #4294967295
 80061f6:	480d      	ldr	r0, [pc, #52]	; (800622c <cppLoop+0x5bc>)
 80061f8:	f7fb ff4a 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 80061fc:	e00d      	b.n	800621a <cppLoop+0x5aa>
	case 15:

		break;

	default:
		break;
 80061fe:	bf00      	nop
 8006200:	e00c      	b.n	800621c <cppLoop+0x5ac>
		break;
 8006202:	bf00      	nop
 8006204:	e00a      	b.n	800621c <cppLoop+0x5ac>
		break;
 8006206:	bf00      	nop
 8006208:	e008      	b.n	800621c <cppLoop+0x5ac>
		break;
 800620a:	bf00      	nop
 800620c:	e006      	b.n	800621c <cppLoop+0x5ac>
		break;
 800620e:	bf00      	nop
 8006210:	e004      	b.n	800621c <cppLoop+0x5ac>
		break;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <cppLoop+0x5ac>
		break;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <cppLoop+0x5ac>
		break;
 800621a:	bf00      	nop

	}

	HAL_Delay(10);
 800621c:	200a      	movs	r0, #10
 800621e:	f000 f923 	bl	8006468 <HAL_Delay>

}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bd90      	pop	{r4, r7, pc}
 800622a:	bf00      	nop
 800622c:	2000053c 	.word	0x2000053c
 8006230:	08017c6c 	.word	0x08017c6c
 8006234:	08017c74 	.word	0x08017c74
 8006238:	20000530 	.word	0x20000530
 800623c:	00000000 	.word	0x00000000
 8006240:	2001f218 	.word	0x2001f218
 8006244:	2001f1a8 	.word	0x2001f1a8
 8006248:	08017c80 	.word	0x08017c80
 800624c:	08017c88 	.word	0x08017c88
 8006250:	08017c94 	.word	0x08017c94
 8006254:	08017ca0 	.word	0x08017ca0
 8006258:	3dcccccd 	.word	0x3dcccccd
 800625c:	2001f278 	.word	0x2001f278
 8006260:	20000570 	.word	0x20000570
 8006264:	08017ca8 	.word	0x08017ca8
 8006268:	08017cb8 	.word	0x08017cb8
 800626c:	08017ccc 	.word	0x08017ccc
 8006270:	2001f2a8 	.word	0x2001f2a8
 8006274:	2001f1d8 	.word	0x2001f1d8
 8006278:	2001f2d0 	.word	0x2001f2d0

0800627c <_Z41__static_initialization_and_destruction_0ii>:
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d12e      	bne.n	80062ea <_Z41__static_initialization_and_destruction_0ii+0x6e>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006292:	4293      	cmp	r3, r2
 8006294:	d129      	bne.n	80062ea <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 8006296:	4817      	ldr	r0, [pc, #92]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006298:	f7fb ff32 	bl	8002100 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800629c:	4816      	ldr	r0, [pc, #88]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800629e:	f7fd f8e3 	bl	8003468 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80062a2:	4816      	ldr	r0, [pc, #88]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80062a4:	f7fb fdc8 	bl	8001e38 <_ZN8JoyStickC1Ev>
Motor motor;
 80062a8:	4815      	ldr	r0, [pc, #84]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80062aa:	f7fc fcda 	bl	8002c62 <_ZN5MotorC1Ev>
IMU imu;
 80062ae:	4815      	ldr	r0, [pc, #84]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80062b0:	f7fb fc08 	bl	8001ac4 <_ZN3IMUC1Ev>
Logger logger;
 80062b4:	4814      	ldr	r0, [pc, #80]	; (8006308 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80062b6:	f7fc fbdf 	bl	8002a78 <_ZN6LoggerC1Ev>
Encoder encoder;
 80062ba:	4814      	ldr	r0, [pc, #80]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80062bc:	f7fa ff4a 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80062c0:	4b10      	ldr	r3, [pc, #64]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80062c2:	4a12      	ldr	r2, [pc, #72]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80062c4:	490e      	ldr	r1, [pc, #56]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80062c6:	4812      	ldr	r0, [pc, #72]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80062c8:	f7fd f938 	bl	800353c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80062cc:	4b10      	ldr	r3, [pc, #64]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80062ce:	4a09      	ldr	r2, [pc, #36]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80062d0:	490b      	ldr	r1, [pc, #44]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80062d2:	4810      	ldr	r0, [pc, #64]	; (8006314 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80062d4:	f7fc fa0e 	bl	80026f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80062da:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80062dc:	490b      	ldr	r1, [pc, #44]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80062de:	480e      	ldr	r0, [pc, #56]	; (8006318 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80062e0:	f7fc fda4 	bl	8002e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 80062e4:	480d      	ldr	r0, [pc, #52]	; (800631c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80062e6:	f7fc fef9 	bl	80030dc <_ZN13PathFollowingC1Ev>
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000234 	.word	0x20000234
 80062f8:	2000052c 	.word	0x2000052c
 80062fc:	20000530 	.word	0x20000530
 8006300:	20000538 	.word	0x20000538
 8006304:	20000550 	.word	0x20000550
 8006308:	20000570 	.word	0x20000570
 800630c:	2001f1a8 	.word	0x2001f1a8
 8006310:	2001f1d8 	.word	0x2001f1d8
 8006314:	2001f218 	.word	0x2001f218
 8006318:	2001f278 	.word	0x2001f278
 800631c:	2001f2a8 	.word	0x2001f2a8

08006320 <_GLOBAL__sub_I_line_sensor>:
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
 8006324:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006328:	2001      	movs	r0, #1
 800632a:	f7ff ffa7 	bl	800627c <_Z41__static_initialization_and_destruction_0ii>
 800632e:	bd80      	pop	{r7, pc}

08006330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006368 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006334:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006336:	e003      	b.n	8006340 <LoopCopyDataInit>

08006338 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006338:	4b0c      	ldr	r3, [pc, #48]	; (800636c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800633a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800633c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800633e:	3104      	adds	r1, #4

08006340 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006340:	480b      	ldr	r0, [pc, #44]	; (8006370 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006344:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006346:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006348:	d3f6      	bcc.n	8006338 <CopyDataInit>
  ldr  r2, =_sbss
 800634a:	4a0b      	ldr	r2, [pc, #44]	; (8006378 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800634c:	e002      	b.n	8006354 <LoopFillZerobss>

0800634e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800634e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006350:	f842 3b04 	str.w	r3, [r2], #4

08006354 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006356:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006358:	d3f9      	bcc.n	800634e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800635a:	f7ff faa9 	bl	80058b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800635e:	f00c fc8b 	bl	8012c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006362:	f7fd fbe1 	bl	8003b28 <main>
  bx  lr    
 8006366:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006368:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800636c:	080186d0 	.word	0x080186d0
  ldr  r0, =_sdata
 8006370:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006374:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8006378:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800637c:	20023ed4 	.word	0x20023ed4

08006380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006380:	e7fe      	b.n	8006380 <ADC_IRQHandler>
	...

08006384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006388:	4b0e      	ldr	r3, [pc, #56]	; (80063c4 <HAL_Init+0x40>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a0d      	ldr	r2, [pc, #52]	; (80063c4 <HAL_Init+0x40>)
 800638e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006394:	4b0b      	ldr	r3, [pc, #44]	; (80063c4 <HAL_Init+0x40>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a0a      	ldr	r2, [pc, #40]	; (80063c4 <HAL_Init+0x40>)
 800639a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800639e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063a0:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <HAL_Init+0x40>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a07      	ldr	r2, [pc, #28]	; (80063c4 <HAL_Init+0x40>)
 80063a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063ac:	2003      	movs	r0, #3
 80063ae:	f000 fd51 	bl	8006e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063b2:	2000      	movs	r0, #0
 80063b4:	f000 f808 	bl	80063c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063b8:	f7fe fc68 	bl	8004c8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40023c00 	.word	0x40023c00

080063c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063d0:	4b12      	ldr	r3, [pc, #72]	; (800641c <HAL_InitTick+0x54>)
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	4b12      	ldr	r3, [pc, #72]	; (8006420 <HAL_InitTick+0x58>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	4619      	mov	r1, r3
 80063da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80063de:	fbb3 f3f1 	udiv	r3, r3, r1
 80063e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fd69 	bl	8006ebe <HAL_SYSTICK_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e00e      	b.n	8006414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d80a      	bhi.n	8006412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80063fc:	2200      	movs	r2, #0
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	f04f 30ff 	mov.w	r0, #4294967295
 8006404:	f000 fd31 	bl	8006e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006408:	4a06      	ldr	r2, [pc, #24]	; (8006424 <HAL_InitTick+0x5c>)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
}
 8006414:	4618      	mov	r0, r3
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	20000000 	.word	0x20000000
 8006420:	20000008 	.word	0x20000008
 8006424:	20000004 	.word	0x20000004

08006428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <HAL_IncTick+0x20>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	461a      	mov	r2, r3
 8006432:	4b06      	ldr	r3, [pc, #24]	; (800644c <HAL_IncTick+0x24>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4413      	add	r3, r2
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <HAL_IncTick+0x24>)
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20000008 	.word	0x20000008
 800644c:	20021e58 	.word	0x20021e58

08006450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006450:	b480      	push	{r7}
 8006452:	af00      	add	r7, sp, #0
  return uwTick;
 8006454:	4b03      	ldr	r3, [pc, #12]	; (8006464 <HAL_GetTick+0x14>)
 8006456:	681b      	ldr	r3, [r3, #0]
}
 8006458:	4618      	mov	r0, r3
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop
 8006464:	20021e58 	.word	0x20021e58

08006468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006470:	f7ff ffee 	bl	8006450 <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d005      	beq.n	800648e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_Delay+0x40>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800648e:	bf00      	nop
 8006490:	f7ff ffde 	bl	8006450 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	429a      	cmp	r2, r3
 800649e:	d8f7      	bhi.n	8006490 <HAL_Delay+0x28>
  {
  }
}
 80064a0:	bf00      	nop
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000008 	.word	0x20000008

080064ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064b4:	2300      	movs	r3, #0
 80064b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e033      	b.n	800652a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d109      	bne.n	80064de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f7fe fc06 	bl	8004cdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d118      	bne.n	800651c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80064f2:	f023 0302 	bic.w	r3, r3, #2
 80064f6:	f043 0202 	orr.w	r2, r3, #2
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 fa5a 	bl	80069b8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f023 0303 	bic.w	r3, r3, #3
 8006512:	f043 0201 	orr.w	r2, r3, #1
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	641a      	str	r2, [r3, #64]	; 0x40
 800651a:	e001      	b.n	8006520 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_ADC_Start_DMA+0x1e>
 800654e:	2302      	movs	r3, #2
 8006550:	e0cc      	b.n	80066ec <HAL_ADC_Start_DMA+0x1b8>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d018      	beq.n	800659a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0201 	orr.w	r2, r2, #1
 8006576:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006578:	4b5e      	ldr	r3, [pc, #376]	; (80066f4 <HAL_ADC_Start_DMA+0x1c0>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a5e      	ldr	r2, [pc, #376]	; (80066f8 <HAL_ADC_Start_DMA+0x1c4>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	0c9a      	lsrs	r2, r3, #18
 8006584:	4613      	mov	r3, r2
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	4413      	add	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800658c:	e002      	b.n	8006594 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3b01      	subs	r3, #1
 8006592:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d1f9      	bne.n	800658e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f003 0301 	and.w	r3, r3, #1
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	f040 80a0 	bne.w	80066ea <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80065b2:	f023 0301 	bic.w	r3, r3, #1
 80065b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80065d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e8:	d106      	bne.n	80065f8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ee:	f023 0206 	bic.w	r2, r3, #6
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	645a      	str	r2, [r3, #68]	; 0x44
 80065f6:	e002      	b.n	80065fe <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006606:	4b3d      	ldr	r3, [pc, #244]	; (80066fc <HAL_ADC_Start_DMA+0x1c8>)
 8006608:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800660e:	4a3c      	ldr	r2, [pc, #240]	; (8006700 <HAL_ADC_Start_DMA+0x1cc>)
 8006610:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006616:	4a3b      	ldr	r2, [pc, #236]	; (8006704 <HAL_ADC_Start_DMA+0x1d0>)
 8006618:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661e:	4a3a      	ldr	r2, [pc, #232]	; (8006708 <HAL_ADC_Start_DMA+0x1d4>)
 8006620:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800662a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800663a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689a      	ldr	r2, [r3, #8]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800664a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	334c      	adds	r3, #76	; 0x4c
 8006656:	4619      	mov	r1, r3
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f000 fcea 	bl	8007034 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2b00      	cmp	r3, #0
 800666a:	d12a      	bne.n	80066c2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a26      	ldr	r2, [pc, #152]	; (800670c <HAL_ADC_Start_DMA+0x1d8>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d015      	beq.n	80066a2 <HAL_ADC_Start_DMA+0x16e>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a25      	ldr	r2, [pc, #148]	; (8006710 <HAL_ADC_Start_DMA+0x1dc>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d105      	bne.n	800668c <HAL_ADC_Start_DMA+0x158>
 8006680:	4b1e      	ldr	r3, [pc, #120]	; (80066fc <HAL_ADC_Start_DMA+0x1c8>)
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00a      	beq.n	80066a2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <HAL_ADC_Start_DMA+0x1e0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d129      	bne.n	80066ea <HAL_ADC_Start_DMA+0x1b6>
 8006696:	4b19      	ldr	r3, [pc, #100]	; (80066fc <HAL_ADC_Start_DMA+0x1c8>)
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f003 031f 	and.w	r3, r3, #31
 800669e:	2b0f      	cmp	r3, #15
 80066a0:	d823      	bhi.n	80066ea <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11c      	bne.n	80066ea <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689a      	ldr	r2, [r3, #8]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80066be:	609a      	str	r2, [r3, #8]
 80066c0:	e013      	b.n	80066ea <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a11      	ldr	r2, [pc, #68]	; (800670c <HAL_ADC_Start_DMA+0x1d8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d10e      	bne.n	80066ea <HAL_ADC_Start_DMA+0x1b6>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d107      	bne.n	80066ea <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80066e8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000000 	.word	0x20000000
 80066f8:	431bde83 	.word	0x431bde83
 80066fc:	40012300 	.word	0x40012300
 8006700:	08006bb1 	.word	0x08006bb1
 8006704:	08006c6b 	.word	0x08006c6b
 8006708:	08006c87 	.word	0x08006c87
 800670c:	40012000 	.word	0x40012000
 8006710:	40012100 	.word	0x40012100
 8006714:	40012200 	.word	0x40012200

08006718 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006754:	b480      	push	{r7}
 8006756:	b085      	sub	sp, #20
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	d101      	bne.n	8006770 <HAL_ADC_ConfigChannel+0x1c>
 800676c:	2302      	movs	r3, #2
 800676e:	e113      	b.n	8006998 <HAL_ADC_ConfigChannel+0x244>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b09      	cmp	r3, #9
 800677e:	d925      	bls.n	80067cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68d9      	ldr	r1, [r3, #12]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	4613      	mov	r3, r2
 8006790:	005b      	lsls	r3, r3, #1
 8006792:	4413      	add	r3, r2
 8006794:	3b1e      	subs	r3, #30
 8006796:	2207      	movs	r2, #7
 8006798:	fa02 f303 	lsl.w	r3, r2, r3
 800679c:	43da      	mvns	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	400a      	ands	r2, r1
 80067a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68d9      	ldr	r1, [r3, #12]
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	4618      	mov	r0, r3
 80067b8:	4603      	mov	r3, r0
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	4403      	add	r3, r0
 80067be:	3b1e      	subs	r3, #30
 80067c0:	409a      	lsls	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	60da      	str	r2, [r3, #12]
 80067ca:	e022      	b.n	8006812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	6919      	ldr	r1, [r3, #16]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	4613      	mov	r3, r2
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	4413      	add	r3, r2
 80067e0:	2207      	movs	r2, #7
 80067e2:	fa02 f303 	lsl.w	r3, r2, r3
 80067e6:	43da      	mvns	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	400a      	ands	r2, r1
 80067ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6919      	ldr	r1, [r3, #16]
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4618      	mov	r0, r3
 8006802:	4603      	mov	r3, r0
 8006804:	005b      	lsls	r3, r3, #1
 8006806:	4403      	add	r3, r0
 8006808:	409a      	lsls	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b06      	cmp	r3, #6
 8006818:	d824      	bhi.n	8006864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	685a      	ldr	r2, [r3, #4]
 8006824:	4613      	mov	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	3b05      	subs	r3, #5
 800682c:	221f      	movs	r2, #31
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43da      	mvns	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	400a      	ands	r2, r1
 800683a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b29b      	uxth	r3, r3
 8006848:	4618      	mov	r0, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	4613      	mov	r3, r2
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4413      	add	r3, r2
 8006854:	3b05      	subs	r3, #5
 8006856:	fa00 f203 	lsl.w	r2, r0, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	430a      	orrs	r2, r1
 8006860:	635a      	str	r2, [r3, #52]	; 0x34
 8006862:	e04c      	b.n	80068fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2b0c      	cmp	r3, #12
 800686a:	d824      	bhi.n	80068b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	3b23      	subs	r3, #35	; 0x23
 800687e:	221f      	movs	r2, #31
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	43da      	mvns	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	400a      	ands	r2, r1
 800688c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	4618      	mov	r0, r3
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	3b23      	subs	r3, #35	; 0x23
 80068a8:	fa00 f203 	lsl.w	r2, r0, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	430a      	orrs	r2, r1
 80068b2:	631a      	str	r2, [r3, #48]	; 0x30
 80068b4:	e023      	b.n	80068fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4613      	mov	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4413      	add	r3, r2
 80068c6:	3b41      	subs	r3, #65	; 0x41
 80068c8:	221f      	movs	r2, #31
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	43da      	mvns	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	400a      	ands	r2, r1
 80068d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	4618      	mov	r0, r3
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	685a      	ldr	r2, [r3, #4]
 80068ea:	4613      	mov	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	4413      	add	r3, r2
 80068f0:	3b41      	subs	r3, #65	; 0x41
 80068f2:	fa00 f203 	lsl.w	r2, r0, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80068fe:	4b29      	ldr	r3, [pc, #164]	; (80069a4 <HAL_ADC_ConfigChannel+0x250>)
 8006900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a28      	ldr	r2, [pc, #160]	; (80069a8 <HAL_ADC_ConfigChannel+0x254>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d10f      	bne.n	800692c <HAL_ADC_ConfigChannel+0x1d8>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2b12      	cmp	r3, #18
 8006912:	d10b      	bne.n	800692c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <HAL_ADC_ConfigChannel+0x254>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d12b      	bne.n	800698e <HAL_ADC_ConfigChannel+0x23a>
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1c      	ldr	r2, [pc, #112]	; (80069ac <HAL_ADC_ConfigChannel+0x258>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d003      	beq.n	8006948 <HAL_ADC_ConfigChannel+0x1f4>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b11      	cmp	r3, #17
 8006946:	d122      	bne.n	800698e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <HAL_ADC_ConfigChannel+0x258>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d111      	bne.n	800698e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800696a:	4b11      	ldr	r3, [pc, #68]	; (80069b0 <HAL_ADC_ConfigChannel+0x25c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a11      	ldr	r2, [pc, #68]	; (80069b4 <HAL_ADC_ConfigChannel+0x260>)
 8006970:	fba2 2303 	umull	r2, r3, r2, r3
 8006974:	0c9a      	lsrs	r2, r3, #18
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006980:	e002      	b.n	8006988 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	3b01      	subs	r3, #1
 8006986:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f9      	bne.n	8006982 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40012300 	.word	0x40012300
 80069a8:	40012000 	.word	0x40012000
 80069ac:	10000012 	.word	0x10000012
 80069b0:	20000000 	.word	0x20000000
 80069b4:	431bde83 	.word	0x431bde83

080069b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80069c0:	4b79      	ldr	r3, [pc, #484]	; (8006ba8 <ADC_Init+0x1f0>)
 80069c2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685a      	ldr	r2, [r3, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	431a      	orrs	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	6859      	ldr	r1, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	021a      	lsls	r2, r3, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006a10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	689a      	ldr	r2, [r3, #8]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	430a      	orrs	r2, r1
 8006a22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6899      	ldr	r1, [r3, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	4a58      	ldr	r2, [pc, #352]	; (8006bac <ADC_Init+0x1f4>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d022      	beq.n	8006a96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006a5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6899      	ldr	r1, [r3, #8]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689a      	ldr	r2, [r3, #8]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006a80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6899      	ldr	r1, [r3, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	430a      	orrs	r2, r1
 8006a92:	609a      	str	r2, [r3, #8]
 8006a94:	e00f      	b.n	8006ab6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689a      	ldr	r2, [r3, #8]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006aa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ab4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	689a      	ldr	r2, [r3, #8]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0202 	bic.w	r2, r2, #2
 8006ac4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6899      	ldr	r1, [r3, #8]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	7e1b      	ldrb	r3, [r3, #24]
 8006ad0:	005a      	lsls	r2, r3, #1
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006af2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	685a      	ldr	r2, [r3, #4]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006b02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6859      	ldr	r1, [r3, #4]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	035a      	lsls	r2, r3, #13
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	605a      	str	r2, [r3, #4]
 8006b1a:	e007      	b.n	8006b2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	685a      	ldr	r2, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	69db      	ldr	r3, [r3, #28]
 8006b46:	3b01      	subs	r3, #1
 8006b48:	051a      	lsls	r2, r3, #20
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	430a      	orrs	r2, r1
 8006b50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689a      	ldr	r2, [r3, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006b60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6899      	ldr	r1, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b6e:	025a      	lsls	r2, r3, #9
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	6899      	ldr	r1, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	029a      	lsls	r2, r3, #10
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	609a      	str	r2, [r3, #8]
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	40012300 	.word	0x40012300
 8006bac:	0f000001 	.word	0x0f000001

08006bb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d13c      	bne.n	8006c44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d12b      	bne.n	8006c3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d127      	bne.n	8006c3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d006      	beq.n	8006c08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d119      	bne.n	8006c3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f022 0220 	bic.w	r2, r2, #32
 8006c16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d105      	bne.n	8006c3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c34:	f043 0201 	orr.w	r2, r3, #1
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff fd6b 	bl	8006718 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006c42:	e00e      	b.n	8006c62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c48:	f003 0310 	and.w	r3, r3, #16
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff fd75 	bl	8006740 <HAL_ADC_ErrorCallback>
}
 8006c56:	e004      	b.n	8006c62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	4798      	blx	r3
}
 8006c62:	bf00      	nop
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff fd57 	bl	800672c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006c7e:	bf00      	nop
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2240      	movs	r2, #64	; 0x40
 8006c98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c9e:	f043 0204 	orr.w	r2, r3, #4
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f7ff fd4a 	bl	8006740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <__NVIC_SetPriorityGrouping>:
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006ce6:	4a04      	ldr	r2, [pc, #16]	; (8006cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	60d3      	str	r3, [r2, #12]
}
 8006cec:	bf00      	nop
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr
 8006cf8:	e000ed00 	.word	0xe000ed00

08006cfc <__NVIC_GetPriorityGrouping>:
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006d00:	4b04      	ldr	r3, [pc, #16]	; (8006d14 <__NVIC_GetPriorityGrouping+0x18>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	0a1b      	lsrs	r3, r3, #8
 8006d06:	f003 0307 	and.w	r3, r3, #7
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	e000ed00 	.word	0xe000ed00

08006d18 <__NVIC_EnableIRQ>:
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	4603      	mov	r3, r0
 8006d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	db0b      	blt.n	8006d42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	f003 021f 	and.w	r2, r3, #31
 8006d30:	4907      	ldr	r1, [pc, #28]	; (8006d50 <__NVIC_EnableIRQ+0x38>)
 8006d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d36:	095b      	lsrs	r3, r3, #5
 8006d38:	2001      	movs	r0, #1
 8006d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8006d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	e000e100 	.word	0xe000e100

08006d54 <__NVIC_SetPriority>:
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	6039      	str	r1, [r7, #0]
 8006d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db0a      	blt.n	8006d7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	b2da      	uxtb	r2, r3
 8006d6c:	490c      	ldr	r1, [pc, #48]	; (8006da0 <__NVIC_SetPriority+0x4c>)
 8006d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d72:	0112      	lsls	r2, r2, #4
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	440b      	add	r3, r1
 8006d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006d7c:	e00a      	b.n	8006d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	b2da      	uxtb	r2, r3
 8006d82:	4908      	ldr	r1, [pc, #32]	; (8006da4 <__NVIC_SetPriority+0x50>)
 8006d84:	79fb      	ldrb	r3, [r7, #7]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	3b04      	subs	r3, #4
 8006d8c:	0112      	lsls	r2, r2, #4
 8006d8e:	b2d2      	uxtb	r2, r2
 8006d90:	440b      	add	r3, r1
 8006d92:	761a      	strb	r2, [r3, #24]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	e000e100 	.word	0xe000e100
 8006da4:	e000ed00 	.word	0xe000ed00

08006da8 <NVIC_EncodePriority>:
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	; 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	f1c3 0307 	rsb	r3, r3, #7
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	bf28      	it	cs
 8006dc6:	2304      	movcs	r3, #4
 8006dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	2b06      	cmp	r3, #6
 8006dd0:	d902      	bls.n	8006dd8 <NVIC_EncodePriority+0x30>
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	3b03      	subs	r3, #3
 8006dd6:	e000      	b.n	8006dda <NVIC_EncodePriority+0x32>
 8006dd8:	2300      	movs	r3, #0
 8006dda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	fa02 f303 	lsl.w	r3, r2, r3
 8006de6:	43da      	mvns	r2, r3
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	401a      	ands	r2, r3
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006df0:	f04f 31ff 	mov.w	r1, #4294967295
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	fa01 f303 	lsl.w	r3, r1, r3
 8006dfa:	43d9      	mvns	r1, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e00:	4313      	orrs	r3, r2
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3724      	adds	r7, #36	; 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
	...

08006e10 <SysTick_Config>:
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006e20:	d301      	bcc.n	8006e26 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006e22:	2301      	movs	r3, #1
 8006e24:	e00f      	b.n	8006e46 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e26:	4a0a      	ldr	r2, [pc, #40]	; (8006e50 <SysTick_Config+0x40>)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006e2e:	210f      	movs	r1, #15
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	f7ff ff8e 	bl	8006d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006e38:	4b05      	ldr	r3, [pc, #20]	; (8006e50 <SysTick_Config+0x40>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <SysTick_Config+0x40>)
 8006e40:	2207      	movs	r2, #7
 8006e42:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	e000e010 	.word	0xe000e010

08006e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff29 	bl	8006cb4 <__NVIC_SetPriorityGrouping>
}
 8006e62:	bf00      	nop
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}

08006e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b086      	sub	sp, #24
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	4603      	mov	r3, r0
 8006e72:	60b9      	str	r1, [r7, #8]
 8006e74:	607a      	str	r2, [r7, #4]
 8006e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006e7c:	f7ff ff3e 	bl	8006cfc <__NVIC_GetPriorityGrouping>
 8006e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	68b9      	ldr	r1, [r7, #8]
 8006e86:	6978      	ldr	r0, [r7, #20]
 8006e88:	f7ff ff8e 	bl	8006da8 <NVIC_EncodePriority>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e92:	4611      	mov	r1, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f7ff ff5d 	bl	8006d54 <__NVIC_SetPriority>
}
 8006e9a:	bf00      	nop
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff ff31 	bl	8006d18 <__NVIC_EnableIRQ>
}
 8006eb6:	bf00      	nop
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b082      	sub	sp, #8
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7ff ffa2 	bl	8006e10 <SysTick_Config>
 8006ecc:	4603      	mov	r3, r0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006ee4:	f7ff fab4 	bl	8006450 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e099      	b.n	8007028 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f14:	e00f      	b.n	8006f36 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f16:	f7ff fa9b 	bl	8006450 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b05      	cmp	r3, #5
 8006f22:	d908      	bls.n	8006f36 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e078      	b.n	8007028 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f003 0301 	and.w	r3, r3, #1
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e8      	bne.n	8006f16 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	4b38      	ldr	r3, [pc, #224]	; (8007030 <HAL_DMA_Init+0x158>)
 8006f50:	4013      	ands	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006f6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	699b      	ldr	r3, [r3, #24]
 8006f74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006f7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8c:	2b04      	cmp	r3, #4
 8006f8e:	d107      	bne.n	8006fa0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695b      	ldr	r3, [r3, #20]
 8006fae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	f023 0307 	bic.w	r3, r3, #7
 8006fb6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b04      	cmp	r3, #4
 8006fc8:	d117      	bne.n	8006ffa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	4313      	orrs	r3, r2
 8006fd2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00e      	beq.n	8006ffa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa9d 	bl	800751c <DMA_CheckFifoParam>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d008      	beq.n	8006ffa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2240      	movs	r2, #64	; 0x40
 8006fec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e016      	b.n	8007028 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fa54 	bl	80074b0 <DMA_CalcBaseAndBitshift>
 8007008:	4603      	mov	r3, r0
 800700a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	223f      	movs	r2, #63	; 0x3f
 8007012:	409a      	lsls	r2, r3
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3718      	adds	r7, #24
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	f010803f 	.word	0xf010803f

08007034 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b086      	sub	sp, #24
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
 8007040:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007052:	2b01      	cmp	r3, #1
 8007054:	d101      	bne.n	800705a <HAL_DMA_Start_IT+0x26>
 8007056:	2302      	movs	r3, #2
 8007058:	e040      	b.n	80070dc <HAL_DMA_Start_IT+0xa8>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	d12f      	bne.n	80070ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	68f8      	ldr	r0, [r7, #12]
 8007084:	f000 f9e6 	bl	8007454 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708c:	223f      	movs	r2, #63	; 0x3f
 800708e:	409a      	lsls	r2, r3
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0216 	orr.w	r2, r2, #22
 80070a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d007      	beq.n	80070bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f042 0208 	orr.w	r2, r2, #8
 80070ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f042 0201 	orr.w	r2, r2, #1
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	e005      	b.n	80070da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80070d6:	2302      	movs	r3, #2
 80070d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80070da:	7dfb      	ldrb	r3, [r7, #23]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3718      	adds	r7, #24
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d004      	beq.n	8007102 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e00c      	b.n	800711c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2205      	movs	r2, #5
 8007106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0201 	bic.w	r2, r2, #1
 8007118:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007134:	4b92      	ldr	r3, [pc, #584]	; (8007380 <HAL_DMA_IRQHandler+0x258>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a92      	ldr	r2, [pc, #584]	; (8007384 <HAL_DMA_IRQHandler+0x25c>)
 800713a:	fba2 2303 	umull	r2, r3, r2, r3
 800713e:	0a9b      	lsrs	r3, r3, #10
 8007140:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	2208      	movs	r2, #8
 8007154:	409a      	lsls	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01a      	beq.n	8007194 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d013      	beq.n	8007194 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 0204 	bic.w	r2, r2, #4
 800717a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007180:	2208      	movs	r2, #8
 8007182:	409a      	lsls	r2, r3
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718c:	f043 0201 	orr.w	r2, r3, #1
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007198:	2201      	movs	r2, #1
 800719a:	409a      	lsls	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4013      	ands	r3, r2
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d012      	beq.n	80071ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00b      	beq.n	80071ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	2201      	movs	r2, #1
 80071b8:	409a      	lsls	r2, r3
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071c2:	f043 0202 	orr.w	r2, r3, #2
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ce:	2204      	movs	r2, #4
 80071d0:	409a      	lsls	r2, r3
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4013      	ands	r3, r2
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d012      	beq.n	8007200 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ec:	2204      	movs	r2, #4
 80071ee:	409a      	lsls	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f8:	f043 0204 	orr.w	r2, r3, #4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007204:	2210      	movs	r2, #16
 8007206:	409a      	lsls	r2, r3
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4013      	ands	r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d043      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0308 	and.w	r3, r3, #8
 800721a:	2b00      	cmp	r3, #0
 800721c:	d03c      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007222:	2210      	movs	r2, #16
 8007224:	409a      	lsls	r2, r3
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007234:	2b00      	cmp	r3, #0
 8007236:	d018      	beq.n	800726a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007242:	2b00      	cmp	r3, #0
 8007244:	d108      	bne.n	8007258 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d024      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	4798      	blx	r3
 8007256:	e01f      	b.n	8007298 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01b      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	4798      	blx	r3
 8007268:	e016      	b.n	8007298 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007274:	2b00      	cmp	r3, #0
 8007276:	d107      	bne.n	8007288 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0208 	bic.w	r2, r2, #8
 8007286:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728c:	2b00      	cmp	r3, #0
 800728e:	d003      	beq.n	8007298 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729c:	2220      	movs	r2, #32
 800729e:	409a      	lsls	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4013      	ands	r3, r2
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	f000 808e 	beq.w	80073c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	f000 8086 	beq.w	80073c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072be:	2220      	movs	r2, #32
 80072c0:	409a      	lsls	r2, r3
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072cc:	b2db      	uxtb	r3, r3
 80072ce:	2b05      	cmp	r3, #5
 80072d0:	d136      	bne.n	8007340 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f022 0216 	bic.w	r2, r2, #22
 80072e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	695a      	ldr	r2, [r3, #20]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <HAL_DMA_IRQHandler+0x1da>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d007      	beq.n	8007312 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0208 	bic.w	r2, r2, #8
 8007310:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007316:	223f      	movs	r2, #63	; 0x3f
 8007318:	409a      	lsls	r2, r3
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007332:	2b00      	cmp	r3, #0
 8007334:	d07d      	beq.n	8007432 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
        }
        return;
 800733e:	e078      	b.n	8007432 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800734a:	2b00      	cmp	r3, #0
 800734c:	d01c      	beq.n	8007388 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d108      	bne.n	800736e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007360:	2b00      	cmp	r3, #0
 8007362:	d030      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4798      	blx	r3
 800736c:	e02b      	b.n	80073c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d027      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	4798      	blx	r3
 800737e:	e022      	b.n	80073c6 <HAL_DMA_IRQHandler+0x29e>
 8007380:	20000000 	.word	0x20000000
 8007384:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10f      	bne.n	80073b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0210 	bic.w	r2, r2, #16
 80073a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d003      	beq.n	80073c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d032      	beq.n	8007434 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d2:	f003 0301 	and.w	r3, r3, #1
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d022      	beq.n	8007420 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2205      	movs	r2, #5
 80073de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0201 	bic.w	r2, r2, #1
 80073f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3301      	adds	r3, #1
 80073f6:	60bb      	str	r3, [r7, #8]
 80073f8:	697a      	ldr	r2, [r7, #20]
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d307      	bcc.n	800740e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d1f2      	bne.n	80073f2 <HAL_DMA_IRQHandler+0x2ca>
 800740c:	e000      	b.n	8007410 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800740e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2201      	movs	r2, #1
 800741c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	2b00      	cmp	r3, #0
 8007426:	d005      	beq.n	8007434 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	4798      	blx	r3
 8007430:	e000      	b.n	8007434 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007432:	bf00      	nop
    }
  }
}
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop

0800743c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007448:	4618      	mov	r0, r3
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
 8007460:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007470:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	d108      	bne.n	8007494 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007492:	e007      	b.n	80074a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68ba      	ldr	r2, [r7, #8]
 800749a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	60da      	str	r2, [r3, #12]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	3b10      	subs	r3, #16
 80074c0:	4a14      	ldr	r2, [pc, #80]	; (8007514 <DMA_CalcBaseAndBitshift+0x64>)
 80074c2:	fba2 2303 	umull	r2, r3, r2, r3
 80074c6:	091b      	lsrs	r3, r3, #4
 80074c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80074ca:	4a13      	ldr	r2, [pc, #76]	; (8007518 <DMA_CalcBaseAndBitshift+0x68>)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	4413      	add	r3, r2
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	461a      	mov	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b03      	cmp	r3, #3
 80074dc:	d909      	bls.n	80074f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	1d1a      	adds	r2, r3, #4
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	659a      	str	r2, [r3, #88]	; 0x58
 80074f0:	e007      	b.n	8007502 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074fa:	f023 0303 	bic.w	r3, r3, #3
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop
 8007514:	aaaaaaab 	.word	0xaaaaaaab
 8007518:	08017d40 	.word	0x08017d40

0800751c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800752c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	699b      	ldr	r3, [r3, #24]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d11f      	bne.n	8007576 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d855      	bhi.n	80075e8 <DMA_CheckFifoParam+0xcc>
 800753c:	a201      	add	r2, pc, #4	; (adr r2, 8007544 <DMA_CheckFifoParam+0x28>)
 800753e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007542:	bf00      	nop
 8007544:	08007555 	.word	0x08007555
 8007548:	08007567 	.word	0x08007567
 800754c:	08007555 	.word	0x08007555
 8007550:	080075e9 	.word	0x080075e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d045      	beq.n	80075ec <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007564:	e042      	b.n	80075ec <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800756a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800756e:	d13f      	bne.n	80075f0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007574:	e03c      	b.n	80075f0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800757e:	d121      	bne.n	80075c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d836      	bhi.n	80075f4 <DMA_CheckFifoParam+0xd8>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <DMA_CheckFifoParam+0x70>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075a3 	.word	0x080075a3
 8007594:	0800759d 	.word	0x0800759d
 8007598:	080075b5 	.word	0x080075b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
      break;
 80075a0:	e02f      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d024      	beq.n	80075f8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b2:	e021      	b.n	80075f8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075bc:	d11e      	bne.n	80075fc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80075c2:	e01b      	b.n	80075fc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d902      	bls.n	80075d0 <DMA_CheckFifoParam+0xb4>
 80075ca:	2b03      	cmp	r3, #3
 80075cc:	d003      	beq.n	80075d6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075ce:	e018      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	73fb      	strb	r3, [r7, #15]
      break;
 80075d4:	e015      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
      break;
 80075e6:	e00b      	b.n	8007600 <DMA_CheckFifoParam+0xe4>
      break;
 80075e8:	bf00      	nop
 80075ea:	e00a      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;
 80075ec:	bf00      	nop
 80075ee:	e008      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;
 80075f0:	bf00      	nop
 80075f2:	e006      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;
 80075f4:	bf00      	nop
 80075f6:	e004      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;
 80075f8:	bf00      	nop
 80075fa:	e002      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;   
 80075fc:	bf00      	nop
 80075fe:	e000      	b.n	8007602 <DMA_CheckFifoParam+0xe6>
      break;
 8007600:	bf00      	nop
    }
  } 
  
  return status; 
 8007602:	7bfb      	ldrb	r3, [r7, #15]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3714      	adds	r7, #20
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800761e:	2300      	movs	r3, #0
 8007620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007622:	2300      	movs	r3, #0
 8007624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007626:	2300      	movs	r3, #0
 8007628:	61fb      	str	r3, [r7, #28]
 800762a:	e177      	b.n	800791c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800762c:	2201      	movs	r2, #1
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4013      	ands	r3, r2
 800763e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	429a      	cmp	r2, r3
 8007646:	f040 8166 	bne.w	8007916 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b01      	cmp	r3, #1
 8007650:	d00b      	beq.n	800766a <HAL_GPIO_Init+0x5a>
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	2b02      	cmp	r3, #2
 8007658:	d007      	beq.n	800766a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800765e:	2b11      	cmp	r3, #17
 8007660:	d003      	beq.n	800766a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	2b12      	cmp	r3, #18
 8007668:	d130      	bne.n	80076cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	2203      	movs	r2, #3
 8007676:	fa02 f303 	lsl.w	r3, r2, r3
 800767a:	43db      	mvns	r3, r3
 800767c:	69ba      	ldr	r2, [r7, #24]
 800767e:	4013      	ands	r3, r2
 8007680:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	005b      	lsls	r3, r3, #1
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	69ba      	ldr	r2, [r7, #24]
 8007698:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80076a0:	2201      	movs	r2, #1
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	fa02 f303 	lsl.w	r3, r2, r3
 80076a8:	43db      	mvns	r3, r3
 80076aa:	69ba      	ldr	r2, [r7, #24]
 80076ac:	4013      	ands	r3, r2
 80076ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	091b      	lsrs	r3, r3, #4
 80076b6:	f003 0201 	and.w	r2, r3, #1
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	fa02 f303 	lsl.w	r3, r2, r3
 80076c0:	69ba      	ldr	r2, [r7, #24]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69ba      	ldr	r2, [r7, #24]
 80076ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	005b      	lsls	r3, r3, #1
 80076d6:	2203      	movs	r2, #3
 80076d8:	fa02 f303 	lsl.w	r3, r2, r3
 80076dc:	43db      	mvns	r3, r3
 80076de:	69ba      	ldr	r2, [r7, #24]
 80076e0:	4013      	ands	r3, r2
 80076e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	005b      	lsls	r3, r3, #1
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	69ba      	ldr	r2, [r7, #24]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69ba      	ldr	r2, [r7, #24]
 80076fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	2b02      	cmp	r3, #2
 8007702:	d003      	beq.n	800770c <HAL_GPIO_Init+0xfc>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	2b12      	cmp	r3, #18
 800770a:	d123      	bne.n	8007754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	08da      	lsrs	r2, r3, #3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	3208      	adds	r2, #8
 8007714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	f003 0307 	and.w	r3, r3, #7
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	220f      	movs	r2, #15
 8007724:	fa02 f303 	lsl.w	r3, r2, r3
 8007728:	43db      	mvns	r3, r3
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	4013      	ands	r3, r2
 800772e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	691a      	ldr	r2, [r3, #16]
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0307 	and.w	r3, r3, #7
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	fa02 f303 	lsl.w	r3, r2, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4313      	orrs	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	08da      	lsrs	r2, r3, #3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	3208      	adds	r2, #8
 800774e:	69b9      	ldr	r1, [r7, #24]
 8007750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	2203      	movs	r2, #3
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	43db      	mvns	r3, r3
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	4013      	ands	r3, r2
 800776a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 0203 	and.w	r2, r3, #3
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	69ba      	ldr	r2, [r7, #24]
 800777e:	4313      	orrs	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	69ba      	ldr	r2, [r7, #24]
 8007786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007790:	2b00      	cmp	r3, #0
 8007792:	f000 80c0 	beq.w	8007916 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
 800779a:	4b65      	ldr	r3, [pc, #404]	; (8007930 <HAL_GPIO_Init+0x320>)
 800779c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800779e:	4a64      	ldr	r2, [pc, #400]	; (8007930 <HAL_GPIO_Init+0x320>)
 80077a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077a4:	6453      	str	r3, [r2, #68]	; 0x44
 80077a6:	4b62      	ldr	r3, [pc, #392]	; (8007930 <HAL_GPIO_Init+0x320>)
 80077a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077ae:	60fb      	str	r3, [r7, #12]
 80077b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80077b2:	4a60      	ldr	r2, [pc, #384]	; (8007934 <HAL_GPIO_Init+0x324>)
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	089b      	lsrs	r3, r3, #2
 80077b8:	3302      	adds	r3, #2
 80077ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	220f      	movs	r2, #15
 80077ca:	fa02 f303 	lsl.w	r3, r2, r3
 80077ce:	43db      	mvns	r3, r3
 80077d0:	69ba      	ldr	r2, [r7, #24]
 80077d2:	4013      	ands	r3, r2
 80077d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a57      	ldr	r2, [pc, #348]	; (8007938 <HAL_GPIO_Init+0x328>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d037      	beq.n	800784e <HAL_GPIO_Init+0x23e>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a56      	ldr	r2, [pc, #344]	; (800793c <HAL_GPIO_Init+0x32c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d031      	beq.n	800784a <HAL_GPIO_Init+0x23a>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a55      	ldr	r2, [pc, #340]	; (8007940 <HAL_GPIO_Init+0x330>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d02b      	beq.n	8007846 <HAL_GPIO_Init+0x236>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a54      	ldr	r2, [pc, #336]	; (8007944 <HAL_GPIO_Init+0x334>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d025      	beq.n	8007842 <HAL_GPIO_Init+0x232>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a53      	ldr	r2, [pc, #332]	; (8007948 <HAL_GPIO_Init+0x338>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d01f      	beq.n	800783e <HAL_GPIO_Init+0x22e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a52      	ldr	r2, [pc, #328]	; (800794c <HAL_GPIO_Init+0x33c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d019      	beq.n	800783a <HAL_GPIO_Init+0x22a>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a51      	ldr	r2, [pc, #324]	; (8007950 <HAL_GPIO_Init+0x340>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d013      	beq.n	8007836 <HAL_GPIO_Init+0x226>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a50      	ldr	r2, [pc, #320]	; (8007954 <HAL_GPIO_Init+0x344>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00d      	beq.n	8007832 <HAL_GPIO_Init+0x222>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a4f      	ldr	r2, [pc, #316]	; (8007958 <HAL_GPIO_Init+0x348>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d007      	beq.n	800782e <HAL_GPIO_Init+0x21e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a4e      	ldr	r2, [pc, #312]	; (800795c <HAL_GPIO_Init+0x34c>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d101      	bne.n	800782a <HAL_GPIO_Init+0x21a>
 8007826:	2309      	movs	r3, #9
 8007828:	e012      	b.n	8007850 <HAL_GPIO_Init+0x240>
 800782a:	230a      	movs	r3, #10
 800782c:	e010      	b.n	8007850 <HAL_GPIO_Init+0x240>
 800782e:	2308      	movs	r3, #8
 8007830:	e00e      	b.n	8007850 <HAL_GPIO_Init+0x240>
 8007832:	2307      	movs	r3, #7
 8007834:	e00c      	b.n	8007850 <HAL_GPIO_Init+0x240>
 8007836:	2306      	movs	r3, #6
 8007838:	e00a      	b.n	8007850 <HAL_GPIO_Init+0x240>
 800783a:	2305      	movs	r3, #5
 800783c:	e008      	b.n	8007850 <HAL_GPIO_Init+0x240>
 800783e:	2304      	movs	r3, #4
 8007840:	e006      	b.n	8007850 <HAL_GPIO_Init+0x240>
 8007842:	2303      	movs	r3, #3
 8007844:	e004      	b.n	8007850 <HAL_GPIO_Init+0x240>
 8007846:	2302      	movs	r3, #2
 8007848:	e002      	b.n	8007850 <HAL_GPIO_Init+0x240>
 800784a:	2301      	movs	r3, #1
 800784c:	e000      	b.n	8007850 <HAL_GPIO_Init+0x240>
 800784e:	2300      	movs	r3, #0
 8007850:	69fa      	ldr	r2, [r7, #28]
 8007852:	f002 0203 	and.w	r2, r2, #3
 8007856:	0092      	lsls	r2, r2, #2
 8007858:	4093      	lsls	r3, r2
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	4313      	orrs	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007860:	4934      	ldr	r1, [pc, #208]	; (8007934 <HAL_GPIO_Init+0x324>)
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	089b      	lsrs	r3, r3, #2
 8007866:	3302      	adds	r3, #2
 8007868:	69ba      	ldr	r2, [r7, #24]
 800786a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800786e:	4b3c      	ldr	r3, [pc, #240]	; (8007960 <HAL_GPIO_Init+0x350>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	43db      	mvns	r3, r3
 8007878:	69ba      	ldr	r2, [r7, #24]
 800787a:	4013      	ands	r3, r2
 800787c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800788a:	69ba      	ldr	r2, [r7, #24]
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	4313      	orrs	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007892:	4a33      	ldr	r2, [pc, #204]	; (8007960 <HAL_GPIO_Init+0x350>)
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007898:	4b31      	ldr	r3, [pc, #196]	; (8007960 <HAL_GPIO_Init+0x350>)
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	43db      	mvns	r3, r3
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	4013      	ands	r3, r2
 80078a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d003      	beq.n	80078bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80078b4:	69ba      	ldr	r2, [r7, #24]
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078bc:	4a28      	ldr	r2, [pc, #160]	; (8007960 <HAL_GPIO_Init+0x350>)
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80078c2:	4b27      	ldr	r3, [pc, #156]	; (8007960 <HAL_GPIO_Init+0x350>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	43db      	mvns	r3, r3
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	4013      	ands	r3, r2
 80078d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d003      	beq.n	80078e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80078de:	69ba      	ldr	r2, [r7, #24]
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80078e6:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <HAL_GPIO_Init+0x350>)
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80078ec:	4b1c      	ldr	r3, [pc, #112]	; (8007960 <HAL_GPIO_Init+0x350>)
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	43db      	mvns	r3, r3
 80078f6:	69ba      	ldr	r2, [r7, #24]
 80078f8:	4013      	ands	r3, r2
 80078fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007908:	69ba      	ldr	r2, [r7, #24]
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4313      	orrs	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007910:	4a13      	ldr	r2, [pc, #76]	; (8007960 <HAL_GPIO_Init+0x350>)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	3301      	adds	r3, #1
 800791a:	61fb      	str	r3, [r7, #28]
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	2b0f      	cmp	r3, #15
 8007920:	f67f ae84 	bls.w	800762c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007924:	bf00      	nop
 8007926:	3724      	adds	r7, #36	; 0x24
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40023800 	.word	0x40023800
 8007934:	40013800 	.word	0x40013800
 8007938:	40020000 	.word	0x40020000
 800793c:	40020400 	.word	0x40020400
 8007940:	40020800 	.word	0x40020800
 8007944:	40020c00 	.word	0x40020c00
 8007948:	40021000 	.word	0x40021000
 800794c:	40021400 	.word	0x40021400
 8007950:	40021800 	.word	0x40021800
 8007954:	40021c00 	.word	0x40021c00
 8007958:	40022000 	.word	0x40022000
 800795c:	40022400 	.word	0x40022400
 8007960:	40013c00 	.word	0x40013c00

08007964 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	691a      	ldr	r2, [r3, #16]
 8007974:	887b      	ldrh	r3, [r7, #2]
 8007976:	4013      	ands	r3, r2
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	e001      	b.n	8007986 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007982:	2300      	movs	r3, #0
 8007984:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007986:	7bfb      	ldrb	r3, [r7, #15]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	807b      	strh	r3, [r7, #2]
 80079a0:	4613      	mov	r3, r2
 80079a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80079a4:	787b      	ldrb	r3, [r7, #1]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d003      	beq.n	80079b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80079aa:	887a      	ldrh	r2, [r7, #2]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80079b0:	e003      	b.n	80079ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80079b2:	887b      	ldrh	r3, [r7, #2]
 80079b4:	041a      	lsls	r2, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	619a      	str	r2, [r3, #24]
}
 80079ba:	bf00      	nop
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079d4:	695a      	ldr	r2, [r3, #20]
 80079d6:	88fb      	ldrh	r3, [r7, #6]
 80079d8:	4013      	ands	r3, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d006      	beq.n	80079ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80079de:	4a05      	ldr	r2, [pc, #20]	; (80079f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80079e0:	88fb      	ldrh	r3, [r7, #6]
 80079e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fc f821 	bl	8003a2e <HAL_GPIO_EXTI_Callback>
  }
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	40013c00 	.word	0x40013c00

080079f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e11f      	b.n	8007c4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fd fa0e 	bl	8004e40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2224      	movs	r2, #36	; 0x24
 8007a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0201 	bic.w	r2, r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007a5c:	f001 f96e 	bl	8008d3c <HAL_RCC_GetPCLK1Freq>
 8007a60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4a7b      	ldr	r2, [pc, #492]	; (8007c54 <HAL_I2C_Init+0x25c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d807      	bhi.n	8007a7c <HAL_I2C_Init+0x84>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	4a7a      	ldr	r2, [pc, #488]	; (8007c58 <HAL_I2C_Init+0x260>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	bf94      	ite	ls
 8007a74:	2301      	movls	r3, #1
 8007a76:	2300      	movhi	r3, #0
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	e006      	b.n	8007a8a <HAL_I2C_Init+0x92>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4a77      	ldr	r2, [pc, #476]	; (8007c5c <HAL_I2C_Init+0x264>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	bf94      	ite	ls
 8007a84:	2301      	movls	r3, #1
 8007a86:	2300      	movhi	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e0db      	b.n	8007c4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a72      	ldr	r2, [pc, #456]	; (8007c60 <HAL_I2C_Init+0x268>)
 8007a96:	fba2 2303 	umull	r2, r3, r2, r3
 8007a9a:	0c9b      	lsrs	r3, r3, #18
 8007a9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	430a      	orrs	r2, r1
 8007ab0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	4a64      	ldr	r2, [pc, #400]	; (8007c54 <HAL_I2C_Init+0x25c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d802      	bhi.n	8007acc <HAL_I2C_Init+0xd4>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	e009      	b.n	8007ae0 <HAL_I2C_Init+0xe8>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	4a63      	ldr	r2, [pc, #396]	; (8007c64 <HAL_I2C_Init+0x26c>)
 8007ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8007adc:	099b      	lsrs	r3, r3, #6
 8007ade:	3301      	adds	r3, #1
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	6812      	ldr	r2, [r2, #0]
 8007ae4:	430b      	orrs	r3, r1
 8007ae6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007af2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	4956      	ldr	r1, [pc, #344]	; (8007c54 <HAL_I2C_Init+0x25c>)
 8007afc:	428b      	cmp	r3, r1
 8007afe:	d80d      	bhi.n	8007b1c <HAL_I2C_Init+0x124>
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1e59      	subs	r1, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007b0e:	3301      	adds	r3, #1
 8007b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b14:	2b04      	cmp	r3, #4
 8007b16:	bf38      	it	cc
 8007b18:	2304      	movcc	r3, #4
 8007b1a:	e04f      	b.n	8007bbc <HAL_I2C_Init+0x1c4>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d111      	bne.n	8007b48 <HAL_I2C_Init+0x150>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	1e58      	subs	r0, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6859      	ldr	r1, [r3, #4]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	440b      	add	r3, r1
 8007b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b36:	3301      	adds	r3, #1
 8007b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	bf0c      	ite	eq
 8007b40:	2301      	moveq	r3, #1
 8007b42:	2300      	movne	r3, #0
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	e012      	b.n	8007b6e <HAL_I2C_Init+0x176>
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	1e58      	subs	r0, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6859      	ldr	r1, [r3, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	440b      	add	r3, r1
 8007b56:	0099      	lsls	r1, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b5e:	3301      	adds	r3, #1
 8007b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	bf0c      	ite	eq
 8007b68:	2301      	moveq	r3, #1
 8007b6a:	2300      	movne	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d001      	beq.n	8007b76 <HAL_I2C_Init+0x17e>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e022      	b.n	8007bbc <HAL_I2C_Init+0x1c4>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	689b      	ldr	r3, [r3, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10e      	bne.n	8007b9c <HAL_I2C_Init+0x1a4>
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	1e58      	subs	r0, r3, #1
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6859      	ldr	r1, [r3, #4]
 8007b86:	460b      	mov	r3, r1
 8007b88:	005b      	lsls	r3, r3, #1
 8007b8a:	440b      	add	r3, r1
 8007b8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007b90:	3301      	adds	r3, #1
 8007b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b9a:	e00f      	b.n	8007bbc <HAL_I2C_Init+0x1c4>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	1e58      	subs	r0, r3, #1
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6859      	ldr	r1, [r3, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	440b      	add	r3, r1
 8007baa:	0099      	lsls	r1, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bbc:	6879      	ldr	r1, [r7, #4]
 8007bbe:	6809      	ldr	r1, [r1, #0]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	69da      	ldr	r2, [r3, #28]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a1b      	ldr	r3, [r3, #32]
 8007bd6:	431a      	orrs	r2, r3
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	430a      	orrs	r2, r1
 8007bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007bea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	6911      	ldr	r1, [r2, #16]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68d2      	ldr	r2, [r2, #12]
 8007bf6:	4311      	orrs	r1, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	695a      	ldr	r2, [r3, #20]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	699b      	ldr	r3, [r3, #24]
 8007c12:	431a      	orrs	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3710      	adds	r7, #16
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	000186a0 	.word	0x000186a0
 8007c58:	001e847f 	.word	0x001e847f
 8007c5c:	003d08ff 	.word	0x003d08ff
 8007c60:	431bde83 	.word	0x431bde83
 8007c64:	10624dd3 	.word	0x10624dd3

08007c68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af02      	add	r7, sp, #8
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	607a      	str	r2, [r7, #4]
 8007c72:	461a      	mov	r2, r3
 8007c74:	460b      	mov	r3, r1
 8007c76:	817b      	strh	r3, [r7, #10]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007c7c:	f7fe fbe8 	bl	8006450 <HAL_GetTick>
 8007c80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	2b20      	cmp	r3, #32
 8007c8c:	f040 80e0 	bne.w	8007e50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2319      	movs	r3, #25
 8007c96:	2201      	movs	r2, #1
 8007c98:	4970      	ldr	r1, [pc, #448]	; (8007e5c <HAL_I2C_Master_Transmit+0x1f4>)
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 fc58 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	e0d3      	b.n	8007e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_I2C_Master_Transmit+0x50>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e0cc      	b.n	8007e52 <HAL_I2C_Master_Transmit+0x1ea>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d007      	beq.n	8007cde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	681a      	ldr	r2, [r3, #0]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f042 0201 	orr.w	r2, r2, #1
 8007cdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2221      	movs	r2, #33	; 0x21
 8007cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2210      	movs	r2, #16
 8007cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	687a      	ldr	r2, [r7, #4]
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	893a      	ldrh	r2, [r7, #8]
 8007d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	4a50      	ldr	r2, [pc, #320]	; (8007e60 <HAL_I2C_Master_Transmit+0x1f8>)
 8007d1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007d20:	8979      	ldrh	r1, [r7, #10]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	6a3a      	ldr	r2, [r7, #32]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fac2 	bl	80082b0 <I2C_MasterRequestWrite>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e08d      	b.n	8007e52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d36:	2300      	movs	r3, #0
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	613b      	str	r3, [r7, #16]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699b      	ldr	r3, [r3, #24]
 8007d48:	613b      	str	r3, [r7, #16]
 8007d4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007d4c:	e066      	b.n	8007e1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d4e:	697a      	ldr	r2, [r7, #20]
 8007d50:	6a39      	ldr	r1, [r7, #32]
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fcd2 	bl	80086fc <I2C_WaitOnTXEFlagUntilTimeout>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00d      	beq.n	8007d7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d107      	bne.n	8007d76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007d76:	2301      	movs	r3, #1
 8007d78:	e06b      	b.n	8007e52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7e:	781a      	ldrb	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	1c5a      	adds	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da2:	3b01      	subs	r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b04      	cmp	r3, #4
 8007db6:	d11b      	bne.n	8007df0 <HAL_I2C_Master_Transmit+0x188>
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d017      	beq.n	8007df0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	1c5a      	adds	r2, r3, #1
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de8:	3b01      	subs	r3, #1
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	6a39      	ldr	r1, [r7, #32]
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 fcc2 	bl	800877e <I2C_WaitOnBTFFlagUntilTimeout>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00d      	beq.n	8007e1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	d107      	bne.n	8007e18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	e01a      	b.n	8007e52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d194      	bne.n	8007d4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	e000      	b.n	8007e52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007e50:	2302      	movs	r3, #2
  }
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3718      	adds	r7, #24
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	00100002 	.word	0x00100002
 8007e60:	ffff0000 	.word	0xffff0000

08007e64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b08c      	sub	sp, #48	; 0x30
 8007e68:	af02      	add	r7, sp, #8
 8007e6a:	60f8      	str	r0, [r7, #12]
 8007e6c:	607a      	str	r2, [r7, #4]
 8007e6e:	461a      	mov	r2, r3
 8007e70:	460b      	mov	r3, r1
 8007e72:	817b      	strh	r3, [r7, #10]
 8007e74:	4613      	mov	r3, r2
 8007e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007e78:	f7fe faea 	bl	8006450 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b20      	cmp	r3, #32
 8007e88:	f040 820b 	bne.w	80082a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8e:	9300      	str	r3, [sp, #0]
 8007e90:	2319      	movs	r3, #25
 8007e92:	2201      	movs	r2, #1
 8007e94:	497c      	ldr	r1, [pc, #496]	; (8008088 <HAL_I2C_Master_Receive+0x224>)
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fb5a 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
 8007ea4:	e1fe      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d101      	bne.n	8007eb4 <HAL_I2C_Master_Receive+0x50>
 8007eb0:	2302      	movs	r3, #2
 8007eb2:	e1f7      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2201      	movs	r2, #1
 8007eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d007      	beq.n	8007eda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0201 	orr.w	r2, r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	2222      	movs	r2, #34	; 0x22
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2210      	movs	r2, #16
 8007ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	893a      	ldrh	r2, [r7, #8]
 8007f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29a      	uxth	r2, r3
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a5c      	ldr	r2, [pc, #368]	; (800808c <HAL_I2C_Master_Receive+0x228>)
 8007f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007f1c:	8979      	ldrh	r1, [r7, #10]
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f000 fa46 	bl	80083b4 <I2C_MasterRequestRead>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e1b8      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d113      	bne.n	8007f62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	623b      	str	r3, [r7, #32]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	695b      	ldr	r3, [r3, #20]
 8007f44:	623b      	str	r3, [r7, #32]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	623b      	str	r3, [r7, #32]
 8007f4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e18c      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d11b      	bne.n	8007fa2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	61fb      	str	r3, [r7, #28]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695b      	ldr	r3, [r3, #20]
 8007f84:	61fb      	str	r3, [r7, #28]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	699b      	ldr	r3, [r3, #24]
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e16c      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d11b      	bne.n	8007fe2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fca:	2300      	movs	r3, #0
 8007fcc:	61bb      	str	r3, [r7, #24]
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	695b      	ldr	r3, [r3, #20]
 8007fd4:	61bb      	str	r3, [r7, #24]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	61bb      	str	r3, [r7, #24]
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	e14c      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ff0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	617b      	str	r3, [r7, #20]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695b      	ldr	r3, [r3, #20]
 8007ffc:	617b      	str	r3, [r7, #20]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008008:	e138      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800800e:	2b03      	cmp	r3, #3
 8008010:	f200 80f1 	bhi.w	80081f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008018:	2b01      	cmp	r3, #1
 800801a:	d123      	bne.n	8008064 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800801c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800801e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fbed 	bl	8008800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e139      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	691a      	ldr	r2, [r3, #16]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800804c:	3b01      	subs	r3, #1
 800804e:	b29a      	uxth	r2, r3
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008062:	e10b      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008068:	2b02      	cmp	r3, #2
 800806a:	d14e      	bne.n	800810a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	2200      	movs	r2, #0
 8008074:	4906      	ldr	r1, [pc, #24]	; (8008090 <HAL_I2C_Master_Receive+0x22c>)
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 fa6a 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d008      	beq.n	8008094 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e10e      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
 8008086:	bf00      	nop
 8008088:	00100002 	.word	0x00100002
 800808c:	ffff0000 	.word	0xffff0000
 8008090:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	691a      	ldr	r2, [r3, #16]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	b2d2      	uxtb	r2, r2
 80080b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	1c5a      	adds	r2, r3, #1
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	3b01      	subs	r3, #1
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	b2d2      	uxtb	r2, r2
 80080e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080fe:	b29b      	uxth	r3, r3
 8008100:	3b01      	subs	r3, #1
 8008102:	b29a      	uxth	r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008108:	e0b8      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008110:	2200      	movs	r2, #0
 8008112:	4966      	ldr	r1, [pc, #408]	; (80082ac <HAL_I2C_Master_Receive+0x448>)
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 fa1b 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e0bf      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691a      	ldr	r2, [r3, #16]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	b2d2      	uxtb	r2, r2
 8008140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	1c5a      	adds	r2, r3, #1
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008150:	3b01      	subs	r3, #1
 8008152:	b29a      	uxth	r2, r3
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	2200      	movs	r2, #0
 800816e:	494f      	ldr	r1, [pc, #316]	; (80082ac <HAL_I2C_Master_Receive+0x448>)
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f000 f9ed 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 8008176:	4603      	mov	r3, r0
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800817c:	2301      	movs	r3, #1
 800817e:	e091      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800818e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	691a      	ldr	r2, [r3, #16]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819a:	b2d2      	uxtb	r2, r2
 800819c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a2:	1c5a      	adds	r2, r3, #1
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	3b01      	subs	r3, #1
 80081bc:	b29a      	uxth	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	691a      	ldr	r2, [r3, #16]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d4:	1c5a      	adds	r2, r3, #1
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081de:	3b01      	subs	r3, #1
 80081e0:	b29a      	uxth	r2, r3
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80081f4:	e042      	b.n	800827c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fb00 	bl	8008800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008200:	4603      	mov	r3, r0
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e04c      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008214:	b2d2      	uxtb	r2, r2
 8008216:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008226:	3b01      	subs	r3, #1
 8008228:	b29a      	uxth	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008232:	b29b      	uxth	r3, r3
 8008234:	3b01      	subs	r3, #1
 8008236:	b29a      	uxth	r2, r3
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	f003 0304 	and.w	r3, r3, #4
 8008246:	2b04      	cmp	r3, #4
 8008248:	d118      	bne.n	800827c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	691a      	ldr	r2, [r3, #16]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008254:	b2d2      	uxtb	r2, r2
 8008256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800825c:	1c5a      	adds	r2, r3, #1
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008266:	3b01      	subs	r3, #1
 8008268:	b29a      	uxth	r2, r3
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008272:	b29b      	uxth	r3, r3
 8008274:	3b01      	subs	r3, #1
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008280:	2b00      	cmp	r3, #0
 8008282:	f47f aec2 	bne.w	800800a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800829e:	2300      	movs	r3, #0
 80082a0:	e000      	b.n	80082a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80082a2:	2302      	movs	r3, #2
  }
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3728      	adds	r7, #40	; 0x28
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	00010004 	.word	0x00010004

080082b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	607a      	str	r2, [r7, #4]
 80082ba:	603b      	str	r3, [r7, #0]
 80082bc:	460b      	mov	r3, r1
 80082be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	2b08      	cmp	r3, #8
 80082ca:	d006      	beq.n	80082da <I2C_MasterRequestWrite+0x2a>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d003      	beq.n	80082da <I2C_MasterRequestWrite+0x2a>
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082d8:	d108      	bne.n	80082ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	e00b      	b.n	8008304 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f0:	2b12      	cmp	r3, #18
 80082f2:	d107      	bne.n	8008304 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008302:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	9300      	str	r3, [sp, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f91d 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00d      	beq.n	8008338 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800832a:	d103      	bne.n	8008334 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	e035      	b.n	80083a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	691b      	ldr	r3, [r3, #16]
 800833c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008340:	d108      	bne.n	8008354 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008342:	897b      	ldrh	r3, [r7, #10]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	461a      	mov	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008350:	611a      	str	r2, [r3, #16]
 8008352:	e01b      	b.n	800838c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008354:	897b      	ldrh	r3, [r7, #10]
 8008356:	11db      	asrs	r3, r3, #7
 8008358:	b2db      	uxtb	r3, r3
 800835a:	f003 0306 	and.w	r3, r3, #6
 800835e:	b2db      	uxtb	r3, r3
 8008360:	f063 030f 	orn	r3, r3, #15
 8008364:	b2da      	uxtb	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	490e      	ldr	r1, [pc, #56]	; (80083ac <I2C_MasterRequestWrite+0xfc>)
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f000 f943 	bl	80085fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800837e:	2301      	movs	r3, #1
 8008380:	e010      	b.n	80083a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008382:	897b      	ldrh	r3, [r7, #10]
 8008384:	b2da      	uxtb	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4907      	ldr	r1, [pc, #28]	; (80083b0 <I2C_MasterRequestWrite+0x100>)
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f933 	bl	80085fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	00010008 	.word	0x00010008
 80083b0:	00010002 	.word	0x00010002

080083b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af02      	add	r7, sp, #8
 80083ba:	60f8      	str	r0, [r7, #12]
 80083bc:	607a      	str	r2, [r7, #4]
 80083be:	603b      	str	r3, [r7, #0]
 80083c0:	460b      	mov	r3, r1
 80083c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681a      	ldr	r2, [r3, #0]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80083d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d006      	beq.n	80083ee <I2C_MasterRequestRead+0x3a>
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d003      	beq.n	80083ee <I2C_MasterRequestRead+0x3a>
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80083ec:	d108      	bne.n	8008400 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e00b      	b.n	8008418 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008404:	2b11      	cmp	r3, #17
 8008406:	d107      	bne.n	8008418 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f893 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00d      	beq.n	800844c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800843a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800843e:	d103      	bne.n	8008448 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	e079      	b.n	8008540 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008454:	d108      	bne.n	8008468 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008456:	897b      	ldrh	r3, [r7, #10]
 8008458:	b2db      	uxtb	r3, r3
 800845a:	f043 0301 	orr.w	r3, r3, #1
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	611a      	str	r2, [r3, #16]
 8008466:	e05f      	b.n	8008528 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008468:	897b      	ldrh	r3, [r7, #10]
 800846a:	11db      	asrs	r3, r3, #7
 800846c:	b2db      	uxtb	r3, r3
 800846e:	f003 0306 	and.w	r3, r3, #6
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f063 030f 	orn	r3, r3, #15
 8008478:	b2da      	uxtb	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	4930      	ldr	r1, [pc, #192]	; (8008548 <I2C_MasterRequestRead+0x194>)
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 f8b9 	bl	80085fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d001      	beq.n	8008496 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008492:	2301      	movs	r3, #1
 8008494:	e054      	b.n	8008540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008496:	897b      	ldrh	r3, [r7, #10]
 8008498:	b2da      	uxtb	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	4929      	ldr	r1, [pc, #164]	; (800854c <I2C_MasterRequestRead+0x198>)
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f8a9 	bl	80085fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d001      	beq.n	80084b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	e044      	b.n	8008540 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084b6:	2300      	movs	r3, #0
 80084b8:	613b      	str	r3, [r7, #16]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	613b      	str	r3, [r7, #16]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f831 	bl	8008550 <I2C_WaitOnFlagUntilTimeout>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00d      	beq.n	8008510 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008502:	d103      	bne.n	800850c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800850a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800850c:	2303      	movs	r3, #3
 800850e:	e017      	b.n	8008540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8008510:	897b      	ldrh	r3, [r7, #10]
 8008512:	11db      	asrs	r3, r3, #7
 8008514:	b2db      	uxtb	r3, r3
 8008516:	f003 0306 	and.w	r3, r3, #6
 800851a:	b2db      	uxtb	r3, r3
 800851c:	f063 030e 	orn	r3, r3, #14
 8008520:	b2da      	uxtb	r2, r3
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	4907      	ldr	r1, [pc, #28]	; (800854c <I2C_MasterRequestRead+0x198>)
 800852e:	68f8      	ldr	r0, [r7, #12]
 8008530:	f000 f865 	bl	80085fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3718      	adds	r7, #24
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	00010008 	.word	0x00010008
 800854c:	00010002 	.word	0x00010002

08008550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	4613      	mov	r3, r2
 800855e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008560:	e025      	b.n	80085ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008568:	d021      	beq.n	80085ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800856a:	f7fd ff71 	bl	8006450 <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d302      	bcc.n	8008580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d116      	bne.n	80085ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2220      	movs	r2, #32
 800858a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	f043 0220 	orr.w	r2, r3, #32
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e023      	b.n	80085f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	0c1b      	lsrs	r3, r3, #16
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d10d      	bne.n	80085d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	43da      	mvns	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4013      	ands	r3, r2
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bf0c      	ite	eq
 80085ca:	2301      	moveq	r3, #1
 80085cc:	2300      	movne	r3, #0
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	461a      	mov	r2, r3
 80085d2:	e00c      	b.n	80085ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	43da      	mvns	r2, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4013      	ands	r3, r2
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bf0c      	ite	eq
 80085e6:	2301      	moveq	r3, #1
 80085e8:	2300      	movne	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	461a      	mov	r2, r3
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d0b6      	beq.n	8008562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	60f8      	str	r0, [r7, #12]
 8008606:	60b9      	str	r1, [r7, #8]
 8008608:	607a      	str	r2, [r7, #4]
 800860a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800860c:	e051      	b.n	80086b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	695b      	ldr	r3, [r3, #20]
 8008614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800861c:	d123      	bne.n	8008666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800862c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2220      	movs	r2, #32
 8008642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008652:	f043 0204 	orr.w	r2, r3, #4
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e046      	b.n	80086f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866c:	d021      	beq.n	80086b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866e:	f7fd feef 	bl	8006450 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	429a      	cmp	r2, r3
 800867c:	d302      	bcc.n	8008684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d116      	bne.n	80086b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2220      	movs	r2, #32
 800868e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869e:	f043 0220 	orr.w	r2, r3, #32
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086ae:	2301      	movs	r3, #1
 80086b0:	e020      	b.n	80086f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	0c1b      	lsrs	r3, r3, #16
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d10c      	bne.n	80086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	43da      	mvns	r2, r3
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	4013      	ands	r3, r2
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	bf14      	ite	ne
 80086ce:	2301      	movne	r3, #1
 80086d0:	2300      	moveq	r3, #0
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	e00b      	b.n	80086ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	43da      	mvns	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4013      	ands	r3, r2
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	bf14      	ite	ne
 80086e8:	2301      	movne	r3, #1
 80086ea:	2300      	moveq	r3, #0
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d18d      	bne.n	800860e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	60f8      	str	r0, [r7, #12]
 8008704:	60b9      	str	r1, [r7, #8]
 8008706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008708:	e02d      	b.n	8008766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 f8ce 	bl	80088ac <I2C_IsAcknowledgeFailed>
 8008710:	4603      	mov	r3, r0
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	e02d      	b.n	8008776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008720:	d021      	beq.n	8008766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008722:	f7fd fe95 	bl	8006450 <HAL_GetTick>
 8008726:	4602      	mov	r2, r0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	1ad3      	subs	r3, r2, r3
 800872c:	68ba      	ldr	r2, [r7, #8]
 800872e:	429a      	cmp	r2, r3
 8008730:	d302      	bcc.n	8008738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d116      	bne.n	8008766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	f043 0220 	orr.w	r2, r3, #32
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008762:	2301      	movs	r3, #1
 8008764:	e007      	b.n	8008776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	695b      	ldr	r3, [r3, #20]
 800876c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d1ca      	bne.n	800870a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800877e:	b580      	push	{r7, lr}
 8008780:	b084      	sub	sp, #16
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800878a:	e02d      	b.n	80087e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 f88d 	bl	80088ac <I2C_IsAcknowledgeFailed>
 8008792:	4603      	mov	r3, r0
 8008794:	2b00      	cmp	r3, #0
 8008796:	d001      	beq.n	800879c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e02d      	b.n	80087f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a2:	d021      	beq.n	80087e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a4:	f7fd fe54 	bl	8006450 <HAL_GetTick>
 80087a8:	4602      	mov	r2, r0
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d302      	bcc.n	80087ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d116      	bne.n	80087e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2220      	movs	r2, #32
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	f043 0220 	orr.w	r2, r3, #32
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	e007      	b.n	80087f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	695b      	ldr	r3, [r3, #20]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d1ca      	bne.n	800878c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3710      	adds	r7, #16
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800880c:	e042      	b.n	8008894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	695b      	ldr	r3, [r3, #20]
 8008814:	f003 0310 	and.w	r3, r3, #16
 8008818:	2b10      	cmp	r3, #16
 800881a:	d119      	bne.n	8008850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0210 	mvn.w	r2, #16
 8008824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e029      	b.n	80088a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008850:	f7fd fdfe 	bl	8006450 <HAL_GetTick>
 8008854:	4602      	mov	r2, r0
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	68ba      	ldr	r2, [r7, #8]
 800885c:	429a      	cmp	r2, r3
 800885e:	d302      	bcc.n	8008866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d116      	bne.n	8008894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2220      	movs	r2, #32
 8008870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008880:	f043 0220 	orr.w	r2, r3, #32
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2200      	movs	r2, #0
 800888c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e007      	b.n	80088a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d1b5      	bne.n	800880e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80088a2:	2300      	movs	r3, #0
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3710      	adds	r7, #16
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}

080088ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088c2:	d11b      	bne.n	80088fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e8:	f043 0204 	orr.w	r2, r3, #4
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e000      	b.n	80088fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80088fc:	2300      	movs	r3, #0
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
	...

0800890c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008916:	2300      	movs	r3, #0
 8008918:	603b      	str	r3, [r7, #0]
 800891a:	4b20      	ldr	r3, [pc, #128]	; (800899c <HAL_PWREx_EnableOverDrive+0x90>)
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	4a1f      	ldr	r2, [pc, #124]	; (800899c <HAL_PWREx_EnableOverDrive+0x90>)
 8008920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008924:	6413      	str	r3, [r2, #64]	; 0x40
 8008926:	4b1d      	ldr	r3, [pc, #116]	; (800899c <HAL_PWREx_EnableOverDrive+0x90>)
 8008928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892e:	603b      	str	r3, [r7, #0]
 8008930:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008932:	4b1b      	ldr	r3, [pc, #108]	; (80089a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008938:	f7fd fd8a 	bl	8006450 <HAL_GetTick>
 800893c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800893e:	e009      	b.n	8008954 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008940:	f7fd fd86 	bl	8006450 <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800894e:	d901      	bls.n	8008954 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e01f      	b.n	8008994 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008954:	4b13      	ldr	r3, [pc, #76]	; (80089a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800895c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008960:	d1ee      	bne.n	8008940 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008962:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008964:	2201      	movs	r2, #1
 8008966:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008968:	f7fd fd72 	bl	8006450 <HAL_GetTick>
 800896c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800896e:	e009      	b.n	8008984 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008970:	f7fd fd6e 	bl	8006450 <HAL_GetTick>
 8008974:	4602      	mov	r2, r0
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800897e:	d901      	bls.n	8008984 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008980:	2303      	movs	r3, #3
 8008982:	e007      	b.n	8008994 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008984:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008990:	d1ee      	bne.n	8008970 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	40023800 	.word	0x40023800
 80089a0:	420e0040 	.word	0x420e0040
 80089a4:	40007000 	.word	0x40007000
 80089a8:	420e0044 	.word	0x420e0044

080089ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e0cc      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089c0:	4b68      	ldr	r3, [pc, #416]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d90c      	bls.n	80089e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ce:	4b65      	ldr	r3, [pc, #404]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 80089d0:	683a      	ldr	r2, [r7, #0]
 80089d2:	b2d2      	uxtb	r2, r2
 80089d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089d6:	4b63      	ldr	r3, [pc, #396]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	683a      	ldr	r2, [r7, #0]
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d001      	beq.n	80089e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089e4:	2301      	movs	r3, #1
 80089e6:	e0b8      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0302 	and.w	r3, r3, #2
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d020      	beq.n	8008a36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0304 	and.w	r3, r3, #4
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d005      	beq.n	8008a0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a00:	4b59      	ldr	r3, [pc, #356]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	4a58      	ldr	r2, [pc, #352]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a18:	4b53      	ldr	r3, [pc, #332]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	4a52      	ldr	r2, [pc, #328]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a24:	4b50      	ldr	r3, [pc, #320]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	494d      	ldr	r1, [pc, #308]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 0301 	and.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d044      	beq.n	8008acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d107      	bne.n	8008a5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a4a:	4b47      	ldr	r3, [pc, #284]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d119      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e07f      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b02      	cmp	r3, #2
 8008a60:	d003      	beq.n	8008a6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a66:	2b03      	cmp	r3, #3
 8008a68:	d107      	bne.n	8008a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a6a:	4b3f      	ldr	r3, [pc, #252]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e06f      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a7a:	4b3b      	ldr	r3, [pc, #236]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0302 	and.w	r3, r3, #2
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d101      	bne.n	8008a8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	e067      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008a8a:	4b37      	ldr	r3, [pc, #220]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f023 0203 	bic.w	r2, r3, #3
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	4934      	ldr	r1, [pc, #208]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a9c:	f7fd fcd8 	bl	8006450 <HAL_GetTick>
 8008aa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aa2:	e00a      	b.n	8008aba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008aa4:	f7fd fcd4 	bl	8006450 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d901      	bls.n	8008aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e04f      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aba:	4b2b      	ldr	r3, [pc, #172]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008abc:	689b      	ldr	r3, [r3, #8]
 8008abe:	f003 020c 	and.w	r2, r3, #12
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d1eb      	bne.n	8008aa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008acc:	4b25      	ldr	r3, [pc, #148]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f003 030f 	and.w	r3, r3, #15
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d20c      	bcs.n	8008af4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ada:	4b22      	ldr	r3, [pc, #136]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 8008adc:	683a      	ldr	r2, [r7, #0]
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ae2:	4b20      	ldr	r3, [pc, #128]	; (8008b64 <HAL_RCC_ClockConfig+0x1b8>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 030f 	and.w	r3, r3, #15
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d001      	beq.n	8008af4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e032      	b.n	8008b5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0304 	and.w	r3, r3, #4
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d008      	beq.n	8008b12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b00:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b02:	689b      	ldr	r3, [r3, #8]
 8008b04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4916      	ldr	r1, [pc, #88]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0308 	and.w	r3, r3, #8
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d009      	beq.n	8008b32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b1e:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	490e      	ldr	r1, [pc, #56]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b32:	f000 f821 	bl	8008b78 <HAL_RCC_GetSysClockFreq>
 8008b36:	4601      	mov	r1, r0
 8008b38:	4b0b      	ldr	r3, [pc, #44]	; (8008b68 <HAL_RCC_ClockConfig+0x1bc>)
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	091b      	lsrs	r3, r3, #4
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	4a0a      	ldr	r2, [pc, #40]	; (8008b6c <HAL_RCC_ClockConfig+0x1c0>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	fa21 f303 	lsr.w	r3, r1, r3
 8008b4a:	4a09      	ldr	r2, [pc, #36]	; (8008b70 <HAL_RCC_ClockConfig+0x1c4>)
 8008b4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <HAL_RCC_ClockConfig+0x1c8>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fd fc38 	bl	80063c8 <HAL_InitTick>

  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	40023c00 	.word	0x40023c00
 8008b68:	40023800 	.word	0x40023800
 8008b6c:	08017d28 	.word	0x08017d28
 8008b70:	20000000 	.word	0x20000000
 8008b74:	20000004 	.word	0x20000004

08008b78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	607b      	str	r3, [r7, #4]
 8008b82:	2300      	movs	r3, #0
 8008b84:	60fb      	str	r3, [r7, #12]
 8008b86:	2300      	movs	r3, #0
 8008b88:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b8e:	4b63      	ldr	r3, [pc, #396]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	f003 030c 	and.w	r3, r3, #12
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d007      	beq.n	8008baa <HAL_RCC_GetSysClockFreq+0x32>
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d008      	beq.n	8008bb0 <HAL_RCC_GetSysClockFreq+0x38>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	f040 80b4 	bne.w	8008d0c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ba4:	4b5e      	ldr	r3, [pc, #376]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008ba6:	60bb      	str	r3, [r7, #8]
       break;
 8008ba8:	e0b3      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008baa:	4b5d      	ldr	r3, [pc, #372]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008bac:	60bb      	str	r3, [r7, #8]
      break;
 8008bae:	e0b0      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bb0:	4b5a      	ldr	r3, [pc, #360]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bb8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bba:	4b58      	ldr	r3, [pc, #352]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d04a      	beq.n	8008c5c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bc6:	4b55      	ldr	r3, [pc, #340]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bc8:	685b      	ldr	r3, [r3, #4]
 8008bca:	099b      	lsrs	r3, r3, #6
 8008bcc:	f04f 0400 	mov.w	r4, #0
 8008bd0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008bd4:	f04f 0200 	mov.w	r2, #0
 8008bd8:	ea03 0501 	and.w	r5, r3, r1
 8008bdc:	ea04 0602 	and.w	r6, r4, r2
 8008be0:	4629      	mov	r1, r5
 8008be2:	4632      	mov	r2, r6
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	f04f 0400 	mov.w	r4, #0
 8008bec:	0154      	lsls	r4, r2, #5
 8008bee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008bf2:	014b      	lsls	r3, r1, #5
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	1b49      	subs	r1, r1, r5
 8008bfa:	eb62 0206 	sbc.w	r2, r2, r6
 8008bfe:	f04f 0300 	mov.w	r3, #0
 8008c02:	f04f 0400 	mov.w	r4, #0
 8008c06:	0194      	lsls	r4, r2, #6
 8008c08:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c0c:	018b      	lsls	r3, r1, #6
 8008c0e:	1a5b      	subs	r3, r3, r1
 8008c10:	eb64 0402 	sbc.w	r4, r4, r2
 8008c14:	f04f 0100 	mov.w	r1, #0
 8008c18:	f04f 0200 	mov.w	r2, #0
 8008c1c:	00e2      	lsls	r2, r4, #3
 8008c1e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c22:	00d9      	lsls	r1, r3, #3
 8008c24:	460b      	mov	r3, r1
 8008c26:	4614      	mov	r4, r2
 8008c28:	195b      	adds	r3, r3, r5
 8008c2a:	eb44 0406 	adc.w	r4, r4, r6
 8008c2e:	f04f 0100 	mov.w	r1, #0
 8008c32:	f04f 0200 	mov.w	r2, #0
 8008c36:	02a2      	lsls	r2, r4, #10
 8008c38:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008c3c:	0299      	lsls	r1, r3, #10
 8008c3e:	460b      	mov	r3, r1
 8008c40:	4614      	mov	r4, r2
 8008c42:	4618      	mov	r0, r3
 8008c44:	4621      	mov	r1, r4
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f04f 0400 	mov.w	r4, #0
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	4623      	mov	r3, r4
 8008c50:	f7f8 f832 	bl	8000cb8 <__aeabi_uldivmod>
 8008c54:	4603      	mov	r3, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	60fb      	str	r3, [r7, #12]
 8008c5a:	e049      	b.n	8008cf0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c5c:	4b2f      	ldr	r3, [pc, #188]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	099b      	lsrs	r3, r3, #6
 8008c62:	f04f 0400 	mov.w	r4, #0
 8008c66:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c6a:	f04f 0200 	mov.w	r2, #0
 8008c6e:	ea03 0501 	and.w	r5, r3, r1
 8008c72:	ea04 0602 	and.w	r6, r4, r2
 8008c76:	4629      	mov	r1, r5
 8008c78:	4632      	mov	r2, r6
 8008c7a:	f04f 0300 	mov.w	r3, #0
 8008c7e:	f04f 0400 	mov.w	r4, #0
 8008c82:	0154      	lsls	r4, r2, #5
 8008c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c88:	014b      	lsls	r3, r1, #5
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4622      	mov	r2, r4
 8008c8e:	1b49      	subs	r1, r1, r5
 8008c90:	eb62 0206 	sbc.w	r2, r2, r6
 8008c94:	f04f 0300 	mov.w	r3, #0
 8008c98:	f04f 0400 	mov.w	r4, #0
 8008c9c:	0194      	lsls	r4, r2, #6
 8008c9e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ca2:	018b      	lsls	r3, r1, #6
 8008ca4:	1a5b      	subs	r3, r3, r1
 8008ca6:	eb64 0402 	sbc.w	r4, r4, r2
 8008caa:	f04f 0100 	mov.w	r1, #0
 8008cae:	f04f 0200 	mov.w	r2, #0
 8008cb2:	00e2      	lsls	r2, r4, #3
 8008cb4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008cb8:	00d9      	lsls	r1, r3, #3
 8008cba:	460b      	mov	r3, r1
 8008cbc:	4614      	mov	r4, r2
 8008cbe:	195b      	adds	r3, r3, r5
 8008cc0:	eb44 0406 	adc.w	r4, r4, r6
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	f04f 0200 	mov.w	r2, #0
 8008ccc:	02a2      	lsls	r2, r4, #10
 8008cce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008cd2:	0299      	lsls	r1, r3, #10
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4614      	mov	r4, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	4621      	mov	r1, r4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f04f 0400 	mov.w	r4, #0
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	f7f7 ffe7 	bl	8000cb8 <__aeabi_uldivmod>
 8008cea:	4603      	mov	r3, r0
 8008cec:	460c      	mov	r4, r1
 8008cee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cf0:	4b0a      	ldr	r3, [pc, #40]	; (8008d1c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	0c1b      	lsrs	r3, r3, #16
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008d00:	68fa      	ldr	r2, [r7, #12]
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d08:	60bb      	str	r3, [r7, #8]
      break;
 8008d0a:	e002      	b.n	8008d12 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d0c:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008d0e:	60bb      	str	r3, [r7, #8]
      break;
 8008d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d12:	68bb      	ldr	r3, [r7, #8]
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3714      	adds	r7, #20
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d1c:	40023800 	.word	0x40023800
 8008d20:	00f42400 	.word	0x00f42400

08008d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d24:	b480      	push	{r7}
 8008d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d28:	4b03      	ldr	r3, [pc, #12]	; (8008d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	20000000 	.word	0x20000000

08008d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d40:	f7ff fff0 	bl	8008d24 <HAL_RCC_GetHCLKFreq>
 8008d44:	4601      	mov	r1, r0
 8008d46:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	0a9b      	lsrs	r3, r3, #10
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	4a03      	ldr	r2, [pc, #12]	; (8008d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d52:	5cd3      	ldrb	r3, [r2, r3]
 8008d54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	40023800 	.word	0x40023800
 8008d60:	08017d38 	.word	0x08017d38

08008d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d68:	f7ff ffdc 	bl	8008d24 <HAL_RCC_GetHCLKFreq>
 8008d6c:	4601      	mov	r1, r0
 8008d6e:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	0b5b      	lsrs	r3, r3, #13
 8008d74:	f003 0307 	and.w	r3, r3, #7
 8008d78:	4a03      	ldr	r2, [pc, #12]	; (8008d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d7a:	5cd3      	ldrb	r3, [r2, r3]
 8008d7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40023800 	.word	0x40023800
 8008d88:	08017d38 	.word	0x08017d38

08008d8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008d94:	2300      	movs	r3, #0
 8008d96:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008da0:	2300      	movs	r3, #0
 8008da2:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00a      	beq.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008db4:	4b66      	ldr	r3, [pc, #408]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008db6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008dba:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dc2:	4963      	ldr	r1, [pc, #396]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008dd6:	4b5e      	ldr	r3, [pc, #376]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ddc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	495a      	ldr	r1, [pc, #360]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008de6:	4313      	orrs	r3, r2
 8008de8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d105      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d075      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008e10:	4b50      	ldr	r3, [pc, #320]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e16:	f7fd fb1b 	bl	8006450 <HAL_GetTick>
 8008e1a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e1c:	e008      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008e1e:	f7fd fb17 	bl	8006450 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e1dc      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008e30:	4b47      	ldr	r3, [pc, #284]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d1f0      	bne.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0301 	and.w	r3, r3, #1
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d009      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	019a      	lsls	r2, r3, #6
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	071b      	lsls	r3, r3, #28
 8008e54:	493e      	ldr	r1, [pc, #248]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0302 	and.w	r3, r3, #2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01f      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008e68:	4b39      	ldr	r3, [pc, #228]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e6e:	0f1b      	lsrs	r3, r3, #28
 8008e70:	f003 0307 	and.w	r3, r3, #7
 8008e74:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	019a      	lsls	r2, r3, #6
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	061b      	lsls	r3, r3, #24
 8008e82:	431a      	orrs	r2, r3
 8008e84:	69bb      	ldr	r3, [r7, #24]
 8008e86:	071b      	lsls	r3, r3, #28
 8008e88:	4931      	ldr	r1, [pc, #196]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008e90:	4b2f      	ldr	r3, [pc, #188]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e96:	f023 021f 	bic.w	r2, r3, #31
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	492b      	ldr	r1, [pc, #172]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00d      	beq.n	8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	019a      	lsls	r2, r3, #6
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	061b      	lsls	r3, r3, #24
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	071b      	lsls	r3, r3, #28
 8008ec8:	4921      	ldr	r1, [pc, #132]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008ed0:	4b20      	ldr	r3, [pc, #128]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008ed6:	f7fd fabb 	bl	8006450 <HAL_GetTick>
 8008eda:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008ede:	f7fd fab7 	bl	8006450 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	69fb      	ldr	r3, [r7, #28]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e17c      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008ef0:	4b17      	ldr	r3, [pc, #92]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d112      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d10c      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f000 80ce 	beq.w	80090be <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008f26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f2a:	f040 80c8 	bne.w	80090be <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008f2e:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f34:	f7fd fa8c 	bl	8006450 <HAL_GetTick>
 8008f38:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008f3a:	e00f      	b.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008f3c:	f7fd fa88 	bl	8006450 <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b02      	cmp	r3, #2
 8008f48:	d908      	bls.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e14d      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008f4e:	bf00      	nop
 8008f50:	40023800 	.word	0x40023800
 8008f54:	42470068 	.word	0x42470068
 8008f58:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008f5c:	4ba5      	ldr	r3, [pc, #660]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f68:	d0e8      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0304 	and.w	r3, r3, #4
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d02e      	beq.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008f76:	4b9f      	ldr	r3, [pc, #636]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f7c:	0c1b      	lsrs	r3, r3, #16
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	3301      	adds	r3, #1
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008f88:	4b9a      	ldr	r3, [pc, #616]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	0f1b      	lsrs	r3, r3, #28
 8008f90:	f003 0307 	and.w	r3, r3, #7
 8008f94:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	019a      	lsls	r2, r3, #6
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	085b      	lsrs	r3, r3, #1
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	041b      	lsls	r3, r3, #16
 8008fa4:	431a      	orrs	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	061b      	lsls	r3, r3, #24
 8008fac:	431a      	orrs	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	071b      	lsls	r3, r3, #28
 8008fb2:	4990      	ldr	r1, [pc, #576]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008fba:	4b8e      	ldr	r3, [pc, #568]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc8:	3b01      	subs	r3, #1
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	4989      	ldr	r1, [pc, #548]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0308 	and.w	r3, r3, #8
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d02c      	beq.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008fe0:	4b84      	ldr	r3, [pc, #528]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fe6:	0c1b      	lsrs	r3, r3, #16
 8008fe8:	f003 0303 	and.w	r3, r3, #3
 8008fec:	3301      	adds	r3, #1
 8008fee:	005b      	lsls	r3, r3, #1
 8008ff0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ff2:	4b80      	ldr	r3, [pc, #512]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	0e1b      	lsrs	r3, r3, #24
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	019a      	lsls	r2, r3, #6
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	085b      	lsrs	r3, r3, #1
 800900a:	3b01      	subs	r3, #1
 800900c:	041b      	lsls	r3, r3, #16
 800900e:	431a      	orrs	r2, r3
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	061b      	lsls	r3, r3, #24
 8009014:	431a      	orrs	r2, r3
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	69db      	ldr	r3, [r3, #28]
 800901a:	071b      	lsls	r3, r3, #28
 800901c:	4975      	ldr	r1, [pc, #468]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800901e:	4313      	orrs	r3, r2
 8009020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009024:	4b73      	ldr	r3, [pc, #460]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800902a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	4970      	ldr	r1, [pc, #448]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009034:	4313      	orrs	r3, r2
 8009036:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b00      	cmp	r3, #0
 8009044:	d024      	beq.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800904a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800904e:	d11f      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009050:	4b68      	ldr	r3, [pc, #416]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009056:	0e1b      	lsrs	r3, r3, #24
 8009058:	f003 030f 	and.w	r3, r3, #15
 800905c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800905e:	4b65      	ldr	r3, [pc, #404]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009064:	0f1b      	lsrs	r3, r3, #28
 8009066:	f003 0307 	and.w	r3, r3, #7
 800906a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	019a      	lsls	r2, r3, #6
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	085b      	lsrs	r3, r3, #1
 8009078:	3b01      	subs	r3, #1
 800907a:	041b      	lsls	r3, r3, #16
 800907c:	431a      	orrs	r2, r3
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	061b      	lsls	r3, r3, #24
 8009082:	431a      	orrs	r2, r3
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	071b      	lsls	r3, r3, #28
 8009088:	495a      	ldr	r1, [pc, #360]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800908a:	4313      	orrs	r3, r2
 800908c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009090:	4b59      	ldr	r3, [pc, #356]	; (80091f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8009092:	2201      	movs	r2, #1
 8009094:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009096:	f7fd f9db 	bl	8006450 <HAL_GetTick>
 800909a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800909c:	e008      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800909e:	f7fd f9d7 	bl	8006450 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d901      	bls.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e09c      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80090b0:	4b50      	ldr	r3, [pc, #320]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090bc:	d1ef      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8083 	beq.w	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80090cc:	2300      	movs	r3, #0
 80090ce:	60bb      	str	r3, [r7, #8]
 80090d0:	4b48      	ldr	r3, [pc, #288]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	4a47      	ldr	r2, [pc, #284]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090da:	6413      	str	r3, [r2, #64]	; 0x40
 80090dc:	4b45      	ldr	r3, [pc, #276]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090e4:	60bb      	str	r3, [r7, #8]
 80090e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80090e8:	4b44      	ldr	r3, [pc, #272]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a43      	ldr	r2, [pc, #268]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80090ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090f4:	f7fd f9ac 	bl	8006450 <HAL_GetTick>
 80090f8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80090fa:	e008      	b.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090fc:	f7fd f9a8 	bl	8006450 <HAL_GetTick>
 8009100:	4602      	mov	r2, r0
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	2b02      	cmp	r3, #2
 8009108:	d901      	bls.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800910a:	2303      	movs	r3, #3
 800910c:	e06d      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800910e:	4b3b      	ldr	r3, [pc, #236]	; (80091fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009116:	2b00      	cmp	r3, #0
 8009118:	d0f0      	beq.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800911a:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800911c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009122:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d02f      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	429a      	cmp	r2, r3
 8009136:	d028      	beq.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009138:	4b2e      	ldr	r3, [pc, #184]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800913a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800913c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009140:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009142:	4b2f      	ldr	r3, [pc, #188]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009144:	2201      	movs	r2, #1
 8009146:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009148:	4b2d      	ldr	r3, [pc, #180]	; (8009200 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800914e:	4a29      	ldr	r2, [pc, #164]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009154:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	f003 0301 	and.w	r3, r3, #1
 800915c:	2b01      	cmp	r3, #1
 800915e:	d114      	bne.n	800918a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009160:	f7fd f976 	bl	8006450 <HAL_GetTick>
 8009164:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009166:	e00a      	b.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009168:	f7fd f972 	bl	8006450 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	f241 3288 	movw	r2, #5000	; 0x1388
 8009176:	4293      	cmp	r3, r2
 8009178:	d901      	bls.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800917a:	2303      	movs	r3, #3
 800917c:	e035      	b.n	80091ea <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800917e:	4b1d      	ldr	r3, [pc, #116]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0ee      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009196:	d10d      	bne.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8009198:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80091a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ac:	4911      	ldr	r1, [pc, #68]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	608b      	str	r3, [r1, #8]
 80091b2:	e005      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 80091b4:	4b0f      	ldr	r3, [pc, #60]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	4a0e      	ldr	r2, [pc, #56]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80091be:	6093      	str	r3, [r2, #8]
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80091cc:	4909      	ldr	r1, [pc, #36]	; (80091f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80091ce:	4313      	orrs	r3, r2
 80091d0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 0310 	and.w	r3, r3, #16
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d004      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80091e4:	4b07      	ldr	r3, [pc, #28]	; (8009204 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80091e6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	3720      	adds	r7, #32
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	40023800 	.word	0x40023800
 80091f8:	42470070 	.word	0x42470070
 80091fc:	40007000 	.word	0x40007000
 8009200:	42470e40 	.word	0x42470e40
 8009204:	424711e0 	.word	0x424711e0

08009208 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b086      	sub	sp, #24
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d075      	beq.n	800930c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009220:	4ba2      	ldr	r3, [pc, #648]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	f003 030c 	and.w	r3, r3, #12
 8009228:	2b04      	cmp	r3, #4
 800922a:	d00c      	beq.n	8009246 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800922c:	4b9f      	ldr	r3, [pc, #636]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009234:	2b08      	cmp	r3, #8
 8009236:	d112      	bne.n	800925e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009238:	4b9c      	ldr	r3, [pc, #624]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009240:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009244:	d10b      	bne.n	800925e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009246:	4b99      	ldr	r3, [pc, #612]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d05b      	beq.n	800930a <HAL_RCC_OscConfig+0x102>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d157      	bne.n	800930a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e20b      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009266:	d106      	bne.n	8009276 <HAL_RCC_OscConfig+0x6e>
 8009268:	4b90      	ldr	r3, [pc, #576]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a8f      	ldr	r2, [pc, #572]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800926e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	e01d      	b.n	80092b2 <HAL_RCC_OscConfig+0xaa>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800927e:	d10c      	bne.n	800929a <HAL_RCC_OscConfig+0x92>
 8009280:	4b8a      	ldr	r3, [pc, #552]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a89      	ldr	r2, [pc, #548]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009286:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	4b87      	ldr	r3, [pc, #540]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a86      	ldr	r2, [pc, #536]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009292:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	e00b      	b.n	80092b2 <HAL_RCC_OscConfig+0xaa>
 800929a:	4b84      	ldr	r3, [pc, #528]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a83      	ldr	r2, [pc, #524]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80092a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092a4:	6013      	str	r3, [r2, #0]
 80092a6:	4b81      	ldr	r3, [pc, #516]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a80      	ldr	r2, [pc, #512]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80092ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d013      	beq.n	80092e2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ba:	f7fd f8c9 	bl	8006450 <HAL_GetTick>
 80092be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092c0:	e008      	b.n	80092d4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092c2:	f7fd f8c5 	bl	8006450 <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	2b64      	cmp	r3, #100	; 0x64
 80092ce:	d901      	bls.n	80092d4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e1d0      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092d4:	4b75      	ldr	r3, [pc, #468]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0f0      	beq.n	80092c2 <HAL_RCC_OscConfig+0xba>
 80092e0:	e014      	b.n	800930c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e2:	f7fd f8b5 	bl	8006450 <HAL_GetTick>
 80092e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092e8:	e008      	b.n	80092fc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80092ea:	f7fd f8b1 	bl	8006450 <HAL_GetTick>
 80092ee:	4602      	mov	r2, r0
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	1ad3      	subs	r3, r2, r3
 80092f4:	2b64      	cmp	r3, #100	; 0x64
 80092f6:	d901      	bls.n	80092fc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e1bc      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80092fc:	4b6b      	ldr	r3, [pc, #428]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1f0      	bne.n	80092ea <HAL_RCC_OscConfig+0xe2>
 8009308:	e000      	b.n	800930c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800930a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d063      	beq.n	80093e0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009318:	4b64      	ldr	r3, [pc, #400]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 030c 	and.w	r3, r3, #12
 8009320:	2b00      	cmp	r3, #0
 8009322:	d00b      	beq.n	800933c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009324:	4b61      	ldr	r3, [pc, #388]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800932c:	2b08      	cmp	r3, #8
 800932e:	d11c      	bne.n	800936a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009330:	4b5e      	ldr	r3, [pc, #376]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009338:	2b00      	cmp	r3, #0
 800933a:	d116      	bne.n	800936a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800933c:	4b5b      	ldr	r3, [pc, #364]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d005      	beq.n	8009354 <HAL_RCC_OscConfig+0x14c>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d001      	beq.n	8009354 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e190      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009354:	4b55      	ldr	r3, [pc, #340]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	691b      	ldr	r3, [r3, #16]
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	4952      	ldr	r1, [pc, #328]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009364:	4313      	orrs	r3, r2
 8009366:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009368:	e03a      	b.n	80093e0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d020      	beq.n	80093b4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009372:	4b4f      	ldr	r3, [pc, #316]	; (80094b0 <HAL_RCC_OscConfig+0x2a8>)
 8009374:	2201      	movs	r2, #1
 8009376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009378:	f7fd f86a 	bl	8006450 <HAL_GetTick>
 800937c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800937e:	e008      	b.n	8009392 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009380:	f7fd f866 	bl	8006450 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b02      	cmp	r3, #2
 800938c:	d901      	bls.n	8009392 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e171      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009392:	4b46      	ldr	r3, [pc, #280]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0302 	and.w	r3, r3, #2
 800939a:	2b00      	cmp	r3, #0
 800939c:	d0f0      	beq.n	8009380 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800939e:	4b43      	ldr	r3, [pc, #268]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	00db      	lsls	r3, r3, #3
 80093ac:	493f      	ldr	r1, [pc, #252]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80093ae:	4313      	orrs	r3, r2
 80093b0:	600b      	str	r3, [r1, #0]
 80093b2:	e015      	b.n	80093e0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80093b4:	4b3e      	ldr	r3, [pc, #248]	; (80094b0 <HAL_RCC_OscConfig+0x2a8>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093ba:	f7fd f849 	bl	8006450 <HAL_GetTick>
 80093be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093c0:	e008      	b.n	80093d4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093c2:	f7fd f845 	bl	8006450 <HAL_GetTick>
 80093c6:	4602      	mov	r2, r0
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	1ad3      	subs	r3, r2, r3
 80093cc:	2b02      	cmp	r3, #2
 80093ce:	d901      	bls.n	80093d4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80093d0:	2303      	movs	r3, #3
 80093d2:	e150      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80093d4:	4b35      	ldr	r3, [pc, #212]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1f0      	bne.n	80093c2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f003 0308 	and.w	r3, r3, #8
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d030      	beq.n	800944e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	695b      	ldr	r3, [r3, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d016      	beq.n	8009422 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80093f4:	4b2f      	ldr	r3, [pc, #188]	; (80094b4 <HAL_RCC_OscConfig+0x2ac>)
 80093f6:	2201      	movs	r2, #1
 80093f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093fa:	f7fd f829 	bl	8006450 <HAL_GetTick>
 80093fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009400:	e008      	b.n	8009414 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009402:	f7fd f825 	bl	8006450 <HAL_GetTick>
 8009406:	4602      	mov	r2, r0
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	1ad3      	subs	r3, r2, r3
 800940c:	2b02      	cmp	r3, #2
 800940e:	d901      	bls.n	8009414 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8009410:	2303      	movs	r3, #3
 8009412:	e130      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009414:	4b25      	ldr	r3, [pc, #148]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009418:	f003 0302 	and.w	r3, r3, #2
 800941c:	2b00      	cmp	r3, #0
 800941e:	d0f0      	beq.n	8009402 <HAL_RCC_OscConfig+0x1fa>
 8009420:	e015      	b.n	800944e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <HAL_RCC_OscConfig+0x2ac>)
 8009424:	2200      	movs	r2, #0
 8009426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009428:	f7fd f812 	bl	8006450 <HAL_GetTick>
 800942c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800942e:	e008      	b.n	8009442 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009430:	f7fd f80e 	bl	8006450 <HAL_GetTick>
 8009434:	4602      	mov	r2, r0
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	2b02      	cmp	r3, #2
 800943c:	d901      	bls.n	8009442 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800943e:	2303      	movs	r3, #3
 8009440:	e119      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009442:	4b1a      	ldr	r3, [pc, #104]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1f0      	bne.n	8009430 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f003 0304 	and.w	r3, r3, #4
 8009456:	2b00      	cmp	r3, #0
 8009458:	f000 809f 	beq.w	800959a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800945c:	2300      	movs	r3, #0
 800945e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009460:	4b12      	ldr	r3, [pc, #72]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10f      	bne.n	800948c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009474:	4a0d      	ldr	r2, [pc, #52]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 8009476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947a:	6413      	str	r3, [r2, #64]	; 0x40
 800947c:	4b0b      	ldr	r3, [pc, #44]	; (80094ac <HAL_RCC_OscConfig+0x2a4>)
 800947e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009484:	60fb      	str	r3, [r7, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009488:	2301      	movs	r3, #1
 800948a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800948c:	4b0a      	ldr	r3, [pc, #40]	; (80094b8 <HAL_RCC_OscConfig+0x2b0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009494:	2b00      	cmp	r3, #0
 8009496:	d120      	bne.n	80094da <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <HAL_RCC_OscConfig+0x2b0>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a06      	ldr	r2, [pc, #24]	; (80094b8 <HAL_RCC_OscConfig+0x2b0>)
 800949e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80094a4:	f7fc ffd4 	bl	8006450 <HAL_GetTick>
 80094a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094aa:	e010      	b.n	80094ce <HAL_RCC_OscConfig+0x2c6>
 80094ac:	40023800 	.word	0x40023800
 80094b0:	42470000 	.word	0x42470000
 80094b4:	42470e80 	.word	0x42470e80
 80094b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80094bc:	f7fc ffc8 	bl	8006450 <HAL_GetTick>
 80094c0:	4602      	mov	r2, r0
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	1ad3      	subs	r3, r2, r3
 80094c6:	2b02      	cmp	r3, #2
 80094c8:	d901      	bls.n	80094ce <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e0d3      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80094ce:	4b6c      	ldr	r3, [pc, #432]	; (8009680 <HAL_RCC_OscConfig+0x478>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0f0      	beq.n	80094bc <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d106      	bne.n	80094f0 <HAL_RCC_OscConfig+0x2e8>
 80094e2:	4b68      	ldr	r3, [pc, #416]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	4a67      	ldr	r2, [pc, #412]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 80094e8:	f043 0301 	orr.w	r3, r3, #1
 80094ec:	6713      	str	r3, [r2, #112]	; 0x70
 80094ee:	e01c      	b.n	800952a <HAL_RCC_OscConfig+0x322>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	2b05      	cmp	r3, #5
 80094f6:	d10c      	bne.n	8009512 <HAL_RCC_OscConfig+0x30a>
 80094f8:	4b62      	ldr	r3, [pc, #392]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 80094fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fc:	4a61      	ldr	r2, [pc, #388]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 80094fe:	f043 0304 	orr.w	r3, r3, #4
 8009502:	6713      	str	r3, [r2, #112]	; 0x70
 8009504:	4b5f      	ldr	r3, [pc, #380]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009508:	4a5e      	ldr	r2, [pc, #376]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 800950a:	f043 0301 	orr.w	r3, r3, #1
 800950e:	6713      	str	r3, [r2, #112]	; 0x70
 8009510:	e00b      	b.n	800952a <HAL_RCC_OscConfig+0x322>
 8009512:	4b5c      	ldr	r3, [pc, #368]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009516:	4a5b      	ldr	r2, [pc, #364]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009518:	f023 0301 	bic.w	r3, r3, #1
 800951c:	6713      	str	r3, [r2, #112]	; 0x70
 800951e:	4b59      	ldr	r3, [pc, #356]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009522:	4a58      	ldr	r2, [pc, #352]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009524:	f023 0304 	bic.w	r3, r3, #4
 8009528:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d015      	beq.n	800955e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009532:	f7fc ff8d 	bl	8006450 <HAL_GetTick>
 8009536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009538:	e00a      	b.n	8009550 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800953a:	f7fc ff89 	bl	8006450 <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	f241 3288 	movw	r2, #5000	; 0x1388
 8009548:	4293      	cmp	r3, r2
 800954a:	d901      	bls.n	8009550 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800954c:	2303      	movs	r3, #3
 800954e:	e092      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009550:	4b4c      	ldr	r3, [pc, #304]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d0ee      	beq.n	800953a <HAL_RCC_OscConfig+0x332>
 800955c:	e014      	b.n	8009588 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800955e:	f7fc ff77 	bl	8006450 <HAL_GetTick>
 8009562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009564:	e00a      	b.n	800957c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009566:	f7fc ff73 	bl	8006450 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	f241 3288 	movw	r2, #5000	; 0x1388
 8009574:	4293      	cmp	r3, r2
 8009576:	d901      	bls.n	800957c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8009578:	2303      	movs	r3, #3
 800957a:	e07c      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800957c:	4b41      	ldr	r3, [pc, #260]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 800957e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009580:	f003 0302 	and.w	r3, r3, #2
 8009584:	2b00      	cmp	r3, #0
 8009586:	d1ee      	bne.n	8009566 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d105      	bne.n	800959a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800958e:	4b3d      	ldr	r3, [pc, #244]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	4a3c      	ldr	r2, [pc, #240]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009598:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	699b      	ldr	r3, [r3, #24]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d068      	beq.n	8009674 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80095a2:	4b38      	ldr	r3, [pc, #224]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f003 030c 	and.w	r3, r3, #12
 80095aa:	2b08      	cmp	r3, #8
 80095ac:	d060      	beq.n	8009670 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d145      	bne.n	8009642 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095b6:	4b34      	ldr	r3, [pc, #208]	; (8009688 <HAL_RCC_OscConfig+0x480>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095bc:	f7fc ff48 	bl	8006450 <HAL_GetTick>
 80095c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095c2:	e008      	b.n	80095d6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095c4:	f7fc ff44 	bl	8006450 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	2b02      	cmp	r3, #2
 80095d0:	d901      	bls.n	80095d6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e04f      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095d6:	4b2b      	ldr	r3, [pc, #172]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f0      	bne.n	80095c4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	69da      	ldr	r2, [r3, #28]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	431a      	orrs	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f0:	019b      	lsls	r3, r3, #6
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f8:	085b      	lsrs	r3, r3, #1
 80095fa:	3b01      	subs	r3, #1
 80095fc:	041b      	lsls	r3, r3, #16
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009604:	061b      	lsls	r3, r3, #24
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800960c:	071b      	lsls	r3, r3, #28
 800960e:	491d      	ldr	r1, [pc, #116]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009610:	4313      	orrs	r3, r2
 8009612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009614:	4b1c      	ldr	r3, [pc, #112]	; (8009688 <HAL_RCC_OscConfig+0x480>)
 8009616:	2201      	movs	r2, #1
 8009618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800961a:	f7fc ff19 	bl	8006450 <HAL_GetTick>
 800961e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009620:	e008      	b.n	8009634 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009622:	f7fc ff15 	bl	8006450 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	2b02      	cmp	r3, #2
 800962e:	d901      	bls.n	8009634 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e020      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009634:	4b13      	ldr	r3, [pc, #76]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800963c:	2b00      	cmp	r3, #0
 800963e:	d0f0      	beq.n	8009622 <HAL_RCC_OscConfig+0x41a>
 8009640:	e018      	b.n	8009674 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009642:	4b11      	ldr	r3, [pc, #68]	; (8009688 <HAL_RCC_OscConfig+0x480>)
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009648:	f7fc ff02 	bl	8006450 <HAL_GetTick>
 800964c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800964e:	e008      	b.n	8009662 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009650:	f7fc fefe 	bl	8006450 <HAL_GetTick>
 8009654:	4602      	mov	r2, r0
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	2b02      	cmp	r3, #2
 800965c:	d901      	bls.n	8009662 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e009      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009662:	4b08      	ldr	r3, [pc, #32]	; (8009684 <HAL_RCC_OscConfig+0x47c>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1f0      	bne.n	8009650 <HAL_RCC_OscConfig+0x448>
 800966e:	e001      	b.n	8009674 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e000      	b.n	8009676 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3718      	adds	r7, #24
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	40007000 	.word	0x40007000
 8009684:	40023800 	.word	0x40023800
 8009688:	42470060 	.word	0x42470060

0800968c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b082      	sub	sp, #8
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e022      	b.n	80096e4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7fb fc41 	bl	8004f38 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2203      	movs	r2, #3
 80096ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f814 	bl	80096ec <HAL_SD_InitCard>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e00a      	b.n	80096e4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3708      	adds	r7, #8
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}

080096ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80096ec:	b5b0      	push	{r4, r5, r7, lr}
 80096ee:	b08e      	sub	sp, #56	; 0x38
 80096f0:	af04      	add	r7, sp, #16
 80096f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80096f4:	2300      	movs	r3, #0
 80096f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80096f8:	2300      	movs	r3, #0
 80096fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80096fc:	2300      	movs	r3, #0
 80096fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009700:	2300      	movs	r3, #0
 8009702:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8009704:	2300      	movs	r3, #0
 8009706:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009708:	2376      	movs	r3, #118	; 0x76
 800970a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681d      	ldr	r5, [r3, #0]
 8009710:	466c      	mov	r4, sp
 8009712:	f107 0314 	add.w	r3, r7, #20
 8009716:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800971a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800971e:	f107 0308 	add.w	r3, r7, #8
 8009722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009724:	4628      	mov	r0, r5
 8009726:	f003 fa87 	bl	800cc38 <SDIO_Init>
 800972a:	4603      	mov	r3, r0
 800972c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e031      	b.n	80097a0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800973c:	4b1a      	ldr	r3, [pc, #104]	; (80097a8 <HAL_SD_InitCard+0xbc>)
 800973e:	2200      	movs	r2, #0
 8009740:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4618      	mov	r0, r3
 8009748:	f003 fabf 	bl	800ccca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800974c:	4b16      	ldr	r3, [pc, #88]	; (80097a8 <HAL_SD_InitCard+0xbc>)
 800974e:	2201      	movs	r2, #1
 8009750:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 ffc6 	bl	800a6e4 <SD_PowerON>
 8009758:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00b      	beq.n	8009778 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	431a      	orrs	r2, r3
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e013      	b.n	80097a0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f000 fee5 	bl	800a548 <SD_InitCard>
 800977e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00b      	beq.n	800979e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009792:	6a3b      	ldr	r3, [r7, #32]
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	e000      	b.n	80097a0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800979e:	2300      	movs	r3, #0
}
 80097a0:	4618      	mov	r0, r3
 80097a2:	3728      	adds	r7, #40	; 0x28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bdb0      	pop	{r4, r5, r7, pc}
 80097a8:	422580a0 	.word	0x422580a0

080097ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08c      	sub	sp, #48	; 0x30
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d107      	bne.n	80097d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e0c7      	b.n	8009964 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	f040 80c0 	bne.w	8009962 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80097e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	441a      	add	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d907      	bls.n	8009806 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e0ae      	b.n	8009964 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2203      	movs	r2, #3
 800980a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2200      	movs	r2, #0
 8009814:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009824:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982a:	4a50      	ldr	r2, [pc, #320]	; (800996c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800982c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	4a4f      	ldr	r2, [pc, #316]	; (8009970 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009834:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800983a:	2200      	movs	r2, #0
 800983c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3380      	adds	r3, #128	; 0x80
 8009848:	4619      	mov	r1, r3
 800984a:	68ba      	ldr	r2, [r7, #8]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	025b      	lsls	r3, r3, #9
 8009850:	089b      	lsrs	r3, r3, #2
 8009852:	f7fd fbef 	bl	8007034 <HAL_DMA_Start_IT>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d017      	beq.n	800988c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800986a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a40      	ldr	r2, [pc, #256]	; (8009974 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009878:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009888:	2301      	movs	r3, #1
 800988a:	e06b      	b.n	8009964 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800988c:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009896:	2b01      	cmp	r3, #1
 8009898:	d002      	beq.n	80098a0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800989a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800989c:	025b      	lsls	r3, r3, #9
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098a8:	4618      	mov	r0, r3
 80098aa:	f003 faa1 	bl	800cdf0 <SDMMC_CmdBlockLength>
 80098ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80098b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00f      	beq.n	80098d6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a2e      	ldr	r2, [pc, #184]	; (8009974 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80098bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	431a      	orrs	r2, r3
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2201      	movs	r2, #1
 80098ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80098d2:	2301      	movs	r3, #1
 80098d4:	e046      	b.n	8009964 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80098d6:	f04f 33ff 	mov.w	r3, #4294967295
 80098da:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	025b      	lsls	r3, r3, #9
 80098e0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80098e2:	2390      	movs	r3, #144	; 0x90
 80098e4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80098e6:	2302      	movs	r3, #2
 80098e8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80098ea:	2300      	movs	r3, #0
 80098ec:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80098ee:	2301      	movs	r3, #1
 80098f0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f107 0210 	add.w	r2, r7, #16
 80098fa:	4611      	mov	r1, r2
 80098fc:	4618      	mov	r0, r3
 80098fe:	f003 fa4b 	bl	800cd98 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d90a      	bls.n	800991e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2282      	movs	r2, #130	; 0x82
 800990c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009914:	4618      	mov	r0, r3
 8009916:	f003 faaf 	bl	800ce78 <SDMMC_CmdReadMultiBlock>
 800991a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800991c:	e009      	b.n	8009932 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2281      	movs	r2, #129	; 0x81
 8009922:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800992a:	4618      	mov	r0, r3
 800992c:	f003 fa82 	bl	800ce34 <SDMMC_CmdReadSingleBlock>
 8009930:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009934:	2b00      	cmp	r3, #0
 8009936:	d012      	beq.n	800995e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a0d      	ldr	r2, [pc, #52]	; (8009974 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800993e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009946:	431a      	orrs	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e002      	b.n	8009964 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	e000      	b.n	8009964 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009962:	2302      	movs	r3, #2
  }
}
 8009964:	4618      	mov	r0, r3
 8009966:	3730      	adds	r7, #48	; 0x30
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	0800a357 	.word	0x0800a357
 8009970:	0800a3c9 	.word	0x0800a3c9
 8009974:	004005ff 	.word	0x004005ff
 8009978:	4225858c 	.word	0x4225858c

0800997c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08c      	sub	sp, #48	; 0x30
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800998e:	68bb      	ldr	r3, [r7, #8]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d107      	bne.n	80099a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e0ca      	b.n	8009b3a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	f040 80c3 	bne.w	8009b38 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80099b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	441a      	add	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d907      	bls.n	80099d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e0b1      	b.n	8009b3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2203      	movs	r2, #3
 80099da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f042 021a 	orr.w	r2, r2, #26
 80099f4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099fa:	4a52      	ldr	r2, [pc, #328]	; (8009b44 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80099fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a02:	4a51      	ldr	r2, [pc, #324]	; (8009b48 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8009a04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d002      	beq.n	8009a1c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8009a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a18:	025b      	lsls	r3, r3, #9
 8009a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a24:	4618      	mov	r0, r3
 8009a26:	f003 f9e3 	bl	800cdf0 <SDMMC_CmdBlockLength>
 8009a2a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00f      	beq.n	8009a52 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a45      	ldr	r2, [pc, #276]	; (8009b4c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009a38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a40:	431a      	orrs	r2, r3
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2201      	movs	r2, #1
 8009a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	e073      	b.n	8009b3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b01      	cmp	r3, #1
 8009a56:	d90a      	bls.n	8009a6e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	22a0      	movs	r2, #160	; 0xa0
 8009a5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a64:	4618      	mov	r0, r3
 8009a66:	f003 fa4b 	bl	800cf00 <SDMMC_CmdWriteMultiBlock>
 8009a6a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009a6c:	e009      	b.n	8009a82 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2290      	movs	r2, #144	; 0x90
 8009a72:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f003 fa1e 	bl	800cebc <SDMMC_CmdWriteSingleBlock>
 8009a80:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d012      	beq.n	8009aae <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a2f      	ldr	r2, [pc, #188]	; (8009b4c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009a8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	431a      	orrs	r2, r3
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e045      	b.n	8009b3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009aae:	4b28      	ldr	r3, [pc, #160]	; (8009b50 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009ab0:	2201      	movs	r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009ab8:	68b9      	ldr	r1, [r7, #8]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3380      	adds	r3, #128	; 0x80
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	025b      	lsls	r3, r3, #9
 8009ac6:	089b      	lsrs	r3, r3, #2
 8009ac8:	f7fd fab4 	bl	8007034 <HAL_DMA_Start_IT>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d01a      	beq.n	8009b08 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 021a 	bic.w	r2, r2, #26
 8009ae0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a19      	ldr	r2, [pc, #100]	; (8009b4c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009ae8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2201      	movs	r2, #1
 8009afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2200      	movs	r2, #0
 8009b02:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	e018      	b.n	8009b3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009b08:	f04f 33ff 	mov.w	r3, #4294967295
 8009b0c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	025b      	lsls	r3, r3, #9
 8009b12:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009b14:	2390      	movs	r3, #144	; 0x90
 8009b16:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009b20:	2301      	movs	r3, #1
 8009b22:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f107 0210 	add.w	r2, r7, #16
 8009b2c:	4611      	mov	r1, r2
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f003 f932 	bl	800cd98 <SDIO_ConfigData>

      return HAL_OK;
 8009b34:	2300      	movs	r3, #0
 8009b36:	e000      	b.n	8009b3a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8009b38:	2302      	movs	r3, #2
  }
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3730      	adds	r7, #48	; 0x30
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	0800a32d 	.word	0x0800a32d
 8009b48:	0800a3c9 	.word	0x0800a3c9
 8009b4c:	004005ff 	.word	0x004005ff
 8009b50:	4225858c 	.word	0x4225858c

08009b54 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b60:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d008      	beq.n	8009b82 <HAL_SD_IRQHandler+0x2e>
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f003 0308 	and.w	r3, r3, #8
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d003      	beq.n	8009b82 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f000 ffc8 	bl	800ab10 <SD_Read_IT>
 8009b80:	e155      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 808f 	beq.w	8009cb0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b9a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	6812      	ldr	r2, [r2, #0]
 8009ba6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009baa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009bae:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f022 0201 	bic.w	r2, r2, #1
 8009bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d039      	beq.n	8009c3e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <HAL_SD_IRQHandler+0x8a>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f003 0320 	and.w	r3, r3, #32
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d011      	beq.n	8009c02 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4618      	mov	r0, r3
 8009be4:	f003 f9ae 	bl	800cf44 <SDMMC_CmdStopTransfer>
 8009be8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d008      	beq.n	8009c02 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	431a      	orrs	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f91f 	bl	8009e40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c0a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	f003 0301 	and.w	r3, r3, #1
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d104      	bne.n	8009c2e <HAL_SD_IRQHandler+0xda>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d003      	beq.n	8009c36 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f003 fe0c 	bl	800d84c <HAL_SD_RxCpltCallback>
 8009c34:	e0fb      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f003 fdfe 	bl	800d838 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009c3c:	e0f7      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f000 80f2 	beq.w	8009e2e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d011      	beq.n	8009c78 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f003 f973 	bl	800cf44 <SDMMC_CmdStopTransfer>
 8009c5e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d008      	beq.n	8009c78 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f8e4 	bl	8009e40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f040 80d5 	bne.w	8009e2e <HAL_SD_IRQHandler+0x2da>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	f040 80cf 	bne.w	8009e2e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f022 0208 	bic.w	r2, r2, #8
 8009c9e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f003 fdc5 	bl	800d838 <HAL_SD_TxCpltCallback>
}
 8009cae:	e0be      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d008      	beq.n	8009cd0 <HAL_SD_IRQHandler+0x17c>
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f003 0308 	and.w	r3, r3, #8
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d003      	beq.n	8009cd0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 ff72 	bl	800abb2 <SD_Write_IT>
 8009cce:	e0ae      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cd6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80a7 	beq.w	8009e2e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce6:	f003 0302 	and.w	r3, r3, #2
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d005      	beq.n	8009cfa <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf2:	f043 0202 	orr.w	r2, r3, #2
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	f003 0308 	and.w	r3, r3, #8
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d005      	beq.n	8009d14 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0c:	f043 0208 	orr.w	r2, r3, #8
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	f043 0220 	orr.w	r2, r3, #32
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d34:	f003 0310 	and.w	r3, r3, #16
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	f043 0210 	orr.w	r2, r3, #16
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d50:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009d60:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	4618      	mov	r0, r3
 8009d68:	f003 f8ec 	bl	800cf44 <SDMMC_CmdStopTransfer>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f003 0308 	and.w	r3, r3, #8
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	2201      	movs	r2, #1
 8009d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f855 	bl	8009e40 <HAL_SD_ErrorCallback>
}
 8009d96:	e04a      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d045      	beq.n	8009e2e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f003 0310 	and.w	r3, r3, #16
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <HAL_SD_IRQHandler+0x262>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d011      	beq.n	8009dda <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dba:	4a1f      	ldr	r2, [pc, #124]	; (8009e38 <HAL_SD_IRQHandler+0x2e4>)
 8009dbc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fd f98e 	bl	80070e4 <HAL_DMA_Abort_IT>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d02f      	beq.n	8009e2e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	f000 fb4a 	bl	800a46c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009dd8:	e029      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d104      	bne.n	8009dee <HAL_SD_IRQHandler+0x29a>
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0302 	and.w	r3, r3, #2
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d011      	beq.n	8009e12 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	4a12      	ldr	r2, [pc, #72]	; (8009e3c <HAL_SD_IRQHandler+0x2e8>)
 8009df4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7fd f972 	bl	80070e4 <HAL_DMA_Abort_IT>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d013      	beq.n	8009e2e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 fb65 	bl	800a4da <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009e10:	e00d      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f003 fcfc 	bl	800d824 <HAL_SD_AbortCallback>
}
 8009e2c:	e7ff      	b.n	8009e2e <HAL_SD_IRQHandler+0x2da>
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	0800a46d 	.word	0x0800a46d
 8009e3c:	0800a4db 	.word	0x0800a4db

08009e40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e62:	0f9b      	lsrs	r3, r3, #30
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e6e:	0e9b      	lsrs	r3, r3, #26
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	f003 030f 	and.w	r3, r3, #15
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e80:	0e1b      	lsrs	r3, r3, #24
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 0303 	and.w	r3, r3, #3
 8009e88:	b2da      	uxtb	r2, r3
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e92:	0c1b      	lsrs	r3, r3, #16
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e9e:	0a1b      	lsrs	r3, r3, #8
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eb4:	0d1b      	lsrs	r3, r3, #20
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ec0:	0c1b      	lsrs	r3, r3, #16
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	f003 030f 	and.w	r3, r3, #15
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ed2:	0bdb      	lsrs	r3, r3, #15
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 0301 	and.w	r3, r3, #1
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ee4:	0b9b      	lsrs	r3, r3, #14
 8009ee6:	b2db      	uxtb	r3, r3
 8009ee8:	f003 0301 	and.w	r3, r3, #1
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ef6:	0b5b      	lsrs	r3, r3, #13
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	f003 0301 	and.w	r3, r3, #1
 8009efe:	b2da      	uxtb	r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f08:	0b1b      	lsrs	r3, r3, #12
 8009f0a:	b2db      	uxtb	r3, r3
 8009f0c:	f003 0301 	and.w	r3, r3, #1
 8009f10:	b2da      	uxtb	r2, r3
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d163      	bne.n	8009fec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009f28:	009a      	lsls	r2, r3, #2
 8009f2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009f2e:	4013      	ands	r3, r2
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009f34:	0f92      	lsrs	r2, r2, #30
 8009f36:	431a      	orrs	r2, r3
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f40:	0edb      	lsrs	r3, r3, #27
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	f003 0307 	and.w	r3, r3, #7
 8009f48:	b2da      	uxtb	r2, r3
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f52:	0e1b      	lsrs	r3, r3, #24
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	f003 0307 	and.w	r3, r3, #7
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f64:	0d5b      	lsrs	r3, r3, #21
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f76:	0c9b      	lsrs	r3, r3, #18
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	f003 0307 	and.w	r3, r3, #7
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f88:	0bdb      	lsrs	r3, r3, #15
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	f003 0307 	and.w	r3, r3, #7
 8009f90:	b2da      	uxtb	r2, r3
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	1c5a      	adds	r2, r3, #1
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009fa0:	683b      	ldr	r3, [r7, #0]
 8009fa2:	7e1b      	ldrb	r3, [r3, #24]
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f003 0307 	and.w	r3, r3, #7
 8009faa:	3302      	adds	r3, #2
 8009fac:	2201      	movs	r2, #1
 8009fae:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009fb6:	fb02 f203 	mul.w	r2, r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	7a1b      	ldrb	r3, [r3, #8]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	f003 030f 	and.w	r3, r3, #15
 8009fc8:	2201      	movs	r2, #1
 8009fca:	409a      	lsls	r2, r3
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009fd8:	0a52      	lsrs	r2, r2, #9
 8009fda:	fb02 f203 	mul.w	r2, r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fe8:	661a      	str	r2, [r3, #96]	; 0x60
 8009fea:	e031      	b.n	800a050 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	d11d      	bne.n	800a030 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ff8:	041b      	lsls	r3, r3, #16
 8009ffa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a002:	0c1b      	lsrs	r3, r3, #16
 800a004:	431a      	orrs	r2, r3
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	691b      	ldr	r3, [r3, #16]
 800a00e:	3301      	adds	r3, #1
 800a010:	029a      	lsls	r2, r3, #10
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a024:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	661a      	str	r2, [r3, #96]	; 0x60
 800a02e:	e00f      	b.n	800a050 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a58      	ldr	r2, [pc, #352]	; (800a198 <HAL_SD_GetCardCSD+0x344>)
 800a036:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a03c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e09d      	b.n	800a18c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a054:	0b9b      	lsrs	r3, r3, #14
 800a056:	b2db      	uxtb	r3, r3
 800a058:	f003 0301 	and.w	r3, r3, #1
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a066:	09db      	lsrs	r3, r3, #7
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a06e:	b2da      	uxtb	r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a07e:	b2da      	uxtb	r2, r3
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a088:	0fdb      	lsrs	r3, r3, #31
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a094:	0f5b      	lsrs	r3, r3, #29
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	b2da      	uxtb	r2, r3
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a6:	0e9b      	lsrs	r3, r3, #26
 800a0a8:	b2db      	uxtb	r3, r3
 800a0aa:	f003 0307 	and.w	r3, r3, #7
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b8:	0d9b      	lsrs	r3, r3, #22
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f003 030f 	and.w	r3, r3, #15
 800a0c0:	b2da      	uxtb	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	0d5b      	lsrs	r3, r3, #21
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	f003 0301 	and.w	r3, r3, #1
 800a0d2:	b2da      	uxtb	r2, r3
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e6:	0c1b      	lsrs	r3, r3, #16
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f003 0301 	and.w	r3, r3, #1
 800a0ee:	b2da      	uxtb	r2, r3
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fa:	0bdb      	lsrs	r3, r3, #15
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	f003 0301 	and.w	r3, r3, #1
 800a102:	b2da      	uxtb	r2, r3
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a10e:	0b9b      	lsrs	r3, r3, #14
 800a110:	b2db      	uxtb	r3, r3
 800a112:	f003 0301 	and.w	r3, r3, #1
 800a116:	b2da      	uxtb	r2, r3
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a122:	0b5b      	lsrs	r3, r3, #13
 800a124:	b2db      	uxtb	r3, r3
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	b2da      	uxtb	r2, r3
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a136:	0b1b      	lsrs	r3, r3, #12
 800a138:	b2db      	uxtb	r3, r3
 800a13a:	f003 0301 	and.w	r3, r3, #1
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14a:	0a9b      	lsrs	r3, r3, #10
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	f003 0303 	and.w	r3, r3, #3
 800a152:	b2da      	uxtb	r2, r3
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15e:	0a1b      	lsrs	r3, r3, #8
 800a160:	b2db      	uxtb	r3, r3
 800a162:	f003 0303 	and.w	r3, r3, #3
 800a166:	b2da      	uxtb	r2, r3
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a172:	085b      	lsrs	r3, r3, #1
 800a174:	b2db      	uxtb	r3, r3
 800a176:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	2201      	movs	r2, #1
 800a186:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	004005ff 	.word	0x004005ff

0800a19c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
 800a1a4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a1f4:	b5b0      	push	{r4, r5, r7, lr}
 800a1f6:	b08e      	sub	sp, #56	; 0x38
 800a1f8:	af04      	add	r7, sp, #16
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2203      	movs	r2, #3
 800a202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d02e      	beq.n	800a26c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a214:	d106      	bne.n	800a224 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	639a      	str	r2, [r3, #56]	; 0x38
 800a222:	e029      	b.n	800a278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a22a:	d10a      	bne.n	800a242 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 fb0f 	bl	800a850 <SD_WideBus_Enable>
 800a232:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23a:	431a      	orrs	r2, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	639a      	str	r2, [r3, #56]	; 0x38
 800a240:	e01a      	b.n	800a278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f000 fb4c 	bl	800a8e6 <SD_WideBus_Disable>
 800a24e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	431a      	orrs	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	639a      	str	r2, [r3, #56]	; 0x38
 800a25c:	e00c      	b.n	800a278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a262:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	639a      	str	r2, [r3, #56]	; 0x38
 800a26a:	e005      	b.n	800a278 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a270:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d009      	beq.n	800a294 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a18      	ldr	r2, [pc, #96]	; (800a2e8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a286:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e024      	b.n	800a2de <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	68db      	ldr	r3, [r3, #12]
 800a2a4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	699b      	ldr	r3, [r3, #24]
 800a2b4:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681d      	ldr	r5, [r3, #0]
 800a2ba:	466c      	mov	r4, sp
 800a2bc:	f107 0318 	add.w	r3, r7, #24
 800a2c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a2c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a2c8:	f107 030c 	add.w	r3, r7, #12
 800a2cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f002 fcb2 	bl	800cc38 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3728      	adds	r7, #40	; 0x28
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	004005ff 	.word	0x004005ff

0800a2ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b086      	sub	sp, #24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a2f8:	f107 030c 	add.w	r3, r7, #12
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa7e 	bl	800a800 <SD_SendStatus>
 800a304:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	431a      	orrs	r2, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	0a5b      	lsrs	r3, r3, #9
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a322:	693b      	ldr	r3, [r7, #16]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3718      	adds	r7, #24
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a338:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a348:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a362:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a368:	2b82      	cmp	r3, #130	; 0x82
 800a36a:	d111      	bne.n	800a390 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4618      	mov	r0, r3
 800a372:	f002 fde7 	bl	800cf44 <SDMMC_CmdStopTransfer>
 800a376:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d008      	beq.n	800a390 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	431a      	orrs	r2, r3
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f7ff fd58 	bl	8009e40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f022 0208 	bic.w	r2, r2, #8
 800a39e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3a8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f003 fa47 	bl	800d84c <HAL_SD_RxCpltCallback>
#endif
}
 800a3be:	bf00      	nop
 800a3c0:	3710      	adds	r7, #16
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b086      	sub	sp, #24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7fd f830 	bl	800743c <HAL_DMA_GetError>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d03e      	beq.n	800a460 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3f0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a3f2:	693b      	ldr	r3, [r7, #16]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d002      	beq.n	800a3fe <SD_DMAError+0x36>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d12d      	bne.n	800a45a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a19      	ldr	r2, [pc, #100]	; (800a468 <SD_DMAError+0xa0>)
 800a404:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a414:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a41a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a422:	6978      	ldr	r0, [r7, #20]
 800a424:	f7ff ff62 	bl	800a2ec <HAL_SD_GetCardState>
 800a428:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b06      	cmp	r3, #6
 800a42e:	d002      	beq.n	800a436 <SD_DMAError+0x6e>
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b05      	cmp	r3, #5
 800a434:	d10a      	bne.n	800a44c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4618      	mov	r0, r3
 800a43c:	f002 fd82 	bl	800cf44 <SDMMC_CmdStopTransfer>
 800a440:	4602      	mov	r2, r0
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a446:	431a      	orrs	r2, r3
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	2200      	movs	r2, #0
 800a458:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a45a:	6978      	ldr	r0, [r7, #20]
 800a45c:	f7ff fcf0 	bl	8009e40 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a460:	bf00      	nop
 800a462:	3718      	adds	r7, #24
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}
 800a468:	004005ff 	.word	0x004005ff

0800a46c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a478:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f240 523a 	movw	r2, #1338	; 0x53a
 800a482:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f7ff ff31 	bl	800a2ec <HAL_SD_GetCardState>
 800a48a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b06      	cmp	r3, #6
 800a49e:	d002      	beq.n	800a4a6 <SD_DMATxAbort+0x3a>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	d10a      	bne.n	800a4bc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f002 fd4a 	bl	800cf44 <SDMMC_CmdStopTransfer>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d103      	bne.n	800a4cc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f003 f9ad 	bl	800d824 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a4ca:	e002      	b.n	800a4d2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a4cc:	68f8      	ldr	r0, [r7, #12]
 800a4ce:	f7ff fcb7 	bl	8009e40 <HAL_SD_ErrorCallback>
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f240 523a 	movw	r2, #1338	; 0x53a
 800a4f0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7ff fefa 	bl	800a2ec <HAL_SD_GetCardState>
 800a4f8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	2200      	movs	r2, #0
 800a506:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b06      	cmp	r3, #6
 800a50c:	d002      	beq.n	800a514 <SD_DMARxAbort+0x3a>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	2b05      	cmp	r3, #5
 800a512:	d10a      	bne.n	800a52a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4618      	mov	r0, r3
 800a51a:	f002 fd13 	bl	800cf44 <SDMMC_CmdStopTransfer>
 800a51e:	4602      	mov	r2, r0
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	431a      	orrs	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d103      	bne.n	800a53a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f003 f976 	bl	800d824 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a538:	e002      	b.n	800a540 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f7ff fc80 	bl	8009e40 <HAL_SD_ErrorCallback>
}
 800a540:	bf00      	nop
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a548:	b5b0      	push	{r4, r5, r7, lr}
 800a54a:	b094      	sub	sp, #80	; 0x50
 800a54c:	af04      	add	r7, sp, #16
 800a54e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a550:	2301      	movs	r3, #1
 800a552:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f002 fbc5 	bl	800cce8 <SDIO_GetPowerState>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d102      	bne.n	800a56a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a564:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a568:	e0b7      	b.n	800a6da <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a56e:	2b03      	cmp	r3, #3
 800a570:	d02f      	beq.n	800a5d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f002 fdee 	bl	800d158 <SDMMC_CmdSendCID>
 800a57c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d001      	beq.n	800a588 <SD_InitCard+0x40>
    {
      return errorstate;
 800a584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a586:	e0a8      	b.n	800a6da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2100      	movs	r1, #0
 800a58e:	4618      	mov	r0, r3
 800a590:	f002 fbef 	bl	800cd72 <SDIO_GetResponse>
 800a594:	4602      	mov	r2, r0
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2104      	movs	r1, #4
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f002 fbe6 	bl	800cd72 <SDIO_GetResponse>
 800a5a6:	4602      	mov	r2, r0
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	2108      	movs	r1, #8
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f002 fbdd 	bl	800cd72 <SDIO_GetResponse>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	210c      	movs	r1, #12
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f002 fbd4 	bl	800cd72 <SDIO_GetResponse>
 800a5ca:	4602      	mov	r2, r0
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	d00d      	beq.n	800a5f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f107 020e 	add.w	r2, r7, #14
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f002 fdf4 	bl	800d1d2 <SDMMC_CmdSetRelAdd>
 800a5ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <SD_InitCard+0xae>
    {
      return errorstate;
 800a5f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5f4:	e071      	b.n	800a6da <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d036      	beq.n	800a66c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a5fe:	89fb      	ldrh	r3, [r7, #14]
 800a600:	461a      	mov	r2, r3
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a60e:	041b      	lsls	r3, r3, #16
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f002 fdbe 	bl	800d194 <SDMMC_CmdSendCSD>
 800a618:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a61a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a622:	e05a      	b.n	800a6da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f002 fba1 	bl	800cd72 <SDIO_GetResponse>
 800a630:	4602      	mov	r2, r0
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2104      	movs	r1, #4
 800a63c:	4618      	mov	r0, r3
 800a63e:	f002 fb98 	bl	800cd72 <SDIO_GetResponse>
 800a642:	4602      	mov	r2, r0
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2108      	movs	r1, #8
 800a64e:	4618      	mov	r0, r3
 800a650:	f002 fb8f 	bl	800cd72 <SDIO_GetResponse>
 800a654:	4602      	mov	r2, r0
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	210c      	movs	r1, #12
 800a660:	4618      	mov	r0, r3
 800a662:	f002 fb86 	bl	800cd72 <SDIO_GetResponse>
 800a666:	4602      	mov	r2, r0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2104      	movs	r1, #4
 800a672:	4618      	mov	r0, r3
 800a674:	f002 fb7d 	bl	800cd72 <SDIO_GetResponse>
 800a678:	4603      	mov	r3, r0
 800a67a:	0d1a      	lsrs	r2, r3, #20
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a680:	f107 0310 	add.w	r3, r7, #16
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fbe4 	bl	8009e54 <HAL_SD_GetCardCSD>
 800a68c:	4603      	mov	r3, r0
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d002      	beq.n	800a698 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a692:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a696:	e020      	b.n	800a6da <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6819      	ldr	r1, [r3, #0]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a0:	041b      	lsls	r3, r3, #16
 800a6a2:	f04f 0400 	mov.w	r4, #0
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	4623      	mov	r3, r4
 800a6aa:	4608      	mov	r0, r1
 800a6ac:	f002 fc6c 	bl	800cf88 <SDMMC_CmdSelDesel>
 800a6b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <SD_InitCard+0x174>
  {
    return errorstate;
 800a6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ba:	e00e      	b.n	800a6da <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681d      	ldr	r5, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	466c      	mov	r4, sp
 800a6c4:	f103 0210 	add.w	r2, r3, #16
 800a6c8:	ca07      	ldmia	r2, {r0, r1, r2}
 800a6ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6ce:	3304      	adds	r3, #4
 800a6d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	f002 fab0 	bl	800cc38 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3740      	adds	r7, #64	; 0x40
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a6e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	617b      	str	r3, [r7, #20]
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	f002 fc66 	bl	800cfce <SDMMC_CmdGoIdleState>
 800a702:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <SD_PowerON+0x2a>
  {
    return errorstate;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	e072      	b.n	800a7f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	4618      	mov	r0, r3
 800a714:	f002 fc79 	bl	800d00a <SDMMC_CmdOperCond>
 800a718:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d00d      	beq.n	800a73c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f002 fc4f 	bl	800cfce <SDMMC_CmdGoIdleState>
 800a730:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d004      	beq.n	800a742 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	e05b      	b.n	800a7f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a746:	2b01      	cmp	r3, #1
 800a748:	d137      	bne.n	800a7ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f002 fc79 	bl	800d048 <SDMMC_CmdAppCommand>
 800a756:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d02d      	beq.n	800a7ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a75e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a762:	e047      	b.n	800a7f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2100      	movs	r1, #0
 800a76a:	4618      	mov	r0, r3
 800a76c:	f002 fc6c 	bl	800d048 <SDMMC_CmdAppCommand>
 800a770:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d001      	beq.n	800a77c <SD_PowerON+0x98>
    {
      return errorstate;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	e03b      	b.n	800a7f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	491e      	ldr	r1, [pc, #120]	; (800a7fc <SD_PowerON+0x118>)
 800a782:	4618      	mov	r0, r3
 800a784:	f002 fc82 	bl	800d08c <SDMMC_CmdAppOperCommand>
 800a788:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d002      	beq.n	800a796 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a794:	e02e      	b.n	800a7f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	2100      	movs	r1, #0
 800a79c:	4618      	mov	r0, r3
 800a79e:	f002 fae8 	bl	800cd72 <SDIO_GetResponse>
 800a7a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	0fdb      	lsrs	r3, r3, #31
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <SD_PowerON+0xcc>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e000      	b.n	800a7b2 <SD_PowerON+0xce>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	613b      	str	r3, [r7, #16]

    count++;
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	3301      	adds	r3, #1
 800a7b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7c0:	4293      	cmp	r3, r2
 800a7c2:	d802      	bhi.n	800a7ca <SD_PowerON+0xe6>
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d0cc      	beq.n	800a764 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d902      	bls.n	800a7da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a7d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a7d8:	e00c      	b.n	800a7f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d003      	beq.n	800a7ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	645a      	str	r2, [r3, #68]	; 0x44
 800a7ea:	e002      	b.n	800a7f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3718      	adds	r7, #24
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}
 800a7fc:	c1100000 	.word	0xc1100000

0800a800 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b084      	sub	sp, #16
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
 800a808:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d102      	bne.n	800a816 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a810:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a814:	e018      	b.n	800a848 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	4619      	mov	r1, r3
 800a822:	4610      	mov	r0, r2
 800a824:	f002 fcf6 	bl	800d214 <SDMMC_CmdSendStatus>
 800a828:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	e009      	b.n	800a848 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	2100      	movs	r1, #0
 800a83a:	4618      	mov	r0, r3
 800a83c:	f002 fa99 	bl	800cd72 <SDIO_GetResponse>
 800a840:	4602      	mov	r2, r0
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3710      	adds	r7, #16
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b086      	sub	sp, #24
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a858:	2300      	movs	r3, #0
 800a85a:	60fb      	str	r3, [r7, #12]
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2100      	movs	r1, #0
 800a866:	4618      	mov	r0, r3
 800a868:	f002 fa83 	bl	800cd72 <SDIO_GetResponse>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a872:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a876:	d102      	bne.n	800a87e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a87c:	e02f      	b.n	800a8de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	4619      	mov	r1, r3
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f879 	bl	800a97c <SD_FindSCR>
 800a88a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d001      	beq.n	800a896 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	e023      	b.n	800a8de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01c      	beq.n	800a8da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a8:	041b      	lsls	r3, r3, #16
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f002 fbcb 	bl	800d048 <SDMMC_CmdAppCommand>
 800a8b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	e00f      	b.n	800a8de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2102      	movs	r1, #2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f002 fc04 	bl	800d0d2 <SDMMC_CmdBusWidth>
 800a8ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d001      	beq.n	800a8d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	e003      	b.n	800a8de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	e001      	b.n	800a8de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a8da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3718      	adds	r7, #24
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b086      	sub	sp, #24
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f002 fa38 	bl	800cd72 <SDIO_GetResponse>
 800a902:	4603      	mov	r3, r0
 800a904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a90c:	d102      	bne.n	800a914 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a90e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a912:	e02f      	b.n	800a974 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a914:	f107 030c 	add.w	r3, r7, #12
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 f82e 	bl	800a97c <SD_FindSCR>
 800a920:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	e023      	b.n	800a974 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d01c      	beq.n	800a970 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93e:	041b      	lsls	r3, r3, #16
 800a940:	4619      	mov	r1, r3
 800a942:	4610      	mov	r0, r2
 800a944:	f002 fb80 	bl	800d048 <SDMMC_CmdAppCommand>
 800a948:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	e00f      	b.n	800a974 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2100      	movs	r1, #0
 800a95a:	4618      	mov	r0, r3
 800a95c:	f002 fbb9 	bl	800d0d2 <SDMMC_CmdBusWidth>
 800a960:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	e003      	b.n	800a974 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a96c:	2300      	movs	r3, #0
 800a96e:	e001      	b.n	800a974 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a970:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a974:	4618      	mov	r0, r3
 800a976:	3718      	adds	r7, #24
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a97c:	b590      	push	{r4, r7, lr}
 800a97e:	b08f      	sub	sp, #60	; 0x3c
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a986:	f7fb fd63 	bl	8006450 <HAL_GetTick>
 800a98a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a98c:	2300      	movs	r3, #0
 800a98e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a990:	2300      	movs	r3, #0
 800a992:	60bb      	str	r3, [r7, #8]
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	2108      	movs	r1, #8
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f002 fa24 	bl	800cdf0 <SDMMC_CmdBlockLength>
 800a9a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	e0a9      	b.n	800ab08 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9bc:	041b      	lsls	r3, r3, #16
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f002 fb41 	bl	800d048 <SDMMC_CmdAppCommand>
 800a9c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d0:	e09a      	b.n	800ab08 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a9d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a9d8:	2308      	movs	r3, #8
 800a9da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a9dc:	2330      	movs	r3, #48	; 0x30
 800a9de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f107 0210 	add.w	r2, r7, #16
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f002 f9ce 	bl	800cd98 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f002 fb88 	bl	800d116 <SDMMC_CmdSendSCR>
 800aa06:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d022      	beq.n	800aa54 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800aa0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa10:	e07a      	b.n	800ab08 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00e      	beq.n	800aa3e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6819      	ldr	r1, [r3, #0]
 800aa24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	f107 0208 	add.w	r2, r7, #8
 800aa2c:	18d4      	adds	r4, r2, r3
 800aa2e:	4608      	mov	r0, r1
 800aa30:	f002 f92d 	bl	800cc8e <SDIO_ReadFIFO>
 800aa34:	4603      	mov	r3, r0
 800aa36:	6023      	str	r3, [r4, #0]
      index++;
 800aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800aa3e:	f7fb fd07 	bl	8006450 <HAL_GetTick>
 800aa42:	4602      	mov	r2, r0
 800aa44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa46:	1ad3      	subs	r3, r2, r3
 800aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa4c:	d102      	bne.n	800aa54 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800aa4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa52:	e059      	b.n	800ab08 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa5a:	f240 432a 	movw	r3, #1066	; 0x42a
 800aa5e:	4013      	ands	r3, r2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0d6      	beq.n	800aa12 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa6a:	f003 0308 	and.w	r3, r3, #8
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d005      	beq.n	800aa7e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	2208      	movs	r2, #8
 800aa78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800aa7a:	2308      	movs	r3, #8
 800aa7c:	e044      	b.n	800ab08 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa84:	f003 0302 	and.w	r3, r3, #2
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d005      	beq.n	800aa98 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	2202      	movs	r2, #2
 800aa92:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800aa94:	2302      	movs	r3, #2
 800aa96:	e037      	b.n	800ab08 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa9e:	f003 0320 	and.w	r3, r3, #32
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d005      	beq.n	800aab2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2220      	movs	r2, #32
 800aaac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800aaae:	2320      	movs	r3, #32
 800aab0:	e02a      	b.n	800ab08 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f240 523a 	movw	r2, #1338	; 0x53a
 800aaba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	061a      	lsls	r2, r3, #24
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	021b      	lsls	r3, r3, #8
 800aac4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aac8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	0a1b      	lsrs	r3, r3, #8
 800aace:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aad2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	0e1b      	lsrs	r3, r3, #24
 800aad8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	601a      	str	r2, [r3, #0]
    scr++;
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	3304      	adds	r3, #4
 800aae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	061a      	lsls	r2, r3, #24
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	021b      	lsls	r3, r3, #8
 800aaec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aaf0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	0a1b      	lsrs	r3, r3, #8
 800aaf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800aafa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	0e1b      	lsrs	r3, r3, #24
 800ab00:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	373c      	adds	r7, #60	; 0x3c
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd90      	pop	{r4, r7, pc}

0800ab10 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab1c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab22:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d03f      	beq.n	800abaa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	e033      	b.n	800ab98 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4618      	mov	r0, r3
 800ab36:	f002 f8aa 	bl	800cc8e <SDIO_ReadFIFO>
 800ab3a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	0a1b      	lsrs	r3, r3, #8
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	0c1b      	lsrs	r3, r3, #16
 800ab6a:	b2da      	uxtb	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3301      	adds	r3, #1
 800ab74:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	0e1b      	lsrs	r3, r3, #24
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	3301      	adds	r3, #1
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	2b07      	cmp	r3, #7
 800ab9c:	d9c8      	bls.n	800ab30 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	693a      	ldr	r2, [r7, #16]
 800aba8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800abaa:	bf00      	nop
 800abac:	3718      	adds	r7, #24
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b086      	sub	sp, #24
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d043      	beq.n	800ac54 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800abcc:	2300      	movs	r3, #0
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	e037      	b.n	800ac42 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	781b      	ldrb	r3, [r3, #0]
 800abd6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	3301      	adds	r3, #1
 800abdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	3b01      	subs	r3, #1
 800abe2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	021a      	lsls	r2, r3, #8
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	4313      	orrs	r3, r2
 800abee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	3301      	adds	r3, #1
 800abf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	041a      	lsls	r2, r3, #16
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	3b01      	subs	r3, #1
 800ac12:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	061a      	lsls	r2, r3, #24
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3301      	adds	r3, #1
 800ac24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f107 0208 	add.w	r2, r7, #8
 800ac34:	4611      	mov	r1, r2
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 f836 	bl	800cca8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	2b07      	cmp	r3, #7
 800ac46:	d9c4      	bls.n	800abd2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ac54:	bf00      	nop
 800ac56:	3718      	adds	r7, #24
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d101      	bne.n	800ac6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e056      	b.n	800ad1c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d106      	bne.n	800ac8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f7fa fa47 	bl	800511c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2202      	movs	r2, #2
 800ac92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aca4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	431a      	orrs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	431a      	orrs	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	691b      	ldr	r3, [r3, #16]
 800acba:	431a      	orrs	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	695b      	ldr	r3, [r3, #20]
 800acc0:	431a      	orrs	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acca:	431a      	orrs	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69db      	ldr	r3, [r3, #28]
 800acd0:	431a      	orrs	r2, r3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6a1b      	ldr	r3, [r3, #32]
 800acd6:	ea42 0103 	orr.w	r1, r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	0c1b      	lsrs	r3, r3, #16
 800acec:	f003 0104 	and.w	r1, r3, #4
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	69da      	ldr	r2, [r3, #28]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ad1a:	2300      	movs	r3, #0
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3708      	adds	r7, #8
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}

0800ad24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b088      	sub	sp, #32
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	60f8      	str	r0, [r7, #12]
 800ad2c:	60b9      	str	r1, [r7, #8]
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	4613      	mov	r3, r2
 800ad32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ad3e:	2b01      	cmp	r3, #1
 800ad40:	d101      	bne.n	800ad46 <HAL_SPI_Transmit+0x22>
 800ad42:	2302      	movs	r3, #2
 800ad44:	e11e      	b.n	800af84 <HAL_SPI_Transmit+0x260>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ad4e:	f7fb fb7f 	bl	8006450 <HAL_GetTick>
 800ad52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d002      	beq.n	800ad6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ad64:	2302      	movs	r3, #2
 800ad66:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad68:	e103      	b.n	800af72 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_SPI_Transmit+0x52>
 800ad70:	88fb      	ldrh	r3, [r7, #6]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d102      	bne.n	800ad7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ad7a:	e0fa      	b.n	800af72 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2203      	movs	r2, #3
 800ad80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	88fa      	ldrh	r2, [r7, #6]
 800ad94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	88fa      	ldrh	r2, [r7, #6]
 800ad9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2200      	movs	r2, #0
 800ada0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	2200      	movs	r2, #0
 800adb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800adc2:	d107      	bne.n	800add4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800add2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adde:	2b40      	cmp	r3, #64	; 0x40
 800ade0:	d007      	beq.n	800adf2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	681a      	ldr	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adf0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adfa:	d14b      	bne.n	800ae94 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d002      	beq.n	800ae0a <HAL_SPI_Transmit+0xe6>
 800ae04:	8afb      	ldrh	r3, [r7, #22]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d13e      	bne.n	800ae88 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	881a      	ldrh	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae1a:	1c9a      	adds	r2, r3, #2
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	3b01      	subs	r3, #1
 800ae28:	b29a      	uxth	r2, r3
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ae2e:	e02b      	b.n	800ae88 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f003 0302 	and.w	r3, r3, #2
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d112      	bne.n	800ae64 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae42:	881a      	ldrh	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae4e:	1c9a      	adds	r2, r3, #2
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	b29a      	uxth	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	86da      	strh	r2, [r3, #54]	; 0x36
 800ae62:	e011      	b.n	800ae88 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ae64:	f7fb faf4 	bl	8006450 <HAL_GetTick>
 800ae68:	4602      	mov	r2, r0
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	1ad3      	subs	r3, r2, r3
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d803      	bhi.n	800ae7c <HAL_SPI_Transmit+0x158>
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7a:	d102      	bne.n	800ae82 <HAL_SPI_Transmit+0x15e>
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d102      	bne.n	800ae88 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ae86:	e074      	b.n	800af72 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1ce      	bne.n	800ae30 <HAL_SPI_Transmit+0x10c>
 800ae92:	e04c      	b.n	800af2e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	685b      	ldr	r3, [r3, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <HAL_SPI_Transmit+0x17e>
 800ae9c:	8afb      	ldrh	r3, [r7, #22]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d140      	bne.n	800af24 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	330c      	adds	r3, #12
 800aeac:	7812      	ldrb	r2, [r2, #0]
 800aeae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb4:	1c5a      	adds	r2, r3, #1
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b01      	subs	r3, #1
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aec8:	e02c      	b.n	800af24 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d113      	bne.n	800af00 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	330c      	adds	r3, #12
 800aee2:	7812      	ldrb	r2, [r2, #0]
 800aee4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeea:	1c5a      	adds	r2, r3, #1
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	3b01      	subs	r3, #1
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	86da      	strh	r2, [r3, #54]	; 0x36
 800aefe:	e011      	b.n	800af24 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af00:	f7fb faa6 	bl	8006450 <HAL_GetTick>
 800af04:	4602      	mov	r2, r0
 800af06:	69bb      	ldr	r3, [r7, #24]
 800af08:	1ad3      	subs	r3, r2, r3
 800af0a:	683a      	ldr	r2, [r7, #0]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d803      	bhi.n	800af18 <HAL_SPI_Transmit+0x1f4>
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af16:	d102      	bne.n	800af1e <HAL_SPI_Transmit+0x1fa>
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d102      	bne.n	800af24 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	77fb      	strb	r3, [r7, #31]
          goto error;
 800af22:	e026      	b.n	800af72 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1cd      	bne.n	800aeca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af2e:	69ba      	ldr	r2, [r7, #24]
 800af30:	6839      	ldr	r1, [r7, #0]
 800af32:	68f8      	ldr	r0, [r7, #12]
 800af34:	f000 fba4 	bl	800b680 <SPI_EndRxTxTransaction>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d002      	beq.n	800af44 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2220      	movs	r2, #32
 800af42:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10a      	bne.n	800af62 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af4c:	2300      	movs	r3, #0
 800af4e:	613b      	str	r3, [r7, #16]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	613b      	str	r3, [r7, #16]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	613b      	str	r3, [r7, #16]
 800af60:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af66:	2b00      	cmp	r3, #0
 800af68:	d002      	beq.n	800af70 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	77fb      	strb	r3, [r7, #31]
 800af6e:	e000      	b.n	800af72 <HAL_SPI_Transmit+0x24e>
  }

error:
 800af70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2201      	movs	r2, #1
 800af76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2200      	movs	r2, #0
 800af7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800af82:	7ffb      	ldrb	r3, [r7, #31]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3720      	adds	r7, #32
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b088      	sub	sp, #32
 800af90:	af02      	add	r7, sp, #8
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	603b      	str	r3, [r7, #0]
 800af98:	4613      	mov	r3, r2
 800af9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800af9c:	2300      	movs	r3, #0
 800af9e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afa8:	d112      	bne.n	800afd0 <HAL_SPI_Receive+0x44>
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d10e      	bne.n	800afd0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	2204      	movs	r2, #4
 800afb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800afba:	88fa      	ldrh	r2, [r7, #6]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4613      	mov	r3, r2
 800afc2:	68ba      	ldr	r2, [r7, #8]
 800afc4:	68b9      	ldr	r1, [r7, #8]
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 f8e9 	bl	800b19e <HAL_SPI_TransmitReceive>
 800afcc:	4603      	mov	r3, r0
 800afce:	e0e2      	b.n	800b196 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <HAL_SPI_Receive+0x52>
 800afda:	2302      	movs	r3, #2
 800afdc:	e0db      	b.n	800b196 <HAL_SPI_Receive+0x20a>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afe6:	f7fb fa33 	bl	8006450 <HAL_GetTick>
 800afea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	d002      	beq.n	800affe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800aff8:	2302      	movs	r3, #2
 800affa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800affc:	e0c2      	b.n	800b184 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <HAL_SPI_Receive+0x7e>
 800b004:	88fb      	ldrh	r3, [r7, #6]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b00a:	2301      	movs	r3, #1
 800b00c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b00e:	e0b9      	b.n	800b184 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2204      	movs	r2, #4
 800b014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	68ba      	ldr	r2, [r7, #8]
 800b022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	88fa      	ldrh	r2, [r7, #6]
 800b028:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	88fa      	ldrh	r2, [r7, #6]
 800b02e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2200      	movs	r2, #0
 800b034:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2200      	movs	r2, #0
 800b04c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b056:	d107      	bne.n	800b068 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b066:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b072:	2b40      	cmp	r3, #64	; 0x40
 800b074:	d007      	beq.n	800b086 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b084:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	68db      	ldr	r3, [r3, #12]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d162      	bne.n	800b154 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b08e:	e02e      	b.n	800b0ee <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d115      	bne.n	800b0ca <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f103 020c 	add.w	r2, r3, #12
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	7812      	ldrb	r2, [r2, #0]
 800b0ac:	b2d2      	uxtb	r2, r2
 800b0ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0b4:	1c5a      	adds	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b0c8:	e011      	b.n	800b0ee <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0ca:	f7fb f9c1 	bl	8006450 <HAL_GetTick>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	1ad3      	subs	r3, r2, r3
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d803      	bhi.n	800b0e2 <HAL_SPI_Receive+0x156>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0e0:	d102      	bne.n	800b0e8 <HAL_SPI_Receive+0x15c>
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d102      	bne.n	800b0ee <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b0ec:	e04a      	b.n	800b184 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d1cb      	bne.n	800b090 <HAL_SPI_Receive+0x104>
 800b0f8:	e031      	b.n	800b15e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b01      	cmp	r3, #1
 800b106:	d113      	bne.n	800b130 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	b292      	uxth	r2, r2
 800b114:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11a:	1c9a      	adds	r2, r3, #2
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b124:	b29b      	uxth	r3, r3
 800b126:	3b01      	subs	r3, #1
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b12e:	e011      	b.n	800b154 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b130:	f7fb f98e 	bl	8006450 <HAL_GetTick>
 800b134:	4602      	mov	r2, r0
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	1ad3      	subs	r3, r2, r3
 800b13a:	683a      	ldr	r2, [r7, #0]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d803      	bhi.n	800b148 <HAL_SPI_Receive+0x1bc>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d102      	bne.n	800b14e <HAL_SPI_Receive+0x1c2>
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d102      	bne.n	800b154 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b14e:	2303      	movs	r3, #3
 800b150:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b152:	e017      	b.n	800b184 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b158:	b29b      	uxth	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1cd      	bne.n	800b0fa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b15e:	693a      	ldr	r2, [r7, #16]
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	68f8      	ldr	r0, [r7, #12]
 800b164:	f000 fa27 	bl	800b5b6 <SPI_EndRxTransaction>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2220      	movs	r2, #32
 800b172:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]
 800b180:	e000      	b.n	800b184 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b182:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2200      	movs	r2, #0
 800b190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3718      	adds	r7, #24
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}

0800b19e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b19e:	b580      	push	{r7, lr}
 800b1a0:	b08c      	sub	sp, #48	; 0x30
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	60f8      	str	r0, [r7, #12]
 800b1a6:	60b9      	str	r1, [r7, #8]
 800b1a8:	607a      	str	r2, [r7, #4]
 800b1aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <HAL_SPI_TransmitReceive+0x26>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e18a      	b.n	800b4da <HAL_SPI_TransmitReceive+0x33c>
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b1cc:	f7fb f940 	bl	8006450 <HAL_GetTick>
 800b1d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b1d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b1e2:	887b      	ldrh	r3, [r7, #2]
 800b1e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b1e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1ea:	2b01      	cmp	r3, #1
 800b1ec:	d00f      	beq.n	800b20e <HAL_SPI_TransmitReceive+0x70>
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1f4:	d107      	bne.n	800b206 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d103      	bne.n	800b206 <HAL_SPI_TransmitReceive+0x68>
 800b1fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b202:	2b04      	cmp	r3, #4
 800b204:	d003      	beq.n	800b20e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b206:	2302      	movs	r3, #2
 800b208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b20c:	e15b      	b.n	800b4c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d005      	beq.n	800b220 <HAL_SPI_TransmitReceive+0x82>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d002      	beq.n	800b220 <HAL_SPI_TransmitReceive+0x82>
 800b21a:	887b      	ldrh	r3, [r7, #2]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d103      	bne.n	800b228 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b226:	e14e      	b.n	800b4c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	2b04      	cmp	r3, #4
 800b232:	d003      	beq.n	800b23c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2205      	movs	r2, #5
 800b238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2200      	movs	r2, #0
 800b240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	887a      	ldrh	r2, [r7, #2]
 800b24c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	887a      	ldrh	r2, [r7, #2]
 800b252:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	887a      	ldrh	r2, [r7, #2]
 800b25e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	887a      	ldrh	r2, [r7, #2]
 800b264:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2200      	movs	r2, #0
 800b26a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	2200      	movs	r2, #0
 800b270:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27c:	2b40      	cmp	r3, #64	; 0x40
 800b27e:	d007      	beq.n	800b290 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b28e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68db      	ldr	r3, [r3, #12]
 800b294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b298:	d178      	bne.n	800b38c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	685b      	ldr	r3, [r3, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <HAL_SPI_TransmitReceive+0x10a>
 800b2a2:	8b7b      	ldrh	r3, [r7, #26]
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d166      	bne.n	800b376 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ac:	881a      	ldrh	r2, [r3, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b8:	1c9a      	adds	r2, r3, #2
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	b29a      	uxth	r2, r3
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b2cc:	e053      	b.n	800b376 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	f003 0302 	and.w	r3, r3, #2
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d11b      	bne.n	800b314 <HAL_SPI_TransmitReceive+0x176>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d016      	beq.n	800b314 <HAL_SPI_TransmitReceive+0x176>
 800b2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d113      	bne.n	800b314 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2f0:	881a      	ldrh	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fc:	1c9a      	adds	r2, r3, #2
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b306:	b29b      	uxth	r3, r3
 800b308:	3b01      	subs	r3, #1
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	f003 0301 	and.w	r3, r3, #1
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d119      	bne.n	800b356 <HAL_SPI_TransmitReceive+0x1b8>
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b326:	b29b      	uxth	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d014      	beq.n	800b356 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68da      	ldr	r2, [r3, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b336:	b292      	uxth	r2, r2
 800b338:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b33e:	1c9a      	adds	r2, r3, #2
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b348:	b29b      	uxth	r3, r3
 800b34a:	3b01      	subs	r3, #1
 800b34c:	b29a      	uxth	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b352:	2301      	movs	r3, #1
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b356:	f7fb f87b 	bl	8006450 <HAL_GetTick>
 800b35a:	4602      	mov	r2, r0
 800b35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b362:	429a      	cmp	r2, r3
 800b364:	d807      	bhi.n	800b376 <HAL_SPI_TransmitReceive+0x1d8>
 800b366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b36c:	d003      	beq.n	800b376 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b374:	e0a7      	b.n	800b4c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1a6      	bne.n	800b2ce <HAL_SPI_TransmitReceive+0x130>
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b384:	b29b      	uxth	r3, r3
 800b386:	2b00      	cmp	r3, #0
 800b388:	d1a1      	bne.n	800b2ce <HAL_SPI_TransmitReceive+0x130>
 800b38a:	e07c      	b.n	800b486 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d002      	beq.n	800b39a <HAL_SPI_TransmitReceive+0x1fc>
 800b394:	8b7b      	ldrh	r3, [r7, #26]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d16b      	bne.n	800b472 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	330c      	adds	r3, #12
 800b3a4:	7812      	ldrb	r2, [r2, #0]
 800b3a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	3b01      	subs	r3, #1
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3c0:	e057      	b.n	800b472 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b02      	cmp	r3, #2
 800b3ce:	d11c      	bne.n	800b40a <HAL_SPI_TransmitReceive+0x26c>
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d017      	beq.n	800b40a <HAL_SPI_TransmitReceive+0x26c>
 800b3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d114      	bne.n	800b40a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	330c      	adds	r3, #12
 800b3ea:	7812      	ldrb	r2, [r2, #0]
 800b3ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f2:	1c5a      	adds	r2, r3, #1
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3fc:	b29b      	uxth	r3, r3
 800b3fe:	3b01      	subs	r3, #1
 800b400:	b29a      	uxth	r2, r3
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	689b      	ldr	r3, [r3, #8]
 800b410:	f003 0301 	and.w	r3, r3, #1
 800b414:	2b01      	cmp	r3, #1
 800b416:	d119      	bne.n	800b44c <HAL_SPI_TransmitReceive+0x2ae>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d014      	beq.n	800b44c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68da      	ldr	r2, [r3, #12]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	b2d2      	uxtb	r2, r2
 800b42e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b43e:	b29b      	uxth	r3, r3
 800b440:	3b01      	subs	r3, #1
 800b442:	b29a      	uxth	r2, r3
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b448:	2301      	movs	r3, #1
 800b44a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b44c:	f7fb f800 	bl	8006450 <HAL_GetTick>
 800b450:	4602      	mov	r2, r0
 800b452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b458:	429a      	cmp	r2, r3
 800b45a:	d803      	bhi.n	800b464 <HAL_SPI_TransmitReceive+0x2c6>
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b462:	d102      	bne.n	800b46a <HAL_SPI_TransmitReceive+0x2cc>
 800b464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b466:	2b00      	cmp	r3, #0
 800b468:	d103      	bne.n	800b472 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b46a:	2303      	movs	r3, #3
 800b46c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b470:	e029      	b.n	800b4c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b476:	b29b      	uxth	r3, r3
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1a2      	bne.n	800b3c2 <HAL_SPI_TransmitReceive+0x224>
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b480:	b29b      	uxth	r3, r3
 800b482:	2b00      	cmp	r3, #0
 800b484:	d19d      	bne.n	800b3c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b488:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f000 f8f8 	bl	800b680 <SPI_EndRxTxTransaction>
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d006      	beq.n	800b4a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b496:	2301      	movs	r3, #1
 800b498:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	2220      	movs	r2, #32
 800b4a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b4a2:	e010      	b.n	800b4c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	689b      	ldr	r3, [r3, #8]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10b      	bne.n	800b4c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	617b      	str	r3, [r7, #20]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	617b      	str	r3, [r7, #20]
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	689b      	ldr	r3, [r3, #8]
 800b4be:	617b      	str	r3, [r7, #20]
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	e000      	b.n	800b4c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b4c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3730      	adds	r7, #48	; 0x30
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b084      	sub	sp, #16
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	60f8      	str	r0, [r7, #12]
 800b4ea:	60b9      	str	r1, [r7, #8]
 800b4ec:	603b      	str	r3, [r7, #0]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b4f2:	e04c      	b.n	800b58e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4fa:	d048      	beq.n	800b58e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b4fc:	f7fa ffa8 	bl	8006450 <HAL_GetTick>
 800b500:	4602      	mov	r2, r0
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	1ad3      	subs	r3, r2, r3
 800b506:	683a      	ldr	r2, [r7, #0]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d902      	bls.n	800b512 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d13d      	bne.n	800b58e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	685a      	ldr	r2, [r3, #4]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b520:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b52a:	d111      	bne.n	800b550 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b534:	d004      	beq.n	800b540 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b53e:	d107      	bne.n	800b550 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b54e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b554:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b558:	d10f      	bne.n	800b57a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b568:	601a      	str	r2, [r3, #0]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b578:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e00f      	b.n	800b5ae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	689a      	ldr	r2, [r3, #8]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	4013      	ands	r3, r2
 800b598:	68ba      	ldr	r2, [r7, #8]
 800b59a:	429a      	cmp	r2, r3
 800b59c:	bf0c      	ite	eq
 800b59e:	2301      	moveq	r3, #1
 800b5a0:	2300      	movne	r3, #0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	79fb      	ldrb	r3, [r7, #7]
 800b5a8:	429a      	cmp	r2, r3
 800b5aa:	d1a3      	bne.n	800b4f4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}

0800b5b6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b086      	sub	sp, #24
 800b5ba:	af02      	add	r7, sp, #8
 800b5bc:	60f8      	str	r0, [r7, #12]
 800b5be:	60b9      	str	r1, [r7, #8]
 800b5c0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	685b      	ldr	r3, [r3, #4]
 800b5c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5ca:	d111      	bne.n	800b5f0 <SPI_EndRxTransaction+0x3a>
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5d4:	d004      	beq.n	800b5e0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	689b      	ldr	r3, [r3, #8]
 800b5da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5de:	d107      	bne.n	800b5f0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	685b      	ldr	r3, [r3, #4]
 800b5f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b5f8:	d12a      	bne.n	800b650 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b602:	d012      	beq.n	800b62a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2200      	movs	r2, #0
 800b60c:	2180      	movs	r1, #128	; 0x80
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff ff67 	bl	800b4e2 <SPI_WaitFlagStateUntilTimeout>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d02d      	beq.n	800b676 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b61e:	f043 0220 	orr.w	r2, r3, #32
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b626:	2303      	movs	r3, #3
 800b628:	e026      	b.n	800b678 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	2200      	movs	r2, #0
 800b632:	2101      	movs	r1, #1
 800b634:	68f8      	ldr	r0, [r7, #12]
 800b636:	f7ff ff54 	bl	800b4e2 <SPI_WaitFlagStateUntilTimeout>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d01a      	beq.n	800b676 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b644:	f043 0220 	orr.w	r2, r3, #32
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b64c:	2303      	movs	r3, #3
 800b64e:	e013      	b.n	800b678 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	9300      	str	r3, [sp, #0]
 800b654:	68bb      	ldr	r3, [r7, #8]
 800b656:	2200      	movs	r2, #0
 800b658:	2101      	movs	r1, #1
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff ff41 	bl	800b4e2 <SPI_WaitFlagStateUntilTimeout>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d007      	beq.n	800b676 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b66a:	f043 0220 	orr.w	r2, r3, #32
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b672:	2303      	movs	r3, #3
 800b674:	e000      	b.n	800b678 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b676:	2300      	movs	r3, #0
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3710      	adds	r7, #16
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b088      	sub	sp, #32
 800b684:	af02      	add	r7, sp, #8
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b68c:	4b1b      	ldr	r3, [pc, #108]	; (800b6fc <SPI_EndRxTxTransaction+0x7c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a1b      	ldr	r2, [pc, #108]	; (800b700 <SPI_EndRxTxTransaction+0x80>)
 800b692:	fba2 2303 	umull	r2, r3, r2, r3
 800b696:	0d5b      	lsrs	r3, r3, #21
 800b698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b69c:	fb02 f303 	mul.w	r3, r2, r3
 800b6a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b6aa:	d112      	bne.n	800b6d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	2180      	movs	r1, #128	; 0x80
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff ff13 	bl	800b4e2 <SPI_WaitFlagStateUntilTimeout>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d016      	beq.n	800b6f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c6:	f043 0220 	orr.w	r2, r3, #32
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e00f      	b.n	800b6f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d00a      	beq.n	800b6ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6e8:	2b80      	cmp	r3, #128	; 0x80
 800b6ea:	d0f2      	beq.n	800b6d2 <SPI_EndRxTxTransaction+0x52>
 800b6ec:	e000      	b.n	800b6f0 <SPI_EndRxTxTransaction+0x70>
        break;
 800b6ee:	bf00      	nop
  }

  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3718      	adds	r7, #24
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20000000 	.word	0x20000000
 800b700:	165e9f81 	.word	0x165e9f81

0800b704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d101      	bne.n	800b716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b712:	2301      	movs	r3, #1
 800b714:	e01d      	b.n	800b752 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2200      	movs	r2, #0
 800b726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f7f9 fdb2 	bl	8005294 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2202      	movs	r2, #2
 800b734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	3304      	adds	r3, #4
 800b740:	4619      	mov	r1, r3
 800b742:	4610      	mov	r0, r2
 800b744:	f000 fb56 	bl	800bdf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2201      	movs	r2, #1
 800b74c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3708      	adds	r7, #8
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}

0800b75a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b085      	sub	sp, #20
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	68da      	ldr	r2, [r3, #12]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f042 0201 	orr.w	r2, r2, #1
 800b770:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f003 0307 	and.w	r3, r3, #7
 800b77c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b06      	cmp	r3, #6
 800b782:	d007      	beq.n	800b794 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f042 0201 	orr.w	r2, r2, #1
 800b792:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b082      	sub	sp, #8
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d101      	bne.n	800b7b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	e01d      	b.n	800b7f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ba:	b2db      	uxtb	r3, r3
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d106      	bne.n	800b7ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f7f9 fcef 	bl	80051ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2202      	movs	r2, #2
 800b7d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f000 fb07 	bl	800bdf4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	2201      	movs	r2, #1
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 fd42 	bl	800c294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a15      	ldr	r2, [pc, #84]	; (800b86c <HAL_TIM_PWM_Start+0x74>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d004      	beq.n	800b824 <HAL_TIM_PWM_Start+0x2c>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a14      	ldr	r2, [pc, #80]	; (800b870 <HAL_TIM_PWM_Start+0x78>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d101      	bne.n	800b828 <HAL_TIM_PWM_Start+0x30>
 800b824:	2301      	movs	r3, #1
 800b826:	e000      	b.n	800b82a <HAL_TIM_PWM_Start+0x32>
 800b828:	2300      	movs	r3, #0
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d007      	beq.n	800b83e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b83c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	f003 0307 	and.w	r3, r3, #7
 800b848:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b06      	cmp	r3, #6
 800b84e:	d007      	beq.n	800b860 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f042 0201 	orr.w	r2, r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3710      	adds	r7, #16
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}
 800b86a:	bf00      	nop
 800b86c:	40010000 	.word	0x40010000
 800b870:	40010400 	.word	0x40010400

0800b874 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b086      	sub	sp, #24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e083      	b.n	800b990 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b88e:	b2db      	uxtb	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f7f9 fd89 	bl	80053b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	6812      	ldr	r2, [r2, #0]
 800b8b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8b8:	f023 0307 	bic.w	r3, r3, #7
 800b8bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	3304      	adds	r3, #4
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	4610      	mov	r0, r2
 800b8ca:	f000 fa93 	bl	800bdf4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	699b      	ldr	r3, [r3, #24]
 800b8dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	697a      	ldr	r2, [r7, #20]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8f6:	f023 0303 	bic.w	r3, r3, #3
 800b8fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	689a      	ldr	r2, [r3, #8]
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	699b      	ldr	r3, [r3, #24]
 800b904:	021b      	lsls	r3, r3, #8
 800b906:	4313      	orrs	r3, r2
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	4313      	orrs	r3, r2
 800b90c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b914:	f023 030c 	bic.w	r3, r3, #12
 800b918:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b920:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b924:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	68da      	ldr	r2, [r3, #12]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	021b      	lsls	r3, r3, #8
 800b930:	4313      	orrs	r3, r2
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4313      	orrs	r3, r2
 800b936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	011a      	lsls	r2, r3, #4
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	6a1b      	ldr	r3, [r3, #32]
 800b942:	031b      	lsls	r3, r3, #12
 800b944:	4313      	orrs	r3, r2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b952:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b95a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	695b      	ldr	r3, [r3, #20]
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	4313      	orrs	r3, r2
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	697a      	ldr	r2, [r7, #20]
 800b974:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	693a      	ldr	r2, [r7, #16]
 800b97c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3718      	adds	r7, #24
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d002      	beq.n	800b9ae <HAL_TIM_Encoder_Start+0x16>
 800b9a8:	2b04      	cmp	r3, #4
 800b9aa:	d008      	beq.n	800b9be <HAL_TIM_Encoder_Start+0x26>
 800b9ac:	e00f      	b.n	800b9ce <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f000 fc6c 	bl	800c294 <TIM_CCxChannelCmd>
      break;
 800b9bc:	e016      	b.n	800b9ec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	2104      	movs	r1, #4
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 fc64 	bl	800c294 <TIM_CCxChannelCmd>
      break;
 800b9cc:	e00e      	b.n	800b9ec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	2100      	movs	r1, #0
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f000 fc5c 	bl	800c294 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	2104      	movs	r1, #4
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fc55 	bl	800c294 <TIM_CCxChannelCmd>
      break;
 800b9ea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f042 0201 	orr.w	r2, r2, #1
 800b9fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d122      	bne.n	800ba62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f003 0302 	and.w	r3, r3, #2
 800ba26:	2b02      	cmp	r3, #2
 800ba28:	d11b      	bne.n	800ba62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f06f 0202 	mvn.w	r2, #2
 800ba32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	699b      	ldr	r3, [r3, #24]
 800ba40:	f003 0303 	and.w	r3, r3, #3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d003      	beq.n	800ba50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f9b5 	bl	800bdb8 <HAL_TIM_IC_CaptureCallback>
 800ba4e:	e005      	b.n	800ba5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f9a7 	bl	800bda4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 f9b8 	bl	800bdcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2200      	movs	r2, #0
 800ba60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	d122      	bne.n	800bab6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68db      	ldr	r3, [r3, #12]
 800ba76:	f003 0304 	and.w	r3, r3, #4
 800ba7a:	2b04      	cmp	r3, #4
 800ba7c:	d11b      	bne.n	800bab6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f06f 0204 	mvn.w	r2, #4
 800ba86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	699b      	ldr	r3, [r3, #24]
 800ba94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d003      	beq.n	800baa4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 f98b 	bl	800bdb8 <HAL_TIM_IC_CaptureCallback>
 800baa2:	e005      	b.n	800bab0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 f97d 	bl	800bda4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 f98e 	bl	800bdcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2200      	movs	r2, #0
 800bab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	f003 0308 	and.w	r3, r3, #8
 800bac0:	2b08      	cmp	r3, #8
 800bac2:	d122      	bne.n	800bb0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	f003 0308 	and.w	r3, r3, #8
 800bace:	2b08      	cmp	r3, #8
 800bad0:	d11b      	bne.n	800bb0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f06f 0208 	mvn.w	r2, #8
 800bada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2204      	movs	r2, #4
 800bae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	69db      	ldr	r3, [r3, #28]
 800bae8:	f003 0303 	and.w	r3, r3, #3
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f961 	bl	800bdb8 <HAL_TIM_IC_CaptureCallback>
 800baf6:	e005      	b.n	800bb04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 f953 	bl	800bda4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f964 	bl	800bdcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	f003 0310 	and.w	r3, r3, #16
 800bb14:	2b10      	cmp	r3, #16
 800bb16:	d122      	bne.n	800bb5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	f003 0310 	and.w	r3, r3, #16
 800bb22:	2b10      	cmp	r3, #16
 800bb24:	d11b      	bne.n	800bb5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f06f 0210 	mvn.w	r2, #16
 800bb2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2208      	movs	r2, #8
 800bb34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 f937 	bl	800bdb8 <HAL_TIM_IC_CaptureCallback>
 800bb4a:	e005      	b.n	800bb58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f000 f929 	bl	800bda4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f93a 	bl	800bdcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f003 0301 	and.w	r3, r3, #1
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d10e      	bne.n	800bb8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	f003 0301 	and.w	r3, r3, #1
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d107      	bne.n	800bb8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f06f 0201 	mvn.w	r2, #1
 800bb82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f7f7 ff5f 	bl	8003a48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb94:	2b80      	cmp	r3, #128	; 0x80
 800bb96:	d10e      	bne.n	800bbb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68db      	ldr	r3, [r3, #12]
 800bb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba2:	2b80      	cmp	r3, #128	; 0x80
 800bba4:	d107      	bne.n	800bbb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 fc6d 	bl	800c490 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbc0:	2b40      	cmp	r3, #64	; 0x40
 800bbc2:	d10e      	bne.n	800bbe2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbce:	2b40      	cmp	r3, #64	; 0x40
 800bbd0:	d107      	bne.n	800bbe2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bbda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 f8ff 	bl	800bde0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	f003 0320 	and.w	r3, r3, #32
 800bbec:	2b20      	cmp	r3, #32
 800bbee:	d10e      	bne.n	800bc0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	68db      	ldr	r3, [r3, #12]
 800bbf6:	f003 0320 	and.w	r3, r3, #32
 800bbfa:	2b20      	cmp	r3, #32
 800bbfc:	d107      	bne.n	800bc0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f06f 0220 	mvn.w	r2, #32
 800bc06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 fc37 	bl	800c47c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc0e:	bf00      	nop
 800bc10:	3708      	adds	r7, #8
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
	...

0800bc18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d101      	bne.n	800bc32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bc2e:	2302      	movs	r3, #2
 800bc30:	e0b4      	b.n	800bd9c <HAL_TIM_PWM_ConfigChannel+0x184>
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2b0c      	cmp	r3, #12
 800bc46:	f200 809f 	bhi.w	800bd88 <HAL_TIM_PWM_ConfigChannel+0x170>
 800bc4a:	a201      	add	r2, pc, #4	; (adr r2, 800bc50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc50:	0800bc85 	.word	0x0800bc85
 800bc54:	0800bd89 	.word	0x0800bd89
 800bc58:	0800bd89 	.word	0x0800bd89
 800bc5c:	0800bd89 	.word	0x0800bd89
 800bc60:	0800bcc5 	.word	0x0800bcc5
 800bc64:	0800bd89 	.word	0x0800bd89
 800bc68:	0800bd89 	.word	0x0800bd89
 800bc6c:	0800bd89 	.word	0x0800bd89
 800bc70:	0800bd07 	.word	0x0800bd07
 800bc74:	0800bd89 	.word	0x0800bd89
 800bc78:	0800bd89 	.word	0x0800bd89
 800bc7c:	0800bd89 	.word	0x0800bd89
 800bc80:	0800bd47 	.word	0x0800bd47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68b9      	ldr	r1, [r7, #8]
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f000 f952 	bl	800bf34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	699a      	ldr	r2, [r3, #24]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f042 0208 	orr.w	r2, r2, #8
 800bc9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	699a      	ldr	r2, [r3, #24]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0204 	bic.w	r2, r2, #4
 800bcae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	6999      	ldr	r1, [r3, #24]
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	691a      	ldr	r2, [r3, #16]
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	430a      	orrs	r2, r1
 800bcc0:	619a      	str	r2, [r3, #24]
      break;
 800bcc2:	e062      	b.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68b9      	ldr	r1, [r7, #8]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 f9a2 	bl	800c014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	699a      	ldr	r2, [r3, #24]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6999      	ldr	r1, [r3, #24]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	691b      	ldr	r3, [r3, #16]
 800bcfa:	021a      	lsls	r2, r3, #8
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	430a      	orrs	r2, r1
 800bd02:	619a      	str	r2, [r3, #24]
      break;
 800bd04:	e041      	b.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68b9      	ldr	r1, [r7, #8]
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f000 f9f7 	bl	800c100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	69da      	ldr	r2, [r3, #28]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f042 0208 	orr.w	r2, r2, #8
 800bd20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	69da      	ldr	r2, [r3, #28]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f022 0204 	bic.w	r2, r2, #4
 800bd30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	69d9      	ldr	r1, [r3, #28]
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	430a      	orrs	r2, r1
 800bd42:	61da      	str	r2, [r3, #28]
      break;
 800bd44:	e021      	b.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fa4b 	bl	800c1e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69da      	ldr	r2, [r3, #28]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	69d9      	ldr	r1, [r3, #28]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	691b      	ldr	r3, [r3, #16]
 800bd7c:	021a      	lsls	r2, r3, #8
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	430a      	orrs	r2, r1
 800bd84:	61da      	str	r2, [r3, #28]
      break;
 800bd86:	e000      	b.n	800bd8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bd88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bdac:	bf00      	nop
 800bdae:	370c      	adds	r7, #12
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr

0800bdb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bdc0:	bf00      	nop
 800bdc2:	370c      	adds	r7, #12
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdca:	4770      	bx	lr

0800bdcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdd4:	bf00      	nop
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr

0800bde0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b085      	sub	sp, #20
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a40      	ldr	r2, [pc, #256]	; (800bf08 <TIM_Base_SetConfig+0x114>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d013      	beq.n	800be34 <TIM_Base_SetConfig+0x40>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be12:	d00f      	beq.n	800be34 <TIM_Base_SetConfig+0x40>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	4a3d      	ldr	r2, [pc, #244]	; (800bf0c <TIM_Base_SetConfig+0x118>)
 800be18:	4293      	cmp	r3, r2
 800be1a:	d00b      	beq.n	800be34 <TIM_Base_SetConfig+0x40>
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a3c      	ldr	r2, [pc, #240]	; (800bf10 <TIM_Base_SetConfig+0x11c>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d007      	beq.n	800be34 <TIM_Base_SetConfig+0x40>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a3b      	ldr	r2, [pc, #236]	; (800bf14 <TIM_Base_SetConfig+0x120>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d003      	beq.n	800be34 <TIM_Base_SetConfig+0x40>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a3a      	ldr	r2, [pc, #232]	; (800bf18 <TIM_Base_SetConfig+0x124>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d108      	bne.n	800be46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	685b      	ldr	r3, [r3, #4]
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	4313      	orrs	r3, r2
 800be44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a2f      	ldr	r2, [pc, #188]	; (800bf08 <TIM_Base_SetConfig+0x114>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d02b      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be54:	d027      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a2c      	ldr	r2, [pc, #176]	; (800bf0c <TIM_Base_SetConfig+0x118>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d023      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a2b      	ldr	r2, [pc, #172]	; (800bf10 <TIM_Base_SetConfig+0x11c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d01f      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a2a      	ldr	r2, [pc, #168]	; (800bf14 <TIM_Base_SetConfig+0x120>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d01b      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a29      	ldr	r2, [pc, #164]	; (800bf18 <TIM_Base_SetConfig+0x124>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d017      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a28      	ldr	r2, [pc, #160]	; (800bf1c <TIM_Base_SetConfig+0x128>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d013      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a27      	ldr	r2, [pc, #156]	; (800bf20 <TIM_Base_SetConfig+0x12c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d00f      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a26      	ldr	r2, [pc, #152]	; (800bf24 <TIM_Base_SetConfig+0x130>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d00b      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a25      	ldr	r2, [pc, #148]	; (800bf28 <TIM_Base_SetConfig+0x134>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d007      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	4a24      	ldr	r2, [pc, #144]	; (800bf2c <TIM_Base_SetConfig+0x138>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d003      	beq.n	800bea6 <TIM_Base_SetConfig+0xb2>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	4a23      	ldr	r2, [pc, #140]	; (800bf30 <TIM_Base_SetConfig+0x13c>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d108      	bne.n	800beb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800beac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	68db      	ldr	r3, [r3, #12]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4313      	orrs	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	695b      	ldr	r3, [r3, #20]
 800bec2:	4313      	orrs	r3, r2
 800bec4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68fa      	ldr	r2, [r7, #12]
 800beca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a0a      	ldr	r2, [pc, #40]	; (800bf08 <TIM_Base_SetConfig+0x114>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d003      	beq.n	800beec <TIM_Base_SetConfig+0xf8>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a0c      	ldr	r2, [pc, #48]	; (800bf18 <TIM_Base_SetConfig+0x124>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d103      	bne.n	800bef4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	691a      	ldr	r2, [r3, #16]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	615a      	str	r2, [r3, #20]
}
 800befa:	bf00      	nop
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	40010000 	.word	0x40010000
 800bf0c:	40000400 	.word	0x40000400
 800bf10:	40000800 	.word	0x40000800
 800bf14:	40000c00 	.word	0x40000c00
 800bf18:	40010400 	.word	0x40010400
 800bf1c:	40014000 	.word	0x40014000
 800bf20:	40014400 	.word	0x40014400
 800bf24:	40014800 	.word	0x40014800
 800bf28:	40001800 	.word	0x40001800
 800bf2c:	40001c00 	.word	0x40001c00
 800bf30:	40002000 	.word	0x40002000

0800bf34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b087      	sub	sp, #28
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	f023 0201 	bic.w	r2, r3, #1
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a1b      	ldr	r3, [r3, #32]
 800bf4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	699b      	ldr	r3, [r3, #24]
 800bf5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f023 0303 	bic.w	r3, r3, #3
 800bf6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	4313      	orrs	r3, r2
 800bf74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f023 0302 	bic.w	r3, r3, #2
 800bf7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	689b      	ldr	r3, [r3, #8]
 800bf82:	697a      	ldr	r2, [r7, #20]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a20      	ldr	r2, [pc, #128]	; (800c00c <TIM_OC1_SetConfig+0xd8>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d003      	beq.n	800bf98 <TIM_OC1_SetConfig+0x64>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a1f      	ldr	r2, [pc, #124]	; (800c010 <TIM_OC1_SetConfig+0xdc>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d10c      	bne.n	800bfb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f023 0308 	bic.w	r3, r3, #8
 800bf9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	68db      	ldr	r3, [r3, #12]
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	f023 0304 	bic.w	r3, r3, #4
 800bfb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a15      	ldr	r2, [pc, #84]	; (800c00c <TIM_OC1_SetConfig+0xd8>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d003      	beq.n	800bfc2 <TIM_OC1_SetConfig+0x8e>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a14      	ldr	r2, [pc, #80]	; (800c010 <TIM_OC1_SetConfig+0xdc>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d111      	bne.n	800bfe6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	695b      	ldr	r3, [r3, #20]
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	699b      	ldr	r3, [r3, #24]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	621a      	str	r2, [r3, #32]
}
 800c000:	bf00      	nop
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	40010000 	.word	0x40010000
 800c010:	40010400 	.word	0x40010400

0800c014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c014:	b480      	push	{r7}
 800c016:	b087      	sub	sp, #28
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a1b      	ldr	r3, [r3, #32]
 800c022:	f023 0210 	bic.w	r2, r3, #16
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	699b      	ldr	r3, [r3, #24]
 800c03a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	021b      	lsls	r3, r3, #8
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	4313      	orrs	r3, r2
 800c056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	f023 0320 	bic.w	r3, r3, #32
 800c05e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	011b      	lsls	r3, r3, #4
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4313      	orrs	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a22      	ldr	r2, [pc, #136]	; (800c0f8 <TIM_OC2_SetConfig+0xe4>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d003      	beq.n	800c07c <TIM_OC2_SetConfig+0x68>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a21      	ldr	r2, [pc, #132]	; (800c0fc <TIM_OC2_SetConfig+0xe8>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d10d      	bne.n	800c098 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	68db      	ldr	r3, [r3, #12]
 800c088:	011b      	lsls	r3, r3, #4
 800c08a:	697a      	ldr	r2, [r7, #20]
 800c08c:	4313      	orrs	r3, r2
 800c08e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c096:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a17      	ldr	r2, [pc, #92]	; (800c0f8 <TIM_OC2_SetConfig+0xe4>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d003      	beq.n	800c0a8 <TIM_OC2_SetConfig+0x94>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a16      	ldr	r2, [pc, #88]	; (800c0fc <TIM_OC2_SetConfig+0xe8>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d113      	bne.n	800c0d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c0ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c0b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	695b      	ldr	r3, [r3, #20]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	4313      	orrs	r3, r2
 800c0c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	699b      	ldr	r3, [r3, #24]
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	693a      	ldr	r2, [r7, #16]
 800c0cc:	4313      	orrs	r3, r2
 800c0ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	68fa      	ldr	r2, [r7, #12]
 800c0da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	697a      	ldr	r2, [r7, #20]
 800c0e8:	621a      	str	r2, [r3, #32]
}
 800c0ea:	bf00      	nop
 800c0ec:	371c      	adds	r7, #28
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f4:	4770      	bx	lr
 800c0f6:	bf00      	nop
 800c0f8:	40010000 	.word	0x40010000
 800c0fc:	40010400 	.word	0x40010400

0800c100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	6a1b      	ldr	r3, [r3, #32]
 800c11a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	69db      	ldr	r3, [r3, #28]
 800c126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 0303 	bic.w	r3, r3, #3
 800c136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4313      	orrs	r3, r2
 800c140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c142:	697b      	ldr	r3, [r7, #20]
 800c144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	021b      	lsls	r3, r3, #8
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	4313      	orrs	r3, r2
 800c154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a21      	ldr	r2, [pc, #132]	; (800c1e0 <TIM_OC3_SetConfig+0xe0>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d003      	beq.n	800c166 <TIM_OC3_SetConfig+0x66>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a20      	ldr	r2, [pc, #128]	; (800c1e4 <TIM_OC3_SetConfig+0xe4>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d10d      	bne.n	800c182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c16c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	68db      	ldr	r3, [r3, #12]
 800c172:	021b      	lsls	r3, r3, #8
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	4313      	orrs	r3, r2
 800c178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	4a16      	ldr	r2, [pc, #88]	; (800c1e0 <TIM_OC3_SetConfig+0xe0>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d003      	beq.n	800c192 <TIM_OC3_SetConfig+0x92>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a15      	ldr	r2, [pc, #84]	; (800c1e4 <TIM_OC3_SetConfig+0xe4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d113      	bne.n	800c1ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c1a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	695b      	ldr	r3, [r3, #20]
 800c1a6:	011b      	lsls	r3, r3, #4
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	011b      	lsls	r3, r3, #4
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	693a      	ldr	r2, [r7, #16]
 800c1be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68fa      	ldr	r2, [r7, #12]
 800c1c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	621a      	str	r2, [r3, #32]
}
 800c1d4:	bf00      	nop
 800c1d6:	371c      	adds	r7, #28
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr
 800c1e0:	40010000 	.word	0x40010000
 800c1e4:	40010400 	.word	0x40010400

0800c1e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6a1b      	ldr	r3, [r3, #32]
 800c1f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	685b      	ldr	r3, [r3, #4]
 800c208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c21e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	021b      	lsls	r3, r3, #8
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	4313      	orrs	r3, r2
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	031b      	lsls	r3, r3, #12
 800c23a:	693a      	ldr	r2, [r7, #16]
 800c23c:	4313      	orrs	r3, r2
 800c23e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a12      	ldr	r2, [pc, #72]	; (800c28c <TIM_OC4_SetConfig+0xa4>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d003      	beq.n	800c250 <TIM_OC4_SetConfig+0x68>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a11      	ldr	r2, [pc, #68]	; (800c290 <TIM_OC4_SetConfig+0xa8>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d109      	bne.n	800c264 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	695b      	ldr	r3, [r3, #20]
 800c25c:	019b      	lsls	r3, r3, #6
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	4313      	orrs	r3, r2
 800c262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	68fa      	ldr	r2, [r7, #12]
 800c26e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	685a      	ldr	r2, [r3, #4]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	621a      	str	r2, [r3, #32]
}
 800c27e:	bf00      	nop
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	40010000 	.word	0x40010000
 800c290:	40010400 	.word	0x40010400

0800c294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c294:	b480      	push	{r7}
 800c296:	b087      	sub	sp, #28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	60f8      	str	r0, [r7, #12]
 800c29c:	60b9      	str	r1, [r7, #8]
 800c29e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	f003 031f 	and.w	r3, r3, #31
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	6a1a      	ldr	r2, [r3, #32]
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	43db      	mvns	r3, r3
 800c2b6:	401a      	ands	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	6a1a      	ldr	r2, [r3, #32]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	f003 031f 	and.w	r3, r3, #31
 800c2c6:	6879      	ldr	r1, [r7, #4]
 800c2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2cc:	431a      	orrs	r2, r3
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	621a      	str	r2, [r3, #32]
}
 800c2d2:	bf00      	nop
 800c2d4:	371c      	adds	r7, #28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2dc:	4770      	bx	lr
	...

0800c2e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2e0:	b480      	push	{r7}
 800c2e2:	b085      	sub	sp, #20
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
 800c2e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2f0:	2b01      	cmp	r3, #1
 800c2f2:	d101      	bne.n	800c2f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2f4:	2302      	movs	r3, #2
 800c2f6:	e05a      	b.n	800c3ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2202      	movs	r2, #2
 800c304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	689b      	ldr	r3, [r3, #8]
 800c316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c31e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	68fa      	ldr	r2, [r7, #12]
 800c326:	4313      	orrs	r3, r2
 800c328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	4a21      	ldr	r2, [pc, #132]	; (800c3bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c338:	4293      	cmp	r3, r2
 800c33a:	d022      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c344:	d01d      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	4a1d      	ldr	r2, [pc, #116]	; (800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d018      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	4a1b      	ldr	r2, [pc, #108]	; (800c3c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c356:	4293      	cmp	r3, r2
 800c358:	d013      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a1a      	ldr	r2, [pc, #104]	; (800c3c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d00e      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a18      	ldr	r2, [pc, #96]	; (800c3cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d009      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4a17      	ldr	r2, [pc, #92]	; (800c3d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d004      	beq.n	800c382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4a15      	ldr	r2, [pc, #84]	; (800c3d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c37e:	4293      	cmp	r3, r2
 800c380:	d10c      	bne.n	800c39c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	68ba      	ldr	r2, [r7, #8]
 800c390:	4313      	orrs	r3, r2
 800c392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68ba      	ldr	r2, [r7, #8]
 800c39a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr
 800c3ba:	bf00      	nop
 800c3bc:	40010000 	.word	0x40010000
 800c3c0:	40000400 	.word	0x40000400
 800c3c4:	40000800 	.word	0x40000800
 800c3c8:	40000c00 	.word	0x40000c00
 800c3cc:	40010400 	.word	0x40010400
 800c3d0:	40014000 	.word	0x40014000
 800c3d4:	40001800 	.word	0x40001800

0800c3d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b085      	sub	sp, #20
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	d101      	bne.n	800c3f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3f0:	2302      	movs	r3, #2
 800c3f2:	e03d      	b.n	800c470 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2201      	movs	r2, #1
 800c3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	4313      	orrs	r3, r2
 800c408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	4313      	orrs	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4313      	orrs	r3, r2
 800c432:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	4313      	orrs	r3, r2
 800c440:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	695b      	ldr	r3, [r3, #20]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	4313      	orrs	r3, r2
 800c45c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	2200      	movs	r2, #0
 800c46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b083      	sub	sp, #12
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c484:	bf00      	nop
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c498:	bf00      	nop
 800c49a:	370c      	adds	r7, #12
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr

0800c4a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d101      	bne.n	800c4b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	e03f      	b.n	800c536 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d106      	bne.n	800c4d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7f9 f89c 	bl	8005608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2224      	movs	r2, #36	; 0x24
 800c4d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	68da      	ldr	r2, [r3, #12]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4e8:	6878      	ldr	r0, [r7, #4]
 800c4ea:	f000 f829 	bl	800c540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	691a      	ldr	r2, [r3, #16]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c4fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	695a      	ldr	r2, [r3, #20]
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c50c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c51c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2200      	movs	r2, #0
 800c522:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2220      	movs	r2, #32
 800c528:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2220      	movs	r2, #32
 800c530:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3708      	adds	r7, #8
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
	...

0800c540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	691b      	ldr	r3, [r3, #16]
 800c550:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	68da      	ldr	r2, [r3, #12]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	430a      	orrs	r2, r1
 800c55e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	689a      	ldr	r2, [r3, #8]
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	431a      	orrs	r2, r3
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	695b      	ldr	r3, [r3, #20]
 800c56e:	431a      	orrs	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	69db      	ldr	r3, [r3, #28]
 800c574:	4313      	orrs	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c582:	f023 030c 	bic.w	r3, r3, #12
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	6812      	ldr	r2, [r2, #0]
 800c58a:	68f9      	ldr	r1, [r7, #12]
 800c58c:	430b      	orrs	r3, r1
 800c58e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	695b      	ldr	r3, [r3, #20]
 800c596:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	699a      	ldr	r2, [r3, #24]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5ae:	f040 818b 	bne.w	800c8c8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4ac1      	ldr	r2, [pc, #772]	; (800c8bc <UART_SetConfig+0x37c>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d005      	beq.n	800c5c8 <UART_SetConfig+0x88>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4abf      	ldr	r2, [pc, #764]	; (800c8c0 <UART_SetConfig+0x380>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	f040 80bd 	bne.w	800c742 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c5c8:	f7fc fbcc 	bl	8008d64 <HAL_RCC_GetPCLK2Freq>
 800c5cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	461d      	mov	r5, r3
 800c5d2:	f04f 0600 	mov.w	r6, #0
 800c5d6:	46a8      	mov	r8, r5
 800c5d8:	46b1      	mov	r9, r6
 800c5da:	eb18 0308 	adds.w	r3, r8, r8
 800c5de:	eb49 0409 	adc.w	r4, r9, r9
 800c5e2:	4698      	mov	r8, r3
 800c5e4:	46a1      	mov	r9, r4
 800c5e6:	eb18 0805 	adds.w	r8, r8, r5
 800c5ea:	eb49 0906 	adc.w	r9, r9, r6
 800c5ee:	f04f 0100 	mov.w	r1, #0
 800c5f2:	f04f 0200 	mov.w	r2, #0
 800c5f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c5fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c5fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c602:	4688      	mov	r8, r1
 800c604:	4691      	mov	r9, r2
 800c606:	eb18 0005 	adds.w	r0, r8, r5
 800c60a:	eb49 0106 	adc.w	r1, r9, r6
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	685b      	ldr	r3, [r3, #4]
 800c612:	461d      	mov	r5, r3
 800c614:	f04f 0600 	mov.w	r6, #0
 800c618:	196b      	adds	r3, r5, r5
 800c61a:	eb46 0406 	adc.w	r4, r6, r6
 800c61e:	461a      	mov	r2, r3
 800c620:	4623      	mov	r3, r4
 800c622:	f7f4 fb49 	bl	8000cb8 <__aeabi_uldivmod>
 800c626:	4603      	mov	r3, r0
 800c628:	460c      	mov	r4, r1
 800c62a:	461a      	mov	r2, r3
 800c62c:	4ba5      	ldr	r3, [pc, #660]	; (800c8c4 <UART_SetConfig+0x384>)
 800c62e:	fba3 2302 	umull	r2, r3, r3, r2
 800c632:	095b      	lsrs	r3, r3, #5
 800c634:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	461d      	mov	r5, r3
 800c63c:	f04f 0600 	mov.w	r6, #0
 800c640:	46a9      	mov	r9, r5
 800c642:	46b2      	mov	sl, r6
 800c644:	eb19 0309 	adds.w	r3, r9, r9
 800c648:	eb4a 040a 	adc.w	r4, sl, sl
 800c64c:	4699      	mov	r9, r3
 800c64e:	46a2      	mov	sl, r4
 800c650:	eb19 0905 	adds.w	r9, r9, r5
 800c654:	eb4a 0a06 	adc.w	sl, sl, r6
 800c658:	f04f 0100 	mov.w	r1, #0
 800c65c:	f04f 0200 	mov.w	r2, #0
 800c660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c664:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c668:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c66c:	4689      	mov	r9, r1
 800c66e:	4692      	mov	sl, r2
 800c670:	eb19 0005 	adds.w	r0, r9, r5
 800c674:	eb4a 0106 	adc.w	r1, sl, r6
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	461d      	mov	r5, r3
 800c67e:	f04f 0600 	mov.w	r6, #0
 800c682:	196b      	adds	r3, r5, r5
 800c684:	eb46 0406 	adc.w	r4, r6, r6
 800c688:	461a      	mov	r2, r3
 800c68a:	4623      	mov	r3, r4
 800c68c:	f7f4 fb14 	bl	8000cb8 <__aeabi_uldivmod>
 800c690:	4603      	mov	r3, r0
 800c692:	460c      	mov	r4, r1
 800c694:	461a      	mov	r2, r3
 800c696:	4b8b      	ldr	r3, [pc, #556]	; (800c8c4 <UART_SetConfig+0x384>)
 800c698:	fba3 1302 	umull	r1, r3, r3, r2
 800c69c:	095b      	lsrs	r3, r3, #5
 800c69e:	2164      	movs	r1, #100	; 0x64
 800c6a0:	fb01 f303 	mul.w	r3, r1, r3
 800c6a4:	1ad3      	subs	r3, r2, r3
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	3332      	adds	r3, #50	; 0x32
 800c6aa:	4a86      	ldr	r2, [pc, #536]	; (800c8c4 <UART_SetConfig+0x384>)
 800c6ac:	fba2 2303 	umull	r2, r3, r2, r3
 800c6b0:	095b      	lsrs	r3, r3, #5
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c6b8:	4498      	add	r8, r3
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	461d      	mov	r5, r3
 800c6be:	f04f 0600 	mov.w	r6, #0
 800c6c2:	46a9      	mov	r9, r5
 800c6c4:	46b2      	mov	sl, r6
 800c6c6:	eb19 0309 	adds.w	r3, r9, r9
 800c6ca:	eb4a 040a 	adc.w	r4, sl, sl
 800c6ce:	4699      	mov	r9, r3
 800c6d0:	46a2      	mov	sl, r4
 800c6d2:	eb19 0905 	adds.w	r9, r9, r5
 800c6d6:	eb4a 0a06 	adc.w	sl, sl, r6
 800c6da:	f04f 0100 	mov.w	r1, #0
 800c6de:	f04f 0200 	mov.w	r2, #0
 800c6e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c6e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c6ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c6ee:	4689      	mov	r9, r1
 800c6f0:	4692      	mov	sl, r2
 800c6f2:	eb19 0005 	adds.w	r0, r9, r5
 800c6f6:	eb4a 0106 	adc.w	r1, sl, r6
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	461d      	mov	r5, r3
 800c700:	f04f 0600 	mov.w	r6, #0
 800c704:	196b      	adds	r3, r5, r5
 800c706:	eb46 0406 	adc.w	r4, r6, r6
 800c70a:	461a      	mov	r2, r3
 800c70c:	4623      	mov	r3, r4
 800c70e:	f7f4 fad3 	bl	8000cb8 <__aeabi_uldivmod>
 800c712:	4603      	mov	r3, r0
 800c714:	460c      	mov	r4, r1
 800c716:	461a      	mov	r2, r3
 800c718:	4b6a      	ldr	r3, [pc, #424]	; (800c8c4 <UART_SetConfig+0x384>)
 800c71a:	fba3 1302 	umull	r1, r3, r3, r2
 800c71e:	095b      	lsrs	r3, r3, #5
 800c720:	2164      	movs	r1, #100	; 0x64
 800c722:	fb01 f303 	mul.w	r3, r1, r3
 800c726:	1ad3      	subs	r3, r2, r3
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	3332      	adds	r3, #50	; 0x32
 800c72c:	4a65      	ldr	r2, [pc, #404]	; (800c8c4 <UART_SetConfig+0x384>)
 800c72e:	fba2 2303 	umull	r2, r3, r2, r3
 800c732:	095b      	lsrs	r3, r3, #5
 800c734:	f003 0207 	and.w	r2, r3, #7
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	4442      	add	r2, r8
 800c73e:	609a      	str	r2, [r3, #8]
 800c740:	e26f      	b.n	800cc22 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c742:	f7fc fafb 	bl	8008d3c <HAL_RCC_GetPCLK1Freq>
 800c746:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	461d      	mov	r5, r3
 800c74c:	f04f 0600 	mov.w	r6, #0
 800c750:	46a8      	mov	r8, r5
 800c752:	46b1      	mov	r9, r6
 800c754:	eb18 0308 	adds.w	r3, r8, r8
 800c758:	eb49 0409 	adc.w	r4, r9, r9
 800c75c:	4698      	mov	r8, r3
 800c75e:	46a1      	mov	r9, r4
 800c760:	eb18 0805 	adds.w	r8, r8, r5
 800c764:	eb49 0906 	adc.w	r9, r9, r6
 800c768:	f04f 0100 	mov.w	r1, #0
 800c76c:	f04f 0200 	mov.w	r2, #0
 800c770:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c774:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c778:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c77c:	4688      	mov	r8, r1
 800c77e:	4691      	mov	r9, r2
 800c780:	eb18 0005 	adds.w	r0, r8, r5
 800c784:	eb49 0106 	adc.w	r1, r9, r6
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	461d      	mov	r5, r3
 800c78e:	f04f 0600 	mov.w	r6, #0
 800c792:	196b      	adds	r3, r5, r5
 800c794:	eb46 0406 	adc.w	r4, r6, r6
 800c798:	461a      	mov	r2, r3
 800c79a:	4623      	mov	r3, r4
 800c79c:	f7f4 fa8c 	bl	8000cb8 <__aeabi_uldivmod>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	461a      	mov	r2, r3
 800c7a6:	4b47      	ldr	r3, [pc, #284]	; (800c8c4 <UART_SetConfig+0x384>)
 800c7a8:	fba3 2302 	umull	r2, r3, r3, r2
 800c7ac:	095b      	lsrs	r3, r3, #5
 800c7ae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	461d      	mov	r5, r3
 800c7b6:	f04f 0600 	mov.w	r6, #0
 800c7ba:	46a9      	mov	r9, r5
 800c7bc:	46b2      	mov	sl, r6
 800c7be:	eb19 0309 	adds.w	r3, r9, r9
 800c7c2:	eb4a 040a 	adc.w	r4, sl, sl
 800c7c6:	4699      	mov	r9, r3
 800c7c8:	46a2      	mov	sl, r4
 800c7ca:	eb19 0905 	adds.w	r9, r9, r5
 800c7ce:	eb4a 0a06 	adc.w	sl, sl, r6
 800c7d2:	f04f 0100 	mov.w	r1, #0
 800c7d6:	f04f 0200 	mov.w	r2, #0
 800c7da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c7de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c7e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c7e6:	4689      	mov	r9, r1
 800c7e8:	4692      	mov	sl, r2
 800c7ea:	eb19 0005 	adds.w	r0, r9, r5
 800c7ee:	eb4a 0106 	adc.w	r1, sl, r6
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	685b      	ldr	r3, [r3, #4]
 800c7f6:	461d      	mov	r5, r3
 800c7f8:	f04f 0600 	mov.w	r6, #0
 800c7fc:	196b      	adds	r3, r5, r5
 800c7fe:	eb46 0406 	adc.w	r4, r6, r6
 800c802:	461a      	mov	r2, r3
 800c804:	4623      	mov	r3, r4
 800c806:	f7f4 fa57 	bl	8000cb8 <__aeabi_uldivmod>
 800c80a:	4603      	mov	r3, r0
 800c80c:	460c      	mov	r4, r1
 800c80e:	461a      	mov	r2, r3
 800c810:	4b2c      	ldr	r3, [pc, #176]	; (800c8c4 <UART_SetConfig+0x384>)
 800c812:	fba3 1302 	umull	r1, r3, r3, r2
 800c816:	095b      	lsrs	r3, r3, #5
 800c818:	2164      	movs	r1, #100	; 0x64
 800c81a:	fb01 f303 	mul.w	r3, r1, r3
 800c81e:	1ad3      	subs	r3, r2, r3
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	3332      	adds	r3, #50	; 0x32
 800c824:	4a27      	ldr	r2, [pc, #156]	; (800c8c4 <UART_SetConfig+0x384>)
 800c826:	fba2 2303 	umull	r2, r3, r2, r3
 800c82a:	095b      	lsrs	r3, r3, #5
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c832:	4498      	add	r8, r3
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	461d      	mov	r5, r3
 800c838:	f04f 0600 	mov.w	r6, #0
 800c83c:	46a9      	mov	r9, r5
 800c83e:	46b2      	mov	sl, r6
 800c840:	eb19 0309 	adds.w	r3, r9, r9
 800c844:	eb4a 040a 	adc.w	r4, sl, sl
 800c848:	4699      	mov	r9, r3
 800c84a:	46a2      	mov	sl, r4
 800c84c:	eb19 0905 	adds.w	r9, r9, r5
 800c850:	eb4a 0a06 	adc.w	sl, sl, r6
 800c854:	f04f 0100 	mov.w	r1, #0
 800c858:	f04f 0200 	mov.w	r2, #0
 800c85c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c860:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c864:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c868:	4689      	mov	r9, r1
 800c86a:	4692      	mov	sl, r2
 800c86c:	eb19 0005 	adds.w	r0, r9, r5
 800c870:	eb4a 0106 	adc.w	r1, sl, r6
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	461d      	mov	r5, r3
 800c87a:	f04f 0600 	mov.w	r6, #0
 800c87e:	196b      	adds	r3, r5, r5
 800c880:	eb46 0406 	adc.w	r4, r6, r6
 800c884:	461a      	mov	r2, r3
 800c886:	4623      	mov	r3, r4
 800c888:	f7f4 fa16 	bl	8000cb8 <__aeabi_uldivmod>
 800c88c:	4603      	mov	r3, r0
 800c88e:	460c      	mov	r4, r1
 800c890:	461a      	mov	r2, r3
 800c892:	4b0c      	ldr	r3, [pc, #48]	; (800c8c4 <UART_SetConfig+0x384>)
 800c894:	fba3 1302 	umull	r1, r3, r3, r2
 800c898:	095b      	lsrs	r3, r3, #5
 800c89a:	2164      	movs	r1, #100	; 0x64
 800c89c:	fb01 f303 	mul.w	r3, r1, r3
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	00db      	lsls	r3, r3, #3
 800c8a4:	3332      	adds	r3, #50	; 0x32
 800c8a6:	4a07      	ldr	r2, [pc, #28]	; (800c8c4 <UART_SetConfig+0x384>)
 800c8a8:	fba2 2303 	umull	r2, r3, r2, r3
 800c8ac:	095b      	lsrs	r3, r3, #5
 800c8ae:	f003 0207 	and.w	r2, r3, #7
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	4442      	add	r2, r8
 800c8b8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c8ba:	e1b2      	b.n	800cc22 <UART_SetConfig+0x6e2>
 800c8bc:	40011000 	.word	0x40011000
 800c8c0:	40011400 	.word	0x40011400
 800c8c4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4ad7      	ldr	r2, [pc, #860]	; (800cc2c <UART_SetConfig+0x6ec>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d005      	beq.n	800c8de <UART_SetConfig+0x39e>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4ad6      	ldr	r2, [pc, #856]	; (800cc30 <UART_SetConfig+0x6f0>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	f040 80d1 	bne.w	800ca80 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c8de:	f7fc fa41 	bl	8008d64 <HAL_RCC_GetPCLK2Freq>
 800c8e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	469a      	mov	sl, r3
 800c8e8:	f04f 0b00 	mov.w	fp, #0
 800c8ec:	46d0      	mov	r8, sl
 800c8ee:	46d9      	mov	r9, fp
 800c8f0:	eb18 0308 	adds.w	r3, r8, r8
 800c8f4:	eb49 0409 	adc.w	r4, r9, r9
 800c8f8:	4698      	mov	r8, r3
 800c8fa:	46a1      	mov	r9, r4
 800c8fc:	eb18 080a 	adds.w	r8, r8, sl
 800c900:	eb49 090b 	adc.w	r9, r9, fp
 800c904:	f04f 0100 	mov.w	r1, #0
 800c908:	f04f 0200 	mov.w	r2, #0
 800c90c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c910:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c914:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c918:	4688      	mov	r8, r1
 800c91a:	4691      	mov	r9, r2
 800c91c:	eb1a 0508 	adds.w	r5, sl, r8
 800c920:	eb4b 0609 	adc.w	r6, fp, r9
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	685b      	ldr	r3, [r3, #4]
 800c928:	4619      	mov	r1, r3
 800c92a:	f04f 0200 	mov.w	r2, #0
 800c92e:	f04f 0300 	mov.w	r3, #0
 800c932:	f04f 0400 	mov.w	r4, #0
 800c936:	0094      	lsls	r4, r2, #2
 800c938:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c93c:	008b      	lsls	r3, r1, #2
 800c93e:	461a      	mov	r2, r3
 800c940:	4623      	mov	r3, r4
 800c942:	4628      	mov	r0, r5
 800c944:	4631      	mov	r1, r6
 800c946:	f7f4 f9b7 	bl	8000cb8 <__aeabi_uldivmod>
 800c94a:	4603      	mov	r3, r0
 800c94c:	460c      	mov	r4, r1
 800c94e:	461a      	mov	r2, r3
 800c950:	4bb8      	ldr	r3, [pc, #736]	; (800cc34 <UART_SetConfig+0x6f4>)
 800c952:	fba3 2302 	umull	r2, r3, r3, r2
 800c956:	095b      	lsrs	r3, r3, #5
 800c958:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	469b      	mov	fp, r3
 800c960:	f04f 0c00 	mov.w	ip, #0
 800c964:	46d9      	mov	r9, fp
 800c966:	46e2      	mov	sl, ip
 800c968:	eb19 0309 	adds.w	r3, r9, r9
 800c96c:	eb4a 040a 	adc.w	r4, sl, sl
 800c970:	4699      	mov	r9, r3
 800c972:	46a2      	mov	sl, r4
 800c974:	eb19 090b 	adds.w	r9, r9, fp
 800c978:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c97c:	f04f 0100 	mov.w	r1, #0
 800c980:	f04f 0200 	mov.w	r2, #0
 800c984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c988:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c98c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c990:	4689      	mov	r9, r1
 800c992:	4692      	mov	sl, r2
 800c994:	eb1b 0509 	adds.w	r5, fp, r9
 800c998:	eb4c 060a 	adc.w	r6, ip, sl
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	685b      	ldr	r3, [r3, #4]
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	f04f 0200 	mov.w	r2, #0
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	f04f 0400 	mov.w	r4, #0
 800c9ae:	0094      	lsls	r4, r2, #2
 800c9b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c9b4:	008b      	lsls	r3, r1, #2
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	4623      	mov	r3, r4
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	4631      	mov	r1, r6
 800c9be:	f7f4 f97b 	bl	8000cb8 <__aeabi_uldivmod>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4b9a      	ldr	r3, [pc, #616]	; (800cc34 <UART_SetConfig+0x6f4>)
 800c9ca:	fba3 1302 	umull	r1, r3, r3, r2
 800c9ce:	095b      	lsrs	r3, r3, #5
 800c9d0:	2164      	movs	r1, #100	; 0x64
 800c9d2:	fb01 f303 	mul.w	r3, r1, r3
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	011b      	lsls	r3, r3, #4
 800c9da:	3332      	adds	r3, #50	; 0x32
 800c9dc:	4a95      	ldr	r2, [pc, #596]	; (800cc34 <UART_SetConfig+0x6f4>)
 800c9de:	fba2 2303 	umull	r2, r3, r2, r3
 800c9e2:	095b      	lsrs	r3, r3, #5
 800c9e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9e8:	4498      	add	r8, r3
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	469b      	mov	fp, r3
 800c9ee:	f04f 0c00 	mov.w	ip, #0
 800c9f2:	46d9      	mov	r9, fp
 800c9f4:	46e2      	mov	sl, ip
 800c9f6:	eb19 0309 	adds.w	r3, r9, r9
 800c9fa:	eb4a 040a 	adc.w	r4, sl, sl
 800c9fe:	4699      	mov	r9, r3
 800ca00:	46a2      	mov	sl, r4
 800ca02:	eb19 090b 	adds.w	r9, r9, fp
 800ca06:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ca0a:	f04f 0100 	mov.w	r1, #0
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca16:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca1a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca1e:	4689      	mov	r9, r1
 800ca20:	4692      	mov	sl, r2
 800ca22:	eb1b 0509 	adds.w	r5, fp, r9
 800ca26:	eb4c 060a 	adc.w	r6, ip, sl
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	4619      	mov	r1, r3
 800ca30:	f04f 0200 	mov.w	r2, #0
 800ca34:	f04f 0300 	mov.w	r3, #0
 800ca38:	f04f 0400 	mov.w	r4, #0
 800ca3c:	0094      	lsls	r4, r2, #2
 800ca3e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ca42:	008b      	lsls	r3, r1, #2
 800ca44:	461a      	mov	r2, r3
 800ca46:	4623      	mov	r3, r4
 800ca48:	4628      	mov	r0, r5
 800ca4a:	4631      	mov	r1, r6
 800ca4c:	f7f4 f934 	bl	8000cb8 <__aeabi_uldivmod>
 800ca50:	4603      	mov	r3, r0
 800ca52:	460c      	mov	r4, r1
 800ca54:	461a      	mov	r2, r3
 800ca56:	4b77      	ldr	r3, [pc, #476]	; (800cc34 <UART_SetConfig+0x6f4>)
 800ca58:	fba3 1302 	umull	r1, r3, r3, r2
 800ca5c:	095b      	lsrs	r3, r3, #5
 800ca5e:	2164      	movs	r1, #100	; 0x64
 800ca60:	fb01 f303 	mul.w	r3, r1, r3
 800ca64:	1ad3      	subs	r3, r2, r3
 800ca66:	011b      	lsls	r3, r3, #4
 800ca68:	3332      	adds	r3, #50	; 0x32
 800ca6a:	4a72      	ldr	r2, [pc, #456]	; (800cc34 <UART_SetConfig+0x6f4>)
 800ca6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ca70:	095b      	lsrs	r3, r3, #5
 800ca72:	f003 020f 	and.w	r2, r3, #15
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4442      	add	r2, r8
 800ca7c:	609a      	str	r2, [r3, #8]
 800ca7e:	e0d0      	b.n	800cc22 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca80:	f7fc f95c 	bl	8008d3c <HAL_RCC_GetPCLK1Freq>
 800ca84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	469a      	mov	sl, r3
 800ca8a:	f04f 0b00 	mov.w	fp, #0
 800ca8e:	46d0      	mov	r8, sl
 800ca90:	46d9      	mov	r9, fp
 800ca92:	eb18 0308 	adds.w	r3, r8, r8
 800ca96:	eb49 0409 	adc.w	r4, r9, r9
 800ca9a:	4698      	mov	r8, r3
 800ca9c:	46a1      	mov	r9, r4
 800ca9e:	eb18 080a 	adds.w	r8, r8, sl
 800caa2:	eb49 090b 	adc.w	r9, r9, fp
 800caa6:	f04f 0100 	mov.w	r1, #0
 800caaa:	f04f 0200 	mov.w	r2, #0
 800caae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cab2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cab6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800caba:	4688      	mov	r8, r1
 800cabc:	4691      	mov	r9, r2
 800cabe:	eb1a 0508 	adds.w	r5, sl, r8
 800cac2:	eb4b 0609 	adc.w	r6, fp, r9
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	685b      	ldr	r3, [r3, #4]
 800caca:	4619      	mov	r1, r3
 800cacc:	f04f 0200 	mov.w	r2, #0
 800cad0:	f04f 0300 	mov.w	r3, #0
 800cad4:	f04f 0400 	mov.w	r4, #0
 800cad8:	0094      	lsls	r4, r2, #2
 800cada:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cade:	008b      	lsls	r3, r1, #2
 800cae0:	461a      	mov	r2, r3
 800cae2:	4623      	mov	r3, r4
 800cae4:	4628      	mov	r0, r5
 800cae6:	4631      	mov	r1, r6
 800cae8:	f7f4 f8e6 	bl	8000cb8 <__aeabi_uldivmod>
 800caec:	4603      	mov	r3, r0
 800caee:	460c      	mov	r4, r1
 800caf0:	461a      	mov	r2, r3
 800caf2:	4b50      	ldr	r3, [pc, #320]	; (800cc34 <UART_SetConfig+0x6f4>)
 800caf4:	fba3 2302 	umull	r2, r3, r3, r2
 800caf8:	095b      	lsrs	r3, r3, #5
 800cafa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	469b      	mov	fp, r3
 800cb02:	f04f 0c00 	mov.w	ip, #0
 800cb06:	46d9      	mov	r9, fp
 800cb08:	46e2      	mov	sl, ip
 800cb0a:	eb19 0309 	adds.w	r3, r9, r9
 800cb0e:	eb4a 040a 	adc.w	r4, sl, sl
 800cb12:	4699      	mov	r9, r3
 800cb14:	46a2      	mov	sl, r4
 800cb16:	eb19 090b 	adds.w	r9, r9, fp
 800cb1a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb1e:	f04f 0100 	mov.w	r1, #0
 800cb22:	f04f 0200 	mov.w	r2, #0
 800cb26:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb2a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb2e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb32:	4689      	mov	r9, r1
 800cb34:	4692      	mov	sl, r2
 800cb36:	eb1b 0509 	adds.w	r5, fp, r9
 800cb3a:	eb4c 060a 	adc.w	r6, ip, sl
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	4619      	mov	r1, r3
 800cb44:	f04f 0200 	mov.w	r2, #0
 800cb48:	f04f 0300 	mov.w	r3, #0
 800cb4c:	f04f 0400 	mov.w	r4, #0
 800cb50:	0094      	lsls	r4, r2, #2
 800cb52:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb56:	008b      	lsls	r3, r1, #2
 800cb58:	461a      	mov	r2, r3
 800cb5a:	4623      	mov	r3, r4
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	4631      	mov	r1, r6
 800cb60:	f7f4 f8aa 	bl	8000cb8 <__aeabi_uldivmod>
 800cb64:	4603      	mov	r3, r0
 800cb66:	460c      	mov	r4, r1
 800cb68:	461a      	mov	r2, r3
 800cb6a:	4b32      	ldr	r3, [pc, #200]	; (800cc34 <UART_SetConfig+0x6f4>)
 800cb6c:	fba3 1302 	umull	r1, r3, r3, r2
 800cb70:	095b      	lsrs	r3, r3, #5
 800cb72:	2164      	movs	r1, #100	; 0x64
 800cb74:	fb01 f303 	mul.w	r3, r1, r3
 800cb78:	1ad3      	subs	r3, r2, r3
 800cb7a:	011b      	lsls	r3, r3, #4
 800cb7c:	3332      	adds	r3, #50	; 0x32
 800cb7e:	4a2d      	ldr	r2, [pc, #180]	; (800cc34 <UART_SetConfig+0x6f4>)
 800cb80:	fba2 2303 	umull	r2, r3, r2, r3
 800cb84:	095b      	lsrs	r3, r3, #5
 800cb86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb8a:	4498      	add	r8, r3
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	469b      	mov	fp, r3
 800cb90:	f04f 0c00 	mov.w	ip, #0
 800cb94:	46d9      	mov	r9, fp
 800cb96:	46e2      	mov	sl, ip
 800cb98:	eb19 0309 	adds.w	r3, r9, r9
 800cb9c:	eb4a 040a 	adc.w	r4, sl, sl
 800cba0:	4699      	mov	r9, r3
 800cba2:	46a2      	mov	sl, r4
 800cba4:	eb19 090b 	adds.w	r9, r9, fp
 800cba8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cbac:	f04f 0100 	mov.w	r1, #0
 800cbb0:	f04f 0200 	mov.w	r2, #0
 800cbb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbb8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cbbc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cbc0:	4689      	mov	r9, r1
 800cbc2:	4692      	mov	sl, r2
 800cbc4:	eb1b 0509 	adds.w	r5, fp, r9
 800cbc8:	eb4c 060a 	adc.w	r6, ip, sl
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f04f 0200 	mov.w	r2, #0
 800cbd6:	f04f 0300 	mov.w	r3, #0
 800cbda:	f04f 0400 	mov.w	r4, #0
 800cbde:	0094      	lsls	r4, r2, #2
 800cbe0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cbe4:	008b      	lsls	r3, r1, #2
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	4623      	mov	r3, r4
 800cbea:	4628      	mov	r0, r5
 800cbec:	4631      	mov	r1, r6
 800cbee:	f7f4 f863 	bl	8000cb8 <__aeabi_uldivmod>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	4b0e      	ldr	r3, [pc, #56]	; (800cc34 <UART_SetConfig+0x6f4>)
 800cbfa:	fba3 1302 	umull	r1, r3, r3, r2
 800cbfe:	095b      	lsrs	r3, r3, #5
 800cc00:	2164      	movs	r1, #100	; 0x64
 800cc02:	fb01 f303 	mul.w	r3, r1, r3
 800cc06:	1ad3      	subs	r3, r2, r3
 800cc08:	011b      	lsls	r3, r3, #4
 800cc0a:	3332      	adds	r3, #50	; 0x32
 800cc0c:	4a09      	ldr	r2, [pc, #36]	; (800cc34 <UART_SetConfig+0x6f4>)
 800cc0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc12:	095b      	lsrs	r3, r3, #5
 800cc14:	f003 020f 	and.w	r2, r3, #15
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4442      	add	r2, r8
 800cc1e:	609a      	str	r2, [r3, #8]
}
 800cc20:	e7ff      	b.n	800cc22 <UART_SetConfig+0x6e2>
 800cc22:	bf00      	nop
 800cc24:	3714      	adds	r7, #20
 800cc26:	46bd      	mov	sp, r7
 800cc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc2c:	40011000 	.word	0x40011000
 800cc30:	40011400 	.word	0x40011400
 800cc34:	51eb851f 	.word	0x51eb851f

0800cc38 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cc38:	b084      	sub	sp, #16
 800cc3a:	b480      	push	{r7}
 800cc3c:	b085      	sub	sp, #20
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
 800cc42:	f107 001c 	add.w	r0, r7, #28
 800cc46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cc4e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cc50:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cc52:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cc54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cc56:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cc58:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cc5a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cc5e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cc62:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cc64:	68fa      	ldr	r2, [r7, #12]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cc72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cc76:	68fa      	ldr	r2, [r7, #12]
 800cc78:	431a      	orrs	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	b004      	add	sp, #16
 800cc8c:	4770      	bx	lr

0800cc8e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cc8e:	b480      	push	{r7}
 800cc90:	b083      	sub	sp, #12
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	681a      	ldr	r2, [r3, #0]
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ccd8:	2002      	movs	r0, #2
 800ccda:	f7f9 fbc5 	bl	8006468 <HAL_Delay>
  
  return HAL_OK;
 800ccde:	2300      	movs	r3, #0
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 0303 	and.w	r3, r3, #3
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	370c      	adds	r7, #12
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd22:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cd28:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cd2e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cd3e:	f023 030f 	bic.w	r3, r3, #15
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	431a      	orrs	r2, r3
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3714      	adds	r7, #20
 800cd50:	46bd      	mov	sp, r7
 800cd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cd58:	b480      	push	{r7}
 800cd5a:	b083      	sub	sp, #12
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	691b      	ldr	r3, [r3, #16]
 800cd64:	b2db      	uxtb	r3, r3
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr

0800cd72 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cd72:	b480      	push	{r7}
 800cd74:	b085      	sub	sp, #20
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3314      	adds	r3, #20
 800cd80:	461a      	mov	r2, r3
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	4413      	add	r3, r2
 800cd86:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	681b      	ldr	r3, [r3, #0]
}  
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3714      	adds	r7, #20
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr

0800cd98 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b085      	sub	sp, #20
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
 800cda0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	685a      	ldr	r2, [r3, #4]
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdbe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cdc4:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cdca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	431a      	orrs	r2, r3
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0

}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b088      	sub	sp, #32
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800cdfe:	2310      	movs	r3, #16
 800ce00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce02:	2340      	movs	r3, #64	; 0x40
 800ce04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce06:	2300      	movs	r3, #0
 800ce08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce10:	f107 0308 	add.w	r3, r7, #8
 800ce14:	4619      	mov	r1, r3
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff ff74 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ce1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce20:	2110      	movs	r1, #16
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 fa40 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800ce28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce2a:	69fb      	ldr	r3, [r7, #28]
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	3720      	adds	r7, #32
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bd80      	pop	{r7, pc}

0800ce34 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b088      	sub	sp, #32
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ce42:	2311      	movs	r3, #17
 800ce44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce46:	2340      	movs	r3, #64	; 0x40
 800ce48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce54:	f107 0308 	add.w	r3, r7, #8
 800ce58:	4619      	mov	r1, r3
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f7ff ff52 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ce60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce64:	2111      	movs	r1, #17
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fa1e 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800ce6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
}
 800ce70:	4618      	mov	r0, r3
 800ce72:	3720      	adds	r7, #32
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ce86:	2312      	movs	r3, #18
 800ce88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce8a:	2340      	movs	r3, #64	; 0x40
 800ce8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce98:	f107 0308 	add.w	r3, r7, #8
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f7ff ff30 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cea8:	2112      	movs	r1, #18
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 f9fc 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800ceb0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ceb2:	69fb      	ldr	r3, [r7, #28]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3720      	adds	r7, #32
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b088      	sub	sp, #32
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ceca:	2318      	movs	r3, #24
 800cecc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cece:	2340      	movs	r3, #64	; 0x40
 800ced0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ced2:	2300      	movs	r3, #0
 800ced4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ced6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ceda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cedc:	f107 0308 	add.w	r3, r7, #8
 800cee0:	4619      	mov	r1, r3
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff ff0e 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cee8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceec:	2118      	movs	r1, #24
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f000 f9da 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800cef4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cef6:	69fb      	ldr	r3, [r7, #28]
}
 800cef8:	4618      	mov	r0, r3
 800cefa:	3720      	adds	r7, #32
 800cefc:	46bd      	mov	sp, r7
 800cefe:	bd80      	pop	{r7, pc}

0800cf00 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b088      	sub	sp, #32
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cf0e:	2319      	movs	r3, #25
 800cf10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf12:	2340      	movs	r3, #64	; 0x40
 800cf14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf16:	2300      	movs	r3, #0
 800cf18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf20:	f107 0308 	add.w	r3, r7, #8
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff feec 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cf2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf30:	2119      	movs	r1, #25
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f9b8 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800cf38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf3a:	69fb      	ldr	r3, [r7, #28]
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3720      	adds	r7, #32
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b088      	sub	sp, #32
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cf50:	230c      	movs	r3, #12
 800cf52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf54:	2340      	movs	r3, #64	; 0x40
 800cf56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf62:	f107 0308 	add.w	r3, r7, #8
 800cf66:	4619      	mov	r1, r3
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f7ff fecb 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cf6e:	4a05      	ldr	r2, [pc, #20]	; (800cf84 <SDMMC_CmdStopTransfer+0x40>)
 800cf70:	210c      	movs	r1, #12
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 f998 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800cf78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf7a:	69fb      	ldr	r3, [r7, #28]
}
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	3720      	adds	r7, #32
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	05f5e100 	.word	0x05f5e100

0800cf88 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	60f8      	str	r0, [r7, #12]
 800cf90:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cf98:	2307      	movs	r3, #7
 800cf9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf9c:	2340      	movs	r3, #64	; 0x40
 800cf9e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfa8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfaa:	f107 0310 	add.w	r3, r7, #16
 800cfae:	4619      	mov	r1, r3
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f7ff fea7 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cfb6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfba:	2107      	movs	r1, #7
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f000 f973 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800cfc2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	3728      	adds	r7, #40	; 0x28
 800cfca:	46bd      	mov	sp, r7
 800cfcc:	bd80      	pop	{r7, pc}

0800cfce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cfce:	b580      	push	{r7, lr}
 800cfd0:	b088      	sub	sp, #32
 800cfd2:	af00      	add	r7, sp, #0
 800cfd4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfec:	f107 0308 	add.w	r3, r7, #8
 800cff0:	4619      	mov	r1, r3
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f7ff fe86 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 f92d 	bl	800d258 <SDMMC_GetCmdError>
 800cffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d000:	69fb      	ldr	r3, [r7, #28]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3720      	adds	r7, #32
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}

0800d00a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b088      	sub	sp, #32
 800d00e:	af00      	add	r7, sp, #0
 800d010:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d012:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800d016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d018:	2308      	movs	r3, #8
 800d01a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d01c:	2340      	movs	r3, #64	; 0x40
 800d01e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d020:	2300      	movs	r3, #0
 800d022:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d024:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d028:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d02a:	f107 0308 	add.w	r3, r7, #8
 800d02e:	4619      	mov	r1, r3
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff fe67 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 fb16 	bl	800d668 <SDMMC_GetCmdResp7>
 800d03c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d03e:	69fb      	ldr	r3, [r7, #28]
}
 800d040:	4618      	mov	r0, r3
 800d042:	3720      	adds	r7, #32
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b088      	sub	sp, #32
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d056:	2337      	movs	r3, #55	; 0x37
 800d058:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d05a:	2340      	movs	r3, #64	; 0x40
 800d05c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d05e:	2300      	movs	r3, #0
 800d060:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d066:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d068:	f107 0308 	add.w	r3, r7, #8
 800d06c:	4619      	mov	r1, r3
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f7ff fe48 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800d074:	f241 3288 	movw	r2, #5000	; 0x1388
 800d078:	2137      	movs	r1, #55	; 0x37
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f914 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800d080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d082:	69fb      	ldr	r3, [r7, #28]
}
 800d084:	4618      	mov	r0, r3
 800d086:	3720      	adds	r7, #32
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b088      	sub	sp, #32
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d0a2:	2329      	movs	r3, #41	; 0x29
 800d0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0a6:	2340      	movs	r3, #64	; 0x40
 800d0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0b4:	f107 0308 	add.w	r3, r7, #8
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f7ff fe22 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fa23 	bl	800d50c <SDMMC_GetCmdResp3>
 800d0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3720      	adds	r7, #32
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}

0800d0d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800d0d2:	b580      	push	{r7, lr}
 800d0d4:	b088      	sub	sp, #32
 800d0d6:	af00      	add	r7, sp, #0
 800d0d8:	6078      	str	r0, [r7, #4]
 800d0da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800d0e0:	2306      	movs	r3, #6
 800d0e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0e4:	2340      	movs	r3, #64	; 0x40
 800d0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0f2:	f107 0308 	add.w	r3, r7, #8
 800d0f6:	4619      	mov	r1, r3
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f7ff fe03 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800d0fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800d102:	2106      	movs	r1, #6
 800d104:	6878      	ldr	r0, [r7, #4]
 800d106:	f000 f8cf 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800d10a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d10c:	69fb      	ldr	r3, [r7, #28]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3720      	adds	r7, #32
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b088      	sub	sp, #32
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800d11e:	2300      	movs	r3, #0
 800d120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800d122:	2333      	movs	r3, #51	; 0x33
 800d124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d126:	2340      	movs	r3, #64	; 0x40
 800d128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d12a:	2300      	movs	r3, #0
 800d12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d132:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d134:	f107 0308 	add.w	r3, r7, #8
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff fde2 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d140:	f241 3288 	movw	r2, #5000	; 0x1388
 800d144:	2133      	movs	r1, #51	; 0x33
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f000 f8ae 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800d14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d14e:	69fb      	ldr	r3, [r7, #28]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3720      	adds	r7, #32
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b088      	sub	sp, #32
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d160:	2300      	movs	r3, #0
 800d162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d164:	2302      	movs	r3, #2
 800d166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d168:	23c0      	movs	r3, #192	; 0xc0
 800d16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d16c:	2300      	movs	r3, #0
 800d16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d176:	f107 0308 	add.w	r3, r7, #8
 800d17a:	4619      	mov	r1, r3
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7ff fdc1 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 f97c 	bl	800d480 <SDMMC_GetCmdResp2>
 800d188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d18a:	69fb      	ldr	r3, [r7, #28]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3720      	adds	r7, #32
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b088      	sub	sp, #32
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
 800d19c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d1a2:	2309      	movs	r3, #9
 800d1a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d1a6:	23c0      	movs	r3, #192	; 0xc0
 800d1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1b4:	f107 0308 	add.w	r3, r7, #8
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f7ff fda2 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 f95d 	bl	800d480 <SDMMC_GetCmdResp2>
 800d1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1c8:	69fb      	ldr	r3, [r7, #28]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3720      	adds	r7, #32
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b088      	sub	sp, #32
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d1e4:	2340      	movs	r3, #64	; 0x40
 800d1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d1f2:	f107 0308 	add.w	r3, r7, #8
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f7ff fd83 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d1fe:	683a      	ldr	r2, [r7, #0]
 800d200:	2103      	movs	r1, #3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 f9bc 	bl	800d580 <SDMMC_GetCmdResp6>
 800d208:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d20a:	69fb      	ldr	r3, [r7, #28]
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3720      	adds	r7, #32
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}

0800d214 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b088      	sub	sp, #32
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d222:	230d      	movs	r3, #13
 800d224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d226:	2340      	movs	r3, #64	; 0x40
 800d228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d22a:	2300      	movs	r3, #0
 800d22c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d234:	f107 0308 	add.w	r3, r7, #8
 800d238:	4619      	mov	r1, r3
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff fd62 	bl	800cd04 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d240:	f241 3288 	movw	r2, #5000	; 0x1388
 800d244:	210d      	movs	r1, #13
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 f82e 	bl	800d2a8 <SDMMC_GetCmdResp1>
 800d24c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d24e:	69fb      	ldr	r3, [r7, #28]
}
 800d250:	4618      	mov	r0, r3
 800d252:	3720      	adds	r7, #32
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d258:	b490      	push	{r4, r7}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d260:	4b0f      	ldr	r3, [pc, #60]	; (800d2a0 <SDMMC_GetCmdError+0x48>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a0f      	ldr	r2, [pc, #60]	; (800d2a4 <SDMMC_GetCmdError+0x4c>)
 800d266:	fba2 2303 	umull	r2, r3, r2, r3
 800d26a:	0a5b      	lsrs	r3, r3, #9
 800d26c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d270:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d274:	4623      	mov	r3, r4
 800d276:	1e5c      	subs	r4, r3, #1
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d102      	bne.n	800d282 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d27c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d280:	e009      	b.n	800d296 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0f2      	beq.n	800d274 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	22c5      	movs	r2, #197	; 0xc5
 800d292:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d294:	2300      	movs	r3, #0
}
 800d296:	4618      	mov	r0, r3
 800d298:	3708      	adds	r7, #8
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bc90      	pop	{r4, r7}
 800d29e:	4770      	bx	lr
 800d2a0:	20000000 	.word	0x20000000
 800d2a4:	10624dd3 	.word	0x10624dd3

0800d2a8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d2a8:	b590      	push	{r4, r7, lr}
 800d2aa:	b087      	sub	sp, #28
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	60f8      	str	r0, [r7, #12]
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	607a      	str	r2, [r7, #4]
 800d2b4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d2b6:	4b6f      	ldr	r3, [pc, #444]	; (800d474 <SDMMC_GetCmdResp1+0x1cc>)
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	4a6f      	ldr	r2, [pc, #444]	; (800d478 <SDMMC_GetCmdResp1+0x1d0>)
 800d2bc:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c0:	0a5b      	lsrs	r3, r3, #9
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d2c8:	4623      	mov	r3, r4
 800d2ca:	1e5c      	subs	r4, r3, #1
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d102      	bne.n	800d2d6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2d4:	e0c9      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2da:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0f0      	beq.n	800d2c8 <SDMMC_GetCmdResp1+0x20>
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d1eb      	bne.n	800d2c8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f4:	f003 0304 	and.w	r3, r3, #4
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d004      	beq.n	800d306 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2204      	movs	r2, #4
 800d300:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d302:	2304      	movs	r3, #4
 800d304:	e0b1      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30a:	f003 0301 	and.w	r3, r3, #1
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d004      	beq.n	800d31c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2201      	movs	r2, #1
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d318:	2301      	movs	r3, #1
 800d31a:	e0a6      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	22c5      	movs	r2, #197	; 0xc5
 800d320:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7ff fd18 	bl	800cd58 <SDIO_GetCommandResponse>
 800d328:	4603      	mov	r3, r0
 800d32a:	461a      	mov	r2, r3
 800d32c:	7afb      	ldrb	r3, [r7, #11]
 800d32e:	4293      	cmp	r3, r2
 800d330:	d001      	beq.n	800d336 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d332:	2301      	movs	r3, #1
 800d334:	e099      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d336:	2100      	movs	r1, #0
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f7ff fd1a 	bl	800cd72 <SDIO_GetResponse>
 800d33e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	4b4e      	ldr	r3, [pc, #312]	; (800d47c <SDMMC_GetCmdResp1+0x1d4>)
 800d344:	4013      	ands	r3, r2
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d34a:	2300      	movs	r3, #0
 800d34c:	e08d      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d34e:	693b      	ldr	r3, [r7, #16]
 800d350:	2b00      	cmp	r3, #0
 800d352:	da02      	bge.n	800d35a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d358:	e087      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d364:	2340      	movs	r3, #64	; 0x40
 800d366:	e080      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d372:	2380      	movs	r3, #128	; 0x80
 800d374:	e079      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d376:	693b      	ldr	r3, [r7, #16]
 800d378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d002      	beq.n	800d386 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d380:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d384:	e071      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d002      	beq.n	800d396 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d390:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d394:	e069      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d396:	693b      	ldr	r3, [r7, #16]
 800d398:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d002      	beq.n	800d3a6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d3a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3a4:	e061      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d002      	beq.n	800d3b6 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d3b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3b4:	e059      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d002      	beq.n	800d3c6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d3c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d3c4:	e051      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d002      	beq.n	800d3d6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d3d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d3d4:	e049      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d3d6:	693b      	ldr	r3, [r7, #16]
 800d3d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d002      	beq.n	800d3e6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d3e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d3e4:	e041      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d3e6:	693b      	ldr	r3, [r7, #16]
 800d3e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d002      	beq.n	800d3f6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d3f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d3f4:	e039      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d002      	beq.n	800d406 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d400:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d404:	e031      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d002      	beq.n	800d416 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d410:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d414:	e029      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d420:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d424:	e021      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d002      	beq.n	800d436 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d430:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d434:	e019      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d002      	beq.n	800d446 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d440:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d444:	e011      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d002      	beq.n	800d456 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d450:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d454:	e009      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f003 0308 	and.w	r3, r3, #8
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d002      	beq.n	800d466 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d460:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d464:	e001      	b.n	800d46a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d466:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	371c      	adds	r7, #28
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd90      	pop	{r4, r7, pc}
 800d472:	bf00      	nop
 800d474:	20000000 	.word	0x20000000
 800d478:	10624dd3 	.word	0x10624dd3
 800d47c:	fdffe008 	.word	0xfdffe008

0800d480 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d480:	b490      	push	{r4, r7}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d488:	4b1e      	ldr	r3, [pc, #120]	; (800d504 <SDMMC_GetCmdResp2+0x84>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a1e      	ldr	r2, [pc, #120]	; (800d508 <SDMMC_GetCmdResp2+0x88>)
 800d48e:	fba2 2303 	umull	r2, r3, r2, r3
 800d492:	0a5b      	lsrs	r3, r3, #9
 800d494:	f241 3288 	movw	r2, #5000	; 0x1388
 800d498:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d49c:	4623      	mov	r3, r4
 800d49e:	1e5c      	subs	r4, r3, #1
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d4a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d4a8:	e026      	b.n	800d4f8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d0f0      	beq.n	800d49c <SDMMC_GetCmdResp2+0x1c>
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d1eb      	bne.n	800d49c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c8:	f003 0304 	and.w	r3, r3, #4
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d004      	beq.n	800d4da <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2204      	movs	r2, #4
 800d4d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4d6:	2304      	movs	r3, #4
 800d4d8:	e00e      	b.n	800d4f8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	f003 0301 	and.w	r3, r3, #1
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d004      	beq.n	800d4f0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e003      	b.n	800d4f8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	22c5      	movs	r2, #197	; 0xc5
 800d4f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3710      	adds	r7, #16
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bc90      	pop	{r4, r7}
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	20000000 	.word	0x20000000
 800d508:	10624dd3 	.word	0x10624dd3

0800d50c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d50c:	b490      	push	{r4, r7}
 800d50e:	b084      	sub	sp, #16
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d514:	4b18      	ldr	r3, [pc, #96]	; (800d578 <SDMMC_GetCmdResp3+0x6c>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	4a18      	ldr	r2, [pc, #96]	; (800d57c <SDMMC_GetCmdResp3+0x70>)
 800d51a:	fba2 2303 	umull	r2, r3, r2, r3
 800d51e:	0a5b      	lsrs	r3, r3, #9
 800d520:	f241 3288 	movw	r2, #5000	; 0x1388
 800d524:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d528:	4623      	mov	r3, r4
 800d52a:	1e5c      	subs	r4, r3, #1
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d102      	bne.n	800d536 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d530:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d534:	e01b      	b.n	800d56e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d542:	2b00      	cmp	r3, #0
 800d544:	d0f0      	beq.n	800d528 <SDMMC_GetCmdResp3+0x1c>
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d1eb      	bne.n	800d528 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d554:	f003 0304 	and.w	r3, r3, #4
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	2204      	movs	r2, #4
 800d560:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d562:	2304      	movs	r3, #4
 800d564:	e003      	b.n	800d56e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	22c5      	movs	r2, #197	; 0xc5
 800d56a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3710      	adds	r7, #16
 800d572:	46bd      	mov	sp, r7
 800d574:	bc90      	pop	{r4, r7}
 800d576:	4770      	bx	lr
 800d578:	20000000 	.word	0x20000000
 800d57c:	10624dd3 	.word	0x10624dd3

0800d580 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d580:	b590      	push	{r4, r7, lr}
 800d582:	b087      	sub	sp, #28
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	460b      	mov	r3, r1
 800d58a:	607a      	str	r2, [r7, #4]
 800d58c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d58e:	4b34      	ldr	r3, [pc, #208]	; (800d660 <SDMMC_GetCmdResp6+0xe0>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a34      	ldr	r2, [pc, #208]	; (800d664 <SDMMC_GetCmdResp6+0xe4>)
 800d594:	fba2 2303 	umull	r2, r3, r2, r3
 800d598:	0a5b      	lsrs	r3, r3, #9
 800d59a:	f241 3288 	movw	r2, #5000	; 0x1388
 800d59e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d5a2:	4623      	mov	r3, r4
 800d5a4:	1e5c      	subs	r4, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d102      	bne.n	800d5b0 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d5aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5ae:	e052      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b4:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d0f0      	beq.n	800d5a2 <SDMMC_GetCmdResp6+0x22>
 800d5c0:	697b      	ldr	r3, [r7, #20]
 800d5c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1eb      	bne.n	800d5a2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ce:	f003 0304 	and.w	r3, r3, #4
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d004      	beq.n	800d5e0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	2204      	movs	r2, #4
 800d5da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5dc:	2304      	movs	r3, #4
 800d5de:	e03a      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e4:	f003 0301 	and.w	r3, r3, #1
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	2201      	movs	r2, #1
 800d5f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e02f      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d5f6:	68f8      	ldr	r0, [r7, #12]
 800d5f8:	f7ff fbae 	bl	800cd58 <SDIO_GetCommandResponse>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	461a      	mov	r2, r3
 800d600:	7afb      	ldrb	r3, [r7, #11]
 800d602:	4293      	cmp	r3, r2
 800d604:	d001      	beq.n	800d60a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d606:	2301      	movs	r3, #1
 800d608:	e025      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	22c5      	movs	r2, #197	; 0xc5
 800d60e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d610:	2100      	movs	r1, #0
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f7ff fbad 	bl	800cd72 <SDIO_GetResponse>
 800d618:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d620:	2b00      	cmp	r3, #0
 800d622:	d106      	bne.n	800d632 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	0c1b      	lsrs	r3, r3, #16
 800d628:	b29a      	uxth	r2, r3
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d62e:	2300      	movs	r3, #0
 800d630:	e011      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d640:	e009      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d64c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d650:	e001      	b.n	800d656 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d652:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d656:	4618      	mov	r0, r3
 800d658:	371c      	adds	r7, #28
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd90      	pop	{r4, r7, pc}
 800d65e:	bf00      	nop
 800d660:	20000000 	.word	0x20000000
 800d664:	10624dd3 	.word	0x10624dd3

0800d668 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d668:	b490      	push	{r4, r7}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d670:	4b21      	ldr	r3, [pc, #132]	; (800d6f8 <SDMMC_GetCmdResp7+0x90>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a21      	ldr	r2, [pc, #132]	; (800d6fc <SDMMC_GetCmdResp7+0x94>)
 800d676:	fba2 2303 	umull	r2, r3, r2, r3
 800d67a:	0a5b      	lsrs	r3, r3, #9
 800d67c:	f241 3288 	movw	r2, #5000	; 0x1388
 800d680:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d684:	4623      	mov	r3, r4
 800d686:	1e5c      	subs	r4, r3, #1
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d102      	bne.n	800d692 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d68c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d690:	e02c      	b.n	800d6ec <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d696:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d0f0      	beq.n	800d684 <SDMMC_GetCmdResp7+0x1c>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d1eb      	bne.n	800d684 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b0:	f003 0304 	and.w	r3, r3, #4
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d004      	beq.n	800d6c2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2204      	movs	r2, #4
 800d6bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d6be:	2304      	movs	r3, #4
 800d6c0:	e014      	b.n	800d6ec <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d004      	beq.n	800d6d8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e009      	b.n	800d6ec <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d002      	beq.n	800d6ea <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	2240      	movs	r2, #64	; 0x40
 800d6e8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d6ea:	2300      	movs	r3, #0
  
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bc90      	pop	{r4, r7}
 800d6f4:	4770      	bx	lr
 800d6f6:	bf00      	nop
 800d6f8:	20000000 	.word	0x20000000
 800d6fc:	10624dd3 	.word	0x10624dd3

0800d700 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d704:	4904      	ldr	r1, [pc, #16]	; (800d718 <MX_FATFS_Init+0x18>)
 800d706:	4805      	ldr	r0, [pc, #20]	; (800d71c <MX_FATFS_Init+0x1c>)
 800d708:	f004 f874 	bl	80117f4 <FATFS_LinkDriver>
 800d70c:	4603      	mov	r3, r0
 800d70e:	461a      	mov	r2, r3
 800d710:	4b03      	ldr	r3, [pc, #12]	; (800d720 <MX_FATFS_Init+0x20>)
 800d712:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d714:	bf00      	nop
 800d716:	bd80      	pop	{r7, pc}
 800d718:	20021e60 	.word	0x20021e60
 800d71c:	08017d48 	.word	0x08017d48
 800d720:	20021e5c 	.word	0x20021e5c

0800d724 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d724:	b480      	push	{r7}
 800d726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d728:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d73a:	2300      	movs	r3, #0
 800d73c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d73e:	f000 f896 	bl	800d86e <BSP_SD_IsDetected>
 800d742:	4603      	mov	r3, r0
 800d744:	2b01      	cmp	r3, #1
 800d746:	d001      	beq.n	800d74c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	e012      	b.n	800d772 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d74c:	480b      	ldr	r0, [pc, #44]	; (800d77c <BSP_SD_Init+0x48>)
 800d74e:	f7fb ff9d 	bl	800968c <HAL_SD_Init>
 800d752:	4603      	mov	r3, r0
 800d754:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d109      	bne.n	800d770 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d75c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d760:	4806      	ldr	r0, [pc, #24]	; (800d77c <BSP_SD_Init+0x48>)
 800d762:	f7fc fd47 	bl	800a1f4 <HAL_SD_ConfigWideBusOperation>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d001      	beq.n	800d770 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d770:	79fb      	ldrb	r3, [r7, #7]
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20021c5c 	.word	0x20021c5c

0800d780 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b086      	sub	sp, #24
 800d784:	af00      	add	r7, sp, #0
 800d786:	60f8      	str	r0, [r7, #12]
 800d788:	60b9      	str	r1, [r7, #8]
 800d78a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	68ba      	ldr	r2, [r7, #8]
 800d794:	68f9      	ldr	r1, [r7, #12]
 800d796:	4806      	ldr	r0, [pc, #24]	; (800d7b0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d798:	f7fc f808 	bl	80097ac <HAL_SD_ReadBlocks_DMA>
 800d79c:	4603      	mov	r3, r0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d001      	beq.n	800d7a6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	20021c5c 	.word	0x20021c5c

0800d7b4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	60b9      	str	r1, [r7, #8]
 800d7be:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	68ba      	ldr	r2, [r7, #8]
 800d7c8:	68f9      	ldr	r1, [r7, #12]
 800d7ca:	4806      	ldr	r0, [pc, #24]	; (800d7e4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d7cc:	f7fc f8d6 	bl	800997c <HAL_SD_WriteBlocks_DMA>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d001      	beq.n	800d7da <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	20021c5c 	.word	0x20021c5c

0800d7e8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d7ec:	4805      	ldr	r0, [pc, #20]	; (800d804 <BSP_SD_GetCardState+0x1c>)
 800d7ee:	f7fc fd7d 	bl	800a2ec <HAL_SD_GetCardState>
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	2b04      	cmp	r3, #4
 800d7f6:	bf14      	ite	ne
 800d7f8:	2301      	movne	r3, #1
 800d7fa:	2300      	moveq	r3, #0
 800d7fc:	b2db      	uxtb	r3, r3
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	20021c5c 	.word	0x20021c5c

0800d808 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d810:	6879      	ldr	r1, [r7, #4]
 800d812:	4803      	ldr	r0, [pc, #12]	; (800d820 <BSP_SD_GetCardInfo+0x18>)
 800d814:	f7fc fcc2 	bl	800a19c <HAL_SD_GetCardInfo>
}
 800d818:	bf00      	nop
 800d81a:	3708      	adds	r7, #8
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20021c5c 	.word	0x20021c5c

0800d824 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b082      	sub	sp, #8
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d82c:	f000 f818 	bl	800d860 <BSP_SD_AbortCallback>
}
 800d830:	bf00      	nop
 800d832:	3708      	adds	r7, #8
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}

0800d838 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d840:	f000 f9a8 	bl	800db94 <BSP_SD_WriteCpltCallback>
}
 800d844:	bf00      	nop
 800d846:	3708      	adds	r7, #8
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}

0800d84c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d854:	f000 f9aa 	bl	800dbac <BSP_SD_ReadCpltCallback>
}
 800d858:	bf00      	nop
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d860:	b480      	push	{r7}
 800d862:	af00      	add	r7, sp, #0

}
 800d864:	bf00      	nop
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr

0800d86e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d86e:	b580      	push	{r7, lr}
 800d870:	b082      	sub	sp, #8
 800d872:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d874:	2301      	movs	r3, #1
 800d876:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d878:	f000 f80c 	bl	800d894 <BSP_PlatformIsDetected>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d101      	bne.n	800d886 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d882:	2300      	movs	r3, #0
 800d884:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d886:	79fb      	ldrb	r3, [r7, #7]
 800d888:	b2db      	uxtb	r3, r3
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
	...

0800d894 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d89a:	2301      	movs	r3, #1
 800d89c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d89e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d8a2:	4806      	ldr	r0, [pc, #24]	; (800d8bc <BSP_PlatformIsDetected+0x28>)
 800d8a4:	f7fa f85e 	bl	8007964 <HAL_GPIO_ReadPin>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d001      	beq.n	800d8b2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d8b2:	79fb      	ldrb	r3, [r7, #7]
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	40020000 	.word	0x40020000

0800d8c0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d8c8:	f7f8 fdc2 	bl	8006450 <HAL_GetTick>
 800d8cc:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d8ce:	e006      	b.n	800d8de <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d8d0:	f7ff ff8a 	bl	800d7e8 <BSP_SD_GetCardState>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d101      	bne.n	800d8de <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	e009      	b.n	800d8f2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d8de:	f7f8 fdb7 	bl	8006450 <HAL_GetTick>
 800d8e2:	4602      	mov	r2, r0
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	1ad3      	subs	r3, r2, r3
 800d8e8:	687a      	ldr	r2, [r7, #4]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	d8f0      	bhi.n	800d8d0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d8ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3710      	adds	r7, #16
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
	...

0800d8fc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d906:	4b0b      	ldr	r3, [pc, #44]	; (800d934 <SD_CheckStatus+0x38>)
 800d908:	2201      	movs	r2, #1
 800d90a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d90c:	f7ff ff6c 	bl	800d7e8 <BSP_SD_GetCardState>
 800d910:	4603      	mov	r3, r0
 800d912:	2b00      	cmp	r3, #0
 800d914:	d107      	bne.n	800d926 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d916:	4b07      	ldr	r3, [pc, #28]	; (800d934 <SD_CheckStatus+0x38>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	f023 0301 	bic.w	r3, r3, #1
 800d920:	b2da      	uxtb	r2, r3
 800d922:	4b04      	ldr	r3, [pc, #16]	; (800d934 <SD_CheckStatus+0x38>)
 800d924:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d926:	4b03      	ldr	r3, [pc, #12]	; (800d934 <SD_CheckStatus+0x38>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	b2db      	uxtb	r3, r3
}
 800d92c:	4618      	mov	r0, r3
 800d92e:	3708      	adds	r7, #8
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	20000009 	.word	0x20000009

0800d938 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	4603      	mov	r3, r0
 800d940:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d942:	f7ff fef7 	bl	800d734 <BSP_SD_Init>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d107      	bne.n	800d95c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d94c:	79fb      	ldrb	r3, [r7, #7]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7ff ffd4 	bl	800d8fc <SD_CheckStatus>
 800d954:	4603      	mov	r3, r0
 800d956:	461a      	mov	r2, r3
 800d958:	4b04      	ldr	r3, [pc, #16]	; (800d96c <SD_initialize+0x34>)
 800d95a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d95c:	4b03      	ldr	r3, [pc, #12]	; (800d96c <SD_initialize+0x34>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	b2db      	uxtb	r3, r3
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000009 	.word	0x20000009

0800d970 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	4603      	mov	r3, r0
 800d978:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d97a:	79fb      	ldrb	r3, [r7, #7]
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7ff ffbd 	bl	800d8fc <SD_CheckStatus>
 800d982:	4603      	mov	r3, r0
}
 800d984:	4618      	mov	r0, r3
 800d986:	3708      	adds	r7, #8
 800d988:	46bd      	mov	sp, r7
 800d98a:	bd80      	pop	{r7, pc}

0800d98c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	60b9      	str	r1, [r7, #8]
 800d994:	607a      	str	r2, [r7, #4]
 800d996:	603b      	str	r3, [r7, #0]
 800d998:	4603      	mov	r3, r0
 800d99a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d9a0:	f247 5030 	movw	r0, #30000	; 0x7530
 800d9a4:	f7ff ff8c 	bl	800d8c0 <SD_CheckStatusWithTimeout>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	da01      	bge.n	800d9b2 <SD_read+0x26>
  {
    return res;
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	e03b      	b.n	800da2a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	6879      	ldr	r1, [r7, #4]
 800d9b6:	68b8      	ldr	r0, [r7, #8]
 800d9b8:	f7ff fee2 	bl	800d780 <BSP_SD_ReadBlocks_DMA>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d132      	bne.n	800da28 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d9c2:	4b1c      	ldr	r3, [pc, #112]	; (800da34 <SD_read+0xa8>)
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d9c8:	f7f8 fd42 	bl	8006450 <HAL_GetTick>
 800d9cc:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d9ce:	bf00      	nop
 800d9d0:	4b18      	ldr	r3, [pc, #96]	; (800da34 <SD_read+0xa8>)
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d108      	bne.n	800d9ea <SD_read+0x5e>
 800d9d8:	f7f8 fd3a 	bl	8006450 <HAL_GetTick>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d9f2      	bls.n	800d9d0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d9ea:	4b12      	ldr	r3, [pc, #72]	; (800da34 <SD_read+0xa8>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d102      	bne.n	800d9f8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	75fb      	strb	r3, [r7, #23]
 800d9f6:	e017      	b.n	800da28 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d9f8:	4b0e      	ldr	r3, [pc, #56]	; (800da34 <SD_read+0xa8>)
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d9fe:	f7f8 fd27 	bl	8006450 <HAL_GetTick>
 800da02:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800da04:	e007      	b.n	800da16 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800da06:	f7ff feef 	bl	800d7e8 <BSP_SD_GetCardState>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d102      	bne.n	800da16 <SD_read+0x8a>
          {
            res = RES_OK;
 800da10:	2300      	movs	r3, #0
 800da12:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800da14:	e008      	b.n	800da28 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800da16:	f7f8 fd1b 	bl	8006450 <HAL_GetTick>
 800da1a:	4602      	mov	r2, r0
 800da1c:	693b      	ldr	r3, [r7, #16]
 800da1e:	1ad3      	subs	r3, r2, r3
 800da20:	f247 522f 	movw	r2, #29999	; 0x752f
 800da24:	4293      	cmp	r3, r2
 800da26:	d9ee      	bls.n	800da06 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800da28:	7dfb      	ldrb	r3, [r7, #23]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	2001f2f4 	.word	0x2001f2f4

0800da38 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b086      	sub	sp, #24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	60b9      	str	r1, [r7, #8]
 800da40:	607a      	str	r2, [r7, #4]
 800da42:	603b      	str	r3, [r7, #0]
 800da44:	4603      	mov	r3, r0
 800da46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800da48:	2301      	movs	r3, #1
 800da4a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800da4c:	4b24      	ldr	r3, [pc, #144]	; (800dae0 <SD_write+0xa8>)
 800da4e:	2200      	movs	r2, #0
 800da50:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800da52:	f247 5030 	movw	r0, #30000	; 0x7530
 800da56:	f7ff ff33 	bl	800d8c0 <SD_CheckStatusWithTimeout>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	da01      	bge.n	800da64 <SD_write+0x2c>
  {
    return res;
 800da60:	7dfb      	ldrb	r3, [r7, #23]
 800da62:	e038      	b.n	800dad6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800da64:	683a      	ldr	r2, [r7, #0]
 800da66:	6879      	ldr	r1, [r7, #4]
 800da68:	68b8      	ldr	r0, [r7, #8]
 800da6a:	f7ff fea3 	bl	800d7b4 <BSP_SD_WriteBlocks_DMA>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d12f      	bne.n	800dad4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800da74:	f7f8 fcec 	bl	8006450 <HAL_GetTick>
 800da78:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800da7a:	bf00      	nop
 800da7c:	4b18      	ldr	r3, [pc, #96]	; (800dae0 <SD_write+0xa8>)
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d108      	bne.n	800da96 <SD_write+0x5e>
 800da84:	f7f8 fce4 	bl	8006450 <HAL_GetTick>
 800da88:	4602      	mov	r2, r0
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	1ad3      	subs	r3, r2, r3
 800da8e:	f247 522f 	movw	r2, #29999	; 0x752f
 800da92:	4293      	cmp	r3, r2
 800da94:	d9f2      	bls.n	800da7c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800da96:	4b12      	ldr	r3, [pc, #72]	; (800dae0 <SD_write+0xa8>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d102      	bne.n	800daa4 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800da9e:	2301      	movs	r3, #1
 800daa0:	75fb      	strb	r3, [r7, #23]
 800daa2:	e017      	b.n	800dad4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800daa4:	4b0e      	ldr	r3, [pc, #56]	; (800dae0 <SD_write+0xa8>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800daaa:	f7f8 fcd1 	bl	8006450 <HAL_GetTick>
 800daae:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dab0:	e007      	b.n	800dac2 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dab2:	f7ff fe99 	bl	800d7e8 <BSP_SD_GetCardState>
 800dab6:	4603      	mov	r3, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <SD_write+0x8a>
          {
            res = RES_OK;
 800dabc:	2300      	movs	r3, #0
 800dabe:	75fb      	strb	r3, [r7, #23]
            break;
 800dac0:	e008      	b.n	800dad4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800dac2:	f7f8 fcc5 	bl	8006450 <HAL_GetTick>
 800dac6:	4602      	mov	r2, r0
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	1ad3      	subs	r3, r2, r3
 800dacc:	f247 522f 	movw	r2, #29999	; 0x752f
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d9ee      	bls.n	800dab2 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800dad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	2001f2f0 	.word	0x2001f2f0

0800dae4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08c      	sub	sp, #48	; 0x30
 800dae8:	af00      	add	r7, sp, #0
 800daea:	4603      	mov	r3, r0
 800daec:	603a      	str	r2, [r7, #0]
 800daee:	71fb      	strb	r3, [r7, #7]
 800daf0:	460b      	mov	r3, r1
 800daf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dafa:	4b25      	ldr	r3, [pc, #148]	; (800db90 <SD_ioctl+0xac>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	f003 0301 	and.w	r3, r3, #1
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <SD_ioctl+0x28>
 800db08:	2303      	movs	r3, #3
 800db0a:	e03c      	b.n	800db86 <SD_ioctl+0xa2>

  switch (cmd)
 800db0c:	79bb      	ldrb	r3, [r7, #6]
 800db0e:	2b03      	cmp	r3, #3
 800db10:	d834      	bhi.n	800db7c <SD_ioctl+0x98>
 800db12:	a201      	add	r2, pc, #4	; (adr r2, 800db18 <SD_ioctl+0x34>)
 800db14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db18:	0800db29 	.word	0x0800db29
 800db1c:	0800db31 	.word	0x0800db31
 800db20:	0800db49 	.word	0x0800db49
 800db24:	0800db63 	.word	0x0800db63
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800db28:	2300      	movs	r3, #0
 800db2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db2e:	e028      	b.n	800db82 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800db30:	f107 030c 	add.w	r3, r7, #12
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff fe67 	bl	800d808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800db3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db40:	2300      	movs	r3, #0
 800db42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db46:	e01c      	b.n	800db82 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db48:	f107 030c 	add.w	r3, r7, #12
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff fe5b 	bl	800d808 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800db52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db54:	b29a      	uxth	r2, r3
 800db56:	683b      	ldr	r3, [r7, #0]
 800db58:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800db5a:	2300      	movs	r3, #0
 800db5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db60:	e00f      	b.n	800db82 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800db62:	f107 030c 	add.w	r3, r7, #12
 800db66:	4618      	mov	r0, r3
 800db68:	f7ff fe4e 	bl	800d808 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	0a5a      	lsrs	r2, r3, #9
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800db74:	2300      	movs	r3, #0
 800db76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800db7a:	e002      	b.n	800db82 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800db7c:	2304      	movs	r3, #4
 800db7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800db82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800db86:	4618      	mov	r0, r3
 800db88:	3730      	adds	r7, #48	; 0x30
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}
 800db8e:	bf00      	nop
 800db90:	20000009 	.word	0x20000009

0800db94 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800db94:	b480      	push	{r7}
 800db96:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800db98:	4b03      	ldr	r3, [pc, #12]	; (800dba8 <BSP_SD_WriteCpltCallback+0x14>)
 800db9a:	2201      	movs	r2, #1
 800db9c:	601a      	str	r2, [r3, #0]
}
 800db9e:	bf00      	nop
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	2001f2f0 	.word	0x2001f2f0

0800dbac <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800dbac:	b480      	push	{r7}
 800dbae:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800dbb0:	4b03      	ldr	r3, [pc, #12]	; (800dbc0 <BSP_SD_ReadCpltCallback+0x14>)
 800dbb2:	2201      	movs	r2, #1
 800dbb4:	601a      	str	r2, [r3, #0]
}
 800dbb6:	bf00      	nop
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr
 800dbc0:	2001f2f4 	.word	0x2001f2f4

0800dbc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	4603      	mov	r3, r0
 800dbcc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dbce:	79fb      	ldrb	r3, [r7, #7]
 800dbd0:	4a08      	ldr	r2, [pc, #32]	; (800dbf4 <disk_status+0x30>)
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	4413      	add	r3, r2
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	79fa      	ldrb	r2, [r7, #7]
 800dbdc:	4905      	ldr	r1, [pc, #20]	; (800dbf4 <disk_status+0x30>)
 800dbde:	440a      	add	r2, r1
 800dbe0:	7a12      	ldrb	r2, [r2, #8]
 800dbe2:	4610      	mov	r0, r2
 800dbe4:	4798      	blx	r3
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	3710      	adds	r7, #16
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}
 800dbf4:	2001f520 	.word	0x2001f520

0800dbf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	4603      	mov	r3, r0
 800dc00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dc02:	2300      	movs	r3, #0
 800dc04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	4a0d      	ldr	r2, [pc, #52]	; (800dc40 <disk_initialize+0x48>)
 800dc0a:	5cd3      	ldrb	r3, [r2, r3]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d111      	bne.n	800dc34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dc10:	79fb      	ldrb	r3, [r7, #7]
 800dc12:	4a0b      	ldr	r2, [pc, #44]	; (800dc40 <disk_initialize+0x48>)
 800dc14:	2101      	movs	r1, #1
 800dc16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dc18:	79fb      	ldrb	r3, [r7, #7]
 800dc1a:	4a09      	ldr	r2, [pc, #36]	; (800dc40 <disk_initialize+0x48>)
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4413      	add	r3, r2
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	79fa      	ldrb	r2, [r7, #7]
 800dc26:	4906      	ldr	r1, [pc, #24]	; (800dc40 <disk_initialize+0x48>)
 800dc28:	440a      	add	r2, r1
 800dc2a:	7a12      	ldrb	r2, [r2, #8]
 800dc2c:	4610      	mov	r0, r2
 800dc2e:	4798      	blx	r3
 800dc30:	4603      	mov	r3, r0
 800dc32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	3710      	adds	r7, #16
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
 800dc3e:	bf00      	nop
 800dc40:	2001f520 	.word	0x2001f520

0800dc44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dc44:	b590      	push	{r4, r7, lr}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
 800dc4e:	603b      	str	r3, [r7, #0]
 800dc50:	4603      	mov	r3, r0
 800dc52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dc54:	7bfb      	ldrb	r3, [r7, #15]
 800dc56:	4a0a      	ldr	r2, [pc, #40]	; (800dc80 <disk_read+0x3c>)
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	4413      	add	r3, r2
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	689c      	ldr	r4, [r3, #8]
 800dc60:	7bfb      	ldrb	r3, [r7, #15]
 800dc62:	4a07      	ldr	r2, [pc, #28]	; (800dc80 <disk_read+0x3c>)
 800dc64:	4413      	add	r3, r2
 800dc66:	7a18      	ldrb	r0, [r3, #8]
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	687a      	ldr	r2, [r7, #4]
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	47a0      	blx	r4
 800dc70:	4603      	mov	r3, r0
 800dc72:	75fb      	strb	r3, [r7, #23]
  return res;
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	371c      	adds	r7, #28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd90      	pop	{r4, r7, pc}
 800dc7e:	bf00      	nop
 800dc80:	2001f520 	.word	0x2001f520

0800dc84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b087      	sub	sp, #28
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60b9      	str	r1, [r7, #8]
 800dc8c:	607a      	str	r2, [r7, #4]
 800dc8e:	603b      	str	r3, [r7, #0]
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
 800dc96:	4a0a      	ldr	r2, [pc, #40]	; (800dcc0 <disk_write+0x3c>)
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	4413      	add	r3, r2
 800dc9c:	685b      	ldr	r3, [r3, #4]
 800dc9e:	68dc      	ldr	r4, [r3, #12]
 800dca0:	7bfb      	ldrb	r3, [r7, #15]
 800dca2:	4a07      	ldr	r2, [pc, #28]	; (800dcc0 <disk_write+0x3c>)
 800dca4:	4413      	add	r3, r2
 800dca6:	7a18      	ldrb	r0, [r3, #8]
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	687a      	ldr	r2, [r7, #4]
 800dcac:	68b9      	ldr	r1, [r7, #8]
 800dcae:	47a0      	blx	r4
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800dcb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	371c      	adds	r7, #28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd90      	pop	{r4, r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	2001f520 	.word	0x2001f520

0800dcc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	4603      	mov	r3, r0
 800dccc:	603a      	str	r2, [r7, #0]
 800dcce:	71fb      	strb	r3, [r7, #7]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dcd4:	79fb      	ldrb	r3, [r7, #7]
 800dcd6:	4a09      	ldr	r2, [pc, #36]	; (800dcfc <disk_ioctl+0x38>)
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	79fa      	ldrb	r2, [r7, #7]
 800dce2:	4906      	ldr	r1, [pc, #24]	; (800dcfc <disk_ioctl+0x38>)
 800dce4:	440a      	add	r2, r1
 800dce6:	7a10      	ldrb	r0, [r2, #8]
 800dce8:	79b9      	ldrb	r1, [r7, #6]
 800dcea:	683a      	ldr	r2, [r7, #0]
 800dcec:	4798      	blx	r3
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73fb      	strb	r3, [r7, #15]
  return res;
 800dcf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3710      	adds	r7, #16
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	2001f520 	.word	0x2001f520

0800dd00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dd00:	b480      	push	{r7}
 800dd02:	b085      	sub	sp, #20
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dd10:	89fb      	ldrh	r3, [r7, #14]
 800dd12:	021b      	lsls	r3, r3, #8
 800dd14:	b21a      	sxth	r2, r3
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	b21b      	sxth	r3, r3
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	b21b      	sxth	r3, r3
 800dd20:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dd22:	89fb      	ldrh	r3, [r7, #14]
}
 800dd24:	4618      	mov	r0, r3
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr

0800dd30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	3303      	adds	r3, #3
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	3202      	adds	r2, #2
 800dd48:	7812      	ldrb	r2, [r2, #0]
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	021b      	lsls	r3, r3, #8
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	3201      	adds	r2, #1
 800dd56:	7812      	ldrb	r2, [r2, #0]
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	021b      	lsls	r3, r3, #8
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	7812      	ldrb	r2, [r2, #0]
 800dd64:	4313      	orrs	r3, r2
 800dd66:	60fb      	str	r3, [r7, #12]
	return rv;
 800dd68:	68fb      	ldr	r3, [r7, #12]
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3714      	adds	r7, #20
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd74:	4770      	bx	lr

0800dd76 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dd76:	b480      	push	{r7}
 800dd78:	b083      	sub	sp, #12
 800dd7a:	af00      	add	r7, sp, #0
 800dd7c:	6078      	str	r0, [r7, #4]
 800dd7e:	460b      	mov	r3, r1
 800dd80:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	1c5a      	adds	r2, r3, #1
 800dd86:	607a      	str	r2, [r7, #4]
 800dd88:	887a      	ldrh	r2, [r7, #2]
 800dd8a:	b2d2      	uxtb	r2, r2
 800dd8c:	701a      	strb	r2, [r3, #0]
 800dd8e:	887b      	ldrh	r3, [r7, #2]
 800dd90:	0a1b      	lsrs	r3, r3, #8
 800dd92:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	1c5a      	adds	r2, r3, #1
 800dd98:	607a      	str	r2, [r7, #4]
 800dd9a:	887a      	ldrh	r2, [r7, #2]
 800dd9c:	b2d2      	uxtb	r2, r2
 800dd9e:	701a      	strb	r2, [r3, #0]
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	1c5a      	adds	r2, r3, #1
 800ddba:	607a      	str	r2, [r7, #4]
 800ddbc:	683a      	ldr	r2, [r7, #0]
 800ddbe:	b2d2      	uxtb	r2, r2
 800ddc0:	701a      	strb	r2, [r3, #0]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	0a1b      	lsrs	r3, r3, #8
 800ddc6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	683a      	ldr	r2, [r7, #0]
 800ddd0:	b2d2      	uxtb	r2, r2
 800ddd2:	701a      	strb	r2, [r3, #0]
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	0a1b      	lsrs	r3, r3, #8
 800ddd8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	607a      	str	r2, [r7, #4]
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	b2d2      	uxtb	r2, r2
 800dde4:	701a      	strb	r2, [r3, #0]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	0a1b      	lsrs	r3, r3, #8
 800ddea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	1c5a      	adds	r2, r3, #1
 800ddf0:	607a      	str	r2, [r7, #4]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	b2d2      	uxtb	r2, r2
 800ddf6:	701a      	strb	r2, [r3, #0]
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800de04:	b480      	push	{r7}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00d      	beq.n	800de3a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	1c53      	adds	r3, r2, #1
 800de22:	613b      	str	r3, [r7, #16]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	1c59      	adds	r1, r3, #1
 800de28:	6179      	str	r1, [r7, #20]
 800de2a:	7812      	ldrb	r2, [r2, #0]
 800de2c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	3b01      	subs	r3, #1
 800de32:	607b      	str	r3, [r7, #4]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1f1      	bne.n	800de1e <mem_cpy+0x1a>
	}
}
 800de3a:	bf00      	nop
 800de3c:	371c      	adds	r7, #28
 800de3e:	46bd      	mov	sp, r7
 800de40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de44:	4770      	bx	lr

0800de46 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800de46:	b480      	push	{r7}
 800de48:	b087      	sub	sp, #28
 800de4a:	af00      	add	r7, sp, #0
 800de4c:	60f8      	str	r0, [r7, #12]
 800de4e:	60b9      	str	r1, [r7, #8]
 800de50:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	1c5a      	adds	r2, r3, #1
 800de5a:	617a      	str	r2, [r7, #20]
 800de5c:	68ba      	ldr	r2, [r7, #8]
 800de5e:	b2d2      	uxtb	r2, r2
 800de60:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3b01      	subs	r3, #1
 800de66:	607b      	str	r3, [r7, #4]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d1f3      	bne.n	800de56 <mem_set+0x10>
}
 800de6e:	bf00      	nop
 800de70:	371c      	adds	r7, #28
 800de72:	46bd      	mov	sp, r7
 800de74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de78:	4770      	bx	lr

0800de7a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800de7a:	b480      	push	{r7}
 800de7c:	b089      	sub	sp, #36	; 0x24
 800de7e:	af00      	add	r7, sp, #0
 800de80:	60f8      	str	r0, [r7, #12]
 800de82:	60b9      	str	r1, [r7, #8]
 800de84:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	61fb      	str	r3, [r7, #28]
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800de92:	69fb      	ldr	r3, [r7, #28]
 800de94:	1c5a      	adds	r2, r3, #1
 800de96:	61fa      	str	r2, [r7, #28]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	4619      	mov	r1, r3
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	1c5a      	adds	r2, r3, #1
 800dea0:	61ba      	str	r2, [r7, #24]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	1acb      	subs	r3, r1, r3
 800dea6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	3b01      	subs	r3, #1
 800deac:	607b      	str	r3, [r7, #4]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d002      	beq.n	800deba <mem_cmp+0x40>
 800deb4:	697b      	ldr	r3, [r7, #20]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d0eb      	beq.n	800de92 <mem_cmp+0x18>

	return r;
 800deba:	697b      	ldr	r3, [r7, #20]
}
 800debc:	4618      	mov	r0, r3
 800debe:	3724      	adds	r7, #36	; 0x24
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dec8:	b480      	push	{r7}
 800deca:	b083      	sub	sp, #12
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ded2:	e002      	b.n	800deda <chk_chr+0x12>
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	3301      	adds	r3, #1
 800ded8:	607b      	str	r3, [r7, #4]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d005      	beq.n	800deee <chk_chr+0x26>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	461a      	mov	r2, r3
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	4293      	cmp	r3, r2
 800deec:	d1f2      	bne.n	800ded4 <chk_chr+0xc>
	return *str;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	781b      	ldrb	r3, [r3, #0]
}
 800def2:	4618      	mov	r0, r3
 800def4:	370c      	adds	r7, #12
 800def6:	46bd      	mov	sp, r7
 800def8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defc:	4770      	bx	lr
	...

0800df00 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800df00:	b480      	push	{r7}
 800df02:	b085      	sub	sp, #20
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df0a:	2300      	movs	r3, #0
 800df0c:	60bb      	str	r3, [r7, #8]
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	e029      	b.n	800df68 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800df14:	4a27      	ldr	r2, [pc, #156]	; (800dfb4 <chk_lock+0xb4>)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	011b      	lsls	r3, r3, #4
 800df1a:	4413      	add	r3, r2
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d01d      	beq.n	800df5e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df22:	4a24      	ldr	r2, [pc, #144]	; (800dfb4 <chk_lock+0xb4>)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	011b      	lsls	r3, r3, #4
 800df28:	4413      	add	r3, r2
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	429a      	cmp	r2, r3
 800df32:	d116      	bne.n	800df62 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800df34:	4a1f      	ldr	r2, [pc, #124]	; (800dfb4 <chk_lock+0xb4>)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	011b      	lsls	r3, r3, #4
 800df3a:	4413      	add	r3, r2
 800df3c:	3304      	adds	r3, #4
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800df44:	429a      	cmp	r2, r3
 800df46:	d10c      	bne.n	800df62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df48:	4a1a      	ldr	r2, [pc, #104]	; (800dfb4 <chk_lock+0xb4>)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	011b      	lsls	r3, r3, #4
 800df4e:	4413      	add	r3, r2
 800df50:	3308      	adds	r3, #8
 800df52:	681a      	ldr	r2, [r3, #0]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800df58:	429a      	cmp	r2, r3
 800df5a:	d102      	bne.n	800df62 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800df5c:	e007      	b.n	800df6e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800df5e:	2301      	movs	r3, #1
 800df60:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	3301      	adds	r3, #1
 800df66:	60fb      	str	r3, [r7, #12]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	2b01      	cmp	r3, #1
 800df6c:	d9d2      	bls.n	800df14 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d109      	bne.n	800df88 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d102      	bne.n	800df80 <chk_lock+0x80>
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d101      	bne.n	800df84 <chk_lock+0x84>
 800df80:	2300      	movs	r3, #0
 800df82:	e010      	b.n	800dfa6 <chk_lock+0xa6>
 800df84:	2312      	movs	r3, #18
 800df86:	e00e      	b.n	800dfa6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d108      	bne.n	800dfa0 <chk_lock+0xa0>
 800df8e:	4a09      	ldr	r2, [pc, #36]	; (800dfb4 <chk_lock+0xb4>)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	011b      	lsls	r3, r3, #4
 800df94:	4413      	add	r3, r2
 800df96:	330c      	adds	r3, #12
 800df98:	881b      	ldrh	r3, [r3, #0]
 800df9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df9e:	d101      	bne.n	800dfa4 <chk_lock+0xa4>
 800dfa0:	2310      	movs	r3, #16
 800dfa2:	e000      	b.n	800dfa6 <chk_lock+0xa6>
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr
 800dfb2:	bf00      	nop
 800dfb4:	2001f300 	.word	0x2001f300

0800dfb8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	607b      	str	r3, [r7, #4]
 800dfc2:	e002      	b.n	800dfca <enq_lock+0x12>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	607b      	str	r3, [r7, #4]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2b01      	cmp	r3, #1
 800dfce:	d806      	bhi.n	800dfde <enq_lock+0x26>
 800dfd0:	4a09      	ldr	r2, [pc, #36]	; (800dff8 <enq_lock+0x40>)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	011b      	lsls	r3, r3, #4
 800dfd6:	4413      	add	r3, r2
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d1f2      	bne.n	800dfc4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	bf14      	ite	ne
 800dfe4:	2301      	movne	r3, #1
 800dfe6:	2300      	moveq	r3, #0
 800dfe8:	b2db      	uxtb	r3, r3
}
 800dfea:	4618      	mov	r0, r3
 800dfec:	370c      	adds	r7, #12
 800dfee:	46bd      	mov	sp, r7
 800dff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff4:	4770      	bx	lr
 800dff6:	bf00      	nop
 800dff8:	2001f300 	.word	0x2001f300

0800dffc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b085      	sub	sp, #20
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	e01f      	b.n	800e04c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e00c:	4a41      	ldr	r2, [pc, #260]	; (800e114 <inc_lock+0x118>)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	011b      	lsls	r3, r3, #4
 800e012:	4413      	add	r3, r2
 800e014:	681a      	ldr	r2, [r3, #0]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d113      	bne.n	800e046 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e01e:	4a3d      	ldr	r2, [pc, #244]	; (800e114 <inc_lock+0x118>)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	011b      	lsls	r3, r3, #4
 800e024:	4413      	add	r3, r2
 800e026:	3304      	adds	r3, #4
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e02e:	429a      	cmp	r2, r3
 800e030:	d109      	bne.n	800e046 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e032:	4a38      	ldr	r2, [pc, #224]	; (800e114 <inc_lock+0x118>)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	011b      	lsls	r3, r3, #4
 800e038:	4413      	add	r3, r2
 800e03a:	3308      	adds	r3, #8
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e042:	429a      	cmp	r2, r3
 800e044:	d006      	beq.n	800e054 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	3301      	adds	r3, #1
 800e04a:	60fb      	str	r3, [r7, #12]
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d9dc      	bls.n	800e00c <inc_lock+0x10>
 800e052:	e000      	b.n	800e056 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e054:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d132      	bne.n	800e0c2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e05c:	2300      	movs	r3, #0
 800e05e:	60fb      	str	r3, [r7, #12]
 800e060:	e002      	b.n	800e068 <inc_lock+0x6c>
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	3301      	adds	r3, #1
 800e066:	60fb      	str	r3, [r7, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	2b01      	cmp	r3, #1
 800e06c:	d806      	bhi.n	800e07c <inc_lock+0x80>
 800e06e:	4a29      	ldr	r2, [pc, #164]	; (800e114 <inc_lock+0x118>)
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	011b      	lsls	r3, r3, #4
 800e074:	4413      	add	r3, r2
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d1f2      	bne.n	800e062 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d101      	bne.n	800e086 <inc_lock+0x8a>
 800e082:	2300      	movs	r3, #0
 800e084:	e040      	b.n	800e108 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681a      	ldr	r2, [r3, #0]
 800e08a:	4922      	ldr	r1, [pc, #136]	; (800e114 <inc_lock+0x118>)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	011b      	lsls	r3, r3, #4
 800e090:	440b      	add	r3, r1
 800e092:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	689a      	ldr	r2, [r3, #8]
 800e098:	491e      	ldr	r1, [pc, #120]	; (800e114 <inc_lock+0x118>)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	011b      	lsls	r3, r3, #4
 800e09e:	440b      	add	r3, r1
 800e0a0:	3304      	adds	r3, #4
 800e0a2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	695a      	ldr	r2, [r3, #20]
 800e0a8:	491a      	ldr	r1, [pc, #104]	; (800e114 <inc_lock+0x118>)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	011b      	lsls	r3, r3, #4
 800e0ae:	440b      	add	r3, r1
 800e0b0:	3308      	adds	r3, #8
 800e0b2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e0b4:	4a17      	ldr	r2, [pc, #92]	; (800e114 <inc_lock+0x118>)
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	011b      	lsls	r3, r3, #4
 800e0ba:	4413      	add	r3, r2
 800e0bc:	330c      	adds	r3, #12
 800e0be:	2200      	movs	r2, #0
 800e0c0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d009      	beq.n	800e0dc <inc_lock+0xe0>
 800e0c8:	4a12      	ldr	r2, [pc, #72]	; (800e114 <inc_lock+0x118>)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	011b      	lsls	r3, r3, #4
 800e0ce:	4413      	add	r3, r2
 800e0d0:	330c      	adds	r3, #12
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d001      	beq.n	800e0dc <inc_lock+0xe0>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e015      	b.n	800e108 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d108      	bne.n	800e0f4 <inc_lock+0xf8>
 800e0e2:	4a0c      	ldr	r2, [pc, #48]	; (800e114 <inc_lock+0x118>)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	011b      	lsls	r3, r3, #4
 800e0e8:	4413      	add	r3, r2
 800e0ea:	330c      	adds	r3, #12
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	3301      	adds	r3, #1
 800e0f0:	b29a      	uxth	r2, r3
 800e0f2:	e001      	b.n	800e0f8 <inc_lock+0xfc>
 800e0f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e0f8:	4906      	ldr	r1, [pc, #24]	; (800e114 <inc_lock+0x118>)
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	011b      	lsls	r3, r3, #4
 800e0fe:	440b      	add	r3, r1
 800e100:	330c      	adds	r3, #12
 800e102:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	3301      	adds	r3, #1
}
 800e108:	4618      	mov	r0, r3
 800e10a:	3714      	adds	r7, #20
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	2001f300 	.word	0x2001f300

0800e118 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	3b01      	subs	r3, #1
 800e124:	607b      	str	r3, [r7, #4]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b01      	cmp	r3, #1
 800e12a:	d825      	bhi.n	800e178 <dec_lock+0x60>
		n = Files[i].ctr;
 800e12c:	4a17      	ldr	r2, [pc, #92]	; (800e18c <dec_lock+0x74>)
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	011b      	lsls	r3, r3, #4
 800e132:	4413      	add	r3, r2
 800e134:	330c      	adds	r3, #12
 800e136:	881b      	ldrh	r3, [r3, #0]
 800e138:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e13a:	89fb      	ldrh	r3, [r7, #14]
 800e13c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e140:	d101      	bne.n	800e146 <dec_lock+0x2e>
 800e142:	2300      	movs	r3, #0
 800e144:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e146:	89fb      	ldrh	r3, [r7, #14]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d002      	beq.n	800e152 <dec_lock+0x3a>
 800e14c:	89fb      	ldrh	r3, [r7, #14]
 800e14e:	3b01      	subs	r3, #1
 800e150:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e152:	4a0e      	ldr	r2, [pc, #56]	; (800e18c <dec_lock+0x74>)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	011b      	lsls	r3, r3, #4
 800e158:	4413      	add	r3, r2
 800e15a:	330c      	adds	r3, #12
 800e15c:	89fa      	ldrh	r2, [r7, #14]
 800e15e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e160:	89fb      	ldrh	r3, [r7, #14]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d105      	bne.n	800e172 <dec_lock+0x5a>
 800e166:	4a09      	ldr	r2, [pc, #36]	; (800e18c <dec_lock+0x74>)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	011b      	lsls	r3, r3, #4
 800e16c:	4413      	add	r3, r2
 800e16e:	2200      	movs	r2, #0
 800e170:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e172:	2300      	movs	r3, #0
 800e174:	737b      	strb	r3, [r7, #13]
 800e176:	e001      	b.n	800e17c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e178:	2302      	movs	r3, #2
 800e17a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e17c:	7b7b      	ldrb	r3, [r7, #13]
}
 800e17e:	4618      	mov	r0, r3
 800e180:	3714      	adds	r7, #20
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr
 800e18a:	bf00      	nop
 800e18c:	2001f300 	.word	0x2001f300

0800e190 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e198:	2300      	movs	r3, #0
 800e19a:	60fb      	str	r3, [r7, #12]
 800e19c:	e010      	b.n	800e1c0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e19e:	4a0d      	ldr	r2, [pc, #52]	; (800e1d4 <clear_lock+0x44>)
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	011b      	lsls	r3, r3, #4
 800e1a4:	4413      	add	r3, r2
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	687a      	ldr	r2, [r7, #4]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d105      	bne.n	800e1ba <clear_lock+0x2a>
 800e1ae:	4a09      	ldr	r2, [pc, #36]	; (800e1d4 <clear_lock+0x44>)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	011b      	lsls	r3, r3, #4
 800e1b4:	4413      	add	r3, r2
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	60fb      	str	r3, [r7, #12]
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d9eb      	bls.n	800e19e <clear_lock+0xe>
	}
}
 800e1c6:	bf00      	nop
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
 800e1d2:	bf00      	nop
 800e1d4:	2001f300 	.word	0x2001f300

0800e1d8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b086      	sub	sp, #24
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	78db      	ldrb	r3, [r3, #3]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d034      	beq.n	800e256 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1f0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	7858      	ldrb	r0, [r3, #1]
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e1fc:	2301      	movs	r3, #1
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	f7ff fd40 	bl	800dc84 <disk_write>
 800e204:	4603      	mov	r3, r0
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e20a:	2301      	movs	r3, #1
 800e20c:	73fb      	strb	r3, [r7, #15]
 800e20e:	e022      	b.n	800e256 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	2200      	movs	r2, #0
 800e214:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21a:	697a      	ldr	r2, [r7, #20]
 800e21c:	1ad2      	subs	r2, r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e222:	429a      	cmp	r2, r3
 800e224:	d217      	bcs.n	800e256 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	789b      	ldrb	r3, [r3, #2]
 800e22a:	613b      	str	r3, [r7, #16]
 800e22c:	e010      	b.n	800e250 <sync_window+0x78>
					wsect += fs->fsize;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e232:	697a      	ldr	r2, [r7, #20]
 800e234:	4413      	add	r3, r2
 800e236:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	7858      	ldrb	r0, [r3, #1]
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e242:	2301      	movs	r3, #1
 800e244:	697a      	ldr	r2, [r7, #20]
 800e246:	f7ff fd1d 	bl	800dc84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	613b      	str	r3, [r7, #16]
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	2b01      	cmp	r3, #1
 800e254:	d8eb      	bhi.n	800e22e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e256:	7bfb      	ldrb	r3, [r7, #15]
}
 800e258:	4618      	mov	r0, r3
 800e25a:	3718      	adds	r7, #24
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b084      	sub	sp, #16
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e26a:	2300      	movs	r3, #0
 800e26c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	429a      	cmp	r2, r3
 800e276:	d01b      	beq.n	800e2b0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f7ff ffad 	bl	800e1d8 <sync_window>
 800e27e:	4603      	mov	r3, r0
 800e280:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e282:	7bfb      	ldrb	r3, [r7, #15]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d113      	bne.n	800e2b0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7858      	ldrb	r0, [r3, #1]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e292:	2301      	movs	r3, #1
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	f7ff fcd5 	bl	800dc44 <disk_read>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d004      	beq.n	800e2aa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e2a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e2a4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e2a6:	2301      	movs	r3, #1
 800e2a8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
	...

0800e2bc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f7ff ff87 	bl	800e1d8 <sync_window>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d159      	bne.n	800e388 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	2b03      	cmp	r3, #3
 800e2da:	d149      	bne.n	800e370 <sync_fs+0xb4>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	791b      	ldrb	r3, [r3, #4]
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d145      	bne.n	800e370 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	899b      	ldrh	r3, [r3, #12]
 800e2ee:	461a      	mov	r2, r3
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	f7ff fda8 	bl	800de46 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	333c      	adds	r3, #60	; 0x3c
 800e2fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e2fe:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff fd37 	bl	800dd76 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	333c      	adds	r3, #60	; 0x3c
 800e30c:	4921      	ldr	r1, [pc, #132]	; (800e394 <sync_fs+0xd8>)
 800e30e:	4618      	mov	r0, r3
 800e310:	f7ff fd4c 	bl	800ddac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	333c      	adds	r3, #60	; 0x3c
 800e318:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e31c:	491e      	ldr	r1, [pc, #120]	; (800e398 <sync_fs+0xdc>)
 800e31e:	4618      	mov	r0, r3
 800e320:	f7ff fd44 	bl	800ddac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	333c      	adds	r3, #60	; 0x3c
 800e328:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	699b      	ldr	r3, [r3, #24]
 800e330:	4619      	mov	r1, r3
 800e332:	4610      	mov	r0, r2
 800e334:	f7ff fd3a 	bl	800ddac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	333c      	adds	r3, #60	; 0x3c
 800e33c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	695b      	ldr	r3, [r3, #20]
 800e344:	4619      	mov	r1, r3
 800e346:	4610      	mov	r0, r2
 800e348:	f7ff fd30 	bl	800ddac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e350:	1c5a      	adds	r2, r3, #1
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	7858      	ldrb	r0, [r3, #1]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e364:	2301      	movs	r3, #1
 800e366:	f7ff fc8d 	bl	800dc84 <disk_write>
			fs->fsi_flag = 0;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2200      	movs	r2, #0
 800e36e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	785b      	ldrb	r3, [r3, #1]
 800e374:	2200      	movs	r2, #0
 800e376:	2100      	movs	r1, #0
 800e378:	4618      	mov	r0, r3
 800e37a:	f7ff fca3 	bl	800dcc4 <disk_ioctl>
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	d001      	beq.n	800e388 <sync_fs+0xcc>
 800e384:	2301      	movs	r3, #1
 800e386:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e388:	7bfb      	ldrb	r3, [r7, #15]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	41615252 	.word	0x41615252
 800e398:	61417272 	.word	0x61417272

0800e39c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b083      	sub	sp, #12
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	3b02      	subs	r3, #2
 800e3aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a1b      	ldr	r3, [r3, #32]
 800e3b0:	3b02      	subs	r3, #2
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d301      	bcc.n	800e3bc <clust2sect+0x20>
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	e008      	b.n	800e3ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	895b      	ldrh	r3, [r3, #10]
 800e3c0:	461a      	mov	r2, r3
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	fb03 f202 	mul.w	r2, r3, r2
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3cc:	4413      	add	r3, r2
}
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d8:	4770      	bx	lr

0800e3da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b086      	sub	sp, #24
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
 800e3e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	2b01      	cmp	r3, #1
 800e3ee:	d904      	bls.n	800e3fa <get_fat+0x20>
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6a1b      	ldr	r3, [r3, #32]
 800e3f4:	683a      	ldr	r2, [r7, #0]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d302      	bcc.n	800e400 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e3fa:	2301      	movs	r3, #1
 800e3fc:	617b      	str	r3, [r7, #20]
 800e3fe:	e0b7      	b.n	800e570 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e400:	f04f 33ff 	mov.w	r3, #4294967295
 800e404:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d05a      	beq.n	800e4c4 <get_fat+0xea>
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d07d      	beq.n	800e50e <get_fat+0x134>
 800e412:	2b01      	cmp	r3, #1
 800e414:	f040 80a2 	bne.w	800e55c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	60fb      	str	r3, [r7, #12]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	085b      	lsrs	r3, r3, #1
 800e420:	68fa      	ldr	r2, [r7, #12]
 800e422:	4413      	add	r3, r2
 800e424:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e426:	693b      	ldr	r3, [r7, #16]
 800e428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	899b      	ldrh	r3, [r3, #12]
 800e42e:	4619      	mov	r1, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	fbb3 f3f1 	udiv	r3, r3, r1
 800e436:	4413      	add	r3, r2
 800e438:	4619      	mov	r1, r3
 800e43a:	6938      	ldr	r0, [r7, #16]
 800e43c:	f7ff ff10 	bl	800e260 <move_window>
 800e440:	4603      	mov	r3, r0
 800e442:	2b00      	cmp	r3, #0
 800e444:	f040 808d 	bne.w	800e562 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	60fa      	str	r2, [r7, #12]
 800e44e:	693a      	ldr	r2, [r7, #16]
 800e450:	8992      	ldrh	r2, [r2, #12]
 800e452:	fbb3 f1f2 	udiv	r1, r3, r2
 800e456:	fb02 f201 	mul.w	r2, r2, r1
 800e45a:	1a9b      	subs	r3, r3, r2
 800e45c:	693a      	ldr	r2, [r7, #16]
 800e45e:	4413      	add	r3, r2
 800e460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e464:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e466:	693b      	ldr	r3, [r7, #16]
 800e468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	899b      	ldrh	r3, [r3, #12]
 800e46e:	4619      	mov	r1, r3
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	fbb3 f3f1 	udiv	r3, r3, r1
 800e476:	4413      	add	r3, r2
 800e478:	4619      	mov	r1, r3
 800e47a:	6938      	ldr	r0, [r7, #16]
 800e47c:	f7ff fef0 	bl	800e260 <move_window>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d16f      	bne.n	800e566 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	899b      	ldrh	r3, [r3, #12]
 800e48a:	461a      	mov	r2, r3
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e492:	fb02 f201 	mul.w	r2, r2, r1
 800e496:	1a9b      	subs	r3, r3, r2
 800e498:	693a      	ldr	r2, [r7, #16]
 800e49a:	4413      	add	r3, r2
 800e49c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4a0:	021b      	lsls	r3, r3, #8
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	4313      	orrs	r3, r2
 800e4a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	f003 0301 	and.w	r3, r3, #1
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d002      	beq.n	800e4ba <get_fat+0xe0>
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	091b      	lsrs	r3, r3, #4
 800e4b8:	e002      	b.n	800e4c0 <get_fat+0xe6>
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e4c0:	617b      	str	r3, [r7, #20]
			break;
 800e4c2:	e055      	b.n	800e570 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	899b      	ldrh	r3, [r3, #12]
 800e4cc:	085b      	lsrs	r3, r3, #1
 800e4ce:	b29b      	uxth	r3, r3
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4d8:	4413      	add	r3, r2
 800e4da:	4619      	mov	r1, r3
 800e4dc:	6938      	ldr	r0, [r7, #16]
 800e4de:	f7ff febf 	bl	800e260 <move_window>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d140      	bne.n	800e56a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	005b      	lsls	r3, r3, #1
 800e4f2:	693a      	ldr	r2, [r7, #16]
 800e4f4:	8992      	ldrh	r2, [r2, #12]
 800e4f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4fa:	fb02 f200 	mul.w	r2, r2, r0
 800e4fe:	1a9b      	subs	r3, r3, r2
 800e500:	440b      	add	r3, r1
 800e502:	4618      	mov	r0, r3
 800e504:	f7ff fbfc 	bl	800dd00 <ld_word>
 800e508:	4603      	mov	r3, r0
 800e50a:	617b      	str	r3, [r7, #20]
			break;
 800e50c:	e030      	b.n	800e570 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	899b      	ldrh	r3, [r3, #12]
 800e516:	089b      	lsrs	r3, r3, #2
 800e518:	b29b      	uxth	r3, r3
 800e51a:	4619      	mov	r1, r3
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e522:	4413      	add	r3, r2
 800e524:	4619      	mov	r1, r3
 800e526:	6938      	ldr	r0, [r7, #16]
 800e528:	f7ff fe9a 	bl	800e260 <move_window>
 800e52c:	4603      	mov	r3, r0
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d11d      	bne.n	800e56e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	693a      	ldr	r2, [r7, #16]
 800e53e:	8992      	ldrh	r2, [r2, #12]
 800e540:	fbb3 f0f2 	udiv	r0, r3, r2
 800e544:	fb02 f200 	mul.w	r2, r2, r0
 800e548:	1a9b      	subs	r3, r3, r2
 800e54a:	440b      	add	r3, r1
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7ff fbef 	bl	800dd30 <ld_dword>
 800e552:	4603      	mov	r3, r0
 800e554:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e558:	617b      	str	r3, [r7, #20]
			break;
 800e55a:	e009      	b.n	800e570 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e55c:	2301      	movs	r3, #1
 800e55e:	617b      	str	r3, [r7, #20]
 800e560:	e006      	b.n	800e570 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e562:	bf00      	nop
 800e564:	e004      	b.n	800e570 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e566:	bf00      	nop
 800e568:	e002      	b.n	800e570 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e56a:	bf00      	nop
 800e56c:	e000      	b.n	800e570 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e56e:	bf00      	nop
		}
	}

	return val;
 800e570:	697b      	ldr	r3, [r7, #20]
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}

0800e57a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e57a:	b590      	push	{r4, r7, lr}
 800e57c:	b089      	sub	sp, #36	; 0x24
 800e57e:	af00      	add	r7, sp, #0
 800e580:	60f8      	str	r0, [r7, #12]
 800e582:	60b9      	str	r1, [r7, #8]
 800e584:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e586:	2302      	movs	r3, #2
 800e588:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	f240 8106 	bls.w	800e79e <put_fat+0x224>
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6a1b      	ldr	r3, [r3, #32]
 800e596:	68ba      	ldr	r2, [r7, #8]
 800e598:	429a      	cmp	r2, r3
 800e59a:	f080 8100 	bcs.w	800e79e <put_fat+0x224>
		switch (fs->fs_type) {
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	2b02      	cmp	r3, #2
 800e5a4:	f000 8088 	beq.w	800e6b8 <put_fat+0x13e>
 800e5a8:	2b03      	cmp	r3, #3
 800e5aa:	f000 80b0 	beq.w	800e70e <put_fat+0x194>
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	f040 80f5 	bne.w	800e79e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	61bb      	str	r3, [r7, #24]
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	085b      	lsrs	r3, r3, #1
 800e5bc:	69ba      	ldr	r2, [r7, #24]
 800e5be:	4413      	add	r3, r2
 800e5c0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	899b      	ldrh	r3, [r3, #12]
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5d2:	4413      	add	r3, r2
 800e5d4:	4619      	mov	r1, r3
 800e5d6:	68f8      	ldr	r0, [r7, #12]
 800e5d8:	f7ff fe42 	bl	800e260 <move_window>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e5e0:	7ffb      	ldrb	r3, [r7, #31]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	f040 80d4 	bne.w	800e790 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e5ee:	69bb      	ldr	r3, [r7, #24]
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	61ba      	str	r2, [r7, #24]
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	8992      	ldrh	r2, [r2, #12]
 800e5f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5fc:	fb02 f200 	mul.w	r2, r2, r0
 800e600:	1a9b      	subs	r3, r3, r2
 800e602:	440b      	add	r3, r1
 800e604:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	f003 0301 	and.w	r3, r3, #1
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d00d      	beq.n	800e62c <put_fat+0xb2>
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	b25b      	sxtb	r3, r3
 800e616:	f003 030f 	and.w	r3, r3, #15
 800e61a:	b25a      	sxtb	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	011b      	lsls	r3, r3, #4
 800e622:	b25b      	sxtb	r3, r3
 800e624:	4313      	orrs	r3, r2
 800e626:	b25b      	sxtb	r3, r3
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	e001      	b.n	800e630 <put_fat+0xb6>
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	697a      	ldr	r2, [r7, #20]
 800e632:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2201      	movs	r2, #1
 800e638:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	899b      	ldrh	r3, [r3, #12]
 800e642:	4619      	mov	r1, r3
 800e644:	69bb      	ldr	r3, [r7, #24]
 800e646:	fbb3 f3f1 	udiv	r3, r3, r1
 800e64a:	4413      	add	r3, r2
 800e64c:	4619      	mov	r1, r3
 800e64e:	68f8      	ldr	r0, [r7, #12]
 800e650:	f7ff fe06 	bl	800e260 <move_window>
 800e654:	4603      	mov	r3, r0
 800e656:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e658:	7ffb      	ldrb	r3, [r7, #31]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	f040 809a 	bne.w	800e794 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	899b      	ldrh	r3, [r3, #12]
 800e66a:	461a      	mov	r2, r3
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e672:	fb02 f200 	mul.w	r2, r2, r0
 800e676:	1a9b      	subs	r3, r3, r2
 800e678:	440b      	add	r3, r1
 800e67a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	f003 0301 	and.w	r3, r3, #1
 800e682:	2b00      	cmp	r3, #0
 800e684:	d003      	beq.n	800e68e <put_fat+0x114>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	091b      	lsrs	r3, r3, #4
 800e68a:	b2db      	uxtb	r3, r3
 800e68c:	e00e      	b.n	800e6ac <put_fat+0x132>
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	781b      	ldrb	r3, [r3, #0]
 800e692:	b25b      	sxtb	r3, r3
 800e694:	f023 030f 	bic.w	r3, r3, #15
 800e698:	b25a      	sxtb	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	0a1b      	lsrs	r3, r3, #8
 800e69e:	b25b      	sxtb	r3, r3
 800e6a0:	f003 030f 	and.w	r3, r3, #15
 800e6a4:	b25b      	sxtb	r3, r3
 800e6a6:	4313      	orrs	r3, r2
 800e6a8:	b25b      	sxtb	r3, r3
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	697a      	ldr	r2, [r7, #20]
 800e6ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	70da      	strb	r2, [r3, #3]
			break;
 800e6b6:	e072      	b.n	800e79e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	899b      	ldrh	r3, [r3, #12]
 800e6c0:	085b      	lsrs	r3, r3, #1
 800e6c2:	b29b      	uxth	r3, r3
 800e6c4:	4619      	mov	r1, r3
 800e6c6:	68bb      	ldr	r3, [r7, #8]
 800e6c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e6cc:	4413      	add	r3, r2
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f7ff fdc5 	bl	800e260 <move_window>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6da:	7ffb      	ldrb	r3, [r7, #31]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d15b      	bne.n	800e798 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	005b      	lsls	r3, r3, #1
 800e6ea:	68fa      	ldr	r2, [r7, #12]
 800e6ec:	8992      	ldrh	r2, [r2, #12]
 800e6ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6f2:	fb02 f200 	mul.w	r2, r2, r0
 800e6f6:	1a9b      	subs	r3, r3, r2
 800e6f8:	440b      	add	r3, r1
 800e6fa:	687a      	ldr	r2, [r7, #4]
 800e6fc:	b292      	uxth	r2, r2
 800e6fe:	4611      	mov	r1, r2
 800e700:	4618      	mov	r0, r3
 800e702:	f7ff fb38 	bl	800dd76 <st_word>
			fs->wflag = 1;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2201      	movs	r2, #1
 800e70a:	70da      	strb	r2, [r3, #3]
			break;
 800e70c:	e047      	b.n	800e79e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	899b      	ldrh	r3, [r3, #12]
 800e716:	089b      	lsrs	r3, r3, #2
 800e718:	b29b      	uxth	r3, r3
 800e71a:	4619      	mov	r1, r3
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e722:	4413      	add	r3, r2
 800e724:	4619      	mov	r1, r3
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f7ff fd9a 	bl	800e260 <move_window>
 800e72c:	4603      	mov	r3, r0
 800e72e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e730:	7ffb      	ldrb	r3, [r7, #31]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d132      	bne.n	800e79c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	68fa      	ldr	r2, [r7, #12]
 800e748:	8992      	ldrh	r2, [r2, #12]
 800e74a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e74e:	fb02 f200 	mul.w	r2, r2, r0
 800e752:	1a9b      	subs	r3, r3, r2
 800e754:	440b      	add	r3, r1
 800e756:	4618      	mov	r0, r3
 800e758:	f7ff faea 	bl	800dd30 <ld_dword>
 800e75c:	4603      	mov	r3, r0
 800e75e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e762:	4323      	orrs	r3, r4
 800e764:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	009b      	lsls	r3, r3, #2
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	8992      	ldrh	r2, [r2, #12]
 800e774:	fbb3 f0f2 	udiv	r0, r3, r2
 800e778:	fb02 f200 	mul.w	r2, r2, r0
 800e77c:	1a9b      	subs	r3, r3, r2
 800e77e:	440b      	add	r3, r1
 800e780:	6879      	ldr	r1, [r7, #4]
 800e782:	4618      	mov	r0, r3
 800e784:	f7ff fb12 	bl	800ddac <st_dword>
			fs->wflag = 1;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	2201      	movs	r2, #1
 800e78c:	70da      	strb	r2, [r3, #3]
			break;
 800e78e:	e006      	b.n	800e79e <put_fat+0x224>
			if (res != FR_OK) break;
 800e790:	bf00      	nop
 800e792:	e004      	b.n	800e79e <put_fat+0x224>
			if (res != FR_OK) break;
 800e794:	bf00      	nop
 800e796:	e002      	b.n	800e79e <put_fat+0x224>
			if (res != FR_OK) break;
 800e798:	bf00      	nop
 800e79a:	e000      	b.n	800e79e <put_fat+0x224>
			if (res != FR_OK) break;
 800e79c:	bf00      	nop
		}
	}
	return res;
 800e79e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	3724      	adds	r7, #36	; 0x24
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd90      	pop	{r4, r7, pc}

0800e7a8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	b088      	sub	sp, #32
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	60f8      	str	r0, [r7, #12]
 800e7b0:	60b9      	str	r1, [r7, #8]
 800e7b2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	2b01      	cmp	r3, #1
 800e7c2:	d904      	bls.n	800e7ce <remove_chain+0x26>
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	6a1b      	ldr	r3, [r3, #32]
 800e7c8:	68ba      	ldr	r2, [r7, #8]
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d301      	bcc.n	800e7d2 <remove_chain+0x2a>
 800e7ce:	2302      	movs	r3, #2
 800e7d0:	e04b      	b.n	800e86a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d00c      	beq.n	800e7f2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7dc:	6879      	ldr	r1, [r7, #4]
 800e7de:	69b8      	ldr	r0, [r7, #24]
 800e7e0:	f7ff fecb 	bl	800e57a <put_fat>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e7e8:	7ffb      	ldrb	r3, [r7, #31]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d001      	beq.n	800e7f2 <remove_chain+0x4a>
 800e7ee:	7ffb      	ldrb	r3, [r7, #31]
 800e7f0:	e03b      	b.n	800e86a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e7f2:	68b9      	ldr	r1, [r7, #8]
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7ff fdf0 	bl	800e3da <get_fat>
 800e7fa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d031      	beq.n	800e866 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	2b01      	cmp	r3, #1
 800e806:	d101      	bne.n	800e80c <remove_chain+0x64>
 800e808:	2302      	movs	r3, #2
 800e80a:	e02e      	b.n	800e86a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e80c:	697b      	ldr	r3, [r7, #20]
 800e80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e812:	d101      	bne.n	800e818 <remove_chain+0x70>
 800e814:	2301      	movs	r3, #1
 800e816:	e028      	b.n	800e86a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e818:	2200      	movs	r2, #0
 800e81a:	68b9      	ldr	r1, [r7, #8]
 800e81c:	69b8      	ldr	r0, [r7, #24]
 800e81e:	f7ff feac 	bl	800e57a <put_fat>
 800e822:	4603      	mov	r3, r0
 800e824:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e826:	7ffb      	ldrb	r3, [r7, #31]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d001      	beq.n	800e830 <remove_chain+0x88>
 800e82c:	7ffb      	ldrb	r3, [r7, #31]
 800e82e:	e01c      	b.n	800e86a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	699a      	ldr	r2, [r3, #24]
 800e834:	69bb      	ldr	r3, [r7, #24]
 800e836:	6a1b      	ldr	r3, [r3, #32]
 800e838:	3b02      	subs	r3, #2
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d20b      	bcs.n	800e856 <remove_chain+0xae>
			fs->free_clst++;
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	699b      	ldr	r3, [r3, #24]
 800e842:	1c5a      	adds	r2, r3, #1
 800e844:	69bb      	ldr	r3, [r7, #24]
 800e846:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e848:	69bb      	ldr	r3, [r7, #24]
 800e84a:	791b      	ldrb	r3, [r3, #4]
 800e84c:	f043 0301 	orr.w	r3, r3, #1
 800e850:	b2da      	uxtb	r2, r3
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e856:	697b      	ldr	r3, [r7, #20]
 800e858:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	6a1b      	ldr	r3, [r3, #32]
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	429a      	cmp	r2, r3
 800e862:	d3c6      	bcc.n	800e7f2 <remove_chain+0x4a>
 800e864:	e000      	b.n	800e868 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e866:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e868:	2300      	movs	r3, #0
}
 800e86a:	4618      	mov	r0, r3
 800e86c:	3720      	adds	r7, #32
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b088      	sub	sp, #32
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
 800e87a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10d      	bne.n	800e8a4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e888:	693b      	ldr	r3, [r7, #16]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e88e:	69bb      	ldr	r3, [r7, #24]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <create_chain+0x2c>
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	69ba      	ldr	r2, [r7, #24]
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d31b      	bcc.n	800e8d6 <create_chain+0x64>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	61bb      	str	r3, [r7, #24]
 800e8a2:	e018      	b.n	800e8d6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e8a4:	6839      	ldr	r1, [r7, #0]
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7ff fd97 	bl	800e3da <get_fat>
 800e8ac:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2b01      	cmp	r3, #1
 800e8b2:	d801      	bhi.n	800e8b8 <create_chain+0x46>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e070      	b.n	800e99a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8be:	d101      	bne.n	800e8c4 <create_chain+0x52>
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	e06a      	b.n	800e99a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	6a1b      	ldr	r3, [r3, #32]
 800e8c8:	68fa      	ldr	r2, [r7, #12]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d201      	bcs.n	800e8d2 <create_chain+0x60>
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	e063      	b.n	800e99a <create_chain+0x128>
		scl = clst;
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e8d6:	69bb      	ldr	r3, [r7, #24]
 800e8d8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	3301      	adds	r3, #1
 800e8de:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	6a1b      	ldr	r3, [r3, #32]
 800e8e4:	69fa      	ldr	r2, [r7, #28]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d307      	bcc.n	800e8fa <create_chain+0x88>
				ncl = 2;
 800e8ea:	2302      	movs	r3, #2
 800e8ec:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e8ee:	69fa      	ldr	r2, [r7, #28]
 800e8f0:	69bb      	ldr	r3, [r7, #24]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	d901      	bls.n	800e8fa <create_chain+0x88>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	e04f      	b.n	800e99a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e8fa:	69f9      	ldr	r1, [r7, #28]
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f7ff fd6c 	bl	800e3da <get_fat>
 800e902:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d00e      	beq.n	800e928 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e90a:	68fb      	ldr	r3, [r7, #12]
 800e90c:	2b01      	cmp	r3, #1
 800e90e:	d003      	beq.n	800e918 <create_chain+0xa6>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e916:	d101      	bne.n	800e91c <create_chain+0xaa>
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	e03e      	b.n	800e99a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e91c:	69fa      	ldr	r2, [r7, #28]
 800e91e:	69bb      	ldr	r3, [r7, #24]
 800e920:	429a      	cmp	r2, r3
 800e922:	d1da      	bne.n	800e8da <create_chain+0x68>
 800e924:	2300      	movs	r3, #0
 800e926:	e038      	b.n	800e99a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e928:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e92a:	f04f 32ff 	mov.w	r2, #4294967295
 800e92e:	69f9      	ldr	r1, [r7, #28]
 800e930:	6938      	ldr	r0, [r7, #16]
 800e932:	f7ff fe22 	bl	800e57a <put_fat>
 800e936:	4603      	mov	r3, r0
 800e938:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e93a:	7dfb      	ldrb	r3, [r7, #23]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d109      	bne.n	800e954 <create_chain+0xe2>
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d006      	beq.n	800e954 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e946:	69fa      	ldr	r2, [r7, #28]
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6938      	ldr	r0, [r7, #16]
 800e94c:	f7ff fe15 	bl	800e57a <put_fat>
 800e950:	4603      	mov	r3, r0
 800e952:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e954:	7dfb      	ldrb	r3, [r7, #23]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d116      	bne.n	800e988 <create_chain+0x116>
		fs->last_clst = ncl;
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	69fa      	ldr	r2, [r7, #28]
 800e95e:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	699a      	ldr	r2, [r3, #24]
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	6a1b      	ldr	r3, [r3, #32]
 800e968:	3b02      	subs	r3, #2
 800e96a:	429a      	cmp	r2, r3
 800e96c:	d804      	bhi.n	800e978 <create_chain+0x106>
 800e96e:	693b      	ldr	r3, [r7, #16]
 800e970:	699b      	ldr	r3, [r3, #24]
 800e972:	1e5a      	subs	r2, r3, #1
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	791b      	ldrb	r3, [r3, #4]
 800e97c:	f043 0301 	orr.w	r3, r3, #1
 800e980:	b2da      	uxtb	r2, r3
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	711a      	strb	r2, [r3, #4]
 800e986:	e007      	b.n	800e998 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	2b01      	cmp	r3, #1
 800e98c:	d102      	bne.n	800e994 <create_chain+0x122>
 800e98e:	f04f 33ff 	mov.w	r3, #4294967295
 800e992:	e000      	b.n	800e996 <create_chain+0x124>
 800e994:	2301      	movs	r3, #1
 800e996:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e998:	69fb      	ldr	r3, [r7, #28]
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3720      	adds	r7, #32
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e9a2:	b480      	push	{r7}
 800e9a4:	b087      	sub	sp, #28
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	899b      	ldrh	r3, [r3, #12]
 800e9be:	461a      	mov	r2, r3
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9c6:	68fa      	ldr	r2, [r7, #12]
 800e9c8:	8952      	ldrh	r2, [r2, #10]
 800e9ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9ce:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	1d1a      	adds	r2, r3, #4
 800e9d4:	613a      	str	r2, [r7, #16]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <clmt_clust+0x42>
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	e010      	b.n	800ea06 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e9e4:	697a      	ldr	r2, [r7, #20]
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d307      	bcc.n	800e9fc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e9ec:	697a      	ldr	r2, [r7, #20]
 800e9ee:	68bb      	ldr	r3, [r7, #8]
 800e9f0:	1ad3      	subs	r3, r2, r3
 800e9f2:	617b      	str	r3, [r7, #20]
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	3304      	adds	r3, #4
 800e9f8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e9fa:	e7e9      	b.n	800e9d0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e9fc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	4413      	add	r3, r2
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	371c      	adds	r7, #28
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b086      	sub	sp, #24
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea28:	d204      	bcs.n	800ea34 <dir_sdi+0x22>
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	f003 031f 	and.w	r3, r3, #31
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ea34:	2302      	movs	r3, #2
 800ea36:	e071      	b.n	800eb1c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	683a      	ldr	r2, [r7, #0]
 800ea3c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d106      	bne.n	800ea58 <dir_sdi+0x46>
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	781b      	ldrb	r3, [r3, #0]
 800ea4e:	2b02      	cmp	r3, #2
 800ea50:	d902      	bls.n	800ea58 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea56:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d10c      	bne.n	800ea78 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	095b      	lsrs	r3, r3, #5
 800ea62:	693a      	ldr	r2, [r7, #16]
 800ea64:	8912      	ldrh	r2, [r2, #8]
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d301      	bcc.n	800ea6e <dir_sdi+0x5c>
 800ea6a:	2302      	movs	r3, #2
 800ea6c:	e056      	b.n	800eb1c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	61da      	str	r2, [r3, #28]
 800ea76:	e02d      	b.n	800ead4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	895b      	ldrh	r3, [r3, #10]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	899b      	ldrh	r3, [r3, #12]
 800ea82:	fb03 f302 	mul.w	r3, r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ea88:	e019      	b.n	800eabe <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6979      	ldr	r1, [r7, #20]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7ff fca3 	bl	800e3da <get_fat>
 800ea94:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9c:	d101      	bne.n	800eaa2 <dir_sdi+0x90>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e03c      	b.n	800eb1c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d904      	bls.n	800eab2 <dir_sdi+0xa0>
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	6a1b      	ldr	r3, [r3, #32]
 800eaac:	697a      	ldr	r2, [r7, #20]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d301      	bcc.n	800eab6 <dir_sdi+0xa4>
 800eab2:	2302      	movs	r3, #2
 800eab4:	e032      	b.n	800eb1c <dir_sdi+0x10a>
			ofs -= csz;
 800eab6:	683a      	ldr	r2, [r7, #0]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	1ad3      	subs	r3, r2, r3
 800eabc:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eabe:	683a      	ldr	r2, [r7, #0]
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	429a      	cmp	r2, r3
 800eac4:	d2e1      	bcs.n	800ea8a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800eac6:	6979      	ldr	r1, [r7, #20]
 800eac8:	6938      	ldr	r0, [r7, #16]
 800eaca:	f7ff fc67 	bl	800e39c <clust2sect>
 800eace:	4602      	mov	r2, r0
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	697a      	ldr	r2, [r7, #20]
 800ead8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	69db      	ldr	r3, [r3, #28]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d101      	bne.n	800eae6 <dir_sdi+0xd4>
 800eae2:	2302      	movs	r3, #2
 800eae4:	e01a      	b.n	800eb1c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	69da      	ldr	r2, [r3, #28]
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	899b      	ldrh	r3, [r3, #12]
 800eaee:	4619      	mov	r1, r3
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	fbb3 f3f1 	udiv	r3, r3, r1
 800eaf6:	441a      	add	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eb02:	693b      	ldr	r3, [r7, #16]
 800eb04:	899b      	ldrh	r3, [r3, #12]
 800eb06:	461a      	mov	r2, r3
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb0e:	fb02 f200 	mul.w	r2, r2, r0
 800eb12:	1a9b      	subs	r3, r3, r2
 800eb14:	18ca      	adds	r2, r1, r3
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b086      	sub	sp, #24
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
 800eb2c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	695b      	ldr	r3, [r3, #20]
 800eb38:	3320      	adds	r3, #32
 800eb3a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	69db      	ldr	r3, [r3, #28]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d003      	beq.n	800eb4c <dir_next+0x28>
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb4a:	d301      	bcc.n	800eb50 <dir_next+0x2c>
 800eb4c:	2304      	movs	r3, #4
 800eb4e:	e0bb      	b.n	800ecc8 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	899b      	ldrh	r3, [r3, #12]
 800eb54:	461a      	mov	r2, r3
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb5c:	fb02 f201 	mul.w	r2, r2, r1
 800eb60:	1a9b      	subs	r3, r3, r2
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	f040 809d 	bne.w	800eca2 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	69db      	ldr	r3, [r3, #28]
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	699b      	ldr	r3, [r3, #24]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d10b      	bne.n	800eb92 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800eb7a:	68bb      	ldr	r3, [r7, #8]
 800eb7c:	095b      	lsrs	r3, r3, #5
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	8912      	ldrh	r2, [r2, #8]
 800eb82:	4293      	cmp	r3, r2
 800eb84:	f0c0 808d 	bcc.w	800eca2 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	61da      	str	r2, [r3, #28]
 800eb8e:	2304      	movs	r3, #4
 800eb90:	e09a      	b.n	800ecc8 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	899b      	ldrh	r3, [r3, #12]
 800eb96:	461a      	mov	r2, r3
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb9e:	68fa      	ldr	r2, [r7, #12]
 800eba0:	8952      	ldrh	r2, [r2, #10]
 800eba2:	3a01      	subs	r2, #1
 800eba4:	4013      	ands	r3, r2
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d17b      	bne.n	800eca2 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	699b      	ldr	r3, [r3, #24]
 800ebb0:	4619      	mov	r1, r3
 800ebb2:	4610      	mov	r0, r2
 800ebb4:	f7ff fc11 	bl	800e3da <get_fat>
 800ebb8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d801      	bhi.n	800ebc4 <dir_next+0xa0>
 800ebc0:	2302      	movs	r3, #2
 800ebc2:	e081      	b.n	800ecc8 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebca:	d101      	bne.n	800ebd0 <dir_next+0xac>
 800ebcc:	2301      	movs	r3, #1
 800ebce:	e07b      	b.n	800ecc8 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6a1b      	ldr	r3, [r3, #32]
 800ebd4:	697a      	ldr	r2, [r7, #20]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d359      	bcc.n	800ec8e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d104      	bne.n	800ebea <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	61da      	str	r2, [r3, #28]
 800ebe6:	2304      	movs	r3, #4
 800ebe8:	e06e      	b.n	800ecc8 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	699b      	ldr	r3, [r3, #24]
 800ebf0:	4619      	mov	r1, r3
 800ebf2:	4610      	mov	r0, r2
 800ebf4:	f7ff fe3d 	bl	800e872 <create_chain>
 800ebf8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <dir_next+0xe0>
 800ec00:	2307      	movs	r3, #7
 800ec02:	e061      	b.n	800ecc8 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	2b01      	cmp	r3, #1
 800ec08:	d101      	bne.n	800ec0e <dir_next+0xea>
 800ec0a:	2302      	movs	r3, #2
 800ec0c:	e05c      	b.n	800ecc8 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec14:	d101      	bne.n	800ec1a <dir_next+0xf6>
 800ec16:	2301      	movs	r3, #1
 800ec18:	e056      	b.n	800ecc8 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f7ff fadc 	bl	800e1d8 <sync_window>
 800ec20:	4603      	mov	r3, r0
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d001      	beq.n	800ec2a <dir_next+0x106>
 800ec26:	2301      	movs	r3, #1
 800ec28:	e04e      	b.n	800ecc8 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	899b      	ldrh	r3, [r3, #12]
 800ec34:	461a      	mov	r2, r3
 800ec36:	2100      	movs	r1, #0
 800ec38:	f7ff f905 	bl	800de46 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	613b      	str	r3, [r7, #16]
 800ec40:	6979      	ldr	r1, [r7, #20]
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f7ff fbaa 	bl	800e39c <clust2sect>
 800ec48:	4602      	mov	r2, r0
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	639a      	str	r2, [r3, #56]	; 0x38
 800ec4e:	e012      	b.n	800ec76 <dir_next+0x152>
						fs->wflag = 1;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	2201      	movs	r2, #1
 800ec54:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ec56:	68f8      	ldr	r0, [r7, #12]
 800ec58:	f7ff fabe 	bl	800e1d8 <sync_window>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d001      	beq.n	800ec66 <dir_next+0x142>
 800ec62:	2301      	movs	r3, #1
 800ec64:	e030      	b.n	800ecc8 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	613b      	str	r3, [r7, #16]
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec70:	1c5a      	adds	r2, r3, #1
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	639a      	str	r2, [r3, #56]	; 0x38
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	895b      	ldrh	r3, [r3, #10]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	693b      	ldr	r3, [r7, #16]
 800ec7e:	4293      	cmp	r3, r2
 800ec80:	d3e6      	bcc.n	800ec50 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	1ad2      	subs	r2, r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	697a      	ldr	r2, [r7, #20]
 800ec92:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ec94:	6979      	ldr	r1, [r7, #20]
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f7ff fb80 	bl	800e39c <clust2sect>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	68ba      	ldr	r2, [r7, #8]
 800eca6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	899b      	ldrh	r3, [r3, #12]
 800ecb2:	461a      	mov	r2, r3
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecba:	fb02 f200 	mul.w	r2, r2, r0
 800ecbe:	1a9b      	subs	r3, r3, r2
 800ecc0:	18ca      	adds	r2, r1, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3718      	adds	r7, #24
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b086      	sub	sp, #24
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]
 800ecd8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ece0:	2100      	movs	r1, #0
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7ff fe95 	bl	800ea12 <dir_sdi>
 800ece8:	4603      	mov	r3, r0
 800ecea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ecec:	7dfb      	ldrb	r3, [r7, #23]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d12b      	bne.n	800ed4a <dir_alloc+0x7a>
		n = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	69db      	ldr	r3, [r3, #28]
 800ecfa:	4619      	mov	r1, r3
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f7ff faaf 	bl	800e260 <move_window>
 800ed02:	4603      	mov	r3, r0
 800ed04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed06:	7dfb      	ldrb	r3, [r7, #23]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d11d      	bne.n	800ed48 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	6a1b      	ldr	r3, [r3, #32]
 800ed10:	781b      	ldrb	r3, [r3, #0]
 800ed12:	2be5      	cmp	r3, #229	; 0xe5
 800ed14:	d004      	beq.n	800ed20 <dir_alloc+0x50>
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6a1b      	ldr	r3, [r3, #32]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d107      	bne.n	800ed30 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	3301      	adds	r3, #1
 800ed24:	613b      	str	r3, [r7, #16]
 800ed26:	693a      	ldr	r2, [r7, #16]
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	d102      	bne.n	800ed34 <dir_alloc+0x64>
 800ed2e:	e00c      	b.n	800ed4a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ed30:	2300      	movs	r3, #0
 800ed32:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ed34:	2101      	movs	r1, #1
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f7ff fef4 	bl	800eb24 <dir_next>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ed40:	7dfb      	ldrb	r3, [r7, #23]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d0d7      	beq.n	800ecf6 <dir_alloc+0x26>
 800ed46:	e000      	b.n	800ed4a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ed48:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ed4a:	7dfb      	ldrb	r3, [r7, #23]
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	d101      	bne.n	800ed54 <dir_alloc+0x84>
 800ed50:	2307      	movs	r3, #7
 800ed52:	75fb      	strb	r3, [r7, #23]
	return res;
 800ed54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3718      	adds	r7, #24
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	331a      	adds	r3, #26
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	f7fe ffc7 	bl	800dd00 <ld_word>
 800ed72:	4603      	mov	r3, r0
 800ed74:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	2b03      	cmp	r3, #3
 800ed7c:	d109      	bne.n	800ed92 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ed7e:	683b      	ldr	r3, [r7, #0]
 800ed80:	3314      	adds	r3, #20
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe ffbc 	bl	800dd00 <ld_word>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	041b      	lsls	r3, r3, #16
 800ed8c:	68fa      	ldr	r2, [r7, #12]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ed92:	68fb      	ldr	r3, [r7, #12]
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3710      	adds	r7, #16
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	60f8      	str	r0, [r7, #12]
 800eda4:	60b9      	str	r1, [r7, #8]
 800eda6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800eda8:	68bb      	ldr	r3, [r7, #8]
 800edaa:	331a      	adds	r3, #26
 800edac:	687a      	ldr	r2, [r7, #4]
 800edae:	b292      	uxth	r2, r2
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7fe ffdf 	bl	800dd76 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	781b      	ldrb	r3, [r3, #0]
 800edbc:	2b03      	cmp	r3, #3
 800edbe:	d109      	bne.n	800edd4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	f103 0214 	add.w	r2, r3, #20
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	0c1b      	lsrs	r3, r3, #16
 800edca:	b29b      	uxth	r3, r3
 800edcc:	4619      	mov	r1, r3
 800edce:	4610      	mov	r0, r2
 800edd0:	f7fe ffd1 	bl	800dd76 <st_word>
	}
}
 800edd4:	bf00      	nop
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eddc:	b590      	push	{r4, r7, lr}
 800edde:	b087      	sub	sp, #28
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	331a      	adds	r3, #26
 800edea:	4618      	mov	r0, r3
 800edec:	f7fe ff88 	bl	800dd00 <ld_word>
 800edf0:	4603      	mov	r3, r0
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d001      	beq.n	800edfa <cmp_lfn+0x1e>
 800edf6:	2300      	movs	r3, #0
 800edf8:	e059      	b.n	800eeae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	781b      	ldrb	r3, [r3, #0]
 800edfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee02:	1e5a      	subs	r2, r3, #1
 800ee04:	4613      	mov	r3, r2
 800ee06:	005b      	lsls	r3, r3, #1
 800ee08:	4413      	add	r3, r2
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	4413      	add	r3, r2
 800ee0e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ee10:	2301      	movs	r3, #1
 800ee12:	81fb      	strh	r3, [r7, #14]
 800ee14:	2300      	movs	r3, #0
 800ee16:	613b      	str	r3, [r7, #16]
 800ee18:	e033      	b.n	800ee82 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ee1a:	4a27      	ldr	r2, [pc, #156]	; (800eeb8 <cmp_lfn+0xdc>)
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	4413      	add	r3, r2
 800ee20:	781b      	ldrb	r3, [r3, #0]
 800ee22:	461a      	mov	r2, r3
 800ee24:	683b      	ldr	r3, [r7, #0]
 800ee26:	4413      	add	r3, r2
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fe ff69 	bl	800dd00 <ld_word>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ee32:	89fb      	ldrh	r3, [r7, #14]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d01a      	beq.n	800ee6e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	2bfe      	cmp	r3, #254	; 0xfe
 800ee3c:	d812      	bhi.n	800ee64 <cmp_lfn+0x88>
 800ee3e:	89bb      	ldrh	r3, [r7, #12]
 800ee40:	4618      	mov	r0, r3
 800ee42:	f002 fd23 	bl	801188c <ff_wtoupper>
 800ee46:	4603      	mov	r3, r0
 800ee48:	461c      	mov	r4, r3
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	1c5a      	adds	r2, r3, #1
 800ee4e:	617a      	str	r2, [r7, #20]
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	687a      	ldr	r2, [r7, #4]
 800ee54:	4413      	add	r3, r2
 800ee56:	881b      	ldrh	r3, [r3, #0]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f002 fd17 	bl	801188c <ff_wtoupper>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	429c      	cmp	r4, r3
 800ee62:	d001      	beq.n	800ee68 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ee64:	2300      	movs	r3, #0
 800ee66:	e022      	b.n	800eeae <cmp_lfn+0xd2>
			}
			wc = uc;
 800ee68:	89bb      	ldrh	r3, [r7, #12]
 800ee6a:	81fb      	strh	r3, [r7, #14]
 800ee6c:	e006      	b.n	800ee7c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ee6e:	89bb      	ldrh	r3, [r7, #12]
 800ee70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee74:	4293      	cmp	r3, r2
 800ee76:	d001      	beq.n	800ee7c <cmp_lfn+0xa0>
 800ee78:	2300      	movs	r3, #0
 800ee7a:	e018      	b.n	800eeae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	3301      	adds	r3, #1
 800ee80:	613b      	str	r3, [r7, #16]
 800ee82:	693b      	ldr	r3, [r7, #16]
 800ee84:	2b0c      	cmp	r3, #12
 800ee86:	d9c8      	bls.n	800ee1a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d00b      	beq.n	800eeac <cmp_lfn+0xd0>
 800ee94:	89fb      	ldrh	r3, [r7, #14]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d008      	beq.n	800eeac <cmp_lfn+0xd0>
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	4413      	add	r3, r2
 800eea2:	881b      	ldrh	r3, [r3, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d001      	beq.n	800eeac <cmp_lfn+0xd0>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	e000      	b.n	800eeae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800eeac:	2301      	movs	r3, #1
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	371c      	adds	r7, #28
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd90      	pop	{r4, r7, pc}
 800eeb6:	bf00      	nop
 800eeb8:	08017ddc 	.word	0x08017ddc

0800eebc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b086      	sub	sp, #24
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	331a      	adds	r3, #26
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe ff18 	bl	800dd00 <ld_word>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d001      	beq.n	800eeda <pick_lfn+0x1e>
 800eed6:	2300      	movs	r3, #0
 800eed8:	e04d      	b.n	800ef76 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eee2:	1e5a      	subs	r2, r3, #1
 800eee4:	4613      	mov	r3, r2
 800eee6:	005b      	lsls	r3, r3, #1
 800eee8:	4413      	add	r3, r2
 800eeea:	009b      	lsls	r3, r3, #2
 800eeec:	4413      	add	r3, r2
 800eeee:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eef0:	2301      	movs	r3, #1
 800eef2:	81fb      	strh	r3, [r7, #14]
 800eef4:	2300      	movs	r3, #0
 800eef6:	613b      	str	r3, [r7, #16]
 800eef8:	e028      	b.n	800ef4c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eefa:	4a21      	ldr	r2, [pc, #132]	; (800ef80 <pick_lfn+0xc4>)
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	4413      	add	r3, r2
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	461a      	mov	r2, r3
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	4413      	add	r3, r2
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f7fe fef9 	bl	800dd00 <ld_word>
 800ef0e:	4603      	mov	r3, r0
 800ef10:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ef12:	89fb      	ldrh	r3, [r7, #14]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d00f      	beq.n	800ef38 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	2bfe      	cmp	r3, #254	; 0xfe
 800ef1c:	d901      	bls.n	800ef22 <pick_lfn+0x66>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e029      	b.n	800ef76 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ef22:	89bb      	ldrh	r3, [r7, #12]
 800ef24:	81fb      	strh	r3, [r7, #14]
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	617a      	str	r2, [r7, #20]
 800ef2c:	005b      	lsls	r3, r3, #1
 800ef2e:	687a      	ldr	r2, [r7, #4]
 800ef30:	4413      	add	r3, r2
 800ef32:	89fa      	ldrh	r2, [r7, #14]
 800ef34:	801a      	strh	r2, [r3, #0]
 800ef36:	e006      	b.n	800ef46 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ef38:	89bb      	ldrh	r3, [r7, #12]
 800ef3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d001      	beq.n	800ef46 <pick_lfn+0x8a>
 800ef42:	2300      	movs	r3, #0
 800ef44:	e017      	b.n	800ef76 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	3301      	adds	r3, #1
 800ef4a:	613b      	str	r3, [r7, #16]
 800ef4c:	693b      	ldr	r3, [r7, #16]
 800ef4e:	2b0c      	cmp	r3, #12
 800ef50:	d9d3      	bls.n	800eefa <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00a      	beq.n	800ef74 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2bfe      	cmp	r3, #254	; 0xfe
 800ef62:	d901      	bls.n	800ef68 <pick_lfn+0xac>
 800ef64:	2300      	movs	r3, #0
 800ef66:	e006      	b.n	800ef76 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	005b      	lsls	r3, r3, #1
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	4413      	add	r3, r2
 800ef70:	2200      	movs	r2, #0
 800ef72:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ef74:	2301      	movs	r3, #1
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	3718      	adds	r7, #24
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	08017ddc 	.word	0x08017ddc

0800ef84 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ef84:	b580      	push	{r7, lr}
 800ef86:	b088      	sub	sp, #32
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	60f8      	str	r0, [r7, #12]
 800ef8c:	60b9      	str	r1, [r7, #8]
 800ef8e:	4611      	mov	r1, r2
 800ef90:	461a      	mov	r2, r3
 800ef92:	460b      	mov	r3, r1
 800ef94:	71fb      	strb	r3, [r7, #7]
 800ef96:	4613      	mov	r3, r2
 800ef98:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	330d      	adds	r3, #13
 800ef9e:	79ba      	ldrb	r2, [r7, #6]
 800efa0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800efa2:	68bb      	ldr	r3, [r7, #8]
 800efa4:	330b      	adds	r3, #11
 800efa6:	220f      	movs	r2, #15
 800efa8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	330c      	adds	r3, #12
 800efae:	2200      	movs	r2, #0
 800efb0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	331a      	adds	r3, #26
 800efb6:	2100      	movs	r1, #0
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fe fedc 	bl	800dd76 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800efbe:	79fb      	ldrb	r3, [r7, #7]
 800efc0:	1e5a      	subs	r2, r3, #1
 800efc2:	4613      	mov	r3, r2
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	4413      	add	r3, r2
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	4413      	add	r3, r2
 800efcc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800efce:	2300      	movs	r3, #0
 800efd0:	82fb      	strh	r3, [r7, #22]
 800efd2:	2300      	movs	r3, #0
 800efd4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800efd6:	8afb      	ldrh	r3, [r7, #22]
 800efd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800efdc:	4293      	cmp	r3, r2
 800efde:	d007      	beq.n	800eff0 <put_lfn+0x6c>
 800efe0:	69fb      	ldr	r3, [r7, #28]
 800efe2:	1c5a      	adds	r2, r3, #1
 800efe4:	61fa      	str	r2, [r7, #28]
 800efe6:	005b      	lsls	r3, r3, #1
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	4413      	add	r3, r2
 800efec:	881b      	ldrh	r3, [r3, #0]
 800efee:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800eff0:	4a17      	ldr	r2, [pc, #92]	; (800f050 <put_lfn+0xcc>)
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	4413      	add	r3, r2
 800eff6:	781b      	ldrb	r3, [r3, #0]
 800eff8:	461a      	mov	r2, r3
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	4413      	add	r3, r2
 800effe:	8afa      	ldrh	r2, [r7, #22]
 800f000:	4611      	mov	r1, r2
 800f002:	4618      	mov	r0, r3
 800f004:	f7fe feb7 	bl	800dd76 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f008:	8afb      	ldrh	r3, [r7, #22]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d102      	bne.n	800f014 <put_lfn+0x90>
 800f00e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f012:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	3301      	adds	r3, #1
 800f018:	61bb      	str	r3, [r7, #24]
 800f01a:	69bb      	ldr	r3, [r7, #24]
 800f01c:	2b0c      	cmp	r3, #12
 800f01e:	d9da      	bls.n	800efd6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f020:	8afb      	ldrh	r3, [r7, #22]
 800f022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f026:	4293      	cmp	r3, r2
 800f028:	d006      	beq.n	800f038 <put_lfn+0xb4>
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	68fa      	ldr	r2, [r7, #12]
 800f030:	4413      	add	r3, r2
 800f032:	881b      	ldrh	r3, [r3, #0]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d103      	bne.n	800f040 <put_lfn+0xbc>
 800f038:	79fb      	ldrb	r3, [r7, #7]
 800f03a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f03e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	79fa      	ldrb	r2, [r7, #7]
 800f044:	701a      	strb	r2, [r3, #0]
}
 800f046:	bf00      	nop
 800f048:	3720      	adds	r7, #32
 800f04a:	46bd      	mov	sp, r7
 800f04c:	bd80      	pop	{r7, pc}
 800f04e:	bf00      	nop
 800f050:	08017ddc 	.word	0x08017ddc

0800f054 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b08c      	sub	sp, #48	; 0x30
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60f8      	str	r0, [r7, #12]
 800f05c:	60b9      	str	r1, [r7, #8]
 800f05e:	607a      	str	r2, [r7, #4]
 800f060:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f062:	220b      	movs	r2, #11
 800f064:	68b9      	ldr	r1, [r7, #8]
 800f066:	68f8      	ldr	r0, [r7, #12]
 800f068:	f7fe fecc 	bl	800de04 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b05      	cmp	r3, #5
 800f070:	d92b      	bls.n	800f0ca <gen_numname+0x76>
		sr = seq;
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f076:	e022      	b.n	800f0be <gen_numname+0x6a>
			wc = *lfn++;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	1c9a      	adds	r2, r3, #2
 800f07c:	607a      	str	r2, [r7, #4]
 800f07e:	881b      	ldrh	r3, [r3, #0]
 800f080:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f082:	2300      	movs	r3, #0
 800f084:	62bb      	str	r3, [r7, #40]	; 0x28
 800f086:	e017      	b.n	800f0b8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f088:	69fb      	ldr	r3, [r7, #28]
 800f08a:	005a      	lsls	r2, r3, #1
 800f08c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f08e:	f003 0301 	and.w	r3, r3, #1
 800f092:	4413      	add	r3, r2
 800f094:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f096:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f098:	085b      	lsrs	r3, r3, #1
 800f09a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f09c:	69fb      	ldr	r3, [r7, #28]
 800f09e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d005      	beq.n	800f0b2 <gen_numname+0x5e>
 800f0a6:	69fb      	ldr	r3, [r7, #28]
 800f0a8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f0ac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f0b0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0ba:	2b0f      	cmp	r3, #15
 800f0bc:	d9e4      	bls.n	800f088 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1d8      	bne.n	800f078 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f0c6:	69fb      	ldr	r3, [r7, #28]
 800f0c8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f0ca:	2307      	movs	r3, #7
 800f0cc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	f003 030f 	and.w	r3, r3, #15
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	3330      	adds	r3, #48	; 0x30
 800f0da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f0de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0e2:	2b39      	cmp	r3, #57	; 0x39
 800f0e4:	d904      	bls.n	800f0f0 <gen_numname+0x9c>
 800f0e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f0ea:	3307      	adds	r3, #7
 800f0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f2:	1e5a      	subs	r2, r3, #1
 800f0f4:	62ba      	str	r2, [r7, #40]	; 0x28
 800f0f6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f0fa:	4413      	add	r3, r2
 800f0fc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f100:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	091b      	lsrs	r3, r3, #4
 800f108:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d1de      	bne.n	800f0ce <gen_numname+0x7a>
	ns[i] = '~';
 800f110:	f107 0214 	add.w	r2, r7, #20
 800f114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f116:	4413      	add	r3, r2
 800f118:	227e      	movs	r2, #126	; 0x7e
 800f11a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f11c:	2300      	movs	r3, #0
 800f11e:	627b      	str	r3, [r7, #36]	; 0x24
 800f120:	e002      	b.n	800f128 <gen_numname+0xd4>
 800f122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f124:	3301      	adds	r3, #1
 800f126:	627b      	str	r3, [r7, #36]	; 0x24
 800f128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12c:	429a      	cmp	r2, r3
 800f12e:	d205      	bcs.n	800f13c <gen_numname+0xe8>
 800f130:	68fa      	ldr	r2, [r7, #12]
 800f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f134:	4413      	add	r3, r2
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	2b20      	cmp	r3, #32
 800f13a:	d1f2      	bne.n	800f122 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13e:	2b07      	cmp	r3, #7
 800f140:	d808      	bhi.n	800f154 <gen_numname+0x100>
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	62ba      	str	r2, [r7, #40]	; 0x28
 800f148:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f14c:	4413      	add	r3, r2
 800f14e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f152:	e000      	b.n	800f156 <gen_numname+0x102>
 800f154:	2120      	movs	r1, #32
 800f156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f158:	1c5a      	adds	r2, r3, #1
 800f15a:	627a      	str	r2, [r7, #36]	; 0x24
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	4413      	add	r3, r2
 800f160:	460a      	mov	r2, r1
 800f162:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f166:	2b07      	cmp	r3, #7
 800f168:	d9e8      	bls.n	800f13c <gen_numname+0xe8>
}
 800f16a:	bf00      	nop
 800f16c:	3730      	adds	r7, #48	; 0x30
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f172:	b480      	push	{r7}
 800f174:	b085      	sub	sp, #20
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f17e:	230b      	movs	r3, #11
 800f180:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f182:	7bfb      	ldrb	r3, [r7, #15]
 800f184:	b2da      	uxtb	r2, r3
 800f186:	0852      	lsrs	r2, r2, #1
 800f188:	01db      	lsls	r3, r3, #7
 800f18a:	4313      	orrs	r3, r2
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	1c59      	adds	r1, r3, #1
 800f192:	6079      	str	r1, [r7, #4]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	4413      	add	r3, r2
 800f198:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	3b01      	subs	r3, #1
 800f19e:	60bb      	str	r3, [r7, #8]
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1ed      	bne.n	800f182 <sum_sfn+0x10>
	return sum;
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	3714      	adds	r7, #20
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b086      	sub	sp, #24
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f1be:	2304      	movs	r3, #4
 800f1c0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f1c8:	23ff      	movs	r3, #255	; 0xff
 800f1ca:	757b      	strb	r3, [r7, #21]
 800f1cc:	23ff      	movs	r3, #255	; 0xff
 800f1ce:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f1d0:	e081      	b.n	800f2d6 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	69db      	ldr	r3, [r3, #28]
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	6938      	ldr	r0, [r7, #16]
 800f1da:	f7ff f841 	bl	800e260 <move_window>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1e2:	7dfb      	ldrb	r3, [r7, #23]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d17c      	bne.n	800f2e2 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6a1b      	ldr	r3, [r3, #32]
 800f1ec:	781b      	ldrb	r3, [r3, #0]
 800f1ee:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f1f0:	7dbb      	ldrb	r3, [r7, #22]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d102      	bne.n	800f1fc <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f1f6:	2304      	movs	r3, #4
 800f1f8:	75fb      	strb	r3, [r7, #23]
 800f1fa:	e077      	b.n	800f2ec <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	6a1b      	ldr	r3, [r3, #32]
 800f200:	330b      	adds	r3, #11
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f208:	73fb      	strb	r3, [r7, #15]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	7bfa      	ldrb	r2, [r7, #15]
 800f20e:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f210:	7dbb      	ldrb	r3, [r7, #22]
 800f212:	2be5      	cmp	r3, #229	; 0xe5
 800f214:	d00e      	beq.n	800f234 <dir_read+0x80>
 800f216:	7dbb      	ldrb	r3, [r7, #22]
 800f218:	2b2e      	cmp	r3, #46	; 0x2e
 800f21a:	d00b      	beq.n	800f234 <dir_read+0x80>
 800f21c:	7bfb      	ldrb	r3, [r7, #15]
 800f21e:	f023 0320 	bic.w	r3, r3, #32
 800f222:	2b08      	cmp	r3, #8
 800f224:	bf0c      	ite	eq
 800f226:	2301      	moveq	r3, #1
 800f228:	2300      	movne	r3, #0
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	461a      	mov	r2, r3
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	4293      	cmp	r3, r2
 800f232:	d002      	beq.n	800f23a <dir_read+0x86>
				ord = 0xFF;
 800f234:	23ff      	movs	r3, #255	; 0xff
 800f236:	757b      	strb	r3, [r7, #21]
 800f238:	e044      	b.n	800f2c4 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f23a:	7bfb      	ldrb	r3, [r7, #15]
 800f23c:	2b0f      	cmp	r3, #15
 800f23e:	d12f      	bne.n	800f2a0 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f240:	7dbb      	ldrb	r3, [r7, #22]
 800f242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f246:	2b00      	cmp	r3, #0
 800f248:	d00d      	beq.n	800f266 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6a1b      	ldr	r3, [r3, #32]
 800f24e:	7b5b      	ldrb	r3, [r3, #13]
 800f250:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f252:	7dbb      	ldrb	r3, [r7, #22]
 800f254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f258:	75bb      	strb	r3, [r7, #22]
 800f25a:	7dbb      	ldrb	r3, [r7, #22]
 800f25c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	695a      	ldr	r2, [r3, #20]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f266:	7dba      	ldrb	r2, [r7, #22]
 800f268:	7d7b      	ldrb	r3, [r7, #21]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d115      	bne.n	800f29a <dir_read+0xe6>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	330d      	adds	r3, #13
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	7d3a      	ldrb	r2, [r7, #20]
 800f278:	429a      	cmp	r2, r3
 800f27a:	d10e      	bne.n	800f29a <dir_read+0xe6>
 800f27c:	693b      	ldr	r3, [r7, #16]
 800f27e:	691a      	ldr	r2, [r3, #16]
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	4619      	mov	r1, r3
 800f286:	4610      	mov	r0, r2
 800f288:	f7ff fe18 	bl	800eebc <pick_lfn>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d003      	beq.n	800f29a <dir_read+0xe6>
 800f292:	7d7b      	ldrb	r3, [r7, #21]
 800f294:	3b01      	subs	r3, #1
 800f296:	b2db      	uxtb	r3, r3
 800f298:	e000      	b.n	800f29c <dir_read+0xe8>
 800f29a:	23ff      	movs	r3, #255	; 0xff
 800f29c:	757b      	strb	r3, [r7, #21]
 800f29e:	e011      	b.n	800f2c4 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f2a0:	7d7b      	ldrb	r3, [r7, #21]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d109      	bne.n	800f2ba <dir_read+0x106>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6a1b      	ldr	r3, [r3, #32]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7ff ff61 	bl	800f172 <sum_sfn>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	7d3b      	ldrb	r3, [r7, #20]
 800f2b6:	4293      	cmp	r3, r2
 800f2b8:	d015      	beq.n	800f2e6 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	f04f 32ff 	mov.w	r2, #4294967295
 800f2c0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f2c2:	e010      	b.n	800f2e6 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	f7ff fc2c 	bl	800eb24 <dir_next>
 800f2cc:	4603      	mov	r3, r0
 800f2ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f2d0:	7dfb      	ldrb	r3, [r7, #23]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d109      	bne.n	800f2ea <dir_read+0x136>
	while (dp->sect) {
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	69db      	ldr	r3, [r3, #28]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	f47f af79 	bne.w	800f1d2 <dir_read+0x1e>
 800f2e0:	e004      	b.n	800f2ec <dir_read+0x138>
		if (res != FR_OK) break;
 800f2e2:	bf00      	nop
 800f2e4:	e002      	b.n	800f2ec <dir_read+0x138>
					break;
 800f2e6:	bf00      	nop
 800f2e8:	e000      	b.n	800f2ec <dir_read+0x138>
		if (res != FR_OK) break;
 800f2ea:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f2ec:	7dfb      	ldrb	r3, [r7, #23]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d002      	beq.n	800f2f8 <dir_read+0x144>
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	61da      	str	r2, [r3, #28]
	return res;
 800f2f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3718      	adds	r7, #24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}

0800f302 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f302:	b580      	push	{r7, lr}
 800f304:	b086      	sub	sp, #24
 800f306:	af00      	add	r7, sp, #0
 800f308:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f310:	2100      	movs	r1, #0
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f7ff fb7d 	bl	800ea12 <dir_sdi>
 800f318:	4603      	mov	r3, r0
 800f31a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f31c:	7dfb      	ldrb	r3, [r7, #23]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <dir_find+0x24>
 800f322:	7dfb      	ldrb	r3, [r7, #23]
 800f324:	e0a9      	b.n	800f47a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f326:	23ff      	movs	r3, #255	; 0xff
 800f328:	753b      	strb	r3, [r7, #20]
 800f32a:	7d3b      	ldrb	r3, [r7, #20]
 800f32c:	757b      	strb	r3, [r7, #21]
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f04f 32ff 	mov.w	r2, #4294967295
 800f334:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	69db      	ldr	r3, [r3, #28]
 800f33a:	4619      	mov	r1, r3
 800f33c:	6938      	ldr	r0, [r7, #16]
 800f33e:	f7fe ff8f 	bl	800e260 <move_window>
 800f342:	4603      	mov	r3, r0
 800f344:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f346:	7dfb      	ldrb	r3, [r7, #23]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	f040 8090 	bne.w	800f46e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6a1b      	ldr	r3, [r3, #32]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f356:	7dbb      	ldrb	r3, [r7, #22]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d102      	bne.n	800f362 <dir_find+0x60>
 800f35c:	2304      	movs	r3, #4
 800f35e:	75fb      	strb	r3, [r7, #23]
 800f360:	e08a      	b.n	800f478 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a1b      	ldr	r3, [r3, #32]
 800f366:	330b      	adds	r3, #11
 800f368:	781b      	ldrb	r3, [r3, #0]
 800f36a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f36e:	73fb      	strb	r3, [r7, #15]
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	7bfa      	ldrb	r2, [r7, #15]
 800f374:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f376:	7dbb      	ldrb	r3, [r7, #22]
 800f378:	2be5      	cmp	r3, #229	; 0xe5
 800f37a:	d007      	beq.n	800f38c <dir_find+0x8a>
 800f37c:	7bfb      	ldrb	r3, [r7, #15]
 800f37e:	f003 0308 	and.w	r3, r3, #8
 800f382:	2b00      	cmp	r3, #0
 800f384:	d009      	beq.n	800f39a <dir_find+0x98>
 800f386:	7bfb      	ldrb	r3, [r7, #15]
 800f388:	2b0f      	cmp	r3, #15
 800f38a:	d006      	beq.n	800f39a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f38c:	23ff      	movs	r3, #255	; 0xff
 800f38e:	757b      	strb	r3, [r7, #21]
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	f04f 32ff 	mov.w	r2, #4294967295
 800f396:	631a      	str	r2, [r3, #48]	; 0x30
 800f398:	e05e      	b.n	800f458 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f39a:	7bfb      	ldrb	r3, [r7, #15]
 800f39c:	2b0f      	cmp	r3, #15
 800f39e:	d136      	bne.n	800f40e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d154      	bne.n	800f458 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f3ae:	7dbb      	ldrb	r3, [r7, #22]
 800f3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00d      	beq.n	800f3d4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6a1b      	ldr	r3, [r3, #32]
 800f3bc:	7b5b      	ldrb	r3, [r3, #13]
 800f3be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f3c0:	7dbb      	ldrb	r3, [r7, #22]
 800f3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3c6:	75bb      	strb	r3, [r7, #22]
 800f3c8:	7dbb      	ldrb	r3, [r7, #22]
 800f3ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	695a      	ldr	r2, [r3, #20]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f3d4:	7dba      	ldrb	r2, [r7, #22]
 800f3d6:	7d7b      	ldrb	r3, [r7, #21]
 800f3d8:	429a      	cmp	r2, r3
 800f3da:	d115      	bne.n	800f408 <dir_find+0x106>
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6a1b      	ldr	r3, [r3, #32]
 800f3e0:	330d      	adds	r3, #13
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	7d3a      	ldrb	r2, [r7, #20]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d10e      	bne.n	800f408 <dir_find+0x106>
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	691a      	ldr	r2, [r3, #16]
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6a1b      	ldr	r3, [r3, #32]
 800f3f2:	4619      	mov	r1, r3
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	f7ff fcf1 	bl	800eddc <cmp_lfn>
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d003      	beq.n	800f408 <dir_find+0x106>
 800f400:	7d7b      	ldrb	r3, [r7, #21]
 800f402:	3b01      	subs	r3, #1
 800f404:	b2db      	uxtb	r3, r3
 800f406:	e000      	b.n	800f40a <dir_find+0x108>
 800f408:	23ff      	movs	r3, #255	; 0xff
 800f40a:	757b      	strb	r3, [r7, #21]
 800f40c:	e024      	b.n	800f458 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f40e:	7d7b      	ldrb	r3, [r7, #21]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d109      	bne.n	800f428 <dir_find+0x126>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6a1b      	ldr	r3, [r3, #32]
 800f418:	4618      	mov	r0, r3
 800f41a:	f7ff feaa 	bl	800f172 <sum_sfn>
 800f41e:	4603      	mov	r3, r0
 800f420:	461a      	mov	r2, r3
 800f422:	7d3b      	ldrb	r3, [r7, #20]
 800f424:	4293      	cmp	r3, r2
 800f426:	d024      	beq.n	800f472 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	2b00      	cmp	r3, #0
 800f434:	d10a      	bne.n	800f44c <dir_find+0x14a>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	6a18      	ldr	r0, [r3, #32]
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3324      	adds	r3, #36	; 0x24
 800f43e:	220b      	movs	r2, #11
 800f440:	4619      	mov	r1, r3
 800f442:	f7fe fd1a 	bl	800de7a <mem_cmp>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d014      	beq.n	800f476 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f44c:	23ff      	movs	r3, #255	; 0xff
 800f44e:	757b      	strb	r3, [r7, #21]
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f04f 32ff 	mov.w	r2, #4294967295
 800f456:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f458:	2100      	movs	r1, #0
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f7ff fb62 	bl	800eb24 <dir_next>
 800f460:	4603      	mov	r3, r0
 800f462:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f464:	7dfb      	ldrb	r3, [r7, #23]
 800f466:	2b00      	cmp	r3, #0
 800f468:	f43f af65 	beq.w	800f336 <dir_find+0x34>
 800f46c:	e004      	b.n	800f478 <dir_find+0x176>
		if (res != FR_OK) break;
 800f46e:	bf00      	nop
 800f470:	e002      	b.n	800f478 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f472:	bf00      	nop
 800f474:	e000      	b.n	800f478 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f476:	bf00      	nop

	return res;
 800f478:	7dfb      	ldrb	r3, [r7, #23]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
	...

0800f484 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b08c      	sub	sp, #48	; 0x30
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f498:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d001      	beq.n	800f4a4 <dir_register+0x20>
 800f4a0:	2306      	movs	r3, #6
 800f4a2:	e0e0      	b.n	800f666 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f4a8:	e002      	b.n	800f4b0 <dir_register+0x2c>
 800f4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ac:	3301      	adds	r3, #1
 800f4ae:	627b      	str	r3, [r7, #36]	; 0x24
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	691a      	ldr	r2, [r3, #16]
 800f4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4b6:	005b      	lsls	r3, r3, #1
 800f4b8:	4413      	add	r3, r2
 800f4ba:	881b      	ldrh	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d1f4      	bne.n	800f4aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f4c6:	f107 030c 	add.w	r3, r7, #12
 800f4ca:	220c      	movs	r2, #12
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fe fc99 	bl	800de04 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f4d2:	7dfb      	ldrb	r3, [r7, #23]
 800f4d4:	f003 0301 	and.w	r3, r3, #1
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d032      	beq.n	800f542 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2240      	movs	r2, #64	; 0x40
 800f4e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800f4e8:	e016      	b.n	800f518 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f4f0:	69fb      	ldr	r3, [r7, #28]
 800f4f2:	691a      	ldr	r2, [r3, #16]
 800f4f4:	f107 010c 	add.w	r1, r7, #12
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	f7ff fdab 	bl	800f054 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7ff feff 	bl	800f302 <dir_find>
 800f504:	4603      	mov	r3, r0
 800f506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f50a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d106      	bne.n	800f520 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f514:	3301      	adds	r3, #1
 800f516:	62bb      	str	r3, [r7, #40]	; 0x28
 800f518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51a:	2b63      	cmp	r3, #99	; 0x63
 800f51c:	d9e5      	bls.n	800f4ea <dir_register+0x66>
 800f51e:	e000      	b.n	800f522 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f520:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f524:	2b64      	cmp	r3, #100	; 0x64
 800f526:	d101      	bne.n	800f52c <dir_register+0xa8>
 800f528:	2307      	movs	r3, #7
 800f52a:	e09c      	b.n	800f666 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f52c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f530:	2b04      	cmp	r3, #4
 800f532:	d002      	beq.n	800f53a <dir_register+0xb6>
 800f534:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f538:	e095      	b.n	800f666 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f53a:	7dfa      	ldrb	r2, [r7, #23]
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f542:	7dfb      	ldrb	r3, [r7, #23]
 800f544:	f003 0302 	and.w	r3, r3, #2
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d007      	beq.n	800f55c <dir_register+0xd8>
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	330c      	adds	r3, #12
 800f550:	4a47      	ldr	r2, [pc, #284]	; (800f670 <dir_register+0x1ec>)
 800f552:	fba2 2303 	umull	r2, r3, r2, r3
 800f556:	089b      	lsrs	r3, r3, #2
 800f558:	3301      	adds	r3, #1
 800f55a:	e000      	b.n	800f55e <dir_register+0xda>
 800f55c:	2301      	movs	r3, #1
 800f55e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f560:	6a39      	ldr	r1, [r7, #32]
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff fbb4 	bl	800ecd0 <dir_alloc>
 800f568:	4603      	mov	r3, r0
 800f56a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f56e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f572:	2b00      	cmp	r3, #0
 800f574:	d148      	bne.n	800f608 <dir_register+0x184>
 800f576:	6a3b      	ldr	r3, [r7, #32]
 800f578:	3b01      	subs	r3, #1
 800f57a:	623b      	str	r3, [r7, #32]
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d042      	beq.n	800f608 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	695a      	ldr	r2, [r3, #20]
 800f586:	6a3b      	ldr	r3, [r7, #32]
 800f588:	015b      	lsls	r3, r3, #5
 800f58a:	1ad3      	subs	r3, r2, r3
 800f58c:	4619      	mov	r1, r3
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff fa3f 	bl	800ea12 <dir_sdi>
 800f594:	4603      	mov	r3, r0
 800f596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f59a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d132      	bne.n	800f608 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	3324      	adds	r3, #36	; 0x24
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7ff fde3 	bl	800f172 <sum_sfn>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	69db      	ldr	r3, [r3, #28]
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	69f8      	ldr	r0, [r7, #28]
 800f5b8:	f7fe fe52 	bl	800e260 <move_window>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d11d      	bne.n	800f606 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f5ca:	69fb      	ldr	r3, [r7, #28]
 800f5cc:	6918      	ldr	r0, [r3, #16]
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6a19      	ldr	r1, [r3, #32]
 800f5d2:	6a3b      	ldr	r3, [r7, #32]
 800f5d4:	b2da      	uxtb	r2, r3
 800f5d6:	7efb      	ldrb	r3, [r7, #27]
 800f5d8:	f7ff fcd4 	bl	800ef84 <put_lfn>
				fs->wflag = 1;
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff fa9d 	bl	800eb24 <dir_next>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f5f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d107      	bne.n	800f608 <dir_register+0x184>
 800f5f8:	6a3b      	ldr	r3, [r7, #32]
 800f5fa:	3b01      	subs	r3, #1
 800f5fc:	623b      	str	r3, [r7, #32]
 800f5fe:	6a3b      	ldr	r3, [r7, #32]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d1d5      	bne.n	800f5b0 <dir_register+0x12c>
 800f604:	e000      	b.n	800f608 <dir_register+0x184>
				if (res != FR_OK) break;
 800f606:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d128      	bne.n	800f662 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	69db      	ldr	r3, [r3, #28]
 800f614:	4619      	mov	r1, r3
 800f616:	69f8      	ldr	r0, [r7, #28]
 800f618:	f7fe fe22 	bl	800e260 <move_window>
 800f61c:	4603      	mov	r3, r0
 800f61e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f622:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f626:	2b00      	cmp	r3, #0
 800f628:	d11b      	bne.n	800f662 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	6a1b      	ldr	r3, [r3, #32]
 800f62e:	2220      	movs	r2, #32
 800f630:	2100      	movs	r1, #0
 800f632:	4618      	mov	r0, r3
 800f634:	f7fe fc07 	bl	800de46 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a18      	ldr	r0, [r3, #32]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	3324      	adds	r3, #36	; 0x24
 800f640:	220b      	movs	r2, #11
 800f642:	4619      	mov	r1, r3
 800f644:	f7fe fbde 	bl	800de04 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a1b      	ldr	r3, [r3, #32]
 800f652:	330c      	adds	r3, #12
 800f654:	f002 0218 	and.w	r2, r2, #24
 800f658:	b2d2      	uxtb	r2, r2
 800f65a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2201      	movs	r2, #1
 800f660:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f666:	4618      	mov	r0, r3
 800f668:	3730      	adds	r7, #48	; 0x30
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	4ec4ec4f 	.word	0x4ec4ec4f

0800f674 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f68c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f690:	d007      	beq.n	800f6a2 <dir_remove+0x2e>
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f696:	4619      	mov	r1, r3
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f7ff f9ba 	bl	800ea12 <dir_sdi>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	e000      	b.n	800f6a4 <dir_remove+0x30>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f6a6:	7dfb      	ldrb	r3, [r7, #23]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d128      	bne.n	800f6fe <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	69db      	ldr	r3, [r3, #28]
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	6938      	ldr	r0, [r7, #16]
 800f6b4:	f7fe fdd4 	bl	800e260 <move_window>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f6bc:	7dfb      	ldrb	r3, [r7, #23]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d115      	bne.n	800f6ee <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6a1b      	ldr	r3, [r3, #32]
 800f6c6:	22e5      	movs	r2, #229	; 0xe5
 800f6c8:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	695b      	ldr	r3, [r3, #20]
 800f6d4:	68fa      	ldr	r2, [r7, #12]
 800f6d6:	429a      	cmp	r2, r3
 800f6d8:	d90b      	bls.n	800f6f2 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800f6da:	2100      	movs	r1, #0
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f7ff fa21 	bl	800eb24 <dir_next>
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800f6e6:	7dfb      	ldrb	r3, [r7, #23]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d0df      	beq.n	800f6ac <dir_remove+0x38>
 800f6ec:	e002      	b.n	800f6f4 <dir_remove+0x80>
			if (res != FR_OK) break;
 800f6ee:	bf00      	nop
 800f6f0:	e000      	b.n	800f6f4 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f6f2:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800f6f4:	7dfb      	ldrb	r3, [r7, #23]
 800f6f6:	2b04      	cmp	r3, #4
 800f6f8:	d101      	bne.n	800f6fe <dir_remove+0x8a>
 800f6fa:	2302      	movs	r3, #2
 800f6fc:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800f6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f700:	4618      	mov	r0, r3
 800f702:	3718      	adds	r7, #24
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b08a      	sub	sp, #40	; 0x28
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	613b      	str	r3, [r7, #16]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	60fb      	str	r3, [r7, #12]
 800f720:	2300      	movs	r3, #0
 800f722:	617b      	str	r3, [r7, #20]
 800f724:	697b      	ldr	r3, [r7, #20]
 800f726:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f728:	69bb      	ldr	r3, [r7, #24]
 800f72a:	1c5a      	adds	r2, r3, #1
 800f72c:	61ba      	str	r2, [r7, #24]
 800f72e:	693a      	ldr	r2, [r7, #16]
 800f730:	4413      	add	r3, r2
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f736:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f738:	2b1f      	cmp	r3, #31
 800f73a:	d940      	bls.n	800f7be <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f73c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f73e:	2b2f      	cmp	r3, #47	; 0x2f
 800f740:	d006      	beq.n	800f750 <create_name+0x48>
 800f742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f744:	2b5c      	cmp	r3, #92	; 0x5c
 800f746:	d110      	bne.n	800f76a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f748:	e002      	b.n	800f750 <create_name+0x48>
 800f74a:	69bb      	ldr	r3, [r7, #24]
 800f74c:	3301      	adds	r3, #1
 800f74e:	61bb      	str	r3, [r7, #24]
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	69bb      	ldr	r3, [r7, #24]
 800f754:	4413      	add	r3, r2
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	2b2f      	cmp	r3, #47	; 0x2f
 800f75a:	d0f6      	beq.n	800f74a <create_name+0x42>
 800f75c:	693a      	ldr	r2, [r7, #16]
 800f75e:	69bb      	ldr	r3, [r7, #24]
 800f760:	4413      	add	r3, r2
 800f762:	781b      	ldrb	r3, [r3, #0]
 800f764:	2b5c      	cmp	r3, #92	; 0x5c
 800f766:	d0f0      	beq.n	800f74a <create_name+0x42>
			break;
 800f768:	e02a      	b.n	800f7c0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2bfe      	cmp	r3, #254	; 0xfe
 800f76e:	d901      	bls.n	800f774 <create_name+0x6c>
 800f770:	2306      	movs	r3, #6
 800f772:	e1c9      	b.n	800fb08 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f774:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f776:	b2db      	uxtb	r3, r3
 800f778:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f77a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f77c:	2101      	movs	r1, #1
 800f77e:	4618      	mov	r0, r3
 800f780:	f002 f848 	bl	8011814 <ff_convert>
 800f784:	4603      	mov	r3, r0
 800f786:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d101      	bne.n	800f792 <create_name+0x8a>
 800f78e:	2306      	movs	r3, #6
 800f790:	e1ba      	b.n	800fb08 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f794:	2b7f      	cmp	r3, #127	; 0x7f
 800f796:	d809      	bhi.n	800f7ac <create_name+0xa4>
 800f798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f79a:	4619      	mov	r1, r3
 800f79c:	48a5      	ldr	r0, [pc, #660]	; (800fa34 <create_name+0x32c>)
 800f79e:	f7fe fb93 	bl	800dec8 <chk_chr>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d001      	beq.n	800f7ac <create_name+0xa4>
 800f7a8:	2306      	movs	r3, #6
 800f7aa:	e1ad      	b.n	800fb08 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800f7ac:	697b      	ldr	r3, [r7, #20]
 800f7ae:	1c5a      	adds	r2, r3, #1
 800f7b0:	617a      	str	r2, [r7, #20]
 800f7b2:	005b      	lsls	r3, r3, #1
 800f7b4:	68fa      	ldr	r2, [r7, #12]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f7ba:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f7bc:	e7b4      	b.n	800f728 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f7be:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	441a      	add	r2, r3
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f7cc:	2b1f      	cmp	r3, #31
 800f7ce:	d801      	bhi.n	800f7d4 <create_name+0xcc>
 800f7d0:	2304      	movs	r3, #4
 800f7d2:	e000      	b.n	800f7d6 <create_name+0xce>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	2b01      	cmp	r3, #1
 800f7de:	d109      	bne.n	800f7f4 <create_name+0xec>
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	005b      	lsls	r3, r3, #1
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	881b      	ldrh	r3, [r3, #0]
 800f7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800f7f2:	d016      	beq.n	800f822 <create_name+0x11a>
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	d14e      	bne.n	800f898 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800f7fa:	697b      	ldr	r3, [r7, #20]
 800f7fc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f800:	3b01      	subs	r3, #1
 800f802:	005b      	lsls	r3, r3, #1
 800f804:	68fa      	ldr	r2, [r7, #12]
 800f806:	4413      	add	r3, r2
 800f808:	881b      	ldrh	r3, [r3, #0]
 800f80a:	2b2e      	cmp	r3, #46	; 0x2e
 800f80c:	d144      	bne.n	800f898 <create_name+0x190>
 800f80e:	697b      	ldr	r3, [r7, #20]
 800f810:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f814:	3b02      	subs	r3, #2
 800f816:	005b      	lsls	r3, r3, #1
 800f818:	68fa      	ldr	r2, [r7, #12]
 800f81a:	4413      	add	r3, r2
 800f81c:	881b      	ldrh	r3, [r3, #0]
 800f81e:	2b2e      	cmp	r3, #46	; 0x2e
 800f820:	d13a      	bne.n	800f898 <create_name+0x190>
		lfn[di] = 0;
 800f822:	697b      	ldr	r3, [r7, #20]
 800f824:	005b      	lsls	r3, r3, #1
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	4413      	add	r3, r2
 800f82a:	2200      	movs	r2, #0
 800f82c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f82e:	2300      	movs	r3, #0
 800f830:	623b      	str	r3, [r7, #32]
 800f832:	e00f      	b.n	800f854 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800f834:	6a3a      	ldr	r2, [r7, #32]
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d201      	bcs.n	800f840 <create_name+0x138>
 800f83c:	212e      	movs	r1, #46	; 0x2e
 800f83e:	e000      	b.n	800f842 <create_name+0x13a>
 800f840:	2120      	movs	r1, #32
 800f842:	687a      	ldr	r2, [r7, #4]
 800f844:	6a3b      	ldr	r3, [r7, #32]
 800f846:	4413      	add	r3, r2
 800f848:	3324      	adds	r3, #36	; 0x24
 800f84a:	460a      	mov	r2, r1
 800f84c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f84e:	6a3b      	ldr	r3, [r7, #32]
 800f850:	3301      	adds	r3, #1
 800f852:	623b      	str	r3, [r7, #32]
 800f854:	6a3b      	ldr	r3, [r7, #32]
 800f856:	2b0a      	cmp	r3, #10
 800f858:	d9ec      	bls.n	800f834 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800f85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f85e:	f043 0320 	orr.w	r3, r3, #32
 800f862:	b2d9      	uxtb	r1, r3
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	6a3b      	ldr	r3, [r7, #32]
 800f868:	4413      	add	r3, r2
 800f86a:	3324      	adds	r3, #36	; 0x24
 800f86c:	460a      	mov	r2, r1
 800f86e:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f870:	2300      	movs	r3, #0
 800f872:	e149      	b.n	800fb08 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f87a:	3b01      	subs	r3, #1
 800f87c:	005b      	lsls	r3, r3, #1
 800f87e:	68fa      	ldr	r2, [r7, #12]
 800f880:	4413      	add	r3, r2
 800f882:	881b      	ldrh	r3, [r3, #0]
 800f884:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f888:	2b20      	cmp	r3, #32
 800f88a:	d002      	beq.n	800f892 <create_name+0x18a>
 800f88c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f88e:	2b2e      	cmp	r3, #46	; 0x2e
 800f890:	d106      	bne.n	800f8a0 <create_name+0x198>
		di--;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	3b01      	subs	r3, #1
 800f896:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d1ea      	bne.n	800f874 <create_name+0x16c>
 800f89e:	e000      	b.n	800f8a2 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f8a0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f8a2:	697b      	ldr	r3, [r7, #20]
 800f8a4:	005b      	lsls	r3, r3, #1
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d101      	bne.n	800f8b8 <create_name+0x1b0>
 800f8b4:	2306      	movs	r3, #6
 800f8b6:	e127      	b.n	800fb08 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	3324      	adds	r3, #36	; 0x24
 800f8bc:	220b      	movs	r2, #11
 800f8be:	2120      	movs	r1, #32
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f7fe fac0 	bl	800de46 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	61bb      	str	r3, [r7, #24]
 800f8ca:	e002      	b.n	800f8d2 <create_name+0x1ca>
 800f8cc:	69bb      	ldr	r3, [r7, #24]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	61bb      	str	r3, [r7, #24]
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	005b      	lsls	r3, r3, #1
 800f8d6:	68fa      	ldr	r2, [r7, #12]
 800f8d8:	4413      	add	r3, r2
 800f8da:	881b      	ldrh	r3, [r3, #0]
 800f8dc:	2b20      	cmp	r3, #32
 800f8de:	d0f5      	beq.n	800f8cc <create_name+0x1c4>
 800f8e0:	69bb      	ldr	r3, [r7, #24]
 800f8e2:	005b      	lsls	r3, r3, #1
 800f8e4:	68fa      	ldr	r2, [r7, #12]
 800f8e6:	4413      	add	r3, r2
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	2b2e      	cmp	r3, #46	; 0x2e
 800f8ec:	d0ee      	beq.n	800f8cc <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f8ee:	69bb      	ldr	r3, [r7, #24]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d009      	beq.n	800f908 <create_name+0x200>
 800f8f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8f8:	f043 0303 	orr.w	r3, r3, #3
 800f8fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f900:	e002      	b.n	800f908 <create_name+0x200>
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	3b01      	subs	r3, #1
 800f906:	617b      	str	r3, [r7, #20]
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d009      	beq.n	800f922 <create_name+0x21a>
 800f90e:	697b      	ldr	r3, [r7, #20]
 800f910:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f914:	3b01      	subs	r3, #1
 800f916:	005b      	lsls	r3, r3, #1
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	4413      	add	r3, r2
 800f91c:	881b      	ldrh	r3, [r3, #0]
 800f91e:	2b2e      	cmp	r3, #46	; 0x2e
 800f920:	d1ef      	bne.n	800f902 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800f922:	2300      	movs	r3, #0
 800f924:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f928:	2300      	movs	r3, #0
 800f92a:	623b      	str	r3, [r7, #32]
 800f92c:	2308      	movs	r3, #8
 800f92e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f930:	69bb      	ldr	r3, [r7, #24]
 800f932:	1c5a      	adds	r2, r3, #1
 800f934:	61ba      	str	r2, [r7, #24]
 800f936:	005b      	lsls	r3, r3, #1
 800f938:	68fa      	ldr	r2, [r7, #12]
 800f93a:	4413      	add	r3, r2
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 8096 	beq.w	800fa74 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f94a:	2b20      	cmp	r3, #32
 800f94c:	d006      	beq.n	800f95c <create_name+0x254>
 800f94e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f950:	2b2e      	cmp	r3, #46	; 0x2e
 800f952:	d10a      	bne.n	800f96a <create_name+0x262>
 800f954:	69ba      	ldr	r2, [r7, #24]
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	429a      	cmp	r2, r3
 800f95a:	d006      	beq.n	800f96a <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800f95c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f960:	f043 0303 	orr.w	r3, r3, #3
 800f964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f968:	e083      	b.n	800fa72 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f96a:	6a3a      	ldr	r2, [r7, #32]
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	429a      	cmp	r2, r3
 800f970:	d203      	bcs.n	800f97a <create_name+0x272>
 800f972:	69ba      	ldr	r2, [r7, #24]
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	429a      	cmp	r2, r3
 800f978:	d123      	bne.n	800f9c2 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800f97a:	69fb      	ldr	r3, [r7, #28]
 800f97c:	2b0b      	cmp	r3, #11
 800f97e:	d106      	bne.n	800f98e <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800f980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f984:	f043 0303 	orr.w	r3, r3, #3
 800f988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f98c:	e075      	b.n	800fa7a <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f98e:	69ba      	ldr	r2, [r7, #24]
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	429a      	cmp	r2, r3
 800f994:	d005      	beq.n	800f9a2 <create_name+0x29a>
 800f996:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f99a:	f043 0303 	orr.w	r3, r3, #3
 800f99e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f9a2:	69ba      	ldr	r2, [r7, #24]
 800f9a4:	697b      	ldr	r3, [r7, #20]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d866      	bhi.n	800fa78 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f9aa:	697b      	ldr	r3, [r7, #20]
 800f9ac:	61bb      	str	r3, [r7, #24]
 800f9ae:	2308      	movs	r3, #8
 800f9b0:	623b      	str	r3, [r7, #32]
 800f9b2:	230b      	movs	r3, #11
 800f9b4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f9b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f9c0:	e057      	b.n	800fa72 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f9c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9c4:	2b7f      	cmp	r3, #127	; 0x7f
 800f9c6:	d914      	bls.n	800f9f2 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f9c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9ca:	2100      	movs	r1, #0
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	f001 ff21 	bl	8011814 <ff_convert>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f9d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d004      	beq.n	800f9e6 <create_name+0x2de>
 800f9dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9de:	3b80      	subs	r3, #128	; 0x80
 800f9e0:	4a15      	ldr	r2, [pc, #84]	; (800fa38 <create_name+0x330>)
 800f9e2:	5cd3      	ldrb	r3, [r2, r3]
 800f9e4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f9e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9ea:	f043 0302 	orr.w	r3, r3, #2
 800f9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f9f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d007      	beq.n	800fa08 <create_name+0x300>
 800f9f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	480f      	ldr	r0, [pc, #60]	; (800fa3c <create_name+0x334>)
 800f9fe:	f7fe fa63 	bl	800dec8 <chk_chr>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d008      	beq.n	800fa1a <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fa08:	235f      	movs	r3, #95	; 0x5f
 800fa0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fa0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa10:	f043 0303 	orr.w	r3, r3, #3
 800fa14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa18:	e021      	b.n	800fa5e <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fa1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa1c:	2b40      	cmp	r3, #64	; 0x40
 800fa1e:	d90f      	bls.n	800fa40 <create_name+0x338>
 800fa20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa22:	2b5a      	cmp	r3, #90	; 0x5a
 800fa24:	d80c      	bhi.n	800fa40 <create_name+0x338>
					b |= 2;
 800fa26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa2a:	f043 0302 	orr.w	r3, r3, #2
 800fa2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa32:	e014      	b.n	800fa5e <create_name+0x356>
 800fa34:	08017cd4 	.word	0x08017cd4
 800fa38:	08017d5c 	.word	0x08017d5c
 800fa3c:	08017ce0 	.word	0x08017ce0
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fa40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa42:	2b60      	cmp	r3, #96	; 0x60
 800fa44:	d90b      	bls.n	800fa5e <create_name+0x356>
 800fa46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa48:	2b7a      	cmp	r3, #122	; 0x7a
 800fa4a:	d808      	bhi.n	800fa5e <create_name+0x356>
						b |= 1; w -= 0x20;
 800fa4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa50:	f043 0301 	orr.w	r3, r3, #1
 800fa54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fa58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa5a:	3b20      	subs	r3, #32
 800fa5c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fa5e:	6a3b      	ldr	r3, [r7, #32]
 800fa60:	1c5a      	adds	r2, r3, #1
 800fa62:	623a      	str	r2, [r7, #32]
 800fa64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fa66:	b2d1      	uxtb	r1, r2
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	4413      	add	r3, r2
 800fa6c:	460a      	mov	r2, r1
 800fa6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fa72:	e75d      	b.n	800f930 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800fa74:	bf00      	nop
 800fa76:	e000      	b.n	800fa7a <create_name+0x372>
			if (si > di) break;			/* No extension */
 800fa78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fa80:	2be5      	cmp	r3, #229	; 0xe5
 800fa82:	d103      	bne.n	800fa8c <create_name+0x384>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2205      	movs	r2, #5
 800fa88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	2b08      	cmp	r3, #8
 800fa90:	d104      	bne.n	800fa9c <create_name+0x394>
 800fa92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fa9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faa0:	f003 030c 	and.w	r3, r3, #12
 800faa4:	2b0c      	cmp	r3, #12
 800faa6:	d005      	beq.n	800fab4 <create_name+0x3ac>
 800faa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800faac:	f003 0303 	and.w	r3, r3, #3
 800fab0:	2b03      	cmp	r3, #3
 800fab2:	d105      	bne.n	800fac0 <create_name+0x3b8>
 800fab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fab8:	f043 0302 	orr.w	r3, r3, #2
 800fabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fac4:	f003 0302 	and.w	r3, r3, #2
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d117      	bne.n	800fafc <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800facc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fad0:	f003 0303 	and.w	r3, r3, #3
 800fad4:	2b01      	cmp	r3, #1
 800fad6:	d105      	bne.n	800fae4 <create_name+0x3dc>
 800fad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fadc:	f043 0310 	orr.w	r3, r3, #16
 800fae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fae8:	f003 030c 	and.w	r3, r3, #12
 800faec:	2b04      	cmp	r3, #4
 800faee:	d105      	bne.n	800fafc <create_name+0x3f4>
 800faf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faf4:	f043 0308 	orr.w	r3, r3, #8
 800faf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fb02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800fb06:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3728      	adds	r7, #40	; 0x28
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b086      	sub	sp, #24
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b2f      	cmp	r3, #47	; 0x2f
 800fb2a:	d00b      	beq.n	800fb44 <follow_path+0x34>
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b5c      	cmp	r3, #92	; 0x5c
 800fb32:	d007      	beq.n	800fb44 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	69da      	ldr	r2, [r3, #28]
 800fb38:	693b      	ldr	r3, [r7, #16]
 800fb3a:	609a      	str	r2, [r3, #8]
 800fb3c:	e00d      	b.n	800fb5a <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb3e:	683b      	ldr	r3, [r7, #0]
 800fb40:	3301      	adds	r3, #1
 800fb42:	603b      	str	r3, [r7, #0]
 800fb44:	683b      	ldr	r3, [r7, #0]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	2b2f      	cmp	r3, #47	; 0x2f
 800fb4a:	d0f8      	beq.n	800fb3e <follow_path+0x2e>
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	2b5c      	cmp	r3, #92	; 0x5c
 800fb52:	d0f4      	beq.n	800fb3e <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fb54:	693b      	ldr	r3, [r7, #16]
 800fb56:	2200      	movs	r2, #0
 800fb58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb5a:	683b      	ldr	r3, [r7, #0]
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	2b1f      	cmp	r3, #31
 800fb60:	d80a      	bhi.n	800fb78 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2280      	movs	r2, #128	; 0x80
 800fb66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7fe ff50 	bl	800ea12 <dir_sdi>
 800fb72:	4603      	mov	r3, r0
 800fb74:	75fb      	strb	r3, [r7, #23]
 800fb76:	e05b      	b.n	800fc30 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb78:	463b      	mov	r3, r7
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f7ff fdc3 	bl	800f708 <create_name>
 800fb82:	4603      	mov	r3, r0
 800fb84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb86:	7dfb      	ldrb	r3, [r7, #23]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d14c      	bne.n	800fc26 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb8c:	6878      	ldr	r0, [r7, #4]
 800fb8e:	f7ff fbb8 	bl	800f302 <dir_find>
 800fb92:	4603      	mov	r3, r0
 800fb94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb9e:	7dfb      	ldrb	r3, [r7, #23]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d01b      	beq.n	800fbdc <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fba4:	7dfb      	ldrb	r3, [r7, #23]
 800fba6:	2b04      	cmp	r3, #4
 800fba8:	d13f      	bne.n	800fc2a <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fbaa:	7afb      	ldrb	r3, [r7, #11]
 800fbac:	f003 0320 	and.w	r3, r3, #32
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d00b      	beq.n	800fbcc <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	f003 0304 	and.w	r3, r3, #4
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d031      	beq.n	800fc22 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2280      	movs	r2, #128	; 0x80
 800fbc2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fbca:	e02e      	b.n	800fc2a <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fbcc:	7afb      	ldrb	r3, [r7, #11]
 800fbce:	f003 0304 	and.w	r3, r3, #4
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d129      	bne.n	800fc2a <follow_path+0x11a>
 800fbd6:	2305      	movs	r3, #5
 800fbd8:	75fb      	strb	r3, [r7, #23]
				break;
 800fbda:	e026      	b.n	800fc2a <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbdc:	7afb      	ldrb	r3, [r7, #11]
 800fbde:	f003 0304 	and.w	r3, r3, #4
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d123      	bne.n	800fc2e <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	799b      	ldrb	r3, [r3, #6]
 800fbea:	f003 0310 	and.w	r3, r3, #16
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d102      	bne.n	800fbf8 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fbf2:	2305      	movs	r3, #5
 800fbf4:	75fb      	strb	r3, [r7, #23]
 800fbf6:	e01b      	b.n	800fc30 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	695b      	ldr	r3, [r3, #20]
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	8992      	ldrh	r2, [r2, #12]
 800fc06:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc0a:	fb02 f200 	mul.w	r2, r2, r0
 800fc0e:	1a9b      	subs	r3, r3, r2
 800fc10:	440b      	add	r3, r1
 800fc12:	4619      	mov	r1, r3
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f7ff f8a2 	bl	800ed5e <ld_clust>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	609a      	str	r2, [r3, #8]
 800fc20:	e7aa      	b.n	800fb78 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fc22:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fc24:	e7a8      	b.n	800fb78 <follow_path+0x68>
			if (res != FR_OK) break;
 800fc26:	bf00      	nop
 800fc28:	e002      	b.n	800fc30 <follow_path+0x120>
				break;
 800fc2a:	bf00      	nop
 800fc2c:	e000      	b.n	800fc30 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fc2e:	bf00      	nop
			}
		}
	}

	return res;
 800fc30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3718      	adds	r7, #24
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fc3a:	b480      	push	{r7}
 800fc3c:	b087      	sub	sp, #28
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fc42:	f04f 33ff 	mov.w	r3, #4294967295
 800fc46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d031      	beq.n	800fcb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	617b      	str	r3, [r7, #20]
 800fc56:	e002      	b.n	800fc5e <get_ldnumber+0x24>
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	617b      	str	r3, [r7, #20]
 800fc5e:	697b      	ldr	r3, [r7, #20]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	2b1f      	cmp	r3, #31
 800fc64:	d903      	bls.n	800fc6e <get_ldnumber+0x34>
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	781b      	ldrb	r3, [r3, #0]
 800fc6a:	2b3a      	cmp	r3, #58	; 0x3a
 800fc6c:	d1f4      	bne.n	800fc58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	781b      	ldrb	r3, [r3, #0]
 800fc72:	2b3a      	cmp	r3, #58	; 0x3a
 800fc74:	d11c      	bne.n	800fcb0 <get_ldnumber+0x76>
			tp = *path;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	1c5a      	adds	r2, r3, #1
 800fc80:	60fa      	str	r2, [r7, #12]
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	3b30      	subs	r3, #48	; 0x30
 800fc86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	2b09      	cmp	r3, #9
 800fc8c:	d80e      	bhi.n	800fcac <get_ldnumber+0x72>
 800fc8e:	68fa      	ldr	r2, [r7, #12]
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d10a      	bne.n	800fcac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d107      	bne.n	800fcac <get_ldnumber+0x72>
					vol = (int)i;
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	3301      	adds	r3, #1
 800fca4:	617b      	str	r3, [r7, #20]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	697a      	ldr	r2, [r7, #20]
 800fcaa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fcac:	693b      	ldr	r3, [r7, #16]
 800fcae:	e002      	b.n	800fcb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fcb4:	693b      	ldr	r3, [r7, #16]
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	371c      	adds	r7, #28
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
	...

0800fcc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	70da      	strb	r2, [r3, #3]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fcda:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fcdc:	6839      	ldr	r1, [r7, #0]
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f7fe fabe 	bl	800e260 <move_window>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d001      	beq.n	800fcee <check_fs+0x2a>
 800fcea:	2304      	movs	r3, #4
 800fcec:	e038      	b.n	800fd60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	333c      	adds	r3, #60	; 0x3c
 800fcf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7fe f802 	bl	800dd00 <ld_word>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	461a      	mov	r2, r3
 800fd00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d001      	beq.n	800fd0c <check_fs+0x48>
 800fd08:	2303      	movs	r3, #3
 800fd0a:	e029      	b.n	800fd60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd12:	2be9      	cmp	r3, #233	; 0xe9
 800fd14:	d009      	beq.n	800fd2a <check_fs+0x66>
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd1c:	2beb      	cmp	r3, #235	; 0xeb
 800fd1e:	d11e      	bne.n	800fd5e <check_fs+0x9a>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fd26:	2b90      	cmp	r3, #144	; 0x90
 800fd28:	d119      	bne.n	800fd5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	333c      	adds	r3, #60	; 0x3c
 800fd2e:	3336      	adds	r3, #54	; 0x36
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fd fffd 	bl	800dd30 <ld_dword>
 800fd36:	4603      	mov	r3, r0
 800fd38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fd3c:	4a0a      	ldr	r2, [pc, #40]	; (800fd68 <check_fs+0xa4>)
 800fd3e:	4293      	cmp	r3, r2
 800fd40:	d101      	bne.n	800fd46 <check_fs+0x82>
 800fd42:	2300      	movs	r3, #0
 800fd44:	e00c      	b.n	800fd60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	333c      	adds	r3, #60	; 0x3c
 800fd4a:	3352      	adds	r3, #82	; 0x52
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	f7fd ffef 	bl	800dd30 <ld_dword>
 800fd52:	4602      	mov	r2, r0
 800fd54:	4b05      	ldr	r3, [pc, #20]	; (800fd6c <check_fs+0xa8>)
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d101      	bne.n	800fd5e <check_fs+0x9a>
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	e000      	b.n	800fd60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fd5e:	2302      	movs	r3, #2
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3708      	adds	r7, #8
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	00544146 	.word	0x00544146
 800fd6c:	33544146 	.word	0x33544146

0800fd70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b096      	sub	sp, #88	; 0x58
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	60f8      	str	r0, [r7, #12]
 800fd78:	60b9      	str	r1, [r7, #8]
 800fd7a:	4613      	mov	r3, r2
 800fd7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	2200      	movs	r2, #0
 800fd82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fd84:	68f8      	ldr	r0, [r7, #12]
 800fd86:	f7ff ff58 	bl	800fc3a <get_ldnumber>
 800fd8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da01      	bge.n	800fd96 <find_volume+0x26>
 800fd92:	230b      	movs	r3, #11
 800fd94:	e26b      	b.n	801026e <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd96:	4ab0      	ldr	r2, [pc, #704]	; (8010058 <find_volume+0x2e8>)
 800fd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d101      	bne.n	800fdaa <find_volume+0x3a>
 800fda6:	230c      	movs	r3, #12
 800fda8:	e261      	b.n	801026e <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fdb0:	79fb      	ldrb	r3, [r7, #7]
 800fdb2:	f023 0301 	bic.w	r3, r3, #1
 800fdb6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d01a      	beq.n	800fdf6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc2:	785b      	ldrb	r3, [r3, #1]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f7fd fefd 	bl	800dbc4 <disk_status>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fdd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdd4:	f003 0301 	and.w	r3, r3, #1
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d10c      	bne.n	800fdf6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d007      	beq.n	800fdf2 <find_volume+0x82>
 800fde2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fde6:	f003 0304 	and.w	r3, r3, #4
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fdee:	230a      	movs	r3, #10
 800fdf0:	e23d      	b.n	801026e <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	e23b      	b.n	801026e <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fdfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdfe:	b2da      	uxtb	r2, r3
 800fe00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fe04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe06:	785b      	ldrb	r3, [r3, #1]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fd fef5 	bl	800dbf8 <disk_initialize>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fe14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe18:	f003 0301 	and.w	r3, r3, #1
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d001      	beq.n	800fe24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fe20:	2303      	movs	r3, #3
 800fe22:	e224      	b.n	801026e <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fe24:	79fb      	ldrb	r3, [r7, #7]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d007      	beq.n	800fe3a <find_volume+0xca>
 800fe2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fe2e:	f003 0304 	and.w	r3, r3, #4
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d001      	beq.n	800fe3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fe36:	230a      	movs	r3, #10
 800fe38:	e219      	b.n	801026e <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fe3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3c:	7858      	ldrb	r0, [r3, #1]
 800fe3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe40:	330c      	adds	r3, #12
 800fe42:	461a      	mov	r2, r3
 800fe44:	2102      	movs	r1, #2
 800fe46:	f7fd ff3d 	bl	800dcc4 <disk_ioctl>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d001      	beq.n	800fe54 <find_volume+0xe4>
 800fe50:	2301      	movs	r3, #1
 800fe52:	e20c      	b.n	801026e <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fe54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe56:	899b      	ldrh	r3, [r3, #12]
 800fe58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe5c:	d80d      	bhi.n	800fe7a <find_volume+0x10a>
 800fe5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe60:	899b      	ldrh	r3, [r3, #12]
 800fe62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe66:	d308      	bcc.n	800fe7a <find_volume+0x10a>
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	899b      	ldrh	r3, [r3, #12]
 800fe6c:	461a      	mov	r2, r3
 800fe6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe70:	899b      	ldrh	r3, [r3, #12]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	4013      	ands	r3, r2
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d001      	beq.n	800fe7e <find_volume+0x10e>
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	e1f7      	b.n	801026e <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fe82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe86:	f7ff ff1d 	bl	800fcc4 <check_fs>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe94:	2b02      	cmp	r3, #2
 800fe96:	d14b      	bne.n	800ff30 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe98:	2300      	movs	r3, #0
 800fe9a:	643b      	str	r3, [r7, #64]	; 0x40
 800fe9c:	e01f      	b.n	800fede <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea6:	011b      	lsls	r3, r3, #4
 800fea8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800feac:	4413      	add	r3, r2
 800feae:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800feb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb2:	3304      	adds	r3, #4
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d006      	beq.n	800fec8 <find_volume+0x158>
 800feba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800febc:	3308      	adds	r3, #8
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fd ff36 	bl	800dd30 <ld_dword>
 800fec4:	4602      	mov	r2, r0
 800fec6:	e000      	b.n	800feca <find_volume+0x15a>
 800fec8:	2200      	movs	r2, #0
 800feca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fecc:	009b      	lsls	r3, r3, #2
 800fece:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fed2:	440b      	add	r3, r1
 800fed4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feda:	3301      	adds	r3, #1
 800fedc:	643b      	str	r3, [r7, #64]	; 0x40
 800fede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	d9dc      	bls.n	800fe9e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fee4:	2300      	movs	r3, #0
 800fee6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feea:	2b00      	cmp	r3, #0
 800feec:	d002      	beq.n	800fef4 <find_volume+0x184>
 800feee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef0:	3b01      	subs	r3, #1
 800fef2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fefc:	4413      	add	r3, r2
 800fefe:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ff02:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ff04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d005      	beq.n	800ff16 <find_volume+0x1a6>
 800ff0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ff0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff0e:	f7ff fed9 	bl	800fcc4 <check_fs>
 800ff12:	4603      	mov	r3, r0
 800ff14:	e000      	b.n	800ff18 <find_volume+0x1a8>
 800ff16:	2303      	movs	r3, #3
 800ff18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ff1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d905      	bls.n	800ff30 <find_volume+0x1c0>
 800ff24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff26:	3301      	adds	r3, #1
 800ff28:	643b      	str	r3, [r7, #64]	; 0x40
 800ff2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d9e1      	bls.n	800fef4 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ff30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff34:	2b04      	cmp	r3, #4
 800ff36:	d101      	bne.n	800ff3c <find_volume+0x1cc>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e198      	b.n	801026e <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ff3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ff40:	2b01      	cmp	r3, #1
 800ff42:	d901      	bls.n	800ff48 <find_volume+0x1d8>
 800ff44:	230d      	movs	r3, #13
 800ff46:	e192      	b.n	801026e <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	333c      	adds	r3, #60	; 0x3c
 800ff4c:	330b      	adds	r3, #11
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7fd fed6 	bl	800dd00 <ld_word>
 800ff54:	4603      	mov	r3, r0
 800ff56:	461a      	mov	r2, r3
 800ff58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff5a:	899b      	ldrh	r3, [r3, #12]
 800ff5c:	429a      	cmp	r2, r3
 800ff5e:	d001      	beq.n	800ff64 <find_volume+0x1f4>
 800ff60:	230d      	movs	r3, #13
 800ff62:	e184      	b.n	801026e <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ff64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff66:	333c      	adds	r3, #60	; 0x3c
 800ff68:	3316      	adds	r3, #22
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7fd fec8 	bl	800dd00 <ld_word>
 800ff70:	4603      	mov	r3, r0
 800ff72:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ff74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d106      	bne.n	800ff88 <find_volume+0x218>
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	333c      	adds	r3, #60	; 0x3c
 800ff7e:	3324      	adds	r3, #36	; 0x24
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7fd fed5 	bl	800dd30 <ld_dword>
 800ff86:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ff88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff8c:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800ff94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff96:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	789b      	ldrb	r3, [r3, #2]
 800ff9c:	2b01      	cmp	r3, #1
 800ff9e:	d005      	beq.n	800ffac <find_volume+0x23c>
 800ffa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa2:	789b      	ldrb	r3, [r3, #2]
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	d001      	beq.n	800ffac <find_volume+0x23c>
 800ffa8:	230d      	movs	r3, #13
 800ffaa:	e160      	b.n	801026e <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	789b      	ldrb	r3, [r3, #2]
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb4:	fb02 f303 	mul.w	r3, r2, r3
 800ffb8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ffba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffbc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ffc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc8:	895b      	ldrh	r3, [r3, #10]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d008      	beq.n	800ffe0 <find_volume+0x270>
 800ffce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd0:	895b      	ldrh	r3, [r3, #10]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd6:	895b      	ldrh	r3, [r3, #10]
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	4013      	ands	r3, r2
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <find_volume+0x274>
 800ffe0:	230d      	movs	r3, #13
 800ffe2:	e144      	b.n	801026e <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe6:	333c      	adds	r3, #60	; 0x3c
 800ffe8:	3311      	adds	r3, #17
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fd fe88 	bl	800dd00 <ld_word>
 800fff0:	4603      	mov	r3, r0
 800fff2:	461a      	mov	r2, r3
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fffa:	891b      	ldrh	r3, [r3, #8]
 800fffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fffe:	8992      	ldrh	r2, [r2, #12]
 8010000:	0952      	lsrs	r2, r2, #5
 8010002:	b292      	uxth	r2, r2
 8010004:	fbb3 f1f2 	udiv	r1, r3, r2
 8010008:	fb02 f201 	mul.w	r2, r2, r1
 801000c:	1a9b      	subs	r3, r3, r2
 801000e:	b29b      	uxth	r3, r3
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <find_volume+0x2a8>
 8010014:	230d      	movs	r3, #13
 8010016:	e12a      	b.n	801026e <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801001a:	333c      	adds	r3, #60	; 0x3c
 801001c:	3313      	adds	r3, #19
 801001e:	4618      	mov	r0, r3
 8010020:	f7fd fe6e 	bl	800dd00 <ld_word>
 8010024:	4603      	mov	r3, r0
 8010026:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801002a:	2b00      	cmp	r3, #0
 801002c:	d106      	bne.n	801003c <find_volume+0x2cc>
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	333c      	adds	r3, #60	; 0x3c
 8010032:	3320      	adds	r3, #32
 8010034:	4618      	mov	r0, r3
 8010036:	f7fd fe7b 	bl	800dd30 <ld_dword>
 801003a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801003c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003e:	333c      	adds	r3, #60	; 0x3c
 8010040:	330e      	adds	r3, #14
 8010042:	4618      	mov	r0, r3
 8010044:	f7fd fe5c 	bl	800dd00 <ld_word>
 8010048:	4603      	mov	r3, r0
 801004a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801004c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801004e:	2b00      	cmp	r3, #0
 8010050:	d104      	bne.n	801005c <find_volume+0x2ec>
 8010052:	230d      	movs	r3, #13
 8010054:	e10b      	b.n	801026e <find_volume+0x4fe>
 8010056:	bf00      	nop
 8010058:	2001f2f8 	.word	0x2001f2f8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801005c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801005e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010060:	4413      	add	r3, r2
 8010062:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010064:	8911      	ldrh	r1, [r2, #8]
 8010066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010068:	8992      	ldrh	r2, [r2, #12]
 801006a:	0952      	lsrs	r2, r2, #5
 801006c:	b292      	uxth	r2, r2
 801006e:	fbb1 f2f2 	udiv	r2, r1, r2
 8010072:	b292      	uxth	r2, r2
 8010074:	4413      	add	r3, r2
 8010076:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801007a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007c:	429a      	cmp	r2, r3
 801007e:	d201      	bcs.n	8010084 <find_volume+0x314>
 8010080:	230d      	movs	r3, #13
 8010082:	e0f4      	b.n	801026e <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010084:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801008c:	8952      	ldrh	r2, [r2, #10]
 801008e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010092:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010096:	2b00      	cmp	r3, #0
 8010098:	d101      	bne.n	801009e <find_volume+0x32e>
 801009a:	230d      	movs	r3, #13
 801009c:	e0e7      	b.n	801026e <find_volume+0x4fe>
		fmt = FS_FAT32;
 801009e:	2303      	movs	r3, #3
 80100a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d802      	bhi.n	80100b4 <find_volume+0x344>
 80100ae:	2302      	movs	r3, #2
 80100b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80100b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80100ba:	4293      	cmp	r3, r2
 80100bc:	d802      	bhi.n	80100c4 <find_volume+0x354>
 80100be:	2301      	movs	r3, #1
 80100c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80100c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100c6:	1c9a      	adds	r2, r3, #2
 80100c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ca:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80100cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100d0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80100d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80100d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d6:	441a      	add	r2, r3
 80100d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100da:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80100dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100e0:	441a      	add	r2, r3
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80100e6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100ea:	2b03      	cmp	r3, #3
 80100ec:	d11e      	bne.n	801012c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	333c      	adds	r3, #60	; 0x3c
 80100f2:	332a      	adds	r3, #42	; 0x2a
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7fd fe03 	bl	800dd00 <ld_word>
 80100fa:	4603      	mov	r3, r0
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d001      	beq.n	8010104 <find_volume+0x394>
 8010100:	230d      	movs	r3, #13
 8010102:	e0b4      	b.n	801026e <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010106:	891b      	ldrh	r3, [r3, #8]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <find_volume+0x3a0>
 801010c:	230d      	movs	r3, #13
 801010e:	e0ae      	b.n	801026e <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010112:	333c      	adds	r3, #60	; 0x3c
 8010114:	332c      	adds	r3, #44	; 0x2c
 8010116:	4618      	mov	r0, r3
 8010118:	f7fd fe0a 	bl	800dd30 <ld_dword>
 801011c:	4602      	mov	r2, r0
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	6a1b      	ldr	r3, [r3, #32]
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	647b      	str	r3, [r7, #68]	; 0x44
 801012a:	e01f      	b.n	801016c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801012c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012e:	891b      	ldrh	r3, [r3, #8]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d101      	bne.n	8010138 <find_volume+0x3c8>
 8010134:	230d      	movs	r3, #13
 8010136:	e09a      	b.n	801026e <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801013a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801013c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801013e:	441a      	add	r2, r3
 8010140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010142:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010144:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010148:	2b02      	cmp	r3, #2
 801014a:	d103      	bne.n	8010154 <find_volume+0x3e4>
 801014c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014e:	6a1b      	ldr	r3, [r3, #32]
 8010150:	005b      	lsls	r3, r3, #1
 8010152:	e00a      	b.n	801016a <find_volume+0x3fa>
 8010154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010156:	6a1a      	ldr	r2, [r3, #32]
 8010158:	4613      	mov	r3, r2
 801015a:	005b      	lsls	r3, r3, #1
 801015c:	4413      	add	r3, r2
 801015e:	085a      	lsrs	r2, r3, #1
 8010160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010162:	6a1b      	ldr	r3, [r3, #32]
 8010164:	f003 0301 	and.w	r3, r3, #1
 8010168:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801016a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010172:	899b      	ldrh	r3, [r3, #12]
 8010174:	4619      	mov	r1, r3
 8010176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010178:	440b      	add	r3, r1
 801017a:	3b01      	subs	r3, #1
 801017c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801017e:	8989      	ldrh	r1, [r1, #12]
 8010180:	fbb3 f3f1 	udiv	r3, r3, r1
 8010184:	429a      	cmp	r2, r3
 8010186:	d201      	bcs.n	801018c <find_volume+0x41c>
 8010188:	230d      	movs	r3, #13
 801018a:	e070      	b.n	801026e <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801018c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801018e:	f04f 32ff 	mov.w	r2, #4294967295
 8010192:	619a      	str	r2, [r3, #24]
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	699a      	ldr	r2, [r3, #24]
 8010198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801019c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801019e:	2280      	movs	r2, #128	; 0x80
 80101a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80101a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101a6:	2b03      	cmp	r3, #3
 80101a8:	d149      	bne.n	801023e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80101aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ac:	333c      	adds	r3, #60	; 0x3c
 80101ae:	3330      	adds	r3, #48	; 0x30
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fd fda5 	bl	800dd00 <ld_word>
 80101b6:	4603      	mov	r3, r0
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d140      	bne.n	801023e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80101bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101be:	3301      	adds	r3, #1
 80101c0:	4619      	mov	r1, r3
 80101c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101c4:	f7fe f84c 	bl	800e260 <move_window>
 80101c8:	4603      	mov	r3, r0
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d137      	bne.n	801023e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80101ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d0:	2200      	movs	r2, #0
 80101d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	333c      	adds	r3, #60	; 0x3c
 80101d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fd fd8f 	bl	800dd00 <ld_word>
 80101e2:	4603      	mov	r3, r0
 80101e4:	461a      	mov	r2, r3
 80101e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80101ea:	429a      	cmp	r2, r3
 80101ec:	d127      	bne.n	801023e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80101ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f0:	333c      	adds	r3, #60	; 0x3c
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7fd fd9c 	bl	800dd30 <ld_dword>
 80101f8:	4602      	mov	r2, r0
 80101fa:	4b1f      	ldr	r3, [pc, #124]	; (8010278 <find_volume+0x508>)
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d11e      	bne.n	801023e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010202:	333c      	adds	r3, #60	; 0x3c
 8010204:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010208:	4618      	mov	r0, r3
 801020a:	f7fd fd91 	bl	800dd30 <ld_dword>
 801020e:	4602      	mov	r2, r0
 8010210:	4b1a      	ldr	r3, [pc, #104]	; (801027c <find_volume+0x50c>)
 8010212:	429a      	cmp	r2, r3
 8010214:	d113      	bne.n	801023e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010218:	333c      	adds	r3, #60	; 0x3c
 801021a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801021e:	4618      	mov	r0, r3
 8010220:	f7fd fd86 	bl	800dd30 <ld_dword>
 8010224:	4602      	mov	r2, r0
 8010226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010228:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	333c      	adds	r3, #60	; 0x3c
 801022e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010232:	4618      	mov	r0, r3
 8010234:	f7fd fd7c 	bl	800dd30 <ld_dword>
 8010238:	4602      	mov	r2, r0
 801023a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801023e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010240:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010244:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010246:	4b0e      	ldr	r3, [pc, #56]	; (8010280 <find_volume+0x510>)
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	3301      	adds	r3, #1
 801024c:	b29a      	uxth	r2, r3
 801024e:	4b0c      	ldr	r3, [pc, #48]	; (8010280 <find_volume+0x510>)
 8010250:	801a      	strh	r2, [r3, #0]
 8010252:	4b0b      	ldr	r3, [pc, #44]	; (8010280 <find_volume+0x510>)
 8010254:	881a      	ldrh	r2, [r3, #0]
 8010256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010258:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801025a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025c:	4a09      	ldr	r2, [pc, #36]	; (8010284 <find_volume+0x514>)
 801025e:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	2200      	movs	r2, #0
 8010264:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010266:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010268:	f7fd ff92 	bl	800e190 <clear_lock>
#endif
	return FR_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3758      	adds	r7, #88	; 0x58
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	41615252 	.word	0x41615252
 801027c:	61417272 	.word	0x61417272
 8010280:	2001f2fc 	.word	0x2001f2fc
 8010284:	2001f320 	.word	0x2001f320

08010288 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010292:	2309      	movs	r3, #9
 8010294:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d01c      	beq.n	80102d6 <validate+0x4e>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d018      	beq.n	80102d6 <validate+0x4e>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d013      	beq.n	80102d6 <validate+0x4e>
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	889a      	ldrh	r2, [r3, #4]
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	88db      	ldrh	r3, [r3, #6]
 80102b8:	429a      	cmp	r2, r3
 80102ba:	d10c      	bne.n	80102d6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	785b      	ldrb	r3, [r3, #1]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7fd fc7e 	bl	800dbc4 <disk_status>
 80102c8:	4603      	mov	r3, r0
 80102ca:	f003 0301 	and.w	r3, r3, #1
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d101      	bne.n	80102d6 <validate+0x4e>
			res = FR_OK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80102d6:	7bfb      	ldrb	r3, [r7, #15]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d102      	bne.n	80102e2 <validate+0x5a>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	e000      	b.n	80102e4 <validate+0x5c>
 80102e2:	2300      	movs	r3, #0
 80102e4:	683a      	ldr	r2, [r7, #0]
 80102e6:	6013      	str	r3, [r2, #0]
	return res;
 80102e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3710      	adds	r7, #16
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}
	...

080102f4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b088      	sub	sp, #32
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	60f8      	str	r0, [r7, #12]
 80102fc:	60b9      	str	r1, [r7, #8]
 80102fe:	4613      	mov	r3, r2
 8010300:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010306:	f107 0310 	add.w	r3, r7, #16
 801030a:	4618      	mov	r0, r3
 801030c:	f7ff fc95 	bl	800fc3a <get_ldnumber>
 8010310:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010312:	69fb      	ldr	r3, [r7, #28]
 8010314:	2b00      	cmp	r3, #0
 8010316:	da01      	bge.n	801031c <f_mount+0x28>
 8010318:	230b      	movs	r3, #11
 801031a:	e02b      	b.n	8010374 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801031c:	4a17      	ldr	r2, [pc, #92]	; (801037c <f_mount+0x88>)
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010324:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010326:	69bb      	ldr	r3, [r7, #24]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d005      	beq.n	8010338 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801032c:	69b8      	ldr	r0, [r7, #24]
 801032e:	f7fd ff2f 	bl	800e190 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010332:	69bb      	ldr	r3, [r7, #24]
 8010334:	2200      	movs	r2, #0
 8010336:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d002      	beq.n	8010344 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2200      	movs	r2, #0
 8010342:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010344:	68fa      	ldr	r2, [r7, #12]
 8010346:	490d      	ldr	r1, [pc, #52]	; (801037c <f_mount+0x88>)
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d002      	beq.n	801035a <f_mount+0x66>
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d001      	beq.n	801035e <f_mount+0x6a>
 801035a:	2300      	movs	r3, #0
 801035c:	e00a      	b.n	8010374 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801035e:	f107 010c 	add.w	r1, r7, #12
 8010362:	f107 0308 	add.w	r3, r7, #8
 8010366:	2200      	movs	r2, #0
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fd01 	bl	800fd70 <find_volume>
 801036e:	4603      	mov	r3, r0
 8010370:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010372:	7dfb      	ldrb	r3, [r7, #23]
}
 8010374:	4618      	mov	r0, r3
 8010376:	3720      	adds	r7, #32
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	2001f2f8 	.word	0x2001f2f8

08010380 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b09a      	sub	sp, #104	; 0x68
 8010384:	af00      	add	r7, sp, #0
 8010386:	60f8      	str	r0, [r7, #12]
 8010388:	60b9      	str	r1, [r7, #8]
 801038a:	4613      	mov	r3, r2
 801038c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d101      	bne.n	8010398 <f_open+0x18>
 8010394:	2309      	movs	r3, #9
 8010396:	e1bb      	b.n	8010710 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010398:	79fb      	ldrb	r3, [r7, #7]
 801039a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801039e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80103a0:	79fa      	ldrb	r2, [r7, #7]
 80103a2:	f107 0114 	add.w	r1, r7, #20
 80103a6:	f107 0308 	add.w	r3, r7, #8
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7ff fce0 	bl	800fd70 <find_volume>
 80103b0:	4603      	mov	r3, r0
 80103b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80103b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	f040 819f 	bne.w	80106fe <f_open+0x37e>
		dj.obj.fs = fs;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80103c4:	68ba      	ldr	r2, [r7, #8]
 80103c6:	f107 0318 	add.w	r3, r7, #24
 80103ca:	4611      	mov	r1, r2
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7ff fb9f 	bl	800fb10 <follow_path>
 80103d2:	4603      	mov	r3, r0
 80103d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80103d8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d11a      	bne.n	8010416 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80103e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80103e4:	b25b      	sxtb	r3, r3
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	da03      	bge.n	80103f2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80103ea:	2306      	movs	r3, #6
 80103ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80103f0:	e011      	b.n	8010416 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80103f2:	79fb      	ldrb	r3, [r7, #7]
 80103f4:	f023 0301 	bic.w	r3, r3, #1
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	bf14      	ite	ne
 80103fc:	2301      	movne	r3, #1
 80103fe:	2300      	moveq	r3, #0
 8010400:	b2db      	uxtb	r3, r3
 8010402:	461a      	mov	r2, r3
 8010404:	f107 0318 	add.w	r3, r7, #24
 8010408:	4611      	mov	r1, r2
 801040a:	4618      	mov	r0, r3
 801040c:	f7fd fd78 	bl	800df00 <chk_lock>
 8010410:	4603      	mov	r3, r0
 8010412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010416:	79fb      	ldrb	r3, [r7, #7]
 8010418:	f003 031c 	and.w	r3, r3, #28
 801041c:	2b00      	cmp	r3, #0
 801041e:	d07f      	beq.n	8010520 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010420:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010424:	2b00      	cmp	r3, #0
 8010426:	d017      	beq.n	8010458 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801042c:	2b04      	cmp	r3, #4
 801042e:	d10e      	bne.n	801044e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010430:	f7fd fdc2 	bl	800dfb8 <enq_lock>
 8010434:	4603      	mov	r3, r0
 8010436:	2b00      	cmp	r3, #0
 8010438:	d006      	beq.n	8010448 <f_open+0xc8>
 801043a:	f107 0318 	add.w	r3, r7, #24
 801043e:	4618      	mov	r0, r3
 8010440:	f7ff f820 	bl	800f484 <dir_register>
 8010444:	4603      	mov	r3, r0
 8010446:	e000      	b.n	801044a <f_open+0xca>
 8010448:	2312      	movs	r3, #18
 801044a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	f043 0308 	orr.w	r3, r3, #8
 8010454:	71fb      	strb	r3, [r7, #7]
 8010456:	e010      	b.n	801047a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010458:	7fbb      	ldrb	r3, [r7, #30]
 801045a:	f003 0311 	and.w	r3, r3, #17
 801045e:	2b00      	cmp	r3, #0
 8010460:	d003      	beq.n	801046a <f_open+0xea>
					res = FR_DENIED;
 8010462:	2307      	movs	r3, #7
 8010464:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010468:	e007      	b.n	801047a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801046a:	79fb      	ldrb	r3, [r7, #7]
 801046c:	f003 0304 	and.w	r3, r3, #4
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <f_open+0xfa>
 8010474:	2308      	movs	r3, #8
 8010476:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801047a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801047e:	2b00      	cmp	r3, #0
 8010480:	d168      	bne.n	8010554 <f_open+0x1d4>
 8010482:	79fb      	ldrb	r3, [r7, #7]
 8010484:	f003 0308 	and.w	r3, r3, #8
 8010488:	2b00      	cmp	r3, #0
 801048a:	d063      	beq.n	8010554 <f_open+0x1d4>
				dw = GET_FATTIME();
 801048c:	f7fd f94a 	bl	800d724 <get_fattime>
 8010490:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010494:	330e      	adds	r3, #14
 8010496:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010498:	4618      	mov	r0, r3
 801049a:	f7fd fc87 	bl	800ddac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801049e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a0:	3316      	adds	r3, #22
 80104a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fd fc81 	bl	800ddac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80104aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ac:	330b      	adds	r3, #11
 80104ae:	2220      	movs	r2, #32
 80104b0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80104b2:	697b      	ldr	r3, [r7, #20]
 80104b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104b6:	4611      	mov	r1, r2
 80104b8:	4618      	mov	r0, r3
 80104ba:	f7fe fc50 	bl	800ed5e <ld_clust>
 80104be:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80104c4:	2200      	movs	r2, #0
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7fe fc68 	bl	800ed9c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80104cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ce:	331c      	adds	r3, #28
 80104d0:	2100      	movs	r1, #0
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7fd fc6a 	bl	800ddac <st_dword>
					fs->wflag = 1;
 80104d8:	697b      	ldr	r3, [r7, #20]
 80104da:	2201      	movs	r2, #1
 80104dc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80104de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d037      	beq.n	8010554 <f_open+0x1d4>
						dw = fs->winsect;
 80104e4:	697b      	ldr	r3, [r7, #20]
 80104e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104e8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80104ea:	f107 0318 	add.w	r3, r7, #24
 80104ee:	2200      	movs	r2, #0
 80104f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fe f958 	bl	800e7a8 <remove_chain>
 80104f8:	4603      	mov	r3, r0
 80104fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80104fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010502:	2b00      	cmp	r3, #0
 8010504:	d126      	bne.n	8010554 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801050a:	4618      	mov	r0, r3
 801050c:	f7fd fea8 	bl	800e260 <move_window>
 8010510:	4603      	mov	r3, r0
 8010512:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801051a:	3a01      	subs	r2, #1
 801051c:	615a      	str	r2, [r3, #20]
 801051e:	e019      	b.n	8010554 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010520:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010524:	2b00      	cmp	r3, #0
 8010526:	d115      	bne.n	8010554 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010528:	7fbb      	ldrb	r3, [r7, #30]
 801052a:	f003 0310 	and.w	r3, r3, #16
 801052e:	2b00      	cmp	r3, #0
 8010530:	d003      	beq.n	801053a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010532:	2304      	movs	r3, #4
 8010534:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010538:	e00c      	b.n	8010554 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801053a:	79fb      	ldrb	r3, [r7, #7]
 801053c:	f003 0302 	and.w	r3, r3, #2
 8010540:	2b00      	cmp	r3, #0
 8010542:	d007      	beq.n	8010554 <f_open+0x1d4>
 8010544:	7fbb      	ldrb	r3, [r7, #30]
 8010546:	f003 0301 	and.w	r3, r3, #1
 801054a:	2b00      	cmp	r3, #0
 801054c:	d002      	beq.n	8010554 <f_open+0x1d4>
						res = FR_DENIED;
 801054e:	2307      	movs	r3, #7
 8010550:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010554:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010558:	2b00      	cmp	r3, #0
 801055a:	d128      	bne.n	80105ae <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801055c:	79fb      	ldrb	r3, [r7, #7]
 801055e:	f003 0308 	and.w	r3, r3, #8
 8010562:	2b00      	cmp	r3, #0
 8010564:	d003      	beq.n	801056e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801056c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801057c:	79fb      	ldrb	r3, [r7, #7]
 801057e:	f023 0301 	bic.w	r3, r3, #1
 8010582:	2b00      	cmp	r3, #0
 8010584:	bf14      	ite	ne
 8010586:	2301      	movne	r3, #1
 8010588:	2300      	moveq	r3, #0
 801058a:	b2db      	uxtb	r3, r3
 801058c:	461a      	mov	r2, r3
 801058e:	f107 0318 	add.w	r3, r7, #24
 8010592:	4611      	mov	r1, r2
 8010594:	4618      	mov	r0, r3
 8010596:	f7fd fd31 	bl	800dffc <inc_lock>
 801059a:	4602      	mov	r2, r0
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	691b      	ldr	r3, [r3, #16]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d102      	bne.n	80105ae <f_open+0x22e>
 80105a8:	2302      	movs	r3, #2
 80105aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80105ae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f040 80a3 	bne.w	80106fe <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80105b8:	697b      	ldr	r3, [r7, #20]
 80105ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105bc:	4611      	mov	r1, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fe fbcd 	bl	800ed5e <ld_clust>
 80105c4:	4602      	mov	r2, r0
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80105ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105cc:	331c      	adds	r3, #28
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fd fbae 	bl	800dd30 <ld_dword>
 80105d4:	4602      	mov	r2, r0
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2200      	movs	r2, #0
 80105de:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80105e0:	697a      	ldr	r2, [r7, #20]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80105e6:	697b      	ldr	r3, [r7, #20]
 80105e8:	88da      	ldrh	r2, [r3, #6]
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	79fa      	ldrb	r2, [r7, #7]
 80105f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	2200      	movs	r2, #0
 80105f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	2200      	movs	r2, #0
 8010604:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	3330      	adds	r3, #48	; 0x30
 801060a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801060e:	2100      	movs	r1, #0
 8010610:	4618      	mov	r0, r3
 8010612:	f7fd fc18 	bl	800de46 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010616:	79fb      	ldrb	r3, [r7, #7]
 8010618:	f003 0320 	and.w	r3, r3, #32
 801061c:	2b00      	cmp	r3, #0
 801061e:	d06e      	beq.n	80106fe <f_open+0x37e>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	68db      	ldr	r3, [r3, #12]
 8010624:	2b00      	cmp	r3, #0
 8010626:	d06a      	beq.n	80106fe <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010628:	68fb      	ldr	r3, [r7, #12]
 801062a:	68da      	ldr	r2, [r3, #12]
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010630:	697b      	ldr	r3, [r7, #20]
 8010632:	895b      	ldrh	r3, [r3, #10]
 8010634:	461a      	mov	r2, r3
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	899b      	ldrh	r3, [r3, #12]
 801063a:	fb03 f302 	mul.w	r3, r3, r2
 801063e:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	68db      	ldr	r3, [r3, #12]
 801064a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801064c:	e016      	b.n	801067c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010652:	4618      	mov	r0, r3
 8010654:	f7fd fec1 	bl	800e3da <get_fat>
 8010658:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801065a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801065c:	2b01      	cmp	r3, #1
 801065e:	d802      	bhi.n	8010666 <f_open+0x2e6>
 8010660:	2302      	movs	r3, #2
 8010662:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010668:	f1b3 3fff 	cmp.w	r3, #4294967295
 801066c:	d102      	bne.n	8010674 <f_open+0x2f4>
 801066e:	2301      	movs	r3, #1
 8010670:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010674:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010678:	1ad3      	subs	r3, r2, r3
 801067a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801067c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010680:	2b00      	cmp	r3, #0
 8010682:	d103      	bne.n	801068c <f_open+0x30c>
 8010684:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010688:	429a      	cmp	r2, r3
 801068a:	d8e0      	bhi.n	801064e <f_open+0x2ce>
				}
				fp->clust = clst;
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010690:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010692:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010696:	2b00      	cmp	r3, #0
 8010698:	d131      	bne.n	80106fe <f_open+0x37e>
 801069a:	697b      	ldr	r3, [r7, #20]
 801069c:	899b      	ldrh	r3, [r3, #12]
 801069e:	461a      	mov	r2, r3
 80106a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80106a6:	fb02 f201 	mul.w	r2, r2, r1
 80106aa:	1a9b      	subs	r3, r3, r2
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d026      	beq.n	80106fe <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fd fe71 	bl	800e39c <clust2sect>
 80106ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80106bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d103      	bne.n	80106ca <f_open+0x34a>
						res = FR_INT_ERR;
 80106c2:	2302      	movs	r3, #2
 80106c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80106c8:	e019      	b.n	80106fe <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80106ca:	697b      	ldr	r3, [r7, #20]
 80106cc:	899b      	ldrh	r3, [r3, #12]
 80106ce:	461a      	mov	r2, r3
 80106d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80106d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106d8:	441a      	add	r2, r3
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	7858      	ldrb	r0, [r3, #1]
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	6a1a      	ldr	r2, [r3, #32]
 80106ec:	2301      	movs	r3, #1
 80106ee:	f7fd faa9 	bl	800dc44 <disk_read>
 80106f2:	4603      	mov	r3, r0
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d002      	beq.n	80106fe <f_open+0x37e>
 80106f8:	2301      	movs	r3, #1
 80106fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80106fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <f_open+0x38c>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	2200      	movs	r2, #0
 801070a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801070c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010710:	4618      	mov	r0, r3
 8010712:	3768      	adds	r7, #104	; 0x68
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b08e      	sub	sp, #56	; 0x38
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
 8010724:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	2200      	movs	r2, #0
 801072e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f107 0214 	add.w	r2, r7, #20
 8010736:	4611      	mov	r1, r2
 8010738:	4618      	mov	r0, r3
 801073a:	f7ff fda5 	bl	8010288 <validate>
 801073e:	4603      	mov	r3, r0
 8010740:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010748:	2b00      	cmp	r3, #0
 801074a:	d107      	bne.n	801075c <f_read+0x44>
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	7d5b      	ldrb	r3, [r3, #21]
 8010750:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <f_read+0x4a>
 801075c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010760:	e135      	b.n	80109ce <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	7d1b      	ldrb	r3, [r3, #20]
 8010766:	f003 0301 	and.w	r3, r3, #1
 801076a:	2b00      	cmp	r3, #0
 801076c:	d101      	bne.n	8010772 <f_read+0x5a>
 801076e:	2307      	movs	r3, #7
 8010770:	e12d      	b.n	80109ce <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	68da      	ldr	r2, [r3, #12]
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	699b      	ldr	r3, [r3, #24]
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801077e:	687a      	ldr	r2, [r7, #4]
 8010780:	6a3b      	ldr	r3, [r7, #32]
 8010782:	429a      	cmp	r2, r3
 8010784:	f240 811e 	bls.w	80109c4 <f_read+0x2ac>
 8010788:	6a3b      	ldr	r3, [r7, #32]
 801078a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801078c:	e11a      	b.n	80109c4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	697a      	ldr	r2, [r7, #20]
 8010794:	8992      	ldrh	r2, [r2, #12]
 8010796:	fbb3 f1f2 	udiv	r1, r3, r2
 801079a:	fb02 f201 	mul.w	r2, r2, r1
 801079e:	1a9b      	subs	r3, r3, r2
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f040 80d5 	bne.w	8010950 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	699b      	ldr	r3, [r3, #24]
 80107aa:	697a      	ldr	r2, [r7, #20]
 80107ac:	8992      	ldrh	r2, [r2, #12]
 80107ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80107b2:	697a      	ldr	r2, [r7, #20]
 80107b4:	8952      	ldrh	r2, [r2, #10]
 80107b6:	3a01      	subs	r2, #1
 80107b8:	4013      	ands	r3, r2
 80107ba:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d12f      	bne.n	8010822 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	699b      	ldr	r3, [r3, #24]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d103      	bne.n	80107d2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	633b      	str	r3, [r7, #48]	; 0x30
 80107d0:	e013      	b.n	80107fa <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d007      	beq.n	80107ea <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	4619      	mov	r1, r3
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f7fe f8de 	bl	800e9a2 <clmt_clust>
 80107e6:	6338      	str	r0, [r7, #48]	; 0x30
 80107e8:	e007      	b.n	80107fa <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80107ea:	68fa      	ldr	r2, [r7, #12]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	69db      	ldr	r3, [r3, #28]
 80107f0:	4619      	mov	r1, r3
 80107f2:	4610      	mov	r0, r2
 80107f4:	f7fd fdf1 	bl	800e3da <get_fat>
 80107f8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80107fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fc:	2b01      	cmp	r3, #1
 80107fe:	d804      	bhi.n	801080a <f_read+0xf2>
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	2202      	movs	r2, #2
 8010804:	755a      	strb	r2, [r3, #21]
 8010806:	2302      	movs	r3, #2
 8010808:	e0e1      	b.n	80109ce <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010810:	d104      	bne.n	801081c <f_read+0x104>
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	2201      	movs	r2, #1
 8010816:	755a      	strb	r2, [r3, #21]
 8010818:	2301      	movs	r3, #1
 801081a:	e0d8      	b.n	80109ce <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010820:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	69db      	ldr	r3, [r3, #28]
 8010828:	4619      	mov	r1, r3
 801082a:	4610      	mov	r0, r2
 801082c:	f7fd fdb6 	bl	800e39c <clust2sect>
 8010830:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010832:	69bb      	ldr	r3, [r7, #24]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d104      	bne.n	8010842 <f_read+0x12a>
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	2202      	movs	r2, #2
 801083c:	755a      	strb	r2, [r3, #21]
 801083e:	2302      	movs	r3, #2
 8010840:	e0c5      	b.n	80109ce <f_read+0x2b6>
			sect += csect;
 8010842:	69ba      	ldr	r2, [r7, #24]
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	4413      	add	r3, r2
 8010848:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	899b      	ldrh	r3, [r3, #12]
 801084e:	461a      	mov	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	fbb3 f3f2 	udiv	r3, r3, r2
 8010856:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085a:	2b00      	cmp	r3, #0
 801085c:	d041      	beq.n	80108e2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801085e:	69fa      	ldr	r2, [r7, #28]
 8010860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010862:	4413      	add	r3, r2
 8010864:	697a      	ldr	r2, [r7, #20]
 8010866:	8952      	ldrh	r2, [r2, #10]
 8010868:	4293      	cmp	r3, r2
 801086a:	d905      	bls.n	8010878 <f_read+0x160>
					cc = fs->csize - csect;
 801086c:	697b      	ldr	r3, [r7, #20]
 801086e:	895b      	ldrh	r3, [r3, #10]
 8010870:	461a      	mov	r2, r3
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	1ad3      	subs	r3, r2, r3
 8010876:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	7858      	ldrb	r0, [r3, #1]
 801087c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087e:	69ba      	ldr	r2, [r7, #24]
 8010880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010882:	f7fd f9df 	bl	800dc44 <disk_read>
 8010886:	4603      	mov	r3, r0
 8010888:	2b00      	cmp	r3, #0
 801088a:	d004      	beq.n	8010896 <f_read+0x17e>
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2201      	movs	r2, #1
 8010890:	755a      	strb	r2, [r3, #21]
 8010892:	2301      	movs	r3, #1
 8010894:	e09b      	b.n	80109ce <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	7d1b      	ldrb	r3, [r3, #20]
 801089a:	b25b      	sxtb	r3, r3
 801089c:	2b00      	cmp	r3, #0
 801089e:	da18      	bge.n	80108d2 <f_read+0x1ba>
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	6a1a      	ldr	r2, [r3, #32]
 80108a4:	69bb      	ldr	r3, [r7, #24]
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d911      	bls.n	80108d2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6a1a      	ldr	r2, [r3, #32]
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	697a      	ldr	r2, [r7, #20]
 80108b8:	8992      	ldrh	r2, [r2, #12]
 80108ba:	fb02 f303 	mul.w	r3, r2, r3
 80108be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108c0:	18d0      	adds	r0, r2, r3
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	899b      	ldrh	r3, [r3, #12]
 80108cc:	461a      	mov	r2, r3
 80108ce:	f7fd fa99 	bl	800de04 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	899b      	ldrh	r3, [r3, #12]
 80108d6:	461a      	mov	r2, r3
 80108d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108da:	fb02 f303 	mul.w	r3, r2, r3
 80108de:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80108e0:	e05c      	b.n	801099c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	6a1b      	ldr	r3, [r3, #32]
 80108e6:	69ba      	ldr	r2, [r7, #24]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d02e      	beq.n	801094a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	7d1b      	ldrb	r3, [r3, #20]
 80108f0:	b25b      	sxtb	r3, r3
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	da18      	bge.n	8010928 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	7858      	ldrb	r0, [r3, #1]
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	6a1a      	ldr	r2, [r3, #32]
 8010904:	2301      	movs	r3, #1
 8010906:	f7fd f9bd 	bl	800dc84 <disk_write>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d004      	beq.n	801091a <f_read+0x202>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	2201      	movs	r2, #1
 8010914:	755a      	strb	r2, [r3, #21]
 8010916:	2301      	movs	r3, #1
 8010918:	e059      	b.n	80109ce <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	7d1b      	ldrb	r3, [r3, #20]
 801091e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010922:	b2da      	uxtb	r2, r3
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	7858      	ldrb	r0, [r3, #1]
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010932:	2301      	movs	r3, #1
 8010934:	69ba      	ldr	r2, [r7, #24]
 8010936:	f7fd f985 	bl	800dc44 <disk_read>
 801093a:	4603      	mov	r3, r0
 801093c:	2b00      	cmp	r3, #0
 801093e:	d004      	beq.n	801094a <f_read+0x232>
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2201      	movs	r2, #1
 8010944:	755a      	strb	r2, [r3, #21]
 8010946:	2301      	movs	r3, #1
 8010948:	e041      	b.n	80109ce <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	69ba      	ldr	r2, [r7, #24]
 801094e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	899b      	ldrh	r3, [r3, #12]
 8010954:	4618      	mov	r0, r3
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	699b      	ldr	r3, [r3, #24]
 801095a:	697a      	ldr	r2, [r7, #20]
 801095c:	8992      	ldrh	r2, [r2, #12]
 801095e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010962:	fb02 f201 	mul.w	r2, r2, r1
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	1ac3      	subs	r3, r0, r3
 801096a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801096c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	429a      	cmp	r2, r3
 8010972:	d901      	bls.n	8010978 <f_read+0x260>
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	8992      	ldrh	r2, [r2, #12]
 8010986:	fbb3 f0f2 	udiv	r0, r3, r2
 801098a:	fb02 f200 	mul.w	r2, r2, r0
 801098e:	1a9b      	subs	r3, r3, r2
 8010990:	440b      	add	r3, r1
 8010992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010994:	4619      	mov	r1, r3
 8010996:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010998:	f7fd fa34 	bl	800de04 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801099c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801099e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a0:	4413      	add	r3, r2
 80109a2:	627b      	str	r3, [r7, #36]	; 0x24
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	699a      	ldr	r2, [r3, #24]
 80109a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109aa:	441a      	add	r2, r3
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	619a      	str	r2, [r3, #24]
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	681a      	ldr	r2, [r3, #0]
 80109b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109b6:	441a      	add	r2, r3
 80109b8:	683b      	ldr	r3, [r7, #0]
 80109ba:	601a      	str	r2, [r3, #0]
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	f47f aee1 	bne.w	801078e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3738      	adds	r7, #56	; 0x38
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b08c      	sub	sp, #48	; 0x30
 80109da:	af00      	add	r7, sp, #0
 80109dc:	60f8      	str	r0, [r7, #12]
 80109de:	60b9      	str	r1, [r7, #8]
 80109e0:	607a      	str	r2, [r7, #4]
 80109e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	2200      	movs	r2, #0
 80109ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	f107 0210 	add.w	r2, r7, #16
 80109f4:	4611      	mov	r1, r2
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7ff fc46 	bl	8010288 <validate>
 80109fc:	4603      	mov	r3, r0
 80109fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010a02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d107      	bne.n	8010a1a <f_write+0x44>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	7d5b      	ldrb	r3, [r3, #21]
 8010a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d002      	beq.n	8010a20 <f_write+0x4a>
 8010a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a1e:	e16a      	b.n	8010cf6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	7d1b      	ldrb	r3, [r3, #20]
 8010a24:	f003 0302 	and.w	r3, r3, #2
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d101      	bne.n	8010a30 <f_write+0x5a>
 8010a2c:	2307      	movs	r3, #7
 8010a2e:	e162      	b.n	8010cf6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	699a      	ldr	r2, [r3, #24]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	441a      	add	r2, r3
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	699b      	ldr	r3, [r3, #24]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	f080 814c 	bcs.w	8010cda <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	699b      	ldr	r3, [r3, #24]
 8010a46:	43db      	mvns	r3, r3
 8010a48:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010a4a:	e146      	b.n	8010cda <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	699b      	ldr	r3, [r3, #24]
 8010a50:	693a      	ldr	r2, [r7, #16]
 8010a52:	8992      	ldrh	r2, [r2, #12]
 8010a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a58:	fb02 f201 	mul.w	r2, r2, r1
 8010a5c:	1a9b      	subs	r3, r3, r2
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f040 80f1 	bne.w	8010c46 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	699b      	ldr	r3, [r3, #24]
 8010a68:	693a      	ldr	r2, [r7, #16]
 8010a6a:	8992      	ldrh	r2, [r2, #12]
 8010a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a70:	693a      	ldr	r2, [r7, #16]
 8010a72:	8952      	ldrh	r2, [r2, #10]
 8010a74:	3a01      	subs	r2, #1
 8010a76:	4013      	ands	r3, r2
 8010a78:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010a7a:	69bb      	ldr	r3, [r7, #24]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d143      	bne.n	8010b08 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	699b      	ldr	r3, [r3, #24]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d10c      	bne.n	8010aa2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	689b      	ldr	r3, [r3, #8]
 8010a8c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d11a      	bne.n	8010aca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	2100      	movs	r1, #0
 8010a98:	4618      	mov	r0, r3
 8010a9a:	f7fd feea 	bl	800e872 <create_chain>
 8010a9e:	62b8      	str	r0, [r7, #40]	; 0x28
 8010aa0:	e013      	b.n	8010aca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d007      	beq.n	8010aba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	699b      	ldr	r3, [r3, #24]
 8010aae:	4619      	mov	r1, r3
 8010ab0:	68f8      	ldr	r0, [r7, #12]
 8010ab2:	f7fd ff76 	bl	800e9a2 <clmt_clust>
 8010ab6:	62b8      	str	r0, [r7, #40]	; 0x28
 8010ab8:	e007      	b.n	8010aca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	69db      	ldr	r3, [r3, #28]
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	f7fd fed5 	bl	800e872 <create_chain>
 8010ac8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	f000 8109 	beq.w	8010ce4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad4:	2b01      	cmp	r3, #1
 8010ad6:	d104      	bne.n	8010ae2 <f_write+0x10c>
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	2202      	movs	r2, #2
 8010adc:	755a      	strb	r2, [r3, #21]
 8010ade:	2302      	movs	r3, #2
 8010ae0:	e109      	b.n	8010cf6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae8:	d104      	bne.n	8010af4 <f_write+0x11e>
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	2201      	movs	r2, #1
 8010aee:	755a      	strb	r2, [r3, #21]
 8010af0:	2301      	movs	r3, #1
 8010af2:	e100      	b.n	8010cf6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010af8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	689b      	ldr	r3, [r3, #8]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d102      	bne.n	8010b08 <f_write+0x132>
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b06:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	7d1b      	ldrb	r3, [r3, #20]
 8010b0c:	b25b      	sxtb	r3, r3
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	da18      	bge.n	8010b44 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	7858      	ldrb	r0, [r3, #1]
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	6a1a      	ldr	r2, [r3, #32]
 8010b20:	2301      	movs	r3, #1
 8010b22:	f7fd f8af 	bl	800dc84 <disk_write>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d004      	beq.n	8010b36 <f_write+0x160>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	755a      	strb	r2, [r3, #21]
 8010b32:	2301      	movs	r3, #1
 8010b34:	e0df      	b.n	8010cf6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	7d1b      	ldrb	r3, [r3, #20]
 8010b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b3e:	b2da      	uxtb	r2, r3
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010b44:	693a      	ldr	r2, [r7, #16]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	69db      	ldr	r3, [r3, #28]
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	f7fd fc25 	bl	800e39c <clust2sect>
 8010b52:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d104      	bne.n	8010b64 <f_write+0x18e>
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2202      	movs	r2, #2
 8010b5e:	755a      	strb	r2, [r3, #21]
 8010b60:	2302      	movs	r3, #2
 8010b62:	e0c8      	b.n	8010cf6 <f_write+0x320>
			sect += csect;
 8010b64:	697a      	ldr	r2, [r7, #20]
 8010b66:	69bb      	ldr	r3, [r7, #24]
 8010b68:	4413      	add	r3, r2
 8010b6a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010b6c:	693b      	ldr	r3, [r7, #16]
 8010b6e:	899b      	ldrh	r3, [r3, #12]
 8010b70:	461a      	mov	r2, r3
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b78:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010b7a:	6a3b      	ldr	r3, [r7, #32]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d043      	beq.n	8010c08 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010b80:	69ba      	ldr	r2, [r7, #24]
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	4413      	add	r3, r2
 8010b86:	693a      	ldr	r2, [r7, #16]
 8010b88:	8952      	ldrh	r2, [r2, #10]
 8010b8a:	4293      	cmp	r3, r2
 8010b8c:	d905      	bls.n	8010b9a <f_write+0x1c4>
					cc = fs->csize - csect;
 8010b8e:	693b      	ldr	r3, [r7, #16]
 8010b90:	895b      	ldrh	r3, [r3, #10]
 8010b92:	461a      	mov	r2, r3
 8010b94:	69bb      	ldr	r3, [r7, #24]
 8010b96:	1ad3      	subs	r3, r2, r3
 8010b98:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	7858      	ldrb	r0, [r3, #1]
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	697a      	ldr	r2, [r7, #20]
 8010ba2:	69f9      	ldr	r1, [r7, #28]
 8010ba4:	f7fd f86e 	bl	800dc84 <disk_write>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d004      	beq.n	8010bb8 <f_write+0x1e2>
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	2201      	movs	r2, #1
 8010bb2:	755a      	strb	r2, [r3, #21]
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	e09e      	b.n	8010cf6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	6a1a      	ldr	r2, [r3, #32]
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	6a3a      	ldr	r2, [r7, #32]
 8010bc2:	429a      	cmp	r2, r3
 8010bc4:	d918      	bls.n	8010bf8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	6a1a      	ldr	r2, [r3, #32]
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	1ad3      	subs	r3, r2, r3
 8010bd4:	693a      	ldr	r2, [r7, #16]
 8010bd6:	8992      	ldrh	r2, [r2, #12]
 8010bd8:	fb02 f303 	mul.w	r3, r2, r3
 8010bdc:	69fa      	ldr	r2, [r7, #28]
 8010bde:	18d1      	adds	r1, r2, r3
 8010be0:	693b      	ldr	r3, [r7, #16]
 8010be2:	899b      	ldrh	r3, [r3, #12]
 8010be4:	461a      	mov	r2, r3
 8010be6:	f7fd f90d 	bl	800de04 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	7d1b      	ldrb	r3, [r3, #20]
 8010bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bf2:	b2da      	uxtb	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	899b      	ldrh	r3, [r3, #12]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	fb02 f303 	mul.w	r3, r2, r3
 8010c04:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010c06:	e04b      	b.n	8010ca0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	6a1b      	ldr	r3, [r3, #32]
 8010c0c:	697a      	ldr	r2, [r7, #20]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d016      	beq.n	8010c40 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	699a      	ldr	r2, [r3, #24]
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d210      	bcs.n	8010c40 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	7858      	ldrb	r0, [r3, #1]
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c28:	2301      	movs	r3, #1
 8010c2a:	697a      	ldr	r2, [r7, #20]
 8010c2c:	f7fd f80a 	bl	800dc44 <disk_read>
 8010c30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d004      	beq.n	8010c40 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	2201      	movs	r2, #1
 8010c3a:	755a      	strb	r2, [r3, #21]
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e05a      	b.n	8010cf6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	899b      	ldrh	r3, [r3, #12]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	699b      	ldr	r3, [r3, #24]
 8010c50:	693a      	ldr	r2, [r7, #16]
 8010c52:	8992      	ldrh	r2, [r2, #12]
 8010c54:	fbb3 f1f2 	udiv	r1, r3, r2
 8010c58:	fb02 f201 	mul.w	r2, r2, r1
 8010c5c:	1a9b      	subs	r3, r3, r2
 8010c5e:	1ac3      	subs	r3, r0, r3
 8010c60:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d901      	bls.n	8010c6e <f_write+0x298>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c74:	68fb      	ldr	r3, [r7, #12]
 8010c76:	699b      	ldr	r3, [r3, #24]
 8010c78:	693a      	ldr	r2, [r7, #16]
 8010c7a:	8992      	ldrh	r2, [r2, #12]
 8010c7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8010c80:	fb02 f200 	mul.w	r2, r2, r0
 8010c84:	1a9b      	subs	r3, r3, r2
 8010c86:	440b      	add	r3, r1
 8010c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c8a:	69f9      	ldr	r1, [r7, #28]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7fd f8b9 	bl	800de04 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	7d1b      	ldrb	r3, [r3, #20]
 8010c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010c9a:	b2da      	uxtb	r2, r3
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010ca0:	69fa      	ldr	r2, [r7, #28]
 8010ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca4:	4413      	add	r3, r2
 8010ca6:	61fb      	str	r3, [r7, #28]
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	699a      	ldr	r2, [r3, #24]
 8010cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cae:	441a      	add	r2, r3
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	619a      	str	r2, [r3, #24]
 8010cb4:	68fb      	ldr	r3, [r7, #12]
 8010cb6:	68da      	ldr	r2, [r3, #12]
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	699b      	ldr	r3, [r3, #24]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	bf38      	it	cc
 8010cc0:	461a      	movcc	r2, r3
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	60da      	str	r2, [r3, #12]
 8010cc6:	683b      	ldr	r3, [r7, #0]
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ccc:	441a      	add	r2, r3
 8010cce:	683b      	ldr	r3, [r7, #0]
 8010cd0:	601a      	str	r2, [r3, #0]
 8010cd2:	687a      	ldr	r2, [r7, #4]
 8010cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cd6:	1ad3      	subs	r3, r2, r3
 8010cd8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f47f aeb5 	bne.w	8010a4c <f_write+0x76>
 8010ce2:	e000      	b.n	8010ce6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010ce4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	7d1b      	ldrb	r3, [r3, #20]
 8010cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cee:	b2da      	uxtb	r2, r3
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010cf4:	2300      	movs	r3, #0
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3730      	adds	r7, #48	; 0x30
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}

08010cfe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010cfe:	b580      	push	{r7, lr}
 8010d00:	b086      	sub	sp, #24
 8010d02:	af00      	add	r7, sp, #0
 8010d04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f107 0208 	add.w	r2, r7, #8
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7ff faba 	bl	8010288 <validate>
 8010d14:	4603      	mov	r3, r0
 8010d16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d18:	7dfb      	ldrb	r3, [r7, #23]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d168      	bne.n	8010df0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	7d1b      	ldrb	r3, [r3, #20]
 8010d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d062      	beq.n	8010df0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	7d1b      	ldrb	r3, [r3, #20]
 8010d2e:	b25b      	sxtb	r3, r3
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	da15      	bge.n	8010d60 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010d34:	68bb      	ldr	r3, [r7, #8]
 8010d36:	7858      	ldrb	r0, [r3, #1]
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6a1a      	ldr	r2, [r3, #32]
 8010d42:	2301      	movs	r3, #1
 8010d44:	f7fc ff9e 	bl	800dc84 <disk_write>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d001      	beq.n	8010d52 <f_sync+0x54>
 8010d4e:	2301      	movs	r3, #1
 8010d50:	e04f      	b.n	8010df2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	7d1b      	ldrb	r3, [r3, #20]
 8010d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d5a:	b2da      	uxtb	r2, r3
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010d60:	f7fc fce0 	bl	800d724 <get_fattime>
 8010d64:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010d66:	68ba      	ldr	r2, [r7, #8]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	4610      	mov	r0, r2
 8010d70:	f7fd fa76 	bl	800e260 <move_window>
 8010d74:	4603      	mov	r3, r0
 8010d76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010d78:	7dfb      	ldrb	r3, [r7, #23]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d138      	bne.n	8010df0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d82:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010d84:	68fb      	ldr	r3, [r7, #12]
 8010d86:	330b      	adds	r3, #11
 8010d88:	781a      	ldrb	r2, [r3, #0]
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	330b      	adds	r3, #11
 8010d8e:	f042 0220 	orr.w	r2, r2, #32
 8010d92:	b2d2      	uxtb	r2, r2
 8010d94:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	6818      	ldr	r0, [r3, #0]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	689b      	ldr	r3, [r3, #8]
 8010d9e:	461a      	mov	r2, r3
 8010da0:	68f9      	ldr	r1, [r7, #12]
 8010da2:	f7fd fffb 	bl	800ed9c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	f103 021c 	add.w	r2, r3, #28
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	68db      	ldr	r3, [r3, #12]
 8010db0:	4619      	mov	r1, r3
 8010db2:	4610      	mov	r0, r2
 8010db4:	f7fc fffa 	bl	800ddac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	3316      	adds	r3, #22
 8010dbc:	6939      	ldr	r1, [r7, #16]
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fc fff4 	bl	800ddac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	3312      	adds	r3, #18
 8010dc8:	2100      	movs	r1, #0
 8010dca:	4618      	mov	r0, r3
 8010dcc:	f7fc ffd3 	bl	800dd76 <st_word>
					fs->wflag = 1;
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	2201      	movs	r2, #1
 8010dd4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010dd6:	68bb      	ldr	r3, [r7, #8]
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f7fd fa6f 	bl	800e2bc <sync_fs>
 8010dde:	4603      	mov	r3, r0
 8010de0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	7d1b      	ldrb	r3, [r3, #20]
 8010de6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dea:	b2da      	uxtb	r2, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	3718      	adds	r7, #24
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd80      	pop	{r7, pc}

08010dfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010dfa:	b580      	push	{r7, lr}
 8010dfc:	b084      	sub	sp, #16
 8010dfe:	af00      	add	r7, sp, #0
 8010e00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff ff7b 	bl	8010cfe <f_sync>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010e0c:	7bfb      	ldrb	r3, [r7, #15]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d118      	bne.n	8010e44 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f107 0208 	add.w	r2, r7, #8
 8010e18:	4611      	mov	r1, r2
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fa34 	bl	8010288 <validate>
 8010e20:	4603      	mov	r3, r0
 8010e22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010e24:	7bfb      	ldrb	r3, [r7, #15]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10c      	bne.n	8010e44 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	691b      	ldr	r3, [r3, #16]
 8010e2e:	4618      	mov	r0, r3
 8010e30:	f7fd f972 	bl	800e118 <dec_lock>
 8010e34:	4603      	mov	r3, r0
 8010e36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d102      	bne.n	8010e44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}

08010e4e <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010e4e:	b590      	push	{r4, r7, lr}
 8010e50:	b093      	sub	sp, #76	; 0x4c
 8010e52:	af00      	add	r7, sp, #0
 8010e54:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010e56:	f107 010c 	add.w	r1, r7, #12
 8010e5a:	1d3b      	adds	r3, r7, #4
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fe ff86 	bl	800fd70 <find_volume>
 8010e64:	4603      	mov	r3, r0
 8010e66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010e6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d131      	bne.n	8010ed6 <f_chdir+0x88>
		dj.obj.fs = fs;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	f107 0310 	add.w	r3, r7, #16
 8010e7c:	4611      	mov	r1, r2
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fe fe46 	bl	800fb10 <follow_path>
 8010e84:	4603      	mov	r3, r0
 8010e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 8010e8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d11a      	bne.n	8010ec8 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010e92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010e96:	b25b      	sxtb	r3, r3
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	da03      	bge.n	8010ea4 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	69ba      	ldr	r2, [r7, #24]
 8010ea0:	61da      	str	r2, [r3, #28]
 8010ea2:	e011      	b.n	8010ec8 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010ea4:	7dbb      	ldrb	r3, [r7, #22]
 8010ea6:	f003 0310 	and.w	r3, r3, #16
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d009      	beq.n	8010ec2 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010eb2:	68fc      	ldr	r4, [r7, #12]
 8010eb4:	4611      	mov	r1, r2
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7fd ff51 	bl	800ed5e <ld_clust>
 8010ebc:	4603      	mov	r3, r0
 8010ebe:	61e3      	str	r3, [r4, #28]
 8010ec0:	e002      	b.n	8010ec8 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010ec2:	2305      	movs	r3, #5
 8010ec4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010ec8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010ecc:	2b04      	cmp	r3, #4
 8010ece:	d102      	bne.n	8010ed6 <f_chdir+0x88>
 8010ed0:	2305      	movs	r3, #5
 8010ed2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8010ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	374c      	adds	r7, #76	; 0x4c
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd90      	pop	{r4, r7, pc}

08010ee2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010ee2:	b580      	push	{r7, lr}
 8010ee4:	b090      	sub	sp, #64	; 0x40
 8010ee6:	af00      	add	r7, sp, #0
 8010ee8:	6078      	str	r0, [r7, #4]
 8010eea:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f107 0208 	add.w	r2, r7, #8
 8010ef2:	4611      	mov	r1, r2
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7ff f9c7 	bl	8010288 <validate>
 8010efa:	4603      	mov	r3, r0
 8010efc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d103      	bne.n	8010f10 <f_lseek+0x2e>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	7d5b      	ldrb	r3, [r3, #21]
 8010f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010f10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d002      	beq.n	8010f1e <f_lseek+0x3c>
 8010f18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f1c:	e201      	b.n	8011322 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	f000 80d9 	beq.w	80110da <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f2e:	d15a      	bne.n	8010fe6 <f_lseek+0x104>
			tbl = fp->cltbl;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f34:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f38:	1d1a      	adds	r2, r3, #4
 8010f3a:	627a      	str	r2, [r7, #36]	; 0x24
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	617b      	str	r3, [r7, #20]
 8010f40:	2302      	movs	r3, #2
 8010f42:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	689b      	ldr	r3, [r3, #8]
 8010f48:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d03a      	beq.n	8010fc6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f52:	613b      	str	r3, [r7, #16]
 8010f54:	2300      	movs	r3, #0
 8010f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5a:	3302      	adds	r3, #2
 8010f5c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f60:	60fb      	str	r3, [r7, #12]
 8010f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f64:	3301      	adds	r3, #1
 8010f66:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f7fd fa34 	bl	800e3da <get_fat>
 8010f72:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f76:	2b01      	cmp	r3, #1
 8010f78:	d804      	bhi.n	8010f84 <f_lseek+0xa2>
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	2202      	movs	r2, #2
 8010f7e:	755a      	strb	r2, [r3, #21]
 8010f80:	2302      	movs	r3, #2
 8010f82:	e1ce      	b.n	8011322 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f8a:	d104      	bne.n	8010f96 <f_lseek+0xb4>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	755a      	strb	r2, [r3, #21]
 8010f92:	2301      	movs	r3, #1
 8010f94:	e1c5      	b.n	8011322 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	3301      	adds	r3, #1
 8010f9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	d0de      	beq.n	8010f5e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	429a      	cmp	r2, r3
 8010fa6:	d809      	bhi.n	8010fbc <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010faa:	1d1a      	adds	r2, r3, #4
 8010fac:	627a      	str	r2, [r7, #36]	; 0x24
 8010fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb4:	1d1a      	adds	r2, r3, #4
 8010fb6:	627a      	str	r2, [r7, #36]	; 0x24
 8010fb8:	693a      	ldr	r2, [r7, #16]
 8010fba:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	6a1b      	ldr	r3, [r3, #32]
 8010fc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d3c4      	bcc.n	8010f50 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fcc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fd0:	697b      	ldr	r3, [r7, #20]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d803      	bhi.n	8010fde <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd8:	2200      	movs	r2, #0
 8010fda:	601a      	str	r2, [r3, #0]
 8010fdc:	e19f      	b.n	801131e <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010fde:	2311      	movs	r3, #17
 8010fe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010fe4:	e19b      	b.n	801131e <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	68db      	ldr	r3, [r3, #12]
 8010fea:	683a      	ldr	r2, [r7, #0]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d902      	bls.n	8010ff6 <f_lseek+0x114>
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	683a      	ldr	r2, [r7, #0]
 8010ffa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f000 818d 	beq.w	801131e <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	3b01      	subs	r3, #1
 8011008:	4619      	mov	r1, r3
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f7fd fcc9 	bl	800e9a2 <clmt_clust>
 8011010:	4602      	mov	r2, r0
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8011016:	68ba      	ldr	r2, [r7, #8]
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	69db      	ldr	r3, [r3, #28]
 801101c:	4619      	mov	r1, r3
 801101e:	4610      	mov	r0, r2
 8011020:	f7fd f9bc 	bl	800e39c <clust2sect>
 8011024:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8011026:	69bb      	ldr	r3, [r7, #24]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d104      	bne.n	8011036 <f_lseek+0x154>
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2202      	movs	r2, #2
 8011030:	755a      	strb	r2, [r3, #21]
 8011032:	2302      	movs	r3, #2
 8011034:	e175      	b.n	8011322 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	3b01      	subs	r3, #1
 801103a:	68ba      	ldr	r2, [r7, #8]
 801103c:	8992      	ldrh	r2, [r2, #12]
 801103e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011042:	68ba      	ldr	r2, [r7, #8]
 8011044:	8952      	ldrh	r2, [r2, #10]
 8011046:	3a01      	subs	r2, #1
 8011048:	4013      	ands	r3, r2
 801104a:	69ba      	ldr	r2, [r7, #24]
 801104c:	4413      	add	r3, r2
 801104e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	699b      	ldr	r3, [r3, #24]
 8011054:	68ba      	ldr	r2, [r7, #8]
 8011056:	8992      	ldrh	r2, [r2, #12]
 8011058:	fbb3 f1f2 	udiv	r1, r3, r2
 801105c:	fb02 f201 	mul.w	r2, r2, r1
 8011060:	1a9b      	subs	r3, r3, r2
 8011062:	2b00      	cmp	r3, #0
 8011064:	f000 815b 	beq.w	801131e <f_lseek+0x43c>
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6a1b      	ldr	r3, [r3, #32]
 801106c:	69ba      	ldr	r2, [r7, #24]
 801106e:	429a      	cmp	r2, r3
 8011070:	f000 8155 	beq.w	801131e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	7d1b      	ldrb	r3, [r3, #20]
 8011078:	b25b      	sxtb	r3, r3
 801107a:	2b00      	cmp	r3, #0
 801107c:	da18      	bge.n	80110b0 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	7858      	ldrb	r0, [r3, #1]
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6a1a      	ldr	r2, [r3, #32]
 801108c:	2301      	movs	r3, #1
 801108e:	f7fc fdf9 	bl	800dc84 <disk_write>
 8011092:	4603      	mov	r3, r0
 8011094:	2b00      	cmp	r3, #0
 8011096:	d004      	beq.n	80110a2 <f_lseek+0x1c0>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2201      	movs	r2, #1
 801109c:	755a      	strb	r2, [r3, #21]
 801109e:	2301      	movs	r3, #1
 80110a0:	e13f      	b.n	8011322 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	7d1b      	ldrb	r3, [r3, #20]
 80110a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80110aa:	b2da      	uxtb	r2, r3
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	7858      	ldrb	r0, [r3, #1]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80110ba:	2301      	movs	r3, #1
 80110bc:	69ba      	ldr	r2, [r7, #24]
 80110be:	f7fc fdc1 	bl	800dc44 <disk_read>
 80110c2:	4603      	mov	r3, r0
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d004      	beq.n	80110d2 <f_lseek+0x1f0>
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2201      	movs	r2, #1
 80110cc:	755a      	strb	r2, [r3, #21]
 80110ce:	2301      	movs	r3, #1
 80110d0:	e127      	b.n	8011322 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	69ba      	ldr	r2, [r7, #24]
 80110d6:	621a      	str	r2, [r3, #32]
 80110d8:	e121      	b.n	801131e <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	68db      	ldr	r3, [r3, #12]
 80110de:	683a      	ldr	r2, [r7, #0]
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d908      	bls.n	80110f6 <f_lseek+0x214>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	7d1b      	ldrb	r3, [r3, #20]
 80110e8:	f003 0302 	and.w	r3, r3, #2
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d102      	bne.n	80110f6 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	699b      	ldr	r3, [r3, #24]
 80110fa:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80110fc:	2300      	movs	r3, #0
 80110fe:	637b      	str	r3, [r7, #52]	; 0x34
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011104:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	2b00      	cmp	r3, #0
 801110a:	f000 80b5 	beq.w	8011278 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	895b      	ldrh	r3, [r3, #10]
 8011112:	461a      	mov	r2, r3
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	899b      	ldrh	r3, [r3, #12]
 8011118:	fb03 f302 	mul.w	r3, r3, r2
 801111c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801111e:	6a3b      	ldr	r3, [r7, #32]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d01b      	beq.n	801115c <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	1e5a      	subs	r2, r3, #1
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	fbb2 f2f3 	udiv	r2, r2, r3
 801112e:	6a3b      	ldr	r3, [r7, #32]
 8011130:	1e59      	subs	r1, r3, #1
 8011132:	69fb      	ldr	r3, [r7, #28]
 8011134:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8011138:	429a      	cmp	r2, r3
 801113a:	d30f      	bcc.n	801115c <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801113c:	6a3b      	ldr	r3, [r7, #32]
 801113e:	1e5a      	subs	r2, r3, #1
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	425b      	negs	r3, r3
 8011144:	401a      	ands	r2, r3
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	699b      	ldr	r3, [r3, #24]
 801114e:	683a      	ldr	r2, [r7, #0]
 8011150:	1ad3      	subs	r3, r2, r3
 8011152:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	69db      	ldr	r3, [r3, #28]
 8011158:	63bb      	str	r3, [r7, #56]	; 0x38
 801115a:	e022      	b.n	80111a2 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011164:	2b00      	cmp	r3, #0
 8011166:	d119      	bne.n	801119c <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2100      	movs	r1, #0
 801116c:	4618      	mov	r0, r3
 801116e:	f7fd fb80 	bl	800e872 <create_chain>
 8011172:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011176:	2b01      	cmp	r3, #1
 8011178:	d104      	bne.n	8011184 <f_lseek+0x2a2>
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2202      	movs	r2, #2
 801117e:	755a      	strb	r2, [r3, #21]
 8011180:	2302      	movs	r3, #2
 8011182:	e0ce      	b.n	8011322 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011186:	f1b3 3fff 	cmp.w	r3, #4294967295
 801118a:	d104      	bne.n	8011196 <f_lseek+0x2b4>
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2201      	movs	r2, #1
 8011190:	755a      	strb	r2, [r3, #21]
 8011192:	2301      	movs	r3, #1
 8011194:	e0c5      	b.n	8011322 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801119a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111a0:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d067      	beq.n	8011278 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80111a8:	e03a      	b.n	8011220 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80111aa:	683a      	ldr	r2, [r7, #0]
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	603b      	str	r3, [r7, #0]
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	699a      	ldr	r2, [r3, #24]
 80111b6:	69fb      	ldr	r3, [r7, #28]
 80111b8:	441a      	add	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	7d1b      	ldrb	r3, [r3, #20]
 80111c2:	f003 0302 	and.w	r3, r3, #2
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d00b      	beq.n	80111e2 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111ce:	4618      	mov	r0, r3
 80111d0:	f7fd fb4f 	bl	800e872 <create_chain>
 80111d4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d108      	bne.n	80111ee <f_lseek+0x30c>
							ofs = 0; break;
 80111dc:	2300      	movs	r3, #0
 80111de:	603b      	str	r3, [r7, #0]
 80111e0:	e022      	b.n	8011228 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80111e6:	4618      	mov	r0, r3
 80111e8:	f7fd f8f7 	bl	800e3da <get_fat>
 80111ec:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80111ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111f4:	d104      	bne.n	8011200 <f_lseek+0x31e>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2201      	movs	r2, #1
 80111fa:	755a      	strb	r2, [r3, #21]
 80111fc:	2301      	movs	r3, #1
 80111fe:	e090      	b.n	8011322 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8011200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011202:	2b01      	cmp	r3, #1
 8011204:	d904      	bls.n	8011210 <f_lseek+0x32e>
 8011206:	68bb      	ldr	r3, [r7, #8]
 8011208:	6a1b      	ldr	r3, [r3, #32]
 801120a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801120c:	429a      	cmp	r2, r3
 801120e:	d304      	bcc.n	801121a <f_lseek+0x338>
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2202      	movs	r2, #2
 8011214:	755a      	strb	r2, [r3, #21]
 8011216:	2302      	movs	r3, #2
 8011218:	e083      	b.n	8011322 <f_lseek+0x440>
					fp->clust = clst;
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801121e:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8011220:	683a      	ldr	r2, [r7, #0]
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	429a      	cmp	r2, r3
 8011226:	d8c0      	bhi.n	80111aa <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	699a      	ldr	r2, [r3, #24]
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	441a      	add	r2, r3
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011234:	68bb      	ldr	r3, [r7, #8]
 8011236:	899b      	ldrh	r3, [r3, #12]
 8011238:	461a      	mov	r2, r3
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011240:	fb02 f201 	mul.w	r2, r2, r1
 8011244:	1a9b      	subs	r3, r3, r2
 8011246:	2b00      	cmp	r3, #0
 8011248:	d016      	beq.n	8011278 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801124e:	4618      	mov	r0, r3
 8011250:	f7fd f8a4 	bl	800e39c <clust2sect>
 8011254:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8011256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011258:	2b00      	cmp	r3, #0
 801125a:	d104      	bne.n	8011266 <f_lseek+0x384>
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2202      	movs	r2, #2
 8011260:	755a      	strb	r2, [r3, #21]
 8011262:	2302      	movs	r3, #2
 8011264:	e05d      	b.n	8011322 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8011266:	68bb      	ldr	r3, [r7, #8]
 8011268:	899b      	ldrh	r3, [r3, #12]
 801126a:	461a      	mov	r2, r3
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	fbb3 f3f2 	udiv	r3, r3, r2
 8011272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011274:	4413      	add	r3, r2
 8011276:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	699a      	ldr	r2, [r3, #24]
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	68db      	ldr	r3, [r3, #12]
 8011280:	429a      	cmp	r2, r3
 8011282:	d90a      	bls.n	801129a <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	699a      	ldr	r2, [r3, #24]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	7d1b      	ldrb	r3, [r3, #20]
 8011290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011294:	b2da      	uxtb	r2, r3
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	699b      	ldr	r3, [r3, #24]
 801129e:	68ba      	ldr	r2, [r7, #8]
 80112a0:	8992      	ldrh	r2, [r2, #12]
 80112a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80112a6:	fb02 f201 	mul.w	r2, r2, r1
 80112aa:	1a9b      	subs	r3, r3, r2
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d036      	beq.n	801131e <f_lseek+0x43c>
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	6a1b      	ldr	r3, [r3, #32]
 80112b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d031      	beq.n	801131e <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	7d1b      	ldrb	r3, [r3, #20]
 80112be:	b25b      	sxtb	r3, r3
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	da18      	bge.n	80112f6 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	7858      	ldrb	r0, [r3, #1]
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a1a      	ldr	r2, [r3, #32]
 80112d2:	2301      	movs	r3, #1
 80112d4:	f7fc fcd6 	bl	800dc84 <disk_write>
 80112d8:	4603      	mov	r3, r0
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d004      	beq.n	80112e8 <f_lseek+0x406>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	2201      	movs	r2, #1
 80112e2:	755a      	strb	r2, [r3, #21]
 80112e4:	2301      	movs	r3, #1
 80112e6:	e01c      	b.n	8011322 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	7d1b      	ldrb	r3, [r3, #20]
 80112ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112f0:	b2da      	uxtb	r2, r3
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	7858      	ldrb	r0, [r3, #1]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011300:	2301      	movs	r3, #1
 8011302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011304:	f7fc fc9e 	bl	800dc44 <disk_read>
 8011308:	4603      	mov	r3, r0
 801130a:	2b00      	cmp	r3, #0
 801130c:	d004      	beq.n	8011318 <f_lseek+0x436>
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2201      	movs	r2, #1
 8011312:	755a      	strb	r2, [r3, #21]
 8011314:	2301      	movs	r3, #1
 8011316:	e004      	b.n	8011322 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801131c:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801131e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011322:	4618      	mov	r0, r3
 8011324:	3740      	adds	r7, #64	; 0x40
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801132a:	b580      	push	{r7, lr}
 801132c:	b0a0      	sub	sp, #128	; 0x80
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011332:	2300      	movs	r3, #0
 8011334:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011336:	f107 010c 	add.w	r1, r7, #12
 801133a:	1d3b      	adds	r3, r7, #4
 801133c:	2202      	movs	r2, #2
 801133e:	4618      	mov	r0, r3
 8011340:	f7fe fd16 	bl	800fd70 <find_volume>
 8011344:	4603      	mov	r3, r0
 8011346:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 801134e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011352:	2b00      	cmp	r3, #0
 8011354:	f040 80a4 	bne.w	80114a0 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801135e:	4611      	mov	r1, r2
 8011360:	4618      	mov	r0, r3
 8011362:	f7fe fbd5 	bl	800fb10 <follow_path>
 8011366:	4603      	mov	r3, r0
 8011368:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801136c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011370:	2b00      	cmp	r3, #0
 8011372:	d108      	bne.n	8011386 <f_unlink+0x5c>
 8011374:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011378:	f003 0320 	and.w	r3, r3, #32
 801137c:	2b00      	cmp	r3, #0
 801137e:	d002      	beq.n	8011386 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011380:	2306      	movs	r3, #6
 8011382:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8011386:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801138a:	2b00      	cmp	r3, #0
 801138c:	d108      	bne.n	80113a0 <f_unlink+0x76>
 801138e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011392:	2102      	movs	r1, #2
 8011394:	4618      	mov	r0, r3
 8011396:	f7fc fdb3 	bl	800df00 <chk_lock>
 801139a:	4603      	mov	r3, r0
 801139c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80113a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d17b      	bne.n	80114a0 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80113a8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80113ac:	b25b      	sxtb	r3, r3
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	da03      	bge.n	80113ba <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80113b2:	2306      	movs	r3, #6
 80113b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80113b8:	e008      	b.n	80113cc <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80113ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80113be:	f003 0301 	and.w	r3, r3, #1
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d002      	beq.n	80113cc <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80113c6:	2307      	movs	r3, #7
 80113c8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80113cc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d13d      	bne.n	8011450 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80113d8:	4611      	mov	r1, r2
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fd fcbf 	bl	800ed5e <ld_clust>
 80113e0:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80113e2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80113e6:	f003 0310 	and.w	r3, r3, #16
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d030      	beq.n	8011450 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	69db      	ldr	r3, [r3, #28]
 80113f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d103      	bne.n	8011400 <f_unlink+0xd6>
						res = FR_DENIED;
 80113f8:	2307      	movs	r3, #7
 80113fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80113fe:	e027      	b.n	8011450 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8011404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011406:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8011408:	f107 0310 	add.w	r3, r7, #16
 801140c:	2100      	movs	r1, #0
 801140e:	4618      	mov	r0, r3
 8011410:	f7fd faff 	bl	800ea12 <dir_sdi>
 8011414:	4603      	mov	r3, r0
 8011416:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 801141a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801141e:	2b00      	cmp	r3, #0
 8011420:	d116      	bne.n	8011450 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8011422:	f107 0310 	add.w	r3, r7, #16
 8011426:	2100      	movs	r1, #0
 8011428:	4618      	mov	r0, r3
 801142a:	f7fd fec3 	bl	800f1b4 <dir_read>
 801142e:	4603      	mov	r3, r0
 8011430:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011434:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011438:	2b00      	cmp	r3, #0
 801143a:	d102      	bne.n	8011442 <f_unlink+0x118>
 801143c:	2307      	movs	r3, #7
 801143e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011442:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011446:	2b04      	cmp	r3, #4
 8011448:	d102      	bne.n	8011450 <f_unlink+0x126>
 801144a:	2300      	movs	r3, #0
 801144c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8011450:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011454:	2b00      	cmp	r3, #0
 8011456:	d123      	bne.n	80114a0 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8011458:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801145c:	4618      	mov	r0, r3
 801145e:	f7fe f909 	bl	800f674 <dir_remove>
 8011462:	4603      	mov	r3, r0
 8011464:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8011468:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801146c:	2b00      	cmp	r3, #0
 801146e:	d10c      	bne.n	801148a <f_unlink+0x160>
 8011470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011472:	2b00      	cmp	r3, #0
 8011474:	d009      	beq.n	801148a <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8011476:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801147a:	2200      	movs	r2, #0
 801147c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801147e:	4618      	mov	r0, r3
 8011480:	f7fd f992 	bl	800e7a8 <remove_chain>
 8011484:	4603      	mov	r3, r0
 8011486:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801148a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801148e:	2b00      	cmp	r3, #0
 8011490:	d106      	bne.n	80114a0 <f_unlink+0x176>
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	4618      	mov	r0, r3
 8011496:	f7fc ff11 	bl	800e2bc <sync_fs>
 801149a:	4603      	mov	r3, r0
 801149c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80114a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3780      	adds	r7, #128	; 0x80
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}

080114ac <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b098      	sub	sp, #96	; 0x60
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80114b4:	f107 010c 	add.w	r1, r7, #12
 80114b8:	1d3b      	adds	r3, r7, #4
 80114ba:	2202      	movs	r2, #2
 80114bc:	4618      	mov	r0, r3
 80114be:	f7fe fc57 	bl	800fd70 <find_volume>
 80114c2:	4603      	mov	r3, r0
 80114c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80114cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	f040 80ff 	bne.w	80116d4 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80114d6:	687a      	ldr	r2, [r7, #4]
 80114d8:	f107 0310 	add.w	r3, r7, #16
 80114dc:	4611      	mov	r1, r2
 80114de:	4618      	mov	r0, r3
 80114e0:	f7fe fb16 	bl	800fb10 <follow_path>
 80114e4:	4603      	mov	r3, r0
 80114e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80114ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d102      	bne.n	80114f8 <f_mkdir+0x4c>
 80114f2:	2308      	movs	r3, #8
 80114f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80114f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80114fc:	2b04      	cmp	r3, #4
 80114fe:	d108      	bne.n	8011512 <f_mkdir+0x66>
 8011500:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011504:	f003 0320 	and.w	r3, r3, #32
 8011508:	2b00      	cmp	r3, #0
 801150a:	d002      	beq.n	8011512 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 801150c:	2306      	movs	r3, #6
 801150e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011516:	2b04      	cmp	r3, #4
 8011518:	f040 80dc 	bne.w	80116d4 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801151c:	f107 0310 	add.w	r3, r7, #16
 8011520:	2100      	movs	r1, #0
 8011522:	4618      	mov	r0, r3
 8011524:	f7fd f9a5 	bl	800e872 <create_chain>
 8011528:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	895b      	ldrh	r3, [r3, #10]
 801152e:	461a      	mov	r2, r3
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	899b      	ldrh	r3, [r3, #12]
 8011534:	fb03 f302 	mul.w	r3, r3, r2
 8011538:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801153a:	2300      	movs	r3, #0
 801153c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011542:	2b00      	cmp	r3, #0
 8011544:	d102      	bne.n	801154c <f_mkdir+0xa0>
 8011546:	2307      	movs	r3, #7
 8011548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 801154c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801154e:	2b01      	cmp	r3, #1
 8011550:	d102      	bne.n	8011558 <f_mkdir+0xac>
 8011552:	2302      	movs	r3, #2
 8011554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801155e:	d102      	bne.n	8011566 <f_mkdir+0xba>
 8011560:	2301      	movs	r3, #1
 8011562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801156a:	2b00      	cmp	r3, #0
 801156c:	d106      	bne.n	801157c <f_mkdir+0xd0>
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	4618      	mov	r0, r3
 8011572:	f7fc fe31 	bl	800e1d8 <sync_window>
 8011576:	4603      	mov	r3, r0
 8011578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 801157c:	f7fc f8d2 	bl	800d724 <get_fattime>
 8011580:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011586:	2b00      	cmp	r3, #0
 8011588:	d16c      	bne.n	8011664 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801158e:	4618      	mov	r0, r3
 8011590:	f7fc ff04 	bl	800e39c <clust2sect>
 8011594:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	333c      	adds	r3, #60	; 0x3c
 801159a:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	899b      	ldrh	r3, [r3, #12]
 80115a0:	461a      	mov	r2, r3
 80115a2:	2100      	movs	r1, #0
 80115a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80115a6:	f7fc fc4e 	bl	800de46 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80115aa:	220b      	movs	r2, #11
 80115ac:	2120      	movs	r1, #32
 80115ae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80115b0:	f7fc fc49 	bl	800de46 <mem_set>
					dir[DIR_Name] = '.';
 80115b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115b6:	222e      	movs	r2, #46	; 0x2e
 80115b8:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80115ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115bc:	330b      	adds	r3, #11
 80115be:	2210      	movs	r2, #16
 80115c0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80115c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115c4:	3316      	adds	r3, #22
 80115c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fc fbef 	bl	800ddac <st_dword>
					st_clust(fs, dir, dcl);
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80115d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7fd fbe1 	bl	800ed9c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80115da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115dc:	3320      	adds	r3, #32
 80115de:	2220      	movs	r2, #32
 80115e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80115e2:	4618      	mov	r0, r3
 80115e4:	f7fc fc0e 	bl	800de04 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80115e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115ea:	3321      	adds	r3, #33	; 0x21
 80115ec:	222e      	movs	r2, #46	; 0x2e
 80115ee:	701a      	strb	r2, [r3, #0]
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	2b03      	cmp	r3, #3
 80115fa:	d106      	bne.n	801160a <f_mkdir+0x15e>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011600:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011602:	429a      	cmp	r2, r3
 8011604:	d101      	bne.n	801160a <f_mkdir+0x15e>
 8011606:	2300      	movs	r3, #0
 8011608:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 801160a:	68f8      	ldr	r0, [r7, #12]
 801160c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801160e:	3320      	adds	r3, #32
 8011610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011612:	4619      	mov	r1, r3
 8011614:	f7fd fbc2 	bl	800ed9c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	895b      	ldrh	r3, [r3, #10]
 801161c:	65bb      	str	r3, [r7, #88]	; 0x58
 801161e:	e01c      	b.n	801165a <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8011620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011622:	1c5a      	adds	r2, r3, #1
 8011624:	657a      	str	r2, [r7, #84]	; 0x54
 8011626:	68fa      	ldr	r2, [r7, #12]
 8011628:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	2201      	movs	r2, #1
 801162e:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	4618      	mov	r0, r3
 8011634:	f7fc fdd0 	bl	800e1d8 <sync_window>
 8011638:	4603      	mov	r3, r0
 801163a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 801163e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011642:	2b00      	cmp	r3, #0
 8011644:	d10d      	bne.n	8011662 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	899b      	ldrh	r3, [r3, #12]
 801164a:	461a      	mov	r2, r3
 801164c:	2100      	movs	r1, #0
 801164e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011650:	f7fc fbf9 	bl	800de46 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011654:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011656:	3b01      	subs	r3, #1
 8011658:	65bb      	str	r3, [r7, #88]	; 0x58
 801165a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801165c:	2b00      	cmp	r3, #0
 801165e:	d1df      	bne.n	8011620 <f_mkdir+0x174>
 8011660:	e000      	b.n	8011664 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8011662:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011664:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011668:	2b00      	cmp	r3, #0
 801166a:	d107      	bne.n	801167c <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801166c:	f107 0310 	add.w	r3, r7, #16
 8011670:	4618      	mov	r0, r3
 8011672:	f7fd ff07 	bl	800f484 <dir_register>
 8011676:	4603      	mov	r3, r0
 8011678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 801167c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011680:	2b00      	cmp	r3, #0
 8011682:	d120      	bne.n	80116c6 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011686:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801168a:	3316      	adds	r3, #22
 801168c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801168e:	4618      	mov	r0, r3
 8011690:	f7fc fb8c 	bl	800ddac <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011698:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801169a:	4618      	mov	r0, r3
 801169c:	f7fd fb7e 	bl	800ed9c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80116a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116a2:	330b      	adds	r3, #11
 80116a4:	2210      	movs	r2, #16
 80116a6:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2201      	movs	r2, #1
 80116ac:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80116ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10e      	bne.n	80116d4 <f_mkdir+0x228>
					res = sync_fs(fs);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fc fdff 	bl	800e2bc <sync_fs>
 80116be:	4603      	mov	r3, r0
 80116c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80116c4:	e006      	b.n	80116d4 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80116c6:	f107 0310 	add.w	r3, r7, #16
 80116ca:	2200      	movs	r2, #0
 80116cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fd f86a 	bl	800e7a8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80116d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80116d8:	4618      	mov	r0, r3
 80116da:	3760      	adds	r7, #96	; 0x60
 80116dc:	46bd      	mov	sp, r7
 80116de:	bd80      	pop	{r7, pc}

080116e0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	60b9      	str	r1, [r7, #8]
 80116ea:	607a      	str	r2, [r7, #4]
	int n = 0;
 80116ec:	2300      	movs	r3, #0
 80116ee:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80116f0:	68fb      	ldr	r3, [r7, #12]
 80116f2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80116f4:	e01b      	b.n	801172e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80116f6:	f107 0310 	add.w	r3, r7, #16
 80116fa:	f107 0114 	add.w	r1, r7, #20
 80116fe:	2201      	movs	r2, #1
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff f809 	bl	8010718 <f_read>
		if (rc != 1) break;
 8011706:	693b      	ldr	r3, [r7, #16]
 8011708:	2b01      	cmp	r3, #1
 801170a:	d116      	bne.n	801173a <f_gets+0x5a>
		c = s[0];
 801170c:	7d3b      	ldrb	r3, [r7, #20]
 801170e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8011710:	7dfb      	ldrb	r3, [r7, #23]
 8011712:	2b0d      	cmp	r3, #13
 8011714:	d100      	bne.n	8011718 <f_gets+0x38>
 8011716:	e00a      	b.n	801172e <f_gets+0x4e>
		*p++ = c;
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	61ba      	str	r2, [r7, #24]
 801171e:	7dfa      	ldrb	r2, [r7, #23]
 8011720:	701a      	strb	r2, [r3, #0]
		n++;
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	3301      	adds	r3, #1
 8011726:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8011728:	7dfb      	ldrb	r3, [r7, #23]
 801172a:	2b0a      	cmp	r3, #10
 801172c:	d007      	beq.n	801173e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	3b01      	subs	r3, #1
 8011732:	69fa      	ldr	r2, [r7, #28]
 8011734:	429a      	cmp	r2, r3
 8011736:	dbde      	blt.n	80116f6 <f_gets+0x16>
 8011738:	e002      	b.n	8011740 <f_gets+0x60>
		if (rc != 1) break;
 801173a:	bf00      	nop
 801173c:	e000      	b.n	8011740 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801173e:	bf00      	nop
	}
	*p = 0;
 8011740:	69bb      	ldr	r3, [r7, #24]
 8011742:	2200      	movs	r2, #0
 8011744:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d001      	beq.n	8011750 <f_gets+0x70>
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	e000      	b.n	8011752 <f_gets+0x72>
 8011750:	2300      	movs	r3, #0
}
 8011752:	4618      	mov	r0, r3
 8011754:	3720      	adds	r7, #32
 8011756:	46bd      	mov	sp, r7
 8011758:	bd80      	pop	{r7, pc}
	...

0801175c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801175c:	b480      	push	{r7}
 801175e:	b087      	sub	sp, #28
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	60b9      	str	r1, [r7, #8]
 8011766:	4613      	mov	r3, r2
 8011768:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801176a:	2301      	movs	r3, #1
 801176c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011772:	4b1f      	ldr	r3, [pc, #124]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 8011774:	7a5b      	ldrb	r3, [r3, #9]
 8011776:	b2db      	uxtb	r3, r3
 8011778:	2b00      	cmp	r3, #0
 801177a:	d131      	bne.n	80117e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801177c:	4b1c      	ldr	r3, [pc, #112]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 801177e:	7a5b      	ldrb	r3, [r3, #9]
 8011780:	b2db      	uxtb	r3, r3
 8011782:	461a      	mov	r2, r3
 8011784:	4b1a      	ldr	r3, [pc, #104]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 8011786:	2100      	movs	r1, #0
 8011788:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801178a:	4b19      	ldr	r3, [pc, #100]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 801178c:	7a5b      	ldrb	r3, [r3, #9]
 801178e:	b2db      	uxtb	r3, r3
 8011790:	4a17      	ldr	r2, [pc, #92]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 8011792:	009b      	lsls	r3, r3, #2
 8011794:	4413      	add	r3, r2
 8011796:	68fa      	ldr	r2, [r7, #12]
 8011798:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801179a:	4b15      	ldr	r3, [pc, #84]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 801179c:	7a5b      	ldrb	r3, [r3, #9]
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	461a      	mov	r2, r3
 80117a2:	4b13      	ldr	r3, [pc, #76]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 80117a4:	4413      	add	r3, r2
 80117a6:	79fa      	ldrb	r2, [r7, #7]
 80117a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80117aa:	4b11      	ldr	r3, [pc, #68]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 80117ac:	7a5b      	ldrb	r3, [r3, #9]
 80117ae:	b2db      	uxtb	r3, r3
 80117b0:	1c5a      	adds	r2, r3, #1
 80117b2:	b2d1      	uxtb	r1, r2
 80117b4:	4a0e      	ldr	r2, [pc, #56]	; (80117f0 <FATFS_LinkDriverEx+0x94>)
 80117b6:	7251      	strb	r1, [r2, #9]
 80117b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80117ba:	7dbb      	ldrb	r3, [r7, #22]
 80117bc:	3330      	adds	r3, #48	; 0x30
 80117be:	b2da      	uxtb	r2, r3
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	3301      	adds	r3, #1
 80117c8:	223a      	movs	r2, #58	; 0x3a
 80117ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80117cc:	68bb      	ldr	r3, [r7, #8]
 80117ce:	3302      	adds	r3, #2
 80117d0:	222f      	movs	r2, #47	; 0x2f
 80117d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	3303      	adds	r3, #3
 80117d8:	2200      	movs	r2, #0
 80117da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80117dc:	2300      	movs	r3, #0
 80117de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80117e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	371c      	adds	r7, #28
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop
 80117f0:	2001f520 	.word	0x2001f520

080117f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
 80117fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80117fe:	2200      	movs	r2, #0
 8011800:	6839      	ldr	r1, [r7, #0]
 8011802:	6878      	ldr	r0, [r7, #4]
 8011804:	f7ff ffaa 	bl	801175c <FATFS_LinkDriverEx>
 8011808:	4603      	mov	r3, r0
}
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
	...

08011814 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
 801181a:	4603      	mov	r3, r0
 801181c:	6039      	str	r1, [r7, #0]
 801181e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8011820:	88fb      	ldrh	r3, [r7, #6]
 8011822:	2b7f      	cmp	r3, #127	; 0x7f
 8011824:	d802      	bhi.n	801182c <ff_convert+0x18>
		c = chr;
 8011826:	88fb      	ldrh	r3, [r7, #6]
 8011828:	81fb      	strh	r3, [r7, #14]
 801182a:	e025      	b.n	8011878 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801182c:	683b      	ldr	r3, [r7, #0]
 801182e:	2b00      	cmp	r3, #0
 8011830:	d00b      	beq.n	801184a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011832:	88fb      	ldrh	r3, [r7, #6]
 8011834:	2bff      	cmp	r3, #255	; 0xff
 8011836:	d805      	bhi.n	8011844 <ff_convert+0x30>
 8011838:	88fb      	ldrh	r3, [r7, #6]
 801183a:	3b80      	subs	r3, #128	; 0x80
 801183c:	4a12      	ldr	r2, [pc, #72]	; (8011888 <ff_convert+0x74>)
 801183e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011842:	e000      	b.n	8011846 <ff_convert+0x32>
 8011844:	2300      	movs	r3, #0
 8011846:	81fb      	strh	r3, [r7, #14]
 8011848:	e016      	b.n	8011878 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801184a:	2300      	movs	r3, #0
 801184c:	81fb      	strh	r3, [r7, #14]
 801184e:	e009      	b.n	8011864 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011850:	89fb      	ldrh	r3, [r7, #14]
 8011852:	4a0d      	ldr	r2, [pc, #52]	; (8011888 <ff_convert+0x74>)
 8011854:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011858:	88fa      	ldrh	r2, [r7, #6]
 801185a:	429a      	cmp	r2, r3
 801185c:	d006      	beq.n	801186c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801185e:	89fb      	ldrh	r3, [r7, #14]
 8011860:	3301      	adds	r3, #1
 8011862:	81fb      	strh	r3, [r7, #14]
 8011864:	89fb      	ldrh	r3, [r7, #14]
 8011866:	2b7f      	cmp	r3, #127	; 0x7f
 8011868:	d9f2      	bls.n	8011850 <ff_convert+0x3c>
 801186a:	e000      	b.n	801186e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801186c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801186e:	89fb      	ldrh	r3, [r7, #14]
 8011870:	3380      	adds	r3, #128	; 0x80
 8011872:	b29b      	uxth	r3, r3
 8011874:	b2db      	uxtb	r3, r3
 8011876:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011878:	89fb      	ldrh	r3, [r7, #14]
}
 801187a:	4618      	mov	r0, r3
 801187c:	3714      	adds	r7, #20
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr
 8011886:	bf00      	nop
 8011888:	08017dec 	.word	0x08017dec

0801188c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801188c:	b480      	push	{r7}
 801188e:	b087      	sub	sp, #28
 8011890:	af00      	add	r7, sp, #0
 8011892:	4603      	mov	r3, r0
 8011894:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011896:	88fb      	ldrh	r3, [r7, #6]
 8011898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801189c:	d201      	bcs.n	80118a2 <ff_wtoupper+0x16>
 801189e:	4b3e      	ldr	r3, [pc, #248]	; (8011998 <ff_wtoupper+0x10c>)
 80118a0:	e000      	b.n	80118a4 <ff_wtoupper+0x18>
 80118a2:	4b3e      	ldr	r3, [pc, #248]	; (801199c <ff_wtoupper+0x110>)
 80118a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	1c9a      	adds	r2, r3, #2
 80118aa:	617a      	str	r2, [r7, #20]
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80118b0:	8a7b      	ldrh	r3, [r7, #18]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d068      	beq.n	8011988 <ff_wtoupper+0xfc>
 80118b6:	88fa      	ldrh	r2, [r7, #6]
 80118b8:	8a7b      	ldrh	r3, [r7, #18]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d364      	bcc.n	8011988 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80118be:	697b      	ldr	r3, [r7, #20]
 80118c0:	1c9a      	adds	r2, r3, #2
 80118c2:	617a      	str	r2, [r7, #20]
 80118c4:	881b      	ldrh	r3, [r3, #0]
 80118c6:	823b      	strh	r3, [r7, #16]
 80118c8:	8a3b      	ldrh	r3, [r7, #16]
 80118ca:	0a1b      	lsrs	r3, r3, #8
 80118cc:	81fb      	strh	r3, [r7, #14]
 80118ce:	8a3b      	ldrh	r3, [r7, #16]
 80118d0:	b2db      	uxtb	r3, r3
 80118d2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80118d4:	88fa      	ldrh	r2, [r7, #6]
 80118d6:	8a79      	ldrh	r1, [r7, #18]
 80118d8:	8a3b      	ldrh	r3, [r7, #16]
 80118da:	440b      	add	r3, r1
 80118dc:	429a      	cmp	r2, r3
 80118de:	da49      	bge.n	8011974 <ff_wtoupper+0xe8>
			switch (cmd) {
 80118e0:	89fb      	ldrh	r3, [r7, #14]
 80118e2:	2b08      	cmp	r3, #8
 80118e4:	d84f      	bhi.n	8011986 <ff_wtoupper+0xfa>
 80118e6:	a201      	add	r2, pc, #4	; (adr r2, 80118ec <ff_wtoupper+0x60>)
 80118e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ec:	08011911 	.word	0x08011911
 80118f0:	08011923 	.word	0x08011923
 80118f4:	08011939 	.word	0x08011939
 80118f8:	08011941 	.word	0x08011941
 80118fc:	08011949 	.word	0x08011949
 8011900:	08011951 	.word	0x08011951
 8011904:	08011959 	.word	0x08011959
 8011908:	08011961 	.word	0x08011961
 801190c:	08011969 	.word	0x08011969
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011910:	88fa      	ldrh	r2, [r7, #6]
 8011912:	8a7b      	ldrh	r3, [r7, #18]
 8011914:	1ad3      	subs	r3, r2, r3
 8011916:	005b      	lsls	r3, r3, #1
 8011918:	697a      	ldr	r2, [r7, #20]
 801191a:	4413      	add	r3, r2
 801191c:	881b      	ldrh	r3, [r3, #0]
 801191e:	80fb      	strh	r3, [r7, #6]
 8011920:	e027      	b.n	8011972 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011922:	88fa      	ldrh	r2, [r7, #6]
 8011924:	8a7b      	ldrh	r3, [r7, #18]
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	b29b      	uxth	r3, r3
 801192a:	f003 0301 	and.w	r3, r3, #1
 801192e:	b29b      	uxth	r3, r3
 8011930:	88fa      	ldrh	r2, [r7, #6]
 8011932:	1ad3      	subs	r3, r2, r3
 8011934:	80fb      	strh	r3, [r7, #6]
 8011936:	e01c      	b.n	8011972 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8011938:	88fb      	ldrh	r3, [r7, #6]
 801193a:	3b10      	subs	r3, #16
 801193c:	80fb      	strh	r3, [r7, #6]
 801193e:	e018      	b.n	8011972 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011940:	88fb      	ldrh	r3, [r7, #6]
 8011942:	3b20      	subs	r3, #32
 8011944:	80fb      	strh	r3, [r7, #6]
 8011946:	e014      	b.n	8011972 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8011948:	88fb      	ldrh	r3, [r7, #6]
 801194a:	3b30      	subs	r3, #48	; 0x30
 801194c:	80fb      	strh	r3, [r7, #6]
 801194e:	e010      	b.n	8011972 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011950:	88fb      	ldrh	r3, [r7, #6]
 8011952:	3b1a      	subs	r3, #26
 8011954:	80fb      	strh	r3, [r7, #6]
 8011956:	e00c      	b.n	8011972 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011958:	88fb      	ldrh	r3, [r7, #6]
 801195a:	3308      	adds	r3, #8
 801195c:	80fb      	strh	r3, [r7, #6]
 801195e:	e008      	b.n	8011972 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011960:	88fb      	ldrh	r3, [r7, #6]
 8011962:	3b50      	subs	r3, #80	; 0x50
 8011964:	80fb      	strh	r3, [r7, #6]
 8011966:	e004      	b.n	8011972 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011968:	88fb      	ldrh	r3, [r7, #6]
 801196a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801196e:	80fb      	strh	r3, [r7, #6]
 8011970:	bf00      	nop
			}
			break;
 8011972:	e008      	b.n	8011986 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011974:	89fb      	ldrh	r3, [r7, #14]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d195      	bne.n	80118a6 <ff_wtoupper+0x1a>
 801197a:	8a3b      	ldrh	r3, [r7, #16]
 801197c:	005b      	lsls	r3, r3, #1
 801197e:	697a      	ldr	r2, [r7, #20]
 8011980:	4413      	add	r3, r2
 8011982:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011984:	e78f      	b.n	80118a6 <ff_wtoupper+0x1a>
			break;
 8011986:	bf00      	nop
	}

	return chr;
 8011988:	88fb      	ldrh	r3, [r7, #6]
}
 801198a:	4618      	mov	r0, r3
 801198c:	371c      	adds	r7, #28
 801198e:	46bd      	mov	sp, r7
 8011990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011994:	4770      	bx	lr
 8011996:	bf00      	nop
 8011998:	08017eec 	.word	0x08017eec
 801199c:	080180e0 	.word	0x080180e0

080119a0 <cos>:
 80119a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80119a2:	ec51 0b10 	vmov	r0, r1, d0
 80119a6:	4a1e      	ldr	r2, [pc, #120]	; (8011a20 <cos+0x80>)
 80119a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80119ac:	4293      	cmp	r3, r2
 80119ae:	dc06      	bgt.n	80119be <cos+0x1e>
 80119b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011a18 <cos+0x78>
 80119b4:	f000 fb80 	bl	80120b8 <__kernel_cos>
 80119b8:	ec51 0b10 	vmov	r0, r1, d0
 80119bc:	e007      	b.n	80119ce <cos+0x2e>
 80119be:	4a19      	ldr	r2, [pc, #100]	; (8011a24 <cos+0x84>)
 80119c0:	4293      	cmp	r3, r2
 80119c2:	dd09      	ble.n	80119d8 <cos+0x38>
 80119c4:	ee10 2a10 	vmov	r2, s0
 80119c8:	460b      	mov	r3, r1
 80119ca:	f7ee fc75 	bl	80002b8 <__aeabi_dsub>
 80119ce:	ec41 0b10 	vmov	d0, r0, r1
 80119d2:	b005      	add	sp, #20
 80119d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80119d8:	4668      	mov	r0, sp
 80119da:	f000 f8c9 	bl	8011b70 <__ieee754_rem_pio2>
 80119de:	f000 0003 	and.w	r0, r0, #3
 80119e2:	2801      	cmp	r0, #1
 80119e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80119e8:	ed9d 0b00 	vldr	d0, [sp]
 80119ec:	d007      	beq.n	80119fe <cos+0x5e>
 80119ee:	2802      	cmp	r0, #2
 80119f0:	d00e      	beq.n	8011a10 <cos+0x70>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d0de      	beq.n	80119b4 <cos+0x14>
 80119f6:	2001      	movs	r0, #1
 80119f8:	f000 ff66 	bl	80128c8 <__kernel_sin>
 80119fc:	e7dc      	b.n	80119b8 <cos+0x18>
 80119fe:	f000 ff63 	bl	80128c8 <__kernel_sin>
 8011a02:	ec53 2b10 	vmov	r2, r3, d0
 8011a06:	ee10 0a10 	vmov	r0, s0
 8011a0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011a0e:	e7de      	b.n	80119ce <cos+0x2e>
 8011a10:	f000 fb52 	bl	80120b8 <__kernel_cos>
 8011a14:	e7f5      	b.n	8011a02 <cos+0x62>
 8011a16:	bf00      	nop
	...
 8011a20:	3fe921fb 	.word	0x3fe921fb
 8011a24:	7fefffff 	.word	0x7fefffff

08011a28 <sin>:
 8011a28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011a2a:	ec51 0b10 	vmov	r0, r1, d0
 8011a2e:	4a20      	ldr	r2, [pc, #128]	; (8011ab0 <sin+0x88>)
 8011a30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011a34:	4293      	cmp	r3, r2
 8011a36:	dc07      	bgt.n	8011a48 <sin+0x20>
 8011a38:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011aa8 <sin+0x80>
 8011a3c:	2000      	movs	r0, #0
 8011a3e:	f000 ff43 	bl	80128c8 <__kernel_sin>
 8011a42:	ec51 0b10 	vmov	r0, r1, d0
 8011a46:	e007      	b.n	8011a58 <sin+0x30>
 8011a48:	4a1a      	ldr	r2, [pc, #104]	; (8011ab4 <sin+0x8c>)
 8011a4a:	4293      	cmp	r3, r2
 8011a4c:	dd09      	ble.n	8011a62 <sin+0x3a>
 8011a4e:	ee10 2a10 	vmov	r2, s0
 8011a52:	460b      	mov	r3, r1
 8011a54:	f7ee fc30 	bl	80002b8 <__aeabi_dsub>
 8011a58:	ec41 0b10 	vmov	d0, r0, r1
 8011a5c:	b005      	add	sp, #20
 8011a5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011a62:	4668      	mov	r0, sp
 8011a64:	f000 f884 	bl	8011b70 <__ieee754_rem_pio2>
 8011a68:	f000 0003 	and.w	r0, r0, #3
 8011a6c:	2801      	cmp	r0, #1
 8011a6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011a72:	ed9d 0b00 	vldr	d0, [sp]
 8011a76:	d004      	beq.n	8011a82 <sin+0x5a>
 8011a78:	2802      	cmp	r0, #2
 8011a7a:	d005      	beq.n	8011a88 <sin+0x60>
 8011a7c:	b970      	cbnz	r0, 8011a9c <sin+0x74>
 8011a7e:	2001      	movs	r0, #1
 8011a80:	e7dd      	b.n	8011a3e <sin+0x16>
 8011a82:	f000 fb19 	bl	80120b8 <__kernel_cos>
 8011a86:	e7dc      	b.n	8011a42 <sin+0x1a>
 8011a88:	2001      	movs	r0, #1
 8011a8a:	f000 ff1d 	bl	80128c8 <__kernel_sin>
 8011a8e:	ec53 2b10 	vmov	r2, r3, d0
 8011a92:	ee10 0a10 	vmov	r0, s0
 8011a96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011a9a:	e7dd      	b.n	8011a58 <sin+0x30>
 8011a9c:	f000 fb0c 	bl	80120b8 <__kernel_cos>
 8011aa0:	e7f5      	b.n	8011a8e <sin+0x66>
 8011aa2:	bf00      	nop
 8011aa4:	f3af 8000 	nop.w
	...
 8011ab0:	3fe921fb 	.word	0x3fe921fb
 8011ab4:	7fefffff 	.word	0x7fefffff

08011ab8 <sqrt>:
 8011ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011abc:	ed2d 8b02 	vpush	{d8}
 8011ac0:	b08b      	sub	sp, #44	; 0x2c
 8011ac2:	ec55 4b10 	vmov	r4, r5, d0
 8011ac6:	f000 fa45 	bl	8011f54 <__ieee754_sqrt>
 8011aca:	4b26      	ldr	r3, [pc, #152]	; (8011b64 <sqrt+0xac>)
 8011acc:	eeb0 8a40 	vmov.f32	s16, s0
 8011ad0:	eef0 8a60 	vmov.f32	s17, s1
 8011ad4:	f993 6000 	ldrsb.w	r6, [r3]
 8011ad8:	1c73      	adds	r3, r6, #1
 8011ada:	d02a      	beq.n	8011b32 <sqrt+0x7a>
 8011adc:	4622      	mov	r2, r4
 8011ade:	462b      	mov	r3, r5
 8011ae0:	4620      	mov	r0, r4
 8011ae2:	4629      	mov	r1, r5
 8011ae4:	f7ef f83a 	bl	8000b5c <__aeabi_dcmpun>
 8011ae8:	4607      	mov	r7, r0
 8011aea:	bb10      	cbnz	r0, 8011b32 <sqrt+0x7a>
 8011aec:	f04f 0800 	mov.w	r8, #0
 8011af0:	f04f 0900 	mov.w	r9, #0
 8011af4:	4642      	mov	r2, r8
 8011af6:	464b      	mov	r3, r9
 8011af8:	4620      	mov	r0, r4
 8011afa:	4629      	mov	r1, r5
 8011afc:	f7ef f806 	bl	8000b0c <__aeabi_dcmplt>
 8011b00:	b1b8      	cbz	r0, 8011b32 <sqrt+0x7a>
 8011b02:	2301      	movs	r3, #1
 8011b04:	9300      	str	r3, [sp, #0]
 8011b06:	4b18      	ldr	r3, [pc, #96]	; (8011b68 <sqrt+0xb0>)
 8011b08:	9301      	str	r3, [sp, #4]
 8011b0a:	9708      	str	r7, [sp, #32]
 8011b0c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011b10:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011b14:	b9b6      	cbnz	r6, 8011b44 <sqrt+0x8c>
 8011b16:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011b1a:	4668      	mov	r0, sp
 8011b1c:	f001 f81c 	bl	8012b58 <matherr>
 8011b20:	b1d0      	cbz	r0, 8011b58 <sqrt+0xa0>
 8011b22:	9b08      	ldr	r3, [sp, #32]
 8011b24:	b11b      	cbz	r3, 8011b2e <sqrt+0x76>
 8011b26:	f001 f8a1 	bl	8012c6c <__errno>
 8011b2a:	9b08      	ldr	r3, [sp, #32]
 8011b2c:	6003      	str	r3, [r0, #0]
 8011b2e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011b32:	eeb0 0a48 	vmov.f32	s0, s16
 8011b36:	eef0 0a68 	vmov.f32	s1, s17
 8011b3a:	b00b      	add	sp, #44	; 0x2c
 8011b3c:	ecbd 8b02 	vpop	{d8}
 8011b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b44:	4642      	mov	r2, r8
 8011b46:	464b      	mov	r3, r9
 8011b48:	4640      	mov	r0, r8
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	f7ee fe96 	bl	800087c <__aeabi_ddiv>
 8011b50:	2e02      	cmp	r6, #2
 8011b52:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011b56:	d1e0      	bne.n	8011b1a <sqrt+0x62>
 8011b58:	f001 f888 	bl	8012c6c <__errno>
 8011b5c:	2321      	movs	r3, #33	; 0x21
 8011b5e:	6003      	str	r3, [r0, #0]
 8011b60:	e7df      	b.n	8011b22 <sqrt+0x6a>
 8011b62:	bf00      	nop
 8011b64:	2000000a 	.word	0x2000000a
 8011b68:	0801819c 	.word	0x0801819c
 8011b6c:	00000000 	.word	0x00000000

08011b70 <__ieee754_rem_pio2>:
 8011b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b74:	ec57 6b10 	vmov	r6, r7, d0
 8011b78:	4bc3      	ldr	r3, [pc, #780]	; (8011e88 <__ieee754_rem_pio2+0x318>)
 8011b7a:	b08d      	sub	sp, #52	; 0x34
 8011b7c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011b80:	4598      	cmp	r8, r3
 8011b82:	4604      	mov	r4, r0
 8011b84:	9704      	str	r7, [sp, #16]
 8011b86:	dc07      	bgt.n	8011b98 <__ieee754_rem_pio2+0x28>
 8011b88:	2200      	movs	r2, #0
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	ed84 0b00 	vstr	d0, [r4]
 8011b90:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011b94:	2500      	movs	r5, #0
 8011b96:	e027      	b.n	8011be8 <__ieee754_rem_pio2+0x78>
 8011b98:	4bbc      	ldr	r3, [pc, #752]	; (8011e8c <__ieee754_rem_pio2+0x31c>)
 8011b9a:	4598      	cmp	r8, r3
 8011b9c:	dc75      	bgt.n	8011c8a <__ieee754_rem_pio2+0x11a>
 8011b9e:	9b04      	ldr	r3, [sp, #16]
 8011ba0:	4dbb      	ldr	r5, [pc, #748]	; (8011e90 <__ieee754_rem_pio2+0x320>)
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	ee10 0a10 	vmov	r0, s0
 8011ba8:	a3a9      	add	r3, pc, #676	; (adr r3, 8011e50 <__ieee754_rem_pio2+0x2e0>)
 8011baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bae:	4639      	mov	r1, r7
 8011bb0:	dd36      	ble.n	8011c20 <__ieee754_rem_pio2+0xb0>
 8011bb2:	f7ee fb81 	bl	80002b8 <__aeabi_dsub>
 8011bb6:	45a8      	cmp	r8, r5
 8011bb8:	4606      	mov	r6, r0
 8011bba:	460f      	mov	r7, r1
 8011bbc:	d018      	beq.n	8011bf0 <__ieee754_rem_pio2+0x80>
 8011bbe:	a3a6      	add	r3, pc, #664	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x2e8>)
 8011bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bc4:	f7ee fb78 	bl	80002b8 <__aeabi_dsub>
 8011bc8:	4602      	mov	r2, r0
 8011bca:	460b      	mov	r3, r1
 8011bcc:	e9c4 2300 	strd	r2, r3, [r4]
 8011bd0:	4630      	mov	r0, r6
 8011bd2:	4639      	mov	r1, r7
 8011bd4:	f7ee fb70 	bl	80002b8 <__aeabi_dsub>
 8011bd8:	a39f      	add	r3, pc, #636	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x2e8>)
 8011bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bde:	f7ee fb6b 	bl	80002b8 <__aeabi_dsub>
 8011be2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011be6:	2501      	movs	r5, #1
 8011be8:	4628      	mov	r0, r5
 8011bea:	b00d      	add	sp, #52	; 0x34
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf0:	a39b      	add	r3, pc, #620	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x2f0>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	f7ee fb5f 	bl	80002b8 <__aeabi_dsub>
 8011bfa:	a39b      	add	r3, pc, #620	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x2f8>)
 8011bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c00:	4606      	mov	r6, r0
 8011c02:	460f      	mov	r7, r1
 8011c04:	f7ee fb58 	bl	80002b8 <__aeabi_dsub>
 8011c08:	4602      	mov	r2, r0
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	e9c4 2300 	strd	r2, r3, [r4]
 8011c10:	4630      	mov	r0, r6
 8011c12:	4639      	mov	r1, r7
 8011c14:	f7ee fb50 	bl	80002b8 <__aeabi_dsub>
 8011c18:	a393      	add	r3, pc, #588	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x2f8>)
 8011c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1e:	e7de      	b.n	8011bde <__ieee754_rem_pio2+0x6e>
 8011c20:	f7ee fb4c 	bl	80002bc <__adddf3>
 8011c24:	45a8      	cmp	r8, r5
 8011c26:	4606      	mov	r6, r0
 8011c28:	460f      	mov	r7, r1
 8011c2a:	d016      	beq.n	8011c5a <__ieee754_rem_pio2+0xea>
 8011c2c:	a38a      	add	r3, pc, #552	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x2e8>)
 8011c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c32:	f7ee fb43 	bl	80002bc <__adddf3>
 8011c36:	4602      	mov	r2, r0
 8011c38:	460b      	mov	r3, r1
 8011c3a:	e9c4 2300 	strd	r2, r3, [r4]
 8011c3e:	4630      	mov	r0, r6
 8011c40:	4639      	mov	r1, r7
 8011c42:	f7ee fb39 	bl	80002b8 <__aeabi_dsub>
 8011c46:	a384      	add	r3, pc, #528	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x2e8>)
 8011c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4c:	f7ee fb36 	bl	80002bc <__adddf3>
 8011c50:	f04f 35ff 	mov.w	r5, #4294967295
 8011c54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c58:	e7c6      	b.n	8011be8 <__ieee754_rem_pio2+0x78>
 8011c5a:	a381      	add	r3, pc, #516	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x2f0>)
 8011c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c60:	f7ee fb2c 	bl	80002bc <__adddf3>
 8011c64:	a380      	add	r3, pc, #512	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x2f8>)
 8011c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6a:	4606      	mov	r6, r0
 8011c6c:	460f      	mov	r7, r1
 8011c6e:	f7ee fb25 	bl	80002bc <__adddf3>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	e9c4 2300 	strd	r2, r3, [r4]
 8011c7a:	4630      	mov	r0, r6
 8011c7c:	4639      	mov	r1, r7
 8011c7e:	f7ee fb1b 	bl	80002b8 <__aeabi_dsub>
 8011c82:	a379      	add	r3, pc, #484	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x2f8>)
 8011c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c88:	e7e0      	b.n	8011c4c <__ieee754_rem_pio2+0xdc>
 8011c8a:	4b82      	ldr	r3, [pc, #520]	; (8011e94 <__ieee754_rem_pio2+0x324>)
 8011c8c:	4598      	cmp	r8, r3
 8011c8e:	f300 80d0 	bgt.w	8011e32 <__ieee754_rem_pio2+0x2c2>
 8011c92:	f000 fed3 	bl	8012a3c <fabs>
 8011c96:	ec57 6b10 	vmov	r6, r7, d0
 8011c9a:	ee10 0a10 	vmov	r0, s0
 8011c9e:	a374      	add	r3, pc, #464	; (adr r3, 8011e70 <__ieee754_rem_pio2+0x300>)
 8011ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca4:	4639      	mov	r1, r7
 8011ca6:	f7ee fcbf 	bl	8000628 <__aeabi_dmul>
 8011caa:	2200      	movs	r2, #0
 8011cac:	4b7a      	ldr	r3, [pc, #488]	; (8011e98 <__ieee754_rem_pio2+0x328>)
 8011cae:	f7ee fb05 	bl	80002bc <__adddf3>
 8011cb2:	f7ee ff69 	bl	8000b88 <__aeabi_d2iz>
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	f7ee fc4c 	bl	8000554 <__aeabi_i2d>
 8011cbc:	a364      	add	r3, pc, #400	; (adr r3, 8011e50 <__ieee754_rem_pio2+0x2e0>)
 8011cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cc6:	f7ee fcaf 	bl	8000628 <__aeabi_dmul>
 8011cca:	4602      	mov	r2, r0
 8011ccc:	460b      	mov	r3, r1
 8011cce:	4630      	mov	r0, r6
 8011cd0:	4639      	mov	r1, r7
 8011cd2:	f7ee faf1 	bl	80002b8 <__aeabi_dsub>
 8011cd6:	a360      	add	r3, pc, #384	; (adr r3, 8011e58 <__ieee754_rem_pio2+0x2e8>)
 8011cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cdc:	4682      	mov	sl, r0
 8011cde:	468b      	mov	fp, r1
 8011ce0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ce4:	f7ee fca0 	bl	8000628 <__aeabi_dmul>
 8011ce8:	2d1f      	cmp	r5, #31
 8011cea:	4606      	mov	r6, r0
 8011cec:	460f      	mov	r7, r1
 8011cee:	dc0c      	bgt.n	8011d0a <__ieee754_rem_pio2+0x19a>
 8011cf0:	1e6a      	subs	r2, r5, #1
 8011cf2:	4b6a      	ldr	r3, [pc, #424]	; (8011e9c <__ieee754_rem_pio2+0x32c>)
 8011cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cf8:	4543      	cmp	r3, r8
 8011cfa:	d006      	beq.n	8011d0a <__ieee754_rem_pio2+0x19a>
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	4650      	mov	r0, sl
 8011d02:	4659      	mov	r1, fp
 8011d04:	f7ee fad8 	bl	80002b8 <__aeabi_dsub>
 8011d08:	e00e      	b.n	8011d28 <__ieee754_rem_pio2+0x1b8>
 8011d0a:	4632      	mov	r2, r6
 8011d0c:	463b      	mov	r3, r7
 8011d0e:	4650      	mov	r0, sl
 8011d10:	4659      	mov	r1, fp
 8011d12:	f7ee fad1 	bl	80002b8 <__aeabi_dsub>
 8011d16:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011d1a:	9305      	str	r3, [sp, #20]
 8011d1c:	9a05      	ldr	r2, [sp, #20]
 8011d1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	2b10      	cmp	r3, #16
 8011d26:	dc02      	bgt.n	8011d2e <__ieee754_rem_pio2+0x1be>
 8011d28:	e9c4 0100 	strd	r0, r1, [r4]
 8011d2c:	e039      	b.n	8011da2 <__ieee754_rem_pio2+0x232>
 8011d2e:	a34c      	add	r3, pc, #304	; (adr r3, 8011e60 <__ieee754_rem_pio2+0x2f0>)
 8011d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d38:	f7ee fc76 	bl	8000628 <__aeabi_dmul>
 8011d3c:	4606      	mov	r6, r0
 8011d3e:	460f      	mov	r7, r1
 8011d40:	4602      	mov	r2, r0
 8011d42:	460b      	mov	r3, r1
 8011d44:	4650      	mov	r0, sl
 8011d46:	4659      	mov	r1, fp
 8011d48:	f7ee fab6 	bl	80002b8 <__aeabi_dsub>
 8011d4c:	4602      	mov	r2, r0
 8011d4e:	460b      	mov	r3, r1
 8011d50:	4680      	mov	r8, r0
 8011d52:	4689      	mov	r9, r1
 8011d54:	4650      	mov	r0, sl
 8011d56:	4659      	mov	r1, fp
 8011d58:	f7ee faae 	bl	80002b8 <__aeabi_dsub>
 8011d5c:	4632      	mov	r2, r6
 8011d5e:	463b      	mov	r3, r7
 8011d60:	f7ee faaa 	bl	80002b8 <__aeabi_dsub>
 8011d64:	a340      	add	r3, pc, #256	; (adr r3, 8011e68 <__ieee754_rem_pio2+0x2f8>)
 8011d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6a:	4606      	mov	r6, r0
 8011d6c:	460f      	mov	r7, r1
 8011d6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d72:	f7ee fc59 	bl	8000628 <__aeabi_dmul>
 8011d76:	4632      	mov	r2, r6
 8011d78:	463b      	mov	r3, r7
 8011d7a:	f7ee fa9d 	bl	80002b8 <__aeabi_dsub>
 8011d7e:	4602      	mov	r2, r0
 8011d80:	460b      	mov	r3, r1
 8011d82:	4606      	mov	r6, r0
 8011d84:	460f      	mov	r7, r1
 8011d86:	4640      	mov	r0, r8
 8011d88:	4649      	mov	r1, r9
 8011d8a:	f7ee fa95 	bl	80002b8 <__aeabi_dsub>
 8011d8e:	9a05      	ldr	r2, [sp, #20]
 8011d90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011d94:	1ad3      	subs	r3, r2, r3
 8011d96:	2b31      	cmp	r3, #49	; 0x31
 8011d98:	dc20      	bgt.n	8011ddc <__ieee754_rem_pio2+0x26c>
 8011d9a:	e9c4 0100 	strd	r0, r1, [r4]
 8011d9e:	46c2      	mov	sl, r8
 8011da0:	46cb      	mov	fp, r9
 8011da2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011da6:	4650      	mov	r0, sl
 8011da8:	4642      	mov	r2, r8
 8011daa:	464b      	mov	r3, r9
 8011dac:	4659      	mov	r1, fp
 8011dae:	f7ee fa83 	bl	80002b8 <__aeabi_dsub>
 8011db2:	463b      	mov	r3, r7
 8011db4:	4632      	mov	r2, r6
 8011db6:	f7ee fa7f 	bl	80002b8 <__aeabi_dsub>
 8011dba:	9b04      	ldr	r3, [sp, #16]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011dc2:	f6bf af11 	bge.w	8011be8 <__ieee754_rem_pio2+0x78>
 8011dc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011dca:	6063      	str	r3, [r4, #4]
 8011dcc:	f8c4 8000 	str.w	r8, [r4]
 8011dd0:	60a0      	str	r0, [r4, #8]
 8011dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011dd6:	60e3      	str	r3, [r4, #12]
 8011dd8:	426d      	negs	r5, r5
 8011dda:	e705      	b.n	8011be8 <__ieee754_rem_pio2+0x78>
 8011ddc:	a326      	add	r3, pc, #152	; (adr r3, 8011e78 <__ieee754_rem_pio2+0x308>)
 8011dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011de6:	f7ee fc1f 	bl	8000628 <__aeabi_dmul>
 8011dea:	4606      	mov	r6, r0
 8011dec:	460f      	mov	r7, r1
 8011dee:	4602      	mov	r2, r0
 8011df0:	460b      	mov	r3, r1
 8011df2:	4640      	mov	r0, r8
 8011df4:	4649      	mov	r1, r9
 8011df6:	f7ee fa5f 	bl	80002b8 <__aeabi_dsub>
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	460b      	mov	r3, r1
 8011dfe:	4682      	mov	sl, r0
 8011e00:	468b      	mov	fp, r1
 8011e02:	4640      	mov	r0, r8
 8011e04:	4649      	mov	r1, r9
 8011e06:	f7ee fa57 	bl	80002b8 <__aeabi_dsub>
 8011e0a:	4632      	mov	r2, r6
 8011e0c:	463b      	mov	r3, r7
 8011e0e:	f7ee fa53 	bl	80002b8 <__aeabi_dsub>
 8011e12:	a31b      	add	r3, pc, #108	; (adr r3, 8011e80 <__ieee754_rem_pio2+0x310>)
 8011e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e18:	4606      	mov	r6, r0
 8011e1a:	460f      	mov	r7, r1
 8011e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e20:	f7ee fc02 	bl	8000628 <__aeabi_dmul>
 8011e24:	4632      	mov	r2, r6
 8011e26:	463b      	mov	r3, r7
 8011e28:	f7ee fa46 	bl	80002b8 <__aeabi_dsub>
 8011e2c:	4606      	mov	r6, r0
 8011e2e:	460f      	mov	r7, r1
 8011e30:	e764      	b.n	8011cfc <__ieee754_rem_pio2+0x18c>
 8011e32:	4b1b      	ldr	r3, [pc, #108]	; (8011ea0 <__ieee754_rem_pio2+0x330>)
 8011e34:	4598      	cmp	r8, r3
 8011e36:	dd35      	ble.n	8011ea4 <__ieee754_rem_pio2+0x334>
 8011e38:	ee10 2a10 	vmov	r2, s0
 8011e3c:	463b      	mov	r3, r7
 8011e3e:	4630      	mov	r0, r6
 8011e40:	4639      	mov	r1, r7
 8011e42:	f7ee fa39 	bl	80002b8 <__aeabi_dsub>
 8011e46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e4a:	e9c4 0100 	strd	r0, r1, [r4]
 8011e4e:	e6a1      	b.n	8011b94 <__ieee754_rem_pio2+0x24>
 8011e50:	54400000 	.word	0x54400000
 8011e54:	3ff921fb 	.word	0x3ff921fb
 8011e58:	1a626331 	.word	0x1a626331
 8011e5c:	3dd0b461 	.word	0x3dd0b461
 8011e60:	1a600000 	.word	0x1a600000
 8011e64:	3dd0b461 	.word	0x3dd0b461
 8011e68:	2e037073 	.word	0x2e037073
 8011e6c:	3ba3198a 	.word	0x3ba3198a
 8011e70:	6dc9c883 	.word	0x6dc9c883
 8011e74:	3fe45f30 	.word	0x3fe45f30
 8011e78:	2e000000 	.word	0x2e000000
 8011e7c:	3ba3198a 	.word	0x3ba3198a
 8011e80:	252049c1 	.word	0x252049c1
 8011e84:	397b839a 	.word	0x397b839a
 8011e88:	3fe921fb 	.word	0x3fe921fb
 8011e8c:	4002d97b 	.word	0x4002d97b
 8011e90:	3ff921fb 	.word	0x3ff921fb
 8011e94:	413921fb 	.word	0x413921fb
 8011e98:	3fe00000 	.word	0x3fe00000
 8011e9c:	080181a4 	.word	0x080181a4
 8011ea0:	7fefffff 	.word	0x7fefffff
 8011ea4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011ea8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011eac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011eb0:	4630      	mov	r0, r6
 8011eb2:	460f      	mov	r7, r1
 8011eb4:	f7ee fe68 	bl	8000b88 <__aeabi_d2iz>
 8011eb8:	f7ee fb4c 	bl	8000554 <__aeabi_i2d>
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	4630      	mov	r0, r6
 8011ec2:	4639      	mov	r1, r7
 8011ec4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011ec8:	f7ee f9f6 	bl	80002b8 <__aeabi_dsub>
 8011ecc:	2200      	movs	r2, #0
 8011ece:	4b1f      	ldr	r3, [pc, #124]	; (8011f4c <__ieee754_rem_pio2+0x3dc>)
 8011ed0:	f7ee fbaa 	bl	8000628 <__aeabi_dmul>
 8011ed4:	460f      	mov	r7, r1
 8011ed6:	4606      	mov	r6, r0
 8011ed8:	f7ee fe56 	bl	8000b88 <__aeabi_d2iz>
 8011edc:	f7ee fb3a 	bl	8000554 <__aeabi_i2d>
 8011ee0:	4602      	mov	r2, r0
 8011ee2:	460b      	mov	r3, r1
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011eec:	f7ee f9e4 	bl	80002b8 <__aeabi_dsub>
 8011ef0:	2200      	movs	r2, #0
 8011ef2:	4b16      	ldr	r3, [pc, #88]	; (8011f4c <__ieee754_rem_pio2+0x3dc>)
 8011ef4:	f7ee fb98 	bl	8000628 <__aeabi_dmul>
 8011ef8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011efc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011f00:	f04f 0803 	mov.w	r8, #3
 8011f04:	2600      	movs	r6, #0
 8011f06:	2700      	movs	r7, #0
 8011f08:	4632      	mov	r2, r6
 8011f0a:	463b      	mov	r3, r7
 8011f0c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8011f14:	f7ee fdf0 	bl	8000af8 <__aeabi_dcmpeq>
 8011f18:	b9b0      	cbnz	r0, 8011f48 <__ieee754_rem_pio2+0x3d8>
 8011f1a:	4b0d      	ldr	r3, [pc, #52]	; (8011f50 <__ieee754_rem_pio2+0x3e0>)
 8011f1c:	9301      	str	r3, [sp, #4]
 8011f1e:	2302      	movs	r3, #2
 8011f20:	9300      	str	r3, [sp, #0]
 8011f22:	462a      	mov	r2, r5
 8011f24:	4643      	mov	r3, r8
 8011f26:	4621      	mov	r1, r4
 8011f28:	a806      	add	r0, sp, #24
 8011f2a:	f000 f98d 	bl	8012248 <__kernel_rem_pio2>
 8011f2e:	9b04      	ldr	r3, [sp, #16]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	4605      	mov	r5, r0
 8011f34:	f6bf ae58 	bge.w	8011be8 <__ieee754_rem_pio2+0x78>
 8011f38:	6863      	ldr	r3, [r4, #4]
 8011f3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f3e:	6063      	str	r3, [r4, #4]
 8011f40:	68e3      	ldr	r3, [r4, #12]
 8011f42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011f46:	e746      	b.n	8011dd6 <__ieee754_rem_pio2+0x266>
 8011f48:	46d0      	mov	r8, sl
 8011f4a:	e7dd      	b.n	8011f08 <__ieee754_rem_pio2+0x398>
 8011f4c:	41700000 	.word	0x41700000
 8011f50:	08018224 	.word	0x08018224

08011f54 <__ieee754_sqrt>:
 8011f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f58:	4955      	ldr	r1, [pc, #340]	; (80120b0 <__ieee754_sqrt+0x15c>)
 8011f5a:	ec55 4b10 	vmov	r4, r5, d0
 8011f5e:	43a9      	bics	r1, r5
 8011f60:	462b      	mov	r3, r5
 8011f62:	462a      	mov	r2, r5
 8011f64:	d112      	bne.n	8011f8c <__ieee754_sqrt+0x38>
 8011f66:	ee10 2a10 	vmov	r2, s0
 8011f6a:	ee10 0a10 	vmov	r0, s0
 8011f6e:	4629      	mov	r1, r5
 8011f70:	f7ee fb5a 	bl	8000628 <__aeabi_dmul>
 8011f74:	4602      	mov	r2, r0
 8011f76:	460b      	mov	r3, r1
 8011f78:	4620      	mov	r0, r4
 8011f7a:	4629      	mov	r1, r5
 8011f7c:	f7ee f99e 	bl	80002bc <__adddf3>
 8011f80:	4604      	mov	r4, r0
 8011f82:	460d      	mov	r5, r1
 8011f84:	ec45 4b10 	vmov	d0, r4, r5
 8011f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f8c:	2d00      	cmp	r5, #0
 8011f8e:	ee10 0a10 	vmov	r0, s0
 8011f92:	4621      	mov	r1, r4
 8011f94:	dc0f      	bgt.n	8011fb6 <__ieee754_sqrt+0x62>
 8011f96:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011f9a:	4330      	orrs	r0, r6
 8011f9c:	d0f2      	beq.n	8011f84 <__ieee754_sqrt+0x30>
 8011f9e:	b155      	cbz	r5, 8011fb6 <__ieee754_sqrt+0x62>
 8011fa0:	ee10 2a10 	vmov	r2, s0
 8011fa4:	4620      	mov	r0, r4
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	f7ee f986 	bl	80002b8 <__aeabi_dsub>
 8011fac:	4602      	mov	r2, r0
 8011fae:	460b      	mov	r3, r1
 8011fb0:	f7ee fc64 	bl	800087c <__aeabi_ddiv>
 8011fb4:	e7e4      	b.n	8011f80 <__ieee754_sqrt+0x2c>
 8011fb6:	151b      	asrs	r3, r3, #20
 8011fb8:	d073      	beq.n	80120a2 <__ieee754_sqrt+0x14e>
 8011fba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011fbe:	07dd      	lsls	r5, r3, #31
 8011fc0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011fc4:	bf48      	it	mi
 8011fc6:	0fc8      	lsrmi	r0, r1, #31
 8011fc8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011fcc:	bf44      	itt	mi
 8011fce:	0049      	lslmi	r1, r1, #1
 8011fd0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011fd4:	2500      	movs	r5, #0
 8011fd6:	1058      	asrs	r0, r3, #1
 8011fd8:	0fcb      	lsrs	r3, r1, #31
 8011fda:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011fde:	0049      	lsls	r1, r1, #1
 8011fe0:	2316      	movs	r3, #22
 8011fe2:	462c      	mov	r4, r5
 8011fe4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011fe8:	19a7      	adds	r7, r4, r6
 8011fea:	4297      	cmp	r7, r2
 8011fec:	bfde      	ittt	le
 8011fee:	19bc      	addle	r4, r7, r6
 8011ff0:	1bd2      	suble	r2, r2, r7
 8011ff2:	19ad      	addle	r5, r5, r6
 8011ff4:	0fcf      	lsrs	r7, r1, #31
 8011ff6:	3b01      	subs	r3, #1
 8011ff8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011ffc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012000:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012004:	d1f0      	bne.n	8011fe8 <__ieee754_sqrt+0x94>
 8012006:	f04f 0c20 	mov.w	ip, #32
 801200a:	469e      	mov	lr, r3
 801200c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012010:	42a2      	cmp	r2, r4
 8012012:	eb06 070e 	add.w	r7, r6, lr
 8012016:	dc02      	bgt.n	801201e <__ieee754_sqrt+0xca>
 8012018:	d112      	bne.n	8012040 <__ieee754_sqrt+0xec>
 801201a:	428f      	cmp	r7, r1
 801201c:	d810      	bhi.n	8012040 <__ieee754_sqrt+0xec>
 801201e:	2f00      	cmp	r7, #0
 8012020:	eb07 0e06 	add.w	lr, r7, r6
 8012024:	da42      	bge.n	80120ac <__ieee754_sqrt+0x158>
 8012026:	f1be 0f00 	cmp.w	lr, #0
 801202a:	db3f      	blt.n	80120ac <__ieee754_sqrt+0x158>
 801202c:	f104 0801 	add.w	r8, r4, #1
 8012030:	1b12      	subs	r2, r2, r4
 8012032:	428f      	cmp	r7, r1
 8012034:	bf88      	it	hi
 8012036:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801203a:	1bc9      	subs	r1, r1, r7
 801203c:	4433      	add	r3, r6
 801203e:	4644      	mov	r4, r8
 8012040:	0052      	lsls	r2, r2, #1
 8012042:	f1bc 0c01 	subs.w	ip, ip, #1
 8012046:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801204a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801204e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012052:	d1dd      	bne.n	8012010 <__ieee754_sqrt+0xbc>
 8012054:	430a      	orrs	r2, r1
 8012056:	d006      	beq.n	8012066 <__ieee754_sqrt+0x112>
 8012058:	1c5c      	adds	r4, r3, #1
 801205a:	bf13      	iteet	ne
 801205c:	3301      	addne	r3, #1
 801205e:	3501      	addeq	r5, #1
 8012060:	4663      	moveq	r3, ip
 8012062:	f023 0301 	bicne.w	r3, r3, #1
 8012066:	106a      	asrs	r2, r5, #1
 8012068:	085b      	lsrs	r3, r3, #1
 801206a:	07e9      	lsls	r1, r5, #31
 801206c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012070:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012074:	bf48      	it	mi
 8012076:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801207a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801207e:	461c      	mov	r4, r3
 8012080:	e780      	b.n	8011f84 <__ieee754_sqrt+0x30>
 8012082:	0aca      	lsrs	r2, r1, #11
 8012084:	3815      	subs	r0, #21
 8012086:	0549      	lsls	r1, r1, #21
 8012088:	2a00      	cmp	r2, #0
 801208a:	d0fa      	beq.n	8012082 <__ieee754_sqrt+0x12e>
 801208c:	02d6      	lsls	r6, r2, #11
 801208e:	d50a      	bpl.n	80120a6 <__ieee754_sqrt+0x152>
 8012090:	f1c3 0420 	rsb	r4, r3, #32
 8012094:	fa21 f404 	lsr.w	r4, r1, r4
 8012098:	1e5d      	subs	r5, r3, #1
 801209a:	4099      	lsls	r1, r3
 801209c:	4322      	orrs	r2, r4
 801209e:	1b43      	subs	r3, r0, r5
 80120a0:	e78b      	b.n	8011fba <__ieee754_sqrt+0x66>
 80120a2:	4618      	mov	r0, r3
 80120a4:	e7f0      	b.n	8012088 <__ieee754_sqrt+0x134>
 80120a6:	0052      	lsls	r2, r2, #1
 80120a8:	3301      	adds	r3, #1
 80120aa:	e7ef      	b.n	801208c <__ieee754_sqrt+0x138>
 80120ac:	46a0      	mov	r8, r4
 80120ae:	e7bf      	b.n	8012030 <__ieee754_sqrt+0xdc>
 80120b0:	7ff00000 	.word	0x7ff00000
 80120b4:	00000000 	.word	0x00000000

080120b8 <__kernel_cos>:
 80120b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120bc:	ec59 8b10 	vmov	r8, r9, d0
 80120c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80120c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80120c8:	ed2d 8b02 	vpush	{d8}
 80120cc:	eeb0 8a41 	vmov.f32	s16, s2
 80120d0:	eef0 8a61 	vmov.f32	s17, s3
 80120d4:	da07      	bge.n	80120e6 <__kernel_cos+0x2e>
 80120d6:	ee10 0a10 	vmov	r0, s0
 80120da:	4649      	mov	r1, r9
 80120dc:	f7ee fd54 	bl	8000b88 <__aeabi_d2iz>
 80120e0:	2800      	cmp	r0, #0
 80120e2:	f000 8089 	beq.w	80121f8 <__kernel_cos+0x140>
 80120e6:	4642      	mov	r2, r8
 80120e8:	464b      	mov	r3, r9
 80120ea:	4640      	mov	r0, r8
 80120ec:	4649      	mov	r1, r9
 80120ee:	f7ee fa9b 	bl	8000628 <__aeabi_dmul>
 80120f2:	2200      	movs	r2, #0
 80120f4:	4b4e      	ldr	r3, [pc, #312]	; (8012230 <__kernel_cos+0x178>)
 80120f6:	4604      	mov	r4, r0
 80120f8:	460d      	mov	r5, r1
 80120fa:	f7ee fa95 	bl	8000628 <__aeabi_dmul>
 80120fe:	a340      	add	r3, pc, #256	; (adr r3, 8012200 <__kernel_cos+0x148>)
 8012100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012104:	4682      	mov	sl, r0
 8012106:	468b      	mov	fp, r1
 8012108:	4620      	mov	r0, r4
 801210a:	4629      	mov	r1, r5
 801210c:	f7ee fa8c 	bl	8000628 <__aeabi_dmul>
 8012110:	a33d      	add	r3, pc, #244	; (adr r3, 8012208 <__kernel_cos+0x150>)
 8012112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012116:	f7ee f8d1 	bl	80002bc <__adddf3>
 801211a:	4622      	mov	r2, r4
 801211c:	462b      	mov	r3, r5
 801211e:	f7ee fa83 	bl	8000628 <__aeabi_dmul>
 8012122:	a33b      	add	r3, pc, #236	; (adr r3, 8012210 <__kernel_cos+0x158>)
 8012124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012128:	f7ee f8c6 	bl	80002b8 <__aeabi_dsub>
 801212c:	4622      	mov	r2, r4
 801212e:	462b      	mov	r3, r5
 8012130:	f7ee fa7a 	bl	8000628 <__aeabi_dmul>
 8012134:	a338      	add	r3, pc, #224	; (adr r3, 8012218 <__kernel_cos+0x160>)
 8012136:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213a:	f7ee f8bf 	bl	80002bc <__adddf3>
 801213e:	4622      	mov	r2, r4
 8012140:	462b      	mov	r3, r5
 8012142:	f7ee fa71 	bl	8000628 <__aeabi_dmul>
 8012146:	a336      	add	r3, pc, #216	; (adr r3, 8012220 <__kernel_cos+0x168>)
 8012148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214c:	f7ee f8b4 	bl	80002b8 <__aeabi_dsub>
 8012150:	4622      	mov	r2, r4
 8012152:	462b      	mov	r3, r5
 8012154:	f7ee fa68 	bl	8000628 <__aeabi_dmul>
 8012158:	a333      	add	r3, pc, #204	; (adr r3, 8012228 <__kernel_cos+0x170>)
 801215a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215e:	f7ee f8ad 	bl	80002bc <__adddf3>
 8012162:	4622      	mov	r2, r4
 8012164:	462b      	mov	r3, r5
 8012166:	f7ee fa5f 	bl	8000628 <__aeabi_dmul>
 801216a:	4622      	mov	r2, r4
 801216c:	462b      	mov	r3, r5
 801216e:	f7ee fa5b 	bl	8000628 <__aeabi_dmul>
 8012172:	ec53 2b18 	vmov	r2, r3, d8
 8012176:	4604      	mov	r4, r0
 8012178:	460d      	mov	r5, r1
 801217a:	4640      	mov	r0, r8
 801217c:	4649      	mov	r1, r9
 801217e:	f7ee fa53 	bl	8000628 <__aeabi_dmul>
 8012182:	460b      	mov	r3, r1
 8012184:	4602      	mov	r2, r0
 8012186:	4629      	mov	r1, r5
 8012188:	4620      	mov	r0, r4
 801218a:	f7ee f895 	bl	80002b8 <__aeabi_dsub>
 801218e:	4b29      	ldr	r3, [pc, #164]	; (8012234 <__kernel_cos+0x17c>)
 8012190:	429e      	cmp	r6, r3
 8012192:	4680      	mov	r8, r0
 8012194:	4689      	mov	r9, r1
 8012196:	dc11      	bgt.n	80121bc <__kernel_cos+0x104>
 8012198:	4602      	mov	r2, r0
 801219a:	460b      	mov	r3, r1
 801219c:	4650      	mov	r0, sl
 801219e:	4659      	mov	r1, fp
 80121a0:	f7ee f88a 	bl	80002b8 <__aeabi_dsub>
 80121a4:	460b      	mov	r3, r1
 80121a6:	4924      	ldr	r1, [pc, #144]	; (8012238 <__kernel_cos+0x180>)
 80121a8:	4602      	mov	r2, r0
 80121aa:	2000      	movs	r0, #0
 80121ac:	f7ee f884 	bl	80002b8 <__aeabi_dsub>
 80121b0:	ecbd 8b02 	vpop	{d8}
 80121b4:	ec41 0b10 	vmov	d0, r0, r1
 80121b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121bc:	4b1f      	ldr	r3, [pc, #124]	; (801223c <__kernel_cos+0x184>)
 80121be:	491e      	ldr	r1, [pc, #120]	; (8012238 <__kernel_cos+0x180>)
 80121c0:	429e      	cmp	r6, r3
 80121c2:	bfcc      	ite	gt
 80121c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8012240 <__kernel_cos+0x188>)
 80121c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80121ca:	2400      	movs	r4, #0
 80121cc:	4622      	mov	r2, r4
 80121ce:	462b      	mov	r3, r5
 80121d0:	2000      	movs	r0, #0
 80121d2:	f7ee f871 	bl	80002b8 <__aeabi_dsub>
 80121d6:	4622      	mov	r2, r4
 80121d8:	4606      	mov	r6, r0
 80121da:	460f      	mov	r7, r1
 80121dc:	462b      	mov	r3, r5
 80121de:	4650      	mov	r0, sl
 80121e0:	4659      	mov	r1, fp
 80121e2:	f7ee f869 	bl	80002b8 <__aeabi_dsub>
 80121e6:	4642      	mov	r2, r8
 80121e8:	464b      	mov	r3, r9
 80121ea:	f7ee f865 	bl	80002b8 <__aeabi_dsub>
 80121ee:	4602      	mov	r2, r0
 80121f0:	460b      	mov	r3, r1
 80121f2:	4630      	mov	r0, r6
 80121f4:	4639      	mov	r1, r7
 80121f6:	e7d9      	b.n	80121ac <__kernel_cos+0xf4>
 80121f8:	2000      	movs	r0, #0
 80121fa:	490f      	ldr	r1, [pc, #60]	; (8012238 <__kernel_cos+0x180>)
 80121fc:	e7d8      	b.n	80121b0 <__kernel_cos+0xf8>
 80121fe:	bf00      	nop
 8012200:	be8838d4 	.word	0xbe8838d4
 8012204:	bda8fae9 	.word	0xbda8fae9
 8012208:	bdb4b1c4 	.word	0xbdb4b1c4
 801220c:	3e21ee9e 	.word	0x3e21ee9e
 8012210:	809c52ad 	.word	0x809c52ad
 8012214:	3e927e4f 	.word	0x3e927e4f
 8012218:	19cb1590 	.word	0x19cb1590
 801221c:	3efa01a0 	.word	0x3efa01a0
 8012220:	16c15177 	.word	0x16c15177
 8012224:	3f56c16c 	.word	0x3f56c16c
 8012228:	5555554c 	.word	0x5555554c
 801222c:	3fa55555 	.word	0x3fa55555
 8012230:	3fe00000 	.word	0x3fe00000
 8012234:	3fd33332 	.word	0x3fd33332
 8012238:	3ff00000 	.word	0x3ff00000
 801223c:	3fe90000 	.word	0x3fe90000
 8012240:	3fd20000 	.word	0x3fd20000
 8012244:	00000000 	.word	0x00000000

08012248 <__kernel_rem_pio2>:
 8012248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801224c:	ed2d 8b02 	vpush	{d8}
 8012250:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8012254:	1ed4      	subs	r4, r2, #3
 8012256:	9308      	str	r3, [sp, #32]
 8012258:	9101      	str	r1, [sp, #4]
 801225a:	4bc5      	ldr	r3, [pc, #788]	; (8012570 <__kernel_rem_pio2+0x328>)
 801225c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801225e:	9009      	str	r0, [sp, #36]	; 0x24
 8012260:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8012264:	9304      	str	r3, [sp, #16]
 8012266:	9b08      	ldr	r3, [sp, #32]
 8012268:	3b01      	subs	r3, #1
 801226a:	9307      	str	r3, [sp, #28]
 801226c:	2318      	movs	r3, #24
 801226e:	fb94 f4f3 	sdiv	r4, r4, r3
 8012272:	f06f 0317 	mvn.w	r3, #23
 8012276:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801227a:	fb04 3303 	mla	r3, r4, r3, r3
 801227e:	eb03 0a02 	add.w	sl, r3, r2
 8012282:	9b04      	ldr	r3, [sp, #16]
 8012284:	9a07      	ldr	r2, [sp, #28]
 8012286:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012560 <__kernel_rem_pio2+0x318>
 801228a:	eb03 0802 	add.w	r8, r3, r2
 801228e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012290:	1aa7      	subs	r7, r4, r2
 8012292:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012296:	ae22      	add	r6, sp, #136	; 0x88
 8012298:	2500      	movs	r5, #0
 801229a:	4545      	cmp	r5, r8
 801229c:	dd13      	ble.n	80122c6 <__kernel_rem_pio2+0x7e>
 801229e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012560 <__kernel_rem_pio2+0x318>
 80122a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80122a6:	2600      	movs	r6, #0
 80122a8:	9b04      	ldr	r3, [sp, #16]
 80122aa:	429e      	cmp	r6, r3
 80122ac:	dc32      	bgt.n	8012314 <__kernel_rem_pio2+0xcc>
 80122ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122b0:	9302      	str	r3, [sp, #8]
 80122b2:	9b08      	ldr	r3, [sp, #32]
 80122b4:	199d      	adds	r5, r3, r6
 80122b6:	ab22      	add	r3, sp, #136	; 0x88
 80122b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80122bc:	9306      	str	r3, [sp, #24]
 80122be:	ec59 8b18 	vmov	r8, r9, d8
 80122c2:	2700      	movs	r7, #0
 80122c4:	e01f      	b.n	8012306 <__kernel_rem_pio2+0xbe>
 80122c6:	42ef      	cmn	r7, r5
 80122c8:	d407      	bmi.n	80122da <__kernel_rem_pio2+0x92>
 80122ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80122ce:	f7ee f941 	bl	8000554 <__aeabi_i2d>
 80122d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80122d6:	3501      	adds	r5, #1
 80122d8:	e7df      	b.n	801229a <__kernel_rem_pio2+0x52>
 80122da:	ec51 0b18 	vmov	r0, r1, d8
 80122de:	e7f8      	b.n	80122d2 <__kernel_rem_pio2+0x8a>
 80122e0:	9906      	ldr	r1, [sp, #24]
 80122e2:	9d02      	ldr	r5, [sp, #8]
 80122e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80122e8:	9106      	str	r1, [sp, #24]
 80122ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80122ee:	9502      	str	r5, [sp, #8]
 80122f0:	f7ee f99a 	bl	8000628 <__aeabi_dmul>
 80122f4:	4602      	mov	r2, r0
 80122f6:	460b      	mov	r3, r1
 80122f8:	4640      	mov	r0, r8
 80122fa:	4649      	mov	r1, r9
 80122fc:	f7ed ffde 	bl	80002bc <__adddf3>
 8012300:	3701      	adds	r7, #1
 8012302:	4680      	mov	r8, r0
 8012304:	4689      	mov	r9, r1
 8012306:	9b07      	ldr	r3, [sp, #28]
 8012308:	429f      	cmp	r7, r3
 801230a:	dde9      	ble.n	80122e0 <__kernel_rem_pio2+0x98>
 801230c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012310:	3601      	adds	r6, #1
 8012312:	e7c9      	b.n	80122a8 <__kernel_rem_pio2+0x60>
 8012314:	9b04      	ldr	r3, [sp, #16]
 8012316:	aa0e      	add	r2, sp, #56	; 0x38
 8012318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801231c:	930c      	str	r3, [sp, #48]	; 0x30
 801231e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012320:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012324:	9c04      	ldr	r4, [sp, #16]
 8012326:	930b      	str	r3, [sp, #44]	; 0x2c
 8012328:	ab9a      	add	r3, sp, #616	; 0x268
 801232a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801232e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012332:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012336:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801233a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801233e:	ab9a      	add	r3, sp, #616	; 0x268
 8012340:	445b      	add	r3, fp
 8012342:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8012346:	2500      	movs	r5, #0
 8012348:	1b63      	subs	r3, r4, r5
 801234a:	2b00      	cmp	r3, #0
 801234c:	dc78      	bgt.n	8012440 <__kernel_rem_pio2+0x1f8>
 801234e:	4650      	mov	r0, sl
 8012350:	ec49 8b10 	vmov	d0, r8, r9
 8012354:	f000 fc04 	bl	8012b60 <scalbn>
 8012358:	ec57 6b10 	vmov	r6, r7, d0
 801235c:	2200      	movs	r2, #0
 801235e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8012362:	ee10 0a10 	vmov	r0, s0
 8012366:	4639      	mov	r1, r7
 8012368:	f7ee f95e 	bl	8000628 <__aeabi_dmul>
 801236c:	ec41 0b10 	vmov	d0, r0, r1
 8012370:	f000 fb6e 	bl	8012a50 <floor>
 8012374:	2200      	movs	r2, #0
 8012376:	ec51 0b10 	vmov	r0, r1, d0
 801237a:	4b7e      	ldr	r3, [pc, #504]	; (8012574 <__kernel_rem_pio2+0x32c>)
 801237c:	f7ee f954 	bl	8000628 <__aeabi_dmul>
 8012380:	4602      	mov	r2, r0
 8012382:	460b      	mov	r3, r1
 8012384:	4630      	mov	r0, r6
 8012386:	4639      	mov	r1, r7
 8012388:	f7ed ff96 	bl	80002b8 <__aeabi_dsub>
 801238c:	460f      	mov	r7, r1
 801238e:	4606      	mov	r6, r0
 8012390:	f7ee fbfa 	bl	8000b88 <__aeabi_d2iz>
 8012394:	9006      	str	r0, [sp, #24]
 8012396:	f7ee f8dd 	bl	8000554 <__aeabi_i2d>
 801239a:	4602      	mov	r2, r0
 801239c:	460b      	mov	r3, r1
 801239e:	4630      	mov	r0, r6
 80123a0:	4639      	mov	r1, r7
 80123a2:	f7ed ff89 	bl	80002b8 <__aeabi_dsub>
 80123a6:	f1ba 0f00 	cmp.w	sl, #0
 80123aa:	4606      	mov	r6, r0
 80123ac:	460f      	mov	r7, r1
 80123ae:	dd6c      	ble.n	801248a <__kernel_rem_pio2+0x242>
 80123b0:	1e62      	subs	r2, r4, #1
 80123b2:	ab0e      	add	r3, sp, #56	; 0x38
 80123b4:	f1ca 0118 	rsb	r1, sl, #24
 80123b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80123bc:	9d06      	ldr	r5, [sp, #24]
 80123be:	fa40 f301 	asr.w	r3, r0, r1
 80123c2:	441d      	add	r5, r3
 80123c4:	408b      	lsls	r3, r1
 80123c6:	1ac0      	subs	r0, r0, r3
 80123c8:	ab0e      	add	r3, sp, #56	; 0x38
 80123ca:	9506      	str	r5, [sp, #24]
 80123cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80123d0:	f1ca 0317 	rsb	r3, sl, #23
 80123d4:	fa40 f303 	asr.w	r3, r0, r3
 80123d8:	9302      	str	r3, [sp, #8]
 80123da:	9b02      	ldr	r3, [sp, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	dd62      	ble.n	80124a6 <__kernel_rem_pio2+0x25e>
 80123e0:	9b06      	ldr	r3, [sp, #24]
 80123e2:	2200      	movs	r2, #0
 80123e4:	3301      	adds	r3, #1
 80123e6:	9306      	str	r3, [sp, #24]
 80123e8:	4615      	mov	r5, r2
 80123ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80123ee:	4294      	cmp	r4, r2
 80123f0:	f300 8095 	bgt.w	801251e <__kernel_rem_pio2+0x2d6>
 80123f4:	f1ba 0f00 	cmp.w	sl, #0
 80123f8:	dd07      	ble.n	801240a <__kernel_rem_pio2+0x1c2>
 80123fa:	f1ba 0f01 	cmp.w	sl, #1
 80123fe:	f000 80a2 	beq.w	8012546 <__kernel_rem_pio2+0x2fe>
 8012402:	f1ba 0f02 	cmp.w	sl, #2
 8012406:	f000 80c1 	beq.w	801258c <__kernel_rem_pio2+0x344>
 801240a:	9b02      	ldr	r3, [sp, #8]
 801240c:	2b02      	cmp	r3, #2
 801240e:	d14a      	bne.n	80124a6 <__kernel_rem_pio2+0x25e>
 8012410:	4632      	mov	r2, r6
 8012412:	463b      	mov	r3, r7
 8012414:	2000      	movs	r0, #0
 8012416:	4958      	ldr	r1, [pc, #352]	; (8012578 <__kernel_rem_pio2+0x330>)
 8012418:	f7ed ff4e 	bl	80002b8 <__aeabi_dsub>
 801241c:	4606      	mov	r6, r0
 801241e:	460f      	mov	r7, r1
 8012420:	2d00      	cmp	r5, #0
 8012422:	d040      	beq.n	80124a6 <__kernel_rem_pio2+0x25e>
 8012424:	4650      	mov	r0, sl
 8012426:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012568 <__kernel_rem_pio2+0x320>
 801242a:	f000 fb99 	bl	8012b60 <scalbn>
 801242e:	4630      	mov	r0, r6
 8012430:	4639      	mov	r1, r7
 8012432:	ec53 2b10 	vmov	r2, r3, d0
 8012436:	f7ed ff3f 	bl	80002b8 <__aeabi_dsub>
 801243a:	4606      	mov	r6, r0
 801243c:	460f      	mov	r7, r1
 801243e:	e032      	b.n	80124a6 <__kernel_rem_pio2+0x25e>
 8012440:	2200      	movs	r2, #0
 8012442:	4b4e      	ldr	r3, [pc, #312]	; (801257c <__kernel_rem_pio2+0x334>)
 8012444:	4640      	mov	r0, r8
 8012446:	4649      	mov	r1, r9
 8012448:	f7ee f8ee 	bl	8000628 <__aeabi_dmul>
 801244c:	f7ee fb9c 	bl	8000b88 <__aeabi_d2iz>
 8012450:	f7ee f880 	bl	8000554 <__aeabi_i2d>
 8012454:	2200      	movs	r2, #0
 8012456:	4b4a      	ldr	r3, [pc, #296]	; (8012580 <__kernel_rem_pio2+0x338>)
 8012458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801245c:	f7ee f8e4 	bl	8000628 <__aeabi_dmul>
 8012460:	4602      	mov	r2, r0
 8012462:	460b      	mov	r3, r1
 8012464:	4640      	mov	r0, r8
 8012466:	4649      	mov	r1, r9
 8012468:	f7ed ff26 	bl	80002b8 <__aeabi_dsub>
 801246c:	f7ee fb8c 	bl	8000b88 <__aeabi_d2iz>
 8012470:	ab0e      	add	r3, sp, #56	; 0x38
 8012472:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012476:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801247a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801247e:	f7ed ff1d 	bl	80002bc <__adddf3>
 8012482:	3501      	adds	r5, #1
 8012484:	4680      	mov	r8, r0
 8012486:	4689      	mov	r9, r1
 8012488:	e75e      	b.n	8012348 <__kernel_rem_pio2+0x100>
 801248a:	d105      	bne.n	8012498 <__kernel_rem_pio2+0x250>
 801248c:	1e63      	subs	r3, r4, #1
 801248e:	aa0e      	add	r2, sp, #56	; 0x38
 8012490:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012494:	15c3      	asrs	r3, r0, #23
 8012496:	e79f      	b.n	80123d8 <__kernel_rem_pio2+0x190>
 8012498:	2200      	movs	r2, #0
 801249a:	4b3a      	ldr	r3, [pc, #232]	; (8012584 <__kernel_rem_pio2+0x33c>)
 801249c:	f7ee fb4a 	bl	8000b34 <__aeabi_dcmpge>
 80124a0:	2800      	cmp	r0, #0
 80124a2:	d139      	bne.n	8012518 <__kernel_rem_pio2+0x2d0>
 80124a4:	9002      	str	r0, [sp, #8]
 80124a6:	2200      	movs	r2, #0
 80124a8:	2300      	movs	r3, #0
 80124aa:	4630      	mov	r0, r6
 80124ac:	4639      	mov	r1, r7
 80124ae:	f7ee fb23 	bl	8000af8 <__aeabi_dcmpeq>
 80124b2:	2800      	cmp	r0, #0
 80124b4:	f000 80c7 	beq.w	8012646 <__kernel_rem_pio2+0x3fe>
 80124b8:	1e65      	subs	r5, r4, #1
 80124ba:	462b      	mov	r3, r5
 80124bc:	2200      	movs	r2, #0
 80124be:	9904      	ldr	r1, [sp, #16]
 80124c0:	428b      	cmp	r3, r1
 80124c2:	da6a      	bge.n	801259a <__kernel_rem_pio2+0x352>
 80124c4:	2a00      	cmp	r2, #0
 80124c6:	f000 8088 	beq.w	80125da <__kernel_rem_pio2+0x392>
 80124ca:	ab0e      	add	r3, sp, #56	; 0x38
 80124cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80124d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f000 80b4 	beq.w	8012642 <__kernel_rem_pio2+0x3fa>
 80124da:	4650      	mov	r0, sl
 80124dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012568 <__kernel_rem_pio2+0x320>
 80124e0:	f000 fb3e 	bl	8012b60 <scalbn>
 80124e4:	00ec      	lsls	r4, r5, #3
 80124e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80124e8:	191e      	adds	r6, r3, r4
 80124ea:	ec59 8b10 	vmov	r8, r9, d0
 80124ee:	f106 0a08 	add.w	sl, r6, #8
 80124f2:	462f      	mov	r7, r5
 80124f4:	2f00      	cmp	r7, #0
 80124f6:	f280 80df 	bge.w	80126b8 <__kernel_rem_pio2+0x470>
 80124fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012560 <__kernel_rem_pio2+0x318>
 80124fe:	f04f 0a00 	mov.w	sl, #0
 8012502:	eba5 030a 	sub.w	r3, r5, sl
 8012506:	2b00      	cmp	r3, #0
 8012508:	f2c0 810a 	blt.w	8012720 <__kernel_rem_pio2+0x4d8>
 801250c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012588 <__kernel_rem_pio2+0x340>
 8012510:	ec59 8b18 	vmov	r8, r9, d8
 8012514:	2700      	movs	r7, #0
 8012516:	e0f5      	b.n	8012704 <__kernel_rem_pio2+0x4bc>
 8012518:	2302      	movs	r3, #2
 801251a:	9302      	str	r3, [sp, #8]
 801251c:	e760      	b.n	80123e0 <__kernel_rem_pio2+0x198>
 801251e:	ab0e      	add	r3, sp, #56	; 0x38
 8012520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012524:	b94d      	cbnz	r5, 801253a <__kernel_rem_pio2+0x2f2>
 8012526:	b12b      	cbz	r3, 8012534 <__kernel_rem_pio2+0x2ec>
 8012528:	a80e      	add	r0, sp, #56	; 0x38
 801252a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801252e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012532:	2301      	movs	r3, #1
 8012534:	3201      	adds	r2, #1
 8012536:	461d      	mov	r5, r3
 8012538:	e759      	b.n	80123ee <__kernel_rem_pio2+0x1a6>
 801253a:	a80e      	add	r0, sp, #56	; 0x38
 801253c:	1acb      	subs	r3, r1, r3
 801253e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012542:	462b      	mov	r3, r5
 8012544:	e7f6      	b.n	8012534 <__kernel_rem_pio2+0x2ec>
 8012546:	1e62      	subs	r2, r4, #1
 8012548:	ab0e      	add	r3, sp, #56	; 0x38
 801254a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801254e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012552:	a90e      	add	r1, sp, #56	; 0x38
 8012554:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012558:	e757      	b.n	801240a <__kernel_rem_pio2+0x1c2>
 801255a:	bf00      	nop
 801255c:	f3af 8000 	nop.w
	...
 801256c:	3ff00000 	.word	0x3ff00000
 8012570:	08018370 	.word	0x08018370
 8012574:	40200000 	.word	0x40200000
 8012578:	3ff00000 	.word	0x3ff00000
 801257c:	3e700000 	.word	0x3e700000
 8012580:	41700000 	.word	0x41700000
 8012584:	3fe00000 	.word	0x3fe00000
 8012588:	08018330 	.word	0x08018330
 801258c:	1e62      	subs	r2, r4, #1
 801258e:	ab0e      	add	r3, sp, #56	; 0x38
 8012590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012594:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012598:	e7db      	b.n	8012552 <__kernel_rem_pio2+0x30a>
 801259a:	a90e      	add	r1, sp, #56	; 0x38
 801259c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80125a0:	3b01      	subs	r3, #1
 80125a2:	430a      	orrs	r2, r1
 80125a4:	e78b      	b.n	80124be <__kernel_rem_pio2+0x276>
 80125a6:	3301      	adds	r3, #1
 80125a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80125ac:	2900      	cmp	r1, #0
 80125ae:	d0fa      	beq.n	80125a6 <__kernel_rem_pio2+0x35e>
 80125b0:	9a08      	ldr	r2, [sp, #32]
 80125b2:	4422      	add	r2, r4
 80125b4:	00d2      	lsls	r2, r2, #3
 80125b6:	a922      	add	r1, sp, #136	; 0x88
 80125b8:	18e3      	adds	r3, r4, r3
 80125ba:	9206      	str	r2, [sp, #24]
 80125bc:	440a      	add	r2, r1
 80125be:	9302      	str	r3, [sp, #8]
 80125c0:	f10b 0108 	add.w	r1, fp, #8
 80125c4:	f102 0308 	add.w	r3, r2, #8
 80125c8:	1c66      	adds	r6, r4, #1
 80125ca:	910a      	str	r1, [sp, #40]	; 0x28
 80125cc:	2500      	movs	r5, #0
 80125ce:	930d      	str	r3, [sp, #52]	; 0x34
 80125d0:	9b02      	ldr	r3, [sp, #8]
 80125d2:	42b3      	cmp	r3, r6
 80125d4:	da04      	bge.n	80125e0 <__kernel_rem_pio2+0x398>
 80125d6:	461c      	mov	r4, r3
 80125d8:	e6a6      	b.n	8012328 <__kernel_rem_pio2+0xe0>
 80125da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125dc:	2301      	movs	r3, #1
 80125de:	e7e3      	b.n	80125a8 <__kernel_rem_pio2+0x360>
 80125e0:	9b06      	ldr	r3, [sp, #24]
 80125e2:	18ef      	adds	r7, r5, r3
 80125e4:	ab22      	add	r3, sp, #136	; 0x88
 80125e6:	441f      	add	r7, r3
 80125e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80125ee:	f7ed ffb1 	bl	8000554 <__aeabi_i2d>
 80125f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125f4:	461c      	mov	r4, r3
 80125f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125f8:	e9c7 0100 	strd	r0, r1, [r7]
 80125fc:	eb03 0b05 	add.w	fp, r3, r5
 8012600:	2700      	movs	r7, #0
 8012602:	f04f 0800 	mov.w	r8, #0
 8012606:	f04f 0900 	mov.w	r9, #0
 801260a:	9b07      	ldr	r3, [sp, #28]
 801260c:	429f      	cmp	r7, r3
 801260e:	dd08      	ble.n	8012622 <__kernel_rem_pio2+0x3da>
 8012610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012612:	aa72      	add	r2, sp, #456	; 0x1c8
 8012614:	18eb      	adds	r3, r5, r3
 8012616:	4413      	add	r3, r2
 8012618:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801261c:	3601      	adds	r6, #1
 801261e:	3508      	adds	r5, #8
 8012620:	e7d6      	b.n	80125d0 <__kernel_rem_pio2+0x388>
 8012622:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012626:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801262a:	f7ed fffd 	bl	8000628 <__aeabi_dmul>
 801262e:	4602      	mov	r2, r0
 8012630:	460b      	mov	r3, r1
 8012632:	4640      	mov	r0, r8
 8012634:	4649      	mov	r1, r9
 8012636:	f7ed fe41 	bl	80002bc <__adddf3>
 801263a:	3701      	adds	r7, #1
 801263c:	4680      	mov	r8, r0
 801263e:	4689      	mov	r9, r1
 8012640:	e7e3      	b.n	801260a <__kernel_rem_pio2+0x3c2>
 8012642:	3d01      	subs	r5, #1
 8012644:	e741      	b.n	80124ca <__kernel_rem_pio2+0x282>
 8012646:	f1ca 0000 	rsb	r0, sl, #0
 801264a:	ec47 6b10 	vmov	d0, r6, r7
 801264e:	f000 fa87 	bl	8012b60 <scalbn>
 8012652:	ec57 6b10 	vmov	r6, r7, d0
 8012656:	2200      	movs	r2, #0
 8012658:	4b99      	ldr	r3, [pc, #612]	; (80128c0 <__kernel_rem_pio2+0x678>)
 801265a:	ee10 0a10 	vmov	r0, s0
 801265e:	4639      	mov	r1, r7
 8012660:	f7ee fa68 	bl	8000b34 <__aeabi_dcmpge>
 8012664:	b1f8      	cbz	r0, 80126a6 <__kernel_rem_pio2+0x45e>
 8012666:	2200      	movs	r2, #0
 8012668:	4b96      	ldr	r3, [pc, #600]	; (80128c4 <__kernel_rem_pio2+0x67c>)
 801266a:	4630      	mov	r0, r6
 801266c:	4639      	mov	r1, r7
 801266e:	f7ed ffdb 	bl	8000628 <__aeabi_dmul>
 8012672:	f7ee fa89 	bl	8000b88 <__aeabi_d2iz>
 8012676:	4680      	mov	r8, r0
 8012678:	f7ed ff6c 	bl	8000554 <__aeabi_i2d>
 801267c:	2200      	movs	r2, #0
 801267e:	4b90      	ldr	r3, [pc, #576]	; (80128c0 <__kernel_rem_pio2+0x678>)
 8012680:	f7ed ffd2 	bl	8000628 <__aeabi_dmul>
 8012684:	460b      	mov	r3, r1
 8012686:	4602      	mov	r2, r0
 8012688:	4639      	mov	r1, r7
 801268a:	4630      	mov	r0, r6
 801268c:	f7ed fe14 	bl	80002b8 <__aeabi_dsub>
 8012690:	f7ee fa7a 	bl	8000b88 <__aeabi_d2iz>
 8012694:	1c65      	adds	r5, r4, #1
 8012696:	ab0e      	add	r3, sp, #56	; 0x38
 8012698:	f10a 0a18 	add.w	sl, sl, #24
 801269c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80126a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80126a4:	e719      	b.n	80124da <__kernel_rem_pio2+0x292>
 80126a6:	4630      	mov	r0, r6
 80126a8:	4639      	mov	r1, r7
 80126aa:	f7ee fa6d 	bl	8000b88 <__aeabi_d2iz>
 80126ae:	ab0e      	add	r3, sp, #56	; 0x38
 80126b0:	4625      	mov	r5, r4
 80126b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80126b6:	e710      	b.n	80124da <__kernel_rem_pio2+0x292>
 80126b8:	ab0e      	add	r3, sp, #56	; 0x38
 80126ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80126be:	f7ed ff49 	bl	8000554 <__aeabi_i2d>
 80126c2:	4642      	mov	r2, r8
 80126c4:	464b      	mov	r3, r9
 80126c6:	f7ed ffaf 	bl	8000628 <__aeabi_dmul>
 80126ca:	2200      	movs	r2, #0
 80126cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80126d0:	4b7c      	ldr	r3, [pc, #496]	; (80128c4 <__kernel_rem_pio2+0x67c>)
 80126d2:	4640      	mov	r0, r8
 80126d4:	4649      	mov	r1, r9
 80126d6:	f7ed ffa7 	bl	8000628 <__aeabi_dmul>
 80126da:	3f01      	subs	r7, #1
 80126dc:	4680      	mov	r8, r0
 80126de:	4689      	mov	r9, r1
 80126e0:	e708      	b.n	80124f4 <__kernel_rem_pio2+0x2ac>
 80126e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80126e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80126ee:	f7ed ff9b 	bl	8000628 <__aeabi_dmul>
 80126f2:	4602      	mov	r2, r0
 80126f4:	460b      	mov	r3, r1
 80126f6:	4640      	mov	r0, r8
 80126f8:	4649      	mov	r1, r9
 80126fa:	f7ed fddf 	bl	80002bc <__adddf3>
 80126fe:	3701      	adds	r7, #1
 8012700:	4680      	mov	r8, r0
 8012702:	4689      	mov	r9, r1
 8012704:	9b04      	ldr	r3, [sp, #16]
 8012706:	429f      	cmp	r7, r3
 8012708:	dc01      	bgt.n	801270e <__kernel_rem_pio2+0x4c6>
 801270a:	45ba      	cmp	sl, r7
 801270c:	dae9      	bge.n	80126e2 <__kernel_rem_pio2+0x49a>
 801270e:	ab4a      	add	r3, sp, #296	; 0x128
 8012710:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012714:	e9c3 8900 	strd	r8, r9, [r3]
 8012718:	f10a 0a01 	add.w	sl, sl, #1
 801271c:	3e08      	subs	r6, #8
 801271e:	e6f0      	b.n	8012502 <__kernel_rem_pio2+0x2ba>
 8012720:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012722:	2b03      	cmp	r3, #3
 8012724:	d85b      	bhi.n	80127de <__kernel_rem_pio2+0x596>
 8012726:	e8df f003 	tbb	[pc, r3]
 801272a:	264a      	.short	0x264a
 801272c:	0226      	.short	0x0226
 801272e:	ab9a      	add	r3, sp, #616	; 0x268
 8012730:	441c      	add	r4, r3
 8012732:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012736:	46a2      	mov	sl, r4
 8012738:	46ab      	mov	fp, r5
 801273a:	f1bb 0f00 	cmp.w	fp, #0
 801273e:	dc6c      	bgt.n	801281a <__kernel_rem_pio2+0x5d2>
 8012740:	46a2      	mov	sl, r4
 8012742:	46ab      	mov	fp, r5
 8012744:	f1bb 0f01 	cmp.w	fp, #1
 8012748:	f300 8086 	bgt.w	8012858 <__kernel_rem_pio2+0x610>
 801274c:	2000      	movs	r0, #0
 801274e:	2100      	movs	r1, #0
 8012750:	2d01      	cmp	r5, #1
 8012752:	f300 80a0 	bgt.w	8012896 <__kernel_rem_pio2+0x64e>
 8012756:	9b02      	ldr	r3, [sp, #8]
 8012758:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801275c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012760:	2b00      	cmp	r3, #0
 8012762:	f040 809e 	bne.w	80128a2 <__kernel_rem_pio2+0x65a>
 8012766:	9b01      	ldr	r3, [sp, #4]
 8012768:	e9c3 7800 	strd	r7, r8, [r3]
 801276c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012770:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012774:	e033      	b.n	80127de <__kernel_rem_pio2+0x596>
 8012776:	3408      	adds	r4, #8
 8012778:	ab4a      	add	r3, sp, #296	; 0x128
 801277a:	441c      	add	r4, r3
 801277c:	462e      	mov	r6, r5
 801277e:	2000      	movs	r0, #0
 8012780:	2100      	movs	r1, #0
 8012782:	2e00      	cmp	r6, #0
 8012784:	da3a      	bge.n	80127fc <__kernel_rem_pio2+0x5b4>
 8012786:	9b02      	ldr	r3, [sp, #8]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d03d      	beq.n	8012808 <__kernel_rem_pio2+0x5c0>
 801278c:	4602      	mov	r2, r0
 801278e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012792:	9c01      	ldr	r4, [sp, #4]
 8012794:	e9c4 2300 	strd	r2, r3, [r4]
 8012798:	4602      	mov	r2, r0
 801279a:	460b      	mov	r3, r1
 801279c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80127a0:	f7ed fd8a 	bl	80002b8 <__aeabi_dsub>
 80127a4:	ae4c      	add	r6, sp, #304	; 0x130
 80127a6:	2401      	movs	r4, #1
 80127a8:	42a5      	cmp	r5, r4
 80127aa:	da30      	bge.n	801280e <__kernel_rem_pio2+0x5c6>
 80127ac:	9b02      	ldr	r3, [sp, #8]
 80127ae:	b113      	cbz	r3, 80127b6 <__kernel_rem_pio2+0x56e>
 80127b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127b4:	4619      	mov	r1, r3
 80127b6:	9b01      	ldr	r3, [sp, #4]
 80127b8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80127bc:	e00f      	b.n	80127de <__kernel_rem_pio2+0x596>
 80127be:	ab9a      	add	r3, sp, #616	; 0x268
 80127c0:	441c      	add	r4, r3
 80127c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80127c6:	2000      	movs	r0, #0
 80127c8:	2100      	movs	r1, #0
 80127ca:	2d00      	cmp	r5, #0
 80127cc:	da10      	bge.n	80127f0 <__kernel_rem_pio2+0x5a8>
 80127ce:	9b02      	ldr	r3, [sp, #8]
 80127d0:	b113      	cbz	r3, 80127d8 <__kernel_rem_pio2+0x590>
 80127d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80127d6:	4619      	mov	r1, r3
 80127d8:	9b01      	ldr	r3, [sp, #4]
 80127da:	e9c3 0100 	strd	r0, r1, [r3]
 80127de:	9b06      	ldr	r3, [sp, #24]
 80127e0:	f003 0007 	and.w	r0, r3, #7
 80127e4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80127e8:	ecbd 8b02 	vpop	{d8}
 80127ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127f0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80127f4:	f7ed fd62 	bl	80002bc <__adddf3>
 80127f8:	3d01      	subs	r5, #1
 80127fa:	e7e6      	b.n	80127ca <__kernel_rem_pio2+0x582>
 80127fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012800:	f7ed fd5c 	bl	80002bc <__adddf3>
 8012804:	3e01      	subs	r6, #1
 8012806:	e7bc      	b.n	8012782 <__kernel_rem_pio2+0x53a>
 8012808:	4602      	mov	r2, r0
 801280a:	460b      	mov	r3, r1
 801280c:	e7c1      	b.n	8012792 <__kernel_rem_pio2+0x54a>
 801280e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012812:	f7ed fd53 	bl	80002bc <__adddf3>
 8012816:	3401      	adds	r4, #1
 8012818:	e7c6      	b.n	80127a8 <__kernel_rem_pio2+0x560>
 801281a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801281e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012822:	4640      	mov	r0, r8
 8012824:	ec53 2b17 	vmov	r2, r3, d7
 8012828:	4649      	mov	r1, r9
 801282a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801282e:	f7ed fd45 	bl	80002bc <__adddf3>
 8012832:	4602      	mov	r2, r0
 8012834:	460b      	mov	r3, r1
 8012836:	4606      	mov	r6, r0
 8012838:	460f      	mov	r7, r1
 801283a:	4640      	mov	r0, r8
 801283c:	4649      	mov	r1, r9
 801283e:	f7ed fd3b 	bl	80002b8 <__aeabi_dsub>
 8012842:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012846:	f7ed fd39 	bl	80002bc <__adddf3>
 801284a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801284e:	e9ca 0100 	strd	r0, r1, [sl]
 8012852:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012856:	e770      	b.n	801273a <__kernel_rem_pio2+0x4f2>
 8012858:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801285c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012860:	4630      	mov	r0, r6
 8012862:	ec53 2b17 	vmov	r2, r3, d7
 8012866:	4639      	mov	r1, r7
 8012868:	ed8d 7b04 	vstr	d7, [sp, #16]
 801286c:	f7ed fd26 	bl	80002bc <__adddf3>
 8012870:	4602      	mov	r2, r0
 8012872:	460b      	mov	r3, r1
 8012874:	4680      	mov	r8, r0
 8012876:	4689      	mov	r9, r1
 8012878:	4630      	mov	r0, r6
 801287a:	4639      	mov	r1, r7
 801287c:	f7ed fd1c 	bl	80002b8 <__aeabi_dsub>
 8012880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012884:	f7ed fd1a 	bl	80002bc <__adddf3>
 8012888:	f10b 3bff 	add.w	fp, fp, #4294967295
 801288c:	e9ca 0100 	strd	r0, r1, [sl]
 8012890:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012894:	e756      	b.n	8012744 <__kernel_rem_pio2+0x4fc>
 8012896:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801289a:	f7ed fd0f 	bl	80002bc <__adddf3>
 801289e:	3d01      	subs	r5, #1
 80128a0:	e756      	b.n	8012750 <__kernel_rem_pio2+0x508>
 80128a2:	9b01      	ldr	r3, [sp, #4]
 80128a4:	9a01      	ldr	r2, [sp, #4]
 80128a6:	601f      	str	r7, [r3, #0]
 80128a8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80128ac:	605c      	str	r4, [r3, #4]
 80128ae:	609d      	str	r5, [r3, #8]
 80128b0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80128b4:	60d3      	str	r3, [r2, #12]
 80128b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128ba:	6110      	str	r0, [r2, #16]
 80128bc:	6153      	str	r3, [r2, #20]
 80128be:	e78e      	b.n	80127de <__kernel_rem_pio2+0x596>
 80128c0:	41700000 	.word	0x41700000
 80128c4:	3e700000 	.word	0x3e700000

080128c8 <__kernel_sin>:
 80128c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128cc:	ec55 4b10 	vmov	r4, r5, d0
 80128d0:	b085      	sub	sp, #20
 80128d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80128d6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80128da:	ed8d 1b00 	vstr	d1, [sp]
 80128de:	9002      	str	r0, [sp, #8]
 80128e0:	da06      	bge.n	80128f0 <__kernel_sin+0x28>
 80128e2:	ee10 0a10 	vmov	r0, s0
 80128e6:	4629      	mov	r1, r5
 80128e8:	f7ee f94e 	bl	8000b88 <__aeabi_d2iz>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d051      	beq.n	8012994 <__kernel_sin+0xcc>
 80128f0:	4622      	mov	r2, r4
 80128f2:	462b      	mov	r3, r5
 80128f4:	4620      	mov	r0, r4
 80128f6:	4629      	mov	r1, r5
 80128f8:	f7ed fe96 	bl	8000628 <__aeabi_dmul>
 80128fc:	4682      	mov	sl, r0
 80128fe:	468b      	mov	fp, r1
 8012900:	4602      	mov	r2, r0
 8012902:	460b      	mov	r3, r1
 8012904:	4620      	mov	r0, r4
 8012906:	4629      	mov	r1, r5
 8012908:	f7ed fe8e 	bl	8000628 <__aeabi_dmul>
 801290c:	a341      	add	r3, pc, #260	; (adr r3, 8012a14 <__kernel_sin+0x14c>)
 801290e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012912:	4680      	mov	r8, r0
 8012914:	4689      	mov	r9, r1
 8012916:	4650      	mov	r0, sl
 8012918:	4659      	mov	r1, fp
 801291a:	f7ed fe85 	bl	8000628 <__aeabi_dmul>
 801291e:	a33f      	add	r3, pc, #252	; (adr r3, 8012a1c <__kernel_sin+0x154>)
 8012920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012924:	f7ed fcc8 	bl	80002b8 <__aeabi_dsub>
 8012928:	4652      	mov	r2, sl
 801292a:	465b      	mov	r3, fp
 801292c:	f7ed fe7c 	bl	8000628 <__aeabi_dmul>
 8012930:	a33c      	add	r3, pc, #240	; (adr r3, 8012a24 <__kernel_sin+0x15c>)
 8012932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012936:	f7ed fcc1 	bl	80002bc <__adddf3>
 801293a:	4652      	mov	r2, sl
 801293c:	465b      	mov	r3, fp
 801293e:	f7ed fe73 	bl	8000628 <__aeabi_dmul>
 8012942:	a33a      	add	r3, pc, #232	; (adr r3, 8012a2c <__kernel_sin+0x164>)
 8012944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012948:	f7ed fcb6 	bl	80002b8 <__aeabi_dsub>
 801294c:	4652      	mov	r2, sl
 801294e:	465b      	mov	r3, fp
 8012950:	f7ed fe6a 	bl	8000628 <__aeabi_dmul>
 8012954:	a337      	add	r3, pc, #220	; (adr r3, 8012a34 <__kernel_sin+0x16c>)
 8012956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801295a:	f7ed fcaf 	bl	80002bc <__adddf3>
 801295e:	9b02      	ldr	r3, [sp, #8]
 8012960:	4606      	mov	r6, r0
 8012962:	460f      	mov	r7, r1
 8012964:	b9db      	cbnz	r3, 801299e <__kernel_sin+0xd6>
 8012966:	4602      	mov	r2, r0
 8012968:	460b      	mov	r3, r1
 801296a:	4650      	mov	r0, sl
 801296c:	4659      	mov	r1, fp
 801296e:	f7ed fe5b 	bl	8000628 <__aeabi_dmul>
 8012972:	a325      	add	r3, pc, #148	; (adr r3, 8012a08 <__kernel_sin+0x140>)
 8012974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012978:	f7ed fc9e 	bl	80002b8 <__aeabi_dsub>
 801297c:	4642      	mov	r2, r8
 801297e:	464b      	mov	r3, r9
 8012980:	f7ed fe52 	bl	8000628 <__aeabi_dmul>
 8012984:	4602      	mov	r2, r0
 8012986:	460b      	mov	r3, r1
 8012988:	4620      	mov	r0, r4
 801298a:	4629      	mov	r1, r5
 801298c:	f7ed fc96 	bl	80002bc <__adddf3>
 8012990:	4604      	mov	r4, r0
 8012992:	460d      	mov	r5, r1
 8012994:	ec45 4b10 	vmov	d0, r4, r5
 8012998:	b005      	add	sp, #20
 801299a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801299e:	2200      	movs	r2, #0
 80129a0:	4b1b      	ldr	r3, [pc, #108]	; (8012a10 <__kernel_sin+0x148>)
 80129a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129a6:	f7ed fe3f 	bl	8000628 <__aeabi_dmul>
 80129aa:	4632      	mov	r2, r6
 80129ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129b0:	463b      	mov	r3, r7
 80129b2:	4640      	mov	r0, r8
 80129b4:	4649      	mov	r1, r9
 80129b6:	f7ed fe37 	bl	8000628 <__aeabi_dmul>
 80129ba:	4602      	mov	r2, r0
 80129bc:	460b      	mov	r3, r1
 80129be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80129c2:	f7ed fc79 	bl	80002b8 <__aeabi_dsub>
 80129c6:	4652      	mov	r2, sl
 80129c8:	465b      	mov	r3, fp
 80129ca:	f7ed fe2d 	bl	8000628 <__aeabi_dmul>
 80129ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80129d2:	f7ed fc71 	bl	80002b8 <__aeabi_dsub>
 80129d6:	a30c      	add	r3, pc, #48	; (adr r3, 8012a08 <__kernel_sin+0x140>)
 80129d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129dc:	4606      	mov	r6, r0
 80129de:	460f      	mov	r7, r1
 80129e0:	4640      	mov	r0, r8
 80129e2:	4649      	mov	r1, r9
 80129e4:	f7ed fe20 	bl	8000628 <__aeabi_dmul>
 80129e8:	4602      	mov	r2, r0
 80129ea:	460b      	mov	r3, r1
 80129ec:	4630      	mov	r0, r6
 80129ee:	4639      	mov	r1, r7
 80129f0:	f7ed fc64 	bl	80002bc <__adddf3>
 80129f4:	4602      	mov	r2, r0
 80129f6:	460b      	mov	r3, r1
 80129f8:	4620      	mov	r0, r4
 80129fa:	4629      	mov	r1, r5
 80129fc:	f7ed fc5c 	bl	80002b8 <__aeabi_dsub>
 8012a00:	e7c6      	b.n	8012990 <__kernel_sin+0xc8>
 8012a02:	bf00      	nop
 8012a04:	f3af 8000 	nop.w
 8012a08:	55555549 	.word	0x55555549
 8012a0c:	3fc55555 	.word	0x3fc55555
 8012a10:	3fe00000 	.word	0x3fe00000
 8012a14:	5acfd57c 	.word	0x5acfd57c
 8012a18:	3de5d93a 	.word	0x3de5d93a
 8012a1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012a20:	3e5ae5e6 	.word	0x3e5ae5e6
 8012a24:	57b1fe7d 	.word	0x57b1fe7d
 8012a28:	3ec71de3 	.word	0x3ec71de3
 8012a2c:	19c161d5 	.word	0x19c161d5
 8012a30:	3f2a01a0 	.word	0x3f2a01a0
 8012a34:	1110f8a6 	.word	0x1110f8a6
 8012a38:	3f811111 	.word	0x3f811111

08012a3c <fabs>:
 8012a3c:	ec51 0b10 	vmov	r0, r1, d0
 8012a40:	ee10 2a10 	vmov	r2, s0
 8012a44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012a48:	ec43 2b10 	vmov	d0, r2, r3
 8012a4c:	4770      	bx	lr
	...

08012a50 <floor>:
 8012a50:	ec51 0b10 	vmov	r0, r1, d0
 8012a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012a5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012a60:	2e13      	cmp	r6, #19
 8012a62:	460c      	mov	r4, r1
 8012a64:	ee10 5a10 	vmov	r5, s0
 8012a68:	4680      	mov	r8, r0
 8012a6a:	dc34      	bgt.n	8012ad6 <floor+0x86>
 8012a6c:	2e00      	cmp	r6, #0
 8012a6e:	da16      	bge.n	8012a9e <floor+0x4e>
 8012a70:	a335      	add	r3, pc, #212	; (adr r3, 8012b48 <floor+0xf8>)
 8012a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a76:	f7ed fc21 	bl	80002bc <__adddf3>
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	2300      	movs	r3, #0
 8012a7e:	f7ee f863 	bl	8000b48 <__aeabi_dcmpgt>
 8012a82:	b148      	cbz	r0, 8012a98 <floor+0x48>
 8012a84:	2c00      	cmp	r4, #0
 8012a86:	da59      	bge.n	8012b3c <floor+0xec>
 8012a88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012a8c:	4a30      	ldr	r2, [pc, #192]	; (8012b50 <floor+0x100>)
 8012a8e:	432b      	orrs	r3, r5
 8012a90:	2500      	movs	r5, #0
 8012a92:	42ab      	cmp	r3, r5
 8012a94:	bf18      	it	ne
 8012a96:	4614      	movne	r4, r2
 8012a98:	4621      	mov	r1, r4
 8012a9a:	4628      	mov	r0, r5
 8012a9c:	e025      	b.n	8012aea <floor+0x9a>
 8012a9e:	4f2d      	ldr	r7, [pc, #180]	; (8012b54 <floor+0x104>)
 8012aa0:	4137      	asrs	r7, r6
 8012aa2:	ea01 0307 	and.w	r3, r1, r7
 8012aa6:	4303      	orrs	r3, r0
 8012aa8:	d01f      	beq.n	8012aea <floor+0x9a>
 8012aaa:	a327      	add	r3, pc, #156	; (adr r3, 8012b48 <floor+0xf8>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	f7ed fc04 	bl	80002bc <__adddf3>
 8012ab4:	2200      	movs	r2, #0
 8012ab6:	2300      	movs	r3, #0
 8012ab8:	f7ee f846 	bl	8000b48 <__aeabi_dcmpgt>
 8012abc:	2800      	cmp	r0, #0
 8012abe:	d0eb      	beq.n	8012a98 <floor+0x48>
 8012ac0:	2c00      	cmp	r4, #0
 8012ac2:	bfbe      	ittt	lt
 8012ac4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012ac8:	fa43 f606 	asrlt.w	r6, r3, r6
 8012acc:	19a4      	addlt	r4, r4, r6
 8012ace:	ea24 0407 	bic.w	r4, r4, r7
 8012ad2:	2500      	movs	r5, #0
 8012ad4:	e7e0      	b.n	8012a98 <floor+0x48>
 8012ad6:	2e33      	cmp	r6, #51	; 0x33
 8012ad8:	dd0b      	ble.n	8012af2 <floor+0xa2>
 8012ada:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012ade:	d104      	bne.n	8012aea <floor+0x9a>
 8012ae0:	ee10 2a10 	vmov	r2, s0
 8012ae4:	460b      	mov	r3, r1
 8012ae6:	f7ed fbe9 	bl	80002bc <__adddf3>
 8012aea:	ec41 0b10 	vmov	d0, r0, r1
 8012aee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012af2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012af6:	f04f 33ff 	mov.w	r3, #4294967295
 8012afa:	fa23 f707 	lsr.w	r7, r3, r7
 8012afe:	4207      	tst	r7, r0
 8012b00:	d0f3      	beq.n	8012aea <floor+0x9a>
 8012b02:	a311      	add	r3, pc, #68	; (adr r3, 8012b48 <floor+0xf8>)
 8012b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b08:	f7ed fbd8 	bl	80002bc <__adddf3>
 8012b0c:	2200      	movs	r2, #0
 8012b0e:	2300      	movs	r3, #0
 8012b10:	f7ee f81a 	bl	8000b48 <__aeabi_dcmpgt>
 8012b14:	2800      	cmp	r0, #0
 8012b16:	d0bf      	beq.n	8012a98 <floor+0x48>
 8012b18:	2c00      	cmp	r4, #0
 8012b1a:	da02      	bge.n	8012b22 <floor+0xd2>
 8012b1c:	2e14      	cmp	r6, #20
 8012b1e:	d103      	bne.n	8012b28 <floor+0xd8>
 8012b20:	3401      	adds	r4, #1
 8012b22:	ea25 0507 	bic.w	r5, r5, r7
 8012b26:	e7b7      	b.n	8012a98 <floor+0x48>
 8012b28:	2301      	movs	r3, #1
 8012b2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012b2e:	fa03 f606 	lsl.w	r6, r3, r6
 8012b32:	4435      	add	r5, r6
 8012b34:	4545      	cmp	r5, r8
 8012b36:	bf38      	it	cc
 8012b38:	18e4      	addcc	r4, r4, r3
 8012b3a:	e7f2      	b.n	8012b22 <floor+0xd2>
 8012b3c:	2500      	movs	r5, #0
 8012b3e:	462c      	mov	r4, r5
 8012b40:	e7aa      	b.n	8012a98 <floor+0x48>
 8012b42:	bf00      	nop
 8012b44:	f3af 8000 	nop.w
 8012b48:	8800759c 	.word	0x8800759c
 8012b4c:	7e37e43c 	.word	0x7e37e43c
 8012b50:	bff00000 	.word	0xbff00000
 8012b54:	000fffff 	.word	0x000fffff

08012b58 <matherr>:
 8012b58:	2000      	movs	r0, #0
 8012b5a:	4770      	bx	lr
 8012b5c:	0000      	movs	r0, r0
	...

08012b60 <scalbn>:
 8012b60:	b570      	push	{r4, r5, r6, lr}
 8012b62:	ec55 4b10 	vmov	r4, r5, d0
 8012b66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012b6a:	4606      	mov	r6, r0
 8012b6c:	462b      	mov	r3, r5
 8012b6e:	b9aa      	cbnz	r2, 8012b9c <scalbn+0x3c>
 8012b70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012b74:	4323      	orrs	r3, r4
 8012b76:	d03b      	beq.n	8012bf0 <scalbn+0x90>
 8012b78:	4b31      	ldr	r3, [pc, #196]	; (8012c40 <scalbn+0xe0>)
 8012b7a:	4629      	mov	r1, r5
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	ee10 0a10 	vmov	r0, s0
 8012b82:	f7ed fd51 	bl	8000628 <__aeabi_dmul>
 8012b86:	4b2f      	ldr	r3, [pc, #188]	; (8012c44 <scalbn+0xe4>)
 8012b88:	429e      	cmp	r6, r3
 8012b8a:	4604      	mov	r4, r0
 8012b8c:	460d      	mov	r5, r1
 8012b8e:	da12      	bge.n	8012bb6 <scalbn+0x56>
 8012b90:	a327      	add	r3, pc, #156	; (adr r3, 8012c30 <scalbn+0xd0>)
 8012b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b96:	f7ed fd47 	bl	8000628 <__aeabi_dmul>
 8012b9a:	e009      	b.n	8012bb0 <scalbn+0x50>
 8012b9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012ba0:	428a      	cmp	r2, r1
 8012ba2:	d10c      	bne.n	8012bbe <scalbn+0x5e>
 8012ba4:	ee10 2a10 	vmov	r2, s0
 8012ba8:	4620      	mov	r0, r4
 8012baa:	4629      	mov	r1, r5
 8012bac:	f7ed fb86 	bl	80002bc <__adddf3>
 8012bb0:	4604      	mov	r4, r0
 8012bb2:	460d      	mov	r5, r1
 8012bb4:	e01c      	b.n	8012bf0 <scalbn+0x90>
 8012bb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012bba:	460b      	mov	r3, r1
 8012bbc:	3a36      	subs	r2, #54	; 0x36
 8012bbe:	4432      	add	r2, r6
 8012bc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012bc4:	428a      	cmp	r2, r1
 8012bc6:	dd0b      	ble.n	8012be0 <scalbn+0x80>
 8012bc8:	ec45 4b11 	vmov	d1, r4, r5
 8012bcc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012c38 <scalbn+0xd8>
 8012bd0:	f000 f83c 	bl	8012c4c <copysign>
 8012bd4:	a318      	add	r3, pc, #96	; (adr r3, 8012c38 <scalbn+0xd8>)
 8012bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bda:	ec51 0b10 	vmov	r0, r1, d0
 8012bde:	e7da      	b.n	8012b96 <scalbn+0x36>
 8012be0:	2a00      	cmp	r2, #0
 8012be2:	dd08      	ble.n	8012bf6 <scalbn+0x96>
 8012be4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012be8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012bec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012bf0:	ec45 4b10 	vmov	d0, r4, r5
 8012bf4:	bd70      	pop	{r4, r5, r6, pc}
 8012bf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012bfa:	da0d      	bge.n	8012c18 <scalbn+0xb8>
 8012bfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012c00:	429e      	cmp	r6, r3
 8012c02:	ec45 4b11 	vmov	d1, r4, r5
 8012c06:	dce1      	bgt.n	8012bcc <scalbn+0x6c>
 8012c08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012c30 <scalbn+0xd0>
 8012c0c:	f000 f81e 	bl	8012c4c <copysign>
 8012c10:	a307      	add	r3, pc, #28	; (adr r3, 8012c30 <scalbn+0xd0>)
 8012c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c16:	e7e0      	b.n	8012bda <scalbn+0x7a>
 8012c18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012c1c:	3236      	adds	r2, #54	; 0x36
 8012c1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012c22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012c26:	4620      	mov	r0, r4
 8012c28:	4629      	mov	r1, r5
 8012c2a:	2200      	movs	r2, #0
 8012c2c:	4b06      	ldr	r3, [pc, #24]	; (8012c48 <scalbn+0xe8>)
 8012c2e:	e7b2      	b.n	8012b96 <scalbn+0x36>
 8012c30:	c2f8f359 	.word	0xc2f8f359
 8012c34:	01a56e1f 	.word	0x01a56e1f
 8012c38:	8800759c 	.word	0x8800759c
 8012c3c:	7e37e43c 	.word	0x7e37e43c
 8012c40:	43500000 	.word	0x43500000
 8012c44:	ffff3cb0 	.word	0xffff3cb0
 8012c48:	3c900000 	.word	0x3c900000

08012c4c <copysign>:
 8012c4c:	ec51 0b10 	vmov	r0, r1, d0
 8012c50:	ee11 0a90 	vmov	r0, s3
 8012c54:	ee10 2a10 	vmov	r2, s0
 8012c58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012c5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012c60:	ea41 0300 	orr.w	r3, r1, r0
 8012c64:	ec43 2b10 	vmov	d0, r2, r3
 8012c68:	4770      	bx	lr
	...

08012c6c <__errno>:
 8012c6c:	4b01      	ldr	r3, [pc, #4]	; (8012c74 <__errno+0x8>)
 8012c6e:	6818      	ldr	r0, [r3, #0]
 8012c70:	4770      	bx	lr
 8012c72:	bf00      	nop
 8012c74:	2000000c 	.word	0x2000000c

08012c78 <__libc_init_array>:
 8012c78:	b570      	push	{r4, r5, r6, lr}
 8012c7a:	4e0d      	ldr	r6, [pc, #52]	; (8012cb0 <__libc_init_array+0x38>)
 8012c7c:	4c0d      	ldr	r4, [pc, #52]	; (8012cb4 <__libc_init_array+0x3c>)
 8012c7e:	1ba4      	subs	r4, r4, r6
 8012c80:	10a4      	asrs	r4, r4, #2
 8012c82:	2500      	movs	r5, #0
 8012c84:	42a5      	cmp	r5, r4
 8012c86:	d109      	bne.n	8012c9c <__libc_init_array+0x24>
 8012c88:	4e0b      	ldr	r6, [pc, #44]	; (8012cb8 <__libc_init_array+0x40>)
 8012c8a:	4c0c      	ldr	r4, [pc, #48]	; (8012cbc <__libc_init_array+0x44>)
 8012c8c:	f004 ff36 	bl	8017afc <_init>
 8012c90:	1ba4      	subs	r4, r4, r6
 8012c92:	10a4      	asrs	r4, r4, #2
 8012c94:	2500      	movs	r5, #0
 8012c96:	42a5      	cmp	r5, r4
 8012c98:	d105      	bne.n	8012ca6 <__libc_init_array+0x2e>
 8012c9a:	bd70      	pop	{r4, r5, r6, pc}
 8012c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012ca0:	4798      	blx	r3
 8012ca2:	3501      	adds	r5, #1
 8012ca4:	e7ee      	b.n	8012c84 <__libc_init_array+0xc>
 8012ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012caa:	4798      	blx	r3
 8012cac:	3501      	adds	r5, #1
 8012cae:	e7f2      	b.n	8012c96 <__libc_init_array+0x1e>
 8012cb0:	080186c4 	.word	0x080186c4
 8012cb4:	080186c4 	.word	0x080186c4
 8012cb8:	080186c4 	.word	0x080186c4
 8012cbc:	080186cc 	.word	0x080186cc

08012cc0 <memset>:
 8012cc0:	4402      	add	r2, r0
 8012cc2:	4603      	mov	r3, r0
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d100      	bne.n	8012cca <memset+0xa>
 8012cc8:	4770      	bx	lr
 8012cca:	f803 1b01 	strb.w	r1, [r3], #1
 8012cce:	e7f9      	b.n	8012cc4 <memset+0x4>

08012cd0 <__cvt>:
 8012cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cd4:	ec55 4b10 	vmov	r4, r5, d0
 8012cd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012cda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012cde:	2d00      	cmp	r5, #0
 8012ce0:	460e      	mov	r6, r1
 8012ce2:	4691      	mov	r9, r2
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	bfb8      	it	lt
 8012ce8:	4622      	movlt	r2, r4
 8012cea:	462b      	mov	r3, r5
 8012cec:	f027 0720 	bic.w	r7, r7, #32
 8012cf0:	bfbb      	ittet	lt
 8012cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012cf6:	461d      	movlt	r5, r3
 8012cf8:	2300      	movge	r3, #0
 8012cfa:	232d      	movlt	r3, #45	; 0x2d
 8012cfc:	bfb8      	it	lt
 8012cfe:	4614      	movlt	r4, r2
 8012d00:	2f46      	cmp	r7, #70	; 0x46
 8012d02:	700b      	strb	r3, [r1, #0]
 8012d04:	d004      	beq.n	8012d10 <__cvt+0x40>
 8012d06:	2f45      	cmp	r7, #69	; 0x45
 8012d08:	d100      	bne.n	8012d0c <__cvt+0x3c>
 8012d0a:	3601      	adds	r6, #1
 8012d0c:	2102      	movs	r1, #2
 8012d0e:	e000      	b.n	8012d12 <__cvt+0x42>
 8012d10:	2103      	movs	r1, #3
 8012d12:	ab03      	add	r3, sp, #12
 8012d14:	9301      	str	r3, [sp, #4]
 8012d16:	ab02      	add	r3, sp, #8
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	4632      	mov	r2, r6
 8012d1c:	4653      	mov	r3, sl
 8012d1e:	ec45 4b10 	vmov	d0, r4, r5
 8012d22:	f001 ffb1 	bl	8014c88 <_dtoa_r>
 8012d26:	2f47      	cmp	r7, #71	; 0x47
 8012d28:	4680      	mov	r8, r0
 8012d2a:	d102      	bne.n	8012d32 <__cvt+0x62>
 8012d2c:	f019 0f01 	tst.w	r9, #1
 8012d30:	d026      	beq.n	8012d80 <__cvt+0xb0>
 8012d32:	2f46      	cmp	r7, #70	; 0x46
 8012d34:	eb08 0906 	add.w	r9, r8, r6
 8012d38:	d111      	bne.n	8012d5e <__cvt+0x8e>
 8012d3a:	f898 3000 	ldrb.w	r3, [r8]
 8012d3e:	2b30      	cmp	r3, #48	; 0x30
 8012d40:	d10a      	bne.n	8012d58 <__cvt+0x88>
 8012d42:	2200      	movs	r2, #0
 8012d44:	2300      	movs	r3, #0
 8012d46:	4620      	mov	r0, r4
 8012d48:	4629      	mov	r1, r5
 8012d4a:	f7ed fed5 	bl	8000af8 <__aeabi_dcmpeq>
 8012d4e:	b918      	cbnz	r0, 8012d58 <__cvt+0x88>
 8012d50:	f1c6 0601 	rsb	r6, r6, #1
 8012d54:	f8ca 6000 	str.w	r6, [sl]
 8012d58:	f8da 3000 	ldr.w	r3, [sl]
 8012d5c:	4499      	add	r9, r3
 8012d5e:	2200      	movs	r2, #0
 8012d60:	2300      	movs	r3, #0
 8012d62:	4620      	mov	r0, r4
 8012d64:	4629      	mov	r1, r5
 8012d66:	f7ed fec7 	bl	8000af8 <__aeabi_dcmpeq>
 8012d6a:	b938      	cbnz	r0, 8012d7c <__cvt+0xac>
 8012d6c:	2230      	movs	r2, #48	; 0x30
 8012d6e:	9b03      	ldr	r3, [sp, #12]
 8012d70:	454b      	cmp	r3, r9
 8012d72:	d205      	bcs.n	8012d80 <__cvt+0xb0>
 8012d74:	1c59      	adds	r1, r3, #1
 8012d76:	9103      	str	r1, [sp, #12]
 8012d78:	701a      	strb	r2, [r3, #0]
 8012d7a:	e7f8      	b.n	8012d6e <__cvt+0x9e>
 8012d7c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012d80:	9b03      	ldr	r3, [sp, #12]
 8012d82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012d84:	eba3 0308 	sub.w	r3, r3, r8
 8012d88:	4640      	mov	r0, r8
 8012d8a:	6013      	str	r3, [r2, #0]
 8012d8c:	b004      	add	sp, #16
 8012d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012d92 <__exponent>:
 8012d92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012d94:	2900      	cmp	r1, #0
 8012d96:	4604      	mov	r4, r0
 8012d98:	bfba      	itte	lt
 8012d9a:	4249      	neglt	r1, r1
 8012d9c:	232d      	movlt	r3, #45	; 0x2d
 8012d9e:	232b      	movge	r3, #43	; 0x2b
 8012da0:	2909      	cmp	r1, #9
 8012da2:	f804 2b02 	strb.w	r2, [r4], #2
 8012da6:	7043      	strb	r3, [r0, #1]
 8012da8:	dd20      	ble.n	8012dec <__exponent+0x5a>
 8012daa:	f10d 0307 	add.w	r3, sp, #7
 8012dae:	461f      	mov	r7, r3
 8012db0:	260a      	movs	r6, #10
 8012db2:	fb91 f5f6 	sdiv	r5, r1, r6
 8012db6:	fb06 1115 	mls	r1, r6, r5, r1
 8012dba:	3130      	adds	r1, #48	; 0x30
 8012dbc:	2d09      	cmp	r5, #9
 8012dbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012dc2:	f103 32ff 	add.w	r2, r3, #4294967295
 8012dc6:	4629      	mov	r1, r5
 8012dc8:	dc09      	bgt.n	8012dde <__exponent+0x4c>
 8012dca:	3130      	adds	r1, #48	; 0x30
 8012dcc:	3b02      	subs	r3, #2
 8012dce:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012dd2:	42bb      	cmp	r3, r7
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	d304      	bcc.n	8012de2 <__exponent+0x50>
 8012dd8:	1a10      	subs	r0, r2, r0
 8012dda:	b003      	add	sp, #12
 8012ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dde:	4613      	mov	r3, r2
 8012de0:	e7e7      	b.n	8012db2 <__exponent+0x20>
 8012de2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012de6:	f804 2b01 	strb.w	r2, [r4], #1
 8012dea:	e7f2      	b.n	8012dd2 <__exponent+0x40>
 8012dec:	2330      	movs	r3, #48	; 0x30
 8012dee:	4419      	add	r1, r3
 8012df0:	7083      	strb	r3, [r0, #2]
 8012df2:	1d02      	adds	r2, r0, #4
 8012df4:	70c1      	strb	r1, [r0, #3]
 8012df6:	e7ef      	b.n	8012dd8 <__exponent+0x46>

08012df8 <_printf_float>:
 8012df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012dfc:	b08d      	sub	sp, #52	; 0x34
 8012dfe:	460c      	mov	r4, r1
 8012e00:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012e04:	4616      	mov	r6, r2
 8012e06:	461f      	mov	r7, r3
 8012e08:	4605      	mov	r5, r0
 8012e0a:	f003 f9a9 	bl	8016160 <_localeconv_r>
 8012e0e:	6803      	ldr	r3, [r0, #0]
 8012e10:	9304      	str	r3, [sp, #16]
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7ed f9f4 	bl	8000200 <strlen>
 8012e18:	2300      	movs	r3, #0
 8012e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8012e1c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e20:	9005      	str	r0, [sp, #20]
 8012e22:	3307      	adds	r3, #7
 8012e24:	f023 0307 	bic.w	r3, r3, #7
 8012e28:	f103 0208 	add.w	r2, r3, #8
 8012e2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012e30:	f8d4 b000 	ldr.w	fp, [r4]
 8012e34:	f8c8 2000 	str.w	r2, [r8]
 8012e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012e40:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012e44:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012e48:	9307      	str	r3, [sp, #28]
 8012e4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8012e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e52:	4ba7      	ldr	r3, [pc, #668]	; (80130f0 <_printf_float+0x2f8>)
 8012e54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e58:	f7ed fe80 	bl	8000b5c <__aeabi_dcmpun>
 8012e5c:	bb70      	cbnz	r0, 8012ebc <_printf_float+0xc4>
 8012e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012e62:	4ba3      	ldr	r3, [pc, #652]	; (80130f0 <_printf_float+0x2f8>)
 8012e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012e68:	f7ed fe5a 	bl	8000b20 <__aeabi_dcmple>
 8012e6c:	bb30      	cbnz	r0, 8012ebc <_printf_float+0xc4>
 8012e6e:	2200      	movs	r2, #0
 8012e70:	2300      	movs	r3, #0
 8012e72:	4640      	mov	r0, r8
 8012e74:	4649      	mov	r1, r9
 8012e76:	f7ed fe49 	bl	8000b0c <__aeabi_dcmplt>
 8012e7a:	b110      	cbz	r0, 8012e82 <_printf_float+0x8a>
 8012e7c:	232d      	movs	r3, #45	; 0x2d
 8012e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e82:	4a9c      	ldr	r2, [pc, #624]	; (80130f4 <_printf_float+0x2fc>)
 8012e84:	4b9c      	ldr	r3, [pc, #624]	; (80130f8 <_printf_float+0x300>)
 8012e86:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012e8a:	bf8c      	ite	hi
 8012e8c:	4690      	movhi	r8, r2
 8012e8e:	4698      	movls	r8, r3
 8012e90:	2303      	movs	r3, #3
 8012e92:	f02b 0204 	bic.w	r2, fp, #4
 8012e96:	6123      	str	r3, [r4, #16]
 8012e98:	6022      	str	r2, [r4, #0]
 8012e9a:	f04f 0900 	mov.w	r9, #0
 8012e9e:	9700      	str	r7, [sp, #0]
 8012ea0:	4633      	mov	r3, r6
 8012ea2:	aa0b      	add	r2, sp, #44	; 0x2c
 8012ea4:	4621      	mov	r1, r4
 8012ea6:	4628      	mov	r0, r5
 8012ea8:	f000 f9e6 	bl	8013278 <_printf_common>
 8012eac:	3001      	adds	r0, #1
 8012eae:	f040 808d 	bne.w	8012fcc <_printf_float+0x1d4>
 8012eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb6:	b00d      	add	sp, #52	; 0x34
 8012eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ebc:	4642      	mov	r2, r8
 8012ebe:	464b      	mov	r3, r9
 8012ec0:	4640      	mov	r0, r8
 8012ec2:	4649      	mov	r1, r9
 8012ec4:	f7ed fe4a 	bl	8000b5c <__aeabi_dcmpun>
 8012ec8:	b110      	cbz	r0, 8012ed0 <_printf_float+0xd8>
 8012eca:	4a8c      	ldr	r2, [pc, #560]	; (80130fc <_printf_float+0x304>)
 8012ecc:	4b8c      	ldr	r3, [pc, #560]	; (8013100 <_printf_float+0x308>)
 8012ece:	e7da      	b.n	8012e86 <_printf_float+0x8e>
 8012ed0:	6861      	ldr	r1, [r4, #4]
 8012ed2:	1c4b      	adds	r3, r1, #1
 8012ed4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012ed8:	a80a      	add	r0, sp, #40	; 0x28
 8012eda:	d13e      	bne.n	8012f5a <_printf_float+0x162>
 8012edc:	2306      	movs	r3, #6
 8012ede:	6063      	str	r3, [r4, #4]
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012ee6:	ab09      	add	r3, sp, #36	; 0x24
 8012ee8:	9300      	str	r3, [sp, #0]
 8012eea:	ec49 8b10 	vmov	d0, r8, r9
 8012eee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012ef2:	6022      	str	r2, [r4, #0]
 8012ef4:	f8cd a004 	str.w	sl, [sp, #4]
 8012ef8:	6861      	ldr	r1, [r4, #4]
 8012efa:	4628      	mov	r0, r5
 8012efc:	f7ff fee8 	bl	8012cd0 <__cvt>
 8012f00:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012f04:	2b47      	cmp	r3, #71	; 0x47
 8012f06:	4680      	mov	r8, r0
 8012f08:	d109      	bne.n	8012f1e <_printf_float+0x126>
 8012f0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f0c:	1cd8      	adds	r0, r3, #3
 8012f0e:	db02      	blt.n	8012f16 <_printf_float+0x11e>
 8012f10:	6862      	ldr	r2, [r4, #4]
 8012f12:	4293      	cmp	r3, r2
 8012f14:	dd47      	ble.n	8012fa6 <_printf_float+0x1ae>
 8012f16:	f1aa 0a02 	sub.w	sl, sl, #2
 8012f1a:	fa5f fa8a 	uxtb.w	sl, sl
 8012f1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012f22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012f24:	d824      	bhi.n	8012f70 <_printf_float+0x178>
 8012f26:	3901      	subs	r1, #1
 8012f28:	4652      	mov	r2, sl
 8012f2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012f2e:	9109      	str	r1, [sp, #36]	; 0x24
 8012f30:	f7ff ff2f 	bl	8012d92 <__exponent>
 8012f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f36:	1813      	adds	r3, r2, r0
 8012f38:	2a01      	cmp	r2, #1
 8012f3a:	4681      	mov	r9, r0
 8012f3c:	6123      	str	r3, [r4, #16]
 8012f3e:	dc02      	bgt.n	8012f46 <_printf_float+0x14e>
 8012f40:	6822      	ldr	r2, [r4, #0]
 8012f42:	07d1      	lsls	r1, r2, #31
 8012f44:	d501      	bpl.n	8012f4a <_printf_float+0x152>
 8012f46:	3301      	adds	r3, #1
 8012f48:	6123      	str	r3, [r4, #16]
 8012f4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d0a5      	beq.n	8012e9e <_printf_float+0xa6>
 8012f52:	232d      	movs	r3, #45	; 0x2d
 8012f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f58:	e7a1      	b.n	8012e9e <_printf_float+0xa6>
 8012f5a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012f5e:	f000 8177 	beq.w	8013250 <_printf_float+0x458>
 8012f62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012f66:	d1bb      	bne.n	8012ee0 <_printf_float+0xe8>
 8012f68:	2900      	cmp	r1, #0
 8012f6a:	d1b9      	bne.n	8012ee0 <_printf_float+0xe8>
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	e7b6      	b.n	8012ede <_printf_float+0xe6>
 8012f70:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012f74:	d119      	bne.n	8012faa <_printf_float+0x1b2>
 8012f76:	2900      	cmp	r1, #0
 8012f78:	6863      	ldr	r3, [r4, #4]
 8012f7a:	dd0c      	ble.n	8012f96 <_printf_float+0x19e>
 8012f7c:	6121      	str	r1, [r4, #16]
 8012f7e:	b913      	cbnz	r3, 8012f86 <_printf_float+0x18e>
 8012f80:	6822      	ldr	r2, [r4, #0]
 8012f82:	07d2      	lsls	r2, r2, #31
 8012f84:	d502      	bpl.n	8012f8c <_printf_float+0x194>
 8012f86:	3301      	adds	r3, #1
 8012f88:	440b      	add	r3, r1
 8012f8a:	6123      	str	r3, [r4, #16]
 8012f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f8e:	65a3      	str	r3, [r4, #88]	; 0x58
 8012f90:	f04f 0900 	mov.w	r9, #0
 8012f94:	e7d9      	b.n	8012f4a <_printf_float+0x152>
 8012f96:	b913      	cbnz	r3, 8012f9e <_printf_float+0x1a6>
 8012f98:	6822      	ldr	r2, [r4, #0]
 8012f9a:	07d0      	lsls	r0, r2, #31
 8012f9c:	d501      	bpl.n	8012fa2 <_printf_float+0x1aa>
 8012f9e:	3302      	adds	r3, #2
 8012fa0:	e7f3      	b.n	8012f8a <_printf_float+0x192>
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	e7f1      	b.n	8012f8a <_printf_float+0x192>
 8012fa6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012faa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	db05      	blt.n	8012fbe <_printf_float+0x1c6>
 8012fb2:	6822      	ldr	r2, [r4, #0]
 8012fb4:	6123      	str	r3, [r4, #16]
 8012fb6:	07d1      	lsls	r1, r2, #31
 8012fb8:	d5e8      	bpl.n	8012f8c <_printf_float+0x194>
 8012fba:	3301      	adds	r3, #1
 8012fbc:	e7e5      	b.n	8012f8a <_printf_float+0x192>
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	bfd4      	ite	le
 8012fc2:	f1c3 0302 	rsble	r3, r3, #2
 8012fc6:	2301      	movgt	r3, #1
 8012fc8:	4413      	add	r3, r2
 8012fca:	e7de      	b.n	8012f8a <_printf_float+0x192>
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	055a      	lsls	r2, r3, #21
 8012fd0:	d407      	bmi.n	8012fe2 <_printf_float+0x1ea>
 8012fd2:	6923      	ldr	r3, [r4, #16]
 8012fd4:	4642      	mov	r2, r8
 8012fd6:	4631      	mov	r1, r6
 8012fd8:	4628      	mov	r0, r5
 8012fda:	47b8      	blx	r7
 8012fdc:	3001      	adds	r0, #1
 8012fde:	d12b      	bne.n	8013038 <_printf_float+0x240>
 8012fe0:	e767      	b.n	8012eb2 <_printf_float+0xba>
 8012fe2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012fe6:	f240 80dc 	bls.w	80131a2 <_printf_float+0x3aa>
 8012fea:	2200      	movs	r2, #0
 8012fec:	2300      	movs	r3, #0
 8012fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ff2:	f7ed fd81 	bl	8000af8 <__aeabi_dcmpeq>
 8012ff6:	2800      	cmp	r0, #0
 8012ff8:	d033      	beq.n	8013062 <_printf_float+0x26a>
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	4a41      	ldr	r2, [pc, #260]	; (8013104 <_printf_float+0x30c>)
 8012ffe:	4631      	mov	r1, r6
 8013000:	4628      	mov	r0, r5
 8013002:	47b8      	blx	r7
 8013004:	3001      	adds	r0, #1
 8013006:	f43f af54 	beq.w	8012eb2 <_printf_float+0xba>
 801300a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801300e:	429a      	cmp	r2, r3
 8013010:	db02      	blt.n	8013018 <_printf_float+0x220>
 8013012:	6823      	ldr	r3, [r4, #0]
 8013014:	07d8      	lsls	r0, r3, #31
 8013016:	d50f      	bpl.n	8013038 <_printf_float+0x240>
 8013018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801301c:	4631      	mov	r1, r6
 801301e:	4628      	mov	r0, r5
 8013020:	47b8      	blx	r7
 8013022:	3001      	adds	r0, #1
 8013024:	f43f af45 	beq.w	8012eb2 <_printf_float+0xba>
 8013028:	f04f 0800 	mov.w	r8, #0
 801302c:	f104 091a 	add.w	r9, r4, #26
 8013030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013032:	3b01      	subs	r3, #1
 8013034:	4543      	cmp	r3, r8
 8013036:	dc09      	bgt.n	801304c <_printf_float+0x254>
 8013038:	6823      	ldr	r3, [r4, #0]
 801303a:	079b      	lsls	r3, r3, #30
 801303c:	f100 8103 	bmi.w	8013246 <_printf_float+0x44e>
 8013040:	68e0      	ldr	r0, [r4, #12]
 8013042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013044:	4298      	cmp	r0, r3
 8013046:	bfb8      	it	lt
 8013048:	4618      	movlt	r0, r3
 801304a:	e734      	b.n	8012eb6 <_printf_float+0xbe>
 801304c:	2301      	movs	r3, #1
 801304e:	464a      	mov	r2, r9
 8013050:	4631      	mov	r1, r6
 8013052:	4628      	mov	r0, r5
 8013054:	47b8      	blx	r7
 8013056:	3001      	adds	r0, #1
 8013058:	f43f af2b 	beq.w	8012eb2 <_printf_float+0xba>
 801305c:	f108 0801 	add.w	r8, r8, #1
 8013060:	e7e6      	b.n	8013030 <_printf_float+0x238>
 8013062:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013064:	2b00      	cmp	r3, #0
 8013066:	dc2b      	bgt.n	80130c0 <_printf_float+0x2c8>
 8013068:	2301      	movs	r3, #1
 801306a:	4a26      	ldr	r2, [pc, #152]	; (8013104 <_printf_float+0x30c>)
 801306c:	4631      	mov	r1, r6
 801306e:	4628      	mov	r0, r5
 8013070:	47b8      	blx	r7
 8013072:	3001      	adds	r0, #1
 8013074:	f43f af1d 	beq.w	8012eb2 <_printf_float+0xba>
 8013078:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801307a:	b923      	cbnz	r3, 8013086 <_printf_float+0x28e>
 801307c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801307e:	b913      	cbnz	r3, 8013086 <_printf_float+0x28e>
 8013080:	6823      	ldr	r3, [r4, #0]
 8013082:	07d9      	lsls	r1, r3, #31
 8013084:	d5d8      	bpl.n	8013038 <_printf_float+0x240>
 8013086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801308a:	4631      	mov	r1, r6
 801308c:	4628      	mov	r0, r5
 801308e:	47b8      	blx	r7
 8013090:	3001      	adds	r0, #1
 8013092:	f43f af0e 	beq.w	8012eb2 <_printf_float+0xba>
 8013096:	f04f 0900 	mov.w	r9, #0
 801309a:	f104 0a1a 	add.w	sl, r4, #26
 801309e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130a0:	425b      	negs	r3, r3
 80130a2:	454b      	cmp	r3, r9
 80130a4:	dc01      	bgt.n	80130aa <_printf_float+0x2b2>
 80130a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130a8:	e794      	b.n	8012fd4 <_printf_float+0x1dc>
 80130aa:	2301      	movs	r3, #1
 80130ac:	4652      	mov	r2, sl
 80130ae:	4631      	mov	r1, r6
 80130b0:	4628      	mov	r0, r5
 80130b2:	47b8      	blx	r7
 80130b4:	3001      	adds	r0, #1
 80130b6:	f43f aefc 	beq.w	8012eb2 <_printf_float+0xba>
 80130ba:	f109 0901 	add.w	r9, r9, #1
 80130be:	e7ee      	b.n	801309e <_printf_float+0x2a6>
 80130c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80130c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80130c4:	429a      	cmp	r2, r3
 80130c6:	bfa8      	it	ge
 80130c8:	461a      	movge	r2, r3
 80130ca:	2a00      	cmp	r2, #0
 80130cc:	4691      	mov	r9, r2
 80130ce:	dd07      	ble.n	80130e0 <_printf_float+0x2e8>
 80130d0:	4613      	mov	r3, r2
 80130d2:	4631      	mov	r1, r6
 80130d4:	4642      	mov	r2, r8
 80130d6:	4628      	mov	r0, r5
 80130d8:	47b8      	blx	r7
 80130da:	3001      	adds	r0, #1
 80130dc:	f43f aee9 	beq.w	8012eb2 <_printf_float+0xba>
 80130e0:	f104 031a 	add.w	r3, r4, #26
 80130e4:	f04f 0b00 	mov.w	fp, #0
 80130e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80130ec:	9306      	str	r3, [sp, #24]
 80130ee:	e015      	b.n	801311c <_printf_float+0x324>
 80130f0:	7fefffff 	.word	0x7fefffff
 80130f4:	08018388 	.word	0x08018388
 80130f8:	08018384 	.word	0x08018384
 80130fc:	08018390 	.word	0x08018390
 8013100:	0801838c 	.word	0x0801838c
 8013104:	080185b3 	.word	0x080185b3
 8013108:	2301      	movs	r3, #1
 801310a:	9a06      	ldr	r2, [sp, #24]
 801310c:	4631      	mov	r1, r6
 801310e:	4628      	mov	r0, r5
 8013110:	47b8      	blx	r7
 8013112:	3001      	adds	r0, #1
 8013114:	f43f aecd 	beq.w	8012eb2 <_printf_float+0xba>
 8013118:	f10b 0b01 	add.w	fp, fp, #1
 801311c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8013120:	ebaa 0309 	sub.w	r3, sl, r9
 8013124:	455b      	cmp	r3, fp
 8013126:	dcef      	bgt.n	8013108 <_printf_float+0x310>
 8013128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801312c:	429a      	cmp	r2, r3
 801312e:	44d0      	add	r8, sl
 8013130:	db15      	blt.n	801315e <_printf_float+0x366>
 8013132:	6823      	ldr	r3, [r4, #0]
 8013134:	07da      	lsls	r2, r3, #31
 8013136:	d412      	bmi.n	801315e <_printf_float+0x366>
 8013138:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801313a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801313c:	eba3 020a 	sub.w	r2, r3, sl
 8013140:	eba3 0a01 	sub.w	sl, r3, r1
 8013144:	4592      	cmp	sl, r2
 8013146:	bfa8      	it	ge
 8013148:	4692      	movge	sl, r2
 801314a:	f1ba 0f00 	cmp.w	sl, #0
 801314e:	dc0e      	bgt.n	801316e <_printf_float+0x376>
 8013150:	f04f 0800 	mov.w	r8, #0
 8013154:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013158:	f104 091a 	add.w	r9, r4, #26
 801315c:	e019      	b.n	8013192 <_printf_float+0x39a>
 801315e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013162:	4631      	mov	r1, r6
 8013164:	4628      	mov	r0, r5
 8013166:	47b8      	blx	r7
 8013168:	3001      	adds	r0, #1
 801316a:	d1e5      	bne.n	8013138 <_printf_float+0x340>
 801316c:	e6a1      	b.n	8012eb2 <_printf_float+0xba>
 801316e:	4653      	mov	r3, sl
 8013170:	4642      	mov	r2, r8
 8013172:	4631      	mov	r1, r6
 8013174:	4628      	mov	r0, r5
 8013176:	47b8      	blx	r7
 8013178:	3001      	adds	r0, #1
 801317a:	d1e9      	bne.n	8013150 <_printf_float+0x358>
 801317c:	e699      	b.n	8012eb2 <_printf_float+0xba>
 801317e:	2301      	movs	r3, #1
 8013180:	464a      	mov	r2, r9
 8013182:	4631      	mov	r1, r6
 8013184:	4628      	mov	r0, r5
 8013186:	47b8      	blx	r7
 8013188:	3001      	adds	r0, #1
 801318a:	f43f ae92 	beq.w	8012eb2 <_printf_float+0xba>
 801318e:	f108 0801 	add.w	r8, r8, #1
 8013192:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013196:	1a9b      	subs	r3, r3, r2
 8013198:	eba3 030a 	sub.w	r3, r3, sl
 801319c:	4543      	cmp	r3, r8
 801319e:	dcee      	bgt.n	801317e <_printf_float+0x386>
 80131a0:	e74a      	b.n	8013038 <_printf_float+0x240>
 80131a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80131a4:	2a01      	cmp	r2, #1
 80131a6:	dc01      	bgt.n	80131ac <_printf_float+0x3b4>
 80131a8:	07db      	lsls	r3, r3, #31
 80131aa:	d53a      	bpl.n	8013222 <_printf_float+0x42a>
 80131ac:	2301      	movs	r3, #1
 80131ae:	4642      	mov	r2, r8
 80131b0:	4631      	mov	r1, r6
 80131b2:	4628      	mov	r0, r5
 80131b4:	47b8      	blx	r7
 80131b6:	3001      	adds	r0, #1
 80131b8:	f43f ae7b 	beq.w	8012eb2 <_printf_float+0xba>
 80131bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80131c0:	4631      	mov	r1, r6
 80131c2:	4628      	mov	r0, r5
 80131c4:	47b8      	blx	r7
 80131c6:	3001      	adds	r0, #1
 80131c8:	f108 0801 	add.w	r8, r8, #1
 80131cc:	f43f ae71 	beq.w	8012eb2 <_printf_float+0xba>
 80131d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131d2:	2200      	movs	r2, #0
 80131d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80131d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80131dc:	2300      	movs	r3, #0
 80131de:	f7ed fc8b 	bl	8000af8 <__aeabi_dcmpeq>
 80131e2:	b9c8      	cbnz	r0, 8013218 <_printf_float+0x420>
 80131e4:	4653      	mov	r3, sl
 80131e6:	4642      	mov	r2, r8
 80131e8:	4631      	mov	r1, r6
 80131ea:	4628      	mov	r0, r5
 80131ec:	47b8      	blx	r7
 80131ee:	3001      	adds	r0, #1
 80131f0:	d10e      	bne.n	8013210 <_printf_float+0x418>
 80131f2:	e65e      	b.n	8012eb2 <_printf_float+0xba>
 80131f4:	2301      	movs	r3, #1
 80131f6:	4652      	mov	r2, sl
 80131f8:	4631      	mov	r1, r6
 80131fa:	4628      	mov	r0, r5
 80131fc:	47b8      	blx	r7
 80131fe:	3001      	adds	r0, #1
 8013200:	f43f ae57 	beq.w	8012eb2 <_printf_float+0xba>
 8013204:	f108 0801 	add.w	r8, r8, #1
 8013208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801320a:	3b01      	subs	r3, #1
 801320c:	4543      	cmp	r3, r8
 801320e:	dcf1      	bgt.n	80131f4 <_printf_float+0x3fc>
 8013210:	464b      	mov	r3, r9
 8013212:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013216:	e6de      	b.n	8012fd6 <_printf_float+0x1de>
 8013218:	f04f 0800 	mov.w	r8, #0
 801321c:	f104 0a1a 	add.w	sl, r4, #26
 8013220:	e7f2      	b.n	8013208 <_printf_float+0x410>
 8013222:	2301      	movs	r3, #1
 8013224:	e7df      	b.n	80131e6 <_printf_float+0x3ee>
 8013226:	2301      	movs	r3, #1
 8013228:	464a      	mov	r2, r9
 801322a:	4631      	mov	r1, r6
 801322c:	4628      	mov	r0, r5
 801322e:	47b8      	blx	r7
 8013230:	3001      	adds	r0, #1
 8013232:	f43f ae3e 	beq.w	8012eb2 <_printf_float+0xba>
 8013236:	f108 0801 	add.w	r8, r8, #1
 801323a:	68e3      	ldr	r3, [r4, #12]
 801323c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801323e:	1a9b      	subs	r3, r3, r2
 8013240:	4543      	cmp	r3, r8
 8013242:	dcf0      	bgt.n	8013226 <_printf_float+0x42e>
 8013244:	e6fc      	b.n	8013040 <_printf_float+0x248>
 8013246:	f04f 0800 	mov.w	r8, #0
 801324a:	f104 0919 	add.w	r9, r4, #25
 801324e:	e7f4      	b.n	801323a <_printf_float+0x442>
 8013250:	2900      	cmp	r1, #0
 8013252:	f43f ae8b 	beq.w	8012f6c <_printf_float+0x174>
 8013256:	2300      	movs	r3, #0
 8013258:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801325c:	ab09      	add	r3, sp, #36	; 0x24
 801325e:	9300      	str	r3, [sp, #0]
 8013260:	ec49 8b10 	vmov	d0, r8, r9
 8013264:	6022      	str	r2, [r4, #0]
 8013266:	f8cd a004 	str.w	sl, [sp, #4]
 801326a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801326e:	4628      	mov	r0, r5
 8013270:	f7ff fd2e 	bl	8012cd0 <__cvt>
 8013274:	4680      	mov	r8, r0
 8013276:	e648      	b.n	8012f0a <_printf_float+0x112>

08013278 <_printf_common>:
 8013278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801327c:	4691      	mov	r9, r2
 801327e:	461f      	mov	r7, r3
 8013280:	688a      	ldr	r2, [r1, #8]
 8013282:	690b      	ldr	r3, [r1, #16]
 8013284:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013288:	4293      	cmp	r3, r2
 801328a:	bfb8      	it	lt
 801328c:	4613      	movlt	r3, r2
 801328e:	f8c9 3000 	str.w	r3, [r9]
 8013292:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013296:	4606      	mov	r6, r0
 8013298:	460c      	mov	r4, r1
 801329a:	b112      	cbz	r2, 80132a2 <_printf_common+0x2a>
 801329c:	3301      	adds	r3, #1
 801329e:	f8c9 3000 	str.w	r3, [r9]
 80132a2:	6823      	ldr	r3, [r4, #0]
 80132a4:	0699      	lsls	r1, r3, #26
 80132a6:	bf42      	ittt	mi
 80132a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80132ac:	3302      	addmi	r3, #2
 80132ae:	f8c9 3000 	strmi.w	r3, [r9]
 80132b2:	6825      	ldr	r5, [r4, #0]
 80132b4:	f015 0506 	ands.w	r5, r5, #6
 80132b8:	d107      	bne.n	80132ca <_printf_common+0x52>
 80132ba:	f104 0a19 	add.w	sl, r4, #25
 80132be:	68e3      	ldr	r3, [r4, #12]
 80132c0:	f8d9 2000 	ldr.w	r2, [r9]
 80132c4:	1a9b      	subs	r3, r3, r2
 80132c6:	42ab      	cmp	r3, r5
 80132c8:	dc28      	bgt.n	801331c <_printf_common+0xa4>
 80132ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80132ce:	6822      	ldr	r2, [r4, #0]
 80132d0:	3300      	adds	r3, #0
 80132d2:	bf18      	it	ne
 80132d4:	2301      	movne	r3, #1
 80132d6:	0692      	lsls	r2, r2, #26
 80132d8:	d42d      	bmi.n	8013336 <_printf_common+0xbe>
 80132da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80132de:	4639      	mov	r1, r7
 80132e0:	4630      	mov	r0, r6
 80132e2:	47c0      	blx	r8
 80132e4:	3001      	adds	r0, #1
 80132e6:	d020      	beq.n	801332a <_printf_common+0xb2>
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	68e5      	ldr	r5, [r4, #12]
 80132ec:	f8d9 2000 	ldr.w	r2, [r9]
 80132f0:	f003 0306 	and.w	r3, r3, #6
 80132f4:	2b04      	cmp	r3, #4
 80132f6:	bf08      	it	eq
 80132f8:	1aad      	subeq	r5, r5, r2
 80132fa:	68a3      	ldr	r3, [r4, #8]
 80132fc:	6922      	ldr	r2, [r4, #16]
 80132fe:	bf0c      	ite	eq
 8013300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013304:	2500      	movne	r5, #0
 8013306:	4293      	cmp	r3, r2
 8013308:	bfc4      	itt	gt
 801330a:	1a9b      	subgt	r3, r3, r2
 801330c:	18ed      	addgt	r5, r5, r3
 801330e:	f04f 0900 	mov.w	r9, #0
 8013312:	341a      	adds	r4, #26
 8013314:	454d      	cmp	r5, r9
 8013316:	d11a      	bne.n	801334e <_printf_common+0xd6>
 8013318:	2000      	movs	r0, #0
 801331a:	e008      	b.n	801332e <_printf_common+0xb6>
 801331c:	2301      	movs	r3, #1
 801331e:	4652      	mov	r2, sl
 8013320:	4639      	mov	r1, r7
 8013322:	4630      	mov	r0, r6
 8013324:	47c0      	blx	r8
 8013326:	3001      	adds	r0, #1
 8013328:	d103      	bne.n	8013332 <_printf_common+0xba>
 801332a:	f04f 30ff 	mov.w	r0, #4294967295
 801332e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013332:	3501      	adds	r5, #1
 8013334:	e7c3      	b.n	80132be <_printf_common+0x46>
 8013336:	18e1      	adds	r1, r4, r3
 8013338:	1c5a      	adds	r2, r3, #1
 801333a:	2030      	movs	r0, #48	; 0x30
 801333c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013340:	4422      	add	r2, r4
 8013342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013346:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801334a:	3302      	adds	r3, #2
 801334c:	e7c5      	b.n	80132da <_printf_common+0x62>
 801334e:	2301      	movs	r3, #1
 8013350:	4622      	mov	r2, r4
 8013352:	4639      	mov	r1, r7
 8013354:	4630      	mov	r0, r6
 8013356:	47c0      	blx	r8
 8013358:	3001      	adds	r0, #1
 801335a:	d0e6      	beq.n	801332a <_printf_common+0xb2>
 801335c:	f109 0901 	add.w	r9, r9, #1
 8013360:	e7d8      	b.n	8013314 <_printf_common+0x9c>
	...

08013364 <_printf_i>:
 8013364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013368:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801336c:	460c      	mov	r4, r1
 801336e:	7e09      	ldrb	r1, [r1, #24]
 8013370:	b085      	sub	sp, #20
 8013372:	296e      	cmp	r1, #110	; 0x6e
 8013374:	4617      	mov	r7, r2
 8013376:	4606      	mov	r6, r0
 8013378:	4698      	mov	r8, r3
 801337a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801337c:	f000 80b3 	beq.w	80134e6 <_printf_i+0x182>
 8013380:	d822      	bhi.n	80133c8 <_printf_i+0x64>
 8013382:	2963      	cmp	r1, #99	; 0x63
 8013384:	d036      	beq.n	80133f4 <_printf_i+0x90>
 8013386:	d80a      	bhi.n	801339e <_printf_i+0x3a>
 8013388:	2900      	cmp	r1, #0
 801338a:	f000 80b9 	beq.w	8013500 <_printf_i+0x19c>
 801338e:	2958      	cmp	r1, #88	; 0x58
 8013390:	f000 8083 	beq.w	801349a <_printf_i+0x136>
 8013394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013398:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801339c:	e032      	b.n	8013404 <_printf_i+0xa0>
 801339e:	2964      	cmp	r1, #100	; 0x64
 80133a0:	d001      	beq.n	80133a6 <_printf_i+0x42>
 80133a2:	2969      	cmp	r1, #105	; 0x69
 80133a4:	d1f6      	bne.n	8013394 <_printf_i+0x30>
 80133a6:	6820      	ldr	r0, [r4, #0]
 80133a8:	6813      	ldr	r3, [r2, #0]
 80133aa:	0605      	lsls	r5, r0, #24
 80133ac:	f103 0104 	add.w	r1, r3, #4
 80133b0:	d52a      	bpl.n	8013408 <_printf_i+0xa4>
 80133b2:	681b      	ldr	r3, [r3, #0]
 80133b4:	6011      	str	r1, [r2, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	da03      	bge.n	80133c2 <_printf_i+0x5e>
 80133ba:	222d      	movs	r2, #45	; 0x2d
 80133bc:	425b      	negs	r3, r3
 80133be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80133c2:	486f      	ldr	r0, [pc, #444]	; (8013580 <_printf_i+0x21c>)
 80133c4:	220a      	movs	r2, #10
 80133c6:	e039      	b.n	801343c <_printf_i+0xd8>
 80133c8:	2973      	cmp	r1, #115	; 0x73
 80133ca:	f000 809d 	beq.w	8013508 <_printf_i+0x1a4>
 80133ce:	d808      	bhi.n	80133e2 <_printf_i+0x7e>
 80133d0:	296f      	cmp	r1, #111	; 0x6f
 80133d2:	d020      	beq.n	8013416 <_printf_i+0xb2>
 80133d4:	2970      	cmp	r1, #112	; 0x70
 80133d6:	d1dd      	bne.n	8013394 <_printf_i+0x30>
 80133d8:	6823      	ldr	r3, [r4, #0]
 80133da:	f043 0320 	orr.w	r3, r3, #32
 80133de:	6023      	str	r3, [r4, #0]
 80133e0:	e003      	b.n	80133ea <_printf_i+0x86>
 80133e2:	2975      	cmp	r1, #117	; 0x75
 80133e4:	d017      	beq.n	8013416 <_printf_i+0xb2>
 80133e6:	2978      	cmp	r1, #120	; 0x78
 80133e8:	d1d4      	bne.n	8013394 <_printf_i+0x30>
 80133ea:	2378      	movs	r3, #120	; 0x78
 80133ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133f0:	4864      	ldr	r0, [pc, #400]	; (8013584 <_printf_i+0x220>)
 80133f2:	e055      	b.n	80134a0 <_printf_i+0x13c>
 80133f4:	6813      	ldr	r3, [r2, #0]
 80133f6:	1d19      	adds	r1, r3, #4
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	6011      	str	r1, [r2, #0]
 80133fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013404:	2301      	movs	r3, #1
 8013406:	e08c      	b.n	8013522 <_printf_i+0x1be>
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	6011      	str	r1, [r2, #0]
 801340c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013410:	bf18      	it	ne
 8013412:	b21b      	sxthne	r3, r3
 8013414:	e7cf      	b.n	80133b6 <_printf_i+0x52>
 8013416:	6813      	ldr	r3, [r2, #0]
 8013418:	6825      	ldr	r5, [r4, #0]
 801341a:	1d18      	adds	r0, r3, #4
 801341c:	6010      	str	r0, [r2, #0]
 801341e:	0628      	lsls	r0, r5, #24
 8013420:	d501      	bpl.n	8013426 <_printf_i+0xc2>
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	e002      	b.n	801342c <_printf_i+0xc8>
 8013426:	0668      	lsls	r0, r5, #25
 8013428:	d5fb      	bpl.n	8013422 <_printf_i+0xbe>
 801342a:	881b      	ldrh	r3, [r3, #0]
 801342c:	4854      	ldr	r0, [pc, #336]	; (8013580 <_printf_i+0x21c>)
 801342e:	296f      	cmp	r1, #111	; 0x6f
 8013430:	bf14      	ite	ne
 8013432:	220a      	movne	r2, #10
 8013434:	2208      	moveq	r2, #8
 8013436:	2100      	movs	r1, #0
 8013438:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801343c:	6865      	ldr	r5, [r4, #4]
 801343e:	60a5      	str	r5, [r4, #8]
 8013440:	2d00      	cmp	r5, #0
 8013442:	f2c0 8095 	blt.w	8013570 <_printf_i+0x20c>
 8013446:	6821      	ldr	r1, [r4, #0]
 8013448:	f021 0104 	bic.w	r1, r1, #4
 801344c:	6021      	str	r1, [r4, #0]
 801344e:	2b00      	cmp	r3, #0
 8013450:	d13d      	bne.n	80134ce <_printf_i+0x16a>
 8013452:	2d00      	cmp	r5, #0
 8013454:	f040 808e 	bne.w	8013574 <_printf_i+0x210>
 8013458:	4665      	mov	r5, ip
 801345a:	2a08      	cmp	r2, #8
 801345c:	d10b      	bne.n	8013476 <_printf_i+0x112>
 801345e:	6823      	ldr	r3, [r4, #0]
 8013460:	07db      	lsls	r3, r3, #31
 8013462:	d508      	bpl.n	8013476 <_printf_i+0x112>
 8013464:	6923      	ldr	r3, [r4, #16]
 8013466:	6862      	ldr	r2, [r4, #4]
 8013468:	429a      	cmp	r2, r3
 801346a:	bfde      	ittt	le
 801346c:	2330      	movle	r3, #48	; 0x30
 801346e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013476:	ebac 0305 	sub.w	r3, ip, r5
 801347a:	6123      	str	r3, [r4, #16]
 801347c:	f8cd 8000 	str.w	r8, [sp]
 8013480:	463b      	mov	r3, r7
 8013482:	aa03      	add	r2, sp, #12
 8013484:	4621      	mov	r1, r4
 8013486:	4630      	mov	r0, r6
 8013488:	f7ff fef6 	bl	8013278 <_printf_common>
 801348c:	3001      	adds	r0, #1
 801348e:	d14d      	bne.n	801352c <_printf_i+0x1c8>
 8013490:	f04f 30ff 	mov.w	r0, #4294967295
 8013494:	b005      	add	sp, #20
 8013496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801349a:	4839      	ldr	r0, [pc, #228]	; (8013580 <_printf_i+0x21c>)
 801349c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80134a0:	6813      	ldr	r3, [r2, #0]
 80134a2:	6821      	ldr	r1, [r4, #0]
 80134a4:	1d1d      	adds	r5, r3, #4
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	6015      	str	r5, [r2, #0]
 80134aa:	060a      	lsls	r2, r1, #24
 80134ac:	d50b      	bpl.n	80134c6 <_printf_i+0x162>
 80134ae:	07ca      	lsls	r2, r1, #31
 80134b0:	bf44      	itt	mi
 80134b2:	f041 0120 	orrmi.w	r1, r1, #32
 80134b6:	6021      	strmi	r1, [r4, #0]
 80134b8:	b91b      	cbnz	r3, 80134c2 <_printf_i+0x15e>
 80134ba:	6822      	ldr	r2, [r4, #0]
 80134bc:	f022 0220 	bic.w	r2, r2, #32
 80134c0:	6022      	str	r2, [r4, #0]
 80134c2:	2210      	movs	r2, #16
 80134c4:	e7b7      	b.n	8013436 <_printf_i+0xd2>
 80134c6:	064d      	lsls	r5, r1, #25
 80134c8:	bf48      	it	mi
 80134ca:	b29b      	uxthmi	r3, r3
 80134cc:	e7ef      	b.n	80134ae <_printf_i+0x14a>
 80134ce:	4665      	mov	r5, ip
 80134d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80134d4:	fb02 3311 	mls	r3, r2, r1, r3
 80134d8:	5cc3      	ldrb	r3, [r0, r3]
 80134da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80134de:	460b      	mov	r3, r1
 80134e0:	2900      	cmp	r1, #0
 80134e2:	d1f5      	bne.n	80134d0 <_printf_i+0x16c>
 80134e4:	e7b9      	b.n	801345a <_printf_i+0xf6>
 80134e6:	6813      	ldr	r3, [r2, #0]
 80134e8:	6825      	ldr	r5, [r4, #0]
 80134ea:	6961      	ldr	r1, [r4, #20]
 80134ec:	1d18      	adds	r0, r3, #4
 80134ee:	6010      	str	r0, [r2, #0]
 80134f0:	0628      	lsls	r0, r5, #24
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	d501      	bpl.n	80134fa <_printf_i+0x196>
 80134f6:	6019      	str	r1, [r3, #0]
 80134f8:	e002      	b.n	8013500 <_printf_i+0x19c>
 80134fa:	066a      	lsls	r2, r5, #25
 80134fc:	d5fb      	bpl.n	80134f6 <_printf_i+0x192>
 80134fe:	8019      	strh	r1, [r3, #0]
 8013500:	2300      	movs	r3, #0
 8013502:	6123      	str	r3, [r4, #16]
 8013504:	4665      	mov	r5, ip
 8013506:	e7b9      	b.n	801347c <_printf_i+0x118>
 8013508:	6813      	ldr	r3, [r2, #0]
 801350a:	1d19      	adds	r1, r3, #4
 801350c:	6011      	str	r1, [r2, #0]
 801350e:	681d      	ldr	r5, [r3, #0]
 8013510:	6862      	ldr	r2, [r4, #4]
 8013512:	2100      	movs	r1, #0
 8013514:	4628      	mov	r0, r5
 8013516:	f7ec fe7b 	bl	8000210 <memchr>
 801351a:	b108      	cbz	r0, 8013520 <_printf_i+0x1bc>
 801351c:	1b40      	subs	r0, r0, r5
 801351e:	6060      	str	r0, [r4, #4]
 8013520:	6863      	ldr	r3, [r4, #4]
 8013522:	6123      	str	r3, [r4, #16]
 8013524:	2300      	movs	r3, #0
 8013526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801352a:	e7a7      	b.n	801347c <_printf_i+0x118>
 801352c:	6923      	ldr	r3, [r4, #16]
 801352e:	462a      	mov	r2, r5
 8013530:	4639      	mov	r1, r7
 8013532:	4630      	mov	r0, r6
 8013534:	47c0      	blx	r8
 8013536:	3001      	adds	r0, #1
 8013538:	d0aa      	beq.n	8013490 <_printf_i+0x12c>
 801353a:	6823      	ldr	r3, [r4, #0]
 801353c:	079b      	lsls	r3, r3, #30
 801353e:	d413      	bmi.n	8013568 <_printf_i+0x204>
 8013540:	68e0      	ldr	r0, [r4, #12]
 8013542:	9b03      	ldr	r3, [sp, #12]
 8013544:	4298      	cmp	r0, r3
 8013546:	bfb8      	it	lt
 8013548:	4618      	movlt	r0, r3
 801354a:	e7a3      	b.n	8013494 <_printf_i+0x130>
 801354c:	2301      	movs	r3, #1
 801354e:	464a      	mov	r2, r9
 8013550:	4639      	mov	r1, r7
 8013552:	4630      	mov	r0, r6
 8013554:	47c0      	blx	r8
 8013556:	3001      	adds	r0, #1
 8013558:	d09a      	beq.n	8013490 <_printf_i+0x12c>
 801355a:	3501      	adds	r5, #1
 801355c:	68e3      	ldr	r3, [r4, #12]
 801355e:	9a03      	ldr	r2, [sp, #12]
 8013560:	1a9b      	subs	r3, r3, r2
 8013562:	42ab      	cmp	r3, r5
 8013564:	dcf2      	bgt.n	801354c <_printf_i+0x1e8>
 8013566:	e7eb      	b.n	8013540 <_printf_i+0x1dc>
 8013568:	2500      	movs	r5, #0
 801356a:	f104 0919 	add.w	r9, r4, #25
 801356e:	e7f5      	b.n	801355c <_printf_i+0x1f8>
 8013570:	2b00      	cmp	r3, #0
 8013572:	d1ac      	bne.n	80134ce <_printf_i+0x16a>
 8013574:	7803      	ldrb	r3, [r0, #0]
 8013576:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801357a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801357e:	e76c      	b.n	801345a <_printf_i+0xf6>
 8013580:	08018394 	.word	0x08018394
 8013584:	080183a5 	.word	0x080183a5

08013588 <_scanf_float>:
 8013588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801358c:	469a      	mov	sl, r3
 801358e:	688b      	ldr	r3, [r1, #8]
 8013590:	4616      	mov	r6, r2
 8013592:	1e5a      	subs	r2, r3, #1
 8013594:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013598:	b087      	sub	sp, #28
 801359a:	bf83      	ittte	hi
 801359c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80135a0:	189b      	addhi	r3, r3, r2
 80135a2:	9301      	strhi	r3, [sp, #4]
 80135a4:	2300      	movls	r3, #0
 80135a6:	bf86      	itte	hi
 80135a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80135ac:	608b      	strhi	r3, [r1, #8]
 80135ae:	9301      	strls	r3, [sp, #4]
 80135b0:	680b      	ldr	r3, [r1, #0]
 80135b2:	4688      	mov	r8, r1
 80135b4:	f04f 0b00 	mov.w	fp, #0
 80135b8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80135bc:	f848 3b1c 	str.w	r3, [r8], #28
 80135c0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80135c4:	4607      	mov	r7, r0
 80135c6:	460c      	mov	r4, r1
 80135c8:	4645      	mov	r5, r8
 80135ca:	465a      	mov	r2, fp
 80135cc:	46d9      	mov	r9, fp
 80135ce:	f8cd b008 	str.w	fp, [sp, #8]
 80135d2:	68a1      	ldr	r1, [r4, #8]
 80135d4:	b181      	cbz	r1, 80135f8 <_scanf_float+0x70>
 80135d6:	6833      	ldr	r3, [r6, #0]
 80135d8:	781b      	ldrb	r3, [r3, #0]
 80135da:	2b49      	cmp	r3, #73	; 0x49
 80135dc:	d071      	beq.n	80136c2 <_scanf_float+0x13a>
 80135de:	d84d      	bhi.n	801367c <_scanf_float+0xf4>
 80135e0:	2b39      	cmp	r3, #57	; 0x39
 80135e2:	d840      	bhi.n	8013666 <_scanf_float+0xde>
 80135e4:	2b31      	cmp	r3, #49	; 0x31
 80135e6:	f080 8088 	bcs.w	80136fa <_scanf_float+0x172>
 80135ea:	2b2d      	cmp	r3, #45	; 0x2d
 80135ec:	f000 8090 	beq.w	8013710 <_scanf_float+0x188>
 80135f0:	d815      	bhi.n	801361e <_scanf_float+0x96>
 80135f2:	2b2b      	cmp	r3, #43	; 0x2b
 80135f4:	f000 808c 	beq.w	8013710 <_scanf_float+0x188>
 80135f8:	f1b9 0f00 	cmp.w	r9, #0
 80135fc:	d003      	beq.n	8013606 <_scanf_float+0x7e>
 80135fe:	6823      	ldr	r3, [r4, #0]
 8013600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013604:	6023      	str	r3, [r4, #0]
 8013606:	3a01      	subs	r2, #1
 8013608:	2a01      	cmp	r2, #1
 801360a:	f200 80ea 	bhi.w	80137e2 <_scanf_float+0x25a>
 801360e:	4545      	cmp	r5, r8
 8013610:	f200 80dc 	bhi.w	80137cc <_scanf_float+0x244>
 8013614:	2601      	movs	r6, #1
 8013616:	4630      	mov	r0, r6
 8013618:	b007      	add	sp, #28
 801361a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801361e:	2b2e      	cmp	r3, #46	; 0x2e
 8013620:	f000 809f 	beq.w	8013762 <_scanf_float+0x1da>
 8013624:	2b30      	cmp	r3, #48	; 0x30
 8013626:	d1e7      	bne.n	80135f8 <_scanf_float+0x70>
 8013628:	6820      	ldr	r0, [r4, #0]
 801362a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801362e:	d064      	beq.n	80136fa <_scanf_float+0x172>
 8013630:	9b01      	ldr	r3, [sp, #4]
 8013632:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8013636:	6020      	str	r0, [r4, #0]
 8013638:	f109 0901 	add.w	r9, r9, #1
 801363c:	b11b      	cbz	r3, 8013646 <_scanf_float+0xbe>
 801363e:	3b01      	subs	r3, #1
 8013640:	3101      	adds	r1, #1
 8013642:	9301      	str	r3, [sp, #4]
 8013644:	60a1      	str	r1, [r4, #8]
 8013646:	68a3      	ldr	r3, [r4, #8]
 8013648:	3b01      	subs	r3, #1
 801364a:	60a3      	str	r3, [r4, #8]
 801364c:	6923      	ldr	r3, [r4, #16]
 801364e:	3301      	adds	r3, #1
 8013650:	6123      	str	r3, [r4, #16]
 8013652:	6873      	ldr	r3, [r6, #4]
 8013654:	3b01      	subs	r3, #1
 8013656:	2b00      	cmp	r3, #0
 8013658:	6073      	str	r3, [r6, #4]
 801365a:	f340 80ac 	ble.w	80137b6 <_scanf_float+0x22e>
 801365e:	6833      	ldr	r3, [r6, #0]
 8013660:	3301      	adds	r3, #1
 8013662:	6033      	str	r3, [r6, #0]
 8013664:	e7b5      	b.n	80135d2 <_scanf_float+0x4a>
 8013666:	2b45      	cmp	r3, #69	; 0x45
 8013668:	f000 8085 	beq.w	8013776 <_scanf_float+0x1ee>
 801366c:	2b46      	cmp	r3, #70	; 0x46
 801366e:	d06a      	beq.n	8013746 <_scanf_float+0x1be>
 8013670:	2b41      	cmp	r3, #65	; 0x41
 8013672:	d1c1      	bne.n	80135f8 <_scanf_float+0x70>
 8013674:	2a01      	cmp	r2, #1
 8013676:	d1bf      	bne.n	80135f8 <_scanf_float+0x70>
 8013678:	2202      	movs	r2, #2
 801367a:	e046      	b.n	801370a <_scanf_float+0x182>
 801367c:	2b65      	cmp	r3, #101	; 0x65
 801367e:	d07a      	beq.n	8013776 <_scanf_float+0x1ee>
 8013680:	d818      	bhi.n	80136b4 <_scanf_float+0x12c>
 8013682:	2b54      	cmp	r3, #84	; 0x54
 8013684:	d066      	beq.n	8013754 <_scanf_float+0x1cc>
 8013686:	d811      	bhi.n	80136ac <_scanf_float+0x124>
 8013688:	2b4e      	cmp	r3, #78	; 0x4e
 801368a:	d1b5      	bne.n	80135f8 <_scanf_float+0x70>
 801368c:	2a00      	cmp	r2, #0
 801368e:	d146      	bne.n	801371e <_scanf_float+0x196>
 8013690:	f1b9 0f00 	cmp.w	r9, #0
 8013694:	d145      	bne.n	8013722 <_scanf_float+0x19a>
 8013696:	6821      	ldr	r1, [r4, #0]
 8013698:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801369c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80136a0:	d13f      	bne.n	8013722 <_scanf_float+0x19a>
 80136a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80136a6:	6021      	str	r1, [r4, #0]
 80136a8:	2201      	movs	r2, #1
 80136aa:	e02e      	b.n	801370a <_scanf_float+0x182>
 80136ac:	2b59      	cmp	r3, #89	; 0x59
 80136ae:	d01e      	beq.n	80136ee <_scanf_float+0x166>
 80136b0:	2b61      	cmp	r3, #97	; 0x61
 80136b2:	e7de      	b.n	8013672 <_scanf_float+0xea>
 80136b4:	2b6e      	cmp	r3, #110	; 0x6e
 80136b6:	d0e9      	beq.n	801368c <_scanf_float+0x104>
 80136b8:	d815      	bhi.n	80136e6 <_scanf_float+0x15e>
 80136ba:	2b66      	cmp	r3, #102	; 0x66
 80136bc:	d043      	beq.n	8013746 <_scanf_float+0x1be>
 80136be:	2b69      	cmp	r3, #105	; 0x69
 80136c0:	d19a      	bne.n	80135f8 <_scanf_float+0x70>
 80136c2:	f1bb 0f00 	cmp.w	fp, #0
 80136c6:	d138      	bne.n	801373a <_scanf_float+0x1b2>
 80136c8:	f1b9 0f00 	cmp.w	r9, #0
 80136cc:	d197      	bne.n	80135fe <_scanf_float+0x76>
 80136ce:	6821      	ldr	r1, [r4, #0]
 80136d0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80136d4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80136d8:	d195      	bne.n	8013606 <_scanf_float+0x7e>
 80136da:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80136de:	6021      	str	r1, [r4, #0]
 80136e0:	f04f 0b01 	mov.w	fp, #1
 80136e4:	e011      	b.n	801370a <_scanf_float+0x182>
 80136e6:	2b74      	cmp	r3, #116	; 0x74
 80136e8:	d034      	beq.n	8013754 <_scanf_float+0x1cc>
 80136ea:	2b79      	cmp	r3, #121	; 0x79
 80136ec:	d184      	bne.n	80135f8 <_scanf_float+0x70>
 80136ee:	f1bb 0f07 	cmp.w	fp, #7
 80136f2:	d181      	bne.n	80135f8 <_scanf_float+0x70>
 80136f4:	f04f 0b08 	mov.w	fp, #8
 80136f8:	e007      	b.n	801370a <_scanf_float+0x182>
 80136fa:	eb12 0f0b 	cmn.w	r2, fp
 80136fe:	f47f af7b 	bne.w	80135f8 <_scanf_float+0x70>
 8013702:	6821      	ldr	r1, [r4, #0]
 8013704:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8013708:	6021      	str	r1, [r4, #0]
 801370a:	702b      	strb	r3, [r5, #0]
 801370c:	3501      	adds	r5, #1
 801370e:	e79a      	b.n	8013646 <_scanf_float+0xbe>
 8013710:	6821      	ldr	r1, [r4, #0]
 8013712:	0608      	lsls	r0, r1, #24
 8013714:	f57f af70 	bpl.w	80135f8 <_scanf_float+0x70>
 8013718:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801371c:	e7f4      	b.n	8013708 <_scanf_float+0x180>
 801371e:	2a02      	cmp	r2, #2
 8013720:	d047      	beq.n	80137b2 <_scanf_float+0x22a>
 8013722:	f1bb 0f01 	cmp.w	fp, #1
 8013726:	d003      	beq.n	8013730 <_scanf_float+0x1a8>
 8013728:	f1bb 0f04 	cmp.w	fp, #4
 801372c:	f47f af64 	bne.w	80135f8 <_scanf_float+0x70>
 8013730:	f10b 0b01 	add.w	fp, fp, #1
 8013734:	fa5f fb8b 	uxtb.w	fp, fp
 8013738:	e7e7      	b.n	801370a <_scanf_float+0x182>
 801373a:	f1bb 0f03 	cmp.w	fp, #3
 801373e:	d0f7      	beq.n	8013730 <_scanf_float+0x1a8>
 8013740:	f1bb 0f05 	cmp.w	fp, #5
 8013744:	e7f2      	b.n	801372c <_scanf_float+0x1a4>
 8013746:	f1bb 0f02 	cmp.w	fp, #2
 801374a:	f47f af55 	bne.w	80135f8 <_scanf_float+0x70>
 801374e:	f04f 0b03 	mov.w	fp, #3
 8013752:	e7da      	b.n	801370a <_scanf_float+0x182>
 8013754:	f1bb 0f06 	cmp.w	fp, #6
 8013758:	f47f af4e 	bne.w	80135f8 <_scanf_float+0x70>
 801375c:	f04f 0b07 	mov.w	fp, #7
 8013760:	e7d3      	b.n	801370a <_scanf_float+0x182>
 8013762:	6821      	ldr	r1, [r4, #0]
 8013764:	0588      	lsls	r0, r1, #22
 8013766:	f57f af47 	bpl.w	80135f8 <_scanf_float+0x70>
 801376a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801376e:	6021      	str	r1, [r4, #0]
 8013770:	f8cd 9008 	str.w	r9, [sp, #8]
 8013774:	e7c9      	b.n	801370a <_scanf_float+0x182>
 8013776:	6821      	ldr	r1, [r4, #0]
 8013778:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801377c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013780:	d006      	beq.n	8013790 <_scanf_float+0x208>
 8013782:	0548      	lsls	r0, r1, #21
 8013784:	f57f af38 	bpl.w	80135f8 <_scanf_float+0x70>
 8013788:	f1b9 0f00 	cmp.w	r9, #0
 801378c:	f43f af3b 	beq.w	8013606 <_scanf_float+0x7e>
 8013790:	0588      	lsls	r0, r1, #22
 8013792:	bf58      	it	pl
 8013794:	9802      	ldrpl	r0, [sp, #8]
 8013796:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801379a:	bf58      	it	pl
 801379c:	eba9 0000 	subpl.w	r0, r9, r0
 80137a0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80137a4:	bf58      	it	pl
 80137a6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80137aa:	6021      	str	r1, [r4, #0]
 80137ac:	f04f 0900 	mov.w	r9, #0
 80137b0:	e7ab      	b.n	801370a <_scanf_float+0x182>
 80137b2:	2203      	movs	r2, #3
 80137b4:	e7a9      	b.n	801370a <_scanf_float+0x182>
 80137b6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80137ba:	9205      	str	r2, [sp, #20]
 80137bc:	4631      	mov	r1, r6
 80137be:	4638      	mov	r0, r7
 80137c0:	4798      	blx	r3
 80137c2:	9a05      	ldr	r2, [sp, #20]
 80137c4:	2800      	cmp	r0, #0
 80137c6:	f43f af04 	beq.w	80135d2 <_scanf_float+0x4a>
 80137ca:	e715      	b.n	80135f8 <_scanf_float+0x70>
 80137cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80137d4:	4632      	mov	r2, r6
 80137d6:	4638      	mov	r0, r7
 80137d8:	4798      	blx	r3
 80137da:	6923      	ldr	r3, [r4, #16]
 80137dc:	3b01      	subs	r3, #1
 80137de:	6123      	str	r3, [r4, #16]
 80137e0:	e715      	b.n	801360e <_scanf_float+0x86>
 80137e2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80137e6:	2b06      	cmp	r3, #6
 80137e8:	d80a      	bhi.n	8013800 <_scanf_float+0x278>
 80137ea:	f1bb 0f02 	cmp.w	fp, #2
 80137ee:	d968      	bls.n	80138c2 <_scanf_float+0x33a>
 80137f0:	f1ab 0b03 	sub.w	fp, fp, #3
 80137f4:	fa5f fb8b 	uxtb.w	fp, fp
 80137f8:	eba5 0b0b 	sub.w	fp, r5, fp
 80137fc:	455d      	cmp	r5, fp
 80137fe:	d14b      	bne.n	8013898 <_scanf_float+0x310>
 8013800:	6823      	ldr	r3, [r4, #0]
 8013802:	05da      	lsls	r2, r3, #23
 8013804:	d51f      	bpl.n	8013846 <_scanf_float+0x2be>
 8013806:	055b      	lsls	r3, r3, #21
 8013808:	d468      	bmi.n	80138dc <_scanf_float+0x354>
 801380a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801380e:	6923      	ldr	r3, [r4, #16]
 8013810:	2965      	cmp	r1, #101	; 0x65
 8013812:	f103 33ff 	add.w	r3, r3, #4294967295
 8013816:	f105 3bff 	add.w	fp, r5, #4294967295
 801381a:	6123      	str	r3, [r4, #16]
 801381c:	d00d      	beq.n	801383a <_scanf_float+0x2b2>
 801381e:	2945      	cmp	r1, #69	; 0x45
 8013820:	d00b      	beq.n	801383a <_scanf_float+0x2b2>
 8013822:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013826:	4632      	mov	r2, r6
 8013828:	4638      	mov	r0, r7
 801382a:	4798      	blx	r3
 801382c:	6923      	ldr	r3, [r4, #16]
 801382e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8013832:	3b01      	subs	r3, #1
 8013834:	f1a5 0b02 	sub.w	fp, r5, #2
 8013838:	6123      	str	r3, [r4, #16]
 801383a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801383e:	4632      	mov	r2, r6
 8013840:	4638      	mov	r0, r7
 8013842:	4798      	blx	r3
 8013844:	465d      	mov	r5, fp
 8013846:	6826      	ldr	r6, [r4, #0]
 8013848:	f016 0610 	ands.w	r6, r6, #16
 801384c:	d17a      	bne.n	8013944 <_scanf_float+0x3bc>
 801384e:	702e      	strb	r6, [r5, #0]
 8013850:	6823      	ldr	r3, [r4, #0]
 8013852:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801385a:	d142      	bne.n	80138e2 <_scanf_float+0x35a>
 801385c:	9b02      	ldr	r3, [sp, #8]
 801385e:	eba9 0303 	sub.w	r3, r9, r3
 8013862:	425a      	negs	r2, r3
 8013864:	2b00      	cmp	r3, #0
 8013866:	d149      	bne.n	80138fc <_scanf_float+0x374>
 8013868:	2200      	movs	r2, #0
 801386a:	4641      	mov	r1, r8
 801386c:	4638      	mov	r0, r7
 801386e:	f000 ffdf 	bl	8014830 <_strtod_r>
 8013872:	6825      	ldr	r5, [r4, #0]
 8013874:	f8da 3000 	ldr.w	r3, [sl]
 8013878:	f015 0f02 	tst.w	r5, #2
 801387c:	f103 0204 	add.w	r2, r3, #4
 8013880:	ec59 8b10 	vmov	r8, r9, d0
 8013884:	f8ca 2000 	str.w	r2, [sl]
 8013888:	d043      	beq.n	8013912 <_scanf_float+0x38a>
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	e9c3 8900 	strd	r8, r9, [r3]
 8013890:	68e3      	ldr	r3, [r4, #12]
 8013892:	3301      	adds	r3, #1
 8013894:	60e3      	str	r3, [r4, #12]
 8013896:	e6be      	b.n	8013616 <_scanf_float+0x8e>
 8013898:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801389c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80138a0:	4632      	mov	r2, r6
 80138a2:	4638      	mov	r0, r7
 80138a4:	4798      	blx	r3
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	3b01      	subs	r3, #1
 80138aa:	6123      	str	r3, [r4, #16]
 80138ac:	e7a6      	b.n	80137fc <_scanf_float+0x274>
 80138ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80138b2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80138b6:	4632      	mov	r2, r6
 80138b8:	4638      	mov	r0, r7
 80138ba:	4798      	blx	r3
 80138bc:	6923      	ldr	r3, [r4, #16]
 80138be:	3b01      	subs	r3, #1
 80138c0:	6123      	str	r3, [r4, #16]
 80138c2:	4545      	cmp	r5, r8
 80138c4:	d8f3      	bhi.n	80138ae <_scanf_float+0x326>
 80138c6:	e6a5      	b.n	8013614 <_scanf_float+0x8c>
 80138c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80138cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80138d0:	4632      	mov	r2, r6
 80138d2:	4638      	mov	r0, r7
 80138d4:	4798      	blx	r3
 80138d6:	6923      	ldr	r3, [r4, #16]
 80138d8:	3b01      	subs	r3, #1
 80138da:	6123      	str	r3, [r4, #16]
 80138dc:	4545      	cmp	r5, r8
 80138de:	d8f3      	bhi.n	80138c8 <_scanf_float+0x340>
 80138e0:	e698      	b.n	8013614 <_scanf_float+0x8c>
 80138e2:	9b03      	ldr	r3, [sp, #12]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d0bf      	beq.n	8013868 <_scanf_float+0x2e0>
 80138e8:	9904      	ldr	r1, [sp, #16]
 80138ea:	230a      	movs	r3, #10
 80138ec:	4632      	mov	r2, r6
 80138ee:	3101      	adds	r1, #1
 80138f0:	4638      	mov	r0, r7
 80138f2:	f001 f829 	bl	8014948 <_strtol_r>
 80138f6:	9b03      	ldr	r3, [sp, #12]
 80138f8:	9d04      	ldr	r5, [sp, #16]
 80138fa:	1ac2      	subs	r2, r0, r3
 80138fc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013900:	429d      	cmp	r5, r3
 8013902:	bf28      	it	cs
 8013904:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8013908:	490f      	ldr	r1, [pc, #60]	; (8013948 <_scanf_float+0x3c0>)
 801390a:	4628      	mov	r0, r5
 801390c:	f000 f8e8 	bl	8013ae0 <siprintf>
 8013910:	e7aa      	b.n	8013868 <_scanf_float+0x2e0>
 8013912:	f015 0504 	ands.w	r5, r5, #4
 8013916:	d1b8      	bne.n	801388a <_scanf_float+0x302>
 8013918:	681f      	ldr	r7, [r3, #0]
 801391a:	ee10 2a10 	vmov	r2, s0
 801391e:	464b      	mov	r3, r9
 8013920:	ee10 0a10 	vmov	r0, s0
 8013924:	4649      	mov	r1, r9
 8013926:	f7ed f919 	bl	8000b5c <__aeabi_dcmpun>
 801392a:	b128      	cbz	r0, 8013938 <_scanf_float+0x3b0>
 801392c:	4628      	mov	r0, r5
 801392e:	f000 f89d 	bl	8013a6c <nanf>
 8013932:	ed87 0a00 	vstr	s0, [r7]
 8013936:	e7ab      	b.n	8013890 <_scanf_float+0x308>
 8013938:	4640      	mov	r0, r8
 801393a:	4649      	mov	r1, r9
 801393c:	f7ed f96c 	bl	8000c18 <__aeabi_d2f>
 8013940:	6038      	str	r0, [r7, #0]
 8013942:	e7a5      	b.n	8013890 <_scanf_float+0x308>
 8013944:	2600      	movs	r6, #0
 8013946:	e666      	b.n	8013616 <_scanf_float+0x8e>
 8013948:	080183b6 	.word	0x080183b6

0801394c <iprintf>:
 801394c:	b40f      	push	{r0, r1, r2, r3}
 801394e:	4b0a      	ldr	r3, [pc, #40]	; (8013978 <iprintf+0x2c>)
 8013950:	b513      	push	{r0, r1, r4, lr}
 8013952:	681c      	ldr	r4, [r3, #0]
 8013954:	b124      	cbz	r4, 8013960 <iprintf+0x14>
 8013956:	69a3      	ldr	r3, [r4, #24]
 8013958:	b913      	cbnz	r3, 8013960 <iprintf+0x14>
 801395a:	4620      	mov	r0, r4
 801395c:	f002 f83c 	bl	80159d8 <__sinit>
 8013960:	ab05      	add	r3, sp, #20
 8013962:	9a04      	ldr	r2, [sp, #16]
 8013964:	68a1      	ldr	r1, [r4, #8]
 8013966:	9301      	str	r3, [sp, #4]
 8013968:	4620      	mov	r0, r4
 801396a:	f003 fc7d 	bl	8017268 <_vfiprintf_r>
 801396e:	b002      	add	sp, #8
 8013970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013974:	b004      	add	sp, #16
 8013976:	4770      	bx	lr
 8013978:	2000000c 	.word	0x2000000c

0801397c <putchar>:
 801397c:	b538      	push	{r3, r4, r5, lr}
 801397e:	4b08      	ldr	r3, [pc, #32]	; (80139a0 <putchar+0x24>)
 8013980:	681c      	ldr	r4, [r3, #0]
 8013982:	4605      	mov	r5, r0
 8013984:	b124      	cbz	r4, 8013990 <putchar+0x14>
 8013986:	69a3      	ldr	r3, [r4, #24]
 8013988:	b913      	cbnz	r3, 8013990 <putchar+0x14>
 801398a:	4620      	mov	r0, r4
 801398c:	f002 f824 	bl	80159d8 <__sinit>
 8013990:	68a2      	ldr	r2, [r4, #8]
 8013992:	4629      	mov	r1, r5
 8013994:	4620      	mov	r0, r4
 8013996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801399a:	f003 bed3 	b.w	8017744 <_putc_r>
 801399e:	bf00      	nop
 80139a0:	2000000c 	.word	0x2000000c

080139a4 <_puts_r>:
 80139a4:	b570      	push	{r4, r5, r6, lr}
 80139a6:	460e      	mov	r6, r1
 80139a8:	4605      	mov	r5, r0
 80139aa:	b118      	cbz	r0, 80139b4 <_puts_r+0x10>
 80139ac:	6983      	ldr	r3, [r0, #24]
 80139ae:	b90b      	cbnz	r3, 80139b4 <_puts_r+0x10>
 80139b0:	f002 f812 	bl	80159d8 <__sinit>
 80139b4:	69ab      	ldr	r3, [r5, #24]
 80139b6:	68ac      	ldr	r4, [r5, #8]
 80139b8:	b913      	cbnz	r3, 80139c0 <_puts_r+0x1c>
 80139ba:	4628      	mov	r0, r5
 80139bc:	f002 f80c 	bl	80159d8 <__sinit>
 80139c0:	4b23      	ldr	r3, [pc, #140]	; (8013a50 <_puts_r+0xac>)
 80139c2:	429c      	cmp	r4, r3
 80139c4:	d117      	bne.n	80139f6 <_puts_r+0x52>
 80139c6:	686c      	ldr	r4, [r5, #4]
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	071b      	lsls	r3, r3, #28
 80139cc:	d51d      	bpl.n	8013a0a <_puts_r+0x66>
 80139ce:	6923      	ldr	r3, [r4, #16]
 80139d0:	b1db      	cbz	r3, 8013a0a <_puts_r+0x66>
 80139d2:	3e01      	subs	r6, #1
 80139d4:	68a3      	ldr	r3, [r4, #8]
 80139d6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80139da:	3b01      	subs	r3, #1
 80139dc:	60a3      	str	r3, [r4, #8]
 80139de:	b9e9      	cbnz	r1, 8013a1c <_puts_r+0x78>
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	da2e      	bge.n	8013a42 <_puts_r+0x9e>
 80139e4:	4622      	mov	r2, r4
 80139e6:	210a      	movs	r1, #10
 80139e8:	4628      	mov	r0, r5
 80139ea:	f000 ffdf 	bl	80149ac <__swbuf_r>
 80139ee:	3001      	adds	r0, #1
 80139f0:	d011      	beq.n	8013a16 <_puts_r+0x72>
 80139f2:	200a      	movs	r0, #10
 80139f4:	e011      	b.n	8013a1a <_puts_r+0x76>
 80139f6:	4b17      	ldr	r3, [pc, #92]	; (8013a54 <_puts_r+0xb0>)
 80139f8:	429c      	cmp	r4, r3
 80139fa:	d101      	bne.n	8013a00 <_puts_r+0x5c>
 80139fc:	68ac      	ldr	r4, [r5, #8]
 80139fe:	e7e3      	b.n	80139c8 <_puts_r+0x24>
 8013a00:	4b15      	ldr	r3, [pc, #84]	; (8013a58 <_puts_r+0xb4>)
 8013a02:	429c      	cmp	r4, r3
 8013a04:	bf08      	it	eq
 8013a06:	68ec      	ldreq	r4, [r5, #12]
 8013a08:	e7de      	b.n	80139c8 <_puts_r+0x24>
 8013a0a:	4621      	mov	r1, r4
 8013a0c:	4628      	mov	r0, r5
 8013a0e:	f001 f831 	bl	8014a74 <__swsetup_r>
 8013a12:	2800      	cmp	r0, #0
 8013a14:	d0dd      	beq.n	80139d2 <_puts_r+0x2e>
 8013a16:	f04f 30ff 	mov.w	r0, #4294967295
 8013a1a:	bd70      	pop	{r4, r5, r6, pc}
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	da04      	bge.n	8013a2a <_puts_r+0x86>
 8013a20:	69a2      	ldr	r2, [r4, #24]
 8013a22:	429a      	cmp	r2, r3
 8013a24:	dc06      	bgt.n	8013a34 <_puts_r+0x90>
 8013a26:	290a      	cmp	r1, #10
 8013a28:	d004      	beq.n	8013a34 <_puts_r+0x90>
 8013a2a:	6823      	ldr	r3, [r4, #0]
 8013a2c:	1c5a      	adds	r2, r3, #1
 8013a2e:	6022      	str	r2, [r4, #0]
 8013a30:	7019      	strb	r1, [r3, #0]
 8013a32:	e7cf      	b.n	80139d4 <_puts_r+0x30>
 8013a34:	4622      	mov	r2, r4
 8013a36:	4628      	mov	r0, r5
 8013a38:	f000 ffb8 	bl	80149ac <__swbuf_r>
 8013a3c:	3001      	adds	r0, #1
 8013a3e:	d1c9      	bne.n	80139d4 <_puts_r+0x30>
 8013a40:	e7e9      	b.n	8013a16 <_puts_r+0x72>
 8013a42:	6823      	ldr	r3, [r4, #0]
 8013a44:	200a      	movs	r0, #10
 8013a46:	1c5a      	adds	r2, r3, #1
 8013a48:	6022      	str	r2, [r4, #0]
 8013a4a:	7018      	strb	r0, [r3, #0]
 8013a4c:	e7e5      	b.n	8013a1a <_puts_r+0x76>
 8013a4e:	bf00      	nop
 8013a50:	08018440 	.word	0x08018440
 8013a54:	08018460 	.word	0x08018460
 8013a58:	08018420 	.word	0x08018420

08013a5c <puts>:
 8013a5c:	4b02      	ldr	r3, [pc, #8]	; (8013a68 <puts+0xc>)
 8013a5e:	4601      	mov	r1, r0
 8013a60:	6818      	ldr	r0, [r3, #0]
 8013a62:	f7ff bf9f 	b.w	80139a4 <_puts_r>
 8013a66:	bf00      	nop
 8013a68:	2000000c 	.word	0x2000000c

08013a6c <nanf>:
 8013a6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013a74 <nanf+0x8>
 8013a70:	4770      	bx	lr
 8013a72:	bf00      	nop
 8013a74:	7fc00000 	.word	0x7fc00000

08013a78 <sniprintf>:
 8013a78:	b40c      	push	{r2, r3}
 8013a7a:	b530      	push	{r4, r5, lr}
 8013a7c:	4b17      	ldr	r3, [pc, #92]	; (8013adc <sniprintf+0x64>)
 8013a7e:	1e0c      	subs	r4, r1, #0
 8013a80:	b09d      	sub	sp, #116	; 0x74
 8013a82:	681d      	ldr	r5, [r3, #0]
 8013a84:	da08      	bge.n	8013a98 <sniprintf+0x20>
 8013a86:	238b      	movs	r3, #139	; 0x8b
 8013a88:	602b      	str	r3, [r5, #0]
 8013a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a8e:	b01d      	add	sp, #116	; 0x74
 8013a90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a94:	b002      	add	sp, #8
 8013a96:	4770      	bx	lr
 8013a98:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013aa0:	bf14      	ite	ne
 8013aa2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013aa6:	4623      	moveq	r3, r4
 8013aa8:	9304      	str	r3, [sp, #16]
 8013aaa:	9307      	str	r3, [sp, #28]
 8013aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ab0:	9002      	str	r0, [sp, #8]
 8013ab2:	9006      	str	r0, [sp, #24]
 8013ab4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013aba:	ab21      	add	r3, sp, #132	; 0x84
 8013abc:	a902      	add	r1, sp, #8
 8013abe:	4628      	mov	r0, r5
 8013ac0:	9301      	str	r3, [sp, #4]
 8013ac2:	f003 f905 	bl	8016cd0 <_svfiprintf_r>
 8013ac6:	1c43      	adds	r3, r0, #1
 8013ac8:	bfbc      	itt	lt
 8013aca:	238b      	movlt	r3, #139	; 0x8b
 8013acc:	602b      	strlt	r3, [r5, #0]
 8013ace:	2c00      	cmp	r4, #0
 8013ad0:	d0dd      	beq.n	8013a8e <sniprintf+0x16>
 8013ad2:	9b02      	ldr	r3, [sp, #8]
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	701a      	strb	r2, [r3, #0]
 8013ad8:	e7d9      	b.n	8013a8e <sniprintf+0x16>
 8013ada:	bf00      	nop
 8013adc:	2000000c 	.word	0x2000000c

08013ae0 <siprintf>:
 8013ae0:	b40e      	push	{r1, r2, r3}
 8013ae2:	b500      	push	{lr}
 8013ae4:	b09c      	sub	sp, #112	; 0x70
 8013ae6:	ab1d      	add	r3, sp, #116	; 0x74
 8013ae8:	9002      	str	r0, [sp, #8]
 8013aea:	9006      	str	r0, [sp, #24]
 8013aec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013af0:	4809      	ldr	r0, [pc, #36]	; (8013b18 <siprintf+0x38>)
 8013af2:	9107      	str	r1, [sp, #28]
 8013af4:	9104      	str	r1, [sp, #16]
 8013af6:	4909      	ldr	r1, [pc, #36]	; (8013b1c <siprintf+0x3c>)
 8013af8:	f853 2b04 	ldr.w	r2, [r3], #4
 8013afc:	9105      	str	r1, [sp, #20]
 8013afe:	6800      	ldr	r0, [r0, #0]
 8013b00:	9301      	str	r3, [sp, #4]
 8013b02:	a902      	add	r1, sp, #8
 8013b04:	f003 f8e4 	bl	8016cd0 <_svfiprintf_r>
 8013b08:	9b02      	ldr	r3, [sp, #8]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	701a      	strb	r2, [r3, #0]
 8013b0e:	b01c      	add	sp, #112	; 0x70
 8013b10:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b14:	b003      	add	sp, #12
 8013b16:	4770      	bx	lr
 8013b18:	2000000c 	.word	0x2000000c
 8013b1c:	ffff0208 	.word	0xffff0208

08013b20 <siscanf>:
 8013b20:	b40e      	push	{r1, r2, r3}
 8013b22:	b530      	push	{r4, r5, lr}
 8013b24:	b09c      	sub	sp, #112	; 0x70
 8013b26:	ac1f      	add	r4, sp, #124	; 0x7c
 8013b28:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013b2c:	f854 5b04 	ldr.w	r5, [r4], #4
 8013b30:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013b34:	9002      	str	r0, [sp, #8]
 8013b36:	9006      	str	r0, [sp, #24]
 8013b38:	f7ec fb62 	bl	8000200 <strlen>
 8013b3c:	4b0b      	ldr	r3, [pc, #44]	; (8013b6c <siscanf+0x4c>)
 8013b3e:	9003      	str	r0, [sp, #12]
 8013b40:	9007      	str	r0, [sp, #28]
 8013b42:	930b      	str	r3, [sp, #44]	; 0x2c
 8013b44:	480a      	ldr	r0, [pc, #40]	; (8013b70 <siscanf+0x50>)
 8013b46:	9401      	str	r4, [sp, #4]
 8013b48:	2300      	movs	r3, #0
 8013b4a:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b4c:	9314      	str	r3, [sp, #80]	; 0x50
 8013b4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013b52:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013b56:	462a      	mov	r2, r5
 8013b58:	4623      	mov	r3, r4
 8013b5a:	a902      	add	r1, sp, #8
 8013b5c:	6800      	ldr	r0, [r0, #0]
 8013b5e:	f003 fa09 	bl	8016f74 <__ssvfiscanf_r>
 8013b62:	b01c      	add	sp, #112	; 0x70
 8013b64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b68:	b003      	add	sp, #12
 8013b6a:	4770      	bx	lr
 8013b6c:	08013b97 	.word	0x08013b97
 8013b70:	2000000c 	.word	0x2000000c

08013b74 <__sread>:
 8013b74:	b510      	push	{r4, lr}
 8013b76:	460c      	mov	r4, r1
 8013b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b7c:	f003 fe18 	bl	80177b0 <_read_r>
 8013b80:	2800      	cmp	r0, #0
 8013b82:	bfab      	itete	ge
 8013b84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013b86:	89a3      	ldrhlt	r3, [r4, #12]
 8013b88:	181b      	addge	r3, r3, r0
 8013b8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013b8e:	bfac      	ite	ge
 8013b90:	6563      	strge	r3, [r4, #84]	; 0x54
 8013b92:	81a3      	strhlt	r3, [r4, #12]
 8013b94:	bd10      	pop	{r4, pc}

08013b96 <__seofread>:
 8013b96:	2000      	movs	r0, #0
 8013b98:	4770      	bx	lr

08013b9a <__swrite>:
 8013b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b9e:	461f      	mov	r7, r3
 8013ba0:	898b      	ldrh	r3, [r1, #12]
 8013ba2:	05db      	lsls	r3, r3, #23
 8013ba4:	4605      	mov	r5, r0
 8013ba6:	460c      	mov	r4, r1
 8013ba8:	4616      	mov	r6, r2
 8013baa:	d505      	bpl.n	8013bb8 <__swrite+0x1e>
 8013bac:	2302      	movs	r3, #2
 8013bae:	2200      	movs	r2, #0
 8013bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb4:	f002 fae2 	bl	801617c <_lseek_r>
 8013bb8:	89a3      	ldrh	r3, [r4, #12]
 8013bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bc2:	81a3      	strh	r3, [r4, #12]
 8013bc4:	4632      	mov	r2, r6
 8013bc6:	463b      	mov	r3, r7
 8013bc8:	4628      	mov	r0, r5
 8013bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bce:	f000 bf3f 	b.w	8014a50 <_write_r>

08013bd2 <__sseek>:
 8013bd2:	b510      	push	{r4, lr}
 8013bd4:	460c      	mov	r4, r1
 8013bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bda:	f002 facf 	bl	801617c <_lseek_r>
 8013bde:	1c43      	adds	r3, r0, #1
 8013be0:	89a3      	ldrh	r3, [r4, #12]
 8013be2:	bf15      	itete	ne
 8013be4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013be6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013bea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013bee:	81a3      	strheq	r3, [r4, #12]
 8013bf0:	bf18      	it	ne
 8013bf2:	81a3      	strhne	r3, [r4, #12]
 8013bf4:	bd10      	pop	{r4, pc}

08013bf6 <__sclose>:
 8013bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bfa:	f000 bfa9 	b.w	8014b50 <_close_r>

08013bfe <strcpy>:
 8013bfe:	4603      	mov	r3, r0
 8013c00:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013c04:	f803 2b01 	strb.w	r2, [r3], #1
 8013c08:	2a00      	cmp	r2, #0
 8013c0a:	d1f9      	bne.n	8013c00 <strcpy+0x2>
 8013c0c:	4770      	bx	lr

08013c0e <sulp>:
 8013c0e:	b570      	push	{r4, r5, r6, lr}
 8013c10:	4604      	mov	r4, r0
 8013c12:	460d      	mov	r5, r1
 8013c14:	ec45 4b10 	vmov	d0, r4, r5
 8013c18:	4616      	mov	r6, r2
 8013c1a:	f002 fe15 	bl	8016848 <__ulp>
 8013c1e:	ec51 0b10 	vmov	r0, r1, d0
 8013c22:	b17e      	cbz	r6, 8013c44 <sulp+0x36>
 8013c24:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013c28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	dd09      	ble.n	8013c44 <sulp+0x36>
 8013c30:	051b      	lsls	r3, r3, #20
 8013c32:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013c36:	2400      	movs	r4, #0
 8013c38:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	462b      	mov	r3, r5
 8013c40:	f7ec fcf2 	bl	8000628 <__aeabi_dmul>
 8013c44:	bd70      	pop	{r4, r5, r6, pc}
	...

08013c48 <_strtod_l>:
 8013c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c4c:	461f      	mov	r7, r3
 8013c4e:	b0a1      	sub	sp, #132	; 0x84
 8013c50:	2300      	movs	r3, #0
 8013c52:	4681      	mov	r9, r0
 8013c54:	4638      	mov	r0, r7
 8013c56:	460e      	mov	r6, r1
 8013c58:	9217      	str	r2, [sp, #92]	; 0x5c
 8013c5a:	931c      	str	r3, [sp, #112]	; 0x70
 8013c5c:	f002 fa7e 	bl	801615c <__localeconv_l>
 8013c60:	4680      	mov	r8, r0
 8013c62:	6800      	ldr	r0, [r0, #0]
 8013c64:	f7ec facc 	bl	8000200 <strlen>
 8013c68:	f04f 0a00 	mov.w	sl, #0
 8013c6c:	4604      	mov	r4, r0
 8013c6e:	f04f 0b00 	mov.w	fp, #0
 8013c72:	961b      	str	r6, [sp, #108]	; 0x6c
 8013c74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c76:	781a      	ldrb	r2, [r3, #0]
 8013c78:	2a0d      	cmp	r2, #13
 8013c7a:	d832      	bhi.n	8013ce2 <_strtod_l+0x9a>
 8013c7c:	2a09      	cmp	r2, #9
 8013c7e:	d236      	bcs.n	8013cee <_strtod_l+0xa6>
 8013c80:	2a00      	cmp	r2, #0
 8013c82:	d03e      	beq.n	8013d02 <_strtod_l+0xba>
 8013c84:	2300      	movs	r3, #0
 8013c86:	930d      	str	r3, [sp, #52]	; 0x34
 8013c88:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013c8a:	782b      	ldrb	r3, [r5, #0]
 8013c8c:	2b30      	cmp	r3, #48	; 0x30
 8013c8e:	f040 80ac 	bne.w	8013dea <_strtod_l+0x1a2>
 8013c92:	786b      	ldrb	r3, [r5, #1]
 8013c94:	2b58      	cmp	r3, #88	; 0x58
 8013c96:	d001      	beq.n	8013c9c <_strtod_l+0x54>
 8013c98:	2b78      	cmp	r3, #120	; 0x78
 8013c9a:	d167      	bne.n	8013d6c <_strtod_l+0x124>
 8013c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013c9e:	9301      	str	r3, [sp, #4]
 8013ca0:	ab1c      	add	r3, sp, #112	; 0x70
 8013ca2:	9300      	str	r3, [sp, #0]
 8013ca4:	9702      	str	r7, [sp, #8]
 8013ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8013ca8:	4a88      	ldr	r2, [pc, #544]	; (8013ecc <_strtod_l+0x284>)
 8013caa:	a91b      	add	r1, sp, #108	; 0x6c
 8013cac:	4648      	mov	r0, r9
 8013cae:	f001 ff6c 	bl	8015b8a <__gethex>
 8013cb2:	f010 0407 	ands.w	r4, r0, #7
 8013cb6:	4606      	mov	r6, r0
 8013cb8:	d005      	beq.n	8013cc6 <_strtod_l+0x7e>
 8013cba:	2c06      	cmp	r4, #6
 8013cbc:	d12b      	bne.n	8013d16 <_strtod_l+0xce>
 8013cbe:	3501      	adds	r5, #1
 8013cc0:	2300      	movs	r3, #0
 8013cc2:	951b      	str	r5, [sp, #108]	; 0x6c
 8013cc4:	930d      	str	r3, [sp, #52]	; 0x34
 8013cc6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f040 859a 	bne.w	8014802 <_strtod_l+0xbba>
 8013cce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013cd0:	b1e3      	cbz	r3, 8013d0c <_strtod_l+0xc4>
 8013cd2:	4652      	mov	r2, sl
 8013cd4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013cd8:	ec43 2b10 	vmov	d0, r2, r3
 8013cdc:	b021      	add	sp, #132	; 0x84
 8013cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ce2:	2a2b      	cmp	r2, #43	; 0x2b
 8013ce4:	d015      	beq.n	8013d12 <_strtod_l+0xca>
 8013ce6:	2a2d      	cmp	r2, #45	; 0x2d
 8013ce8:	d004      	beq.n	8013cf4 <_strtod_l+0xac>
 8013cea:	2a20      	cmp	r2, #32
 8013cec:	d1ca      	bne.n	8013c84 <_strtod_l+0x3c>
 8013cee:	3301      	adds	r3, #1
 8013cf0:	931b      	str	r3, [sp, #108]	; 0x6c
 8013cf2:	e7bf      	b.n	8013c74 <_strtod_l+0x2c>
 8013cf4:	2201      	movs	r2, #1
 8013cf6:	920d      	str	r2, [sp, #52]	; 0x34
 8013cf8:	1c5a      	adds	r2, r3, #1
 8013cfa:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cfc:	785b      	ldrb	r3, [r3, #1]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d1c2      	bne.n	8013c88 <_strtod_l+0x40>
 8013d02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013d04:	961b      	str	r6, [sp, #108]	; 0x6c
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f040 8579 	bne.w	80147fe <_strtod_l+0xbb6>
 8013d0c:	4652      	mov	r2, sl
 8013d0e:	465b      	mov	r3, fp
 8013d10:	e7e2      	b.n	8013cd8 <_strtod_l+0x90>
 8013d12:	2200      	movs	r2, #0
 8013d14:	e7ef      	b.n	8013cf6 <_strtod_l+0xae>
 8013d16:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013d18:	b13a      	cbz	r2, 8013d2a <_strtod_l+0xe2>
 8013d1a:	2135      	movs	r1, #53	; 0x35
 8013d1c:	a81e      	add	r0, sp, #120	; 0x78
 8013d1e:	f002 fe8b 	bl	8016a38 <__copybits>
 8013d22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013d24:	4648      	mov	r0, r9
 8013d26:	f002 faf8 	bl	801631a <_Bfree>
 8013d2a:	3c01      	subs	r4, #1
 8013d2c:	2c04      	cmp	r4, #4
 8013d2e:	d806      	bhi.n	8013d3e <_strtod_l+0xf6>
 8013d30:	e8df f004 	tbb	[pc, r4]
 8013d34:	1714030a 	.word	0x1714030a
 8013d38:	0a          	.byte	0x0a
 8013d39:	00          	.byte	0x00
 8013d3a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013d3e:	0730      	lsls	r0, r6, #28
 8013d40:	d5c1      	bpl.n	8013cc6 <_strtod_l+0x7e>
 8013d42:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013d46:	e7be      	b.n	8013cc6 <_strtod_l+0x7e>
 8013d48:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013d4c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013d4e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013d52:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013d56:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013d5a:	e7f0      	b.n	8013d3e <_strtod_l+0xf6>
 8013d5c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013ed0 <_strtod_l+0x288>
 8013d60:	e7ed      	b.n	8013d3e <_strtod_l+0xf6>
 8013d62:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013d66:	f04f 3aff 	mov.w	sl, #4294967295
 8013d6a:	e7e8      	b.n	8013d3e <_strtod_l+0xf6>
 8013d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d6e:	1c5a      	adds	r2, r3, #1
 8013d70:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d72:	785b      	ldrb	r3, [r3, #1]
 8013d74:	2b30      	cmp	r3, #48	; 0x30
 8013d76:	d0f9      	beq.n	8013d6c <_strtod_l+0x124>
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d0a4      	beq.n	8013cc6 <_strtod_l+0x7e>
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	2500      	movs	r5, #0
 8013d80:	9306      	str	r3, [sp, #24]
 8013d82:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d84:	9308      	str	r3, [sp, #32]
 8013d86:	9507      	str	r5, [sp, #28]
 8013d88:	9505      	str	r5, [sp, #20]
 8013d8a:	220a      	movs	r2, #10
 8013d8c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013d8e:	7807      	ldrb	r7, [r0, #0]
 8013d90:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013d94:	b2d9      	uxtb	r1, r3
 8013d96:	2909      	cmp	r1, #9
 8013d98:	d929      	bls.n	8013dee <_strtod_l+0x1a6>
 8013d9a:	4622      	mov	r2, r4
 8013d9c:	f8d8 1000 	ldr.w	r1, [r8]
 8013da0:	f003 fd5a 	bl	8017858 <strncmp>
 8013da4:	2800      	cmp	r0, #0
 8013da6:	d031      	beq.n	8013e0c <_strtod_l+0x1c4>
 8013da8:	2000      	movs	r0, #0
 8013daa:	9c05      	ldr	r4, [sp, #20]
 8013dac:	9004      	str	r0, [sp, #16]
 8013dae:	463b      	mov	r3, r7
 8013db0:	4602      	mov	r2, r0
 8013db2:	2b65      	cmp	r3, #101	; 0x65
 8013db4:	d001      	beq.n	8013dba <_strtod_l+0x172>
 8013db6:	2b45      	cmp	r3, #69	; 0x45
 8013db8:	d114      	bne.n	8013de4 <_strtod_l+0x19c>
 8013dba:	b924      	cbnz	r4, 8013dc6 <_strtod_l+0x17e>
 8013dbc:	b910      	cbnz	r0, 8013dc4 <_strtod_l+0x17c>
 8013dbe:	9b06      	ldr	r3, [sp, #24]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d09e      	beq.n	8013d02 <_strtod_l+0xba>
 8013dc4:	2400      	movs	r4, #0
 8013dc6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013dc8:	1c73      	adds	r3, r6, #1
 8013dca:	931b      	str	r3, [sp, #108]	; 0x6c
 8013dcc:	7873      	ldrb	r3, [r6, #1]
 8013dce:	2b2b      	cmp	r3, #43	; 0x2b
 8013dd0:	d078      	beq.n	8013ec4 <_strtod_l+0x27c>
 8013dd2:	2b2d      	cmp	r3, #45	; 0x2d
 8013dd4:	d070      	beq.n	8013eb8 <_strtod_l+0x270>
 8013dd6:	f04f 0c00 	mov.w	ip, #0
 8013dda:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013dde:	2f09      	cmp	r7, #9
 8013de0:	d97c      	bls.n	8013edc <_strtod_l+0x294>
 8013de2:	961b      	str	r6, [sp, #108]	; 0x6c
 8013de4:	f04f 0e00 	mov.w	lr, #0
 8013de8:	e09a      	b.n	8013f20 <_strtod_l+0x2d8>
 8013dea:	2300      	movs	r3, #0
 8013dec:	e7c7      	b.n	8013d7e <_strtod_l+0x136>
 8013dee:	9905      	ldr	r1, [sp, #20]
 8013df0:	2908      	cmp	r1, #8
 8013df2:	bfdd      	ittte	le
 8013df4:	9907      	ldrle	r1, [sp, #28]
 8013df6:	fb02 3301 	mlale	r3, r2, r1, r3
 8013dfa:	9307      	strle	r3, [sp, #28]
 8013dfc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013e00:	9b05      	ldr	r3, [sp, #20]
 8013e02:	3001      	adds	r0, #1
 8013e04:	3301      	adds	r3, #1
 8013e06:	9305      	str	r3, [sp, #20]
 8013e08:	901b      	str	r0, [sp, #108]	; 0x6c
 8013e0a:	e7bf      	b.n	8013d8c <_strtod_l+0x144>
 8013e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e0e:	191a      	adds	r2, r3, r4
 8013e10:	921b      	str	r2, [sp, #108]	; 0x6c
 8013e12:	9a05      	ldr	r2, [sp, #20]
 8013e14:	5d1b      	ldrb	r3, [r3, r4]
 8013e16:	2a00      	cmp	r2, #0
 8013e18:	d037      	beq.n	8013e8a <_strtod_l+0x242>
 8013e1a:	9c05      	ldr	r4, [sp, #20]
 8013e1c:	4602      	mov	r2, r0
 8013e1e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013e22:	2909      	cmp	r1, #9
 8013e24:	d913      	bls.n	8013e4e <_strtod_l+0x206>
 8013e26:	2101      	movs	r1, #1
 8013e28:	9104      	str	r1, [sp, #16]
 8013e2a:	e7c2      	b.n	8013db2 <_strtod_l+0x16a>
 8013e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e2e:	1c5a      	adds	r2, r3, #1
 8013e30:	921b      	str	r2, [sp, #108]	; 0x6c
 8013e32:	785b      	ldrb	r3, [r3, #1]
 8013e34:	3001      	adds	r0, #1
 8013e36:	2b30      	cmp	r3, #48	; 0x30
 8013e38:	d0f8      	beq.n	8013e2c <_strtod_l+0x1e4>
 8013e3a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013e3e:	2a08      	cmp	r2, #8
 8013e40:	f200 84e4 	bhi.w	801480c <_strtod_l+0xbc4>
 8013e44:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013e46:	9208      	str	r2, [sp, #32]
 8013e48:	4602      	mov	r2, r0
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013e52:	f100 0101 	add.w	r1, r0, #1
 8013e56:	d012      	beq.n	8013e7e <_strtod_l+0x236>
 8013e58:	440a      	add	r2, r1
 8013e5a:	eb00 0c04 	add.w	ip, r0, r4
 8013e5e:	4621      	mov	r1, r4
 8013e60:	270a      	movs	r7, #10
 8013e62:	458c      	cmp	ip, r1
 8013e64:	d113      	bne.n	8013e8e <_strtod_l+0x246>
 8013e66:	1821      	adds	r1, r4, r0
 8013e68:	2908      	cmp	r1, #8
 8013e6a:	f104 0401 	add.w	r4, r4, #1
 8013e6e:	4404      	add	r4, r0
 8013e70:	dc19      	bgt.n	8013ea6 <_strtod_l+0x25e>
 8013e72:	9b07      	ldr	r3, [sp, #28]
 8013e74:	210a      	movs	r1, #10
 8013e76:	fb01 e303 	mla	r3, r1, r3, lr
 8013e7a:	9307      	str	r3, [sp, #28]
 8013e7c:	2100      	movs	r1, #0
 8013e7e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e80:	1c58      	adds	r0, r3, #1
 8013e82:	901b      	str	r0, [sp, #108]	; 0x6c
 8013e84:	785b      	ldrb	r3, [r3, #1]
 8013e86:	4608      	mov	r0, r1
 8013e88:	e7c9      	b.n	8013e1e <_strtod_l+0x1d6>
 8013e8a:	9805      	ldr	r0, [sp, #20]
 8013e8c:	e7d3      	b.n	8013e36 <_strtod_l+0x1ee>
 8013e8e:	2908      	cmp	r1, #8
 8013e90:	f101 0101 	add.w	r1, r1, #1
 8013e94:	dc03      	bgt.n	8013e9e <_strtod_l+0x256>
 8013e96:	9b07      	ldr	r3, [sp, #28]
 8013e98:	437b      	muls	r3, r7
 8013e9a:	9307      	str	r3, [sp, #28]
 8013e9c:	e7e1      	b.n	8013e62 <_strtod_l+0x21a>
 8013e9e:	2910      	cmp	r1, #16
 8013ea0:	bfd8      	it	le
 8013ea2:	437d      	mulle	r5, r7
 8013ea4:	e7dd      	b.n	8013e62 <_strtod_l+0x21a>
 8013ea6:	2c10      	cmp	r4, #16
 8013ea8:	bfdc      	itt	le
 8013eaa:	210a      	movle	r1, #10
 8013eac:	fb01 e505 	mlale	r5, r1, r5, lr
 8013eb0:	e7e4      	b.n	8013e7c <_strtod_l+0x234>
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	9304      	str	r3, [sp, #16]
 8013eb6:	e781      	b.n	8013dbc <_strtod_l+0x174>
 8013eb8:	f04f 0c01 	mov.w	ip, #1
 8013ebc:	1cb3      	adds	r3, r6, #2
 8013ebe:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ec0:	78b3      	ldrb	r3, [r6, #2]
 8013ec2:	e78a      	b.n	8013dda <_strtod_l+0x192>
 8013ec4:	f04f 0c00 	mov.w	ip, #0
 8013ec8:	e7f8      	b.n	8013ebc <_strtod_l+0x274>
 8013eca:	bf00      	nop
 8013ecc:	080183bc 	.word	0x080183bc
 8013ed0:	7ff00000 	.word	0x7ff00000
 8013ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ed6:	1c5f      	adds	r7, r3, #1
 8013ed8:	971b      	str	r7, [sp, #108]	; 0x6c
 8013eda:	785b      	ldrb	r3, [r3, #1]
 8013edc:	2b30      	cmp	r3, #48	; 0x30
 8013ede:	d0f9      	beq.n	8013ed4 <_strtod_l+0x28c>
 8013ee0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013ee4:	2f08      	cmp	r7, #8
 8013ee6:	f63f af7d 	bhi.w	8013de4 <_strtod_l+0x19c>
 8013eea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013eee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ef0:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ef4:	1c5f      	adds	r7, r3, #1
 8013ef6:	971b      	str	r7, [sp, #108]	; 0x6c
 8013ef8:	785b      	ldrb	r3, [r3, #1]
 8013efa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013efe:	f1b8 0f09 	cmp.w	r8, #9
 8013f02:	d937      	bls.n	8013f74 <_strtod_l+0x32c>
 8013f04:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013f06:	1a7f      	subs	r7, r7, r1
 8013f08:	2f08      	cmp	r7, #8
 8013f0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013f0e:	dc37      	bgt.n	8013f80 <_strtod_l+0x338>
 8013f10:	45be      	cmp	lr, r7
 8013f12:	bfa8      	it	ge
 8013f14:	46be      	movge	lr, r7
 8013f16:	f1bc 0f00 	cmp.w	ip, #0
 8013f1a:	d001      	beq.n	8013f20 <_strtod_l+0x2d8>
 8013f1c:	f1ce 0e00 	rsb	lr, lr, #0
 8013f20:	2c00      	cmp	r4, #0
 8013f22:	d151      	bne.n	8013fc8 <_strtod_l+0x380>
 8013f24:	2800      	cmp	r0, #0
 8013f26:	f47f aece 	bne.w	8013cc6 <_strtod_l+0x7e>
 8013f2a:	9a06      	ldr	r2, [sp, #24]
 8013f2c:	2a00      	cmp	r2, #0
 8013f2e:	f47f aeca 	bne.w	8013cc6 <_strtod_l+0x7e>
 8013f32:	9a04      	ldr	r2, [sp, #16]
 8013f34:	2a00      	cmp	r2, #0
 8013f36:	f47f aee4 	bne.w	8013d02 <_strtod_l+0xba>
 8013f3a:	2b4e      	cmp	r3, #78	; 0x4e
 8013f3c:	d027      	beq.n	8013f8e <_strtod_l+0x346>
 8013f3e:	dc21      	bgt.n	8013f84 <_strtod_l+0x33c>
 8013f40:	2b49      	cmp	r3, #73	; 0x49
 8013f42:	f47f aede 	bne.w	8013d02 <_strtod_l+0xba>
 8013f46:	49a0      	ldr	r1, [pc, #640]	; (80141c8 <_strtod_l+0x580>)
 8013f48:	a81b      	add	r0, sp, #108	; 0x6c
 8013f4a:	f002 f851 	bl	8015ff0 <__match>
 8013f4e:	2800      	cmp	r0, #0
 8013f50:	f43f aed7 	beq.w	8013d02 <_strtod_l+0xba>
 8013f54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f56:	499d      	ldr	r1, [pc, #628]	; (80141cc <_strtod_l+0x584>)
 8013f58:	3b01      	subs	r3, #1
 8013f5a:	a81b      	add	r0, sp, #108	; 0x6c
 8013f5c:	931b      	str	r3, [sp, #108]	; 0x6c
 8013f5e:	f002 f847 	bl	8015ff0 <__match>
 8013f62:	b910      	cbnz	r0, 8013f6a <_strtod_l+0x322>
 8013f64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f66:	3301      	adds	r3, #1
 8013f68:	931b      	str	r3, [sp, #108]	; 0x6c
 8013f6a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80141e0 <_strtod_l+0x598>
 8013f6e:	f04f 0a00 	mov.w	sl, #0
 8013f72:	e6a8      	b.n	8013cc6 <_strtod_l+0x7e>
 8013f74:	210a      	movs	r1, #10
 8013f76:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013f7a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013f7e:	e7b8      	b.n	8013ef2 <_strtod_l+0x2aa>
 8013f80:	46be      	mov	lr, r7
 8013f82:	e7c8      	b.n	8013f16 <_strtod_l+0x2ce>
 8013f84:	2b69      	cmp	r3, #105	; 0x69
 8013f86:	d0de      	beq.n	8013f46 <_strtod_l+0x2fe>
 8013f88:	2b6e      	cmp	r3, #110	; 0x6e
 8013f8a:	f47f aeba 	bne.w	8013d02 <_strtod_l+0xba>
 8013f8e:	4990      	ldr	r1, [pc, #576]	; (80141d0 <_strtod_l+0x588>)
 8013f90:	a81b      	add	r0, sp, #108	; 0x6c
 8013f92:	f002 f82d 	bl	8015ff0 <__match>
 8013f96:	2800      	cmp	r0, #0
 8013f98:	f43f aeb3 	beq.w	8013d02 <_strtod_l+0xba>
 8013f9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013f9e:	781b      	ldrb	r3, [r3, #0]
 8013fa0:	2b28      	cmp	r3, #40	; 0x28
 8013fa2:	d10e      	bne.n	8013fc2 <_strtod_l+0x37a>
 8013fa4:	aa1e      	add	r2, sp, #120	; 0x78
 8013fa6:	498b      	ldr	r1, [pc, #556]	; (80141d4 <_strtod_l+0x58c>)
 8013fa8:	a81b      	add	r0, sp, #108	; 0x6c
 8013faa:	f002 f835 	bl	8016018 <__hexnan>
 8013fae:	2805      	cmp	r0, #5
 8013fb0:	d107      	bne.n	8013fc2 <_strtod_l+0x37a>
 8013fb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013fb4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013fb8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013fbc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013fc0:	e681      	b.n	8013cc6 <_strtod_l+0x7e>
 8013fc2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80141e8 <_strtod_l+0x5a0>
 8013fc6:	e7d2      	b.n	8013f6e <_strtod_l+0x326>
 8013fc8:	ebae 0302 	sub.w	r3, lr, r2
 8013fcc:	9306      	str	r3, [sp, #24]
 8013fce:	9b05      	ldr	r3, [sp, #20]
 8013fd0:	9807      	ldr	r0, [sp, #28]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	bf08      	it	eq
 8013fd6:	4623      	moveq	r3, r4
 8013fd8:	2c10      	cmp	r4, #16
 8013fda:	9305      	str	r3, [sp, #20]
 8013fdc:	46a0      	mov	r8, r4
 8013fde:	bfa8      	it	ge
 8013fe0:	f04f 0810 	movge.w	r8, #16
 8013fe4:	f7ec faa6 	bl	8000534 <__aeabi_ui2d>
 8013fe8:	2c09      	cmp	r4, #9
 8013fea:	4682      	mov	sl, r0
 8013fec:	468b      	mov	fp, r1
 8013fee:	dc13      	bgt.n	8014018 <_strtod_l+0x3d0>
 8013ff0:	9b06      	ldr	r3, [sp, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	f43f ae67 	beq.w	8013cc6 <_strtod_l+0x7e>
 8013ff8:	9b06      	ldr	r3, [sp, #24]
 8013ffa:	dd7a      	ble.n	80140f2 <_strtod_l+0x4aa>
 8013ffc:	2b16      	cmp	r3, #22
 8013ffe:	dc61      	bgt.n	80140c4 <_strtod_l+0x47c>
 8014000:	4a75      	ldr	r2, [pc, #468]	; (80141d8 <_strtod_l+0x590>)
 8014002:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8014006:	e9de 0100 	ldrd	r0, r1, [lr]
 801400a:	4652      	mov	r2, sl
 801400c:	465b      	mov	r3, fp
 801400e:	f7ec fb0b 	bl	8000628 <__aeabi_dmul>
 8014012:	4682      	mov	sl, r0
 8014014:	468b      	mov	fp, r1
 8014016:	e656      	b.n	8013cc6 <_strtod_l+0x7e>
 8014018:	4b6f      	ldr	r3, [pc, #444]	; (80141d8 <_strtod_l+0x590>)
 801401a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801401e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8014022:	f7ec fb01 	bl	8000628 <__aeabi_dmul>
 8014026:	4606      	mov	r6, r0
 8014028:	4628      	mov	r0, r5
 801402a:	460f      	mov	r7, r1
 801402c:	f7ec fa82 	bl	8000534 <__aeabi_ui2d>
 8014030:	4602      	mov	r2, r0
 8014032:	460b      	mov	r3, r1
 8014034:	4630      	mov	r0, r6
 8014036:	4639      	mov	r1, r7
 8014038:	f7ec f940 	bl	80002bc <__adddf3>
 801403c:	2c0f      	cmp	r4, #15
 801403e:	4682      	mov	sl, r0
 8014040:	468b      	mov	fp, r1
 8014042:	ddd5      	ble.n	8013ff0 <_strtod_l+0x3a8>
 8014044:	9b06      	ldr	r3, [sp, #24]
 8014046:	eba4 0808 	sub.w	r8, r4, r8
 801404a:	4498      	add	r8, r3
 801404c:	f1b8 0f00 	cmp.w	r8, #0
 8014050:	f340 8096 	ble.w	8014180 <_strtod_l+0x538>
 8014054:	f018 030f 	ands.w	r3, r8, #15
 8014058:	d00a      	beq.n	8014070 <_strtod_l+0x428>
 801405a:	495f      	ldr	r1, [pc, #380]	; (80141d8 <_strtod_l+0x590>)
 801405c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8014060:	4652      	mov	r2, sl
 8014062:	465b      	mov	r3, fp
 8014064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014068:	f7ec fade 	bl	8000628 <__aeabi_dmul>
 801406c:	4682      	mov	sl, r0
 801406e:	468b      	mov	fp, r1
 8014070:	f038 080f 	bics.w	r8, r8, #15
 8014074:	d073      	beq.n	801415e <_strtod_l+0x516>
 8014076:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801407a:	dd47      	ble.n	801410c <_strtod_l+0x4c4>
 801407c:	2400      	movs	r4, #0
 801407e:	46a0      	mov	r8, r4
 8014080:	9407      	str	r4, [sp, #28]
 8014082:	9405      	str	r4, [sp, #20]
 8014084:	2322      	movs	r3, #34	; 0x22
 8014086:	f8df b158 	ldr.w	fp, [pc, #344]	; 80141e0 <_strtod_l+0x598>
 801408a:	f8c9 3000 	str.w	r3, [r9]
 801408e:	f04f 0a00 	mov.w	sl, #0
 8014092:	9b07      	ldr	r3, [sp, #28]
 8014094:	2b00      	cmp	r3, #0
 8014096:	f43f ae16 	beq.w	8013cc6 <_strtod_l+0x7e>
 801409a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801409c:	4648      	mov	r0, r9
 801409e:	f002 f93c 	bl	801631a <_Bfree>
 80140a2:	9905      	ldr	r1, [sp, #20]
 80140a4:	4648      	mov	r0, r9
 80140a6:	f002 f938 	bl	801631a <_Bfree>
 80140aa:	4641      	mov	r1, r8
 80140ac:	4648      	mov	r0, r9
 80140ae:	f002 f934 	bl	801631a <_Bfree>
 80140b2:	9907      	ldr	r1, [sp, #28]
 80140b4:	4648      	mov	r0, r9
 80140b6:	f002 f930 	bl	801631a <_Bfree>
 80140ba:	4621      	mov	r1, r4
 80140bc:	4648      	mov	r0, r9
 80140be:	f002 f92c 	bl	801631a <_Bfree>
 80140c2:	e600      	b.n	8013cc6 <_strtod_l+0x7e>
 80140c4:	9a06      	ldr	r2, [sp, #24]
 80140c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80140ca:	4293      	cmp	r3, r2
 80140cc:	dbba      	blt.n	8014044 <_strtod_l+0x3fc>
 80140ce:	4d42      	ldr	r5, [pc, #264]	; (80141d8 <_strtod_l+0x590>)
 80140d0:	f1c4 040f 	rsb	r4, r4, #15
 80140d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80140d8:	4652      	mov	r2, sl
 80140da:	465b      	mov	r3, fp
 80140dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140e0:	f7ec faa2 	bl	8000628 <__aeabi_dmul>
 80140e4:	9b06      	ldr	r3, [sp, #24]
 80140e6:	1b1c      	subs	r4, r3, r4
 80140e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80140ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80140f0:	e78d      	b.n	801400e <_strtod_l+0x3c6>
 80140f2:	f113 0f16 	cmn.w	r3, #22
 80140f6:	dba5      	blt.n	8014044 <_strtod_l+0x3fc>
 80140f8:	4a37      	ldr	r2, [pc, #220]	; (80141d8 <_strtod_l+0x590>)
 80140fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80140fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8014102:	4650      	mov	r0, sl
 8014104:	4659      	mov	r1, fp
 8014106:	f7ec fbb9 	bl	800087c <__aeabi_ddiv>
 801410a:	e782      	b.n	8014012 <_strtod_l+0x3ca>
 801410c:	2300      	movs	r3, #0
 801410e:	4e33      	ldr	r6, [pc, #204]	; (80141dc <_strtod_l+0x594>)
 8014110:	ea4f 1828 	mov.w	r8, r8, asr #4
 8014114:	4650      	mov	r0, sl
 8014116:	4659      	mov	r1, fp
 8014118:	461d      	mov	r5, r3
 801411a:	f1b8 0f01 	cmp.w	r8, #1
 801411e:	dc21      	bgt.n	8014164 <_strtod_l+0x51c>
 8014120:	b10b      	cbz	r3, 8014126 <_strtod_l+0x4de>
 8014122:	4682      	mov	sl, r0
 8014124:	468b      	mov	fp, r1
 8014126:	4b2d      	ldr	r3, [pc, #180]	; (80141dc <_strtod_l+0x594>)
 8014128:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801412c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014130:	4652      	mov	r2, sl
 8014132:	465b      	mov	r3, fp
 8014134:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014138:	f7ec fa76 	bl	8000628 <__aeabi_dmul>
 801413c:	4b28      	ldr	r3, [pc, #160]	; (80141e0 <_strtod_l+0x598>)
 801413e:	460a      	mov	r2, r1
 8014140:	400b      	ands	r3, r1
 8014142:	4928      	ldr	r1, [pc, #160]	; (80141e4 <_strtod_l+0x59c>)
 8014144:	428b      	cmp	r3, r1
 8014146:	4682      	mov	sl, r0
 8014148:	d898      	bhi.n	801407c <_strtod_l+0x434>
 801414a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801414e:	428b      	cmp	r3, r1
 8014150:	bf86      	itte	hi
 8014152:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80141ec <_strtod_l+0x5a4>
 8014156:	f04f 3aff 	movhi.w	sl, #4294967295
 801415a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801415e:	2300      	movs	r3, #0
 8014160:	9304      	str	r3, [sp, #16]
 8014162:	e077      	b.n	8014254 <_strtod_l+0x60c>
 8014164:	f018 0f01 	tst.w	r8, #1
 8014168:	d006      	beq.n	8014178 <_strtod_l+0x530>
 801416a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014172:	f7ec fa59 	bl	8000628 <__aeabi_dmul>
 8014176:	2301      	movs	r3, #1
 8014178:	3501      	adds	r5, #1
 801417a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801417e:	e7cc      	b.n	801411a <_strtod_l+0x4d2>
 8014180:	d0ed      	beq.n	801415e <_strtod_l+0x516>
 8014182:	f1c8 0800 	rsb	r8, r8, #0
 8014186:	f018 020f 	ands.w	r2, r8, #15
 801418a:	d00a      	beq.n	80141a2 <_strtod_l+0x55a>
 801418c:	4b12      	ldr	r3, [pc, #72]	; (80141d8 <_strtod_l+0x590>)
 801418e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014192:	4650      	mov	r0, sl
 8014194:	4659      	mov	r1, fp
 8014196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419a:	f7ec fb6f 	bl	800087c <__aeabi_ddiv>
 801419e:	4682      	mov	sl, r0
 80141a0:	468b      	mov	fp, r1
 80141a2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80141a6:	d0da      	beq.n	801415e <_strtod_l+0x516>
 80141a8:	f1b8 0f1f 	cmp.w	r8, #31
 80141ac:	dd20      	ble.n	80141f0 <_strtod_l+0x5a8>
 80141ae:	2400      	movs	r4, #0
 80141b0:	46a0      	mov	r8, r4
 80141b2:	9407      	str	r4, [sp, #28]
 80141b4:	9405      	str	r4, [sp, #20]
 80141b6:	2322      	movs	r3, #34	; 0x22
 80141b8:	f04f 0a00 	mov.w	sl, #0
 80141bc:	f04f 0b00 	mov.w	fp, #0
 80141c0:	f8c9 3000 	str.w	r3, [r9]
 80141c4:	e765      	b.n	8014092 <_strtod_l+0x44a>
 80141c6:	bf00      	nop
 80141c8:	08018389 	.word	0x08018389
 80141cc:	08018413 	.word	0x08018413
 80141d0:	08018391 	.word	0x08018391
 80141d4:	080183d0 	.word	0x080183d0
 80141d8:	080184b8 	.word	0x080184b8
 80141dc:	08018490 	.word	0x08018490
 80141e0:	7ff00000 	.word	0x7ff00000
 80141e4:	7ca00000 	.word	0x7ca00000
 80141e8:	fff80000 	.word	0xfff80000
 80141ec:	7fefffff 	.word	0x7fefffff
 80141f0:	f018 0310 	ands.w	r3, r8, #16
 80141f4:	bf18      	it	ne
 80141f6:	236a      	movne	r3, #106	; 0x6a
 80141f8:	4da0      	ldr	r5, [pc, #640]	; (801447c <_strtod_l+0x834>)
 80141fa:	9304      	str	r3, [sp, #16]
 80141fc:	4650      	mov	r0, sl
 80141fe:	4659      	mov	r1, fp
 8014200:	2300      	movs	r3, #0
 8014202:	f1b8 0f00 	cmp.w	r8, #0
 8014206:	f300 810a 	bgt.w	801441e <_strtod_l+0x7d6>
 801420a:	b10b      	cbz	r3, 8014210 <_strtod_l+0x5c8>
 801420c:	4682      	mov	sl, r0
 801420e:	468b      	mov	fp, r1
 8014210:	9b04      	ldr	r3, [sp, #16]
 8014212:	b1bb      	cbz	r3, 8014244 <_strtod_l+0x5fc>
 8014214:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8014218:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801421c:	2b00      	cmp	r3, #0
 801421e:	4659      	mov	r1, fp
 8014220:	dd10      	ble.n	8014244 <_strtod_l+0x5fc>
 8014222:	2b1f      	cmp	r3, #31
 8014224:	f340 8107 	ble.w	8014436 <_strtod_l+0x7ee>
 8014228:	2b34      	cmp	r3, #52	; 0x34
 801422a:	bfde      	ittt	le
 801422c:	3b20      	suble	r3, #32
 801422e:	f04f 32ff 	movle.w	r2, #4294967295
 8014232:	fa02 f303 	lslle.w	r3, r2, r3
 8014236:	f04f 0a00 	mov.w	sl, #0
 801423a:	bfcc      	ite	gt
 801423c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014240:	ea03 0b01 	andle.w	fp, r3, r1
 8014244:	2200      	movs	r2, #0
 8014246:	2300      	movs	r3, #0
 8014248:	4650      	mov	r0, sl
 801424a:	4659      	mov	r1, fp
 801424c:	f7ec fc54 	bl	8000af8 <__aeabi_dcmpeq>
 8014250:	2800      	cmp	r0, #0
 8014252:	d1ac      	bne.n	80141ae <_strtod_l+0x566>
 8014254:	9b07      	ldr	r3, [sp, #28]
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	9a05      	ldr	r2, [sp, #20]
 801425a:	9908      	ldr	r1, [sp, #32]
 801425c:	4623      	mov	r3, r4
 801425e:	4648      	mov	r0, r9
 8014260:	f002 f8ad 	bl	80163be <__s2b>
 8014264:	9007      	str	r0, [sp, #28]
 8014266:	2800      	cmp	r0, #0
 8014268:	f43f af08 	beq.w	801407c <_strtod_l+0x434>
 801426c:	9a06      	ldr	r2, [sp, #24]
 801426e:	9b06      	ldr	r3, [sp, #24]
 8014270:	2a00      	cmp	r2, #0
 8014272:	f1c3 0300 	rsb	r3, r3, #0
 8014276:	bfa8      	it	ge
 8014278:	2300      	movge	r3, #0
 801427a:	930e      	str	r3, [sp, #56]	; 0x38
 801427c:	2400      	movs	r4, #0
 801427e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8014282:	9316      	str	r3, [sp, #88]	; 0x58
 8014284:	46a0      	mov	r8, r4
 8014286:	9b07      	ldr	r3, [sp, #28]
 8014288:	4648      	mov	r0, r9
 801428a:	6859      	ldr	r1, [r3, #4]
 801428c:	f002 f811 	bl	80162b2 <_Balloc>
 8014290:	9005      	str	r0, [sp, #20]
 8014292:	2800      	cmp	r0, #0
 8014294:	f43f aef6 	beq.w	8014084 <_strtod_l+0x43c>
 8014298:	9b07      	ldr	r3, [sp, #28]
 801429a:	691a      	ldr	r2, [r3, #16]
 801429c:	3202      	adds	r2, #2
 801429e:	f103 010c 	add.w	r1, r3, #12
 80142a2:	0092      	lsls	r2, r2, #2
 80142a4:	300c      	adds	r0, #12
 80142a6:	f001 fff9 	bl	801629c <memcpy>
 80142aa:	aa1e      	add	r2, sp, #120	; 0x78
 80142ac:	a91d      	add	r1, sp, #116	; 0x74
 80142ae:	ec4b ab10 	vmov	d0, sl, fp
 80142b2:	4648      	mov	r0, r9
 80142b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80142b8:	f002 fb3c 	bl	8016934 <__d2b>
 80142bc:	901c      	str	r0, [sp, #112]	; 0x70
 80142be:	2800      	cmp	r0, #0
 80142c0:	f43f aee0 	beq.w	8014084 <_strtod_l+0x43c>
 80142c4:	2101      	movs	r1, #1
 80142c6:	4648      	mov	r0, r9
 80142c8:	f002 f905 	bl	80164d6 <__i2b>
 80142cc:	4680      	mov	r8, r0
 80142ce:	2800      	cmp	r0, #0
 80142d0:	f43f aed8 	beq.w	8014084 <_strtod_l+0x43c>
 80142d4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80142d6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80142d8:	2e00      	cmp	r6, #0
 80142da:	bfab      	itete	ge
 80142dc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80142de:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80142e0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80142e2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80142e4:	bfac      	ite	ge
 80142e6:	18f7      	addge	r7, r6, r3
 80142e8:	1b9d      	sublt	r5, r3, r6
 80142ea:	9b04      	ldr	r3, [sp, #16]
 80142ec:	1af6      	subs	r6, r6, r3
 80142ee:	4416      	add	r6, r2
 80142f0:	4b63      	ldr	r3, [pc, #396]	; (8014480 <_strtod_l+0x838>)
 80142f2:	3e01      	subs	r6, #1
 80142f4:	429e      	cmp	r6, r3
 80142f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80142fa:	f280 80af 	bge.w	801445c <_strtod_l+0x814>
 80142fe:	1b9b      	subs	r3, r3, r6
 8014300:	2b1f      	cmp	r3, #31
 8014302:	eba2 0203 	sub.w	r2, r2, r3
 8014306:	f04f 0101 	mov.w	r1, #1
 801430a:	f300 809b 	bgt.w	8014444 <_strtod_l+0x7fc>
 801430e:	fa01 f303 	lsl.w	r3, r1, r3
 8014312:	930f      	str	r3, [sp, #60]	; 0x3c
 8014314:	2300      	movs	r3, #0
 8014316:	930a      	str	r3, [sp, #40]	; 0x28
 8014318:	18be      	adds	r6, r7, r2
 801431a:	9b04      	ldr	r3, [sp, #16]
 801431c:	42b7      	cmp	r7, r6
 801431e:	4415      	add	r5, r2
 8014320:	441d      	add	r5, r3
 8014322:	463b      	mov	r3, r7
 8014324:	bfa8      	it	ge
 8014326:	4633      	movge	r3, r6
 8014328:	42ab      	cmp	r3, r5
 801432a:	bfa8      	it	ge
 801432c:	462b      	movge	r3, r5
 801432e:	2b00      	cmp	r3, #0
 8014330:	bfc2      	ittt	gt
 8014332:	1af6      	subgt	r6, r6, r3
 8014334:	1aed      	subgt	r5, r5, r3
 8014336:	1aff      	subgt	r7, r7, r3
 8014338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801433a:	b1bb      	cbz	r3, 801436c <_strtod_l+0x724>
 801433c:	4641      	mov	r1, r8
 801433e:	461a      	mov	r2, r3
 8014340:	4648      	mov	r0, r9
 8014342:	f002 f967 	bl	8016614 <__pow5mult>
 8014346:	4680      	mov	r8, r0
 8014348:	2800      	cmp	r0, #0
 801434a:	f43f ae9b 	beq.w	8014084 <_strtod_l+0x43c>
 801434e:	4601      	mov	r1, r0
 8014350:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014352:	4648      	mov	r0, r9
 8014354:	f002 f8c8 	bl	80164e8 <__multiply>
 8014358:	900c      	str	r0, [sp, #48]	; 0x30
 801435a:	2800      	cmp	r0, #0
 801435c:	f43f ae92 	beq.w	8014084 <_strtod_l+0x43c>
 8014360:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014362:	4648      	mov	r0, r9
 8014364:	f001 ffd9 	bl	801631a <_Bfree>
 8014368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801436a:	931c      	str	r3, [sp, #112]	; 0x70
 801436c:	2e00      	cmp	r6, #0
 801436e:	dc7a      	bgt.n	8014466 <_strtod_l+0x81e>
 8014370:	9b06      	ldr	r3, [sp, #24]
 8014372:	2b00      	cmp	r3, #0
 8014374:	dd08      	ble.n	8014388 <_strtod_l+0x740>
 8014376:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014378:	9905      	ldr	r1, [sp, #20]
 801437a:	4648      	mov	r0, r9
 801437c:	f002 f94a 	bl	8016614 <__pow5mult>
 8014380:	9005      	str	r0, [sp, #20]
 8014382:	2800      	cmp	r0, #0
 8014384:	f43f ae7e 	beq.w	8014084 <_strtod_l+0x43c>
 8014388:	2d00      	cmp	r5, #0
 801438a:	dd08      	ble.n	801439e <_strtod_l+0x756>
 801438c:	462a      	mov	r2, r5
 801438e:	9905      	ldr	r1, [sp, #20]
 8014390:	4648      	mov	r0, r9
 8014392:	f002 f98d 	bl	80166b0 <__lshift>
 8014396:	9005      	str	r0, [sp, #20]
 8014398:	2800      	cmp	r0, #0
 801439a:	f43f ae73 	beq.w	8014084 <_strtod_l+0x43c>
 801439e:	2f00      	cmp	r7, #0
 80143a0:	dd08      	ble.n	80143b4 <_strtod_l+0x76c>
 80143a2:	4641      	mov	r1, r8
 80143a4:	463a      	mov	r2, r7
 80143a6:	4648      	mov	r0, r9
 80143a8:	f002 f982 	bl	80166b0 <__lshift>
 80143ac:	4680      	mov	r8, r0
 80143ae:	2800      	cmp	r0, #0
 80143b0:	f43f ae68 	beq.w	8014084 <_strtod_l+0x43c>
 80143b4:	9a05      	ldr	r2, [sp, #20]
 80143b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80143b8:	4648      	mov	r0, r9
 80143ba:	f002 f9e7 	bl	801678c <__mdiff>
 80143be:	4604      	mov	r4, r0
 80143c0:	2800      	cmp	r0, #0
 80143c2:	f43f ae5f 	beq.w	8014084 <_strtod_l+0x43c>
 80143c6:	68c3      	ldr	r3, [r0, #12]
 80143c8:	930c      	str	r3, [sp, #48]	; 0x30
 80143ca:	2300      	movs	r3, #0
 80143cc:	60c3      	str	r3, [r0, #12]
 80143ce:	4641      	mov	r1, r8
 80143d0:	f002 f9c2 	bl	8016758 <__mcmp>
 80143d4:	2800      	cmp	r0, #0
 80143d6:	da55      	bge.n	8014484 <_strtod_l+0x83c>
 80143d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143da:	b9e3      	cbnz	r3, 8014416 <_strtod_l+0x7ce>
 80143dc:	f1ba 0f00 	cmp.w	sl, #0
 80143e0:	d119      	bne.n	8014416 <_strtod_l+0x7ce>
 80143e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80143e6:	b9b3      	cbnz	r3, 8014416 <_strtod_l+0x7ce>
 80143e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80143ec:	0d1b      	lsrs	r3, r3, #20
 80143ee:	051b      	lsls	r3, r3, #20
 80143f0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80143f4:	d90f      	bls.n	8014416 <_strtod_l+0x7ce>
 80143f6:	6963      	ldr	r3, [r4, #20]
 80143f8:	b913      	cbnz	r3, 8014400 <_strtod_l+0x7b8>
 80143fa:	6923      	ldr	r3, [r4, #16]
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	dd0a      	ble.n	8014416 <_strtod_l+0x7ce>
 8014400:	4621      	mov	r1, r4
 8014402:	2201      	movs	r2, #1
 8014404:	4648      	mov	r0, r9
 8014406:	f002 f953 	bl	80166b0 <__lshift>
 801440a:	4641      	mov	r1, r8
 801440c:	4604      	mov	r4, r0
 801440e:	f002 f9a3 	bl	8016758 <__mcmp>
 8014412:	2800      	cmp	r0, #0
 8014414:	dc67      	bgt.n	80144e6 <_strtod_l+0x89e>
 8014416:	9b04      	ldr	r3, [sp, #16]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d171      	bne.n	8014500 <_strtod_l+0x8b8>
 801441c:	e63d      	b.n	801409a <_strtod_l+0x452>
 801441e:	f018 0f01 	tst.w	r8, #1
 8014422:	d004      	beq.n	801442e <_strtod_l+0x7e6>
 8014424:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014428:	f7ec f8fe 	bl	8000628 <__aeabi_dmul>
 801442c:	2301      	movs	r3, #1
 801442e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014432:	3508      	adds	r5, #8
 8014434:	e6e5      	b.n	8014202 <_strtod_l+0x5ba>
 8014436:	f04f 32ff 	mov.w	r2, #4294967295
 801443a:	fa02 f303 	lsl.w	r3, r2, r3
 801443e:	ea03 0a0a 	and.w	sl, r3, sl
 8014442:	e6ff      	b.n	8014244 <_strtod_l+0x5fc>
 8014444:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014448:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801444c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014450:	36e2      	adds	r6, #226	; 0xe2
 8014452:	fa01 f306 	lsl.w	r3, r1, r6
 8014456:	930a      	str	r3, [sp, #40]	; 0x28
 8014458:	910f      	str	r1, [sp, #60]	; 0x3c
 801445a:	e75d      	b.n	8014318 <_strtod_l+0x6d0>
 801445c:	2300      	movs	r3, #0
 801445e:	930a      	str	r3, [sp, #40]	; 0x28
 8014460:	2301      	movs	r3, #1
 8014462:	930f      	str	r3, [sp, #60]	; 0x3c
 8014464:	e758      	b.n	8014318 <_strtod_l+0x6d0>
 8014466:	4632      	mov	r2, r6
 8014468:	991c      	ldr	r1, [sp, #112]	; 0x70
 801446a:	4648      	mov	r0, r9
 801446c:	f002 f920 	bl	80166b0 <__lshift>
 8014470:	901c      	str	r0, [sp, #112]	; 0x70
 8014472:	2800      	cmp	r0, #0
 8014474:	f47f af7c 	bne.w	8014370 <_strtod_l+0x728>
 8014478:	e604      	b.n	8014084 <_strtod_l+0x43c>
 801447a:	bf00      	nop
 801447c:	080183e8 	.word	0x080183e8
 8014480:	fffffc02 	.word	0xfffffc02
 8014484:	465d      	mov	r5, fp
 8014486:	f040 8086 	bne.w	8014596 <_strtod_l+0x94e>
 801448a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801448c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014490:	b32a      	cbz	r2, 80144de <_strtod_l+0x896>
 8014492:	4aaf      	ldr	r2, [pc, #700]	; (8014750 <_strtod_l+0xb08>)
 8014494:	4293      	cmp	r3, r2
 8014496:	d153      	bne.n	8014540 <_strtod_l+0x8f8>
 8014498:	9b04      	ldr	r3, [sp, #16]
 801449a:	4650      	mov	r0, sl
 801449c:	b1d3      	cbz	r3, 80144d4 <_strtod_l+0x88c>
 801449e:	4aad      	ldr	r2, [pc, #692]	; (8014754 <_strtod_l+0xb0c>)
 80144a0:	402a      	ands	r2, r5
 80144a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80144a6:	f04f 31ff 	mov.w	r1, #4294967295
 80144aa:	d816      	bhi.n	80144da <_strtod_l+0x892>
 80144ac:	0d12      	lsrs	r2, r2, #20
 80144ae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80144b2:	fa01 f303 	lsl.w	r3, r1, r3
 80144b6:	4298      	cmp	r0, r3
 80144b8:	d142      	bne.n	8014540 <_strtod_l+0x8f8>
 80144ba:	4ba7      	ldr	r3, [pc, #668]	; (8014758 <_strtod_l+0xb10>)
 80144bc:	429d      	cmp	r5, r3
 80144be:	d102      	bne.n	80144c6 <_strtod_l+0x87e>
 80144c0:	3001      	adds	r0, #1
 80144c2:	f43f addf 	beq.w	8014084 <_strtod_l+0x43c>
 80144c6:	4ba3      	ldr	r3, [pc, #652]	; (8014754 <_strtod_l+0xb0c>)
 80144c8:	402b      	ands	r3, r5
 80144ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80144ce:	f04f 0a00 	mov.w	sl, #0
 80144d2:	e7a0      	b.n	8014416 <_strtod_l+0x7ce>
 80144d4:	f04f 33ff 	mov.w	r3, #4294967295
 80144d8:	e7ed      	b.n	80144b6 <_strtod_l+0x86e>
 80144da:	460b      	mov	r3, r1
 80144dc:	e7eb      	b.n	80144b6 <_strtod_l+0x86e>
 80144de:	bb7b      	cbnz	r3, 8014540 <_strtod_l+0x8f8>
 80144e0:	f1ba 0f00 	cmp.w	sl, #0
 80144e4:	d12c      	bne.n	8014540 <_strtod_l+0x8f8>
 80144e6:	9904      	ldr	r1, [sp, #16]
 80144e8:	4a9a      	ldr	r2, [pc, #616]	; (8014754 <_strtod_l+0xb0c>)
 80144ea:	465b      	mov	r3, fp
 80144ec:	b1f1      	cbz	r1, 801452c <_strtod_l+0x8e4>
 80144ee:	ea02 010b 	and.w	r1, r2, fp
 80144f2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80144f6:	dc19      	bgt.n	801452c <_strtod_l+0x8e4>
 80144f8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80144fc:	f77f ae5b 	ble.w	80141b6 <_strtod_l+0x56e>
 8014500:	4a96      	ldr	r2, [pc, #600]	; (801475c <_strtod_l+0xb14>)
 8014502:	2300      	movs	r3, #0
 8014504:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8014508:	4650      	mov	r0, sl
 801450a:	4659      	mov	r1, fp
 801450c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014510:	f7ec f88a 	bl	8000628 <__aeabi_dmul>
 8014514:	4682      	mov	sl, r0
 8014516:	468b      	mov	fp, r1
 8014518:	2900      	cmp	r1, #0
 801451a:	f47f adbe 	bne.w	801409a <_strtod_l+0x452>
 801451e:	2800      	cmp	r0, #0
 8014520:	f47f adbb 	bne.w	801409a <_strtod_l+0x452>
 8014524:	2322      	movs	r3, #34	; 0x22
 8014526:	f8c9 3000 	str.w	r3, [r9]
 801452a:	e5b6      	b.n	801409a <_strtod_l+0x452>
 801452c:	4013      	ands	r3, r2
 801452e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8014532:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8014536:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801453a:	f04f 3aff 	mov.w	sl, #4294967295
 801453e:	e76a      	b.n	8014416 <_strtod_l+0x7ce>
 8014540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014542:	b193      	cbz	r3, 801456a <_strtod_l+0x922>
 8014544:	422b      	tst	r3, r5
 8014546:	f43f af66 	beq.w	8014416 <_strtod_l+0x7ce>
 801454a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801454c:	9a04      	ldr	r2, [sp, #16]
 801454e:	4650      	mov	r0, sl
 8014550:	4659      	mov	r1, fp
 8014552:	b173      	cbz	r3, 8014572 <_strtod_l+0x92a>
 8014554:	f7ff fb5b 	bl	8013c0e <sulp>
 8014558:	4602      	mov	r2, r0
 801455a:	460b      	mov	r3, r1
 801455c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014560:	f7eb feac 	bl	80002bc <__adddf3>
 8014564:	4682      	mov	sl, r0
 8014566:	468b      	mov	fp, r1
 8014568:	e755      	b.n	8014416 <_strtod_l+0x7ce>
 801456a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801456c:	ea13 0f0a 	tst.w	r3, sl
 8014570:	e7e9      	b.n	8014546 <_strtod_l+0x8fe>
 8014572:	f7ff fb4c 	bl	8013c0e <sulp>
 8014576:	4602      	mov	r2, r0
 8014578:	460b      	mov	r3, r1
 801457a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801457e:	f7eb fe9b 	bl	80002b8 <__aeabi_dsub>
 8014582:	2200      	movs	r2, #0
 8014584:	2300      	movs	r3, #0
 8014586:	4682      	mov	sl, r0
 8014588:	468b      	mov	fp, r1
 801458a:	f7ec fab5 	bl	8000af8 <__aeabi_dcmpeq>
 801458e:	2800      	cmp	r0, #0
 8014590:	f47f ae11 	bne.w	80141b6 <_strtod_l+0x56e>
 8014594:	e73f      	b.n	8014416 <_strtod_l+0x7ce>
 8014596:	4641      	mov	r1, r8
 8014598:	4620      	mov	r0, r4
 801459a:	f002 fa1a 	bl	80169d2 <__ratio>
 801459e:	ec57 6b10 	vmov	r6, r7, d0
 80145a2:	2200      	movs	r2, #0
 80145a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80145a8:	ee10 0a10 	vmov	r0, s0
 80145ac:	4639      	mov	r1, r7
 80145ae:	f7ec fab7 	bl	8000b20 <__aeabi_dcmple>
 80145b2:	2800      	cmp	r0, #0
 80145b4:	d077      	beq.n	80146a6 <_strtod_l+0xa5e>
 80145b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d04a      	beq.n	8014652 <_strtod_l+0xa0a>
 80145bc:	4b68      	ldr	r3, [pc, #416]	; (8014760 <_strtod_l+0xb18>)
 80145be:	2200      	movs	r2, #0
 80145c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80145c4:	4f66      	ldr	r7, [pc, #408]	; (8014760 <_strtod_l+0xb18>)
 80145c6:	2600      	movs	r6, #0
 80145c8:	4b62      	ldr	r3, [pc, #392]	; (8014754 <_strtod_l+0xb0c>)
 80145ca:	402b      	ands	r3, r5
 80145cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80145ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145d0:	4b64      	ldr	r3, [pc, #400]	; (8014764 <_strtod_l+0xb1c>)
 80145d2:	429a      	cmp	r2, r3
 80145d4:	f040 80ce 	bne.w	8014774 <_strtod_l+0xb2c>
 80145d8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80145dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80145e0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80145e4:	ec4b ab10 	vmov	d0, sl, fp
 80145e8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80145ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80145f0:	f002 f92a 	bl	8016848 <__ulp>
 80145f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80145f8:	ec53 2b10 	vmov	r2, r3, d0
 80145fc:	f7ec f814 	bl	8000628 <__aeabi_dmul>
 8014600:	4652      	mov	r2, sl
 8014602:	465b      	mov	r3, fp
 8014604:	f7eb fe5a 	bl	80002bc <__adddf3>
 8014608:	460b      	mov	r3, r1
 801460a:	4952      	ldr	r1, [pc, #328]	; (8014754 <_strtod_l+0xb0c>)
 801460c:	4a56      	ldr	r2, [pc, #344]	; (8014768 <_strtod_l+0xb20>)
 801460e:	4019      	ands	r1, r3
 8014610:	4291      	cmp	r1, r2
 8014612:	4682      	mov	sl, r0
 8014614:	d95b      	bls.n	80146ce <_strtod_l+0xa86>
 8014616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014618:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801461c:	4293      	cmp	r3, r2
 801461e:	d103      	bne.n	8014628 <_strtod_l+0x9e0>
 8014620:	9b08      	ldr	r3, [sp, #32]
 8014622:	3301      	adds	r3, #1
 8014624:	f43f ad2e 	beq.w	8014084 <_strtod_l+0x43c>
 8014628:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014758 <_strtod_l+0xb10>
 801462c:	f04f 3aff 	mov.w	sl, #4294967295
 8014630:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014632:	4648      	mov	r0, r9
 8014634:	f001 fe71 	bl	801631a <_Bfree>
 8014638:	9905      	ldr	r1, [sp, #20]
 801463a:	4648      	mov	r0, r9
 801463c:	f001 fe6d 	bl	801631a <_Bfree>
 8014640:	4641      	mov	r1, r8
 8014642:	4648      	mov	r0, r9
 8014644:	f001 fe69 	bl	801631a <_Bfree>
 8014648:	4621      	mov	r1, r4
 801464a:	4648      	mov	r0, r9
 801464c:	f001 fe65 	bl	801631a <_Bfree>
 8014650:	e619      	b.n	8014286 <_strtod_l+0x63e>
 8014652:	f1ba 0f00 	cmp.w	sl, #0
 8014656:	d11a      	bne.n	801468e <_strtod_l+0xa46>
 8014658:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801465c:	b9eb      	cbnz	r3, 801469a <_strtod_l+0xa52>
 801465e:	2200      	movs	r2, #0
 8014660:	4b3f      	ldr	r3, [pc, #252]	; (8014760 <_strtod_l+0xb18>)
 8014662:	4630      	mov	r0, r6
 8014664:	4639      	mov	r1, r7
 8014666:	f7ec fa51 	bl	8000b0c <__aeabi_dcmplt>
 801466a:	b9c8      	cbnz	r0, 80146a0 <_strtod_l+0xa58>
 801466c:	4630      	mov	r0, r6
 801466e:	4639      	mov	r1, r7
 8014670:	2200      	movs	r2, #0
 8014672:	4b3e      	ldr	r3, [pc, #248]	; (801476c <_strtod_l+0xb24>)
 8014674:	f7eb ffd8 	bl	8000628 <__aeabi_dmul>
 8014678:	4606      	mov	r6, r0
 801467a:	460f      	mov	r7, r1
 801467c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014680:	9618      	str	r6, [sp, #96]	; 0x60
 8014682:	9319      	str	r3, [sp, #100]	; 0x64
 8014684:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014688:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801468c:	e79c      	b.n	80145c8 <_strtod_l+0x980>
 801468e:	f1ba 0f01 	cmp.w	sl, #1
 8014692:	d102      	bne.n	801469a <_strtod_l+0xa52>
 8014694:	2d00      	cmp	r5, #0
 8014696:	f43f ad8e 	beq.w	80141b6 <_strtod_l+0x56e>
 801469a:	2200      	movs	r2, #0
 801469c:	4b34      	ldr	r3, [pc, #208]	; (8014770 <_strtod_l+0xb28>)
 801469e:	e78f      	b.n	80145c0 <_strtod_l+0x978>
 80146a0:	2600      	movs	r6, #0
 80146a2:	4f32      	ldr	r7, [pc, #200]	; (801476c <_strtod_l+0xb24>)
 80146a4:	e7ea      	b.n	801467c <_strtod_l+0xa34>
 80146a6:	4b31      	ldr	r3, [pc, #196]	; (801476c <_strtod_l+0xb24>)
 80146a8:	4630      	mov	r0, r6
 80146aa:	4639      	mov	r1, r7
 80146ac:	2200      	movs	r2, #0
 80146ae:	f7eb ffbb 	bl	8000628 <__aeabi_dmul>
 80146b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146b4:	4606      	mov	r6, r0
 80146b6:	460f      	mov	r7, r1
 80146b8:	b933      	cbnz	r3, 80146c8 <_strtod_l+0xa80>
 80146ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146be:	9010      	str	r0, [sp, #64]	; 0x40
 80146c0:	9311      	str	r3, [sp, #68]	; 0x44
 80146c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80146c6:	e7df      	b.n	8014688 <_strtod_l+0xa40>
 80146c8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80146cc:	e7f9      	b.n	80146c2 <_strtod_l+0xa7a>
 80146ce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80146d2:	9b04      	ldr	r3, [sp, #16]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d1ab      	bne.n	8014630 <_strtod_l+0x9e8>
 80146d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80146dc:	0d1b      	lsrs	r3, r3, #20
 80146de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80146e0:	051b      	lsls	r3, r3, #20
 80146e2:	429a      	cmp	r2, r3
 80146e4:	465d      	mov	r5, fp
 80146e6:	d1a3      	bne.n	8014630 <_strtod_l+0x9e8>
 80146e8:	4639      	mov	r1, r7
 80146ea:	4630      	mov	r0, r6
 80146ec:	f7ec fa4c 	bl	8000b88 <__aeabi_d2iz>
 80146f0:	f7eb ff30 	bl	8000554 <__aeabi_i2d>
 80146f4:	460b      	mov	r3, r1
 80146f6:	4602      	mov	r2, r0
 80146f8:	4639      	mov	r1, r7
 80146fa:	4630      	mov	r0, r6
 80146fc:	f7eb fddc 	bl	80002b8 <__aeabi_dsub>
 8014700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014702:	4606      	mov	r6, r0
 8014704:	460f      	mov	r7, r1
 8014706:	b933      	cbnz	r3, 8014716 <_strtod_l+0xace>
 8014708:	f1ba 0f00 	cmp.w	sl, #0
 801470c:	d103      	bne.n	8014716 <_strtod_l+0xace>
 801470e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8014712:	2d00      	cmp	r5, #0
 8014714:	d06d      	beq.n	80147f2 <_strtod_l+0xbaa>
 8014716:	a30a      	add	r3, pc, #40	; (adr r3, 8014740 <_strtod_l+0xaf8>)
 8014718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801471c:	4630      	mov	r0, r6
 801471e:	4639      	mov	r1, r7
 8014720:	f7ec f9f4 	bl	8000b0c <__aeabi_dcmplt>
 8014724:	2800      	cmp	r0, #0
 8014726:	f47f acb8 	bne.w	801409a <_strtod_l+0x452>
 801472a:	a307      	add	r3, pc, #28	; (adr r3, 8014748 <_strtod_l+0xb00>)
 801472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014730:	4630      	mov	r0, r6
 8014732:	4639      	mov	r1, r7
 8014734:	f7ec fa08 	bl	8000b48 <__aeabi_dcmpgt>
 8014738:	2800      	cmp	r0, #0
 801473a:	f43f af79 	beq.w	8014630 <_strtod_l+0x9e8>
 801473e:	e4ac      	b.n	801409a <_strtod_l+0x452>
 8014740:	94a03595 	.word	0x94a03595
 8014744:	3fdfffff 	.word	0x3fdfffff
 8014748:	35afe535 	.word	0x35afe535
 801474c:	3fe00000 	.word	0x3fe00000
 8014750:	000fffff 	.word	0x000fffff
 8014754:	7ff00000 	.word	0x7ff00000
 8014758:	7fefffff 	.word	0x7fefffff
 801475c:	39500000 	.word	0x39500000
 8014760:	3ff00000 	.word	0x3ff00000
 8014764:	7fe00000 	.word	0x7fe00000
 8014768:	7c9fffff 	.word	0x7c9fffff
 801476c:	3fe00000 	.word	0x3fe00000
 8014770:	bff00000 	.word	0xbff00000
 8014774:	9b04      	ldr	r3, [sp, #16]
 8014776:	b333      	cbz	r3, 80147c6 <_strtod_l+0xb7e>
 8014778:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801477a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801477e:	d822      	bhi.n	80147c6 <_strtod_l+0xb7e>
 8014780:	a327      	add	r3, pc, #156	; (adr r3, 8014820 <_strtod_l+0xbd8>)
 8014782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014786:	4630      	mov	r0, r6
 8014788:	4639      	mov	r1, r7
 801478a:	f7ec f9c9 	bl	8000b20 <__aeabi_dcmple>
 801478e:	b1a0      	cbz	r0, 80147ba <_strtod_l+0xb72>
 8014790:	4639      	mov	r1, r7
 8014792:	4630      	mov	r0, r6
 8014794:	f7ec fa20 	bl	8000bd8 <__aeabi_d2uiz>
 8014798:	2800      	cmp	r0, #0
 801479a:	bf08      	it	eq
 801479c:	2001      	moveq	r0, #1
 801479e:	f7eb fec9 	bl	8000534 <__aeabi_ui2d>
 80147a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147a4:	4606      	mov	r6, r0
 80147a6:	460f      	mov	r7, r1
 80147a8:	bb03      	cbnz	r3, 80147ec <_strtod_l+0xba4>
 80147aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80147ae:	9012      	str	r0, [sp, #72]	; 0x48
 80147b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80147b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80147b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80147ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80147be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80147c2:	1a9b      	subs	r3, r3, r2
 80147c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80147c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80147ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80147ce:	f002 f83b 	bl	8016848 <__ulp>
 80147d2:	4650      	mov	r0, sl
 80147d4:	ec53 2b10 	vmov	r2, r3, d0
 80147d8:	4659      	mov	r1, fp
 80147da:	f7eb ff25 	bl	8000628 <__aeabi_dmul>
 80147de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80147e2:	f7eb fd6b 	bl	80002bc <__adddf3>
 80147e6:	4682      	mov	sl, r0
 80147e8:	468b      	mov	fp, r1
 80147ea:	e772      	b.n	80146d2 <_strtod_l+0xa8a>
 80147ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80147f0:	e7df      	b.n	80147b2 <_strtod_l+0xb6a>
 80147f2:	a30d      	add	r3, pc, #52	; (adr r3, 8014828 <_strtod_l+0xbe0>)
 80147f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147f8:	f7ec f988 	bl	8000b0c <__aeabi_dcmplt>
 80147fc:	e79c      	b.n	8014738 <_strtod_l+0xaf0>
 80147fe:	2300      	movs	r3, #0
 8014800:	930d      	str	r3, [sp, #52]	; 0x34
 8014802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8014804:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014806:	6013      	str	r3, [r2, #0]
 8014808:	f7ff ba61 	b.w	8013cce <_strtod_l+0x86>
 801480c:	2b65      	cmp	r3, #101	; 0x65
 801480e:	f04f 0200 	mov.w	r2, #0
 8014812:	f43f ab4e 	beq.w	8013eb2 <_strtod_l+0x26a>
 8014816:	2101      	movs	r1, #1
 8014818:	4614      	mov	r4, r2
 801481a:	9104      	str	r1, [sp, #16]
 801481c:	f7ff bacb 	b.w	8013db6 <_strtod_l+0x16e>
 8014820:	ffc00000 	.word	0xffc00000
 8014824:	41dfffff 	.word	0x41dfffff
 8014828:	94a03595 	.word	0x94a03595
 801482c:	3fcfffff 	.word	0x3fcfffff

08014830 <_strtod_r>:
 8014830:	4b05      	ldr	r3, [pc, #20]	; (8014848 <_strtod_r+0x18>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	b410      	push	{r4}
 8014836:	6a1b      	ldr	r3, [r3, #32]
 8014838:	4c04      	ldr	r4, [pc, #16]	; (801484c <_strtod_r+0x1c>)
 801483a:	2b00      	cmp	r3, #0
 801483c:	bf08      	it	eq
 801483e:	4623      	moveq	r3, r4
 8014840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014844:	f7ff ba00 	b.w	8013c48 <_strtod_l>
 8014848:	2000000c 	.word	0x2000000c
 801484c:	20000070 	.word	0x20000070

08014850 <_strtol_l.isra.0>:
 8014850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014854:	4680      	mov	r8, r0
 8014856:	4689      	mov	r9, r1
 8014858:	4692      	mov	sl, r2
 801485a:	461e      	mov	r6, r3
 801485c:	460f      	mov	r7, r1
 801485e:	463d      	mov	r5, r7
 8014860:	9808      	ldr	r0, [sp, #32]
 8014862:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014866:	f001 fc67 	bl	8016138 <__locale_ctype_ptr_l>
 801486a:	4420      	add	r0, r4
 801486c:	7843      	ldrb	r3, [r0, #1]
 801486e:	f013 0308 	ands.w	r3, r3, #8
 8014872:	d132      	bne.n	80148da <_strtol_l.isra.0+0x8a>
 8014874:	2c2d      	cmp	r4, #45	; 0x2d
 8014876:	d132      	bne.n	80148de <_strtol_l.isra.0+0x8e>
 8014878:	787c      	ldrb	r4, [r7, #1]
 801487a:	1cbd      	adds	r5, r7, #2
 801487c:	2201      	movs	r2, #1
 801487e:	2e00      	cmp	r6, #0
 8014880:	d05d      	beq.n	801493e <_strtol_l.isra.0+0xee>
 8014882:	2e10      	cmp	r6, #16
 8014884:	d109      	bne.n	801489a <_strtol_l.isra.0+0x4a>
 8014886:	2c30      	cmp	r4, #48	; 0x30
 8014888:	d107      	bne.n	801489a <_strtol_l.isra.0+0x4a>
 801488a:	782b      	ldrb	r3, [r5, #0]
 801488c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014890:	2b58      	cmp	r3, #88	; 0x58
 8014892:	d14f      	bne.n	8014934 <_strtol_l.isra.0+0xe4>
 8014894:	786c      	ldrb	r4, [r5, #1]
 8014896:	2610      	movs	r6, #16
 8014898:	3502      	adds	r5, #2
 801489a:	2a00      	cmp	r2, #0
 801489c:	bf14      	ite	ne
 801489e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80148a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80148a6:	2700      	movs	r7, #0
 80148a8:	fbb1 fcf6 	udiv	ip, r1, r6
 80148ac:	4638      	mov	r0, r7
 80148ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 80148b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80148b6:	2b09      	cmp	r3, #9
 80148b8:	d817      	bhi.n	80148ea <_strtol_l.isra.0+0x9a>
 80148ba:	461c      	mov	r4, r3
 80148bc:	42a6      	cmp	r6, r4
 80148be:	dd23      	ble.n	8014908 <_strtol_l.isra.0+0xb8>
 80148c0:	1c7b      	adds	r3, r7, #1
 80148c2:	d007      	beq.n	80148d4 <_strtol_l.isra.0+0x84>
 80148c4:	4584      	cmp	ip, r0
 80148c6:	d31c      	bcc.n	8014902 <_strtol_l.isra.0+0xb2>
 80148c8:	d101      	bne.n	80148ce <_strtol_l.isra.0+0x7e>
 80148ca:	45a6      	cmp	lr, r4
 80148cc:	db19      	blt.n	8014902 <_strtol_l.isra.0+0xb2>
 80148ce:	fb00 4006 	mla	r0, r0, r6, r4
 80148d2:	2701      	movs	r7, #1
 80148d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80148d8:	e7eb      	b.n	80148b2 <_strtol_l.isra.0+0x62>
 80148da:	462f      	mov	r7, r5
 80148dc:	e7bf      	b.n	801485e <_strtol_l.isra.0+0xe>
 80148de:	2c2b      	cmp	r4, #43	; 0x2b
 80148e0:	bf04      	itt	eq
 80148e2:	1cbd      	addeq	r5, r7, #2
 80148e4:	787c      	ldrbeq	r4, [r7, #1]
 80148e6:	461a      	mov	r2, r3
 80148e8:	e7c9      	b.n	801487e <_strtol_l.isra.0+0x2e>
 80148ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80148ee:	2b19      	cmp	r3, #25
 80148f0:	d801      	bhi.n	80148f6 <_strtol_l.isra.0+0xa6>
 80148f2:	3c37      	subs	r4, #55	; 0x37
 80148f4:	e7e2      	b.n	80148bc <_strtol_l.isra.0+0x6c>
 80148f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80148fa:	2b19      	cmp	r3, #25
 80148fc:	d804      	bhi.n	8014908 <_strtol_l.isra.0+0xb8>
 80148fe:	3c57      	subs	r4, #87	; 0x57
 8014900:	e7dc      	b.n	80148bc <_strtol_l.isra.0+0x6c>
 8014902:	f04f 37ff 	mov.w	r7, #4294967295
 8014906:	e7e5      	b.n	80148d4 <_strtol_l.isra.0+0x84>
 8014908:	1c7b      	adds	r3, r7, #1
 801490a:	d108      	bne.n	801491e <_strtol_l.isra.0+0xce>
 801490c:	2322      	movs	r3, #34	; 0x22
 801490e:	f8c8 3000 	str.w	r3, [r8]
 8014912:	4608      	mov	r0, r1
 8014914:	f1ba 0f00 	cmp.w	sl, #0
 8014918:	d107      	bne.n	801492a <_strtol_l.isra.0+0xda>
 801491a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801491e:	b102      	cbz	r2, 8014922 <_strtol_l.isra.0+0xd2>
 8014920:	4240      	negs	r0, r0
 8014922:	f1ba 0f00 	cmp.w	sl, #0
 8014926:	d0f8      	beq.n	801491a <_strtol_l.isra.0+0xca>
 8014928:	b10f      	cbz	r7, 801492e <_strtol_l.isra.0+0xde>
 801492a:	f105 39ff 	add.w	r9, r5, #4294967295
 801492e:	f8ca 9000 	str.w	r9, [sl]
 8014932:	e7f2      	b.n	801491a <_strtol_l.isra.0+0xca>
 8014934:	2430      	movs	r4, #48	; 0x30
 8014936:	2e00      	cmp	r6, #0
 8014938:	d1af      	bne.n	801489a <_strtol_l.isra.0+0x4a>
 801493a:	2608      	movs	r6, #8
 801493c:	e7ad      	b.n	801489a <_strtol_l.isra.0+0x4a>
 801493e:	2c30      	cmp	r4, #48	; 0x30
 8014940:	d0a3      	beq.n	801488a <_strtol_l.isra.0+0x3a>
 8014942:	260a      	movs	r6, #10
 8014944:	e7a9      	b.n	801489a <_strtol_l.isra.0+0x4a>
	...

08014948 <_strtol_r>:
 8014948:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801494a:	4c06      	ldr	r4, [pc, #24]	; (8014964 <_strtol_r+0x1c>)
 801494c:	4d06      	ldr	r5, [pc, #24]	; (8014968 <_strtol_r+0x20>)
 801494e:	6824      	ldr	r4, [r4, #0]
 8014950:	6a24      	ldr	r4, [r4, #32]
 8014952:	2c00      	cmp	r4, #0
 8014954:	bf08      	it	eq
 8014956:	462c      	moveq	r4, r5
 8014958:	9400      	str	r4, [sp, #0]
 801495a:	f7ff ff79 	bl	8014850 <_strtol_l.isra.0>
 801495e:	b003      	add	sp, #12
 8014960:	bd30      	pop	{r4, r5, pc}
 8014962:	bf00      	nop
 8014964:	2000000c 	.word	0x2000000c
 8014968:	20000070 	.word	0x20000070

0801496c <_vsiprintf_r>:
 801496c:	b500      	push	{lr}
 801496e:	b09b      	sub	sp, #108	; 0x6c
 8014970:	9100      	str	r1, [sp, #0]
 8014972:	9104      	str	r1, [sp, #16]
 8014974:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014978:	9105      	str	r1, [sp, #20]
 801497a:	9102      	str	r1, [sp, #8]
 801497c:	4905      	ldr	r1, [pc, #20]	; (8014994 <_vsiprintf_r+0x28>)
 801497e:	9103      	str	r1, [sp, #12]
 8014980:	4669      	mov	r1, sp
 8014982:	f002 f9a5 	bl	8016cd0 <_svfiprintf_r>
 8014986:	9b00      	ldr	r3, [sp, #0]
 8014988:	2200      	movs	r2, #0
 801498a:	701a      	strb	r2, [r3, #0]
 801498c:	b01b      	add	sp, #108	; 0x6c
 801498e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014992:	bf00      	nop
 8014994:	ffff0208 	.word	0xffff0208

08014998 <vsiprintf>:
 8014998:	4613      	mov	r3, r2
 801499a:	460a      	mov	r2, r1
 801499c:	4601      	mov	r1, r0
 801499e:	4802      	ldr	r0, [pc, #8]	; (80149a8 <vsiprintf+0x10>)
 80149a0:	6800      	ldr	r0, [r0, #0]
 80149a2:	f7ff bfe3 	b.w	801496c <_vsiprintf_r>
 80149a6:	bf00      	nop
 80149a8:	2000000c 	.word	0x2000000c

080149ac <__swbuf_r>:
 80149ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149ae:	460e      	mov	r6, r1
 80149b0:	4614      	mov	r4, r2
 80149b2:	4605      	mov	r5, r0
 80149b4:	b118      	cbz	r0, 80149be <__swbuf_r+0x12>
 80149b6:	6983      	ldr	r3, [r0, #24]
 80149b8:	b90b      	cbnz	r3, 80149be <__swbuf_r+0x12>
 80149ba:	f001 f80d 	bl	80159d8 <__sinit>
 80149be:	4b21      	ldr	r3, [pc, #132]	; (8014a44 <__swbuf_r+0x98>)
 80149c0:	429c      	cmp	r4, r3
 80149c2:	d12a      	bne.n	8014a1a <__swbuf_r+0x6e>
 80149c4:	686c      	ldr	r4, [r5, #4]
 80149c6:	69a3      	ldr	r3, [r4, #24]
 80149c8:	60a3      	str	r3, [r4, #8]
 80149ca:	89a3      	ldrh	r3, [r4, #12]
 80149cc:	071a      	lsls	r2, r3, #28
 80149ce:	d52e      	bpl.n	8014a2e <__swbuf_r+0x82>
 80149d0:	6923      	ldr	r3, [r4, #16]
 80149d2:	b363      	cbz	r3, 8014a2e <__swbuf_r+0x82>
 80149d4:	6923      	ldr	r3, [r4, #16]
 80149d6:	6820      	ldr	r0, [r4, #0]
 80149d8:	1ac0      	subs	r0, r0, r3
 80149da:	6963      	ldr	r3, [r4, #20]
 80149dc:	b2f6      	uxtb	r6, r6
 80149de:	4283      	cmp	r3, r0
 80149e0:	4637      	mov	r7, r6
 80149e2:	dc04      	bgt.n	80149ee <__swbuf_r+0x42>
 80149e4:	4621      	mov	r1, r4
 80149e6:	4628      	mov	r0, r5
 80149e8:	f000 ff8c 	bl	8015904 <_fflush_r>
 80149ec:	bb28      	cbnz	r0, 8014a3a <__swbuf_r+0x8e>
 80149ee:	68a3      	ldr	r3, [r4, #8]
 80149f0:	3b01      	subs	r3, #1
 80149f2:	60a3      	str	r3, [r4, #8]
 80149f4:	6823      	ldr	r3, [r4, #0]
 80149f6:	1c5a      	adds	r2, r3, #1
 80149f8:	6022      	str	r2, [r4, #0]
 80149fa:	701e      	strb	r6, [r3, #0]
 80149fc:	6963      	ldr	r3, [r4, #20]
 80149fe:	3001      	adds	r0, #1
 8014a00:	4283      	cmp	r3, r0
 8014a02:	d004      	beq.n	8014a0e <__swbuf_r+0x62>
 8014a04:	89a3      	ldrh	r3, [r4, #12]
 8014a06:	07db      	lsls	r3, r3, #31
 8014a08:	d519      	bpl.n	8014a3e <__swbuf_r+0x92>
 8014a0a:	2e0a      	cmp	r6, #10
 8014a0c:	d117      	bne.n	8014a3e <__swbuf_r+0x92>
 8014a0e:	4621      	mov	r1, r4
 8014a10:	4628      	mov	r0, r5
 8014a12:	f000 ff77 	bl	8015904 <_fflush_r>
 8014a16:	b190      	cbz	r0, 8014a3e <__swbuf_r+0x92>
 8014a18:	e00f      	b.n	8014a3a <__swbuf_r+0x8e>
 8014a1a:	4b0b      	ldr	r3, [pc, #44]	; (8014a48 <__swbuf_r+0x9c>)
 8014a1c:	429c      	cmp	r4, r3
 8014a1e:	d101      	bne.n	8014a24 <__swbuf_r+0x78>
 8014a20:	68ac      	ldr	r4, [r5, #8]
 8014a22:	e7d0      	b.n	80149c6 <__swbuf_r+0x1a>
 8014a24:	4b09      	ldr	r3, [pc, #36]	; (8014a4c <__swbuf_r+0xa0>)
 8014a26:	429c      	cmp	r4, r3
 8014a28:	bf08      	it	eq
 8014a2a:	68ec      	ldreq	r4, [r5, #12]
 8014a2c:	e7cb      	b.n	80149c6 <__swbuf_r+0x1a>
 8014a2e:	4621      	mov	r1, r4
 8014a30:	4628      	mov	r0, r5
 8014a32:	f000 f81f 	bl	8014a74 <__swsetup_r>
 8014a36:	2800      	cmp	r0, #0
 8014a38:	d0cc      	beq.n	80149d4 <__swbuf_r+0x28>
 8014a3a:	f04f 37ff 	mov.w	r7, #4294967295
 8014a3e:	4638      	mov	r0, r7
 8014a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a42:	bf00      	nop
 8014a44:	08018440 	.word	0x08018440
 8014a48:	08018460 	.word	0x08018460
 8014a4c:	08018420 	.word	0x08018420

08014a50 <_write_r>:
 8014a50:	b538      	push	{r3, r4, r5, lr}
 8014a52:	4c07      	ldr	r4, [pc, #28]	; (8014a70 <_write_r+0x20>)
 8014a54:	4605      	mov	r5, r0
 8014a56:	4608      	mov	r0, r1
 8014a58:	4611      	mov	r1, r2
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	6022      	str	r2, [r4, #0]
 8014a5e:	461a      	mov	r2, r3
 8014a60:	f7ee ffc9 	bl	80039f6 <_write>
 8014a64:	1c43      	adds	r3, r0, #1
 8014a66:	d102      	bne.n	8014a6e <_write_r+0x1e>
 8014a68:	6823      	ldr	r3, [r4, #0]
 8014a6a:	b103      	cbz	r3, 8014a6e <_write_r+0x1e>
 8014a6c:	602b      	str	r3, [r5, #0]
 8014a6e:	bd38      	pop	{r3, r4, r5, pc}
 8014a70:	20023ed0 	.word	0x20023ed0

08014a74 <__swsetup_r>:
 8014a74:	4b32      	ldr	r3, [pc, #200]	; (8014b40 <__swsetup_r+0xcc>)
 8014a76:	b570      	push	{r4, r5, r6, lr}
 8014a78:	681d      	ldr	r5, [r3, #0]
 8014a7a:	4606      	mov	r6, r0
 8014a7c:	460c      	mov	r4, r1
 8014a7e:	b125      	cbz	r5, 8014a8a <__swsetup_r+0x16>
 8014a80:	69ab      	ldr	r3, [r5, #24]
 8014a82:	b913      	cbnz	r3, 8014a8a <__swsetup_r+0x16>
 8014a84:	4628      	mov	r0, r5
 8014a86:	f000 ffa7 	bl	80159d8 <__sinit>
 8014a8a:	4b2e      	ldr	r3, [pc, #184]	; (8014b44 <__swsetup_r+0xd0>)
 8014a8c:	429c      	cmp	r4, r3
 8014a8e:	d10f      	bne.n	8014ab0 <__swsetup_r+0x3c>
 8014a90:	686c      	ldr	r4, [r5, #4]
 8014a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a96:	b29a      	uxth	r2, r3
 8014a98:	0715      	lsls	r5, r2, #28
 8014a9a:	d42c      	bmi.n	8014af6 <__swsetup_r+0x82>
 8014a9c:	06d0      	lsls	r0, r2, #27
 8014a9e:	d411      	bmi.n	8014ac4 <__swsetup_r+0x50>
 8014aa0:	2209      	movs	r2, #9
 8014aa2:	6032      	str	r2, [r6, #0]
 8014aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aa8:	81a3      	strh	r3, [r4, #12]
 8014aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8014aae:	e03e      	b.n	8014b2e <__swsetup_r+0xba>
 8014ab0:	4b25      	ldr	r3, [pc, #148]	; (8014b48 <__swsetup_r+0xd4>)
 8014ab2:	429c      	cmp	r4, r3
 8014ab4:	d101      	bne.n	8014aba <__swsetup_r+0x46>
 8014ab6:	68ac      	ldr	r4, [r5, #8]
 8014ab8:	e7eb      	b.n	8014a92 <__swsetup_r+0x1e>
 8014aba:	4b24      	ldr	r3, [pc, #144]	; (8014b4c <__swsetup_r+0xd8>)
 8014abc:	429c      	cmp	r4, r3
 8014abe:	bf08      	it	eq
 8014ac0:	68ec      	ldreq	r4, [r5, #12]
 8014ac2:	e7e6      	b.n	8014a92 <__swsetup_r+0x1e>
 8014ac4:	0751      	lsls	r1, r2, #29
 8014ac6:	d512      	bpl.n	8014aee <__swsetup_r+0x7a>
 8014ac8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014aca:	b141      	cbz	r1, 8014ade <__swsetup_r+0x6a>
 8014acc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ad0:	4299      	cmp	r1, r3
 8014ad2:	d002      	beq.n	8014ada <__swsetup_r+0x66>
 8014ad4:	4630      	mov	r0, r6
 8014ad6:	f001 fff9 	bl	8016acc <_free_r>
 8014ada:	2300      	movs	r3, #0
 8014adc:	6363      	str	r3, [r4, #52]	; 0x34
 8014ade:	89a3      	ldrh	r3, [r4, #12]
 8014ae0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014ae4:	81a3      	strh	r3, [r4, #12]
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	6063      	str	r3, [r4, #4]
 8014aea:	6923      	ldr	r3, [r4, #16]
 8014aec:	6023      	str	r3, [r4, #0]
 8014aee:	89a3      	ldrh	r3, [r4, #12]
 8014af0:	f043 0308 	orr.w	r3, r3, #8
 8014af4:	81a3      	strh	r3, [r4, #12]
 8014af6:	6923      	ldr	r3, [r4, #16]
 8014af8:	b94b      	cbnz	r3, 8014b0e <__swsetup_r+0x9a>
 8014afa:	89a3      	ldrh	r3, [r4, #12]
 8014afc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b04:	d003      	beq.n	8014b0e <__swsetup_r+0x9a>
 8014b06:	4621      	mov	r1, r4
 8014b08:	4630      	mov	r0, r6
 8014b0a:	f001 fb6d 	bl	80161e8 <__smakebuf_r>
 8014b0e:	89a2      	ldrh	r2, [r4, #12]
 8014b10:	f012 0301 	ands.w	r3, r2, #1
 8014b14:	d00c      	beq.n	8014b30 <__swsetup_r+0xbc>
 8014b16:	2300      	movs	r3, #0
 8014b18:	60a3      	str	r3, [r4, #8]
 8014b1a:	6963      	ldr	r3, [r4, #20]
 8014b1c:	425b      	negs	r3, r3
 8014b1e:	61a3      	str	r3, [r4, #24]
 8014b20:	6923      	ldr	r3, [r4, #16]
 8014b22:	b953      	cbnz	r3, 8014b3a <__swsetup_r+0xc6>
 8014b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014b2c:	d1ba      	bne.n	8014aa4 <__swsetup_r+0x30>
 8014b2e:	bd70      	pop	{r4, r5, r6, pc}
 8014b30:	0792      	lsls	r2, r2, #30
 8014b32:	bf58      	it	pl
 8014b34:	6963      	ldrpl	r3, [r4, #20]
 8014b36:	60a3      	str	r3, [r4, #8]
 8014b38:	e7f2      	b.n	8014b20 <__swsetup_r+0xac>
 8014b3a:	2000      	movs	r0, #0
 8014b3c:	e7f7      	b.n	8014b2e <__swsetup_r+0xba>
 8014b3e:	bf00      	nop
 8014b40:	2000000c 	.word	0x2000000c
 8014b44:	08018440 	.word	0x08018440
 8014b48:	08018460 	.word	0x08018460
 8014b4c:	08018420 	.word	0x08018420

08014b50 <_close_r>:
 8014b50:	b538      	push	{r3, r4, r5, lr}
 8014b52:	4c06      	ldr	r4, [pc, #24]	; (8014b6c <_close_r+0x1c>)
 8014b54:	2300      	movs	r3, #0
 8014b56:	4605      	mov	r5, r0
 8014b58:	4608      	mov	r0, r1
 8014b5a:	6023      	str	r3, [r4, #0]
 8014b5c:	f7f0 fe3d 	bl	80057da <_close>
 8014b60:	1c43      	adds	r3, r0, #1
 8014b62:	d102      	bne.n	8014b6a <_close_r+0x1a>
 8014b64:	6823      	ldr	r3, [r4, #0]
 8014b66:	b103      	cbz	r3, 8014b6a <_close_r+0x1a>
 8014b68:	602b      	str	r3, [r5, #0]
 8014b6a:	bd38      	pop	{r3, r4, r5, pc}
 8014b6c:	20023ed0 	.word	0x20023ed0

08014b70 <quorem>:
 8014b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b74:	6903      	ldr	r3, [r0, #16]
 8014b76:	690c      	ldr	r4, [r1, #16]
 8014b78:	42a3      	cmp	r3, r4
 8014b7a:	4680      	mov	r8, r0
 8014b7c:	f2c0 8082 	blt.w	8014c84 <quorem+0x114>
 8014b80:	3c01      	subs	r4, #1
 8014b82:	f101 0714 	add.w	r7, r1, #20
 8014b86:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014b8a:	f100 0614 	add.w	r6, r0, #20
 8014b8e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014b92:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014b96:	eb06 030c 	add.w	r3, r6, ip
 8014b9a:	3501      	adds	r5, #1
 8014b9c:	eb07 090c 	add.w	r9, r7, ip
 8014ba0:	9301      	str	r3, [sp, #4]
 8014ba2:	fbb0 f5f5 	udiv	r5, r0, r5
 8014ba6:	b395      	cbz	r5, 8014c0e <quorem+0x9e>
 8014ba8:	f04f 0a00 	mov.w	sl, #0
 8014bac:	4638      	mov	r0, r7
 8014bae:	46b6      	mov	lr, r6
 8014bb0:	46d3      	mov	fp, sl
 8014bb2:	f850 2b04 	ldr.w	r2, [r0], #4
 8014bb6:	b293      	uxth	r3, r2
 8014bb8:	fb05 a303 	mla	r3, r5, r3, sl
 8014bbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014bc0:	b29b      	uxth	r3, r3
 8014bc2:	ebab 0303 	sub.w	r3, fp, r3
 8014bc6:	0c12      	lsrs	r2, r2, #16
 8014bc8:	f8de b000 	ldr.w	fp, [lr]
 8014bcc:	fb05 a202 	mla	r2, r5, r2, sl
 8014bd0:	fa13 f38b 	uxtah	r3, r3, fp
 8014bd4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014bd8:	fa1f fb82 	uxth.w	fp, r2
 8014bdc:	f8de 2000 	ldr.w	r2, [lr]
 8014be0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014be4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014be8:	b29b      	uxth	r3, r3
 8014bea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014bee:	4581      	cmp	r9, r0
 8014bf0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014bf4:	f84e 3b04 	str.w	r3, [lr], #4
 8014bf8:	d2db      	bcs.n	8014bb2 <quorem+0x42>
 8014bfa:	f856 300c 	ldr.w	r3, [r6, ip]
 8014bfe:	b933      	cbnz	r3, 8014c0e <quorem+0x9e>
 8014c00:	9b01      	ldr	r3, [sp, #4]
 8014c02:	3b04      	subs	r3, #4
 8014c04:	429e      	cmp	r6, r3
 8014c06:	461a      	mov	r2, r3
 8014c08:	d330      	bcc.n	8014c6c <quorem+0xfc>
 8014c0a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014c0e:	4640      	mov	r0, r8
 8014c10:	f001 fda2 	bl	8016758 <__mcmp>
 8014c14:	2800      	cmp	r0, #0
 8014c16:	db25      	blt.n	8014c64 <quorem+0xf4>
 8014c18:	3501      	adds	r5, #1
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	f04f 0c00 	mov.w	ip, #0
 8014c20:	f857 2b04 	ldr.w	r2, [r7], #4
 8014c24:	f8d0 e000 	ldr.w	lr, [r0]
 8014c28:	b293      	uxth	r3, r2
 8014c2a:	ebac 0303 	sub.w	r3, ip, r3
 8014c2e:	0c12      	lsrs	r2, r2, #16
 8014c30:	fa13 f38e 	uxtah	r3, r3, lr
 8014c34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014c38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014c3c:	b29b      	uxth	r3, r3
 8014c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014c42:	45b9      	cmp	r9, r7
 8014c44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014c48:	f840 3b04 	str.w	r3, [r0], #4
 8014c4c:	d2e8      	bcs.n	8014c20 <quorem+0xb0>
 8014c4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014c52:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014c56:	b92a      	cbnz	r2, 8014c64 <quorem+0xf4>
 8014c58:	3b04      	subs	r3, #4
 8014c5a:	429e      	cmp	r6, r3
 8014c5c:	461a      	mov	r2, r3
 8014c5e:	d30b      	bcc.n	8014c78 <quorem+0x108>
 8014c60:	f8c8 4010 	str.w	r4, [r8, #16]
 8014c64:	4628      	mov	r0, r5
 8014c66:	b003      	add	sp, #12
 8014c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c6c:	6812      	ldr	r2, [r2, #0]
 8014c6e:	3b04      	subs	r3, #4
 8014c70:	2a00      	cmp	r2, #0
 8014c72:	d1ca      	bne.n	8014c0a <quorem+0x9a>
 8014c74:	3c01      	subs	r4, #1
 8014c76:	e7c5      	b.n	8014c04 <quorem+0x94>
 8014c78:	6812      	ldr	r2, [r2, #0]
 8014c7a:	3b04      	subs	r3, #4
 8014c7c:	2a00      	cmp	r2, #0
 8014c7e:	d1ef      	bne.n	8014c60 <quorem+0xf0>
 8014c80:	3c01      	subs	r4, #1
 8014c82:	e7ea      	b.n	8014c5a <quorem+0xea>
 8014c84:	2000      	movs	r0, #0
 8014c86:	e7ee      	b.n	8014c66 <quorem+0xf6>

08014c88 <_dtoa_r>:
 8014c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8c:	ec57 6b10 	vmov	r6, r7, d0
 8014c90:	b097      	sub	sp, #92	; 0x5c
 8014c92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014c94:	9106      	str	r1, [sp, #24]
 8014c96:	4604      	mov	r4, r0
 8014c98:	920b      	str	r2, [sp, #44]	; 0x2c
 8014c9a:	9312      	str	r3, [sp, #72]	; 0x48
 8014c9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014ca0:	e9cd 6700 	strd	r6, r7, [sp]
 8014ca4:	b93d      	cbnz	r5, 8014cb6 <_dtoa_r+0x2e>
 8014ca6:	2010      	movs	r0, #16
 8014ca8:	f001 fade 	bl	8016268 <malloc>
 8014cac:	6260      	str	r0, [r4, #36]	; 0x24
 8014cae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014cb2:	6005      	str	r5, [r0, #0]
 8014cb4:	60c5      	str	r5, [r0, #12]
 8014cb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cb8:	6819      	ldr	r1, [r3, #0]
 8014cba:	b151      	cbz	r1, 8014cd2 <_dtoa_r+0x4a>
 8014cbc:	685a      	ldr	r2, [r3, #4]
 8014cbe:	604a      	str	r2, [r1, #4]
 8014cc0:	2301      	movs	r3, #1
 8014cc2:	4093      	lsls	r3, r2
 8014cc4:	608b      	str	r3, [r1, #8]
 8014cc6:	4620      	mov	r0, r4
 8014cc8:	f001 fb27 	bl	801631a <_Bfree>
 8014ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014cce:	2200      	movs	r2, #0
 8014cd0:	601a      	str	r2, [r3, #0]
 8014cd2:	1e3b      	subs	r3, r7, #0
 8014cd4:	bfbb      	ittet	lt
 8014cd6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014cda:	9301      	strlt	r3, [sp, #4]
 8014cdc:	2300      	movge	r3, #0
 8014cde:	2201      	movlt	r2, #1
 8014ce0:	bfac      	ite	ge
 8014ce2:	f8c8 3000 	strge.w	r3, [r8]
 8014ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8014cea:	4baf      	ldr	r3, [pc, #700]	; (8014fa8 <_dtoa_r+0x320>)
 8014cec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014cf0:	ea33 0308 	bics.w	r3, r3, r8
 8014cf4:	d114      	bne.n	8014d20 <_dtoa_r+0x98>
 8014cf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014cf8:	f242 730f 	movw	r3, #9999	; 0x270f
 8014cfc:	6013      	str	r3, [r2, #0]
 8014cfe:	9b00      	ldr	r3, [sp, #0]
 8014d00:	b923      	cbnz	r3, 8014d0c <_dtoa_r+0x84>
 8014d02:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014d06:	2800      	cmp	r0, #0
 8014d08:	f000 8542 	beq.w	8015790 <_dtoa_r+0xb08>
 8014d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d0e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014fbc <_dtoa_r+0x334>
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	f000 8544 	beq.w	80157a0 <_dtoa_r+0xb18>
 8014d18:	f10b 0303 	add.w	r3, fp, #3
 8014d1c:	f000 bd3e 	b.w	801579c <_dtoa_r+0xb14>
 8014d20:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014d24:	2200      	movs	r2, #0
 8014d26:	2300      	movs	r3, #0
 8014d28:	4630      	mov	r0, r6
 8014d2a:	4639      	mov	r1, r7
 8014d2c:	f7eb fee4 	bl	8000af8 <__aeabi_dcmpeq>
 8014d30:	4681      	mov	r9, r0
 8014d32:	b168      	cbz	r0, 8014d50 <_dtoa_r+0xc8>
 8014d34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014d36:	2301      	movs	r3, #1
 8014d38:	6013      	str	r3, [r2, #0]
 8014d3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	f000 8524 	beq.w	801578a <_dtoa_r+0xb02>
 8014d42:	4b9a      	ldr	r3, [pc, #616]	; (8014fac <_dtoa_r+0x324>)
 8014d44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014d46:	f103 3bff 	add.w	fp, r3, #4294967295
 8014d4a:	6013      	str	r3, [r2, #0]
 8014d4c:	f000 bd28 	b.w	80157a0 <_dtoa_r+0xb18>
 8014d50:	aa14      	add	r2, sp, #80	; 0x50
 8014d52:	a915      	add	r1, sp, #84	; 0x54
 8014d54:	ec47 6b10 	vmov	d0, r6, r7
 8014d58:	4620      	mov	r0, r4
 8014d5a:	f001 fdeb 	bl	8016934 <__d2b>
 8014d5e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014d62:	9004      	str	r0, [sp, #16]
 8014d64:	2d00      	cmp	r5, #0
 8014d66:	d07c      	beq.n	8014e62 <_dtoa_r+0x1da>
 8014d68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014d6c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014d70:	46b2      	mov	sl, r6
 8014d72:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014d76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014d7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014d7e:	2200      	movs	r2, #0
 8014d80:	4b8b      	ldr	r3, [pc, #556]	; (8014fb0 <_dtoa_r+0x328>)
 8014d82:	4650      	mov	r0, sl
 8014d84:	4659      	mov	r1, fp
 8014d86:	f7eb fa97 	bl	80002b8 <__aeabi_dsub>
 8014d8a:	a381      	add	r3, pc, #516	; (adr r3, 8014f90 <_dtoa_r+0x308>)
 8014d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d90:	f7eb fc4a 	bl	8000628 <__aeabi_dmul>
 8014d94:	a380      	add	r3, pc, #512	; (adr r3, 8014f98 <_dtoa_r+0x310>)
 8014d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9a:	f7eb fa8f 	bl	80002bc <__adddf3>
 8014d9e:	4606      	mov	r6, r0
 8014da0:	4628      	mov	r0, r5
 8014da2:	460f      	mov	r7, r1
 8014da4:	f7eb fbd6 	bl	8000554 <__aeabi_i2d>
 8014da8:	a37d      	add	r3, pc, #500	; (adr r3, 8014fa0 <_dtoa_r+0x318>)
 8014daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dae:	f7eb fc3b 	bl	8000628 <__aeabi_dmul>
 8014db2:	4602      	mov	r2, r0
 8014db4:	460b      	mov	r3, r1
 8014db6:	4630      	mov	r0, r6
 8014db8:	4639      	mov	r1, r7
 8014dba:	f7eb fa7f 	bl	80002bc <__adddf3>
 8014dbe:	4606      	mov	r6, r0
 8014dc0:	460f      	mov	r7, r1
 8014dc2:	f7eb fee1 	bl	8000b88 <__aeabi_d2iz>
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	4682      	mov	sl, r0
 8014dca:	2300      	movs	r3, #0
 8014dcc:	4630      	mov	r0, r6
 8014dce:	4639      	mov	r1, r7
 8014dd0:	f7eb fe9c 	bl	8000b0c <__aeabi_dcmplt>
 8014dd4:	b148      	cbz	r0, 8014dea <_dtoa_r+0x162>
 8014dd6:	4650      	mov	r0, sl
 8014dd8:	f7eb fbbc 	bl	8000554 <__aeabi_i2d>
 8014ddc:	4632      	mov	r2, r6
 8014dde:	463b      	mov	r3, r7
 8014de0:	f7eb fe8a 	bl	8000af8 <__aeabi_dcmpeq>
 8014de4:	b908      	cbnz	r0, 8014dea <_dtoa_r+0x162>
 8014de6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014dea:	f1ba 0f16 	cmp.w	sl, #22
 8014dee:	d859      	bhi.n	8014ea4 <_dtoa_r+0x21c>
 8014df0:	4970      	ldr	r1, [pc, #448]	; (8014fb4 <_dtoa_r+0x32c>)
 8014df2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014dfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dfe:	f7eb fea3 	bl	8000b48 <__aeabi_dcmpgt>
 8014e02:	2800      	cmp	r0, #0
 8014e04:	d050      	beq.n	8014ea8 <_dtoa_r+0x220>
 8014e06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014e10:	1b5d      	subs	r5, r3, r5
 8014e12:	f1b5 0801 	subs.w	r8, r5, #1
 8014e16:	bf49      	itett	mi
 8014e18:	f1c5 0301 	rsbmi	r3, r5, #1
 8014e1c:	2300      	movpl	r3, #0
 8014e1e:	9305      	strmi	r3, [sp, #20]
 8014e20:	f04f 0800 	movmi.w	r8, #0
 8014e24:	bf58      	it	pl
 8014e26:	9305      	strpl	r3, [sp, #20]
 8014e28:	f1ba 0f00 	cmp.w	sl, #0
 8014e2c:	db3e      	blt.n	8014eac <_dtoa_r+0x224>
 8014e2e:	2300      	movs	r3, #0
 8014e30:	44d0      	add	r8, sl
 8014e32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014e36:	9307      	str	r3, [sp, #28]
 8014e38:	9b06      	ldr	r3, [sp, #24]
 8014e3a:	2b09      	cmp	r3, #9
 8014e3c:	f200 8090 	bhi.w	8014f60 <_dtoa_r+0x2d8>
 8014e40:	2b05      	cmp	r3, #5
 8014e42:	bfc4      	itt	gt
 8014e44:	3b04      	subgt	r3, #4
 8014e46:	9306      	strgt	r3, [sp, #24]
 8014e48:	9b06      	ldr	r3, [sp, #24]
 8014e4a:	f1a3 0302 	sub.w	r3, r3, #2
 8014e4e:	bfcc      	ite	gt
 8014e50:	2500      	movgt	r5, #0
 8014e52:	2501      	movle	r5, #1
 8014e54:	2b03      	cmp	r3, #3
 8014e56:	f200 808f 	bhi.w	8014f78 <_dtoa_r+0x2f0>
 8014e5a:	e8df f003 	tbb	[pc, r3]
 8014e5e:	7f7d      	.short	0x7f7d
 8014e60:	7131      	.short	0x7131
 8014e62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014e66:	441d      	add	r5, r3
 8014e68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014e6c:	2820      	cmp	r0, #32
 8014e6e:	dd13      	ble.n	8014e98 <_dtoa_r+0x210>
 8014e70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014e74:	9b00      	ldr	r3, [sp, #0]
 8014e76:	fa08 f800 	lsl.w	r8, r8, r0
 8014e7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014e7e:	fa23 f000 	lsr.w	r0, r3, r0
 8014e82:	ea48 0000 	orr.w	r0, r8, r0
 8014e86:	f7eb fb55 	bl	8000534 <__aeabi_ui2d>
 8014e8a:	2301      	movs	r3, #1
 8014e8c:	4682      	mov	sl, r0
 8014e8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014e92:	3d01      	subs	r5, #1
 8014e94:	9313      	str	r3, [sp, #76]	; 0x4c
 8014e96:	e772      	b.n	8014d7e <_dtoa_r+0xf6>
 8014e98:	9b00      	ldr	r3, [sp, #0]
 8014e9a:	f1c0 0020 	rsb	r0, r0, #32
 8014e9e:	fa03 f000 	lsl.w	r0, r3, r0
 8014ea2:	e7f0      	b.n	8014e86 <_dtoa_r+0x1fe>
 8014ea4:	2301      	movs	r3, #1
 8014ea6:	e7b1      	b.n	8014e0c <_dtoa_r+0x184>
 8014ea8:	900f      	str	r0, [sp, #60]	; 0x3c
 8014eaa:	e7b0      	b.n	8014e0e <_dtoa_r+0x186>
 8014eac:	9b05      	ldr	r3, [sp, #20]
 8014eae:	eba3 030a 	sub.w	r3, r3, sl
 8014eb2:	9305      	str	r3, [sp, #20]
 8014eb4:	f1ca 0300 	rsb	r3, sl, #0
 8014eb8:	9307      	str	r3, [sp, #28]
 8014eba:	2300      	movs	r3, #0
 8014ebc:	930e      	str	r3, [sp, #56]	; 0x38
 8014ebe:	e7bb      	b.n	8014e38 <_dtoa_r+0x1b0>
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	930a      	str	r3, [sp, #40]	; 0x28
 8014ec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	dd59      	ble.n	8014f7e <_dtoa_r+0x2f6>
 8014eca:	9302      	str	r3, [sp, #8]
 8014ecc:	4699      	mov	r9, r3
 8014ece:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	6072      	str	r2, [r6, #4]
 8014ed4:	2204      	movs	r2, #4
 8014ed6:	f102 0014 	add.w	r0, r2, #20
 8014eda:	4298      	cmp	r0, r3
 8014edc:	6871      	ldr	r1, [r6, #4]
 8014ede:	d953      	bls.n	8014f88 <_dtoa_r+0x300>
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f001 f9e6 	bl	80162b2 <_Balloc>
 8014ee6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ee8:	6030      	str	r0, [r6, #0]
 8014eea:	f1b9 0f0e 	cmp.w	r9, #14
 8014eee:	f8d3 b000 	ldr.w	fp, [r3]
 8014ef2:	f200 80e6 	bhi.w	80150c2 <_dtoa_r+0x43a>
 8014ef6:	2d00      	cmp	r5, #0
 8014ef8:	f000 80e3 	beq.w	80150c2 <_dtoa_r+0x43a>
 8014efc:	ed9d 7b00 	vldr	d7, [sp]
 8014f00:	f1ba 0f00 	cmp.w	sl, #0
 8014f04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014f08:	dd74      	ble.n	8014ff4 <_dtoa_r+0x36c>
 8014f0a:	4a2a      	ldr	r2, [pc, #168]	; (8014fb4 <_dtoa_r+0x32c>)
 8014f0c:	f00a 030f 	and.w	r3, sl, #15
 8014f10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014f14:	ed93 7b00 	vldr	d7, [r3]
 8014f18:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014f1c:	06f0      	lsls	r0, r6, #27
 8014f1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014f22:	d565      	bpl.n	8014ff0 <_dtoa_r+0x368>
 8014f24:	4b24      	ldr	r3, [pc, #144]	; (8014fb8 <_dtoa_r+0x330>)
 8014f26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014f2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014f2e:	f7eb fca5 	bl	800087c <__aeabi_ddiv>
 8014f32:	e9cd 0100 	strd	r0, r1, [sp]
 8014f36:	f006 060f 	and.w	r6, r6, #15
 8014f3a:	2503      	movs	r5, #3
 8014f3c:	4f1e      	ldr	r7, [pc, #120]	; (8014fb8 <_dtoa_r+0x330>)
 8014f3e:	e04c      	b.n	8014fda <_dtoa_r+0x352>
 8014f40:	2301      	movs	r3, #1
 8014f42:	930a      	str	r3, [sp, #40]	; 0x28
 8014f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f46:	4453      	add	r3, sl
 8014f48:	f103 0901 	add.w	r9, r3, #1
 8014f4c:	9302      	str	r3, [sp, #8]
 8014f4e:	464b      	mov	r3, r9
 8014f50:	2b01      	cmp	r3, #1
 8014f52:	bfb8      	it	lt
 8014f54:	2301      	movlt	r3, #1
 8014f56:	e7ba      	b.n	8014ece <_dtoa_r+0x246>
 8014f58:	2300      	movs	r3, #0
 8014f5a:	e7b2      	b.n	8014ec2 <_dtoa_r+0x23a>
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	e7f0      	b.n	8014f42 <_dtoa_r+0x2ba>
 8014f60:	2501      	movs	r5, #1
 8014f62:	2300      	movs	r3, #0
 8014f64:	9306      	str	r3, [sp, #24]
 8014f66:	950a      	str	r5, [sp, #40]	; 0x28
 8014f68:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6c:	9302      	str	r3, [sp, #8]
 8014f6e:	4699      	mov	r9, r3
 8014f70:	2200      	movs	r2, #0
 8014f72:	2312      	movs	r3, #18
 8014f74:	920b      	str	r2, [sp, #44]	; 0x2c
 8014f76:	e7aa      	b.n	8014ece <_dtoa_r+0x246>
 8014f78:	2301      	movs	r3, #1
 8014f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8014f7c:	e7f4      	b.n	8014f68 <_dtoa_r+0x2e0>
 8014f7e:	2301      	movs	r3, #1
 8014f80:	9302      	str	r3, [sp, #8]
 8014f82:	4699      	mov	r9, r3
 8014f84:	461a      	mov	r2, r3
 8014f86:	e7f5      	b.n	8014f74 <_dtoa_r+0x2ec>
 8014f88:	3101      	adds	r1, #1
 8014f8a:	6071      	str	r1, [r6, #4]
 8014f8c:	0052      	lsls	r2, r2, #1
 8014f8e:	e7a2      	b.n	8014ed6 <_dtoa_r+0x24e>
 8014f90:	636f4361 	.word	0x636f4361
 8014f94:	3fd287a7 	.word	0x3fd287a7
 8014f98:	8b60c8b3 	.word	0x8b60c8b3
 8014f9c:	3fc68a28 	.word	0x3fc68a28
 8014fa0:	509f79fb 	.word	0x509f79fb
 8014fa4:	3fd34413 	.word	0x3fd34413
 8014fa8:	7ff00000 	.word	0x7ff00000
 8014fac:	080185b4 	.word	0x080185b4
 8014fb0:	3ff80000 	.word	0x3ff80000
 8014fb4:	080184b8 	.word	0x080184b8
 8014fb8:	08018490 	.word	0x08018490
 8014fbc:	08018419 	.word	0x08018419
 8014fc0:	07f1      	lsls	r1, r6, #31
 8014fc2:	d508      	bpl.n	8014fd6 <_dtoa_r+0x34e>
 8014fc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014fcc:	f7eb fb2c 	bl	8000628 <__aeabi_dmul>
 8014fd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014fd4:	3501      	adds	r5, #1
 8014fd6:	1076      	asrs	r6, r6, #1
 8014fd8:	3708      	adds	r7, #8
 8014fda:	2e00      	cmp	r6, #0
 8014fdc:	d1f0      	bne.n	8014fc0 <_dtoa_r+0x338>
 8014fde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014fe2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014fe6:	f7eb fc49 	bl	800087c <__aeabi_ddiv>
 8014fea:	e9cd 0100 	strd	r0, r1, [sp]
 8014fee:	e01a      	b.n	8015026 <_dtoa_r+0x39e>
 8014ff0:	2502      	movs	r5, #2
 8014ff2:	e7a3      	b.n	8014f3c <_dtoa_r+0x2b4>
 8014ff4:	f000 80a0 	beq.w	8015138 <_dtoa_r+0x4b0>
 8014ff8:	f1ca 0600 	rsb	r6, sl, #0
 8014ffc:	4b9f      	ldr	r3, [pc, #636]	; (801527c <_dtoa_r+0x5f4>)
 8014ffe:	4fa0      	ldr	r7, [pc, #640]	; (8015280 <_dtoa_r+0x5f8>)
 8015000:	f006 020f 	and.w	r2, r6, #15
 8015004:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801500c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015010:	f7eb fb0a 	bl	8000628 <__aeabi_dmul>
 8015014:	e9cd 0100 	strd	r0, r1, [sp]
 8015018:	1136      	asrs	r6, r6, #4
 801501a:	2300      	movs	r3, #0
 801501c:	2502      	movs	r5, #2
 801501e:	2e00      	cmp	r6, #0
 8015020:	d17f      	bne.n	8015122 <_dtoa_r+0x49a>
 8015022:	2b00      	cmp	r3, #0
 8015024:	d1e1      	bne.n	8014fea <_dtoa_r+0x362>
 8015026:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015028:	2b00      	cmp	r3, #0
 801502a:	f000 8087 	beq.w	801513c <_dtoa_r+0x4b4>
 801502e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015032:	2200      	movs	r2, #0
 8015034:	4b93      	ldr	r3, [pc, #588]	; (8015284 <_dtoa_r+0x5fc>)
 8015036:	4630      	mov	r0, r6
 8015038:	4639      	mov	r1, r7
 801503a:	f7eb fd67 	bl	8000b0c <__aeabi_dcmplt>
 801503e:	2800      	cmp	r0, #0
 8015040:	d07c      	beq.n	801513c <_dtoa_r+0x4b4>
 8015042:	f1b9 0f00 	cmp.w	r9, #0
 8015046:	d079      	beq.n	801513c <_dtoa_r+0x4b4>
 8015048:	9b02      	ldr	r3, [sp, #8]
 801504a:	2b00      	cmp	r3, #0
 801504c:	dd35      	ble.n	80150ba <_dtoa_r+0x432>
 801504e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015052:	9308      	str	r3, [sp, #32]
 8015054:	4639      	mov	r1, r7
 8015056:	2200      	movs	r2, #0
 8015058:	4b8b      	ldr	r3, [pc, #556]	; (8015288 <_dtoa_r+0x600>)
 801505a:	4630      	mov	r0, r6
 801505c:	f7eb fae4 	bl	8000628 <__aeabi_dmul>
 8015060:	e9cd 0100 	strd	r0, r1, [sp]
 8015064:	9f02      	ldr	r7, [sp, #8]
 8015066:	3501      	adds	r5, #1
 8015068:	4628      	mov	r0, r5
 801506a:	f7eb fa73 	bl	8000554 <__aeabi_i2d>
 801506e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015072:	f7eb fad9 	bl	8000628 <__aeabi_dmul>
 8015076:	2200      	movs	r2, #0
 8015078:	4b84      	ldr	r3, [pc, #528]	; (801528c <_dtoa_r+0x604>)
 801507a:	f7eb f91f 	bl	80002bc <__adddf3>
 801507e:	4605      	mov	r5, r0
 8015080:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015084:	2f00      	cmp	r7, #0
 8015086:	d15d      	bne.n	8015144 <_dtoa_r+0x4bc>
 8015088:	2200      	movs	r2, #0
 801508a:	4b81      	ldr	r3, [pc, #516]	; (8015290 <_dtoa_r+0x608>)
 801508c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015090:	f7eb f912 	bl	80002b8 <__aeabi_dsub>
 8015094:	462a      	mov	r2, r5
 8015096:	4633      	mov	r3, r6
 8015098:	e9cd 0100 	strd	r0, r1, [sp]
 801509c:	f7eb fd54 	bl	8000b48 <__aeabi_dcmpgt>
 80150a0:	2800      	cmp	r0, #0
 80150a2:	f040 8288 	bne.w	80155b6 <_dtoa_r+0x92e>
 80150a6:	462a      	mov	r2, r5
 80150a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80150ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150b0:	f7eb fd2c 	bl	8000b0c <__aeabi_dcmplt>
 80150b4:	2800      	cmp	r0, #0
 80150b6:	f040 827c 	bne.w	80155b2 <_dtoa_r+0x92a>
 80150ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80150be:	e9cd 2300 	strd	r2, r3, [sp]
 80150c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f2c0 8150 	blt.w	801536a <_dtoa_r+0x6e2>
 80150ca:	f1ba 0f0e 	cmp.w	sl, #14
 80150ce:	f300 814c 	bgt.w	801536a <_dtoa_r+0x6e2>
 80150d2:	4b6a      	ldr	r3, [pc, #424]	; (801527c <_dtoa_r+0x5f4>)
 80150d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80150d8:	ed93 7b00 	vldr	d7, [r3]
 80150dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150de:	2b00      	cmp	r3, #0
 80150e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80150e4:	f280 80d8 	bge.w	8015298 <_dtoa_r+0x610>
 80150e8:	f1b9 0f00 	cmp.w	r9, #0
 80150ec:	f300 80d4 	bgt.w	8015298 <_dtoa_r+0x610>
 80150f0:	f040 825e 	bne.w	80155b0 <_dtoa_r+0x928>
 80150f4:	2200      	movs	r2, #0
 80150f6:	4b66      	ldr	r3, [pc, #408]	; (8015290 <_dtoa_r+0x608>)
 80150f8:	ec51 0b17 	vmov	r0, r1, d7
 80150fc:	f7eb fa94 	bl	8000628 <__aeabi_dmul>
 8015100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015104:	f7eb fd16 	bl	8000b34 <__aeabi_dcmpge>
 8015108:	464f      	mov	r7, r9
 801510a:	464e      	mov	r6, r9
 801510c:	2800      	cmp	r0, #0
 801510e:	f040 8234 	bne.w	801557a <_dtoa_r+0x8f2>
 8015112:	2331      	movs	r3, #49	; 0x31
 8015114:	f10b 0501 	add.w	r5, fp, #1
 8015118:	f88b 3000 	strb.w	r3, [fp]
 801511c:	f10a 0a01 	add.w	sl, sl, #1
 8015120:	e22f      	b.n	8015582 <_dtoa_r+0x8fa>
 8015122:	07f2      	lsls	r2, r6, #31
 8015124:	d505      	bpl.n	8015132 <_dtoa_r+0x4aa>
 8015126:	e9d7 2300 	ldrd	r2, r3, [r7]
 801512a:	f7eb fa7d 	bl	8000628 <__aeabi_dmul>
 801512e:	3501      	adds	r5, #1
 8015130:	2301      	movs	r3, #1
 8015132:	1076      	asrs	r6, r6, #1
 8015134:	3708      	adds	r7, #8
 8015136:	e772      	b.n	801501e <_dtoa_r+0x396>
 8015138:	2502      	movs	r5, #2
 801513a:	e774      	b.n	8015026 <_dtoa_r+0x39e>
 801513c:	f8cd a020 	str.w	sl, [sp, #32]
 8015140:	464f      	mov	r7, r9
 8015142:	e791      	b.n	8015068 <_dtoa_r+0x3e0>
 8015144:	4b4d      	ldr	r3, [pc, #308]	; (801527c <_dtoa_r+0x5f4>)
 8015146:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801514a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015150:	2b00      	cmp	r3, #0
 8015152:	d047      	beq.n	80151e4 <_dtoa_r+0x55c>
 8015154:	4602      	mov	r2, r0
 8015156:	460b      	mov	r3, r1
 8015158:	2000      	movs	r0, #0
 801515a:	494e      	ldr	r1, [pc, #312]	; (8015294 <_dtoa_r+0x60c>)
 801515c:	f7eb fb8e 	bl	800087c <__aeabi_ddiv>
 8015160:	462a      	mov	r2, r5
 8015162:	4633      	mov	r3, r6
 8015164:	f7eb f8a8 	bl	80002b8 <__aeabi_dsub>
 8015168:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801516c:	465d      	mov	r5, fp
 801516e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015172:	f7eb fd09 	bl	8000b88 <__aeabi_d2iz>
 8015176:	4606      	mov	r6, r0
 8015178:	f7eb f9ec 	bl	8000554 <__aeabi_i2d>
 801517c:	4602      	mov	r2, r0
 801517e:	460b      	mov	r3, r1
 8015180:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015184:	f7eb f898 	bl	80002b8 <__aeabi_dsub>
 8015188:	3630      	adds	r6, #48	; 0x30
 801518a:	f805 6b01 	strb.w	r6, [r5], #1
 801518e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015192:	e9cd 0100 	strd	r0, r1, [sp]
 8015196:	f7eb fcb9 	bl	8000b0c <__aeabi_dcmplt>
 801519a:	2800      	cmp	r0, #0
 801519c:	d163      	bne.n	8015266 <_dtoa_r+0x5de>
 801519e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80151a2:	2000      	movs	r0, #0
 80151a4:	4937      	ldr	r1, [pc, #220]	; (8015284 <_dtoa_r+0x5fc>)
 80151a6:	f7eb f887 	bl	80002b8 <__aeabi_dsub>
 80151aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80151ae:	f7eb fcad 	bl	8000b0c <__aeabi_dcmplt>
 80151b2:	2800      	cmp	r0, #0
 80151b4:	f040 80b7 	bne.w	8015326 <_dtoa_r+0x69e>
 80151b8:	eba5 030b 	sub.w	r3, r5, fp
 80151bc:	429f      	cmp	r7, r3
 80151be:	f77f af7c 	ble.w	80150ba <_dtoa_r+0x432>
 80151c2:	2200      	movs	r2, #0
 80151c4:	4b30      	ldr	r3, [pc, #192]	; (8015288 <_dtoa_r+0x600>)
 80151c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80151ca:	f7eb fa2d 	bl	8000628 <__aeabi_dmul>
 80151ce:	2200      	movs	r2, #0
 80151d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80151d4:	4b2c      	ldr	r3, [pc, #176]	; (8015288 <_dtoa_r+0x600>)
 80151d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151da:	f7eb fa25 	bl	8000628 <__aeabi_dmul>
 80151de:	e9cd 0100 	strd	r0, r1, [sp]
 80151e2:	e7c4      	b.n	801516e <_dtoa_r+0x4e6>
 80151e4:	462a      	mov	r2, r5
 80151e6:	4633      	mov	r3, r6
 80151e8:	f7eb fa1e 	bl	8000628 <__aeabi_dmul>
 80151ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80151f0:	eb0b 0507 	add.w	r5, fp, r7
 80151f4:	465e      	mov	r6, fp
 80151f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80151fa:	f7eb fcc5 	bl	8000b88 <__aeabi_d2iz>
 80151fe:	4607      	mov	r7, r0
 8015200:	f7eb f9a8 	bl	8000554 <__aeabi_i2d>
 8015204:	3730      	adds	r7, #48	; 0x30
 8015206:	4602      	mov	r2, r0
 8015208:	460b      	mov	r3, r1
 801520a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801520e:	f7eb f853 	bl	80002b8 <__aeabi_dsub>
 8015212:	f806 7b01 	strb.w	r7, [r6], #1
 8015216:	42ae      	cmp	r6, r5
 8015218:	e9cd 0100 	strd	r0, r1, [sp]
 801521c:	f04f 0200 	mov.w	r2, #0
 8015220:	d126      	bne.n	8015270 <_dtoa_r+0x5e8>
 8015222:	4b1c      	ldr	r3, [pc, #112]	; (8015294 <_dtoa_r+0x60c>)
 8015224:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015228:	f7eb f848 	bl	80002bc <__adddf3>
 801522c:	4602      	mov	r2, r0
 801522e:	460b      	mov	r3, r1
 8015230:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015234:	f7eb fc88 	bl	8000b48 <__aeabi_dcmpgt>
 8015238:	2800      	cmp	r0, #0
 801523a:	d174      	bne.n	8015326 <_dtoa_r+0x69e>
 801523c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015240:	2000      	movs	r0, #0
 8015242:	4914      	ldr	r1, [pc, #80]	; (8015294 <_dtoa_r+0x60c>)
 8015244:	f7eb f838 	bl	80002b8 <__aeabi_dsub>
 8015248:	4602      	mov	r2, r0
 801524a:	460b      	mov	r3, r1
 801524c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015250:	f7eb fc5c 	bl	8000b0c <__aeabi_dcmplt>
 8015254:	2800      	cmp	r0, #0
 8015256:	f43f af30 	beq.w	80150ba <_dtoa_r+0x432>
 801525a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801525e:	2b30      	cmp	r3, #48	; 0x30
 8015260:	f105 32ff 	add.w	r2, r5, #4294967295
 8015264:	d002      	beq.n	801526c <_dtoa_r+0x5e4>
 8015266:	f8dd a020 	ldr.w	sl, [sp, #32]
 801526a:	e04a      	b.n	8015302 <_dtoa_r+0x67a>
 801526c:	4615      	mov	r5, r2
 801526e:	e7f4      	b.n	801525a <_dtoa_r+0x5d2>
 8015270:	4b05      	ldr	r3, [pc, #20]	; (8015288 <_dtoa_r+0x600>)
 8015272:	f7eb f9d9 	bl	8000628 <__aeabi_dmul>
 8015276:	e9cd 0100 	strd	r0, r1, [sp]
 801527a:	e7bc      	b.n	80151f6 <_dtoa_r+0x56e>
 801527c:	080184b8 	.word	0x080184b8
 8015280:	08018490 	.word	0x08018490
 8015284:	3ff00000 	.word	0x3ff00000
 8015288:	40240000 	.word	0x40240000
 801528c:	401c0000 	.word	0x401c0000
 8015290:	40140000 	.word	0x40140000
 8015294:	3fe00000 	.word	0x3fe00000
 8015298:	e9dd 6700 	ldrd	r6, r7, [sp]
 801529c:	465d      	mov	r5, fp
 801529e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152a2:	4630      	mov	r0, r6
 80152a4:	4639      	mov	r1, r7
 80152a6:	f7eb fae9 	bl	800087c <__aeabi_ddiv>
 80152aa:	f7eb fc6d 	bl	8000b88 <__aeabi_d2iz>
 80152ae:	4680      	mov	r8, r0
 80152b0:	f7eb f950 	bl	8000554 <__aeabi_i2d>
 80152b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152b8:	f7eb f9b6 	bl	8000628 <__aeabi_dmul>
 80152bc:	4602      	mov	r2, r0
 80152be:	460b      	mov	r3, r1
 80152c0:	4630      	mov	r0, r6
 80152c2:	4639      	mov	r1, r7
 80152c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80152c8:	f7ea fff6 	bl	80002b8 <__aeabi_dsub>
 80152cc:	f805 6b01 	strb.w	r6, [r5], #1
 80152d0:	eba5 060b 	sub.w	r6, r5, fp
 80152d4:	45b1      	cmp	r9, r6
 80152d6:	4602      	mov	r2, r0
 80152d8:	460b      	mov	r3, r1
 80152da:	d139      	bne.n	8015350 <_dtoa_r+0x6c8>
 80152dc:	f7ea ffee 	bl	80002bc <__adddf3>
 80152e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152e4:	4606      	mov	r6, r0
 80152e6:	460f      	mov	r7, r1
 80152e8:	f7eb fc2e 	bl	8000b48 <__aeabi_dcmpgt>
 80152ec:	b9c8      	cbnz	r0, 8015322 <_dtoa_r+0x69a>
 80152ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152f2:	4630      	mov	r0, r6
 80152f4:	4639      	mov	r1, r7
 80152f6:	f7eb fbff 	bl	8000af8 <__aeabi_dcmpeq>
 80152fa:	b110      	cbz	r0, 8015302 <_dtoa_r+0x67a>
 80152fc:	f018 0f01 	tst.w	r8, #1
 8015300:	d10f      	bne.n	8015322 <_dtoa_r+0x69a>
 8015302:	9904      	ldr	r1, [sp, #16]
 8015304:	4620      	mov	r0, r4
 8015306:	f001 f808 	bl	801631a <_Bfree>
 801530a:	2300      	movs	r3, #0
 801530c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801530e:	702b      	strb	r3, [r5, #0]
 8015310:	f10a 0301 	add.w	r3, sl, #1
 8015314:	6013      	str	r3, [r2, #0]
 8015316:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015318:	2b00      	cmp	r3, #0
 801531a:	f000 8241 	beq.w	80157a0 <_dtoa_r+0xb18>
 801531e:	601d      	str	r5, [r3, #0]
 8015320:	e23e      	b.n	80157a0 <_dtoa_r+0xb18>
 8015322:	f8cd a020 	str.w	sl, [sp, #32]
 8015326:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801532a:	2a39      	cmp	r2, #57	; 0x39
 801532c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015330:	d108      	bne.n	8015344 <_dtoa_r+0x6bc>
 8015332:	459b      	cmp	fp, r3
 8015334:	d10a      	bne.n	801534c <_dtoa_r+0x6c4>
 8015336:	9b08      	ldr	r3, [sp, #32]
 8015338:	3301      	adds	r3, #1
 801533a:	9308      	str	r3, [sp, #32]
 801533c:	2330      	movs	r3, #48	; 0x30
 801533e:	f88b 3000 	strb.w	r3, [fp]
 8015342:	465b      	mov	r3, fp
 8015344:	781a      	ldrb	r2, [r3, #0]
 8015346:	3201      	adds	r2, #1
 8015348:	701a      	strb	r2, [r3, #0]
 801534a:	e78c      	b.n	8015266 <_dtoa_r+0x5de>
 801534c:	461d      	mov	r5, r3
 801534e:	e7ea      	b.n	8015326 <_dtoa_r+0x69e>
 8015350:	2200      	movs	r2, #0
 8015352:	4b9b      	ldr	r3, [pc, #620]	; (80155c0 <_dtoa_r+0x938>)
 8015354:	f7eb f968 	bl	8000628 <__aeabi_dmul>
 8015358:	2200      	movs	r2, #0
 801535a:	2300      	movs	r3, #0
 801535c:	4606      	mov	r6, r0
 801535e:	460f      	mov	r7, r1
 8015360:	f7eb fbca 	bl	8000af8 <__aeabi_dcmpeq>
 8015364:	2800      	cmp	r0, #0
 8015366:	d09a      	beq.n	801529e <_dtoa_r+0x616>
 8015368:	e7cb      	b.n	8015302 <_dtoa_r+0x67a>
 801536a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801536c:	2a00      	cmp	r2, #0
 801536e:	f000 808b 	beq.w	8015488 <_dtoa_r+0x800>
 8015372:	9a06      	ldr	r2, [sp, #24]
 8015374:	2a01      	cmp	r2, #1
 8015376:	dc6e      	bgt.n	8015456 <_dtoa_r+0x7ce>
 8015378:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801537a:	2a00      	cmp	r2, #0
 801537c:	d067      	beq.n	801544e <_dtoa_r+0x7c6>
 801537e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015382:	9f07      	ldr	r7, [sp, #28]
 8015384:	9d05      	ldr	r5, [sp, #20]
 8015386:	9a05      	ldr	r2, [sp, #20]
 8015388:	2101      	movs	r1, #1
 801538a:	441a      	add	r2, r3
 801538c:	4620      	mov	r0, r4
 801538e:	9205      	str	r2, [sp, #20]
 8015390:	4498      	add	r8, r3
 8015392:	f001 f8a0 	bl	80164d6 <__i2b>
 8015396:	4606      	mov	r6, r0
 8015398:	2d00      	cmp	r5, #0
 801539a:	dd0c      	ble.n	80153b6 <_dtoa_r+0x72e>
 801539c:	f1b8 0f00 	cmp.w	r8, #0
 80153a0:	dd09      	ble.n	80153b6 <_dtoa_r+0x72e>
 80153a2:	4545      	cmp	r5, r8
 80153a4:	9a05      	ldr	r2, [sp, #20]
 80153a6:	462b      	mov	r3, r5
 80153a8:	bfa8      	it	ge
 80153aa:	4643      	movge	r3, r8
 80153ac:	1ad2      	subs	r2, r2, r3
 80153ae:	9205      	str	r2, [sp, #20]
 80153b0:	1aed      	subs	r5, r5, r3
 80153b2:	eba8 0803 	sub.w	r8, r8, r3
 80153b6:	9b07      	ldr	r3, [sp, #28]
 80153b8:	b1eb      	cbz	r3, 80153f6 <_dtoa_r+0x76e>
 80153ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d067      	beq.n	8015490 <_dtoa_r+0x808>
 80153c0:	b18f      	cbz	r7, 80153e6 <_dtoa_r+0x75e>
 80153c2:	4631      	mov	r1, r6
 80153c4:	463a      	mov	r2, r7
 80153c6:	4620      	mov	r0, r4
 80153c8:	f001 f924 	bl	8016614 <__pow5mult>
 80153cc:	9a04      	ldr	r2, [sp, #16]
 80153ce:	4601      	mov	r1, r0
 80153d0:	4606      	mov	r6, r0
 80153d2:	4620      	mov	r0, r4
 80153d4:	f001 f888 	bl	80164e8 <__multiply>
 80153d8:	9904      	ldr	r1, [sp, #16]
 80153da:	9008      	str	r0, [sp, #32]
 80153dc:	4620      	mov	r0, r4
 80153de:	f000 ff9c 	bl	801631a <_Bfree>
 80153e2:	9b08      	ldr	r3, [sp, #32]
 80153e4:	9304      	str	r3, [sp, #16]
 80153e6:	9b07      	ldr	r3, [sp, #28]
 80153e8:	1bda      	subs	r2, r3, r7
 80153ea:	d004      	beq.n	80153f6 <_dtoa_r+0x76e>
 80153ec:	9904      	ldr	r1, [sp, #16]
 80153ee:	4620      	mov	r0, r4
 80153f0:	f001 f910 	bl	8016614 <__pow5mult>
 80153f4:	9004      	str	r0, [sp, #16]
 80153f6:	2101      	movs	r1, #1
 80153f8:	4620      	mov	r0, r4
 80153fa:	f001 f86c 	bl	80164d6 <__i2b>
 80153fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015400:	4607      	mov	r7, r0
 8015402:	2b00      	cmp	r3, #0
 8015404:	f000 81d0 	beq.w	80157a8 <_dtoa_r+0xb20>
 8015408:	461a      	mov	r2, r3
 801540a:	4601      	mov	r1, r0
 801540c:	4620      	mov	r0, r4
 801540e:	f001 f901 	bl	8016614 <__pow5mult>
 8015412:	9b06      	ldr	r3, [sp, #24]
 8015414:	2b01      	cmp	r3, #1
 8015416:	4607      	mov	r7, r0
 8015418:	dc40      	bgt.n	801549c <_dtoa_r+0x814>
 801541a:	9b00      	ldr	r3, [sp, #0]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d139      	bne.n	8015494 <_dtoa_r+0x80c>
 8015420:	9b01      	ldr	r3, [sp, #4]
 8015422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015426:	2b00      	cmp	r3, #0
 8015428:	d136      	bne.n	8015498 <_dtoa_r+0x810>
 801542a:	9b01      	ldr	r3, [sp, #4]
 801542c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015430:	0d1b      	lsrs	r3, r3, #20
 8015432:	051b      	lsls	r3, r3, #20
 8015434:	b12b      	cbz	r3, 8015442 <_dtoa_r+0x7ba>
 8015436:	9b05      	ldr	r3, [sp, #20]
 8015438:	3301      	adds	r3, #1
 801543a:	9305      	str	r3, [sp, #20]
 801543c:	f108 0801 	add.w	r8, r8, #1
 8015440:	2301      	movs	r3, #1
 8015442:	9307      	str	r3, [sp, #28]
 8015444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015446:	2b00      	cmp	r3, #0
 8015448:	d12a      	bne.n	80154a0 <_dtoa_r+0x818>
 801544a:	2001      	movs	r0, #1
 801544c:	e030      	b.n	80154b0 <_dtoa_r+0x828>
 801544e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015450:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015454:	e795      	b.n	8015382 <_dtoa_r+0x6fa>
 8015456:	9b07      	ldr	r3, [sp, #28]
 8015458:	f109 37ff 	add.w	r7, r9, #4294967295
 801545c:	42bb      	cmp	r3, r7
 801545e:	bfbf      	itttt	lt
 8015460:	9b07      	ldrlt	r3, [sp, #28]
 8015462:	9707      	strlt	r7, [sp, #28]
 8015464:	1afa      	sublt	r2, r7, r3
 8015466:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015468:	bfbb      	ittet	lt
 801546a:	189b      	addlt	r3, r3, r2
 801546c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801546e:	1bdf      	subge	r7, r3, r7
 8015470:	2700      	movlt	r7, #0
 8015472:	f1b9 0f00 	cmp.w	r9, #0
 8015476:	bfb5      	itete	lt
 8015478:	9b05      	ldrlt	r3, [sp, #20]
 801547a:	9d05      	ldrge	r5, [sp, #20]
 801547c:	eba3 0509 	sublt.w	r5, r3, r9
 8015480:	464b      	movge	r3, r9
 8015482:	bfb8      	it	lt
 8015484:	2300      	movlt	r3, #0
 8015486:	e77e      	b.n	8015386 <_dtoa_r+0x6fe>
 8015488:	9f07      	ldr	r7, [sp, #28]
 801548a:	9d05      	ldr	r5, [sp, #20]
 801548c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801548e:	e783      	b.n	8015398 <_dtoa_r+0x710>
 8015490:	9a07      	ldr	r2, [sp, #28]
 8015492:	e7ab      	b.n	80153ec <_dtoa_r+0x764>
 8015494:	2300      	movs	r3, #0
 8015496:	e7d4      	b.n	8015442 <_dtoa_r+0x7ba>
 8015498:	9b00      	ldr	r3, [sp, #0]
 801549a:	e7d2      	b.n	8015442 <_dtoa_r+0x7ba>
 801549c:	2300      	movs	r3, #0
 801549e:	9307      	str	r3, [sp, #28]
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80154a6:	6918      	ldr	r0, [r3, #16]
 80154a8:	f000 ffc7 	bl	801643a <__hi0bits>
 80154ac:	f1c0 0020 	rsb	r0, r0, #32
 80154b0:	4440      	add	r0, r8
 80154b2:	f010 001f 	ands.w	r0, r0, #31
 80154b6:	d047      	beq.n	8015548 <_dtoa_r+0x8c0>
 80154b8:	f1c0 0320 	rsb	r3, r0, #32
 80154bc:	2b04      	cmp	r3, #4
 80154be:	dd3b      	ble.n	8015538 <_dtoa_r+0x8b0>
 80154c0:	9b05      	ldr	r3, [sp, #20]
 80154c2:	f1c0 001c 	rsb	r0, r0, #28
 80154c6:	4403      	add	r3, r0
 80154c8:	9305      	str	r3, [sp, #20]
 80154ca:	4405      	add	r5, r0
 80154cc:	4480      	add	r8, r0
 80154ce:	9b05      	ldr	r3, [sp, #20]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	dd05      	ble.n	80154e0 <_dtoa_r+0x858>
 80154d4:	461a      	mov	r2, r3
 80154d6:	9904      	ldr	r1, [sp, #16]
 80154d8:	4620      	mov	r0, r4
 80154da:	f001 f8e9 	bl	80166b0 <__lshift>
 80154de:	9004      	str	r0, [sp, #16]
 80154e0:	f1b8 0f00 	cmp.w	r8, #0
 80154e4:	dd05      	ble.n	80154f2 <_dtoa_r+0x86a>
 80154e6:	4639      	mov	r1, r7
 80154e8:	4642      	mov	r2, r8
 80154ea:	4620      	mov	r0, r4
 80154ec:	f001 f8e0 	bl	80166b0 <__lshift>
 80154f0:	4607      	mov	r7, r0
 80154f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154f4:	b353      	cbz	r3, 801554c <_dtoa_r+0x8c4>
 80154f6:	4639      	mov	r1, r7
 80154f8:	9804      	ldr	r0, [sp, #16]
 80154fa:	f001 f92d 	bl	8016758 <__mcmp>
 80154fe:	2800      	cmp	r0, #0
 8015500:	da24      	bge.n	801554c <_dtoa_r+0x8c4>
 8015502:	2300      	movs	r3, #0
 8015504:	220a      	movs	r2, #10
 8015506:	9904      	ldr	r1, [sp, #16]
 8015508:	4620      	mov	r0, r4
 801550a:	f000 ff1d 	bl	8016348 <__multadd>
 801550e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015510:	9004      	str	r0, [sp, #16]
 8015512:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015516:	2b00      	cmp	r3, #0
 8015518:	f000 814d 	beq.w	80157b6 <_dtoa_r+0xb2e>
 801551c:	2300      	movs	r3, #0
 801551e:	4631      	mov	r1, r6
 8015520:	220a      	movs	r2, #10
 8015522:	4620      	mov	r0, r4
 8015524:	f000 ff10 	bl	8016348 <__multadd>
 8015528:	9b02      	ldr	r3, [sp, #8]
 801552a:	2b00      	cmp	r3, #0
 801552c:	4606      	mov	r6, r0
 801552e:	dc4f      	bgt.n	80155d0 <_dtoa_r+0x948>
 8015530:	9b06      	ldr	r3, [sp, #24]
 8015532:	2b02      	cmp	r3, #2
 8015534:	dd4c      	ble.n	80155d0 <_dtoa_r+0x948>
 8015536:	e011      	b.n	801555c <_dtoa_r+0x8d4>
 8015538:	d0c9      	beq.n	80154ce <_dtoa_r+0x846>
 801553a:	9a05      	ldr	r2, [sp, #20]
 801553c:	331c      	adds	r3, #28
 801553e:	441a      	add	r2, r3
 8015540:	9205      	str	r2, [sp, #20]
 8015542:	441d      	add	r5, r3
 8015544:	4498      	add	r8, r3
 8015546:	e7c2      	b.n	80154ce <_dtoa_r+0x846>
 8015548:	4603      	mov	r3, r0
 801554a:	e7f6      	b.n	801553a <_dtoa_r+0x8b2>
 801554c:	f1b9 0f00 	cmp.w	r9, #0
 8015550:	dc38      	bgt.n	80155c4 <_dtoa_r+0x93c>
 8015552:	9b06      	ldr	r3, [sp, #24]
 8015554:	2b02      	cmp	r3, #2
 8015556:	dd35      	ble.n	80155c4 <_dtoa_r+0x93c>
 8015558:	f8cd 9008 	str.w	r9, [sp, #8]
 801555c:	9b02      	ldr	r3, [sp, #8]
 801555e:	b963      	cbnz	r3, 801557a <_dtoa_r+0x8f2>
 8015560:	4639      	mov	r1, r7
 8015562:	2205      	movs	r2, #5
 8015564:	4620      	mov	r0, r4
 8015566:	f000 feef 	bl	8016348 <__multadd>
 801556a:	4601      	mov	r1, r0
 801556c:	4607      	mov	r7, r0
 801556e:	9804      	ldr	r0, [sp, #16]
 8015570:	f001 f8f2 	bl	8016758 <__mcmp>
 8015574:	2800      	cmp	r0, #0
 8015576:	f73f adcc 	bgt.w	8015112 <_dtoa_r+0x48a>
 801557a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801557c:	465d      	mov	r5, fp
 801557e:	ea6f 0a03 	mvn.w	sl, r3
 8015582:	f04f 0900 	mov.w	r9, #0
 8015586:	4639      	mov	r1, r7
 8015588:	4620      	mov	r0, r4
 801558a:	f000 fec6 	bl	801631a <_Bfree>
 801558e:	2e00      	cmp	r6, #0
 8015590:	f43f aeb7 	beq.w	8015302 <_dtoa_r+0x67a>
 8015594:	f1b9 0f00 	cmp.w	r9, #0
 8015598:	d005      	beq.n	80155a6 <_dtoa_r+0x91e>
 801559a:	45b1      	cmp	r9, r6
 801559c:	d003      	beq.n	80155a6 <_dtoa_r+0x91e>
 801559e:	4649      	mov	r1, r9
 80155a0:	4620      	mov	r0, r4
 80155a2:	f000 feba 	bl	801631a <_Bfree>
 80155a6:	4631      	mov	r1, r6
 80155a8:	4620      	mov	r0, r4
 80155aa:	f000 feb6 	bl	801631a <_Bfree>
 80155ae:	e6a8      	b.n	8015302 <_dtoa_r+0x67a>
 80155b0:	2700      	movs	r7, #0
 80155b2:	463e      	mov	r6, r7
 80155b4:	e7e1      	b.n	801557a <_dtoa_r+0x8f2>
 80155b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80155ba:	463e      	mov	r6, r7
 80155bc:	e5a9      	b.n	8015112 <_dtoa_r+0x48a>
 80155be:	bf00      	nop
 80155c0:	40240000 	.word	0x40240000
 80155c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	f000 80fa 	beq.w	80157c4 <_dtoa_r+0xb3c>
 80155d0:	2d00      	cmp	r5, #0
 80155d2:	dd05      	ble.n	80155e0 <_dtoa_r+0x958>
 80155d4:	4631      	mov	r1, r6
 80155d6:	462a      	mov	r2, r5
 80155d8:	4620      	mov	r0, r4
 80155da:	f001 f869 	bl	80166b0 <__lshift>
 80155de:	4606      	mov	r6, r0
 80155e0:	9b07      	ldr	r3, [sp, #28]
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d04c      	beq.n	8015680 <_dtoa_r+0x9f8>
 80155e6:	6871      	ldr	r1, [r6, #4]
 80155e8:	4620      	mov	r0, r4
 80155ea:	f000 fe62 	bl	80162b2 <_Balloc>
 80155ee:	6932      	ldr	r2, [r6, #16]
 80155f0:	3202      	adds	r2, #2
 80155f2:	4605      	mov	r5, r0
 80155f4:	0092      	lsls	r2, r2, #2
 80155f6:	f106 010c 	add.w	r1, r6, #12
 80155fa:	300c      	adds	r0, #12
 80155fc:	f000 fe4e 	bl	801629c <memcpy>
 8015600:	2201      	movs	r2, #1
 8015602:	4629      	mov	r1, r5
 8015604:	4620      	mov	r0, r4
 8015606:	f001 f853 	bl	80166b0 <__lshift>
 801560a:	9b00      	ldr	r3, [sp, #0]
 801560c:	f8cd b014 	str.w	fp, [sp, #20]
 8015610:	f003 0301 	and.w	r3, r3, #1
 8015614:	46b1      	mov	r9, r6
 8015616:	9307      	str	r3, [sp, #28]
 8015618:	4606      	mov	r6, r0
 801561a:	4639      	mov	r1, r7
 801561c:	9804      	ldr	r0, [sp, #16]
 801561e:	f7ff faa7 	bl	8014b70 <quorem>
 8015622:	4649      	mov	r1, r9
 8015624:	4605      	mov	r5, r0
 8015626:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801562a:	9804      	ldr	r0, [sp, #16]
 801562c:	f001 f894 	bl	8016758 <__mcmp>
 8015630:	4632      	mov	r2, r6
 8015632:	9000      	str	r0, [sp, #0]
 8015634:	4639      	mov	r1, r7
 8015636:	4620      	mov	r0, r4
 8015638:	f001 f8a8 	bl	801678c <__mdiff>
 801563c:	68c3      	ldr	r3, [r0, #12]
 801563e:	4602      	mov	r2, r0
 8015640:	bb03      	cbnz	r3, 8015684 <_dtoa_r+0x9fc>
 8015642:	4601      	mov	r1, r0
 8015644:	9008      	str	r0, [sp, #32]
 8015646:	9804      	ldr	r0, [sp, #16]
 8015648:	f001 f886 	bl	8016758 <__mcmp>
 801564c:	9a08      	ldr	r2, [sp, #32]
 801564e:	4603      	mov	r3, r0
 8015650:	4611      	mov	r1, r2
 8015652:	4620      	mov	r0, r4
 8015654:	9308      	str	r3, [sp, #32]
 8015656:	f000 fe60 	bl	801631a <_Bfree>
 801565a:	9b08      	ldr	r3, [sp, #32]
 801565c:	b9a3      	cbnz	r3, 8015688 <_dtoa_r+0xa00>
 801565e:	9a06      	ldr	r2, [sp, #24]
 8015660:	b992      	cbnz	r2, 8015688 <_dtoa_r+0xa00>
 8015662:	9a07      	ldr	r2, [sp, #28]
 8015664:	b982      	cbnz	r2, 8015688 <_dtoa_r+0xa00>
 8015666:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801566a:	d029      	beq.n	80156c0 <_dtoa_r+0xa38>
 801566c:	9b00      	ldr	r3, [sp, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	dd01      	ble.n	8015676 <_dtoa_r+0x9ee>
 8015672:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8015676:	9b05      	ldr	r3, [sp, #20]
 8015678:	1c5d      	adds	r5, r3, #1
 801567a:	f883 8000 	strb.w	r8, [r3]
 801567e:	e782      	b.n	8015586 <_dtoa_r+0x8fe>
 8015680:	4630      	mov	r0, r6
 8015682:	e7c2      	b.n	801560a <_dtoa_r+0x982>
 8015684:	2301      	movs	r3, #1
 8015686:	e7e3      	b.n	8015650 <_dtoa_r+0x9c8>
 8015688:	9a00      	ldr	r2, [sp, #0]
 801568a:	2a00      	cmp	r2, #0
 801568c:	db04      	blt.n	8015698 <_dtoa_r+0xa10>
 801568e:	d125      	bne.n	80156dc <_dtoa_r+0xa54>
 8015690:	9a06      	ldr	r2, [sp, #24]
 8015692:	bb1a      	cbnz	r2, 80156dc <_dtoa_r+0xa54>
 8015694:	9a07      	ldr	r2, [sp, #28]
 8015696:	bb0a      	cbnz	r2, 80156dc <_dtoa_r+0xa54>
 8015698:	2b00      	cmp	r3, #0
 801569a:	ddec      	ble.n	8015676 <_dtoa_r+0x9ee>
 801569c:	2201      	movs	r2, #1
 801569e:	9904      	ldr	r1, [sp, #16]
 80156a0:	4620      	mov	r0, r4
 80156a2:	f001 f805 	bl	80166b0 <__lshift>
 80156a6:	4639      	mov	r1, r7
 80156a8:	9004      	str	r0, [sp, #16]
 80156aa:	f001 f855 	bl	8016758 <__mcmp>
 80156ae:	2800      	cmp	r0, #0
 80156b0:	dc03      	bgt.n	80156ba <_dtoa_r+0xa32>
 80156b2:	d1e0      	bne.n	8015676 <_dtoa_r+0x9ee>
 80156b4:	f018 0f01 	tst.w	r8, #1
 80156b8:	d0dd      	beq.n	8015676 <_dtoa_r+0x9ee>
 80156ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80156be:	d1d8      	bne.n	8015672 <_dtoa_r+0x9ea>
 80156c0:	9b05      	ldr	r3, [sp, #20]
 80156c2:	9a05      	ldr	r2, [sp, #20]
 80156c4:	1c5d      	adds	r5, r3, #1
 80156c6:	2339      	movs	r3, #57	; 0x39
 80156c8:	7013      	strb	r3, [r2, #0]
 80156ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80156ce:	2b39      	cmp	r3, #57	; 0x39
 80156d0:	f105 32ff 	add.w	r2, r5, #4294967295
 80156d4:	d04f      	beq.n	8015776 <_dtoa_r+0xaee>
 80156d6:	3301      	adds	r3, #1
 80156d8:	7013      	strb	r3, [r2, #0]
 80156da:	e754      	b.n	8015586 <_dtoa_r+0x8fe>
 80156dc:	9a05      	ldr	r2, [sp, #20]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	f102 0501 	add.w	r5, r2, #1
 80156e4:	dd06      	ble.n	80156f4 <_dtoa_r+0xa6c>
 80156e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80156ea:	d0e9      	beq.n	80156c0 <_dtoa_r+0xa38>
 80156ec:	f108 0801 	add.w	r8, r8, #1
 80156f0:	9b05      	ldr	r3, [sp, #20]
 80156f2:	e7c2      	b.n	801567a <_dtoa_r+0x9f2>
 80156f4:	9a02      	ldr	r2, [sp, #8]
 80156f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80156fa:	eba5 030b 	sub.w	r3, r5, fp
 80156fe:	4293      	cmp	r3, r2
 8015700:	d021      	beq.n	8015746 <_dtoa_r+0xabe>
 8015702:	2300      	movs	r3, #0
 8015704:	220a      	movs	r2, #10
 8015706:	9904      	ldr	r1, [sp, #16]
 8015708:	4620      	mov	r0, r4
 801570a:	f000 fe1d 	bl	8016348 <__multadd>
 801570e:	45b1      	cmp	r9, r6
 8015710:	9004      	str	r0, [sp, #16]
 8015712:	f04f 0300 	mov.w	r3, #0
 8015716:	f04f 020a 	mov.w	r2, #10
 801571a:	4649      	mov	r1, r9
 801571c:	4620      	mov	r0, r4
 801571e:	d105      	bne.n	801572c <_dtoa_r+0xaa4>
 8015720:	f000 fe12 	bl	8016348 <__multadd>
 8015724:	4681      	mov	r9, r0
 8015726:	4606      	mov	r6, r0
 8015728:	9505      	str	r5, [sp, #20]
 801572a:	e776      	b.n	801561a <_dtoa_r+0x992>
 801572c:	f000 fe0c 	bl	8016348 <__multadd>
 8015730:	4631      	mov	r1, r6
 8015732:	4681      	mov	r9, r0
 8015734:	2300      	movs	r3, #0
 8015736:	220a      	movs	r2, #10
 8015738:	4620      	mov	r0, r4
 801573a:	f000 fe05 	bl	8016348 <__multadd>
 801573e:	4606      	mov	r6, r0
 8015740:	e7f2      	b.n	8015728 <_dtoa_r+0xaa0>
 8015742:	f04f 0900 	mov.w	r9, #0
 8015746:	2201      	movs	r2, #1
 8015748:	9904      	ldr	r1, [sp, #16]
 801574a:	4620      	mov	r0, r4
 801574c:	f000 ffb0 	bl	80166b0 <__lshift>
 8015750:	4639      	mov	r1, r7
 8015752:	9004      	str	r0, [sp, #16]
 8015754:	f001 f800 	bl	8016758 <__mcmp>
 8015758:	2800      	cmp	r0, #0
 801575a:	dcb6      	bgt.n	80156ca <_dtoa_r+0xa42>
 801575c:	d102      	bne.n	8015764 <_dtoa_r+0xadc>
 801575e:	f018 0f01 	tst.w	r8, #1
 8015762:	d1b2      	bne.n	80156ca <_dtoa_r+0xa42>
 8015764:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015768:	2b30      	cmp	r3, #48	; 0x30
 801576a:	f105 32ff 	add.w	r2, r5, #4294967295
 801576e:	f47f af0a 	bne.w	8015586 <_dtoa_r+0x8fe>
 8015772:	4615      	mov	r5, r2
 8015774:	e7f6      	b.n	8015764 <_dtoa_r+0xadc>
 8015776:	4593      	cmp	fp, r2
 8015778:	d105      	bne.n	8015786 <_dtoa_r+0xafe>
 801577a:	2331      	movs	r3, #49	; 0x31
 801577c:	f10a 0a01 	add.w	sl, sl, #1
 8015780:	f88b 3000 	strb.w	r3, [fp]
 8015784:	e6ff      	b.n	8015586 <_dtoa_r+0x8fe>
 8015786:	4615      	mov	r5, r2
 8015788:	e79f      	b.n	80156ca <_dtoa_r+0xa42>
 801578a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80157f0 <_dtoa_r+0xb68>
 801578e:	e007      	b.n	80157a0 <_dtoa_r+0xb18>
 8015790:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015792:	f8df b060 	ldr.w	fp, [pc, #96]	; 80157f4 <_dtoa_r+0xb6c>
 8015796:	b11b      	cbz	r3, 80157a0 <_dtoa_r+0xb18>
 8015798:	f10b 0308 	add.w	r3, fp, #8
 801579c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801579e:	6013      	str	r3, [r2, #0]
 80157a0:	4658      	mov	r0, fp
 80157a2:	b017      	add	sp, #92	; 0x5c
 80157a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a8:	9b06      	ldr	r3, [sp, #24]
 80157aa:	2b01      	cmp	r3, #1
 80157ac:	f77f ae35 	ble.w	801541a <_dtoa_r+0x792>
 80157b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80157b2:	9307      	str	r3, [sp, #28]
 80157b4:	e649      	b.n	801544a <_dtoa_r+0x7c2>
 80157b6:	9b02      	ldr	r3, [sp, #8]
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	dc03      	bgt.n	80157c4 <_dtoa_r+0xb3c>
 80157bc:	9b06      	ldr	r3, [sp, #24]
 80157be:	2b02      	cmp	r3, #2
 80157c0:	f73f aecc 	bgt.w	801555c <_dtoa_r+0x8d4>
 80157c4:	465d      	mov	r5, fp
 80157c6:	4639      	mov	r1, r7
 80157c8:	9804      	ldr	r0, [sp, #16]
 80157ca:	f7ff f9d1 	bl	8014b70 <quorem>
 80157ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80157d2:	f805 8b01 	strb.w	r8, [r5], #1
 80157d6:	9a02      	ldr	r2, [sp, #8]
 80157d8:	eba5 030b 	sub.w	r3, r5, fp
 80157dc:	429a      	cmp	r2, r3
 80157de:	ddb0      	ble.n	8015742 <_dtoa_r+0xaba>
 80157e0:	2300      	movs	r3, #0
 80157e2:	220a      	movs	r2, #10
 80157e4:	9904      	ldr	r1, [sp, #16]
 80157e6:	4620      	mov	r0, r4
 80157e8:	f000 fdae 	bl	8016348 <__multadd>
 80157ec:	9004      	str	r0, [sp, #16]
 80157ee:	e7ea      	b.n	80157c6 <_dtoa_r+0xb3e>
 80157f0:	080185b3 	.word	0x080185b3
 80157f4:	08018410 	.word	0x08018410

080157f8 <__sflush_r>:
 80157f8:	898a      	ldrh	r2, [r1, #12]
 80157fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157fe:	4605      	mov	r5, r0
 8015800:	0710      	lsls	r0, r2, #28
 8015802:	460c      	mov	r4, r1
 8015804:	d458      	bmi.n	80158b8 <__sflush_r+0xc0>
 8015806:	684b      	ldr	r3, [r1, #4]
 8015808:	2b00      	cmp	r3, #0
 801580a:	dc05      	bgt.n	8015818 <__sflush_r+0x20>
 801580c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801580e:	2b00      	cmp	r3, #0
 8015810:	dc02      	bgt.n	8015818 <__sflush_r+0x20>
 8015812:	2000      	movs	r0, #0
 8015814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015818:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801581a:	2e00      	cmp	r6, #0
 801581c:	d0f9      	beq.n	8015812 <__sflush_r+0x1a>
 801581e:	2300      	movs	r3, #0
 8015820:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015824:	682f      	ldr	r7, [r5, #0]
 8015826:	6a21      	ldr	r1, [r4, #32]
 8015828:	602b      	str	r3, [r5, #0]
 801582a:	d032      	beq.n	8015892 <__sflush_r+0x9a>
 801582c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801582e:	89a3      	ldrh	r3, [r4, #12]
 8015830:	075a      	lsls	r2, r3, #29
 8015832:	d505      	bpl.n	8015840 <__sflush_r+0x48>
 8015834:	6863      	ldr	r3, [r4, #4]
 8015836:	1ac0      	subs	r0, r0, r3
 8015838:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801583a:	b10b      	cbz	r3, 8015840 <__sflush_r+0x48>
 801583c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801583e:	1ac0      	subs	r0, r0, r3
 8015840:	2300      	movs	r3, #0
 8015842:	4602      	mov	r2, r0
 8015844:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015846:	6a21      	ldr	r1, [r4, #32]
 8015848:	4628      	mov	r0, r5
 801584a:	47b0      	blx	r6
 801584c:	1c43      	adds	r3, r0, #1
 801584e:	89a3      	ldrh	r3, [r4, #12]
 8015850:	d106      	bne.n	8015860 <__sflush_r+0x68>
 8015852:	6829      	ldr	r1, [r5, #0]
 8015854:	291d      	cmp	r1, #29
 8015856:	d848      	bhi.n	80158ea <__sflush_r+0xf2>
 8015858:	4a29      	ldr	r2, [pc, #164]	; (8015900 <__sflush_r+0x108>)
 801585a:	40ca      	lsrs	r2, r1
 801585c:	07d6      	lsls	r6, r2, #31
 801585e:	d544      	bpl.n	80158ea <__sflush_r+0xf2>
 8015860:	2200      	movs	r2, #0
 8015862:	6062      	str	r2, [r4, #4]
 8015864:	04d9      	lsls	r1, r3, #19
 8015866:	6922      	ldr	r2, [r4, #16]
 8015868:	6022      	str	r2, [r4, #0]
 801586a:	d504      	bpl.n	8015876 <__sflush_r+0x7e>
 801586c:	1c42      	adds	r2, r0, #1
 801586e:	d101      	bne.n	8015874 <__sflush_r+0x7c>
 8015870:	682b      	ldr	r3, [r5, #0]
 8015872:	b903      	cbnz	r3, 8015876 <__sflush_r+0x7e>
 8015874:	6560      	str	r0, [r4, #84]	; 0x54
 8015876:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015878:	602f      	str	r7, [r5, #0]
 801587a:	2900      	cmp	r1, #0
 801587c:	d0c9      	beq.n	8015812 <__sflush_r+0x1a>
 801587e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015882:	4299      	cmp	r1, r3
 8015884:	d002      	beq.n	801588c <__sflush_r+0x94>
 8015886:	4628      	mov	r0, r5
 8015888:	f001 f920 	bl	8016acc <_free_r>
 801588c:	2000      	movs	r0, #0
 801588e:	6360      	str	r0, [r4, #52]	; 0x34
 8015890:	e7c0      	b.n	8015814 <__sflush_r+0x1c>
 8015892:	2301      	movs	r3, #1
 8015894:	4628      	mov	r0, r5
 8015896:	47b0      	blx	r6
 8015898:	1c41      	adds	r1, r0, #1
 801589a:	d1c8      	bne.n	801582e <__sflush_r+0x36>
 801589c:	682b      	ldr	r3, [r5, #0]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d0c5      	beq.n	801582e <__sflush_r+0x36>
 80158a2:	2b1d      	cmp	r3, #29
 80158a4:	d001      	beq.n	80158aa <__sflush_r+0xb2>
 80158a6:	2b16      	cmp	r3, #22
 80158a8:	d101      	bne.n	80158ae <__sflush_r+0xb6>
 80158aa:	602f      	str	r7, [r5, #0]
 80158ac:	e7b1      	b.n	8015812 <__sflush_r+0x1a>
 80158ae:	89a3      	ldrh	r3, [r4, #12]
 80158b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158b4:	81a3      	strh	r3, [r4, #12]
 80158b6:	e7ad      	b.n	8015814 <__sflush_r+0x1c>
 80158b8:	690f      	ldr	r7, [r1, #16]
 80158ba:	2f00      	cmp	r7, #0
 80158bc:	d0a9      	beq.n	8015812 <__sflush_r+0x1a>
 80158be:	0793      	lsls	r3, r2, #30
 80158c0:	680e      	ldr	r6, [r1, #0]
 80158c2:	bf08      	it	eq
 80158c4:	694b      	ldreq	r3, [r1, #20]
 80158c6:	600f      	str	r7, [r1, #0]
 80158c8:	bf18      	it	ne
 80158ca:	2300      	movne	r3, #0
 80158cc:	eba6 0807 	sub.w	r8, r6, r7
 80158d0:	608b      	str	r3, [r1, #8]
 80158d2:	f1b8 0f00 	cmp.w	r8, #0
 80158d6:	dd9c      	ble.n	8015812 <__sflush_r+0x1a>
 80158d8:	4643      	mov	r3, r8
 80158da:	463a      	mov	r2, r7
 80158dc:	6a21      	ldr	r1, [r4, #32]
 80158de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80158e0:	4628      	mov	r0, r5
 80158e2:	47b0      	blx	r6
 80158e4:	2800      	cmp	r0, #0
 80158e6:	dc06      	bgt.n	80158f6 <__sflush_r+0xfe>
 80158e8:	89a3      	ldrh	r3, [r4, #12]
 80158ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80158ee:	81a3      	strh	r3, [r4, #12]
 80158f0:	f04f 30ff 	mov.w	r0, #4294967295
 80158f4:	e78e      	b.n	8015814 <__sflush_r+0x1c>
 80158f6:	4407      	add	r7, r0
 80158f8:	eba8 0800 	sub.w	r8, r8, r0
 80158fc:	e7e9      	b.n	80158d2 <__sflush_r+0xda>
 80158fe:	bf00      	nop
 8015900:	20400001 	.word	0x20400001

08015904 <_fflush_r>:
 8015904:	b538      	push	{r3, r4, r5, lr}
 8015906:	690b      	ldr	r3, [r1, #16]
 8015908:	4605      	mov	r5, r0
 801590a:	460c      	mov	r4, r1
 801590c:	b1db      	cbz	r3, 8015946 <_fflush_r+0x42>
 801590e:	b118      	cbz	r0, 8015918 <_fflush_r+0x14>
 8015910:	6983      	ldr	r3, [r0, #24]
 8015912:	b90b      	cbnz	r3, 8015918 <_fflush_r+0x14>
 8015914:	f000 f860 	bl	80159d8 <__sinit>
 8015918:	4b0c      	ldr	r3, [pc, #48]	; (801594c <_fflush_r+0x48>)
 801591a:	429c      	cmp	r4, r3
 801591c:	d109      	bne.n	8015932 <_fflush_r+0x2e>
 801591e:	686c      	ldr	r4, [r5, #4]
 8015920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015924:	b17b      	cbz	r3, 8015946 <_fflush_r+0x42>
 8015926:	4621      	mov	r1, r4
 8015928:	4628      	mov	r0, r5
 801592a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801592e:	f7ff bf63 	b.w	80157f8 <__sflush_r>
 8015932:	4b07      	ldr	r3, [pc, #28]	; (8015950 <_fflush_r+0x4c>)
 8015934:	429c      	cmp	r4, r3
 8015936:	d101      	bne.n	801593c <_fflush_r+0x38>
 8015938:	68ac      	ldr	r4, [r5, #8]
 801593a:	e7f1      	b.n	8015920 <_fflush_r+0x1c>
 801593c:	4b05      	ldr	r3, [pc, #20]	; (8015954 <_fflush_r+0x50>)
 801593e:	429c      	cmp	r4, r3
 8015940:	bf08      	it	eq
 8015942:	68ec      	ldreq	r4, [r5, #12]
 8015944:	e7ec      	b.n	8015920 <_fflush_r+0x1c>
 8015946:	2000      	movs	r0, #0
 8015948:	bd38      	pop	{r3, r4, r5, pc}
 801594a:	bf00      	nop
 801594c:	08018440 	.word	0x08018440
 8015950:	08018460 	.word	0x08018460
 8015954:	08018420 	.word	0x08018420

08015958 <std>:
 8015958:	2300      	movs	r3, #0
 801595a:	b510      	push	{r4, lr}
 801595c:	4604      	mov	r4, r0
 801595e:	e9c0 3300 	strd	r3, r3, [r0]
 8015962:	6083      	str	r3, [r0, #8]
 8015964:	8181      	strh	r1, [r0, #12]
 8015966:	6643      	str	r3, [r0, #100]	; 0x64
 8015968:	81c2      	strh	r2, [r0, #14]
 801596a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801596e:	6183      	str	r3, [r0, #24]
 8015970:	4619      	mov	r1, r3
 8015972:	2208      	movs	r2, #8
 8015974:	305c      	adds	r0, #92	; 0x5c
 8015976:	f7fd f9a3 	bl	8012cc0 <memset>
 801597a:	4b05      	ldr	r3, [pc, #20]	; (8015990 <std+0x38>)
 801597c:	6263      	str	r3, [r4, #36]	; 0x24
 801597e:	4b05      	ldr	r3, [pc, #20]	; (8015994 <std+0x3c>)
 8015980:	62a3      	str	r3, [r4, #40]	; 0x28
 8015982:	4b05      	ldr	r3, [pc, #20]	; (8015998 <std+0x40>)
 8015984:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015986:	4b05      	ldr	r3, [pc, #20]	; (801599c <std+0x44>)
 8015988:	6224      	str	r4, [r4, #32]
 801598a:	6323      	str	r3, [r4, #48]	; 0x30
 801598c:	bd10      	pop	{r4, pc}
 801598e:	bf00      	nop
 8015990:	08013b75 	.word	0x08013b75
 8015994:	08013b9b 	.word	0x08013b9b
 8015998:	08013bd3 	.word	0x08013bd3
 801599c:	08013bf7 	.word	0x08013bf7

080159a0 <_cleanup_r>:
 80159a0:	4901      	ldr	r1, [pc, #4]	; (80159a8 <_cleanup_r+0x8>)
 80159a2:	f000 b885 	b.w	8015ab0 <_fwalk_reent>
 80159a6:	bf00      	nop
 80159a8:	08015905 	.word	0x08015905

080159ac <__sfmoreglue>:
 80159ac:	b570      	push	{r4, r5, r6, lr}
 80159ae:	1e4a      	subs	r2, r1, #1
 80159b0:	2568      	movs	r5, #104	; 0x68
 80159b2:	4355      	muls	r5, r2
 80159b4:	460e      	mov	r6, r1
 80159b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80159ba:	f001 f8d5 	bl	8016b68 <_malloc_r>
 80159be:	4604      	mov	r4, r0
 80159c0:	b140      	cbz	r0, 80159d4 <__sfmoreglue+0x28>
 80159c2:	2100      	movs	r1, #0
 80159c4:	e9c0 1600 	strd	r1, r6, [r0]
 80159c8:	300c      	adds	r0, #12
 80159ca:	60a0      	str	r0, [r4, #8]
 80159cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80159d0:	f7fd f976 	bl	8012cc0 <memset>
 80159d4:	4620      	mov	r0, r4
 80159d6:	bd70      	pop	{r4, r5, r6, pc}

080159d8 <__sinit>:
 80159d8:	6983      	ldr	r3, [r0, #24]
 80159da:	b510      	push	{r4, lr}
 80159dc:	4604      	mov	r4, r0
 80159de:	bb33      	cbnz	r3, 8015a2e <__sinit+0x56>
 80159e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80159e4:	6503      	str	r3, [r0, #80]	; 0x50
 80159e6:	4b12      	ldr	r3, [pc, #72]	; (8015a30 <__sinit+0x58>)
 80159e8:	4a12      	ldr	r2, [pc, #72]	; (8015a34 <__sinit+0x5c>)
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	6282      	str	r2, [r0, #40]	; 0x28
 80159ee:	4298      	cmp	r0, r3
 80159f0:	bf04      	itt	eq
 80159f2:	2301      	moveq	r3, #1
 80159f4:	6183      	streq	r3, [r0, #24]
 80159f6:	f000 f81f 	bl	8015a38 <__sfp>
 80159fa:	6060      	str	r0, [r4, #4]
 80159fc:	4620      	mov	r0, r4
 80159fe:	f000 f81b 	bl	8015a38 <__sfp>
 8015a02:	60a0      	str	r0, [r4, #8]
 8015a04:	4620      	mov	r0, r4
 8015a06:	f000 f817 	bl	8015a38 <__sfp>
 8015a0a:	2200      	movs	r2, #0
 8015a0c:	60e0      	str	r0, [r4, #12]
 8015a0e:	2104      	movs	r1, #4
 8015a10:	6860      	ldr	r0, [r4, #4]
 8015a12:	f7ff ffa1 	bl	8015958 <std>
 8015a16:	2201      	movs	r2, #1
 8015a18:	2109      	movs	r1, #9
 8015a1a:	68a0      	ldr	r0, [r4, #8]
 8015a1c:	f7ff ff9c 	bl	8015958 <std>
 8015a20:	2202      	movs	r2, #2
 8015a22:	2112      	movs	r1, #18
 8015a24:	68e0      	ldr	r0, [r4, #12]
 8015a26:	f7ff ff97 	bl	8015958 <std>
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	61a3      	str	r3, [r4, #24]
 8015a2e:	bd10      	pop	{r4, pc}
 8015a30:	08018380 	.word	0x08018380
 8015a34:	080159a1 	.word	0x080159a1

08015a38 <__sfp>:
 8015a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a3a:	4b1b      	ldr	r3, [pc, #108]	; (8015aa8 <__sfp+0x70>)
 8015a3c:	681e      	ldr	r6, [r3, #0]
 8015a3e:	69b3      	ldr	r3, [r6, #24]
 8015a40:	4607      	mov	r7, r0
 8015a42:	b913      	cbnz	r3, 8015a4a <__sfp+0x12>
 8015a44:	4630      	mov	r0, r6
 8015a46:	f7ff ffc7 	bl	80159d8 <__sinit>
 8015a4a:	3648      	adds	r6, #72	; 0x48
 8015a4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015a50:	3b01      	subs	r3, #1
 8015a52:	d503      	bpl.n	8015a5c <__sfp+0x24>
 8015a54:	6833      	ldr	r3, [r6, #0]
 8015a56:	b133      	cbz	r3, 8015a66 <__sfp+0x2e>
 8015a58:	6836      	ldr	r6, [r6, #0]
 8015a5a:	e7f7      	b.n	8015a4c <__sfp+0x14>
 8015a5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015a60:	b16d      	cbz	r5, 8015a7e <__sfp+0x46>
 8015a62:	3468      	adds	r4, #104	; 0x68
 8015a64:	e7f4      	b.n	8015a50 <__sfp+0x18>
 8015a66:	2104      	movs	r1, #4
 8015a68:	4638      	mov	r0, r7
 8015a6a:	f7ff ff9f 	bl	80159ac <__sfmoreglue>
 8015a6e:	6030      	str	r0, [r6, #0]
 8015a70:	2800      	cmp	r0, #0
 8015a72:	d1f1      	bne.n	8015a58 <__sfp+0x20>
 8015a74:	230c      	movs	r3, #12
 8015a76:	603b      	str	r3, [r7, #0]
 8015a78:	4604      	mov	r4, r0
 8015a7a:	4620      	mov	r0, r4
 8015a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015a7e:	4b0b      	ldr	r3, [pc, #44]	; (8015aac <__sfp+0x74>)
 8015a80:	6665      	str	r5, [r4, #100]	; 0x64
 8015a82:	e9c4 5500 	strd	r5, r5, [r4]
 8015a86:	60a5      	str	r5, [r4, #8]
 8015a88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015a8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015a90:	2208      	movs	r2, #8
 8015a92:	4629      	mov	r1, r5
 8015a94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015a98:	f7fd f912 	bl	8012cc0 <memset>
 8015a9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015aa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015aa4:	e7e9      	b.n	8015a7a <__sfp+0x42>
 8015aa6:	bf00      	nop
 8015aa8:	08018380 	.word	0x08018380
 8015aac:	ffff0001 	.word	0xffff0001

08015ab0 <_fwalk_reent>:
 8015ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ab4:	4680      	mov	r8, r0
 8015ab6:	4689      	mov	r9, r1
 8015ab8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015abc:	2600      	movs	r6, #0
 8015abe:	b914      	cbnz	r4, 8015ac6 <_fwalk_reent+0x16>
 8015ac0:	4630      	mov	r0, r6
 8015ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ac6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8015aca:	3f01      	subs	r7, #1
 8015acc:	d501      	bpl.n	8015ad2 <_fwalk_reent+0x22>
 8015ace:	6824      	ldr	r4, [r4, #0]
 8015ad0:	e7f5      	b.n	8015abe <_fwalk_reent+0xe>
 8015ad2:	89ab      	ldrh	r3, [r5, #12]
 8015ad4:	2b01      	cmp	r3, #1
 8015ad6:	d907      	bls.n	8015ae8 <_fwalk_reent+0x38>
 8015ad8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015adc:	3301      	adds	r3, #1
 8015ade:	d003      	beq.n	8015ae8 <_fwalk_reent+0x38>
 8015ae0:	4629      	mov	r1, r5
 8015ae2:	4640      	mov	r0, r8
 8015ae4:	47c8      	blx	r9
 8015ae6:	4306      	orrs	r6, r0
 8015ae8:	3568      	adds	r5, #104	; 0x68
 8015aea:	e7ee      	b.n	8015aca <_fwalk_reent+0x1a>

08015aec <rshift>:
 8015aec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aee:	6906      	ldr	r6, [r0, #16]
 8015af0:	114b      	asrs	r3, r1, #5
 8015af2:	429e      	cmp	r6, r3
 8015af4:	f100 0414 	add.w	r4, r0, #20
 8015af8:	dd30      	ble.n	8015b5c <rshift+0x70>
 8015afa:	f011 011f 	ands.w	r1, r1, #31
 8015afe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8015b02:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8015b06:	d108      	bne.n	8015b1a <rshift+0x2e>
 8015b08:	4621      	mov	r1, r4
 8015b0a:	42b2      	cmp	r2, r6
 8015b0c:	460b      	mov	r3, r1
 8015b0e:	d211      	bcs.n	8015b34 <rshift+0x48>
 8015b10:	f852 3b04 	ldr.w	r3, [r2], #4
 8015b14:	f841 3b04 	str.w	r3, [r1], #4
 8015b18:	e7f7      	b.n	8015b0a <rshift+0x1e>
 8015b1a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8015b1e:	f1c1 0c20 	rsb	ip, r1, #32
 8015b22:	40cd      	lsrs	r5, r1
 8015b24:	3204      	adds	r2, #4
 8015b26:	4623      	mov	r3, r4
 8015b28:	42b2      	cmp	r2, r6
 8015b2a:	4617      	mov	r7, r2
 8015b2c:	d30c      	bcc.n	8015b48 <rshift+0x5c>
 8015b2e:	601d      	str	r5, [r3, #0]
 8015b30:	b105      	cbz	r5, 8015b34 <rshift+0x48>
 8015b32:	3304      	adds	r3, #4
 8015b34:	1b1a      	subs	r2, r3, r4
 8015b36:	42a3      	cmp	r3, r4
 8015b38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015b3c:	bf08      	it	eq
 8015b3e:	2300      	moveq	r3, #0
 8015b40:	6102      	str	r2, [r0, #16]
 8015b42:	bf08      	it	eq
 8015b44:	6143      	streq	r3, [r0, #20]
 8015b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015b48:	683f      	ldr	r7, [r7, #0]
 8015b4a:	fa07 f70c 	lsl.w	r7, r7, ip
 8015b4e:	433d      	orrs	r5, r7
 8015b50:	f843 5b04 	str.w	r5, [r3], #4
 8015b54:	f852 5b04 	ldr.w	r5, [r2], #4
 8015b58:	40cd      	lsrs	r5, r1
 8015b5a:	e7e5      	b.n	8015b28 <rshift+0x3c>
 8015b5c:	4623      	mov	r3, r4
 8015b5e:	e7e9      	b.n	8015b34 <rshift+0x48>

08015b60 <__hexdig_fun>:
 8015b60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015b64:	2b09      	cmp	r3, #9
 8015b66:	d802      	bhi.n	8015b6e <__hexdig_fun+0xe>
 8015b68:	3820      	subs	r0, #32
 8015b6a:	b2c0      	uxtb	r0, r0
 8015b6c:	4770      	bx	lr
 8015b6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015b72:	2b05      	cmp	r3, #5
 8015b74:	d801      	bhi.n	8015b7a <__hexdig_fun+0x1a>
 8015b76:	3847      	subs	r0, #71	; 0x47
 8015b78:	e7f7      	b.n	8015b6a <__hexdig_fun+0xa>
 8015b7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015b7e:	2b05      	cmp	r3, #5
 8015b80:	d801      	bhi.n	8015b86 <__hexdig_fun+0x26>
 8015b82:	3827      	subs	r0, #39	; 0x27
 8015b84:	e7f1      	b.n	8015b6a <__hexdig_fun+0xa>
 8015b86:	2000      	movs	r0, #0
 8015b88:	4770      	bx	lr

08015b8a <__gethex>:
 8015b8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8e:	b08b      	sub	sp, #44	; 0x2c
 8015b90:	468a      	mov	sl, r1
 8015b92:	9002      	str	r0, [sp, #8]
 8015b94:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015b96:	9306      	str	r3, [sp, #24]
 8015b98:	4690      	mov	r8, r2
 8015b9a:	f000 fadf 	bl	801615c <__localeconv_l>
 8015b9e:	6803      	ldr	r3, [r0, #0]
 8015ba0:	9303      	str	r3, [sp, #12]
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7ea fb2c 	bl	8000200 <strlen>
 8015ba8:	9b03      	ldr	r3, [sp, #12]
 8015baa:	9001      	str	r0, [sp, #4]
 8015bac:	4403      	add	r3, r0
 8015bae:	f04f 0b00 	mov.w	fp, #0
 8015bb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015bb6:	9307      	str	r3, [sp, #28]
 8015bb8:	f8da 3000 	ldr.w	r3, [sl]
 8015bbc:	3302      	adds	r3, #2
 8015bbe:	461f      	mov	r7, r3
 8015bc0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015bc4:	2830      	cmp	r0, #48	; 0x30
 8015bc6:	d06c      	beq.n	8015ca2 <__gethex+0x118>
 8015bc8:	f7ff ffca 	bl	8015b60 <__hexdig_fun>
 8015bcc:	4604      	mov	r4, r0
 8015bce:	2800      	cmp	r0, #0
 8015bd0:	d16a      	bne.n	8015ca8 <__gethex+0x11e>
 8015bd2:	9a01      	ldr	r2, [sp, #4]
 8015bd4:	9903      	ldr	r1, [sp, #12]
 8015bd6:	4638      	mov	r0, r7
 8015bd8:	f001 fe3e 	bl	8017858 <strncmp>
 8015bdc:	2800      	cmp	r0, #0
 8015bde:	d166      	bne.n	8015cae <__gethex+0x124>
 8015be0:	9b01      	ldr	r3, [sp, #4]
 8015be2:	5cf8      	ldrb	r0, [r7, r3]
 8015be4:	18fe      	adds	r6, r7, r3
 8015be6:	f7ff ffbb 	bl	8015b60 <__hexdig_fun>
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d062      	beq.n	8015cb4 <__gethex+0x12a>
 8015bee:	4633      	mov	r3, r6
 8015bf0:	7818      	ldrb	r0, [r3, #0]
 8015bf2:	2830      	cmp	r0, #48	; 0x30
 8015bf4:	461f      	mov	r7, r3
 8015bf6:	f103 0301 	add.w	r3, r3, #1
 8015bfa:	d0f9      	beq.n	8015bf0 <__gethex+0x66>
 8015bfc:	f7ff ffb0 	bl	8015b60 <__hexdig_fun>
 8015c00:	fab0 f580 	clz	r5, r0
 8015c04:	096d      	lsrs	r5, r5, #5
 8015c06:	4634      	mov	r4, r6
 8015c08:	f04f 0b01 	mov.w	fp, #1
 8015c0c:	463a      	mov	r2, r7
 8015c0e:	4616      	mov	r6, r2
 8015c10:	3201      	adds	r2, #1
 8015c12:	7830      	ldrb	r0, [r6, #0]
 8015c14:	f7ff ffa4 	bl	8015b60 <__hexdig_fun>
 8015c18:	2800      	cmp	r0, #0
 8015c1a:	d1f8      	bne.n	8015c0e <__gethex+0x84>
 8015c1c:	9a01      	ldr	r2, [sp, #4]
 8015c1e:	9903      	ldr	r1, [sp, #12]
 8015c20:	4630      	mov	r0, r6
 8015c22:	f001 fe19 	bl	8017858 <strncmp>
 8015c26:	b950      	cbnz	r0, 8015c3e <__gethex+0xb4>
 8015c28:	b954      	cbnz	r4, 8015c40 <__gethex+0xb6>
 8015c2a:	9b01      	ldr	r3, [sp, #4]
 8015c2c:	18f4      	adds	r4, r6, r3
 8015c2e:	4622      	mov	r2, r4
 8015c30:	4616      	mov	r6, r2
 8015c32:	3201      	adds	r2, #1
 8015c34:	7830      	ldrb	r0, [r6, #0]
 8015c36:	f7ff ff93 	bl	8015b60 <__hexdig_fun>
 8015c3a:	2800      	cmp	r0, #0
 8015c3c:	d1f8      	bne.n	8015c30 <__gethex+0xa6>
 8015c3e:	b10c      	cbz	r4, 8015c44 <__gethex+0xba>
 8015c40:	1ba4      	subs	r4, r4, r6
 8015c42:	00a4      	lsls	r4, r4, #2
 8015c44:	7833      	ldrb	r3, [r6, #0]
 8015c46:	2b50      	cmp	r3, #80	; 0x50
 8015c48:	d001      	beq.n	8015c4e <__gethex+0xc4>
 8015c4a:	2b70      	cmp	r3, #112	; 0x70
 8015c4c:	d140      	bne.n	8015cd0 <__gethex+0x146>
 8015c4e:	7873      	ldrb	r3, [r6, #1]
 8015c50:	2b2b      	cmp	r3, #43	; 0x2b
 8015c52:	d031      	beq.n	8015cb8 <__gethex+0x12e>
 8015c54:	2b2d      	cmp	r3, #45	; 0x2d
 8015c56:	d033      	beq.n	8015cc0 <__gethex+0x136>
 8015c58:	1c71      	adds	r1, r6, #1
 8015c5a:	f04f 0900 	mov.w	r9, #0
 8015c5e:	7808      	ldrb	r0, [r1, #0]
 8015c60:	f7ff ff7e 	bl	8015b60 <__hexdig_fun>
 8015c64:	1e43      	subs	r3, r0, #1
 8015c66:	b2db      	uxtb	r3, r3
 8015c68:	2b18      	cmp	r3, #24
 8015c6a:	d831      	bhi.n	8015cd0 <__gethex+0x146>
 8015c6c:	f1a0 0210 	sub.w	r2, r0, #16
 8015c70:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015c74:	f7ff ff74 	bl	8015b60 <__hexdig_fun>
 8015c78:	1e43      	subs	r3, r0, #1
 8015c7a:	b2db      	uxtb	r3, r3
 8015c7c:	2b18      	cmp	r3, #24
 8015c7e:	d922      	bls.n	8015cc6 <__gethex+0x13c>
 8015c80:	f1b9 0f00 	cmp.w	r9, #0
 8015c84:	d000      	beq.n	8015c88 <__gethex+0xfe>
 8015c86:	4252      	negs	r2, r2
 8015c88:	4414      	add	r4, r2
 8015c8a:	f8ca 1000 	str.w	r1, [sl]
 8015c8e:	b30d      	cbz	r5, 8015cd4 <__gethex+0x14a>
 8015c90:	f1bb 0f00 	cmp.w	fp, #0
 8015c94:	bf0c      	ite	eq
 8015c96:	2706      	moveq	r7, #6
 8015c98:	2700      	movne	r7, #0
 8015c9a:	4638      	mov	r0, r7
 8015c9c:	b00b      	add	sp, #44	; 0x2c
 8015c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ca2:	f10b 0b01 	add.w	fp, fp, #1
 8015ca6:	e78a      	b.n	8015bbe <__gethex+0x34>
 8015ca8:	2500      	movs	r5, #0
 8015caa:	462c      	mov	r4, r5
 8015cac:	e7ae      	b.n	8015c0c <__gethex+0x82>
 8015cae:	463e      	mov	r6, r7
 8015cb0:	2501      	movs	r5, #1
 8015cb2:	e7c7      	b.n	8015c44 <__gethex+0xba>
 8015cb4:	4604      	mov	r4, r0
 8015cb6:	e7fb      	b.n	8015cb0 <__gethex+0x126>
 8015cb8:	f04f 0900 	mov.w	r9, #0
 8015cbc:	1cb1      	adds	r1, r6, #2
 8015cbe:	e7ce      	b.n	8015c5e <__gethex+0xd4>
 8015cc0:	f04f 0901 	mov.w	r9, #1
 8015cc4:	e7fa      	b.n	8015cbc <__gethex+0x132>
 8015cc6:	230a      	movs	r3, #10
 8015cc8:	fb03 0202 	mla	r2, r3, r2, r0
 8015ccc:	3a10      	subs	r2, #16
 8015cce:	e7cf      	b.n	8015c70 <__gethex+0xe6>
 8015cd0:	4631      	mov	r1, r6
 8015cd2:	e7da      	b.n	8015c8a <__gethex+0x100>
 8015cd4:	1bf3      	subs	r3, r6, r7
 8015cd6:	3b01      	subs	r3, #1
 8015cd8:	4629      	mov	r1, r5
 8015cda:	2b07      	cmp	r3, #7
 8015cdc:	dc49      	bgt.n	8015d72 <__gethex+0x1e8>
 8015cde:	9802      	ldr	r0, [sp, #8]
 8015ce0:	f000 fae7 	bl	80162b2 <_Balloc>
 8015ce4:	9b01      	ldr	r3, [sp, #4]
 8015ce6:	f100 0914 	add.w	r9, r0, #20
 8015cea:	f04f 0b00 	mov.w	fp, #0
 8015cee:	f1c3 0301 	rsb	r3, r3, #1
 8015cf2:	4605      	mov	r5, r0
 8015cf4:	f8cd 9010 	str.w	r9, [sp, #16]
 8015cf8:	46da      	mov	sl, fp
 8015cfa:	9308      	str	r3, [sp, #32]
 8015cfc:	42b7      	cmp	r7, r6
 8015cfe:	d33b      	bcc.n	8015d78 <__gethex+0x1ee>
 8015d00:	9804      	ldr	r0, [sp, #16]
 8015d02:	f840 ab04 	str.w	sl, [r0], #4
 8015d06:	eba0 0009 	sub.w	r0, r0, r9
 8015d0a:	1080      	asrs	r0, r0, #2
 8015d0c:	6128      	str	r0, [r5, #16]
 8015d0e:	0147      	lsls	r7, r0, #5
 8015d10:	4650      	mov	r0, sl
 8015d12:	f000 fb92 	bl	801643a <__hi0bits>
 8015d16:	f8d8 6000 	ldr.w	r6, [r8]
 8015d1a:	1a3f      	subs	r7, r7, r0
 8015d1c:	42b7      	cmp	r7, r6
 8015d1e:	dd64      	ble.n	8015dea <__gethex+0x260>
 8015d20:	1bbf      	subs	r7, r7, r6
 8015d22:	4639      	mov	r1, r7
 8015d24:	4628      	mov	r0, r5
 8015d26:	f000 fea1 	bl	8016a6c <__any_on>
 8015d2a:	4682      	mov	sl, r0
 8015d2c:	b178      	cbz	r0, 8015d4e <__gethex+0x1c4>
 8015d2e:	1e7b      	subs	r3, r7, #1
 8015d30:	1159      	asrs	r1, r3, #5
 8015d32:	f003 021f 	and.w	r2, r3, #31
 8015d36:	f04f 0a01 	mov.w	sl, #1
 8015d3a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015d3e:	fa0a f202 	lsl.w	r2, sl, r2
 8015d42:	420a      	tst	r2, r1
 8015d44:	d003      	beq.n	8015d4e <__gethex+0x1c4>
 8015d46:	4553      	cmp	r3, sl
 8015d48:	dc46      	bgt.n	8015dd8 <__gethex+0x24e>
 8015d4a:	f04f 0a02 	mov.w	sl, #2
 8015d4e:	4639      	mov	r1, r7
 8015d50:	4628      	mov	r0, r5
 8015d52:	f7ff fecb 	bl	8015aec <rshift>
 8015d56:	443c      	add	r4, r7
 8015d58:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015d5c:	42a3      	cmp	r3, r4
 8015d5e:	da52      	bge.n	8015e06 <__gethex+0x27c>
 8015d60:	4629      	mov	r1, r5
 8015d62:	9802      	ldr	r0, [sp, #8]
 8015d64:	f000 fad9 	bl	801631a <_Bfree>
 8015d68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	6013      	str	r3, [r2, #0]
 8015d6e:	27a3      	movs	r7, #163	; 0xa3
 8015d70:	e793      	b.n	8015c9a <__gethex+0x110>
 8015d72:	3101      	adds	r1, #1
 8015d74:	105b      	asrs	r3, r3, #1
 8015d76:	e7b0      	b.n	8015cda <__gethex+0x150>
 8015d78:	1e73      	subs	r3, r6, #1
 8015d7a:	9305      	str	r3, [sp, #20]
 8015d7c:	9a07      	ldr	r2, [sp, #28]
 8015d7e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015d82:	4293      	cmp	r3, r2
 8015d84:	d018      	beq.n	8015db8 <__gethex+0x22e>
 8015d86:	f1bb 0f20 	cmp.w	fp, #32
 8015d8a:	d107      	bne.n	8015d9c <__gethex+0x212>
 8015d8c:	9b04      	ldr	r3, [sp, #16]
 8015d8e:	f8c3 a000 	str.w	sl, [r3]
 8015d92:	3304      	adds	r3, #4
 8015d94:	f04f 0a00 	mov.w	sl, #0
 8015d98:	9304      	str	r3, [sp, #16]
 8015d9a:	46d3      	mov	fp, sl
 8015d9c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015da0:	f7ff fede 	bl	8015b60 <__hexdig_fun>
 8015da4:	f000 000f 	and.w	r0, r0, #15
 8015da8:	fa00 f00b 	lsl.w	r0, r0, fp
 8015dac:	ea4a 0a00 	orr.w	sl, sl, r0
 8015db0:	f10b 0b04 	add.w	fp, fp, #4
 8015db4:	9b05      	ldr	r3, [sp, #20]
 8015db6:	e00d      	b.n	8015dd4 <__gethex+0x24a>
 8015db8:	9b05      	ldr	r3, [sp, #20]
 8015dba:	9a08      	ldr	r2, [sp, #32]
 8015dbc:	4413      	add	r3, r2
 8015dbe:	42bb      	cmp	r3, r7
 8015dc0:	d3e1      	bcc.n	8015d86 <__gethex+0x1fc>
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	9a01      	ldr	r2, [sp, #4]
 8015dc6:	9903      	ldr	r1, [sp, #12]
 8015dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8015dca:	f001 fd45 	bl	8017858 <strncmp>
 8015dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015dd0:	2800      	cmp	r0, #0
 8015dd2:	d1d8      	bne.n	8015d86 <__gethex+0x1fc>
 8015dd4:	461e      	mov	r6, r3
 8015dd6:	e791      	b.n	8015cfc <__gethex+0x172>
 8015dd8:	1eb9      	subs	r1, r7, #2
 8015dda:	4628      	mov	r0, r5
 8015ddc:	f000 fe46 	bl	8016a6c <__any_on>
 8015de0:	2800      	cmp	r0, #0
 8015de2:	d0b2      	beq.n	8015d4a <__gethex+0x1c0>
 8015de4:	f04f 0a03 	mov.w	sl, #3
 8015de8:	e7b1      	b.n	8015d4e <__gethex+0x1c4>
 8015dea:	da09      	bge.n	8015e00 <__gethex+0x276>
 8015dec:	1bf7      	subs	r7, r6, r7
 8015dee:	4629      	mov	r1, r5
 8015df0:	463a      	mov	r2, r7
 8015df2:	9802      	ldr	r0, [sp, #8]
 8015df4:	f000 fc5c 	bl	80166b0 <__lshift>
 8015df8:	1be4      	subs	r4, r4, r7
 8015dfa:	4605      	mov	r5, r0
 8015dfc:	f100 0914 	add.w	r9, r0, #20
 8015e00:	f04f 0a00 	mov.w	sl, #0
 8015e04:	e7a8      	b.n	8015d58 <__gethex+0x1ce>
 8015e06:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015e0a:	42a0      	cmp	r0, r4
 8015e0c:	dd6a      	ble.n	8015ee4 <__gethex+0x35a>
 8015e0e:	1b04      	subs	r4, r0, r4
 8015e10:	42a6      	cmp	r6, r4
 8015e12:	dc2e      	bgt.n	8015e72 <__gethex+0x2e8>
 8015e14:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015e18:	2b02      	cmp	r3, #2
 8015e1a:	d022      	beq.n	8015e62 <__gethex+0x2d8>
 8015e1c:	2b03      	cmp	r3, #3
 8015e1e:	d024      	beq.n	8015e6a <__gethex+0x2e0>
 8015e20:	2b01      	cmp	r3, #1
 8015e22:	d115      	bne.n	8015e50 <__gethex+0x2c6>
 8015e24:	42a6      	cmp	r6, r4
 8015e26:	d113      	bne.n	8015e50 <__gethex+0x2c6>
 8015e28:	2e01      	cmp	r6, #1
 8015e2a:	dc0b      	bgt.n	8015e44 <__gethex+0x2ba>
 8015e2c:	9a06      	ldr	r2, [sp, #24]
 8015e2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015e32:	6013      	str	r3, [r2, #0]
 8015e34:	2301      	movs	r3, #1
 8015e36:	612b      	str	r3, [r5, #16]
 8015e38:	f8c9 3000 	str.w	r3, [r9]
 8015e3c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e3e:	2762      	movs	r7, #98	; 0x62
 8015e40:	601d      	str	r5, [r3, #0]
 8015e42:	e72a      	b.n	8015c9a <__gethex+0x110>
 8015e44:	1e71      	subs	r1, r6, #1
 8015e46:	4628      	mov	r0, r5
 8015e48:	f000 fe10 	bl	8016a6c <__any_on>
 8015e4c:	2800      	cmp	r0, #0
 8015e4e:	d1ed      	bne.n	8015e2c <__gethex+0x2a2>
 8015e50:	4629      	mov	r1, r5
 8015e52:	9802      	ldr	r0, [sp, #8]
 8015e54:	f000 fa61 	bl	801631a <_Bfree>
 8015e58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	6013      	str	r3, [r2, #0]
 8015e5e:	2750      	movs	r7, #80	; 0x50
 8015e60:	e71b      	b.n	8015c9a <__gethex+0x110>
 8015e62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d0e1      	beq.n	8015e2c <__gethex+0x2a2>
 8015e68:	e7f2      	b.n	8015e50 <__gethex+0x2c6>
 8015e6a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d1dd      	bne.n	8015e2c <__gethex+0x2a2>
 8015e70:	e7ee      	b.n	8015e50 <__gethex+0x2c6>
 8015e72:	1e67      	subs	r7, r4, #1
 8015e74:	f1ba 0f00 	cmp.w	sl, #0
 8015e78:	d131      	bne.n	8015ede <__gethex+0x354>
 8015e7a:	b127      	cbz	r7, 8015e86 <__gethex+0x2fc>
 8015e7c:	4639      	mov	r1, r7
 8015e7e:	4628      	mov	r0, r5
 8015e80:	f000 fdf4 	bl	8016a6c <__any_on>
 8015e84:	4682      	mov	sl, r0
 8015e86:	117a      	asrs	r2, r7, #5
 8015e88:	2301      	movs	r3, #1
 8015e8a:	f007 071f 	and.w	r7, r7, #31
 8015e8e:	fa03 f707 	lsl.w	r7, r3, r7
 8015e92:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015e96:	4621      	mov	r1, r4
 8015e98:	421f      	tst	r7, r3
 8015e9a:	4628      	mov	r0, r5
 8015e9c:	bf18      	it	ne
 8015e9e:	f04a 0a02 	orrne.w	sl, sl, #2
 8015ea2:	1b36      	subs	r6, r6, r4
 8015ea4:	f7ff fe22 	bl	8015aec <rshift>
 8015ea8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015eac:	2702      	movs	r7, #2
 8015eae:	f1ba 0f00 	cmp.w	sl, #0
 8015eb2:	d048      	beq.n	8015f46 <__gethex+0x3bc>
 8015eb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015eb8:	2b02      	cmp	r3, #2
 8015eba:	d015      	beq.n	8015ee8 <__gethex+0x35e>
 8015ebc:	2b03      	cmp	r3, #3
 8015ebe:	d017      	beq.n	8015ef0 <__gethex+0x366>
 8015ec0:	2b01      	cmp	r3, #1
 8015ec2:	d109      	bne.n	8015ed8 <__gethex+0x34e>
 8015ec4:	f01a 0f02 	tst.w	sl, #2
 8015ec8:	d006      	beq.n	8015ed8 <__gethex+0x34e>
 8015eca:	f8d9 3000 	ldr.w	r3, [r9]
 8015ece:	ea4a 0a03 	orr.w	sl, sl, r3
 8015ed2:	f01a 0f01 	tst.w	sl, #1
 8015ed6:	d10e      	bne.n	8015ef6 <__gethex+0x36c>
 8015ed8:	f047 0710 	orr.w	r7, r7, #16
 8015edc:	e033      	b.n	8015f46 <__gethex+0x3bc>
 8015ede:	f04f 0a01 	mov.w	sl, #1
 8015ee2:	e7d0      	b.n	8015e86 <__gethex+0x2fc>
 8015ee4:	2701      	movs	r7, #1
 8015ee6:	e7e2      	b.n	8015eae <__gethex+0x324>
 8015ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015eea:	f1c3 0301 	rsb	r3, r3, #1
 8015eee:	9315      	str	r3, [sp, #84]	; 0x54
 8015ef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d0f0      	beq.n	8015ed8 <__gethex+0x34e>
 8015ef6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015efa:	f105 0314 	add.w	r3, r5, #20
 8015efe:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015f02:	eb03 010a 	add.w	r1, r3, sl
 8015f06:	f04f 0c00 	mov.w	ip, #0
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f10:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015f14:	d01c      	beq.n	8015f50 <__gethex+0x3c6>
 8015f16:	3201      	adds	r2, #1
 8015f18:	6002      	str	r2, [r0, #0]
 8015f1a:	2f02      	cmp	r7, #2
 8015f1c:	f105 0314 	add.w	r3, r5, #20
 8015f20:	d138      	bne.n	8015f94 <__gethex+0x40a>
 8015f22:	f8d8 2000 	ldr.w	r2, [r8]
 8015f26:	3a01      	subs	r2, #1
 8015f28:	42b2      	cmp	r2, r6
 8015f2a:	d10a      	bne.n	8015f42 <__gethex+0x3b8>
 8015f2c:	1171      	asrs	r1, r6, #5
 8015f2e:	2201      	movs	r2, #1
 8015f30:	f006 061f 	and.w	r6, r6, #31
 8015f34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015f38:	fa02 f606 	lsl.w	r6, r2, r6
 8015f3c:	421e      	tst	r6, r3
 8015f3e:	bf18      	it	ne
 8015f40:	4617      	movne	r7, r2
 8015f42:	f047 0720 	orr.w	r7, r7, #32
 8015f46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015f48:	601d      	str	r5, [r3, #0]
 8015f4a:	9b06      	ldr	r3, [sp, #24]
 8015f4c:	601c      	str	r4, [r3, #0]
 8015f4e:	e6a4      	b.n	8015c9a <__gethex+0x110>
 8015f50:	4299      	cmp	r1, r3
 8015f52:	f843 cc04 	str.w	ip, [r3, #-4]
 8015f56:	d8d8      	bhi.n	8015f0a <__gethex+0x380>
 8015f58:	68ab      	ldr	r3, [r5, #8]
 8015f5a:	4599      	cmp	r9, r3
 8015f5c:	db12      	blt.n	8015f84 <__gethex+0x3fa>
 8015f5e:	6869      	ldr	r1, [r5, #4]
 8015f60:	9802      	ldr	r0, [sp, #8]
 8015f62:	3101      	adds	r1, #1
 8015f64:	f000 f9a5 	bl	80162b2 <_Balloc>
 8015f68:	692a      	ldr	r2, [r5, #16]
 8015f6a:	3202      	adds	r2, #2
 8015f6c:	f105 010c 	add.w	r1, r5, #12
 8015f70:	4683      	mov	fp, r0
 8015f72:	0092      	lsls	r2, r2, #2
 8015f74:	300c      	adds	r0, #12
 8015f76:	f000 f991 	bl	801629c <memcpy>
 8015f7a:	4629      	mov	r1, r5
 8015f7c:	9802      	ldr	r0, [sp, #8]
 8015f7e:	f000 f9cc 	bl	801631a <_Bfree>
 8015f82:	465d      	mov	r5, fp
 8015f84:	692b      	ldr	r3, [r5, #16]
 8015f86:	1c5a      	adds	r2, r3, #1
 8015f88:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015f8c:	612a      	str	r2, [r5, #16]
 8015f8e:	2201      	movs	r2, #1
 8015f90:	615a      	str	r2, [r3, #20]
 8015f92:	e7c2      	b.n	8015f1a <__gethex+0x390>
 8015f94:	692a      	ldr	r2, [r5, #16]
 8015f96:	454a      	cmp	r2, r9
 8015f98:	dd0b      	ble.n	8015fb2 <__gethex+0x428>
 8015f9a:	2101      	movs	r1, #1
 8015f9c:	4628      	mov	r0, r5
 8015f9e:	f7ff fda5 	bl	8015aec <rshift>
 8015fa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015fa6:	3401      	adds	r4, #1
 8015fa8:	42a3      	cmp	r3, r4
 8015faa:	f6ff aed9 	blt.w	8015d60 <__gethex+0x1d6>
 8015fae:	2701      	movs	r7, #1
 8015fb0:	e7c7      	b.n	8015f42 <__gethex+0x3b8>
 8015fb2:	f016 061f 	ands.w	r6, r6, #31
 8015fb6:	d0fa      	beq.n	8015fae <__gethex+0x424>
 8015fb8:	449a      	add	sl, r3
 8015fba:	f1c6 0620 	rsb	r6, r6, #32
 8015fbe:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015fc2:	f000 fa3a 	bl	801643a <__hi0bits>
 8015fc6:	42b0      	cmp	r0, r6
 8015fc8:	dbe7      	blt.n	8015f9a <__gethex+0x410>
 8015fca:	e7f0      	b.n	8015fae <__gethex+0x424>

08015fcc <L_shift>:
 8015fcc:	f1c2 0208 	rsb	r2, r2, #8
 8015fd0:	0092      	lsls	r2, r2, #2
 8015fd2:	b570      	push	{r4, r5, r6, lr}
 8015fd4:	f1c2 0620 	rsb	r6, r2, #32
 8015fd8:	6843      	ldr	r3, [r0, #4]
 8015fda:	6804      	ldr	r4, [r0, #0]
 8015fdc:	fa03 f506 	lsl.w	r5, r3, r6
 8015fe0:	432c      	orrs	r4, r5
 8015fe2:	40d3      	lsrs	r3, r2
 8015fe4:	6004      	str	r4, [r0, #0]
 8015fe6:	f840 3f04 	str.w	r3, [r0, #4]!
 8015fea:	4288      	cmp	r0, r1
 8015fec:	d3f4      	bcc.n	8015fd8 <L_shift+0xc>
 8015fee:	bd70      	pop	{r4, r5, r6, pc}

08015ff0 <__match>:
 8015ff0:	b530      	push	{r4, r5, lr}
 8015ff2:	6803      	ldr	r3, [r0, #0]
 8015ff4:	3301      	adds	r3, #1
 8015ff6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ffa:	b914      	cbnz	r4, 8016002 <__match+0x12>
 8015ffc:	6003      	str	r3, [r0, #0]
 8015ffe:	2001      	movs	r0, #1
 8016000:	bd30      	pop	{r4, r5, pc}
 8016002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016006:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801600a:	2d19      	cmp	r5, #25
 801600c:	bf98      	it	ls
 801600e:	3220      	addls	r2, #32
 8016010:	42a2      	cmp	r2, r4
 8016012:	d0f0      	beq.n	8015ff6 <__match+0x6>
 8016014:	2000      	movs	r0, #0
 8016016:	e7f3      	b.n	8016000 <__match+0x10>

08016018 <__hexnan>:
 8016018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	680b      	ldr	r3, [r1, #0]
 801601e:	6801      	ldr	r1, [r0, #0]
 8016020:	115f      	asrs	r7, r3, #5
 8016022:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016026:	f013 031f 	ands.w	r3, r3, #31
 801602a:	b087      	sub	sp, #28
 801602c:	bf18      	it	ne
 801602e:	3704      	addne	r7, #4
 8016030:	2500      	movs	r5, #0
 8016032:	1f3e      	subs	r6, r7, #4
 8016034:	4682      	mov	sl, r0
 8016036:	4690      	mov	r8, r2
 8016038:	9301      	str	r3, [sp, #4]
 801603a:	f847 5c04 	str.w	r5, [r7, #-4]
 801603e:	46b1      	mov	r9, r6
 8016040:	4634      	mov	r4, r6
 8016042:	9502      	str	r5, [sp, #8]
 8016044:	46ab      	mov	fp, r5
 8016046:	784a      	ldrb	r2, [r1, #1]
 8016048:	1c4b      	adds	r3, r1, #1
 801604a:	9303      	str	r3, [sp, #12]
 801604c:	b342      	cbz	r2, 80160a0 <__hexnan+0x88>
 801604e:	4610      	mov	r0, r2
 8016050:	9105      	str	r1, [sp, #20]
 8016052:	9204      	str	r2, [sp, #16]
 8016054:	f7ff fd84 	bl	8015b60 <__hexdig_fun>
 8016058:	2800      	cmp	r0, #0
 801605a:	d143      	bne.n	80160e4 <__hexnan+0xcc>
 801605c:	9a04      	ldr	r2, [sp, #16]
 801605e:	9905      	ldr	r1, [sp, #20]
 8016060:	2a20      	cmp	r2, #32
 8016062:	d818      	bhi.n	8016096 <__hexnan+0x7e>
 8016064:	9b02      	ldr	r3, [sp, #8]
 8016066:	459b      	cmp	fp, r3
 8016068:	dd13      	ble.n	8016092 <__hexnan+0x7a>
 801606a:	454c      	cmp	r4, r9
 801606c:	d206      	bcs.n	801607c <__hexnan+0x64>
 801606e:	2d07      	cmp	r5, #7
 8016070:	dc04      	bgt.n	801607c <__hexnan+0x64>
 8016072:	462a      	mov	r2, r5
 8016074:	4649      	mov	r1, r9
 8016076:	4620      	mov	r0, r4
 8016078:	f7ff ffa8 	bl	8015fcc <L_shift>
 801607c:	4544      	cmp	r4, r8
 801607e:	d944      	bls.n	801610a <__hexnan+0xf2>
 8016080:	2300      	movs	r3, #0
 8016082:	f1a4 0904 	sub.w	r9, r4, #4
 8016086:	f844 3c04 	str.w	r3, [r4, #-4]
 801608a:	f8cd b008 	str.w	fp, [sp, #8]
 801608e:	464c      	mov	r4, r9
 8016090:	461d      	mov	r5, r3
 8016092:	9903      	ldr	r1, [sp, #12]
 8016094:	e7d7      	b.n	8016046 <__hexnan+0x2e>
 8016096:	2a29      	cmp	r2, #41	; 0x29
 8016098:	d14a      	bne.n	8016130 <__hexnan+0x118>
 801609a:	3102      	adds	r1, #2
 801609c:	f8ca 1000 	str.w	r1, [sl]
 80160a0:	f1bb 0f00 	cmp.w	fp, #0
 80160a4:	d044      	beq.n	8016130 <__hexnan+0x118>
 80160a6:	454c      	cmp	r4, r9
 80160a8:	d206      	bcs.n	80160b8 <__hexnan+0xa0>
 80160aa:	2d07      	cmp	r5, #7
 80160ac:	dc04      	bgt.n	80160b8 <__hexnan+0xa0>
 80160ae:	462a      	mov	r2, r5
 80160b0:	4649      	mov	r1, r9
 80160b2:	4620      	mov	r0, r4
 80160b4:	f7ff ff8a 	bl	8015fcc <L_shift>
 80160b8:	4544      	cmp	r4, r8
 80160ba:	d928      	bls.n	801610e <__hexnan+0xf6>
 80160bc:	4643      	mov	r3, r8
 80160be:	f854 2b04 	ldr.w	r2, [r4], #4
 80160c2:	f843 2b04 	str.w	r2, [r3], #4
 80160c6:	42a6      	cmp	r6, r4
 80160c8:	d2f9      	bcs.n	80160be <__hexnan+0xa6>
 80160ca:	2200      	movs	r2, #0
 80160cc:	f843 2b04 	str.w	r2, [r3], #4
 80160d0:	429e      	cmp	r6, r3
 80160d2:	d2fb      	bcs.n	80160cc <__hexnan+0xb4>
 80160d4:	6833      	ldr	r3, [r6, #0]
 80160d6:	b91b      	cbnz	r3, 80160e0 <__hexnan+0xc8>
 80160d8:	4546      	cmp	r6, r8
 80160da:	d127      	bne.n	801612c <__hexnan+0x114>
 80160dc:	2301      	movs	r3, #1
 80160de:	6033      	str	r3, [r6, #0]
 80160e0:	2005      	movs	r0, #5
 80160e2:	e026      	b.n	8016132 <__hexnan+0x11a>
 80160e4:	3501      	adds	r5, #1
 80160e6:	2d08      	cmp	r5, #8
 80160e8:	f10b 0b01 	add.w	fp, fp, #1
 80160ec:	dd06      	ble.n	80160fc <__hexnan+0xe4>
 80160ee:	4544      	cmp	r4, r8
 80160f0:	d9cf      	bls.n	8016092 <__hexnan+0x7a>
 80160f2:	2300      	movs	r3, #0
 80160f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80160f8:	2501      	movs	r5, #1
 80160fa:	3c04      	subs	r4, #4
 80160fc:	6822      	ldr	r2, [r4, #0]
 80160fe:	f000 000f 	and.w	r0, r0, #15
 8016102:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016106:	6020      	str	r0, [r4, #0]
 8016108:	e7c3      	b.n	8016092 <__hexnan+0x7a>
 801610a:	2508      	movs	r5, #8
 801610c:	e7c1      	b.n	8016092 <__hexnan+0x7a>
 801610e:	9b01      	ldr	r3, [sp, #4]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d0df      	beq.n	80160d4 <__hexnan+0xbc>
 8016114:	f04f 32ff 	mov.w	r2, #4294967295
 8016118:	f1c3 0320 	rsb	r3, r3, #32
 801611c:	fa22 f303 	lsr.w	r3, r2, r3
 8016120:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016124:	401a      	ands	r2, r3
 8016126:	f847 2c04 	str.w	r2, [r7, #-4]
 801612a:	e7d3      	b.n	80160d4 <__hexnan+0xbc>
 801612c:	3e04      	subs	r6, #4
 801612e:	e7d1      	b.n	80160d4 <__hexnan+0xbc>
 8016130:	2004      	movs	r0, #4
 8016132:	b007      	add	sp, #28
 8016134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016138 <__locale_ctype_ptr_l>:
 8016138:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801613c:	4770      	bx	lr
	...

08016140 <__locale_ctype_ptr>:
 8016140:	4b04      	ldr	r3, [pc, #16]	; (8016154 <__locale_ctype_ptr+0x14>)
 8016142:	4a05      	ldr	r2, [pc, #20]	; (8016158 <__locale_ctype_ptr+0x18>)
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	6a1b      	ldr	r3, [r3, #32]
 8016148:	2b00      	cmp	r3, #0
 801614a:	bf08      	it	eq
 801614c:	4613      	moveq	r3, r2
 801614e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016152:	4770      	bx	lr
 8016154:	2000000c 	.word	0x2000000c
 8016158:	20000070 	.word	0x20000070

0801615c <__localeconv_l>:
 801615c:	30f0      	adds	r0, #240	; 0xf0
 801615e:	4770      	bx	lr

08016160 <_localeconv_r>:
 8016160:	4b04      	ldr	r3, [pc, #16]	; (8016174 <_localeconv_r+0x14>)
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	6a18      	ldr	r0, [r3, #32]
 8016166:	4b04      	ldr	r3, [pc, #16]	; (8016178 <_localeconv_r+0x18>)
 8016168:	2800      	cmp	r0, #0
 801616a:	bf08      	it	eq
 801616c:	4618      	moveq	r0, r3
 801616e:	30f0      	adds	r0, #240	; 0xf0
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	2000000c 	.word	0x2000000c
 8016178:	20000070 	.word	0x20000070

0801617c <_lseek_r>:
 801617c:	b538      	push	{r3, r4, r5, lr}
 801617e:	4c07      	ldr	r4, [pc, #28]	; (801619c <_lseek_r+0x20>)
 8016180:	4605      	mov	r5, r0
 8016182:	4608      	mov	r0, r1
 8016184:	4611      	mov	r1, r2
 8016186:	2200      	movs	r2, #0
 8016188:	6022      	str	r2, [r4, #0]
 801618a:	461a      	mov	r2, r3
 801618c:	f7ef fb4c 	bl	8005828 <_lseek>
 8016190:	1c43      	adds	r3, r0, #1
 8016192:	d102      	bne.n	801619a <_lseek_r+0x1e>
 8016194:	6823      	ldr	r3, [r4, #0]
 8016196:	b103      	cbz	r3, 801619a <_lseek_r+0x1e>
 8016198:	602b      	str	r3, [r5, #0]
 801619a:	bd38      	pop	{r3, r4, r5, pc}
 801619c:	20023ed0 	.word	0x20023ed0

080161a0 <__swhatbuf_r>:
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	460e      	mov	r6, r1
 80161a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80161a8:	2900      	cmp	r1, #0
 80161aa:	b096      	sub	sp, #88	; 0x58
 80161ac:	4614      	mov	r4, r2
 80161ae:	461d      	mov	r5, r3
 80161b0:	da07      	bge.n	80161c2 <__swhatbuf_r+0x22>
 80161b2:	2300      	movs	r3, #0
 80161b4:	602b      	str	r3, [r5, #0]
 80161b6:	89b3      	ldrh	r3, [r6, #12]
 80161b8:	061a      	lsls	r2, r3, #24
 80161ba:	d410      	bmi.n	80161de <__swhatbuf_r+0x3e>
 80161bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80161c0:	e00e      	b.n	80161e0 <__swhatbuf_r+0x40>
 80161c2:	466a      	mov	r2, sp
 80161c4:	f001 fc2e 	bl	8017a24 <_fstat_r>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	dbf2      	blt.n	80161b2 <__swhatbuf_r+0x12>
 80161cc:	9a01      	ldr	r2, [sp, #4]
 80161ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80161d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80161d6:	425a      	negs	r2, r3
 80161d8:	415a      	adcs	r2, r3
 80161da:	602a      	str	r2, [r5, #0]
 80161dc:	e7ee      	b.n	80161bc <__swhatbuf_r+0x1c>
 80161de:	2340      	movs	r3, #64	; 0x40
 80161e0:	2000      	movs	r0, #0
 80161e2:	6023      	str	r3, [r4, #0]
 80161e4:	b016      	add	sp, #88	; 0x58
 80161e6:	bd70      	pop	{r4, r5, r6, pc}

080161e8 <__smakebuf_r>:
 80161e8:	898b      	ldrh	r3, [r1, #12]
 80161ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80161ec:	079d      	lsls	r5, r3, #30
 80161ee:	4606      	mov	r6, r0
 80161f0:	460c      	mov	r4, r1
 80161f2:	d507      	bpl.n	8016204 <__smakebuf_r+0x1c>
 80161f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80161f8:	6023      	str	r3, [r4, #0]
 80161fa:	6123      	str	r3, [r4, #16]
 80161fc:	2301      	movs	r3, #1
 80161fe:	6163      	str	r3, [r4, #20]
 8016200:	b002      	add	sp, #8
 8016202:	bd70      	pop	{r4, r5, r6, pc}
 8016204:	ab01      	add	r3, sp, #4
 8016206:	466a      	mov	r2, sp
 8016208:	f7ff ffca 	bl	80161a0 <__swhatbuf_r>
 801620c:	9900      	ldr	r1, [sp, #0]
 801620e:	4605      	mov	r5, r0
 8016210:	4630      	mov	r0, r6
 8016212:	f000 fca9 	bl	8016b68 <_malloc_r>
 8016216:	b948      	cbnz	r0, 801622c <__smakebuf_r+0x44>
 8016218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801621c:	059a      	lsls	r2, r3, #22
 801621e:	d4ef      	bmi.n	8016200 <__smakebuf_r+0x18>
 8016220:	f023 0303 	bic.w	r3, r3, #3
 8016224:	f043 0302 	orr.w	r3, r3, #2
 8016228:	81a3      	strh	r3, [r4, #12]
 801622a:	e7e3      	b.n	80161f4 <__smakebuf_r+0xc>
 801622c:	4b0d      	ldr	r3, [pc, #52]	; (8016264 <__smakebuf_r+0x7c>)
 801622e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016230:	89a3      	ldrh	r3, [r4, #12]
 8016232:	6020      	str	r0, [r4, #0]
 8016234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016238:	81a3      	strh	r3, [r4, #12]
 801623a:	9b00      	ldr	r3, [sp, #0]
 801623c:	6163      	str	r3, [r4, #20]
 801623e:	9b01      	ldr	r3, [sp, #4]
 8016240:	6120      	str	r0, [r4, #16]
 8016242:	b15b      	cbz	r3, 801625c <__smakebuf_r+0x74>
 8016244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016248:	4630      	mov	r0, r6
 801624a:	f001 fbfd 	bl	8017a48 <_isatty_r>
 801624e:	b128      	cbz	r0, 801625c <__smakebuf_r+0x74>
 8016250:	89a3      	ldrh	r3, [r4, #12]
 8016252:	f023 0303 	bic.w	r3, r3, #3
 8016256:	f043 0301 	orr.w	r3, r3, #1
 801625a:	81a3      	strh	r3, [r4, #12]
 801625c:	89a3      	ldrh	r3, [r4, #12]
 801625e:	431d      	orrs	r5, r3
 8016260:	81a5      	strh	r5, [r4, #12]
 8016262:	e7cd      	b.n	8016200 <__smakebuf_r+0x18>
 8016264:	080159a1 	.word	0x080159a1

08016268 <malloc>:
 8016268:	4b02      	ldr	r3, [pc, #8]	; (8016274 <malloc+0xc>)
 801626a:	4601      	mov	r1, r0
 801626c:	6818      	ldr	r0, [r3, #0]
 801626e:	f000 bc7b 	b.w	8016b68 <_malloc_r>
 8016272:	bf00      	nop
 8016274:	2000000c 	.word	0x2000000c

08016278 <__ascii_mbtowc>:
 8016278:	b082      	sub	sp, #8
 801627a:	b901      	cbnz	r1, 801627e <__ascii_mbtowc+0x6>
 801627c:	a901      	add	r1, sp, #4
 801627e:	b142      	cbz	r2, 8016292 <__ascii_mbtowc+0x1a>
 8016280:	b14b      	cbz	r3, 8016296 <__ascii_mbtowc+0x1e>
 8016282:	7813      	ldrb	r3, [r2, #0]
 8016284:	600b      	str	r3, [r1, #0]
 8016286:	7812      	ldrb	r2, [r2, #0]
 8016288:	1c10      	adds	r0, r2, #0
 801628a:	bf18      	it	ne
 801628c:	2001      	movne	r0, #1
 801628e:	b002      	add	sp, #8
 8016290:	4770      	bx	lr
 8016292:	4610      	mov	r0, r2
 8016294:	e7fb      	b.n	801628e <__ascii_mbtowc+0x16>
 8016296:	f06f 0001 	mvn.w	r0, #1
 801629a:	e7f8      	b.n	801628e <__ascii_mbtowc+0x16>

0801629c <memcpy>:
 801629c:	b510      	push	{r4, lr}
 801629e:	1e43      	subs	r3, r0, #1
 80162a0:	440a      	add	r2, r1
 80162a2:	4291      	cmp	r1, r2
 80162a4:	d100      	bne.n	80162a8 <memcpy+0xc>
 80162a6:	bd10      	pop	{r4, pc}
 80162a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80162b0:	e7f7      	b.n	80162a2 <memcpy+0x6>

080162b2 <_Balloc>:
 80162b2:	b570      	push	{r4, r5, r6, lr}
 80162b4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80162b6:	4604      	mov	r4, r0
 80162b8:	460e      	mov	r6, r1
 80162ba:	b93d      	cbnz	r5, 80162cc <_Balloc+0x1a>
 80162bc:	2010      	movs	r0, #16
 80162be:	f7ff ffd3 	bl	8016268 <malloc>
 80162c2:	6260      	str	r0, [r4, #36]	; 0x24
 80162c4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80162c8:	6005      	str	r5, [r0, #0]
 80162ca:	60c5      	str	r5, [r0, #12]
 80162cc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80162ce:	68eb      	ldr	r3, [r5, #12]
 80162d0:	b183      	cbz	r3, 80162f4 <_Balloc+0x42>
 80162d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80162d4:	68db      	ldr	r3, [r3, #12]
 80162d6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80162da:	b9b8      	cbnz	r0, 801630c <_Balloc+0x5a>
 80162dc:	2101      	movs	r1, #1
 80162de:	fa01 f506 	lsl.w	r5, r1, r6
 80162e2:	1d6a      	adds	r2, r5, #5
 80162e4:	0092      	lsls	r2, r2, #2
 80162e6:	4620      	mov	r0, r4
 80162e8:	f000 fbe1 	bl	8016aae <_calloc_r>
 80162ec:	b160      	cbz	r0, 8016308 <_Balloc+0x56>
 80162ee:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80162f2:	e00e      	b.n	8016312 <_Balloc+0x60>
 80162f4:	2221      	movs	r2, #33	; 0x21
 80162f6:	2104      	movs	r1, #4
 80162f8:	4620      	mov	r0, r4
 80162fa:	f000 fbd8 	bl	8016aae <_calloc_r>
 80162fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016300:	60e8      	str	r0, [r5, #12]
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d1e4      	bne.n	80162d2 <_Balloc+0x20>
 8016308:	2000      	movs	r0, #0
 801630a:	bd70      	pop	{r4, r5, r6, pc}
 801630c:	6802      	ldr	r2, [r0, #0]
 801630e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016312:	2300      	movs	r3, #0
 8016314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016318:	e7f7      	b.n	801630a <_Balloc+0x58>

0801631a <_Bfree>:
 801631a:	b570      	push	{r4, r5, r6, lr}
 801631c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801631e:	4606      	mov	r6, r0
 8016320:	460d      	mov	r5, r1
 8016322:	b93c      	cbnz	r4, 8016334 <_Bfree+0x1a>
 8016324:	2010      	movs	r0, #16
 8016326:	f7ff ff9f 	bl	8016268 <malloc>
 801632a:	6270      	str	r0, [r6, #36]	; 0x24
 801632c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016330:	6004      	str	r4, [r0, #0]
 8016332:	60c4      	str	r4, [r0, #12]
 8016334:	b13d      	cbz	r5, 8016346 <_Bfree+0x2c>
 8016336:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016338:	686a      	ldr	r2, [r5, #4]
 801633a:	68db      	ldr	r3, [r3, #12]
 801633c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016340:	6029      	str	r1, [r5, #0]
 8016342:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016346:	bd70      	pop	{r4, r5, r6, pc}

08016348 <__multadd>:
 8016348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801634c:	690d      	ldr	r5, [r1, #16]
 801634e:	461f      	mov	r7, r3
 8016350:	4606      	mov	r6, r0
 8016352:	460c      	mov	r4, r1
 8016354:	f101 0c14 	add.w	ip, r1, #20
 8016358:	2300      	movs	r3, #0
 801635a:	f8dc 0000 	ldr.w	r0, [ip]
 801635e:	b281      	uxth	r1, r0
 8016360:	fb02 7101 	mla	r1, r2, r1, r7
 8016364:	0c0f      	lsrs	r7, r1, #16
 8016366:	0c00      	lsrs	r0, r0, #16
 8016368:	fb02 7000 	mla	r0, r2, r0, r7
 801636c:	b289      	uxth	r1, r1
 801636e:	3301      	adds	r3, #1
 8016370:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016374:	429d      	cmp	r5, r3
 8016376:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801637a:	f84c 1b04 	str.w	r1, [ip], #4
 801637e:	dcec      	bgt.n	801635a <__multadd+0x12>
 8016380:	b1d7      	cbz	r7, 80163b8 <__multadd+0x70>
 8016382:	68a3      	ldr	r3, [r4, #8]
 8016384:	42ab      	cmp	r3, r5
 8016386:	dc12      	bgt.n	80163ae <__multadd+0x66>
 8016388:	6861      	ldr	r1, [r4, #4]
 801638a:	4630      	mov	r0, r6
 801638c:	3101      	adds	r1, #1
 801638e:	f7ff ff90 	bl	80162b2 <_Balloc>
 8016392:	6922      	ldr	r2, [r4, #16]
 8016394:	3202      	adds	r2, #2
 8016396:	f104 010c 	add.w	r1, r4, #12
 801639a:	4680      	mov	r8, r0
 801639c:	0092      	lsls	r2, r2, #2
 801639e:	300c      	adds	r0, #12
 80163a0:	f7ff ff7c 	bl	801629c <memcpy>
 80163a4:	4621      	mov	r1, r4
 80163a6:	4630      	mov	r0, r6
 80163a8:	f7ff ffb7 	bl	801631a <_Bfree>
 80163ac:	4644      	mov	r4, r8
 80163ae:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80163b2:	3501      	adds	r5, #1
 80163b4:	615f      	str	r7, [r3, #20]
 80163b6:	6125      	str	r5, [r4, #16]
 80163b8:	4620      	mov	r0, r4
 80163ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080163be <__s2b>:
 80163be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163c2:	460c      	mov	r4, r1
 80163c4:	4615      	mov	r5, r2
 80163c6:	461f      	mov	r7, r3
 80163c8:	2209      	movs	r2, #9
 80163ca:	3308      	adds	r3, #8
 80163cc:	4606      	mov	r6, r0
 80163ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80163d2:	2100      	movs	r1, #0
 80163d4:	2201      	movs	r2, #1
 80163d6:	429a      	cmp	r2, r3
 80163d8:	db20      	blt.n	801641c <__s2b+0x5e>
 80163da:	4630      	mov	r0, r6
 80163dc:	f7ff ff69 	bl	80162b2 <_Balloc>
 80163e0:	9b08      	ldr	r3, [sp, #32]
 80163e2:	6143      	str	r3, [r0, #20]
 80163e4:	2d09      	cmp	r5, #9
 80163e6:	f04f 0301 	mov.w	r3, #1
 80163ea:	6103      	str	r3, [r0, #16]
 80163ec:	dd19      	ble.n	8016422 <__s2b+0x64>
 80163ee:	f104 0809 	add.w	r8, r4, #9
 80163f2:	46c1      	mov	r9, r8
 80163f4:	442c      	add	r4, r5
 80163f6:	f819 3b01 	ldrb.w	r3, [r9], #1
 80163fa:	4601      	mov	r1, r0
 80163fc:	3b30      	subs	r3, #48	; 0x30
 80163fe:	220a      	movs	r2, #10
 8016400:	4630      	mov	r0, r6
 8016402:	f7ff ffa1 	bl	8016348 <__multadd>
 8016406:	45a1      	cmp	r9, r4
 8016408:	d1f5      	bne.n	80163f6 <__s2b+0x38>
 801640a:	eb08 0405 	add.w	r4, r8, r5
 801640e:	3c08      	subs	r4, #8
 8016410:	1b2d      	subs	r5, r5, r4
 8016412:	1963      	adds	r3, r4, r5
 8016414:	42bb      	cmp	r3, r7
 8016416:	db07      	blt.n	8016428 <__s2b+0x6a>
 8016418:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801641c:	0052      	lsls	r2, r2, #1
 801641e:	3101      	adds	r1, #1
 8016420:	e7d9      	b.n	80163d6 <__s2b+0x18>
 8016422:	340a      	adds	r4, #10
 8016424:	2509      	movs	r5, #9
 8016426:	e7f3      	b.n	8016410 <__s2b+0x52>
 8016428:	f814 3b01 	ldrb.w	r3, [r4], #1
 801642c:	4601      	mov	r1, r0
 801642e:	3b30      	subs	r3, #48	; 0x30
 8016430:	220a      	movs	r2, #10
 8016432:	4630      	mov	r0, r6
 8016434:	f7ff ff88 	bl	8016348 <__multadd>
 8016438:	e7eb      	b.n	8016412 <__s2b+0x54>

0801643a <__hi0bits>:
 801643a:	0c02      	lsrs	r2, r0, #16
 801643c:	0412      	lsls	r2, r2, #16
 801643e:	4603      	mov	r3, r0
 8016440:	b9b2      	cbnz	r2, 8016470 <__hi0bits+0x36>
 8016442:	0403      	lsls	r3, r0, #16
 8016444:	2010      	movs	r0, #16
 8016446:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801644a:	bf04      	itt	eq
 801644c:	021b      	lsleq	r3, r3, #8
 801644e:	3008      	addeq	r0, #8
 8016450:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016454:	bf04      	itt	eq
 8016456:	011b      	lsleq	r3, r3, #4
 8016458:	3004      	addeq	r0, #4
 801645a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801645e:	bf04      	itt	eq
 8016460:	009b      	lsleq	r3, r3, #2
 8016462:	3002      	addeq	r0, #2
 8016464:	2b00      	cmp	r3, #0
 8016466:	db06      	blt.n	8016476 <__hi0bits+0x3c>
 8016468:	005b      	lsls	r3, r3, #1
 801646a:	d503      	bpl.n	8016474 <__hi0bits+0x3a>
 801646c:	3001      	adds	r0, #1
 801646e:	4770      	bx	lr
 8016470:	2000      	movs	r0, #0
 8016472:	e7e8      	b.n	8016446 <__hi0bits+0xc>
 8016474:	2020      	movs	r0, #32
 8016476:	4770      	bx	lr

08016478 <__lo0bits>:
 8016478:	6803      	ldr	r3, [r0, #0]
 801647a:	f013 0207 	ands.w	r2, r3, #7
 801647e:	4601      	mov	r1, r0
 8016480:	d00b      	beq.n	801649a <__lo0bits+0x22>
 8016482:	07da      	lsls	r2, r3, #31
 8016484:	d423      	bmi.n	80164ce <__lo0bits+0x56>
 8016486:	0798      	lsls	r0, r3, #30
 8016488:	bf49      	itett	mi
 801648a:	085b      	lsrmi	r3, r3, #1
 801648c:	089b      	lsrpl	r3, r3, #2
 801648e:	2001      	movmi	r0, #1
 8016490:	600b      	strmi	r3, [r1, #0]
 8016492:	bf5c      	itt	pl
 8016494:	600b      	strpl	r3, [r1, #0]
 8016496:	2002      	movpl	r0, #2
 8016498:	4770      	bx	lr
 801649a:	b298      	uxth	r0, r3
 801649c:	b9a8      	cbnz	r0, 80164ca <__lo0bits+0x52>
 801649e:	0c1b      	lsrs	r3, r3, #16
 80164a0:	2010      	movs	r0, #16
 80164a2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80164a6:	bf04      	itt	eq
 80164a8:	0a1b      	lsreq	r3, r3, #8
 80164aa:	3008      	addeq	r0, #8
 80164ac:	071a      	lsls	r2, r3, #28
 80164ae:	bf04      	itt	eq
 80164b0:	091b      	lsreq	r3, r3, #4
 80164b2:	3004      	addeq	r0, #4
 80164b4:	079a      	lsls	r2, r3, #30
 80164b6:	bf04      	itt	eq
 80164b8:	089b      	lsreq	r3, r3, #2
 80164ba:	3002      	addeq	r0, #2
 80164bc:	07da      	lsls	r2, r3, #31
 80164be:	d402      	bmi.n	80164c6 <__lo0bits+0x4e>
 80164c0:	085b      	lsrs	r3, r3, #1
 80164c2:	d006      	beq.n	80164d2 <__lo0bits+0x5a>
 80164c4:	3001      	adds	r0, #1
 80164c6:	600b      	str	r3, [r1, #0]
 80164c8:	4770      	bx	lr
 80164ca:	4610      	mov	r0, r2
 80164cc:	e7e9      	b.n	80164a2 <__lo0bits+0x2a>
 80164ce:	2000      	movs	r0, #0
 80164d0:	4770      	bx	lr
 80164d2:	2020      	movs	r0, #32
 80164d4:	4770      	bx	lr

080164d6 <__i2b>:
 80164d6:	b510      	push	{r4, lr}
 80164d8:	460c      	mov	r4, r1
 80164da:	2101      	movs	r1, #1
 80164dc:	f7ff fee9 	bl	80162b2 <_Balloc>
 80164e0:	2201      	movs	r2, #1
 80164e2:	6144      	str	r4, [r0, #20]
 80164e4:	6102      	str	r2, [r0, #16]
 80164e6:	bd10      	pop	{r4, pc}

080164e8 <__multiply>:
 80164e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ec:	4614      	mov	r4, r2
 80164ee:	690a      	ldr	r2, [r1, #16]
 80164f0:	6923      	ldr	r3, [r4, #16]
 80164f2:	429a      	cmp	r2, r3
 80164f4:	bfb8      	it	lt
 80164f6:	460b      	movlt	r3, r1
 80164f8:	4688      	mov	r8, r1
 80164fa:	bfbc      	itt	lt
 80164fc:	46a0      	movlt	r8, r4
 80164fe:	461c      	movlt	r4, r3
 8016500:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016504:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016508:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801650c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016510:	eb07 0609 	add.w	r6, r7, r9
 8016514:	42b3      	cmp	r3, r6
 8016516:	bfb8      	it	lt
 8016518:	3101      	addlt	r1, #1
 801651a:	f7ff feca 	bl	80162b2 <_Balloc>
 801651e:	f100 0514 	add.w	r5, r0, #20
 8016522:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016526:	462b      	mov	r3, r5
 8016528:	2200      	movs	r2, #0
 801652a:	4573      	cmp	r3, lr
 801652c:	d316      	bcc.n	801655c <__multiply+0x74>
 801652e:	f104 0214 	add.w	r2, r4, #20
 8016532:	f108 0114 	add.w	r1, r8, #20
 8016536:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801653a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801653e:	9300      	str	r3, [sp, #0]
 8016540:	9b00      	ldr	r3, [sp, #0]
 8016542:	9201      	str	r2, [sp, #4]
 8016544:	4293      	cmp	r3, r2
 8016546:	d80c      	bhi.n	8016562 <__multiply+0x7a>
 8016548:	2e00      	cmp	r6, #0
 801654a:	dd03      	ble.n	8016554 <__multiply+0x6c>
 801654c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016550:	2b00      	cmp	r3, #0
 8016552:	d05d      	beq.n	8016610 <__multiply+0x128>
 8016554:	6106      	str	r6, [r0, #16]
 8016556:	b003      	add	sp, #12
 8016558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801655c:	f843 2b04 	str.w	r2, [r3], #4
 8016560:	e7e3      	b.n	801652a <__multiply+0x42>
 8016562:	f8b2 b000 	ldrh.w	fp, [r2]
 8016566:	f1bb 0f00 	cmp.w	fp, #0
 801656a:	d023      	beq.n	80165b4 <__multiply+0xcc>
 801656c:	4689      	mov	r9, r1
 801656e:	46ac      	mov	ip, r5
 8016570:	f04f 0800 	mov.w	r8, #0
 8016574:	f859 4b04 	ldr.w	r4, [r9], #4
 8016578:	f8dc a000 	ldr.w	sl, [ip]
 801657c:	b2a3      	uxth	r3, r4
 801657e:	fa1f fa8a 	uxth.w	sl, sl
 8016582:	fb0b a303 	mla	r3, fp, r3, sl
 8016586:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801658a:	f8dc 4000 	ldr.w	r4, [ip]
 801658e:	4443      	add	r3, r8
 8016590:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016594:	fb0b 840a 	mla	r4, fp, sl, r8
 8016598:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801659c:	46e2      	mov	sl, ip
 801659e:	b29b      	uxth	r3, r3
 80165a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80165a4:	454f      	cmp	r7, r9
 80165a6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80165aa:	f84a 3b04 	str.w	r3, [sl], #4
 80165ae:	d82b      	bhi.n	8016608 <__multiply+0x120>
 80165b0:	f8cc 8004 	str.w	r8, [ip, #4]
 80165b4:	9b01      	ldr	r3, [sp, #4]
 80165b6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80165ba:	3204      	adds	r2, #4
 80165bc:	f1ba 0f00 	cmp.w	sl, #0
 80165c0:	d020      	beq.n	8016604 <__multiply+0x11c>
 80165c2:	682b      	ldr	r3, [r5, #0]
 80165c4:	4689      	mov	r9, r1
 80165c6:	46a8      	mov	r8, r5
 80165c8:	f04f 0b00 	mov.w	fp, #0
 80165cc:	f8b9 c000 	ldrh.w	ip, [r9]
 80165d0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80165d4:	fb0a 440c 	mla	r4, sl, ip, r4
 80165d8:	445c      	add	r4, fp
 80165da:	46c4      	mov	ip, r8
 80165dc:	b29b      	uxth	r3, r3
 80165de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80165e2:	f84c 3b04 	str.w	r3, [ip], #4
 80165e6:	f859 3b04 	ldr.w	r3, [r9], #4
 80165ea:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80165ee:	0c1b      	lsrs	r3, r3, #16
 80165f0:	fb0a b303 	mla	r3, sl, r3, fp
 80165f4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80165f8:	454f      	cmp	r7, r9
 80165fa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80165fe:	d805      	bhi.n	801660c <__multiply+0x124>
 8016600:	f8c8 3004 	str.w	r3, [r8, #4]
 8016604:	3504      	adds	r5, #4
 8016606:	e79b      	b.n	8016540 <__multiply+0x58>
 8016608:	46d4      	mov	ip, sl
 801660a:	e7b3      	b.n	8016574 <__multiply+0x8c>
 801660c:	46e0      	mov	r8, ip
 801660e:	e7dd      	b.n	80165cc <__multiply+0xe4>
 8016610:	3e01      	subs	r6, #1
 8016612:	e799      	b.n	8016548 <__multiply+0x60>

08016614 <__pow5mult>:
 8016614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016618:	4615      	mov	r5, r2
 801661a:	f012 0203 	ands.w	r2, r2, #3
 801661e:	4606      	mov	r6, r0
 8016620:	460f      	mov	r7, r1
 8016622:	d007      	beq.n	8016634 <__pow5mult+0x20>
 8016624:	3a01      	subs	r2, #1
 8016626:	4c21      	ldr	r4, [pc, #132]	; (80166ac <__pow5mult+0x98>)
 8016628:	2300      	movs	r3, #0
 801662a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801662e:	f7ff fe8b 	bl	8016348 <__multadd>
 8016632:	4607      	mov	r7, r0
 8016634:	10ad      	asrs	r5, r5, #2
 8016636:	d035      	beq.n	80166a4 <__pow5mult+0x90>
 8016638:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801663a:	b93c      	cbnz	r4, 801664c <__pow5mult+0x38>
 801663c:	2010      	movs	r0, #16
 801663e:	f7ff fe13 	bl	8016268 <malloc>
 8016642:	6270      	str	r0, [r6, #36]	; 0x24
 8016644:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016648:	6004      	str	r4, [r0, #0]
 801664a:	60c4      	str	r4, [r0, #12]
 801664c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016650:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8016654:	b94c      	cbnz	r4, 801666a <__pow5mult+0x56>
 8016656:	f240 2171 	movw	r1, #625	; 0x271
 801665a:	4630      	mov	r0, r6
 801665c:	f7ff ff3b 	bl	80164d6 <__i2b>
 8016660:	2300      	movs	r3, #0
 8016662:	f8c8 0008 	str.w	r0, [r8, #8]
 8016666:	4604      	mov	r4, r0
 8016668:	6003      	str	r3, [r0, #0]
 801666a:	f04f 0800 	mov.w	r8, #0
 801666e:	07eb      	lsls	r3, r5, #31
 8016670:	d50a      	bpl.n	8016688 <__pow5mult+0x74>
 8016672:	4639      	mov	r1, r7
 8016674:	4622      	mov	r2, r4
 8016676:	4630      	mov	r0, r6
 8016678:	f7ff ff36 	bl	80164e8 <__multiply>
 801667c:	4639      	mov	r1, r7
 801667e:	4681      	mov	r9, r0
 8016680:	4630      	mov	r0, r6
 8016682:	f7ff fe4a 	bl	801631a <_Bfree>
 8016686:	464f      	mov	r7, r9
 8016688:	106d      	asrs	r5, r5, #1
 801668a:	d00b      	beq.n	80166a4 <__pow5mult+0x90>
 801668c:	6820      	ldr	r0, [r4, #0]
 801668e:	b938      	cbnz	r0, 80166a0 <__pow5mult+0x8c>
 8016690:	4622      	mov	r2, r4
 8016692:	4621      	mov	r1, r4
 8016694:	4630      	mov	r0, r6
 8016696:	f7ff ff27 	bl	80164e8 <__multiply>
 801669a:	6020      	str	r0, [r4, #0]
 801669c:	f8c0 8000 	str.w	r8, [r0]
 80166a0:	4604      	mov	r4, r0
 80166a2:	e7e4      	b.n	801666e <__pow5mult+0x5a>
 80166a4:	4638      	mov	r0, r7
 80166a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166aa:	bf00      	nop
 80166ac:	08018580 	.word	0x08018580

080166b0 <__lshift>:
 80166b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166b4:	460c      	mov	r4, r1
 80166b6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80166ba:	6923      	ldr	r3, [r4, #16]
 80166bc:	6849      	ldr	r1, [r1, #4]
 80166be:	eb0a 0903 	add.w	r9, sl, r3
 80166c2:	68a3      	ldr	r3, [r4, #8]
 80166c4:	4607      	mov	r7, r0
 80166c6:	4616      	mov	r6, r2
 80166c8:	f109 0501 	add.w	r5, r9, #1
 80166cc:	42ab      	cmp	r3, r5
 80166ce:	db32      	blt.n	8016736 <__lshift+0x86>
 80166d0:	4638      	mov	r0, r7
 80166d2:	f7ff fdee 	bl	80162b2 <_Balloc>
 80166d6:	2300      	movs	r3, #0
 80166d8:	4680      	mov	r8, r0
 80166da:	f100 0114 	add.w	r1, r0, #20
 80166de:	461a      	mov	r2, r3
 80166e0:	4553      	cmp	r3, sl
 80166e2:	db2b      	blt.n	801673c <__lshift+0x8c>
 80166e4:	6920      	ldr	r0, [r4, #16]
 80166e6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80166ea:	f104 0314 	add.w	r3, r4, #20
 80166ee:	f016 021f 	ands.w	r2, r6, #31
 80166f2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80166f6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80166fa:	d025      	beq.n	8016748 <__lshift+0x98>
 80166fc:	f1c2 0e20 	rsb	lr, r2, #32
 8016700:	2000      	movs	r0, #0
 8016702:	681e      	ldr	r6, [r3, #0]
 8016704:	468a      	mov	sl, r1
 8016706:	4096      	lsls	r6, r2
 8016708:	4330      	orrs	r0, r6
 801670a:	f84a 0b04 	str.w	r0, [sl], #4
 801670e:	f853 0b04 	ldr.w	r0, [r3], #4
 8016712:	459c      	cmp	ip, r3
 8016714:	fa20 f00e 	lsr.w	r0, r0, lr
 8016718:	d814      	bhi.n	8016744 <__lshift+0x94>
 801671a:	6048      	str	r0, [r1, #4]
 801671c:	b108      	cbz	r0, 8016722 <__lshift+0x72>
 801671e:	f109 0502 	add.w	r5, r9, #2
 8016722:	3d01      	subs	r5, #1
 8016724:	4638      	mov	r0, r7
 8016726:	f8c8 5010 	str.w	r5, [r8, #16]
 801672a:	4621      	mov	r1, r4
 801672c:	f7ff fdf5 	bl	801631a <_Bfree>
 8016730:	4640      	mov	r0, r8
 8016732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016736:	3101      	adds	r1, #1
 8016738:	005b      	lsls	r3, r3, #1
 801673a:	e7c7      	b.n	80166cc <__lshift+0x1c>
 801673c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016740:	3301      	adds	r3, #1
 8016742:	e7cd      	b.n	80166e0 <__lshift+0x30>
 8016744:	4651      	mov	r1, sl
 8016746:	e7dc      	b.n	8016702 <__lshift+0x52>
 8016748:	3904      	subs	r1, #4
 801674a:	f853 2b04 	ldr.w	r2, [r3], #4
 801674e:	f841 2f04 	str.w	r2, [r1, #4]!
 8016752:	459c      	cmp	ip, r3
 8016754:	d8f9      	bhi.n	801674a <__lshift+0x9a>
 8016756:	e7e4      	b.n	8016722 <__lshift+0x72>

08016758 <__mcmp>:
 8016758:	6903      	ldr	r3, [r0, #16]
 801675a:	690a      	ldr	r2, [r1, #16]
 801675c:	1a9b      	subs	r3, r3, r2
 801675e:	b530      	push	{r4, r5, lr}
 8016760:	d10c      	bne.n	801677c <__mcmp+0x24>
 8016762:	0092      	lsls	r2, r2, #2
 8016764:	3014      	adds	r0, #20
 8016766:	3114      	adds	r1, #20
 8016768:	1884      	adds	r4, r0, r2
 801676a:	4411      	add	r1, r2
 801676c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016774:	4295      	cmp	r5, r2
 8016776:	d003      	beq.n	8016780 <__mcmp+0x28>
 8016778:	d305      	bcc.n	8016786 <__mcmp+0x2e>
 801677a:	2301      	movs	r3, #1
 801677c:	4618      	mov	r0, r3
 801677e:	bd30      	pop	{r4, r5, pc}
 8016780:	42a0      	cmp	r0, r4
 8016782:	d3f3      	bcc.n	801676c <__mcmp+0x14>
 8016784:	e7fa      	b.n	801677c <__mcmp+0x24>
 8016786:	f04f 33ff 	mov.w	r3, #4294967295
 801678a:	e7f7      	b.n	801677c <__mcmp+0x24>

0801678c <__mdiff>:
 801678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016790:	460d      	mov	r5, r1
 8016792:	4607      	mov	r7, r0
 8016794:	4611      	mov	r1, r2
 8016796:	4628      	mov	r0, r5
 8016798:	4614      	mov	r4, r2
 801679a:	f7ff ffdd 	bl	8016758 <__mcmp>
 801679e:	1e06      	subs	r6, r0, #0
 80167a0:	d108      	bne.n	80167b4 <__mdiff+0x28>
 80167a2:	4631      	mov	r1, r6
 80167a4:	4638      	mov	r0, r7
 80167a6:	f7ff fd84 	bl	80162b2 <_Balloc>
 80167aa:	2301      	movs	r3, #1
 80167ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80167b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167b4:	bfa4      	itt	ge
 80167b6:	4623      	movge	r3, r4
 80167b8:	462c      	movge	r4, r5
 80167ba:	4638      	mov	r0, r7
 80167bc:	6861      	ldr	r1, [r4, #4]
 80167be:	bfa6      	itte	ge
 80167c0:	461d      	movge	r5, r3
 80167c2:	2600      	movge	r6, #0
 80167c4:	2601      	movlt	r6, #1
 80167c6:	f7ff fd74 	bl	80162b2 <_Balloc>
 80167ca:	692b      	ldr	r3, [r5, #16]
 80167cc:	60c6      	str	r6, [r0, #12]
 80167ce:	6926      	ldr	r6, [r4, #16]
 80167d0:	f105 0914 	add.w	r9, r5, #20
 80167d4:	f104 0214 	add.w	r2, r4, #20
 80167d8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80167dc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80167e0:	f100 0514 	add.w	r5, r0, #20
 80167e4:	f04f 0e00 	mov.w	lr, #0
 80167e8:	f852 ab04 	ldr.w	sl, [r2], #4
 80167ec:	f859 4b04 	ldr.w	r4, [r9], #4
 80167f0:	fa1e f18a 	uxtah	r1, lr, sl
 80167f4:	b2a3      	uxth	r3, r4
 80167f6:	1ac9      	subs	r1, r1, r3
 80167f8:	0c23      	lsrs	r3, r4, #16
 80167fa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80167fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016802:	b289      	uxth	r1, r1
 8016804:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016808:	45c8      	cmp	r8, r9
 801680a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801680e:	4694      	mov	ip, r2
 8016810:	f845 3b04 	str.w	r3, [r5], #4
 8016814:	d8e8      	bhi.n	80167e8 <__mdiff+0x5c>
 8016816:	45bc      	cmp	ip, r7
 8016818:	d304      	bcc.n	8016824 <__mdiff+0x98>
 801681a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801681e:	b183      	cbz	r3, 8016842 <__mdiff+0xb6>
 8016820:	6106      	str	r6, [r0, #16]
 8016822:	e7c5      	b.n	80167b0 <__mdiff+0x24>
 8016824:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016828:	fa1e f381 	uxtah	r3, lr, r1
 801682c:	141a      	asrs	r2, r3, #16
 801682e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016832:	b29b      	uxth	r3, r3
 8016834:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016838:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801683c:	f845 3b04 	str.w	r3, [r5], #4
 8016840:	e7e9      	b.n	8016816 <__mdiff+0x8a>
 8016842:	3e01      	subs	r6, #1
 8016844:	e7e9      	b.n	801681a <__mdiff+0x8e>
	...

08016848 <__ulp>:
 8016848:	4b12      	ldr	r3, [pc, #72]	; (8016894 <__ulp+0x4c>)
 801684a:	ee10 2a90 	vmov	r2, s1
 801684e:	401a      	ands	r2, r3
 8016850:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8016854:	2b00      	cmp	r3, #0
 8016856:	dd04      	ble.n	8016862 <__ulp+0x1a>
 8016858:	2000      	movs	r0, #0
 801685a:	4619      	mov	r1, r3
 801685c:	ec41 0b10 	vmov	d0, r0, r1
 8016860:	4770      	bx	lr
 8016862:	425b      	negs	r3, r3
 8016864:	151b      	asrs	r3, r3, #20
 8016866:	2b13      	cmp	r3, #19
 8016868:	f04f 0000 	mov.w	r0, #0
 801686c:	f04f 0100 	mov.w	r1, #0
 8016870:	dc04      	bgt.n	801687c <__ulp+0x34>
 8016872:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016876:	fa42 f103 	asr.w	r1, r2, r3
 801687a:	e7ef      	b.n	801685c <__ulp+0x14>
 801687c:	3b14      	subs	r3, #20
 801687e:	2b1e      	cmp	r3, #30
 8016880:	f04f 0201 	mov.w	r2, #1
 8016884:	bfda      	itte	le
 8016886:	f1c3 031f 	rsble	r3, r3, #31
 801688a:	fa02 f303 	lslle.w	r3, r2, r3
 801688e:	4613      	movgt	r3, r2
 8016890:	4618      	mov	r0, r3
 8016892:	e7e3      	b.n	801685c <__ulp+0x14>
 8016894:	7ff00000 	.word	0x7ff00000

08016898 <__b2d>:
 8016898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801689a:	6905      	ldr	r5, [r0, #16]
 801689c:	f100 0714 	add.w	r7, r0, #20
 80168a0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80168a4:	1f2e      	subs	r6, r5, #4
 80168a6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80168aa:	4620      	mov	r0, r4
 80168ac:	f7ff fdc5 	bl	801643a <__hi0bits>
 80168b0:	f1c0 0320 	rsb	r3, r0, #32
 80168b4:	280a      	cmp	r0, #10
 80168b6:	600b      	str	r3, [r1, #0]
 80168b8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016930 <__b2d+0x98>
 80168bc:	dc14      	bgt.n	80168e8 <__b2d+0x50>
 80168be:	f1c0 0e0b 	rsb	lr, r0, #11
 80168c2:	fa24 f10e 	lsr.w	r1, r4, lr
 80168c6:	42b7      	cmp	r7, r6
 80168c8:	ea41 030c 	orr.w	r3, r1, ip
 80168cc:	bf34      	ite	cc
 80168ce:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80168d2:	2100      	movcs	r1, #0
 80168d4:	3015      	adds	r0, #21
 80168d6:	fa04 f000 	lsl.w	r0, r4, r0
 80168da:	fa21 f10e 	lsr.w	r1, r1, lr
 80168de:	ea40 0201 	orr.w	r2, r0, r1
 80168e2:	ec43 2b10 	vmov	d0, r2, r3
 80168e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168e8:	42b7      	cmp	r7, r6
 80168ea:	bf3a      	itte	cc
 80168ec:	f1a5 0608 	subcc.w	r6, r5, #8
 80168f0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80168f4:	2100      	movcs	r1, #0
 80168f6:	380b      	subs	r0, #11
 80168f8:	d015      	beq.n	8016926 <__b2d+0x8e>
 80168fa:	4084      	lsls	r4, r0
 80168fc:	f1c0 0520 	rsb	r5, r0, #32
 8016900:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8016904:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8016908:	42be      	cmp	r6, r7
 801690a:	fa21 fc05 	lsr.w	ip, r1, r5
 801690e:	ea44 030c 	orr.w	r3, r4, ip
 8016912:	bf8c      	ite	hi
 8016914:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016918:	2400      	movls	r4, #0
 801691a:	fa01 f000 	lsl.w	r0, r1, r0
 801691e:	40ec      	lsrs	r4, r5
 8016920:	ea40 0204 	orr.w	r2, r0, r4
 8016924:	e7dd      	b.n	80168e2 <__b2d+0x4a>
 8016926:	ea44 030c 	orr.w	r3, r4, ip
 801692a:	460a      	mov	r2, r1
 801692c:	e7d9      	b.n	80168e2 <__b2d+0x4a>
 801692e:	bf00      	nop
 8016930:	3ff00000 	.word	0x3ff00000

08016934 <__d2b>:
 8016934:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016938:	460e      	mov	r6, r1
 801693a:	2101      	movs	r1, #1
 801693c:	ec59 8b10 	vmov	r8, r9, d0
 8016940:	4615      	mov	r5, r2
 8016942:	f7ff fcb6 	bl	80162b2 <_Balloc>
 8016946:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801694a:	4607      	mov	r7, r0
 801694c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016950:	bb34      	cbnz	r4, 80169a0 <__d2b+0x6c>
 8016952:	9301      	str	r3, [sp, #4]
 8016954:	f1b8 0300 	subs.w	r3, r8, #0
 8016958:	d027      	beq.n	80169aa <__d2b+0x76>
 801695a:	a802      	add	r0, sp, #8
 801695c:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016960:	f7ff fd8a 	bl	8016478 <__lo0bits>
 8016964:	9900      	ldr	r1, [sp, #0]
 8016966:	b1f0      	cbz	r0, 80169a6 <__d2b+0x72>
 8016968:	9a01      	ldr	r2, [sp, #4]
 801696a:	f1c0 0320 	rsb	r3, r0, #32
 801696e:	fa02 f303 	lsl.w	r3, r2, r3
 8016972:	430b      	orrs	r3, r1
 8016974:	40c2      	lsrs	r2, r0
 8016976:	617b      	str	r3, [r7, #20]
 8016978:	9201      	str	r2, [sp, #4]
 801697a:	9b01      	ldr	r3, [sp, #4]
 801697c:	61bb      	str	r3, [r7, #24]
 801697e:	2b00      	cmp	r3, #0
 8016980:	bf14      	ite	ne
 8016982:	2102      	movne	r1, #2
 8016984:	2101      	moveq	r1, #1
 8016986:	6139      	str	r1, [r7, #16]
 8016988:	b1c4      	cbz	r4, 80169bc <__d2b+0x88>
 801698a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801698e:	4404      	add	r4, r0
 8016990:	6034      	str	r4, [r6, #0]
 8016992:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016996:	6028      	str	r0, [r5, #0]
 8016998:	4638      	mov	r0, r7
 801699a:	b003      	add	sp, #12
 801699c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80169a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80169a4:	e7d5      	b.n	8016952 <__d2b+0x1e>
 80169a6:	6179      	str	r1, [r7, #20]
 80169a8:	e7e7      	b.n	801697a <__d2b+0x46>
 80169aa:	a801      	add	r0, sp, #4
 80169ac:	f7ff fd64 	bl	8016478 <__lo0bits>
 80169b0:	9b01      	ldr	r3, [sp, #4]
 80169b2:	617b      	str	r3, [r7, #20]
 80169b4:	2101      	movs	r1, #1
 80169b6:	6139      	str	r1, [r7, #16]
 80169b8:	3020      	adds	r0, #32
 80169ba:	e7e5      	b.n	8016988 <__d2b+0x54>
 80169bc:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80169c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80169c4:	6030      	str	r0, [r6, #0]
 80169c6:	6918      	ldr	r0, [r3, #16]
 80169c8:	f7ff fd37 	bl	801643a <__hi0bits>
 80169cc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80169d0:	e7e1      	b.n	8016996 <__d2b+0x62>

080169d2 <__ratio>:
 80169d2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169d6:	4688      	mov	r8, r1
 80169d8:	4669      	mov	r1, sp
 80169da:	4681      	mov	r9, r0
 80169dc:	f7ff ff5c 	bl	8016898 <__b2d>
 80169e0:	a901      	add	r1, sp, #4
 80169e2:	4640      	mov	r0, r8
 80169e4:	ec57 6b10 	vmov	r6, r7, d0
 80169e8:	f7ff ff56 	bl	8016898 <__b2d>
 80169ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80169f0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80169f4:	eba3 0c02 	sub.w	ip, r3, r2
 80169f8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80169fc:	1a9b      	subs	r3, r3, r2
 80169fe:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016a02:	ec5b ab10 	vmov	sl, fp, d0
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	bfce      	itee	gt
 8016a0a:	463a      	movgt	r2, r7
 8016a0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016a10:	465a      	movle	r2, fp
 8016a12:	4659      	mov	r1, fp
 8016a14:	463d      	mov	r5, r7
 8016a16:	bfd4      	ite	le
 8016a18:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8016a1c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8016a20:	4630      	mov	r0, r6
 8016a22:	ee10 2a10 	vmov	r2, s0
 8016a26:	460b      	mov	r3, r1
 8016a28:	4629      	mov	r1, r5
 8016a2a:	f7e9 ff27 	bl	800087c <__aeabi_ddiv>
 8016a2e:	ec41 0b10 	vmov	d0, r0, r1
 8016a32:	b003      	add	sp, #12
 8016a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016a38 <__copybits>:
 8016a38:	3901      	subs	r1, #1
 8016a3a:	b510      	push	{r4, lr}
 8016a3c:	1149      	asrs	r1, r1, #5
 8016a3e:	6914      	ldr	r4, [r2, #16]
 8016a40:	3101      	adds	r1, #1
 8016a42:	f102 0314 	add.w	r3, r2, #20
 8016a46:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016a4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016a4e:	42a3      	cmp	r3, r4
 8016a50:	4602      	mov	r2, r0
 8016a52:	d303      	bcc.n	8016a5c <__copybits+0x24>
 8016a54:	2300      	movs	r3, #0
 8016a56:	428a      	cmp	r2, r1
 8016a58:	d305      	bcc.n	8016a66 <__copybits+0x2e>
 8016a5a:	bd10      	pop	{r4, pc}
 8016a5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a60:	f840 2b04 	str.w	r2, [r0], #4
 8016a64:	e7f3      	b.n	8016a4e <__copybits+0x16>
 8016a66:	f842 3b04 	str.w	r3, [r2], #4
 8016a6a:	e7f4      	b.n	8016a56 <__copybits+0x1e>

08016a6c <__any_on>:
 8016a6c:	f100 0214 	add.w	r2, r0, #20
 8016a70:	6900      	ldr	r0, [r0, #16]
 8016a72:	114b      	asrs	r3, r1, #5
 8016a74:	4298      	cmp	r0, r3
 8016a76:	b510      	push	{r4, lr}
 8016a78:	db11      	blt.n	8016a9e <__any_on+0x32>
 8016a7a:	dd0a      	ble.n	8016a92 <__any_on+0x26>
 8016a7c:	f011 011f 	ands.w	r1, r1, #31
 8016a80:	d007      	beq.n	8016a92 <__any_on+0x26>
 8016a82:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016a86:	fa24 f001 	lsr.w	r0, r4, r1
 8016a8a:	fa00 f101 	lsl.w	r1, r0, r1
 8016a8e:	428c      	cmp	r4, r1
 8016a90:	d10b      	bne.n	8016aaa <__any_on+0x3e>
 8016a92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016a96:	4293      	cmp	r3, r2
 8016a98:	d803      	bhi.n	8016aa2 <__any_on+0x36>
 8016a9a:	2000      	movs	r0, #0
 8016a9c:	bd10      	pop	{r4, pc}
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	e7f7      	b.n	8016a92 <__any_on+0x26>
 8016aa2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016aa6:	2900      	cmp	r1, #0
 8016aa8:	d0f5      	beq.n	8016a96 <__any_on+0x2a>
 8016aaa:	2001      	movs	r0, #1
 8016aac:	e7f6      	b.n	8016a9c <__any_on+0x30>

08016aae <_calloc_r>:
 8016aae:	b538      	push	{r3, r4, r5, lr}
 8016ab0:	fb02 f401 	mul.w	r4, r2, r1
 8016ab4:	4621      	mov	r1, r4
 8016ab6:	f000 f857 	bl	8016b68 <_malloc_r>
 8016aba:	4605      	mov	r5, r0
 8016abc:	b118      	cbz	r0, 8016ac6 <_calloc_r+0x18>
 8016abe:	4622      	mov	r2, r4
 8016ac0:	2100      	movs	r1, #0
 8016ac2:	f7fc f8fd 	bl	8012cc0 <memset>
 8016ac6:	4628      	mov	r0, r5
 8016ac8:	bd38      	pop	{r3, r4, r5, pc}
	...

08016acc <_free_r>:
 8016acc:	b538      	push	{r3, r4, r5, lr}
 8016ace:	4605      	mov	r5, r0
 8016ad0:	2900      	cmp	r1, #0
 8016ad2:	d045      	beq.n	8016b60 <_free_r+0x94>
 8016ad4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ad8:	1f0c      	subs	r4, r1, #4
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	bfb8      	it	lt
 8016ade:	18e4      	addlt	r4, r4, r3
 8016ae0:	f000 ffdb 	bl	8017a9a <__malloc_lock>
 8016ae4:	4a1f      	ldr	r2, [pc, #124]	; (8016b64 <_free_r+0x98>)
 8016ae6:	6813      	ldr	r3, [r2, #0]
 8016ae8:	4610      	mov	r0, r2
 8016aea:	b933      	cbnz	r3, 8016afa <_free_r+0x2e>
 8016aec:	6063      	str	r3, [r4, #4]
 8016aee:	6014      	str	r4, [r2, #0]
 8016af0:	4628      	mov	r0, r5
 8016af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016af6:	f000 bfd1 	b.w	8017a9c <__malloc_unlock>
 8016afa:	42a3      	cmp	r3, r4
 8016afc:	d90c      	bls.n	8016b18 <_free_r+0x4c>
 8016afe:	6821      	ldr	r1, [r4, #0]
 8016b00:	1862      	adds	r2, r4, r1
 8016b02:	4293      	cmp	r3, r2
 8016b04:	bf04      	itt	eq
 8016b06:	681a      	ldreq	r2, [r3, #0]
 8016b08:	685b      	ldreq	r3, [r3, #4]
 8016b0a:	6063      	str	r3, [r4, #4]
 8016b0c:	bf04      	itt	eq
 8016b0e:	1852      	addeq	r2, r2, r1
 8016b10:	6022      	streq	r2, [r4, #0]
 8016b12:	6004      	str	r4, [r0, #0]
 8016b14:	e7ec      	b.n	8016af0 <_free_r+0x24>
 8016b16:	4613      	mov	r3, r2
 8016b18:	685a      	ldr	r2, [r3, #4]
 8016b1a:	b10a      	cbz	r2, 8016b20 <_free_r+0x54>
 8016b1c:	42a2      	cmp	r2, r4
 8016b1e:	d9fa      	bls.n	8016b16 <_free_r+0x4a>
 8016b20:	6819      	ldr	r1, [r3, #0]
 8016b22:	1858      	adds	r0, r3, r1
 8016b24:	42a0      	cmp	r0, r4
 8016b26:	d10b      	bne.n	8016b40 <_free_r+0x74>
 8016b28:	6820      	ldr	r0, [r4, #0]
 8016b2a:	4401      	add	r1, r0
 8016b2c:	1858      	adds	r0, r3, r1
 8016b2e:	4282      	cmp	r2, r0
 8016b30:	6019      	str	r1, [r3, #0]
 8016b32:	d1dd      	bne.n	8016af0 <_free_r+0x24>
 8016b34:	6810      	ldr	r0, [r2, #0]
 8016b36:	6852      	ldr	r2, [r2, #4]
 8016b38:	605a      	str	r2, [r3, #4]
 8016b3a:	4401      	add	r1, r0
 8016b3c:	6019      	str	r1, [r3, #0]
 8016b3e:	e7d7      	b.n	8016af0 <_free_r+0x24>
 8016b40:	d902      	bls.n	8016b48 <_free_r+0x7c>
 8016b42:	230c      	movs	r3, #12
 8016b44:	602b      	str	r3, [r5, #0]
 8016b46:	e7d3      	b.n	8016af0 <_free_r+0x24>
 8016b48:	6820      	ldr	r0, [r4, #0]
 8016b4a:	1821      	adds	r1, r4, r0
 8016b4c:	428a      	cmp	r2, r1
 8016b4e:	bf04      	itt	eq
 8016b50:	6811      	ldreq	r1, [r2, #0]
 8016b52:	6852      	ldreq	r2, [r2, #4]
 8016b54:	6062      	str	r2, [r4, #4]
 8016b56:	bf04      	itt	eq
 8016b58:	1809      	addeq	r1, r1, r0
 8016b5a:	6021      	streq	r1, [r4, #0]
 8016b5c:	605c      	str	r4, [r3, #4]
 8016b5e:	e7c7      	b.n	8016af0 <_free_r+0x24>
 8016b60:	bd38      	pop	{r3, r4, r5, pc}
 8016b62:	bf00      	nop
 8016b64:	2001f52c 	.word	0x2001f52c

08016b68 <_malloc_r>:
 8016b68:	b570      	push	{r4, r5, r6, lr}
 8016b6a:	1ccd      	adds	r5, r1, #3
 8016b6c:	f025 0503 	bic.w	r5, r5, #3
 8016b70:	3508      	adds	r5, #8
 8016b72:	2d0c      	cmp	r5, #12
 8016b74:	bf38      	it	cc
 8016b76:	250c      	movcc	r5, #12
 8016b78:	2d00      	cmp	r5, #0
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	db01      	blt.n	8016b82 <_malloc_r+0x1a>
 8016b7e:	42a9      	cmp	r1, r5
 8016b80:	d903      	bls.n	8016b8a <_malloc_r+0x22>
 8016b82:	230c      	movs	r3, #12
 8016b84:	6033      	str	r3, [r6, #0]
 8016b86:	2000      	movs	r0, #0
 8016b88:	bd70      	pop	{r4, r5, r6, pc}
 8016b8a:	f000 ff86 	bl	8017a9a <__malloc_lock>
 8016b8e:	4a21      	ldr	r2, [pc, #132]	; (8016c14 <_malloc_r+0xac>)
 8016b90:	6814      	ldr	r4, [r2, #0]
 8016b92:	4621      	mov	r1, r4
 8016b94:	b991      	cbnz	r1, 8016bbc <_malloc_r+0x54>
 8016b96:	4c20      	ldr	r4, [pc, #128]	; (8016c18 <_malloc_r+0xb0>)
 8016b98:	6823      	ldr	r3, [r4, #0]
 8016b9a:	b91b      	cbnz	r3, 8016ba4 <_malloc_r+0x3c>
 8016b9c:	4630      	mov	r0, r6
 8016b9e:	f000 fe19 	bl	80177d4 <_sbrk_r>
 8016ba2:	6020      	str	r0, [r4, #0]
 8016ba4:	4629      	mov	r1, r5
 8016ba6:	4630      	mov	r0, r6
 8016ba8:	f000 fe14 	bl	80177d4 <_sbrk_r>
 8016bac:	1c43      	adds	r3, r0, #1
 8016bae:	d124      	bne.n	8016bfa <_malloc_r+0x92>
 8016bb0:	230c      	movs	r3, #12
 8016bb2:	6033      	str	r3, [r6, #0]
 8016bb4:	4630      	mov	r0, r6
 8016bb6:	f000 ff71 	bl	8017a9c <__malloc_unlock>
 8016bba:	e7e4      	b.n	8016b86 <_malloc_r+0x1e>
 8016bbc:	680b      	ldr	r3, [r1, #0]
 8016bbe:	1b5b      	subs	r3, r3, r5
 8016bc0:	d418      	bmi.n	8016bf4 <_malloc_r+0x8c>
 8016bc2:	2b0b      	cmp	r3, #11
 8016bc4:	d90f      	bls.n	8016be6 <_malloc_r+0x7e>
 8016bc6:	600b      	str	r3, [r1, #0]
 8016bc8:	50cd      	str	r5, [r1, r3]
 8016bca:	18cc      	adds	r4, r1, r3
 8016bcc:	4630      	mov	r0, r6
 8016bce:	f000 ff65 	bl	8017a9c <__malloc_unlock>
 8016bd2:	f104 000b 	add.w	r0, r4, #11
 8016bd6:	1d23      	adds	r3, r4, #4
 8016bd8:	f020 0007 	bic.w	r0, r0, #7
 8016bdc:	1ac3      	subs	r3, r0, r3
 8016bde:	d0d3      	beq.n	8016b88 <_malloc_r+0x20>
 8016be0:	425a      	negs	r2, r3
 8016be2:	50e2      	str	r2, [r4, r3]
 8016be4:	e7d0      	b.n	8016b88 <_malloc_r+0x20>
 8016be6:	428c      	cmp	r4, r1
 8016be8:	684b      	ldr	r3, [r1, #4]
 8016bea:	bf16      	itet	ne
 8016bec:	6063      	strne	r3, [r4, #4]
 8016bee:	6013      	streq	r3, [r2, #0]
 8016bf0:	460c      	movne	r4, r1
 8016bf2:	e7eb      	b.n	8016bcc <_malloc_r+0x64>
 8016bf4:	460c      	mov	r4, r1
 8016bf6:	6849      	ldr	r1, [r1, #4]
 8016bf8:	e7cc      	b.n	8016b94 <_malloc_r+0x2c>
 8016bfa:	1cc4      	adds	r4, r0, #3
 8016bfc:	f024 0403 	bic.w	r4, r4, #3
 8016c00:	42a0      	cmp	r0, r4
 8016c02:	d005      	beq.n	8016c10 <_malloc_r+0xa8>
 8016c04:	1a21      	subs	r1, r4, r0
 8016c06:	4630      	mov	r0, r6
 8016c08:	f000 fde4 	bl	80177d4 <_sbrk_r>
 8016c0c:	3001      	adds	r0, #1
 8016c0e:	d0cf      	beq.n	8016bb0 <_malloc_r+0x48>
 8016c10:	6025      	str	r5, [r4, #0]
 8016c12:	e7db      	b.n	8016bcc <_malloc_r+0x64>
 8016c14:	2001f52c 	.word	0x2001f52c
 8016c18:	2001f530 	.word	0x2001f530

08016c1c <__ssputs_r>:
 8016c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c20:	688e      	ldr	r6, [r1, #8]
 8016c22:	429e      	cmp	r6, r3
 8016c24:	4682      	mov	sl, r0
 8016c26:	460c      	mov	r4, r1
 8016c28:	4690      	mov	r8, r2
 8016c2a:	4699      	mov	r9, r3
 8016c2c:	d837      	bhi.n	8016c9e <__ssputs_r+0x82>
 8016c2e:	898a      	ldrh	r2, [r1, #12]
 8016c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016c34:	d031      	beq.n	8016c9a <__ssputs_r+0x7e>
 8016c36:	6825      	ldr	r5, [r4, #0]
 8016c38:	6909      	ldr	r1, [r1, #16]
 8016c3a:	1a6f      	subs	r7, r5, r1
 8016c3c:	6965      	ldr	r5, [r4, #20]
 8016c3e:	2302      	movs	r3, #2
 8016c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c44:	fb95 f5f3 	sdiv	r5, r5, r3
 8016c48:	f109 0301 	add.w	r3, r9, #1
 8016c4c:	443b      	add	r3, r7
 8016c4e:	429d      	cmp	r5, r3
 8016c50:	bf38      	it	cc
 8016c52:	461d      	movcc	r5, r3
 8016c54:	0553      	lsls	r3, r2, #21
 8016c56:	d530      	bpl.n	8016cba <__ssputs_r+0x9e>
 8016c58:	4629      	mov	r1, r5
 8016c5a:	f7ff ff85 	bl	8016b68 <_malloc_r>
 8016c5e:	4606      	mov	r6, r0
 8016c60:	b950      	cbnz	r0, 8016c78 <__ssputs_r+0x5c>
 8016c62:	230c      	movs	r3, #12
 8016c64:	f8ca 3000 	str.w	r3, [sl]
 8016c68:	89a3      	ldrh	r3, [r4, #12]
 8016c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016c6e:	81a3      	strh	r3, [r4, #12]
 8016c70:	f04f 30ff 	mov.w	r0, #4294967295
 8016c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016c78:	463a      	mov	r2, r7
 8016c7a:	6921      	ldr	r1, [r4, #16]
 8016c7c:	f7ff fb0e 	bl	801629c <memcpy>
 8016c80:	89a3      	ldrh	r3, [r4, #12]
 8016c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c8a:	81a3      	strh	r3, [r4, #12]
 8016c8c:	6126      	str	r6, [r4, #16]
 8016c8e:	6165      	str	r5, [r4, #20]
 8016c90:	443e      	add	r6, r7
 8016c92:	1bed      	subs	r5, r5, r7
 8016c94:	6026      	str	r6, [r4, #0]
 8016c96:	60a5      	str	r5, [r4, #8]
 8016c98:	464e      	mov	r6, r9
 8016c9a:	454e      	cmp	r6, r9
 8016c9c:	d900      	bls.n	8016ca0 <__ssputs_r+0x84>
 8016c9e:	464e      	mov	r6, r9
 8016ca0:	4632      	mov	r2, r6
 8016ca2:	4641      	mov	r1, r8
 8016ca4:	6820      	ldr	r0, [r4, #0]
 8016ca6:	f000 fedf 	bl	8017a68 <memmove>
 8016caa:	68a3      	ldr	r3, [r4, #8]
 8016cac:	1b9b      	subs	r3, r3, r6
 8016cae:	60a3      	str	r3, [r4, #8]
 8016cb0:	6823      	ldr	r3, [r4, #0]
 8016cb2:	441e      	add	r6, r3
 8016cb4:	6026      	str	r6, [r4, #0]
 8016cb6:	2000      	movs	r0, #0
 8016cb8:	e7dc      	b.n	8016c74 <__ssputs_r+0x58>
 8016cba:	462a      	mov	r2, r5
 8016cbc:	f000 feef 	bl	8017a9e <_realloc_r>
 8016cc0:	4606      	mov	r6, r0
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	d1e2      	bne.n	8016c8c <__ssputs_r+0x70>
 8016cc6:	6921      	ldr	r1, [r4, #16]
 8016cc8:	4650      	mov	r0, sl
 8016cca:	f7ff feff 	bl	8016acc <_free_r>
 8016cce:	e7c8      	b.n	8016c62 <__ssputs_r+0x46>

08016cd0 <_svfiprintf_r>:
 8016cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cd4:	461d      	mov	r5, r3
 8016cd6:	898b      	ldrh	r3, [r1, #12]
 8016cd8:	061f      	lsls	r7, r3, #24
 8016cda:	b09d      	sub	sp, #116	; 0x74
 8016cdc:	4680      	mov	r8, r0
 8016cde:	460c      	mov	r4, r1
 8016ce0:	4616      	mov	r6, r2
 8016ce2:	d50f      	bpl.n	8016d04 <_svfiprintf_r+0x34>
 8016ce4:	690b      	ldr	r3, [r1, #16]
 8016ce6:	b96b      	cbnz	r3, 8016d04 <_svfiprintf_r+0x34>
 8016ce8:	2140      	movs	r1, #64	; 0x40
 8016cea:	f7ff ff3d 	bl	8016b68 <_malloc_r>
 8016cee:	6020      	str	r0, [r4, #0]
 8016cf0:	6120      	str	r0, [r4, #16]
 8016cf2:	b928      	cbnz	r0, 8016d00 <_svfiprintf_r+0x30>
 8016cf4:	230c      	movs	r3, #12
 8016cf6:	f8c8 3000 	str.w	r3, [r8]
 8016cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8016cfe:	e0c8      	b.n	8016e92 <_svfiprintf_r+0x1c2>
 8016d00:	2340      	movs	r3, #64	; 0x40
 8016d02:	6163      	str	r3, [r4, #20]
 8016d04:	2300      	movs	r3, #0
 8016d06:	9309      	str	r3, [sp, #36]	; 0x24
 8016d08:	2320      	movs	r3, #32
 8016d0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016d0e:	2330      	movs	r3, #48	; 0x30
 8016d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d14:	9503      	str	r5, [sp, #12]
 8016d16:	f04f 0b01 	mov.w	fp, #1
 8016d1a:	4637      	mov	r7, r6
 8016d1c:	463d      	mov	r5, r7
 8016d1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016d22:	b10b      	cbz	r3, 8016d28 <_svfiprintf_r+0x58>
 8016d24:	2b25      	cmp	r3, #37	; 0x25
 8016d26:	d13e      	bne.n	8016da6 <_svfiprintf_r+0xd6>
 8016d28:	ebb7 0a06 	subs.w	sl, r7, r6
 8016d2c:	d00b      	beq.n	8016d46 <_svfiprintf_r+0x76>
 8016d2e:	4653      	mov	r3, sl
 8016d30:	4632      	mov	r2, r6
 8016d32:	4621      	mov	r1, r4
 8016d34:	4640      	mov	r0, r8
 8016d36:	f7ff ff71 	bl	8016c1c <__ssputs_r>
 8016d3a:	3001      	adds	r0, #1
 8016d3c:	f000 80a4 	beq.w	8016e88 <_svfiprintf_r+0x1b8>
 8016d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d42:	4453      	add	r3, sl
 8016d44:	9309      	str	r3, [sp, #36]	; 0x24
 8016d46:	783b      	ldrb	r3, [r7, #0]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f000 809d 	beq.w	8016e88 <_svfiprintf_r+0x1b8>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	f04f 32ff 	mov.w	r2, #4294967295
 8016d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d58:	9304      	str	r3, [sp, #16]
 8016d5a:	9307      	str	r3, [sp, #28]
 8016d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d60:	931a      	str	r3, [sp, #104]	; 0x68
 8016d62:	462f      	mov	r7, r5
 8016d64:	2205      	movs	r2, #5
 8016d66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016d6a:	4850      	ldr	r0, [pc, #320]	; (8016eac <_svfiprintf_r+0x1dc>)
 8016d6c:	f7e9 fa50 	bl	8000210 <memchr>
 8016d70:	9b04      	ldr	r3, [sp, #16]
 8016d72:	b9d0      	cbnz	r0, 8016daa <_svfiprintf_r+0xda>
 8016d74:	06d9      	lsls	r1, r3, #27
 8016d76:	bf44      	itt	mi
 8016d78:	2220      	movmi	r2, #32
 8016d7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016d7e:	071a      	lsls	r2, r3, #28
 8016d80:	bf44      	itt	mi
 8016d82:	222b      	movmi	r2, #43	; 0x2b
 8016d84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016d88:	782a      	ldrb	r2, [r5, #0]
 8016d8a:	2a2a      	cmp	r2, #42	; 0x2a
 8016d8c:	d015      	beq.n	8016dba <_svfiprintf_r+0xea>
 8016d8e:	9a07      	ldr	r2, [sp, #28]
 8016d90:	462f      	mov	r7, r5
 8016d92:	2000      	movs	r0, #0
 8016d94:	250a      	movs	r5, #10
 8016d96:	4639      	mov	r1, r7
 8016d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d9c:	3b30      	subs	r3, #48	; 0x30
 8016d9e:	2b09      	cmp	r3, #9
 8016da0:	d94d      	bls.n	8016e3e <_svfiprintf_r+0x16e>
 8016da2:	b1b8      	cbz	r0, 8016dd4 <_svfiprintf_r+0x104>
 8016da4:	e00f      	b.n	8016dc6 <_svfiprintf_r+0xf6>
 8016da6:	462f      	mov	r7, r5
 8016da8:	e7b8      	b.n	8016d1c <_svfiprintf_r+0x4c>
 8016daa:	4a40      	ldr	r2, [pc, #256]	; (8016eac <_svfiprintf_r+0x1dc>)
 8016dac:	1a80      	subs	r0, r0, r2
 8016dae:	fa0b f000 	lsl.w	r0, fp, r0
 8016db2:	4318      	orrs	r0, r3
 8016db4:	9004      	str	r0, [sp, #16]
 8016db6:	463d      	mov	r5, r7
 8016db8:	e7d3      	b.n	8016d62 <_svfiprintf_r+0x92>
 8016dba:	9a03      	ldr	r2, [sp, #12]
 8016dbc:	1d11      	adds	r1, r2, #4
 8016dbe:	6812      	ldr	r2, [r2, #0]
 8016dc0:	9103      	str	r1, [sp, #12]
 8016dc2:	2a00      	cmp	r2, #0
 8016dc4:	db01      	blt.n	8016dca <_svfiprintf_r+0xfa>
 8016dc6:	9207      	str	r2, [sp, #28]
 8016dc8:	e004      	b.n	8016dd4 <_svfiprintf_r+0x104>
 8016dca:	4252      	negs	r2, r2
 8016dcc:	f043 0302 	orr.w	r3, r3, #2
 8016dd0:	9207      	str	r2, [sp, #28]
 8016dd2:	9304      	str	r3, [sp, #16]
 8016dd4:	783b      	ldrb	r3, [r7, #0]
 8016dd6:	2b2e      	cmp	r3, #46	; 0x2e
 8016dd8:	d10c      	bne.n	8016df4 <_svfiprintf_r+0x124>
 8016dda:	787b      	ldrb	r3, [r7, #1]
 8016ddc:	2b2a      	cmp	r3, #42	; 0x2a
 8016dde:	d133      	bne.n	8016e48 <_svfiprintf_r+0x178>
 8016de0:	9b03      	ldr	r3, [sp, #12]
 8016de2:	1d1a      	adds	r2, r3, #4
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	9203      	str	r2, [sp, #12]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	bfb8      	it	lt
 8016dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8016df0:	3702      	adds	r7, #2
 8016df2:	9305      	str	r3, [sp, #20]
 8016df4:	4d2e      	ldr	r5, [pc, #184]	; (8016eb0 <_svfiprintf_r+0x1e0>)
 8016df6:	7839      	ldrb	r1, [r7, #0]
 8016df8:	2203      	movs	r2, #3
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	f7e9 fa08 	bl	8000210 <memchr>
 8016e00:	b138      	cbz	r0, 8016e12 <_svfiprintf_r+0x142>
 8016e02:	2340      	movs	r3, #64	; 0x40
 8016e04:	1b40      	subs	r0, r0, r5
 8016e06:	fa03 f000 	lsl.w	r0, r3, r0
 8016e0a:	9b04      	ldr	r3, [sp, #16]
 8016e0c:	4303      	orrs	r3, r0
 8016e0e:	3701      	adds	r7, #1
 8016e10:	9304      	str	r3, [sp, #16]
 8016e12:	7839      	ldrb	r1, [r7, #0]
 8016e14:	4827      	ldr	r0, [pc, #156]	; (8016eb4 <_svfiprintf_r+0x1e4>)
 8016e16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e1a:	2206      	movs	r2, #6
 8016e1c:	1c7e      	adds	r6, r7, #1
 8016e1e:	f7e9 f9f7 	bl	8000210 <memchr>
 8016e22:	2800      	cmp	r0, #0
 8016e24:	d038      	beq.n	8016e98 <_svfiprintf_r+0x1c8>
 8016e26:	4b24      	ldr	r3, [pc, #144]	; (8016eb8 <_svfiprintf_r+0x1e8>)
 8016e28:	bb13      	cbnz	r3, 8016e70 <_svfiprintf_r+0x1a0>
 8016e2a:	9b03      	ldr	r3, [sp, #12]
 8016e2c:	3307      	adds	r3, #7
 8016e2e:	f023 0307 	bic.w	r3, r3, #7
 8016e32:	3308      	adds	r3, #8
 8016e34:	9303      	str	r3, [sp, #12]
 8016e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e38:	444b      	add	r3, r9
 8016e3a:	9309      	str	r3, [sp, #36]	; 0x24
 8016e3c:	e76d      	b.n	8016d1a <_svfiprintf_r+0x4a>
 8016e3e:	fb05 3202 	mla	r2, r5, r2, r3
 8016e42:	2001      	movs	r0, #1
 8016e44:	460f      	mov	r7, r1
 8016e46:	e7a6      	b.n	8016d96 <_svfiprintf_r+0xc6>
 8016e48:	2300      	movs	r3, #0
 8016e4a:	3701      	adds	r7, #1
 8016e4c:	9305      	str	r3, [sp, #20]
 8016e4e:	4619      	mov	r1, r3
 8016e50:	250a      	movs	r5, #10
 8016e52:	4638      	mov	r0, r7
 8016e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e58:	3a30      	subs	r2, #48	; 0x30
 8016e5a:	2a09      	cmp	r2, #9
 8016e5c:	d903      	bls.n	8016e66 <_svfiprintf_r+0x196>
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d0c8      	beq.n	8016df4 <_svfiprintf_r+0x124>
 8016e62:	9105      	str	r1, [sp, #20]
 8016e64:	e7c6      	b.n	8016df4 <_svfiprintf_r+0x124>
 8016e66:	fb05 2101 	mla	r1, r5, r1, r2
 8016e6a:	2301      	movs	r3, #1
 8016e6c:	4607      	mov	r7, r0
 8016e6e:	e7f0      	b.n	8016e52 <_svfiprintf_r+0x182>
 8016e70:	ab03      	add	r3, sp, #12
 8016e72:	9300      	str	r3, [sp, #0]
 8016e74:	4622      	mov	r2, r4
 8016e76:	4b11      	ldr	r3, [pc, #68]	; (8016ebc <_svfiprintf_r+0x1ec>)
 8016e78:	a904      	add	r1, sp, #16
 8016e7a:	4640      	mov	r0, r8
 8016e7c:	f7fb ffbc 	bl	8012df8 <_printf_float>
 8016e80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016e84:	4681      	mov	r9, r0
 8016e86:	d1d6      	bne.n	8016e36 <_svfiprintf_r+0x166>
 8016e88:	89a3      	ldrh	r3, [r4, #12]
 8016e8a:	065b      	lsls	r3, r3, #25
 8016e8c:	f53f af35 	bmi.w	8016cfa <_svfiprintf_r+0x2a>
 8016e90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016e92:	b01d      	add	sp, #116	; 0x74
 8016e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e98:	ab03      	add	r3, sp, #12
 8016e9a:	9300      	str	r3, [sp, #0]
 8016e9c:	4622      	mov	r2, r4
 8016e9e:	4b07      	ldr	r3, [pc, #28]	; (8016ebc <_svfiprintf_r+0x1ec>)
 8016ea0:	a904      	add	r1, sp, #16
 8016ea2:	4640      	mov	r0, r8
 8016ea4:	f7fc fa5e 	bl	8013364 <_printf_i>
 8016ea8:	e7ea      	b.n	8016e80 <_svfiprintf_r+0x1b0>
 8016eaa:	bf00      	nop
 8016eac:	0801858c 	.word	0x0801858c
 8016eb0:	08018592 	.word	0x08018592
 8016eb4:	08018596 	.word	0x08018596
 8016eb8:	08012df9 	.word	0x08012df9
 8016ebc:	08016c1d 	.word	0x08016c1d

08016ec0 <_sungetc_r>:
 8016ec0:	b538      	push	{r3, r4, r5, lr}
 8016ec2:	1c4b      	adds	r3, r1, #1
 8016ec4:	4614      	mov	r4, r2
 8016ec6:	d103      	bne.n	8016ed0 <_sungetc_r+0x10>
 8016ec8:	f04f 35ff 	mov.w	r5, #4294967295
 8016ecc:	4628      	mov	r0, r5
 8016ece:	bd38      	pop	{r3, r4, r5, pc}
 8016ed0:	8993      	ldrh	r3, [r2, #12]
 8016ed2:	f023 0320 	bic.w	r3, r3, #32
 8016ed6:	8193      	strh	r3, [r2, #12]
 8016ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016eda:	6852      	ldr	r2, [r2, #4]
 8016edc:	b2cd      	uxtb	r5, r1
 8016ede:	b18b      	cbz	r3, 8016f04 <_sungetc_r+0x44>
 8016ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ee2:	4293      	cmp	r3, r2
 8016ee4:	dd08      	ble.n	8016ef8 <_sungetc_r+0x38>
 8016ee6:	6823      	ldr	r3, [r4, #0]
 8016ee8:	1e5a      	subs	r2, r3, #1
 8016eea:	6022      	str	r2, [r4, #0]
 8016eec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016ef0:	6863      	ldr	r3, [r4, #4]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	6063      	str	r3, [r4, #4]
 8016ef6:	e7e9      	b.n	8016ecc <_sungetc_r+0xc>
 8016ef8:	4621      	mov	r1, r4
 8016efa:	f000 fd4b 	bl	8017994 <__submore>
 8016efe:	2800      	cmp	r0, #0
 8016f00:	d0f1      	beq.n	8016ee6 <_sungetc_r+0x26>
 8016f02:	e7e1      	b.n	8016ec8 <_sungetc_r+0x8>
 8016f04:	6921      	ldr	r1, [r4, #16]
 8016f06:	6823      	ldr	r3, [r4, #0]
 8016f08:	b151      	cbz	r1, 8016f20 <_sungetc_r+0x60>
 8016f0a:	4299      	cmp	r1, r3
 8016f0c:	d208      	bcs.n	8016f20 <_sungetc_r+0x60>
 8016f0e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016f12:	42a9      	cmp	r1, r5
 8016f14:	d104      	bne.n	8016f20 <_sungetc_r+0x60>
 8016f16:	3b01      	subs	r3, #1
 8016f18:	3201      	adds	r2, #1
 8016f1a:	6023      	str	r3, [r4, #0]
 8016f1c:	6062      	str	r2, [r4, #4]
 8016f1e:	e7d5      	b.n	8016ecc <_sungetc_r+0xc>
 8016f20:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f28:	6363      	str	r3, [r4, #52]	; 0x34
 8016f2a:	2303      	movs	r3, #3
 8016f2c:	63a3      	str	r3, [r4, #56]	; 0x38
 8016f2e:	4623      	mov	r3, r4
 8016f30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016f34:	6023      	str	r3, [r4, #0]
 8016f36:	2301      	movs	r3, #1
 8016f38:	e7dc      	b.n	8016ef4 <_sungetc_r+0x34>

08016f3a <__ssrefill_r>:
 8016f3a:	b510      	push	{r4, lr}
 8016f3c:	460c      	mov	r4, r1
 8016f3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016f40:	b169      	cbz	r1, 8016f5e <__ssrefill_r+0x24>
 8016f42:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016f46:	4299      	cmp	r1, r3
 8016f48:	d001      	beq.n	8016f4e <__ssrefill_r+0x14>
 8016f4a:	f7ff fdbf 	bl	8016acc <_free_r>
 8016f4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016f50:	6063      	str	r3, [r4, #4]
 8016f52:	2000      	movs	r0, #0
 8016f54:	6360      	str	r0, [r4, #52]	; 0x34
 8016f56:	b113      	cbz	r3, 8016f5e <__ssrefill_r+0x24>
 8016f58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016f5a:	6023      	str	r3, [r4, #0]
 8016f5c:	bd10      	pop	{r4, pc}
 8016f5e:	6923      	ldr	r3, [r4, #16]
 8016f60:	6023      	str	r3, [r4, #0]
 8016f62:	2300      	movs	r3, #0
 8016f64:	6063      	str	r3, [r4, #4]
 8016f66:	89a3      	ldrh	r3, [r4, #12]
 8016f68:	f043 0320 	orr.w	r3, r3, #32
 8016f6c:	81a3      	strh	r3, [r4, #12]
 8016f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f72:	e7f3      	b.n	8016f5c <__ssrefill_r+0x22>

08016f74 <__ssvfiscanf_r>:
 8016f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f78:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016f7c:	460c      	mov	r4, r1
 8016f7e:	2100      	movs	r1, #0
 8016f80:	9144      	str	r1, [sp, #272]	; 0x110
 8016f82:	9145      	str	r1, [sp, #276]	; 0x114
 8016f84:	499f      	ldr	r1, [pc, #636]	; (8017204 <__ssvfiscanf_r+0x290>)
 8016f86:	91a0      	str	r1, [sp, #640]	; 0x280
 8016f88:	f10d 0804 	add.w	r8, sp, #4
 8016f8c:	499e      	ldr	r1, [pc, #632]	; (8017208 <__ssvfiscanf_r+0x294>)
 8016f8e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801720c <__ssvfiscanf_r+0x298>
 8016f92:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016f96:	4606      	mov	r6, r0
 8016f98:	4692      	mov	sl, r2
 8016f9a:	91a1      	str	r1, [sp, #644]	; 0x284
 8016f9c:	9300      	str	r3, [sp, #0]
 8016f9e:	270a      	movs	r7, #10
 8016fa0:	f89a 3000 	ldrb.w	r3, [sl]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f000 812a 	beq.w	80171fe <__ssvfiscanf_r+0x28a>
 8016faa:	4655      	mov	r5, sl
 8016fac:	f7ff f8c8 	bl	8016140 <__locale_ctype_ptr>
 8016fb0:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016fb4:	4458      	add	r0, fp
 8016fb6:	7843      	ldrb	r3, [r0, #1]
 8016fb8:	f013 0308 	ands.w	r3, r3, #8
 8016fbc:	d01c      	beq.n	8016ff8 <__ssvfiscanf_r+0x84>
 8016fbe:	6863      	ldr	r3, [r4, #4]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	dd12      	ble.n	8016fea <__ssvfiscanf_r+0x76>
 8016fc4:	f7ff f8bc 	bl	8016140 <__locale_ctype_ptr>
 8016fc8:	6823      	ldr	r3, [r4, #0]
 8016fca:	781a      	ldrb	r2, [r3, #0]
 8016fcc:	4410      	add	r0, r2
 8016fce:	7842      	ldrb	r2, [r0, #1]
 8016fd0:	0712      	lsls	r2, r2, #28
 8016fd2:	d401      	bmi.n	8016fd8 <__ssvfiscanf_r+0x64>
 8016fd4:	46aa      	mov	sl, r5
 8016fd6:	e7e3      	b.n	8016fa0 <__ssvfiscanf_r+0x2c>
 8016fd8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016fda:	3201      	adds	r2, #1
 8016fdc:	9245      	str	r2, [sp, #276]	; 0x114
 8016fde:	6862      	ldr	r2, [r4, #4]
 8016fe0:	3301      	adds	r3, #1
 8016fe2:	3a01      	subs	r2, #1
 8016fe4:	6062      	str	r2, [r4, #4]
 8016fe6:	6023      	str	r3, [r4, #0]
 8016fe8:	e7e9      	b.n	8016fbe <__ssvfiscanf_r+0x4a>
 8016fea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016fec:	4621      	mov	r1, r4
 8016fee:	4630      	mov	r0, r6
 8016ff0:	4798      	blx	r3
 8016ff2:	2800      	cmp	r0, #0
 8016ff4:	d0e6      	beq.n	8016fc4 <__ssvfiscanf_r+0x50>
 8016ff6:	e7ed      	b.n	8016fd4 <__ssvfiscanf_r+0x60>
 8016ff8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016ffc:	f040 8082 	bne.w	8017104 <__ssvfiscanf_r+0x190>
 8017000:	9343      	str	r3, [sp, #268]	; 0x10c
 8017002:	9341      	str	r3, [sp, #260]	; 0x104
 8017004:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017008:	2b2a      	cmp	r3, #42	; 0x2a
 801700a:	d103      	bne.n	8017014 <__ssvfiscanf_r+0xa0>
 801700c:	2310      	movs	r3, #16
 801700e:	9341      	str	r3, [sp, #260]	; 0x104
 8017010:	f10a 0502 	add.w	r5, sl, #2
 8017014:	46aa      	mov	sl, r5
 8017016:	f815 1b01 	ldrb.w	r1, [r5], #1
 801701a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801701e:	2a09      	cmp	r2, #9
 8017020:	d922      	bls.n	8017068 <__ssvfiscanf_r+0xf4>
 8017022:	2203      	movs	r2, #3
 8017024:	4879      	ldr	r0, [pc, #484]	; (801720c <__ssvfiscanf_r+0x298>)
 8017026:	f7e9 f8f3 	bl	8000210 <memchr>
 801702a:	b138      	cbz	r0, 801703c <__ssvfiscanf_r+0xc8>
 801702c:	eba0 0309 	sub.w	r3, r0, r9
 8017030:	2001      	movs	r0, #1
 8017032:	4098      	lsls	r0, r3
 8017034:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017036:	4318      	orrs	r0, r3
 8017038:	9041      	str	r0, [sp, #260]	; 0x104
 801703a:	46aa      	mov	sl, r5
 801703c:	f89a 3000 	ldrb.w	r3, [sl]
 8017040:	2b67      	cmp	r3, #103	; 0x67
 8017042:	f10a 0501 	add.w	r5, sl, #1
 8017046:	d82b      	bhi.n	80170a0 <__ssvfiscanf_r+0x12c>
 8017048:	2b65      	cmp	r3, #101	; 0x65
 801704a:	f080 809f 	bcs.w	801718c <__ssvfiscanf_r+0x218>
 801704e:	2b47      	cmp	r3, #71	; 0x47
 8017050:	d810      	bhi.n	8017074 <__ssvfiscanf_r+0x100>
 8017052:	2b45      	cmp	r3, #69	; 0x45
 8017054:	f080 809a 	bcs.w	801718c <__ssvfiscanf_r+0x218>
 8017058:	2b00      	cmp	r3, #0
 801705a:	d06c      	beq.n	8017136 <__ssvfiscanf_r+0x1c2>
 801705c:	2b25      	cmp	r3, #37	; 0x25
 801705e:	d051      	beq.n	8017104 <__ssvfiscanf_r+0x190>
 8017060:	2303      	movs	r3, #3
 8017062:	9347      	str	r3, [sp, #284]	; 0x11c
 8017064:	9742      	str	r7, [sp, #264]	; 0x108
 8017066:	e027      	b.n	80170b8 <__ssvfiscanf_r+0x144>
 8017068:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801706a:	fb07 1303 	mla	r3, r7, r3, r1
 801706e:	3b30      	subs	r3, #48	; 0x30
 8017070:	9343      	str	r3, [sp, #268]	; 0x10c
 8017072:	e7cf      	b.n	8017014 <__ssvfiscanf_r+0xa0>
 8017074:	2b5b      	cmp	r3, #91	; 0x5b
 8017076:	d06a      	beq.n	801714e <__ssvfiscanf_r+0x1da>
 8017078:	d80c      	bhi.n	8017094 <__ssvfiscanf_r+0x120>
 801707a:	2b58      	cmp	r3, #88	; 0x58
 801707c:	d1f0      	bne.n	8017060 <__ssvfiscanf_r+0xec>
 801707e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017084:	9241      	str	r2, [sp, #260]	; 0x104
 8017086:	2210      	movs	r2, #16
 8017088:	9242      	str	r2, [sp, #264]	; 0x108
 801708a:	2b6e      	cmp	r3, #110	; 0x6e
 801708c:	bf8c      	ite	hi
 801708e:	2304      	movhi	r3, #4
 8017090:	2303      	movls	r3, #3
 8017092:	e010      	b.n	80170b6 <__ssvfiscanf_r+0x142>
 8017094:	2b63      	cmp	r3, #99	; 0x63
 8017096:	d065      	beq.n	8017164 <__ssvfiscanf_r+0x1f0>
 8017098:	2b64      	cmp	r3, #100	; 0x64
 801709a:	d1e1      	bne.n	8017060 <__ssvfiscanf_r+0xec>
 801709c:	9742      	str	r7, [sp, #264]	; 0x108
 801709e:	e7f4      	b.n	801708a <__ssvfiscanf_r+0x116>
 80170a0:	2b70      	cmp	r3, #112	; 0x70
 80170a2:	d04b      	beq.n	801713c <__ssvfiscanf_r+0x1c8>
 80170a4:	d826      	bhi.n	80170f4 <__ssvfiscanf_r+0x180>
 80170a6:	2b6e      	cmp	r3, #110	; 0x6e
 80170a8:	d062      	beq.n	8017170 <__ssvfiscanf_r+0x1fc>
 80170aa:	d84c      	bhi.n	8017146 <__ssvfiscanf_r+0x1d2>
 80170ac:	2b69      	cmp	r3, #105	; 0x69
 80170ae:	d1d7      	bne.n	8017060 <__ssvfiscanf_r+0xec>
 80170b0:	2300      	movs	r3, #0
 80170b2:	9342      	str	r3, [sp, #264]	; 0x108
 80170b4:	2303      	movs	r3, #3
 80170b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80170b8:	6863      	ldr	r3, [r4, #4]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	dd68      	ble.n	8017190 <__ssvfiscanf_r+0x21c>
 80170be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80170c0:	0659      	lsls	r1, r3, #25
 80170c2:	d407      	bmi.n	80170d4 <__ssvfiscanf_r+0x160>
 80170c4:	f7ff f83c 	bl	8016140 <__locale_ctype_ptr>
 80170c8:	6823      	ldr	r3, [r4, #0]
 80170ca:	781a      	ldrb	r2, [r3, #0]
 80170cc:	4410      	add	r0, r2
 80170ce:	7842      	ldrb	r2, [r0, #1]
 80170d0:	0712      	lsls	r2, r2, #28
 80170d2:	d464      	bmi.n	801719e <__ssvfiscanf_r+0x22a>
 80170d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80170d6:	2b02      	cmp	r3, #2
 80170d8:	dc73      	bgt.n	80171c2 <__ssvfiscanf_r+0x24e>
 80170da:	466b      	mov	r3, sp
 80170dc:	4622      	mov	r2, r4
 80170de:	a941      	add	r1, sp, #260	; 0x104
 80170e0:	4630      	mov	r0, r6
 80170e2:	f000 f9d7 	bl	8017494 <_scanf_chars>
 80170e6:	2801      	cmp	r0, #1
 80170e8:	f000 8089 	beq.w	80171fe <__ssvfiscanf_r+0x28a>
 80170ec:	2802      	cmp	r0, #2
 80170ee:	f47f af71 	bne.w	8016fd4 <__ssvfiscanf_r+0x60>
 80170f2:	e01d      	b.n	8017130 <__ssvfiscanf_r+0x1bc>
 80170f4:	2b75      	cmp	r3, #117	; 0x75
 80170f6:	d0d1      	beq.n	801709c <__ssvfiscanf_r+0x128>
 80170f8:	2b78      	cmp	r3, #120	; 0x78
 80170fa:	d0c0      	beq.n	801707e <__ssvfiscanf_r+0x10a>
 80170fc:	2b73      	cmp	r3, #115	; 0x73
 80170fe:	d1af      	bne.n	8017060 <__ssvfiscanf_r+0xec>
 8017100:	2302      	movs	r3, #2
 8017102:	e7d8      	b.n	80170b6 <__ssvfiscanf_r+0x142>
 8017104:	6863      	ldr	r3, [r4, #4]
 8017106:	2b00      	cmp	r3, #0
 8017108:	dd0c      	ble.n	8017124 <__ssvfiscanf_r+0x1b0>
 801710a:	6823      	ldr	r3, [r4, #0]
 801710c:	781a      	ldrb	r2, [r3, #0]
 801710e:	455a      	cmp	r2, fp
 8017110:	d175      	bne.n	80171fe <__ssvfiscanf_r+0x28a>
 8017112:	3301      	adds	r3, #1
 8017114:	6862      	ldr	r2, [r4, #4]
 8017116:	6023      	str	r3, [r4, #0]
 8017118:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801711a:	3a01      	subs	r2, #1
 801711c:	3301      	adds	r3, #1
 801711e:	6062      	str	r2, [r4, #4]
 8017120:	9345      	str	r3, [sp, #276]	; 0x114
 8017122:	e757      	b.n	8016fd4 <__ssvfiscanf_r+0x60>
 8017124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017126:	4621      	mov	r1, r4
 8017128:	4630      	mov	r0, r6
 801712a:	4798      	blx	r3
 801712c:	2800      	cmp	r0, #0
 801712e:	d0ec      	beq.n	801710a <__ssvfiscanf_r+0x196>
 8017130:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017132:	2800      	cmp	r0, #0
 8017134:	d159      	bne.n	80171ea <__ssvfiscanf_r+0x276>
 8017136:	f04f 30ff 	mov.w	r0, #4294967295
 801713a:	e05c      	b.n	80171f6 <__ssvfiscanf_r+0x282>
 801713c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801713e:	f042 0220 	orr.w	r2, r2, #32
 8017142:	9241      	str	r2, [sp, #260]	; 0x104
 8017144:	e79b      	b.n	801707e <__ssvfiscanf_r+0x10a>
 8017146:	2308      	movs	r3, #8
 8017148:	9342      	str	r3, [sp, #264]	; 0x108
 801714a:	2304      	movs	r3, #4
 801714c:	e7b3      	b.n	80170b6 <__ssvfiscanf_r+0x142>
 801714e:	4629      	mov	r1, r5
 8017150:	4640      	mov	r0, r8
 8017152:	f000 fb4f 	bl	80177f4 <__sccl>
 8017156:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801715c:	9341      	str	r3, [sp, #260]	; 0x104
 801715e:	4605      	mov	r5, r0
 8017160:	2301      	movs	r3, #1
 8017162:	e7a8      	b.n	80170b6 <__ssvfiscanf_r+0x142>
 8017164:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801716a:	9341      	str	r3, [sp, #260]	; 0x104
 801716c:	2300      	movs	r3, #0
 801716e:	e7a2      	b.n	80170b6 <__ssvfiscanf_r+0x142>
 8017170:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017172:	06c3      	lsls	r3, r0, #27
 8017174:	f53f af2e 	bmi.w	8016fd4 <__ssvfiscanf_r+0x60>
 8017178:	9b00      	ldr	r3, [sp, #0]
 801717a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801717c:	1d19      	adds	r1, r3, #4
 801717e:	9100      	str	r1, [sp, #0]
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	07c0      	lsls	r0, r0, #31
 8017184:	bf4c      	ite	mi
 8017186:	801a      	strhmi	r2, [r3, #0]
 8017188:	601a      	strpl	r2, [r3, #0]
 801718a:	e723      	b.n	8016fd4 <__ssvfiscanf_r+0x60>
 801718c:	2305      	movs	r3, #5
 801718e:	e792      	b.n	80170b6 <__ssvfiscanf_r+0x142>
 8017190:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017192:	4621      	mov	r1, r4
 8017194:	4630      	mov	r0, r6
 8017196:	4798      	blx	r3
 8017198:	2800      	cmp	r0, #0
 801719a:	d090      	beq.n	80170be <__ssvfiscanf_r+0x14a>
 801719c:	e7c8      	b.n	8017130 <__ssvfiscanf_r+0x1bc>
 801719e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80171a0:	3201      	adds	r2, #1
 80171a2:	9245      	str	r2, [sp, #276]	; 0x114
 80171a4:	6862      	ldr	r2, [r4, #4]
 80171a6:	3a01      	subs	r2, #1
 80171a8:	2a00      	cmp	r2, #0
 80171aa:	6062      	str	r2, [r4, #4]
 80171ac:	dd02      	ble.n	80171b4 <__ssvfiscanf_r+0x240>
 80171ae:	3301      	adds	r3, #1
 80171b0:	6023      	str	r3, [r4, #0]
 80171b2:	e787      	b.n	80170c4 <__ssvfiscanf_r+0x150>
 80171b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80171b6:	4621      	mov	r1, r4
 80171b8:	4630      	mov	r0, r6
 80171ba:	4798      	blx	r3
 80171bc:	2800      	cmp	r0, #0
 80171be:	d081      	beq.n	80170c4 <__ssvfiscanf_r+0x150>
 80171c0:	e7b6      	b.n	8017130 <__ssvfiscanf_r+0x1bc>
 80171c2:	2b04      	cmp	r3, #4
 80171c4:	dc06      	bgt.n	80171d4 <__ssvfiscanf_r+0x260>
 80171c6:	466b      	mov	r3, sp
 80171c8:	4622      	mov	r2, r4
 80171ca:	a941      	add	r1, sp, #260	; 0x104
 80171cc:	4630      	mov	r0, r6
 80171ce:	f000 f9c5 	bl	801755c <_scanf_i>
 80171d2:	e788      	b.n	80170e6 <__ssvfiscanf_r+0x172>
 80171d4:	4b0e      	ldr	r3, [pc, #56]	; (8017210 <__ssvfiscanf_r+0x29c>)
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	f43f aefc 	beq.w	8016fd4 <__ssvfiscanf_r+0x60>
 80171dc:	466b      	mov	r3, sp
 80171de:	4622      	mov	r2, r4
 80171e0:	a941      	add	r1, sp, #260	; 0x104
 80171e2:	4630      	mov	r0, r6
 80171e4:	f7fc f9d0 	bl	8013588 <_scanf_float>
 80171e8:	e77d      	b.n	80170e6 <__ssvfiscanf_r+0x172>
 80171ea:	89a3      	ldrh	r3, [r4, #12]
 80171ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80171f0:	bf18      	it	ne
 80171f2:	f04f 30ff 	movne.w	r0, #4294967295
 80171f6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80171fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017200:	e7f9      	b.n	80171f6 <__ssvfiscanf_r+0x282>
 8017202:	bf00      	nop
 8017204:	08016ec1 	.word	0x08016ec1
 8017208:	08016f3b 	.word	0x08016f3b
 801720c:	08018592 	.word	0x08018592
 8017210:	08013589 	.word	0x08013589

08017214 <__sfputc_r>:
 8017214:	6893      	ldr	r3, [r2, #8]
 8017216:	3b01      	subs	r3, #1
 8017218:	2b00      	cmp	r3, #0
 801721a:	b410      	push	{r4}
 801721c:	6093      	str	r3, [r2, #8]
 801721e:	da08      	bge.n	8017232 <__sfputc_r+0x1e>
 8017220:	6994      	ldr	r4, [r2, #24]
 8017222:	42a3      	cmp	r3, r4
 8017224:	db01      	blt.n	801722a <__sfputc_r+0x16>
 8017226:	290a      	cmp	r1, #10
 8017228:	d103      	bne.n	8017232 <__sfputc_r+0x1e>
 801722a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801722e:	f7fd bbbd 	b.w	80149ac <__swbuf_r>
 8017232:	6813      	ldr	r3, [r2, #0]
 8017234:	1c58      	adds	r0, r3, #1
 8017236:	6010      	str	r0, [r2, #0]
 8017238:	7019      	strb	r1, [r3, #0]
 801723a:	4608      	mov	r0, r1
 801723c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017240:	4770      	bx	lr

08017242 <__sfputs_r>:
 8017242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017244:	4606      	mov	r6, r0
 8017246:	460f      	mov	r7, r1
 8017248:	4614      	mov	r4, r2
 801724a:	18d5      	adds	r5, r2, r3
 801724c:	42ac      	cmp	r4, r5
 801724e:	d101      	bne.n	8017254 <__sfputs_r+0x12>
 8017250:	2000      	movs	r0, #0
 8017252:	e007      	b.n	8017264 <__sfputs_r+0x22>
 8017254:	463a      	mov	r2, r7
 8017256:	f814 1b01 	ldrb.w	r1, [r4], #1
 801725a:	4630      	mov	r0, r6
 801725c:	f7ff ffda 	bl	8017214 <__sfputc_r>
 8017260:	1c43      	adds	r3, r0, #1
 8017262:	d1f3      	bne.n	801724c <__sfputs_r+0xa>
 8017264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017268 <_vfiprintf_r>:
 8017268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801726c:	460c      	mov	r4, r1
 801726e:	b09d      	sub	sp, #116	; 0x74
 8017270:	4617      	mov	r7, r2
 8017272:	461d      	mov	r5, r3
 8017274:	4606      	mov	r6, r0
 8017276:	b118      	cbz	r0, 8017280 <_vfiprintf_r+0x18>
 8017278:	6983      	ldr	r3, [r0, #24]
 801727a:	b90b      	cbnz	r3, 8017280 <_vfiprintf_r+0x18>
 801727c:	f7fe fbac 	bl	80159d8 <__sinit>
 8017280:	4b7c      	ldr	r3, [pc, #496]	; (8017474 <_vfiprintf_r+0x20c>)
 8017282:	429c      	cmp	r4, r3
 8017284:	d158      	bne.n	8017338 <_vfiprintf_r+0xd0>
 8017286:	6874      	ldr	r4, [r6, #4]
 8017288:	89a3      	ldrh	r3, [r4, #12]
 801728a:	0718      	lsls	r0, r3, #28
 801728c:	d55e      	bpl.n	801734c <_vfiprintf_r+0xe4>
 801728e:	6923      	ldr	r3, [r4, #16]
 8017290:	2b00      	cmp	r3, #0
 8017292:	d05b      	beq.n	801734c <_vfiprintf_r+0xe4>
 8017294:	2300      	movs	r3, #0
 8017296:	9309      	str	r3, [sp, #36]	; 0x24
 8017298:	2320      	movs	r3, #32
 801729a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801729e:	2330      	movs	r3, #48	; 0x30
 80172a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80172a4:	9503      	str	r5, [sp, #12]
 80172a6:	f04f 0b01 	mov.w	fp, #1
 80172aa:	46b8      	mov	r8, r7
 80172ac:	4645      	mov	r5, r8
 80172ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80172b2:	b10b      	cbz	r3, 80172b8 <_vfiprintf_r+0x50>
 80172b4:	2b25      	cmp	r3, #37	; 0x25
 80172b6:	d154      	bne.n	8017362 <_vfiprintf_r+0xfa>
 80172b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80172bc:	d00b      	beq.n	80172d6 <_vfiprintf_r+0x6e>
 80172be:	4653      	mov	r3, sl
 80172c0:	463a      	mov	r2, r7
 80172c2:	4621      	mov	r1, r4
 80172c4:	4630      	mov	r0, r6
 80172c6:	f7ff ffbc 	bl	8017242 <__sfputs_r>
 80172ca:	3001      	adds	r0, #1
 80172cc:	f000 80c2 	beq.w	8017454 <_vfiprintf_r+0x1ec>
 80172d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172d2:	4453      	add	r3, sl
 80172d4:	9309      	str	r3, [sp, #36]	; 0x24
 80172d6:	f898 3000 	ldrb.w	r3, [r8]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	f000 80ba 	beq.w	8017454 <_vfiprintf_r+0x1ec>
 80172e0:	2300      	movs	r3, #0
 80172e2:	f04f 32ff 	mov.w	r2, #4294967295
 80172e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172ea:	9304      	str	r3, [sp, #16]
 80172ec:	9307      	str	r3, [sp, #28]
 80172ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172f2:	931a      	str	r3, [sp, #104]	; 0x68
 80172f4:	46a8      	mov	r8, r5
 80172f6:	2205      	movs	r2, #5
 80172f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80172fc:	485e      	ldr	r0, [pc, #376]	; (8017478 <_vfiprintf_r+0x210>)
 80172fe:	f7e8 ff87 	bl	8000210 <memchr>
 8017302:	9b04      	ldr	r3, [sp, #16]
 8017304:	bb78      	cbnz	r0, 8017366 <_vfiprintf_r+0xfe>
 8017306:	06d9      	lsls	r1, r3, #27
 8017308:	bf44      	itt	mi
 801730a:	2220      	movmi	r2, #32
 801730c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8017310:	071a      	lsls	r2, r3, #28
 8017312:	bf44      	itt	mi
 8017314:	222b      	movmi	r2, #43	; 0x2b
 8017316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801731a:	782a      	ldrb	r2, [r5, #0]
 801731c:	2a2a      	cmp	r2, #42	; 0x2a
 801731e:	d02a      	beq.n	8017376 <_vfiprintf_r+0x10e>
 8017320:	9a07      	ldr	r2, [sp, #28]
 8017322:	46a8      	mov	r8, r5
 8017324:	2000      	movs	r0, #0
 8017326:	250a      	movs	r5, #10
 8017328:	4641      	mov	r1, r8
 801732a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801732e:	3b30      	subs	r3, #48	; 0x30
 8017330:	2b09      	cmp	r3, #9
 8017332:	d969      	bls.n	8017408 <_vfiprintf_r+0x1a0>
 8017334:	b360      	cbz	r0, 8017390 <_vfiprintf_r+0x128>
 8017336:	e024      	b.n	8017382 <_vfiprintf_r+0x11a>
 8017338:	4b50      	ldr	r3, [pc, #320]	; (801747c <_vfiprintf_r+0x214>)
 801733a:	429c      	cmp	r4, r3
 801733c:	d101      	bne.n	8017342 <_vfiprintf_r+0xda>
 801733e:	68b4      	ldr	r4, [r6, #8]
 8017340:	e7a2      	b.n	8017288 <_vfiprintf_r+0x20>
 8017342:	4b4f      	ldr	r3, [pc, #316]	; (8017480 <_vfiprintf_r+0x218>)
 8017344:	429c      	cmp	r4, r3
 8017346:	bf08      	it	eq
 8017348:	68f4      	ldreq	r4, [r6, #12]
 801734a:	e79d      	b.n	8017288 <_vfiprintf_r+0x20>
 801734c:	4621      	mov	r1, r4
 801734e:	4630      	mov	r0, r6
 8017350:	f7fd fb90 	bl	8014a74 <__swsetup_r>
 8017354:	2800      	cmp	r0, #0
 8017356:	d09d      	beq.n	8017294 <_vfiprintf_r+0x2c>
 8017358:	f04f 30ff 	mov.w	r0, #4294967295
 801735c:	b01d      	add	sp, #116	; 0x74
 801735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017362:	46a8      	mov	r8, r5
 8017364:	e7a2      	b.n	80172ac <_vfiprintf_r+0x44>
 8017366:	4a44      	ldr	r2, [pc, #272]	; (8017478 <_vfiprintf_r+0x210>)
 8017368:	1a80      	subs	r0, r0, r2
 801736a:	fa0b f000 	lsl.w	r0, fp, r0
 801736e:	4318      	orrs	r0, r3
 8017370:	9004      	str	r0, [sp, #16]
 8017372:	4645      	mov	r5, r8
 8017374:	e7be      	b.n	80172f4 <_vfiprintf_r+0x8c>
 8017376:	9a03      	ldr	r2, [sp, #12]
 8017378:	1d11      	adds	r1, r2, #4
 801737a:	6812      	ldr	r2, [r2, #0]
 801737c:	9103      	str	r1, [sp, #12]
 801737e:	2a00      	cmp	r2, #0
 8017380:	db01      	blt.n	8017386 <_vfiprintf_r+0x11e>
 8017382:	9207      	str	r2, [sp, #28]
 8017384:	e004      	b.n	8017390 <_vfiprintf_r+0x128>
 8017386:	4252      	negs	r2, r2
 8017388:	f043 0302 	orr.w	r3, r3, #2
 801738c:	9207      	str	r2, [sp, #28]
 801738e:	9304      	str	r3, [sp, #16]
 8017390:	f898 3000 	ldrb.w	r3, [r8]
 8017394:	2b2e      	cmp	r3, #46	; 0x2e
 8017396:	d10e      	bne.n	80173b6 <_vfiprintf_r+0x14e>
 8017398:	f898 3001 	ldrb.w	r3, [r8, #1]
 801739c:	2b2a      	cmp	r3, #42	; 0x2a
 801739e:	d138      	bne.n	8017412 <_vfiprintf_r+0x1aa>
 80173a0:	9b03      	ldr	r3, [sp, #12]
 80173a2:	1d1a      	adds	r2, r3, #4
 80173a4:	681b      	ldr	r3, [r3, #0]
 80173a6:	9203      	str	r2, [sp, #12]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	bfb8      	it	lt
 80173ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80173b0:	f108 0802 	add.w	r8, r8, #2
 80173b4:	9305      	str	r3, [sp, #20]
 80173b6:	4d33      	ldr	r5, [pc, #204]	; (8017484 <_vfiprintf_r+0x21c>)
 80173b8:	f898 1000 	ldrb.w	r1, [r8]
 80173bc:	2203      	movs	r2, #3
 80173be:	4628      	mov	r0, r5
 80173c0:	f7e8 ff26 	bl	8000210 <memchr>
 80173c4:	b140      	cbz	r0, 80173d8 <_vfiprintf_r+0x170>
 80173c6:	2340      	movs	r3, #64	; 0x40
 80173c8:	1b40      	subs	r0, r0, r5
 80173ca:	fa03 f000 	lsl.w	r0, r3, r0
 80173ce:	9b04      	ldr	r3, [sp, #16]
 80173d0:	4303      	orrs	r3, r0
 80173d2:	f108 0801 	add.w	r8, r8, #1
 80173d6:	9304      	str	r3, [sp, #16]
 80173d8:	f898 1000 	ldrb.w	r1, [r8]
 80173dc:	482a      	ldr	r0, [pc, #168]	; (8017488 <_vfiprintf_r+0x220>)
 80173de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80173e2:	2206      	movs	r2, #6
 80173e4:	f108 0701 	add.w	r7, r8, #1
 80173e8:	f7e8 ff12 	bl	8000210 <memchr>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	d037      	beq.n	8017460 <_vfiprintf_r+0x1f8>
 80173f0:	4b26      	ldr	r3, [pc, #152]	; (801748c <_vfiprintf_r+0x224>)
 80173f2:	bb1b      	cbnz	r3, 801743c <_vfiprintf_r+0x1d4>
 80173f4:	9b03      	ldr	r3, [sp, #12]
 80173f6:	3307      	adds	r3, #7
 80173f8:	f023 0307 	bic.w	r3, r3, #7
 80173fc:	3308      	adds	r3, #8
 80173fe:	9303      	str	r3, [sp, #12]
 8017400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017402:	444b      	add	r3, r9
 8017404:	9309      	str	r3, [sp, #36]	; 0x24
 8017406:	e750      	b.n	80172aa <_vfiprintf_r+0x42>
 8017408:	fb05 3202 	mla	r2, r5, r2, r3
 801740c:	2001      	movs	r0, #1
 801740e:	4688      	mov	r8, r1
 8017410:	e78a      	b.n	8017328 <_vfiprintf_r+0xc0>
 8017412:	2300      	movs	r3, #0
 8017414:	f108 0801 	add.w	r8, r8, #1
 8017418:	9305      	str	r3, [sp, #20]
 801741a:	4619      	mov	r1, r3
 801741c:	250a      	movs	r5, #10
 801741e:	4640      	mov	r0, r8
 8017420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017424:	3a30      	subs	r2, #48	; 0x30
 8017426:	2a09      	cmp	r2, #9
 8017428:	d903      	bls.n	8017432 <_vfiprintf_r+0x1ca>
 801742a:	2b00      	cmp	r3, #0
 801742c:	d0c3      	beq.n	80173b6 <_vfiprintf_r+0x14e>
 801742e:	9105      	str	r1, [sp, #20]
 8017430:	e7c1      	b.n	80173b6 <_vfiprintf_r+0x14e>
 8017432:	fb05 2101 	mla	r1, r5, r1, r2
 8017436:	2301      	movs	r3, #1
 8017438:	4680      	mov	r8, r0
 801743a:	e7f0      	b.n	801741e <_vfiprintf_r+0x1b6>
 801743c:	ab03      	add	r3, sp, #12
 801743e:	9300      	str	r3, [sp, #0]
 8017440:	4622      	mov	r2, r4
 8017442:	4b13      	ldr	r3, [pc, #76]	; (8017490 <_vfiprintf_r+0x228>)
 8017444:	a904      	add	r1, sp, #16
 8017446:	4630      	mov	r0, r6
 8017448:	f7fb fcd6 	bl	8012df8 <_printf_float>
 801744c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017450:	4681      	mov	r9, r0
 8017452:	d1d5      	bne.n	8017400 <_vfiprintf_r+0x198>
 8017454:	89a3      	ldrh	r3, [r4, #12]
 8017456:	065b      	lsls	r3, r3, #25
 8017458:	f53f af7e 	bmi.w	8017358 <_vfiprintf_r+0xf0>
 801745c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801745e:	e77d      	b.n	801735c <_vfiprintf_r+0xf4>
 8017460:	ab03      	add	r3, sp, #12
 8017462:	9300      	str	r3, [sp, #0]
 8017464:	4622      	mov	r2, r4
 8017466:	4b0a      	ldr	r3, [pc, #40]	; (8017490 <_vfiprintf_r+0x228>)
 8017468:	a904      	add	r1, sp, #16
 801746a:	4630      	mov	r0, r6
 801746c:	f7fb ff7a 	bl	8013364 <_printf_i>
 8017470:	e7ec      	b.n	801744c <_vfiprintf_r+0x1e4>
 8017472:	bf00      	nop
 8017474:	08018440 	.word	0x08018440
 8017478:	0801858c 	.word	0x0801858c
 801747c:	08018460 	.word	0x08018460
 8017480:	08018420 	.word	0x08018420
 8017484:	08018592 	.word	0x08018592
 8017488:	08018596 	.word	0x08018596
 801748c:	08012df9 	.word	0x08012df9
 8017490:	08017243 	.word	0x08017243

08017494 <_scanf_chars>:
 8017494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017498:	4615      	mov	r5, r2
 801749a:	688a      	ldr	r2, [r1, #8]
 801749c:	4680      	mov	r8, r0
 801749e:	460c      	mov	r4, r1
 80174a0:	b932      	cbnz	r2, 80174b0 <_scanf_chars+0x1c>
 80174a2:	698a      	ldr	r2, [r1, #24]
 80174a4:	2a00      	cmp	r2, #0
 80174a6:	bf14      	ite	ne
 80174a8:	f04f 32ff 	movne.w	r2, #4294967295
 80174ac:	2201      	moveq	r2, #1
 80174ae:	608a      	str	r2, [r1, #8]
 80174b0:	6822      	ldr	r2, [r4, #0]
 80174b2:	06d1      	lsls	r1, r2, #27
 80174b4:	bf5f      	itttt	pl
 80174b6:	681a      	ldrpl	r2, [r3, #0]
 80174b8:	1d11      	addpl	r1, r2, #4
 80174ba:	6019      	strpl	r1, [r3, #0]
 80174bc:	6817      	ldrpl	r7, [r2, #0]
 80174be:	2600      	movs	r6, #0
 80174c0:	69a3      	ldr	r3, [r4, #24]
 80174c2:	b1db      	cbz	r3, 80174fc <_scanf_chars+0x68>
 80174c4:	2b01      	cmp	r3, #1
 80174c6:	d107      	bne.n	80174d8 <_scanf_chars+0x44>
 80174c8:	682b      	ldr	r3, [r5, #0]
 80174ca:	6962      	ldr	r2, [r4, #20]
 80174cc:	781b      	ldrb	r3, [r3, #0]
 80174ce:	5cd3      	ldrb	r3, [r2, r3]
 80174d0:	b9a3      	cbnz	r3, 80174fc <_scanf_chars+0x68>
 80174d2:	2e00      	cmp	r6, #0
 80174d4:	d132      	bne.n	801753c <_scanf_chars+0xa8>
 80174d6:	e006      	b.n	80174e6 <_scanf_chars+0x52>
 80174d8:	2b02      	cmp	r3, #2
 80174da:	d007      	beq.n	80174ec <_scanf_chars+0x58>
 80174dc:	2e00      	cmp	r6, #0
 80174de:	d12d      	bne.n	801753c <_scanf_chars+0xa8>
 80174e0:	69a3      	ldr	r3, [r4, #24]
 80174e2:	2b01      	cmp	r3, #1
 80174e4:	d12a      	bne.n	801753c <_scanf_chars+0xa8>
 80174e6:	2001      	movs	r0, #1
 80174e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ec:	f7fe fe28 	bl	8016140 <__locale_ctype_ptr>
 80174f0:	682b      	ldr	r3, [r5, #0]
 80174f2:	781b      	ldrb	r3, [r3, #0]
 80174f4:	4418      	add	r0, r3
 80174f6:	7843      	ldrb	r3, [r0, #1]
 80174f8:	071b      	lsls	r3, r3, #28
 80174fa:	d4ef      	bmi.n	80174dc <_scanf_chars+0x48>
 80174fc:	6823      	ldr	r3, [r4, #0]
 80174fe:	06da      	lsls	r2, r3, #27
 8017500:	bf5e      	ittt	pl
 8017502:	682b      	ldrpl	r3, [r5, #0]
 8017504:	781b      	ldrbpl	r3, [r3, #0]
 8017506:	703b      	strbpl	r3, [r7, #0]
 8017508:	682a      	ldr	r2, [r5, #0]
 801750a:	686b      	ldr	r3, [r5, #4]
 801750c:	f102 0201 	add.w	r2, r2, #1
 8017510:	602a      	str	r2, [r5, #0]
 8017512:	68a2      	ldr	r2, [r4, #8]
 8017514:	f103 33ff 	add.w	r3, r3, #4294967295
 8017518:	f102 32ff 	add.w	r2, r2, #4294967295
 801751c:	606b      	str	r3, [r5, #4]
 801751e:	f106 0601 	add.w	r6, r6, #1
 8017522:	bf58      	it	pl
 8017524:	3701      	addpl	r7, #1
 8017526:	60a2      	str	r2, [r4, #8]
 8017528:	b142      	cbz	r2, 801753c <_scanf_chars+0xa8>
 801752a:	2b00      	cmp	r3, #0
 801752c:	dcc8      	bgt.n	80174c0 <_scanf_chars+0x2c>
 801752e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017532:	4629      	mov	r1, r5
 8017534:	4640      	mov	r0, r8
 8017536:	4798      	blx	r3
 8017538:	2800      	cmp	r0, #0
 801753a:	d0c1      	beq.n	80174c0 <_scanf_chars+0x2c>
 801753c:	6823      	ldr	r3, [r4, #0]
 801753e:	f013 0310 	ands.w	r3, r3, #16
 8017542:	d105      	bne.n	8017550 <_scanf_chars+0xbc>
 8017544:	68e2      	ldr	r2, [r4, #12]
 8017546:	3201      	adds	r2, #1
 8017548:	60e2      	str	r2, [r4, #12]
 801754a:	69a2      	ldr	r2, [r4, #24]
 801754c:	b102      	cbz	r2, 8017550 <_scanf_chars+0xbc>
 801754e:	703b      	strb	r3, [r7, #0]
 8017550:	6923      	ldr	r3, [r4, #16]
 8017552:	441e      	add	r6, r3
 8017554:	6126      	str	r6, [r4, #16]
 8017556:	2000      	movs	r0, #0
 8017558:	e7c6      	b.n	80174e8 <_scanf_chars+0x54>
	...

0801755c <_scanf_i>:
 801755c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017560:	469a      	mov	sl, r3
 8017562:	4b74      	ldr	r3, [pc, #464]	; (8017734 <_scanf_i+0x1d8>)
 8017564:	460c      	mov	r4, r1
 8017566:	4683      	mov	fp, r0
 8017568:	4616      	mov	r6, r2
 801756a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801756e:	b087      	sub	sp, #28
 8017570:	ab03      	add	r3, sp, #12
 8017572:	68a7      	ldr	r7, [r4, #8]
 8017574:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017578:	4b6f      	ldr	r3, [pc, #444]	; (8017738 <_scanf_i+0x1dc>)
 801757a:	69a1      	ldr	r1, [r4, #24]
 801757c:	4a6f      	ldr	r2, [pc, #444]	; (801773c <_scanf_i+0x1e0>)
 801757e:	2903      	cmp	r1, #3
 8017580:	bf08      	it	eq
 8017582:	461a      	moveq	r2, r3
 8017584:	1e7b      	subs	r3, r7, #1
 8017586:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 801758a:	bf84      	itt	hi
 801758c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017590:	60a3      	strhi	r3, [r4, #8]
 8017592:	6823      	ldr	r3, [r4, #0]
 8017594:	9200      	str	r2, [sp, #0]
 8017596:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801759a:	bf88      	it	hi
 801759c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80175a0:	f104 091c 	add.w	r9, r4, #28
 80175a4:	6023      	str	r3, [r4, #0]
 80175a6:	bf8c      	ite	hi
 80175a8:	197f      	addhi	r7, r7, r5
 80175aa:	2700      	movls	r7, #0
 80175ac:	464b      	mov	r3, r9
 80175ae:	f04f 0800 	mov.w	r8, #0
 80175b2:	9301      	str	r3, [sp, #4]
 80175b4:	6831      	ldr	r1, [r6, #0]
 80175b6:	ab03      	add	r3, sp, #12
 80175b8:	2202      	movs	r2, #2
 80175ba:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80175be:	7809      	ldrb	r1, [r1, #0]
 80175c0:	f7e8 fe26 	bl	8000210 <memchr>
 80175c4:	9b01      	ldr	r3, [sp, #4]
 80175c6:	b330      	cbz	r0, 8017616 <_scanf_i+0xba>
 80175c8:	f1b8 0f01 	cmp.w	r8, #1
 80175cc:	d15a      	bne.n	8017684 <_scanf_i+0x128>
 80175ce:	6862      	ldr	r2, [r4, #4]
 80175d0:	b92a      	cbnz	r2, 80175de <_scanf_i+0x82>
 80175d2:	6822      	ldr	r2, [r4, #0]
 80175d4:	2108      	movs	r1, #8
 80175d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80175da:	6061      	str	r1, [r4, #4]
 80175dc:	6022      	str	r2, [r4, #0]
 80175de:	6822      	ldr	r2, [r4, #0]
 80175e0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80175e4:	6022      	str	r2, [r4, #0]
 80175e6:	68a2      	ldr	r2, [r4, #8]
 80175e8:	1e51      	subs	r1, r2, #1
 80175ea:	60a1      	str	r1, [r4, #8]
 80175ec:	b19a      	cbz	r2, 8017616 <_scanf_i+0xba>
 80175ee:	6832      	ldr	r2, [r6, #0]
 80175f0:	1c51      	adds	r1, r2, #1
 80175f2:	6031      	str	r1, [r6, #0]
 80175f4:	7812      	ldrb	r2, [r2, #0]
 80175f6:	701a      	strb	r2, [r3, #0]
 80175f8:	1c5d      	adds	r5, r3, #1
 80175fa:	6873      	ldr	r3, [r6, #4]
 80175fc:	3b01      	subs	r3, #1
 80175fe:	2b00      	cmp	r3, #0
 8017600:	6073      	str	r3, [r6, #4]
 8017602:	dc07      	bgt.n	8017614 <_scanf_i+0xb8>
 8017604:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017608:	4631      	mov	r1, r6
 801760a:	4658      	mov	r0, fp
 801760c:	4798      	blx	r3
 801760e:	2800      	cmp	r0, #0
 8017610:	f040 8086 	bne.w	8017720 <_scanf_i+0x1c4>
 8017614:	462b      	mov	r3, r5
 8017616:	f108 0801 	add.w	r8, r8, #1
 801761a:	f1b8 0f03 	cmp.w	r8, #3
 801761e:	d1c8      	bne.n	80175b2 <_scanf_i+0x56>
 8017620:	6862      	ldr	r2, [r4, #4]
 8017622:	b90a      	cbnz	r2, 8017628 <_scanf_i+0xcc>
 8017624:	220a      	movs	r2, #10
 8017626:	6062      	str	r2, [r4, #4]
 8017628:	6862      	ldr	r2, [r4, #4]
 801762a:	4945      	ldr	r1, [pc, #276]	; (8017740 <_scanf_i+0x1e4>)
 801762c:	6960      	ldr	r0, [r4, #20]
 801762e:	9301      	str	r3, [sp, #4]
 8017630:	1a89      	subs	r1, r1, r2
 8017632:	f000 f8df 	bl	80177f4 <__sccl>
 8017636:	9b01      	ldr	r3, [sp, #4]
 8017638:	f04f 0800 	mov.w	r8, #0
 801763c:	461d      	mov	r5, r3
 801763e:	68a3      	ldr	r3, [r4, #8]
 8017640:	6822      	ldr	r2, [r4, #0]
 8017642:	2b00      	cmp	r3, #0
 8017644:	d03a      	beq.n	80176bc <_scanf_i+0x160>
 8017646:	6831      	ldr	r1, [r6, #0]
 8017648:	6960      	ldr	r0, [r4, #20]
 801764a:	f891 c000 	ldrb.w	ip, [r1]
 801764e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017652:	2800      	cmp	r0, #0
 8017654:	d032      	beq.n	80176bc <_scanf_i+0x160>
 8017656:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801765a:	d121      	bne.n	80176a0 <_scanf_i+0x144>
 801765c:	0510      	lsls	r0, r2, #20
 801765e:	d51f      	bpl.n	80176a0 <_scanf_i+0x144>
 8017660:	f108 0801 	add.w	r8, r8, #1
 8017664:	b117      	cbz	r7, 801766c <_scanf_i+0x110>
 8017666:	3301      	adds	r3, #1
 8017668:	3f01      	subs	r7, #1
 801766a:	60a3      	str	r3, [r4, #8]
 801766c:	6873      	ldr	r3, [r6, #4]
 801766e:	3b01      	subs	r3, #1
 8017670:	2b00      	cmp	r3, #0
 8017672:	6073      	str	r3, [r6, #4]
 8017674:	dd1b      	ble.n	80176ae <_scanf_i+0x152>
 8017676:	6833      	ldr	r3, [r6, #0]
 8017678:	3301      	adds	r3, #1
 801767a:	6033      	str	r3, [r6, #0]
 801767c:	68a3      	ldr	r3, [r4, #8]
 801767e:	3b01      	subs	r3, #1
 8017680:	60a3      	str	r3, [r4, #8]
 8017682:	e7dc      	b.n	801763e <_scanf_i+0xe2>
 8017684:	f1b8 0f02 	cmp.w	r8, #2
 8017688:	d1ad      	bne.n	80175e6 <_scanf_i+0x8a>
 801768a:	6822      	ldr	r2, [r4, #0]
 801768c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017690:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017694:	d1bf      	bne.n	8017616 <_scanf_i+0xba>
 8017696:	2110      	movs	r1, #16
 8017698:	6061      	str	r1, [r4, #4]
 801769a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801769e:	e7a1      	b.n	80175e4 <_scanf_i+0x88>
 80176a0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80176a4:	6022      	str	r2, [r4, #0]
 80176a6:	780b      	ldrb	r3, [r1, #0]
 80176a8:	702b      	strb	r3, [r5, #0]
 80176aa:	3501      	adds	r5, #1
 80176ac:	e7de      	b.n	801766c <_scanf_i+0x110>
 80176ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80176b2:	4631      	mov	r1, r6
 80176b4:	4658      	mov	r0, fp
 80176b6:	4798      	blx	r3
 80176b8:	2800      	cmp	r0, #0
 80176ba:	d0df      	beq.n	801767c <_scanf_i+0x120>
 80176bc:	6823      	ldr	r3, [r4, #0]
 80176be:	05d9      	lsls	r1, r3, #23
 80176c0:	d50c      	bpl.n	80176dc <_scanf_i+0x180>
 80176c2:	454d      	cmp	r5, r9
 80176c4:	d908      	bls.n	80176d8 <_scanf_i+0x17c>
 80176c6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80176ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80176ce:	4632      	mov	r2, r6
 80176d0:	4658      	mov	r0, fp
 80176d2:	4798      	blx	r3
 80176d4:	1e6f      	subs	r7, r5, #1
 80176d6:	463d      	mov	r5, r7
 80176d8:	454d      	cmp	r5, r9
 80176da:	d029      	beq.n	8017730 <_scanf_i+0x1d4>
 80176dc:	6822      	ldr	r2, [r4, #0]
 80176de:	f012 0210 	ands.w	r2, r2, #16
 80176e2:	d113      	bne.n	801770c <_scanf_i+0x1b0>
 80176e4:	702a      	strb	r2, [r5, #0]
 80176e6:	6863      	ldr	r3, [r4, #4]
 80176e8:	9e00      	ldr	r6, [sp, #0]
 80176ea:	4649      	mov	r1, r9
 80176ec:	4658      	mov	r0, fp
 80176ee:	47b0      	blx	r6
 80176f0:	f8da 3000 	ldr.w	r3, [sl]
 80176f4:	6821      	ldr	r1, [r4, #0]
 80176f6:	1d1a      	adds	r2, r3, #4
 80176f8:	f8ca 2000 	str.w	r2, [sl]
 80176fc:	f011 0f20 	tst.w	r1, #32
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	d010      	beq.n	8017726 <_scanf_i+0x1ca>
 8017704:	6018      	str	r0, [r3, #0]
 8017706:	68e3      	ldr	r3, [r4, #12]
 8017708:	3301      	adds	r3, #1
 801770a:	60e3      	str	r3, [r4, #12]
 801770c:	eba5 0509 	sub.w	r5, r5, r9
 8017710:	44a8      	add	r8, r5
 8017712:	6925      	ldr	r5, [r4, #16]
 8017714:	4445      	add	r5, r8
 8017716:	6125      	str	r5, [r4, #16]
 8017718:	2000      	movs	r0, #0
 801771a:	b007      	add	sp, #28
 801771c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017720:	f04f 0800 	mov.w	r8, #0
 8017724:	e7ca      	b.n	80176bc <_scanf_i+0x160>
 8017726:	07ca      	lsls	r2, r1, #31
 8017728:	bf4c      	ite	mi
 801772a:	8018      	strhmi	r0, [r3, #0]
 801772c:	6018      	strpl	r0, [r3, #0]
 801772e:	e7ea      	b.n	8017706 <_scanf_i+0x1aa>
 8017730:	2001      	movs	r0, #1
 8017732:	e7f2      	b.n	801771a <_scanf_i+0x1be>
 8017734:	08017d1c 	.word	0x08017d1c
 8017738:	08014949 	.word	0x08014949
 801773c:	08017971 	.word	0x08017971
 8017740:	080185ad 	.word	0x080185ad

08017744 <_putc_r>:
 8017744:	b570      	push	{r4, r5, r6, lr}
 8017746:	460d      	mov	r5, r1
 8017748:	4614      	mov	r4, r2
 801774a:	4606      	mov	r6, r0
 801774c:	b118      	cbz	r0, 8017756 <_putc_r+0x12>
 801774e:	6983      	ldr	r3, [r0, #24]
 8017750:	b90b      	cbnz	r3, 8017756 <_putc_r+0x12>
 8017752:	f7fe f941 	bl	80159d8 <__sinit>
 8017756:	4b13      	ldr	r3, [pc, #76]	; (80177a4 <_putc_r+0x60>)
 8017758:	429c      	cmp	r4, r3
 801775a:	d112      	bne.n	8017782 <_putc_r+0x3e>
 801775c:	6874      	ldr	r4, [r6, #4]
 801775e:	68a3      	ldr	r3, [r4, #8]
 8017760:	3b01      	subs	r3, #1
 8017762:	2b00      	cmp	r3, #0
 8017764:	60a3      	str	r3, [r4, #8]
 8017766:	da16      	bge.n	8017796 <_putc_r+0x52>
 8017768:	69a2      	ldr	r2, [r4, #24]
 801776a:	4293      	cmp	r3, r2
 801776c:	db02      	blt.n	8017774 <_putc_r+0x30>
 801776e:	b2eb      	uxtb	r3, r5
 8017770:	2b0a      	cmp	r3, #10
 8017772:	d110      	bne.n	8017796 <_putc_r+0x52>
 8017774:	4622      	mov	r2, r4
 8017776:	4629      	mov	r1, r5
 8017778:	4630      	mov	r0, r6
 801777a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801777e:	f7fd b915 	b.w	80149ac <__swbuf_r>
 8017782:	4b09      	ldr	r3, [pc, #36]	; (80177a8 <_putc_r+0x64>)
 8017784:	429c      	cmp	r4, r3
 8017786:	d101      	bne.n	801778c <_putc_r+0x48>
 8017788:	68b4      	ldr	r4, [r6, #8]
 801778a:	e7e8      	b.n	801775e <_putc_r+0x1a>
 801778c:	4b07      	ldr	r3, [pc, #28]	; (80177ac <_putc_r+0x68>)
 801778e:	429c      	cmp	r4, r3
 8017790:	bf08      	it	eq
 8017792:	68f4      	ldreq	r4, [r6, #12]
 8017794:	e7e3      	b.n	801775e <_putc_r+0x1a>
 8017796:	6823      	ldr	r3, [r4, #0]
 8017798:	1c5a      	adds	r2, r3, #1
 801779a:	6022      	str	r2, [r4, #0]
 801779c:	701d      	strb	r5, [r3, #0]
 801779e:	b2e8      	uxtb	r0, r5
 80177a0:	bd70      	pop	{r4, r5, r6, pc}
 80177a2:	bf00      	nop
 80177a4:	08018440 	.word	0x08018440
 80177a8:	08018460 	.word	0x08018460
 80177ac:	08018420 	.word	0x08018420

080177b0 <_read_r>:
 80177b0:	b538      	push	{r3, r4, r5, lr}
 80177b2:	4c07      	ldr	r4, [pc, #28]	; (80177d0 <_read_r+0x20>)
 80177b4:	4605      	mov	r5, r0
 80177b6:	4608      	mov	r0, r1
 80177b8:	4611      	mov	r1, r2
 80177ba:	2200      	movs	r2, #0
 80177bc:	6022      	str	r2, [r4, #0]
 80177be:	461a      	mov	r2, r3
 80177c0:	f7ed ffee 	bl	80057a0 <_read>
 80177c4:	1c43      	adds	r3, r0, #1
 80177c6:	d102      	bne.n	80177ce <_read_r+0x1e>
 80177c8:	6823      	ldr	r3, [r4, #0]
 80177ca:	b103      	cbz	r3, 80177ce <_read_r+0x1e>
 80177cc:	602b      	str	r3, [r5, #0]
 80177ce:	bd38      	pop	{r3, r4, r5, pc}
 80177d0:	20023ed0 	.word	0x20023ed0

080177d4 <_sbrk_r>:
 80177d4:	b538      	push	{r3, r4, r5, lr}
 80177d6:	4c06      	ldr	r4, [pc, #24]	; (80177f0 <_sbrk_r+0x1c>)
 80177d8:	2300      	movs	r3, #0
 80177da:	4605      	mov	r5, r0
 80177dc:	4608      	mov	r0, r1
 80177de:	6023      	str	r3, [r4, #0]
 80177e0:	f7ee f830 	bl	8005844 <_sbrk>
 80177e4:	1c43      	adds	r3, r0, #1
 80177e6:	d102      	bne.n	80177ee <_sbrk_r+0x1a>
 80177e8:	6823      	ldr	r3, [r4, #0]
 80177ea:	b103      	cbz	r3, 80177ee <_sbrk_r+0x1a>
 80177ec:	602b      	str	r3, [r5, #0]
 80177ee:	bd38      	pop	{r3, r4, r5, pc}
 80177f0:	20023ed0 	.word	0x20023ed0

080177f4 <__sccl>:
 80177f4:	b570      	push	{r4, r5, r6, lr}
 80177f6:	780b      	ldrb	r3, [r1, #0]
 80177f8:	2b5e      	cmp	r3, #94	; 0x5e
 80177fa:	bf13      	iteet	ne
 80177fc:	1c4a      	addne	r2, r1, #1
 80177fe:	1c8a      	addeq	r2, r1, #2
 8017800:	784b      	ldrbeq	r3, [r1, #1]
 8017802:	2100      	movne	r1, #0
 8017804:	bf08      	it	eq
 8017806:	2101      	moveq	r1, #1
 8017808:	1e44      	subs	r4, r0, #1
 801780a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801780e:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017812:	42ac      	cmp	r4, r5
 8017814:	d1fb      	bne.n	801780e <__sccl+0x1a>
 8017816:	b913      	cbnz	r3, 801781e <__sccl+0x2a>
 8017818:	3a01      	subs	r2, #1
 801781a:	4610      	mov	r0, r2
 801781c:	bd70      	pop	{r4, r5, r6, pc}
 801781e:	f081 0401 	eor.w	r4, r1, #1
 8017822:	54c4      	strb	r4, [r0, r3]
 8017824:	1c51      	adds	r1, r2, #1
 8017826:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 801782a:	2d2d      	cmp	r5, #45	; 0x2d
 801782c:	f101 36ff 	add.w	r6, r1, #4294967295
 8017830:	460a      	mov	r2, r1
 8017832:	d006      	beq.n	8017842 <__sccl+0x4e>
 8017834:	2d5d      	cmp	r5, #93	; 0x5d
 8017836:	d0f0      	beq.n	801781a <__sccl+0x26>
 8017838:	b90d      	cbnz	r5, 801783e <__sccl+0x4a>
 801783a:	4632      	mov	r2, r6
 801783c:	e7ed      	b.n	801781a <__sccl+0x26>
 801783e:	462b      	mov	r3, r5
 8017840:	e7ef      	b.n	8017822 <__sccl+0x2e>
 8017842:	780e      	ldrb	r6, [r1, #0]
 8017844:	2e5d      	cmp	r6, #93	; 0x5d
 8017846:	d0fa      	beq.n	801783e <__sccl+0x4a>
 8017848:	42b3      	cmp	r3, r6
 801784a:	dcf8      	bgt.n	801783e <__sccl+0x4a>
 801784c:	3301      	adds	r3, #1
 801784e:	429e      	cmp	r6, r3
 8017850:	54c4      	strb	r4, [r0, r3]
 8017852:	dcfb      	bgt.n	801784c <__sccl+0x58>
 8017854:	3102      	adds	r1, #2
 8017856:	e7e6      	b.n	8017826 <__sccl+0x32>

08017858 <strncmp>:
 8017858:	b510      	push	{r4, lr}
 801785a:	b16a      	cbz	r2, 8017878 <strncmp+0x20>
 801785c:	3901      	subs	r1, #1
 801785e:	1884      	adds	r4, r0, r2
 8017860:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017864:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017868:	4293      	cmp	r3, r2
 801786a:	d103      	bne.n	8017874 <strncmp+0x1c>
 801786c:	42a0      	cmp	r0, r4
 801786e:	d001      	beq.n	8017874 <strncmp+0x1c>
 8017870:	2b00      	cmp	r3, #0
 8017872:	d1f5      	bne.n	8017860 <strncmp+0x8>
 8017874:	1a98      	subs	r0, r3, r2
 8017876:	bd10      	pop	{r4, pc}
 8017878:	4610      	mov	r0, r2
 801787a:	e7fc      	b.n	8017876 <strncmp+0x1e>

0801787c <_strtoul_l.isra.0>:
 801787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017880:	4680      	mov	r8, r0
 8017882:	4689      	mov	r9, r1
 8017884:	4692      	mov	sl, r2
 8017886:	461e      	mov	r6, r3
 8017888:	460f      	mov	r7, r1
 801788a:	463d      	mov	r5, r7
 801788c:	9808      	ldr	r0, [sp, #32]
 801788e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017892:	f7fe fc51 	bl	8016138 <__locale_ctype_ptr_l>
 8017896:	4420      	add	r0, r4
 8017898:	7843      	ldrb	r3, [r0, #1]
 801789a:	f013 0308 	ands.w	r3, r3, #8
 801789e:	d130      	bne.n	8017902 <_strtoul_l.isra.0+0x86>
 80178a0:	2c2d      	cmp	r4, #45	; 0x2d
 80178a2:	d130      	bne.n	8017906 <_strtoul_l.isra.0+0x8a>
 80178a4:	787c      	ldrb	r4, [r7, #1]
 80178a6:	1cbd      	adds	r5, r7, #2
 80178a8:	2101      	movs	r1, #1
 80178aa:	2e00      	cmp	r6, #0
 80178ac:	d05c      	beq.n	8017968 <_strtoul_l.isra.0+0xec>
 80178ae:	2e10      	cmp	r6, #16
 80178b0:	d109      	bne.n	80178c6 <_strtoul_l.isra.0+0x4a>
 80178b2:	2c30      	cmp	r4, #48	; 0x30
 80178b4:	d107      	bne.n	80178c6 <_strtoul_l.isra.0+0x4a>
 80178b6:	782b      	ldrb	r3, [r5, #0]
 80178b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80178bc:	2b58      	cmp	r3, #88	; 0x58
 80178be:	d14e      	bne.n	801795e <_strtoul_l.isra.0+0xe2>
 80178c0:	786c      	ldrb	r4, [r5, #1]
 80178c2:	2610      	movs	r6, #16
 80178c4:	3502      	adds	r5, #2
 80178c6:	f04f 32ff 	mov.w	r2, #4294967295
 80178ca:	2300      	movs	r3, #0
 80178cc:	fbb2 f2f6 	udiv	r2, r2, r6
 80178d0:	fb06 fc02 	mul.w	ip, r6, r2
 80178d4:	ea6f 0c0c 	mvn.w	ip, ip
 80178d8:	4618      	mov	r0, r3
 80178da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80178de:	2f09      	cmp	r7, #9
 80178e0:	d817      	bhi.n	8017912 <_strtoul_l.isra.0+0x96>
 80178e2:	463c      	mov	r4, r7
 80178e4:	42a6      	cmp	r6, r4
 80178e6:	dd23      	ble.n	8017930 <_strtoul_l.isra.0+0xb4>
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	db1e      	blt.n	801792a <_strtoul_l.isra.0+0xae>
 80178ec:	4282      	cmp	r2, r0
 80178ee:	d31c      	bcc.n	801792a <_strtoul_l.isra.0+0xae>
 80178f0:	d101      	bne.n	80178f6 <_strtoul_l.isra.0+0x7a>
 80178f2:	45a4      	cmp	ip, r4
 80178f4:	db19      	blt.n	801792a <_strtoul_l.isra.0+0xae>
 80178f6:	fb00 4006 	mla	r0, r0, r6, r4
 80178fa:	2301      	movs	r3, #1
 80178fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017900:	e7eb      	b.n	80178da <_strtoul_l.isra.0+0x5e>
 8017902:	462f      	mov	r7, r5
 8017904:	e7c1      	b.n	801788a <_strtoul_l.isra.0+0xe>
 8017906:	2c2b      	cmp	r4, #43	; 0x2b
 8017908:	bf04      	itt	eq
 801790a:	1cbd      	addeq	r5, r7, #2
 801790c:	787c      	ldrbeq	r4, [r7, #1]
 801790e:	4619      	mov	r1, r3
 8017910:	e7cb      	b.n	80178aa <_strtoul_l.isra.0+0x2e>
 8017912:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8017916:	2f19      	cmp	r7, #25
 8017918:	d801      	bhi.n	801791e <_strtoul_l.isra.0+0xa2>
 801791a:	3c37      	subs	r4, #55	; 0x37
 801791c:	e7e2      	b.n	80178e4 <_strtoul_l.isra.0+0x68>
 801791e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017922:	2f19      	cmp	r7, #25
 8017924:	d804      	bhi.n	8017930 <_strtoul_l.isra.0+0xb4>
 8017926:	3c57      	subs	r4, #87	; 0x57
 8017928:	e7dc      	b.n	80178e4 <_strtoul_l.isra.0+0x68>
 801792a:	f04f 33ff 	mov.w	r3, #4294967295
 801792e:	e7e5      	b.n	80178fc <_strtoul_l.isra.0+0x80>
 8017930:	2b00      	cmp	r3, #0
 8017932:	da09      	bge.n	8017948 <_strtoul_l.isra.0+0xcc>
 8017934:	2322      	movs	r3, #34	; 0x22
 8017936:	f8c8 3000 	str.w	r3, [r8]
 801793a:	f04f 30ff 	mov.w	r0, #4294967295
 801793e:	f1ba 0f00 	cmp.w	sl, #0
 8017942:	d107      	bne.n	8017954 <_strtoul_l.isra.0+0xd8>
 8017944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017948:	b101      	cbz	r1, 801794c <_strtoul_l.isra.0+0xd0>
 801794a:	4240      	negs	r0, r0
 801794c:	f1ba 0f00 	cmp.w	sl, #0
 8017950:	d0f8      	beq.n	8017944 <_strtoul_l.isra.0+0xc8>
 8017952:	b10b      	cbz	r3, 8017958 <_strtoul_l.isra.0+0xdc>
 8017954:	f105 39ff 	add.w	r9, r5, #4294967295
 8017958:	f8ca 9000 	str.w	r9, [sl]
 801795c:	e7f2      	b.n	8017944 <_strtoul_l.isra.0+0xc8>
 801795e:	2430      	movs	r4, #48	; 0x30
 8017960:	2e00      	cmp	r6, #0
 8017962:	d1b0      	bne.n	80178c6 <_strtoul_l.isra.0+0x4a>
 8017964:	2608      	movs	r6, #8
 8017966:	e7ae      	b.n	80178c6 <_strtoul_l.isra.0+0x4a>
 8017968:	2c30      	cmp	r4, #48	; 0x30
 801796a:	d0a4      	beq.n	80178b6 <_strtoul_l.isra.0+0x3a>
 801796c:	260a      	movs	r6, #10
 801796e:	e7aa      	b.n	80178c6 <_strtoul_l.isra.0+0x4a>

08017970 <_strtoul_r>:
 8017970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017972:	4c06      	ldr	r4, [pc, #24]	; (801798c <_strtoul_r+0x1c>)
 8017974:	4d06      	ldr	r5, [pc, #24]	; (8017990 <_strtoul_r+0x20>)
 8017976:	6824      	ldr	r4, [r4, #0]
 8017978:	6a24      	ldr	r4, [r4, #32]
 801797a:	2c00      	cmp	r4, #0
 801797c:	bf08      	it	eq
 801797e:	462c      	moveq	r4, r5
 8017980:	9400      	str	r4, [sp, #0]
 8017982:	f7ff ff7b 	bl	801787c <_strtoul_l.isra.0>
 8017986:	b003      	add	sp, #12
 8017988:	bd30      	pop	{r4, r5, pc}
 801798a:	bf00      	nop
 801798c:	2000000c 	.word	0x2000000c
 8017990:	20000070 	.word	0x20000070

08017994 <__submore>:
 8017994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017998:	460c      	mov	r4, r1
 801799a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801799c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179a0:	4299      	cmp	r1, r3
 80179a2:	d11d      	bne.n	80179e0 <__submore+0x4c>
 80179a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80179a8:	f7ff f8de 	bl	8016b68 <_malloc_r>
 80179ac:	b918      	cbnz	r0, 80179b6 <__submore+0x22>
 80179ae:	f04f 30ff 	mov.w	r0, #4294967295
 80179b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80179b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80179ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80179bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80179c0:	6360      	str	r0, [r4, #52]	; 0x34
 80179c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80179c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80179ca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80179ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80179d2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80179d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80179da:	6020      	str	r0, [r4, #0]
 80179dc:	2000      	movs	r0, #0
 80179de:	e7e8      	b.n	80179b2 <__submore+0x1e>
 80179e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80179e2:	0077      	lsls	r7, r6, #1
 80179e4:	463a      	mov	r2, r7
 80179e6:	f000 f85a 	bl	8017a9e <_realloc_r>
 80179ea:	4605      	mov	r5, r0
 80179ec:	2800      	cmp	r0, #0
 80179ee:	d0de      	beq.n	80179ae <__submore+0x1a>
 80179f0:	eb00 0806 	add.w	r8, r0, r6
 80179f4:	4601      	mov	r1, r0
 80179f6:	4632      	mov	r2, r6
 80179f8:	4640      	mov	r0, r8
 80179fa:	f7fe fc4f 	bl	801629c <memcpy>
 80179fe:	f8c4 8000 	str.w	r8, [r4]
 8017a02:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8017a06:	e7e9      	b.n	80179dc <__submore+0x48>

08017a08 <__ascii_wctomb>:
 8017a08:	b149      	cbz	r1, 8017a1e <__ascii_wctomb+0x16>
 8017a0a:	2aff      	cmp	r2, #255	; 0xff
 8017a0c:	bf85      	ittet	hi
 8017a0e:	238a      	movhi	r3, #138	; 0x8a
 8017a10:	6003      	strhi	r3, [r0, #0]
 8017a12:	700a      	strbls	r2, [r1, #0]
 8017a14:	f04f 30ff 	movhi.w	r0, #4294967295
 8017a18:	bf98      	it	ls
 8017a1a:	2001      	movls	r0, #1
 8017a1c:	4770      	bx	lr
 8017a1e:	4608      	mov	r0, r1
 8017a20:	4770      	bx	lr
	...

08017a24 <_fstat_r>:
 8017a24:	b538      	push	{r3, r4, r5, lr}
 8017a26:	4c07      	ldr	r4, [pc, #28]	; (8017a44 <_fstat_r+0x20>)
 8017a28:	2300      	movs	r3, #0
 8017a2a:	4605      	mov	r5, r0
 8017a2c:	4608      	mov	r0, r1
 8017a2e:	4611      	mov	r1, r2
 8017a30:	6023      	str	r3, [r4, #0]
 8017a32:	f7ed fede 	bl	80057f2 <_fstat>
 8017a36:	1c43      	adds	r3, r0, #1
 8017a38:	d102      	bne.n	8017a40 <_fstat_r+0x1c>
 8017a3a:	6823      	ldr	r3, [r4, #0]
 8017a3c:	b103      	cbz	r3, 8017a40 <_fstat_r+0x1c>
 8017a3e:	602b      	str	r3, [r5, #0]
 8017a40:	bd38      	pop	{r3, r4, r5, pc}
 8017a42:	bf00      	nop
 8017a44:	20023ed0 	.word	0x20023ed0

08017a48 <_isatty_r>:
 8017a48:	b538      	push	{r3, r4, r5, lr}
 8017a4a:	4c06      	ldr	r4, [pc, #24]	; (8017a64 <_isatty_r+0x1c>)
 8017a4c:	2300      	movs	r3, #0
 8017a4e:	4605      	mov	r5, r0
 8017a50:	4608      	mov	r0, r1
 8017a52:	6023      	str	r3, [r4, #0]
 8017a54:	f7ed fedd 	bl	8005812 <_isatty>
 8017a58:	1c43      	adds	r3, r0, #1
 8017a5a:	d102      	bne.n	8017a62 <_isatty_r+0x1a>
 8017a5c:	6823      	ldr	r3, [r4, #0]
 8017a5e:	b103      	cbz	r3, 8017a62 <_isatty_r+0x1a>
 8017a60:	602b      	str	r3, [r5, #0]
 8017a62:	bd38      	pop	{r3, r4, r5, pc}
 8017a64:	20023ed0 	.word	0x20023ed0

08017a68 <memmove>:
 8017a68:	4288      	cmp	r0, r1
 8017a6a:	b510      	push	{r4, lr}
 8017a6c:	eb01 0302 	add.w	r3, r1, r2
 8017a70:	d807      	bhi.n	8017a82 <memmove+0x1a>
 8017a72:	1e42      	subs	r2, r0, #1
 8017a74:	4299      	cmp	r1, r3
 8017a76:	d00a      	beq.n	8017a8e <memmove+0x26>
 8017a78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017a80:	e7f8      	b.n	8017a74 <memmove+0xc>
 8017a82:	4283      	cmp	r3, r0
 8017a84:	d9f5      	bls.n	8017a72 <memmove+0xa>
 8017a86:	1881      	adds	r1, r0, r2
 8017a88:	1ad2      	subs	r2, r2, r3
 8017a8a:	42d3      	cmn	r3, r2
 8017a8c:	d100      	bne.n	8017a90 <memmove+0x28>
 8017a8e:	bd10      	pop	{r4, pc}
 8017a90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017a94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017a98:	e7f7      	b.n	8017a8a <memmove+0x22>

08017a9a <__malloc_lock>:
 8017a9a:	4770      	bx	lr

08017a9c <__malloc_unlock>:
 8017a9c:	4770      	bx	lr

08017a9e <_realloc_r>:
 8017a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017aa0:	4607      	mov	r7, r0
 8017aa2:	4614      	mov	r4, r2
 8017aa4:	460e      	mov	r6, r1
 8017aa6:	b921      	cbnz	r1, 8017ab2 <_realloc_r+0x14>
 8017aa8:	4611      	mov	r1, r2
 8017aaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017aae:	f7ff b85b 	b.w	8016b68 <_malloc_r>
 8017ab2:	b922      	cbnz	r2, 8017abe <_realloc_r+0x20>
 8017ab4:	f7ff f80a 	bl	8016acc <_free_r>
 8017ab8:	4625      	mov	r5, r4
 8017aba:	4628      	mov	r0, r5
 8017abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017abe:	f000 f814 	bl	8017aea <_malloc_usable_size_r>
 8017ac2:	42a0      	cmp	r0, r4
 8017ac4:	d20f      	bcs.n	8017ae6 <_realloc_r+0x48>
 8017ac6:	4621      	mov	r1, r4
 8017ac8:	4638      	mov	r0, r7
 8017aca:	f7ff f84d 	bl	8016b68 <_malloc_r>
 8017ace:	4605      	mov	r5, r0
 8017ad0:	2800      	cmp	r0, #0
 8017ad2:	d0f2      	beq.n	8017aba <_realloc_r+0x1c>
 8017ad4:	4631      	mov	r1, r6
 8017ad6:	4622      	mov	r2, r4
 8017ad8:	f7fe fbe0 	bl	801629c <memcpy>
 8017adc:	4631      	mov	r1, r6
 8017ade:	4638      	mov	r0, r7
 8017ae0:	f7fe fff4 	bl	8016acc <_free_r>
 8017ae4:	e7e9      	b.n	8017aba <_realloc_r+0x1c>
 8017ae6:	4635      	mov	r5, r6
 8017ae8:	e7e7      	b.n	8017aba <_realloc_r+0x1c>

08017aea <_malloc_usable_size_r>:
 8017aea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017aee:	1f18      	subs	r0, r3, #4
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	bfbc      	itt	lt
 8017af4:	580b      	ldrlt	r3, [r1, r0]
 8017af6:	18c0      	addlt	r0, r0, r3
 8017af8:	4770      	bx	lr
	...

08017afc <_init>:
 8017afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017afe:	bf00      	nop
 8017b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b02:	bc08      	pop	{r3}
 8017b04:	469e      	mov	lr, r3
 8017b06:	4770      	bx	lr

08017b08 <_fini>:
 8017b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b0a:	bf00      	nop
 8017b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b0e:	bc08      	pop	{r3}
 8017b10:	469e      	mov	lr, r3
 8017b12:	4770      	bx	lr
