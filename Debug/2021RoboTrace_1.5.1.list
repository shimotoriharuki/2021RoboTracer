
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001782c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  080179f0  080179f0  000279f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801858c  0801858c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801858c  0801858c  0002858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018594  08018594  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018594  08018594  00028594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801859c  0801859c  0002859c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080185a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00023cec  200001e0  0801877c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20023ecc  0801877c  00033ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000353bc  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007632  00000000  00000000  000655c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002100  00000000  00000000  0006cc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001e30  00000000  00000000  0006ed00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036bdc  00000000  00000000  00070b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00024c41  00000000  00000000  000a770c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001100b6  00000000  00000000  000cc34d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001dc403  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a0f4  00000000  00000000  001dc480  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080179d4 	.word	0x080179d4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080179d4 	.word	0x080179d4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 fdb0 	bl	8007b3c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200219c0 	.word	0x200219c0

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 fd98 	bl	8007b3c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200219c0 	.word	0x200219c0

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f006 fc21 	bl	8007868 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f005 f988 	bl	800633c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f005 f982 	bl	800633c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f005 f97c 	bl	800633c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f005 f976 	bl	800633c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f005 f970 	bl	800633c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f005 f96a 	bl	800633c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f005 f964 	bl	800633c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f005 f95e 	bl	800633c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f005 f958 	bl	800633c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f005 f952 	bl	800633c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f005 f946 	bl	800633c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f005 f940 	bl	800633c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f013 fba1 	bl	8014870 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), total_distance_(0){}
 8001154:	b490      	push	{r4, r7}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	f04f 0400 	mov.w	r4, #0
 8001166:	e9c2 3400 	strd	r3, r4, [r2]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	f04f 0300 	mov.w	r3, #0
 8001170:	f04f 0400 	mov.w	r4, #0
 8001174:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f04f 0300 	mov.w	r3, #0
 800117e:	f04f 0400 	mov.w	r4, #0
 8001182:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	f04f 0400 	mov.w	r4, #0
 8001190:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	f04f 0400 	mov.w	r4, #0
 800119e:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f04f 0400 	mov.w	r4, #0
 80011ac:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc90      	pop	{r4, r7}
 80011ba:	4770      	bx	lr

080011bc <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011c4:	213c      	movs	r1, #60	; 0x3c
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <_ZN7Encoder4initEv+0x30>)
 80011c8:	f00a fb50 	bl	800b86c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011cc:	213c      	movs	r1, #60	; 0x3c
 80011ce:	4808      	ldr	r0, [pc, #32]	; (80011f0 <_ZN7Encoder4initEv+0x34>)
 80011d0:	f00a fb4c 	bl	800b86c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <_ZN7Encoder4initEv+0x38>)
 80011d6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_ZN7Encoder4initEv+0x3c>)
 80011de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20021c14 	.word	0x20021c14
 80011f0:	200218f8 	.word	0x200218f8
 80011f4:	40010000 	.word	0x40010000
 80011f8:	40010400 	.word	0x40010400
 80011fc:	00000000 	.word	0x00000000

08001200 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001208:	4b4b      	ldr	r3, [pc, #300]	; (8001338 <_ZN7Encoder9updateCntEv+0x138>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800121c:	ee17 0a90 	vmov	r0, s15
 8001220:	f7ff f9aa 	bl	8000578 <__aeabi_f2d>
 8001224:	a340      	add	r3, pc, #256	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001238:	4b41      	ldr	r3, [pc, #260]	; (8001340 <_ZN7Encoder9updateCntEv+0x140>)
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001244:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800133c <_ZN7Encoder9updateCntEv+0x13c>
 8001248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f992 	bl	8000578 <__aeabi_f2d>
 8001254:	a334      	add	r3, pc, #208	; (adr r3, 8001328 <_ZN7Encoder9updateCntEv+0x128>)
 8001256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125a:	f7ff f9e5 	bl	8000628 <__aeabi_dmul>
 800125e:	4603      	mov	r3, r0
 8001260:	460c      	mov	r4, r1
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	e9c2 3402 	strd	r3, r4, [r2, #8]

	total_cnt_l_ += cnt_l_;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	f7ff f820 	bl	80002bc <__adddf3>
 800127c:	4603      	mov	r3, r0
 800127e:	460c      	mov	r4, r1
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ += cnt_r_;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001292:	461a      	mov	r2, r3
 8001294:	4623      	mov	r3, r4
 8001296:	f7ff f811 	bl	80002bc <__adddf3>
 800129a:	4603      	mov	r3, r0
 800129c:	460c      	mov	r4, r1
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	e9c2 3408 	strd	r3, r4, [r2, #32]

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff f802 	bl	80002bc <__adddf3>
 80012b8:	4603      	mov	r3, r0
 80012ba:	460c      	mov	r4, r1
 80012bc:	4618      	mov	r0, r3
 80012be:	4621      	mov	r1, r4
 80012c0:	a31b      	add	r3, pc, #108	; (adr r3, 8001330 <_ZN7Encoder9updateCntEv+0x130>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f7ff f9af 	bl	8000628 <__aeabi_dmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	460c      	mov	r4, r1
 80012ce:	4618      	mov	r0, r3
 80012d0:	4621      	mov	r1, r4
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012da:	f7ff facf 	bl	800087c <__aeabi_ddiv>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	total_distance_ += distance_;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 80012f4:	461a      	mov	r2, r3
 80012f6:	4623      	mov	r3, r4
 80012f8:	f7fe ffe0 	bl	80002bc <__adddf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	460c      	mov	r4, r1
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	monitor_distance = distance_;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 800130c:	4618      	mov	r0, r3
 800130e:	4621      	mov	r1, r4
 8001310:	f7ff fc82 	bl	8000c18 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <_ZN7Encoder9updateCntEv+0x144>)
 8001318:	601a      	str	r2, [r3, #0]
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	e9a19657 	.word	0xe9a19657
 800132c:	3ff224a8 	.word	0x3ff224a8
 8001330:	1ab1d998 	.word	0x1ab1d998
 8001334:	3f7830b5 	.word	0x3f7830b5
 8001338:	40010000 	.word	0x40010000
 800133c:	47000000 	.word	0x47000000
 8001340:	40010400 	.word	0x40010400
 8001344:	200001fc 	.word	0x200001fc

08001348 <_ZN7Encoder6getCntERdS0_>:

void Encoder::getCnt(double &cnt_l, double &cnt_r)
{
 8001348:	b490      	push	{r4, r7}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r = cnt_r_;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	e9c2 3400 	strd	r3, r4, [r2]
}
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bc90      	pop	{r4, r7}
 8001374:	4770      	bx	lr

08001376 <_ZN7Encoder11getDistanceEv>:

double Encoder::getDistance()
{
 8001376:	b490      	push	{r4, r7}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
	return distance_;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001384:	ec44 3b17 	vmov	d7, r3, r4
}
 8001388:	eeb0 0a47 	vmov.f32	s0, s14
 800138c:	eef0 0a67 	vmov.f32	s1, s15
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bc90      	pop	{r4, r7}
 8001396:	4770      	bx	lr

08001398 <_ZN7Encoder13clearDistanceEv>:
{
	return total_distance_;
}

void Encoder::clearDistance()
{
 8001398:	b490      	push	{r4, r7}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	f04f 0400 	mov.w	r4, #0
 80013aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc90      	pop	{r4, r7}
 80013b6:	4770      	bx	lr

080013b8 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 80013b8:	b490      	push	{r4, r7}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	f04f 0300 	mov.w	r3, #0
 80013c6:	f04f 0400 	mov.w	r4, #0
 80013ca:	e9c2 3400 	strd	r3, r4, [r2]
	cnt_r_ = 0;
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	f04f 0400 	mov.w	r4, #0
 80013d8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <_ZN7Encoder8clearCntEv+0x4c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b08      	ldr	r3, [pc, #32]	; (8001408 <_ZN7Encoder8clearCntEv+0x50>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	f04f 0400 	mov.w	r4, #0
 80013f6:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr
 8001404:	40010000 	.word	0x40010000
 8001408:	40010400 	.word	0x40010400

0800140c <_ZN7Encoder13clearTotalCntEv>:
{
	return (total_cnt_l_ + total_cnt_r_) / 2;
}

void Encoder::clearTotalCnt()
{
 800140c:	b490      	push	{r4, r7}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	f04f 0400 	mov.w	r4, #0
 800141e:	e9c2 3406 	strd	r3, r4, [r2, #24]
	total_cnt_r_ = 0;
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f04f 0300 	mov.w	r3, #0
 8001428:	f04f 0400 	mov.w	r4, #0
 800142c:	e9c2 3408 	strd	r3, r4, [r2, #32]
	total_distance_ = 0;
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f04f 0400 	mov.w	r4, #0
 800143a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bc90      	pop	{r4, r7}
 8001446:	4770      	bx	lr

08001448 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001456:	6839      	ldr	r1, [r7, #0]
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f9f1 	bl	8001840 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800145e:	f000 fa05 	bl	800186c <fopen_folder_and_file>

	return ret;
 8001462:	7bfb      	ldrb	r3, [r7, #15]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 8001476:	4804      	ldr	r0, [pc, #16]	; (8001488 <user_fclose+0x1c>)
 8001478:	f00f fc29 	bl	8010cce <f_close>

	return ret;
 800147c:	79fb      	ldrb	r3, [r7, #7]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20020804 	.word	0x20020804

0800148c <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af02      	add	r7, sp, #8
 8001492:	4603      	mov	r3, r0
 8001494:	6039      	str	r1, [r7, #0]
 8001496:	80fb      	strh	r3, [r7, #6]
 8001498:	4613      	mov	r3, r2
 800149a:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80014a0:	2300      	movs	r3, #0
 80014a2:	81fb      	strh	r3, [r7, #14]
 80014a4:	e030      	b.n	8001508 <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	683a      	ldr	r2, [r7, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f860 	bl	8000578 <__aeabi_f2d>
 80014b8:	4603      	mov	r3, r0
 80014ba:	460c      	mov	r4, r1
 80014bc:	e9cd 3400 	strd	r3, r4, [sp]
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <sd_write+0x94>)
 80014c2:	2180      	movs	r1, #128	; 0x80
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <sd_write+0x98>)
 80014c6:	f012 fa43 	bl	8013950 <sniprintf>

		if(state == ADD_WRITE){
 80014ca:	797b      	ldrb	r3, [r7, #5]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d106      	bne.n	80014de <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <sd_write+0x9c>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4814      	ldr	r0, [pc, #80]	; (8001528 <sd_write+0x9c>)
 80014d8:	f00f fc6d 	bl	8010db6 <f_lseek>
 80014dc:	e003      	b.n	80014e6 <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80014de:	2100      	movs	r1, #0
 80014e0:	4811      	ldr	r0, [pc, #68]	; (8001528 <sd_write+0x9c>)
 80014e2:	f00f fc68 	bl	8010db6 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80014e6:	480f      	ldr	r0, [pc, #60]	; (8001524 <sd_write+0x98>)
 80014e8:	f7fe fe8a 	bl	8000200 <strlen>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <sd_write+0xa0>)
 80014f0:	490c      	ldr	r1, [pc, #48]	; (8001524 <sd_write+0x98>)
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <sd_write+0x9c>)
 80014f4:	f00f f9d9 	bl	80108aa <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80014f8:	f000 f9d2 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80014fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001500:	b29b      	uxth	r3, r3
 8001502:	3301      	adds	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbc8      	blt.n	80014a6 <sd_write+0x1a>
	}
	return ret;
 8001514:	7b7b      	ldrb	r3, [r7, #13]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop
 8001520:	080179f0 	.word	0x080179f0
 8001524:	20020774 	.word	0x20020774
 8001528:	20020804 	.word	0x20020804
 800152c:	200207f4 	.word	0x200207f4

08001530 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	; 0x24
 8001534:	af02      	add	r7, sp, #8
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4613      	mov	r3, r2
 800153e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f97a 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 800154c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001550:	2b00      	cmp	r3, #0
 8001552:	d108      	bne.n	8001566 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001554:	4822      	ldr	r0, [pc, #136]	; (80015e0 <sd_write_array_float+0xb0>)
 8001556:	f00f fbe4 	bl	8010d22 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800155a:	4822      	ldr	r0, [pc, #136]	; (80015e4 <sd_write_array_float+0xb4>)
 800155c:	f00f fe4f 	bl	80111fe <f_unlink>
		f_chdir("..");
 8001560:	4821      	ldr	r0, [pc, #132]	; (80015e8 <sd_write_array_float+0xb8>)
 8001562:	f00f fbde 	bl	8010d22 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001566:	f000 f981 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800156a:	2300      	movs	r3, #0
 800156c:	82fb      	strh	r3, [r7, #22]
 800156e:	e028      	b.n	80015c2 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001570:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	4413      	add	r3, r2
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fffb 	bl	8000578 <__aeabi_f2d>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	e9cd 3400 	strd	r3, r4, [sp]
 800158a:	4a18      	ldr	r2, [pc, #96]	; (80015ec <sd_write_array_float+0xbc>)
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <sd_write_array_float+0xc0>)
 8001590:	f012 f9de 	bl	8013950 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001594:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <sd_write_array_float+0xc4>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <sd_write_array_float+0xc4>)
 800159c:	f00f fc0b 	bl	8010db6 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80015a0:	4813      	ldr	r0, [pc, #76]	; (80015f0 <sd_write_array_float+0xc0>)
 80015a2:	f7fe fe2d 	bl	8000200 <strlen>
 80015a6:	4602      	mov	r2, r0
 80015a8:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <sd_write_array_float+0xc8>)
 80015aa:	4911      	ldr	r1, [pc, #68]	; (80015f0 <sd_write_array_float+0xc0>)
 80015ac:	4811      	ldr	r0, [pc, #68]	; (80015f4 <sd_write_array_float+0xc4>)
 80015ae:	f00f f97c 	bl	80108aa <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80015b2:	f000 f975 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	3301      	adds	r3, #1
 80015be:	b29b      	uxth	r3, r3
 80015c0:	82fb      	strh	r3, [r7, #22]
 80015c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	429a      	cmp	r2, r3
 80015cc:	dbd0      	blt.n	8001570 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80015ce:	4809      	ldr	r0, [pc, #36]	; (80015f4 <sd_write_array_float+0xc4>)
 80015d0:	f00f fb7d 	bl	8010cce <f_close>

	return ret;
 80015d4:	7d7b      	ldrb	r3, [r7, #21]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	20020674 	.word	0x20020674
 80015e4:	2001f530 	.word	0x2001f530
 80015e8:	08017a00 	.word	0x08017a00
 80015ec:	080179f0 	.word	0x080179f0
 80015f0:	20020774 	.word	0x20020774
 80015f4:	20020804 	.word	0x20020804
 80015f8:	200207f4 	.word	0x200207f4

080015fc <sd_write_array_double>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, double *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data, char state){
 80015fc:	b590      	push	{r4, r7, lr}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af02      	add	r7, sp, #8
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	4613      	mov	r3, r2
 800160a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f000 f914 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 8001618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800161c:	2b00      	cmp	r3, #0
 800161e:	d108      	bne.n	8001632 <sd_write_array_double+0x36>
		f_chdir(dirpath);
 8001620:	4820      	ldr	r0, [pc, #128]	; (80016a4 <sd_write_array_double+0xa8>)
 8001622:	f00f fb7e 	bl	8010d22 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001626:	4820      	ldr	r0, [pc, #128]	; (80016a8 <sd_write_array_double+0xac>)
 8001628:	f00f fde9 	bl	80111fe <f_unlink>
		f_chdir("..");
 800162c:	481f      	ldr	r0, [pc, #124]	; (80016ac <sd_write_array_double+0xb0>)
 800162e:	f00f fb78 	bl	8010d22 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001632:	f000 f91b 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001636:	2300      	movs	r3, #0
 8001638:	82fb      	strh	r3, [r7, #22]
 800163a:	e024      	b.n	8001686 <sd_write_array_double+0x8a>
		snprintf(buffer, BUFF_SIZE, "%23.10e\n", *(data + i));	//doubleをstringに変換
 800163c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	4413      	add	r3, r2
 8001646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800164a:	e9cd 3400 	strd	r3, r4, [sp]
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <sd_write_array_double+0xb4>)
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	4818      	ldr	r0, [pc, #96]	; (80016b4 <sd_write_array_double+0xb8>)
 8001654:	f012 f97c 	bl	8013950 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <sd_write_array_double+0xbc>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	4619      	mov	r1, r3
 800165e:	4816      	ldr	r0, [pc, #88]	; (80016b8 <sd_write_array_double+0xbc>)
 8001660:	f00f fba9 	bl	8010db6 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001664:	4813      	ldr	r0, [pc, #76]	; (80016b4 <sd_write_array_double+0xb8>)
 8001666:	f7fe fdcb 	bl	8000200 <strlen>
 800166a:	4602      	mov	r2, r0
 800166c:	4b13      	ldr	r3, [pc, #76]	; (80016bc <sd_write_array_double+0xc0>)
 800166e:	4911      	ldr	r1, [pc, #68]	; (80016b4 <sd_write_array_double+0xb8>)
 8001670:	4811      	ldr	r0, [pc, #68]	; (80016b8 <sd_write_array_double+0xbc>)
 8001672:	f00f f91a 	bl	80108aa <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001676:	f000 f913 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 800167a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3301      	adds	r3, #1
 8001682:	b29b      	uxth	r3, r3
 8001684:	82fb      	strh	r3, [r7, #22]
 8001686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbd4      	blt.n	800163c <sd_write_array_double+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <sd_write_array_double+0xbc>)
 8001694:	f00f fb1b 	bl	8010cce <f_close>

	return ret;
 8001698:	7d7b      	ldrb	r3, [r7, #21]
}
 800169a:	4618      	mov	r0, r3
 800169c:	371c      	adds	r7, #28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20020674 	.word	0x20020674
 80016a8:	2001f530 	.word	0x2001f530
 80016ac:	08017a00 	.word	0x08017a00
 80016b0:	08017a04 	.word	0x08017a04
 80016b4:	20020774 	.word	0x20020774
 80016b8:	20020804 	.word	0x20020804
 80016bc:	200207f4 	.word	0x200207f4

080016c0 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	68f8      	ldr	r0, [r7, #12]
 80016d8:	f000 f8b2 	bl	8001840 <create_path>

	if(state == OVER_WRITE){
 80016dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d108      	bne.n	80016f6 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80016e4:	481e      	ldr	r0, [pc, #120]	; (8001760 <sd_write_array_int+0xa0>)
 80016e6:	f00f fb1c 	bl	8010d22 <f_chdir>
		f_unlink(filepath);	//一回消す
 80016ea:	481e      	ldr	r0, [pc, #120]	; (8001764 <sd_write_array_int+0xa4>)
 80016ec:	f00f fd87 	bl	80111fe <f_unlink>
		f_chdir("..");
 80016f0:	481d      	ldr	r0, [pc, #116]	; (8001768 <sd_write_array_int+0xa8>)
 80016f2:	f00f fb16 	bl	8010d22 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80016f6:	f000 f8b9 	bl	800186c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80016fa:	2300      	movs	r3, #0
 80016fc:	82fb      	strh	r3, [r7, #22]
 80016fe:	e021      	b.n	8001744 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001700:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	4413      	add	r3, r2
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <sd_write_array_int+0xac>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	4817      	ldr	r0, [pc, #92]	; (8001770 <sd_write_array_int+0xb0>)
 8001712:	f012 f91d 	bl	8013950 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <sd_write_array_int+0xb4>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	4619      	mov	r1, r3
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <sd_write_array_int+0xb4>)
 800171e:	f00f fb4a 	bl	8010db6 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001722:	4813      	ldr	r0, [pc, #76]	; (8001770 <sd_write_array_int+0xb0>)
 8001724:	f7fe fd6c 	bl	8000200 <strlen>
 8001728:	4602      	mov	r2, r0
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <sd_write_array_int+0xb8>)
 800172c:	4910      	ldr	r1, [pc, #64]	; (8001770 <sd_write_array_int+0xb0>)
 800172e:	4811      	ldr	r0, [pc, #68]	; (8001774 <sd_write_array_int+0xb4>)
 8001730:	f00f f8bb 	bl	80108aa <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001734:	f000 f8b4 	bl	80018a0 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800173c:	b29b      	uxth	r3, r3
 800173e:	3301      	adds	r3, #1
 8001740:	b29b      	uxth	r3, r3
 8001742:	82fb      	strh	r3, [r7, #22]
 8001744:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001748:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174c:	429a      	cmp	r2, r3
 800174e:	dbd7      	blt.n	8001700 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <sd_write_array_int+0xb4>)
 8001752:	f00f fabc 	bl	8010cce <f_close>

	return ret;
 8001756:	7d7b      	ldrb	r3, [r7, #21]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20020674 	.word	0x20020674
 8001764:	2001f530 	.word	0x2001f530
 8001768:	08017a00 	.word	0x08017a00
 800176c:	08017a14 	.word	0x08017a14
 8001770:	20020774 	.word	0x20020774
 8001774:	20020804 	.word	0x20020804
 8001778:	200207f4 	.word	0x200207f4

0800177c <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	4613      	mov	r3, r2
 800178a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001790:	2300      	movs	r3, #0
 8001792:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f000 f852 	bl	8001840 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800179c:	f000 f866 	bl	800186c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017a0:	e019      	b.n	80017d6 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 80017a2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	461a      	mov	r2, r3
 80017ae:	4913      	ldr	r1, [pc, #76]	; (80017fc <sd_read_array_int+0x80>)
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <sd_read_array_int+0x84>)
 80017b2:	f012 f921 	bl	80139f8 <siscanf>
		i++;
 80017b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	3301      	adds	r3, #1
 80017be:	b29b      	uxth	r3, r3
 80017c0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	db03      	blt.n	80017d6 <sd_read_array_int+0x5a>
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017d6:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <sd_read_array_int+0x88>)
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	4809      	ldr	r0, [pc, #36]	; (8001800 <sd_read_array_int+0x84>)
 80017dc:	f00f feea 	bl	80115b4 <f_gets>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1dd      	bne.n	80017a2 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017e6:	f000 f85b 	bl	80018a0 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ea:	4806      	ldr	r0, [pc, #24]	; (8001804 <sd_read_array_int+0x88>)
 80017ec:	f00f fa6f 	bl	8010cce <f_close>

	return ret;
 80017f0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	08017a18 	.word	0x08017a18
 8001800:	20020774 	.word	0x20020774
 8001804:	20020804 	.word	0x20020804

08001808 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800180e:	2300      	movs	r3, #0
 8001810:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001812:	2201      	movs	r2, #1
 8001814:	4908      	ldr	r1, [pc, #32]	; (8001838 <sd_mount+0x30>)
 8001816:	4809      	ldr	r0, [pc, #36]	; (800183c <sd_mount+0x34>)
 8001818:	f00e fcd6 	bl	80101c8 <f_mount>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d102      	bne.n	8001828 <sd_mount+0x20>
 8001822:	2301      	movs	r3, #1
 8001824:	71fb      	strb	r3, [r7, #7]
 8001826:	e001      	b.n	800182c <sd_mount+0x24>
	else ret = 0;
 8001828:	2300      	movs	r3, #0
 800182a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800182c:	79fb      	ldrb	r3, [r7, #7]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	08017a1c 	.word	0x08017a1c
 800183c:	2001f630 	.word	0x2001f630

08001840 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <create_path+0x24>)
 800184e:	f012 f942 	bl	8013ad6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001852:	6839      	ldr	r1, [r7, #0]
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <create_path+0x28>)
 8001856:	f012 f93e 	bl	8013ad6 <strcpy>

}
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20020674 	.word	0x20020674
 8001868:	2001f530 	.word	0x2001f530

0800186c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001870:	4807      	ldr	r0, [pc, #28]	; (8001890 <fopen_folder_and_file+0x24>)
 8001872:	f00f fd85 	bl	8011380 <f_mkdir>

	f_chdir(dirpath);
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <fopen_folder_and_file+0x24>)
 8001878:	f00f fa53 	bl	8010d22 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800187c:	2213      	movs	r2, #19
 800187e:	4905      	ldr	r1, [pc, #20]	; (8001894 <fopen_folder_and_file+0x28>)
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <fopen_folder_and_file+0x2c>)
 8001882:	f00e fce7 	bl	8010254 <f_open>

	f_chdir("..");
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <fopen_folder_and_file+0x30>)
 8001888:	f00f fa4b 	bl	8010d22 <f_chdir>


}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20020674 	.word	0x20020674
 8001894:	2001f530 	.word	0x2001f530
 8001898:	20020804 	.word	0x20020804
 800189c:	08017a00 	.word	0x08017a00

080018a0 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	e007      	b.n	80018bc <bufclear+0x1c>
		buffer[i] = '\0';
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <bufclear+0x30>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	2200      	movs	r2, #0
 80018b4:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3301      	adds	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b7f      	cmp	r3, #127	; 0x7f
 80018c0:	ddf4      	ble.n	80018ac <bufclear+0xc>
	}
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20020774 	.word	0x20020774

080018d4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018e8:	2200      	movs	r2, #0
 80018ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <read_byte+0x54>)
 80018f0:	f005 ffba 	bl	8007868 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018f4:	f107 010f 	add.w	r1, r7, #15
 80018f8:	2364      	movs	r3, #100	; 0x64
 80018fa:	2201      	movs	r2, #1
 80018fc:	480b      	ldr	r0, [pc, #44]	; (800192c <read_byte+0x58>)
 80018fe:	f009 f97b 	bl	800abf8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001902:	f107 010e 	add.w	r1, r7, #14
 8001906:	2364      	movs	r3, #100	; 0x64
 8001908:	2201      	movs	r2, #1
 800190a:	4808      	ldr	r0, [pc, #32]	; (800192c <read_byte+0x58>)
 800190c:	f009 faa8 	bl	800ae60 <HAL_SPI_Receive>
	CS_SET;
 8001910:	2201      	movs	r2, #1
 8001912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001916:	4804      	ldr	r0, [pc, #16]	; (8001928 <read_byte+0x54>)
 8001918:	f005 ffa6 	bl	8007868 <HAL_GPIO_WritePin>

	return val;
 800191c:	7bbb      	ldrb	r3, [r7, #14]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020400 	.word	0x40020400
 800192c:	200218a0 	.word	0x200218a0

08001930 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001946:	b2db      	uxtb	r3, r3
 8001948:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800194a:	2200      	movs	r2, #0
 800194c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <write_byte+0x54>)
 8001952:	f005 ff89 	bl	8007868 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001956:	f107 010f 	add.w	r1, r7, #15
 800195a:	2364      	movs	r3, #100	; 0x64
 800195c:	2201      	movs	r2, #1
 800195e:	480a      	ldr	r0, [pc, #40]	; (8001988 <write_byte+0x58>)
 8001960:	f009 f94a 	bl	800abf8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001964:	1db9      	adds	r1, r7, #6
 8001966:	2364      	movs	r3, #100	; 0x64
 8001968:	2201      	movs	r2, #1
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <write_byte+0x58>)
 800196c:	f009 f944 	bl	800abf8 <HAL_SPI_Transmit>
	CS_SET;
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001976:	4803      	ldr	r0, [pc, #12]	; (8001984 <write_byte+0x54>)
 8001978:	f005 ff76 	bl	8007868 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40020400 	.word	0x40020400
 8001988:	200218a0 	.word	0x200218a0

0800198c <IMU_init>:

uint16_t IMU_init() {
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff ff9c 	bl	80018d4 <read_byte>
 800199c:	4603      	mov	r3, r0
 800199e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 80019a0:	797b      	ldrb	r3, [r7, #5]
 80019a2:	2be0      	cmp	r3, #224	; 0xe0
 80019a4:	d119      	bne.n	80019da <IMU_init+0x4e>
		ret = 1;
 80019a6:	2301      	movs	r3, #1
 80019a8:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 80019aa:	2101      	movs	r1, #1
 80019ac:	2006      	movs	r0, #6
 80019ae:	f7ff ffbf 	bl	8001930 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 80019b2:	2110      	movs	r1, #16
 80019b4:	2003      	movs	r0, #3
 80019b6:	f7ff ffbb 	bl	8001930 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 80019ba:	2120      	movs	r1, #32
 80019bc:	207f      	movs	r0, #127	; 0x7f
 80019be:	f7ff ffb7 	bl	8001930 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019c2:	2106      	movs	r1, #6
 80019c4:	2001      	movs	r0, #1
 80019c6:	f7ff ffb3 	bl	8001930 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019ca:	2106      	movs	r1, #6
 80019cc:	2014      	movs	r0, #20
 80019ce:	f7ff ffaf 	bl	8001930 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019d2:	2100      	movs	r1, #0
 80019d4:	207f      	movs	r0, #127	; 0x7f
 80019d6:	f7ff ffab 	bl	8001930 <write_byte>
	}
	return ret;
 80019da:	88fb      	ldrh	r3, [r7, #6]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <read_gyro_data>:

void read_gyro_data() {
 80019e4:	b598      	push	{r3, r4, r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019e8:	2033      	movs	r0, #51	; 0x33
 80019ea:	f7ff ff73 	bl	80018d4 <read_byte>
 80019ee:	4603      	mov	r3, r0
 80019f0:	021b      	lsls	r3, r3, #8
 80019f2:	b21c      	sxth	r4, r3
 80019f4:	2034      	movs	r0, #52	; 0x34
 80019f6:	f7ff ff6d 	bl	80018d4 <read_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b21b      	sxth	r3, r3
 80019fe:	4323      	orrs	r3, r4
 8001a00:	b21a      	sxth	r2, r3
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <read_gyro_data+0x64>)
 8001a04:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001a06:	2035      	movs	r0, #53	; 0x35
 8001a08:	f7ff ff64 	bl	80018d4 <read_byte>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b21c      	sxth	r4, r3
 8001a12:	2036      	movs	r0, #54	; 0x36
 8001a14:	f7ff ff5e 	bl	80018d4 <read_byte>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	b21a      	sxth	r2, r3
 8001a20:	4b0a      	ldr	r3, [pc, #40]	; (8001a4c <read_gyro_data+0x68>)
 8001a22:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a24:	2037      	movs	r0, #55	; 0x37
 8001a26:	f7ff ff55 	bl	80018d4 <read_byte>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	021b      	lsls	r3, r3, #8
 8001a2e:	b21c      	sxth	r4, r3
 8001a30:	2038      	movs	r0, #56	; 0x38
 8001a32:	f7ff ff4f 	bl	80018d4 <read_byte>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	4323      	orrs	r3, r4
 8001a3c:	b21a      	sxth	r2, r3
 8001a3e:	4b04      	ldr	r3, [pc, #16]	; (8001a50 <read_gyro_data+0x6c>)
 8001a40:	801a      	strh	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	bd98      	pop	{r3, r4, r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2002183c 	.word	0x2002183c
 8001a4c:	2002183a 	.word	0x2002183a
 8001a50:	20021834 	.word	0x20021834

08001a54 <read_accel_data>:

void read_accel_data() {
 8001a54:	b598      	push	{r3, r4, r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001a58:	202d      	movs	r0, #45	; 0x2d
 8001a5a:	f7ff ff3b 	bl	80018d4 <read_byte>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	021b      	lsls	r3, r3, #8
 8001a62:	b21c      	sxth	r4, r3
 8001a64:	202e      	movs	r0, #46	; 0x2e
 8001a66:	f7ff ff35 	bl	80018d4 <read_byte>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	b21b      	sxth	r3, r3
 8001a6e:	4323      	orrs	r3, r4
 8001a70:	b21a      	sxth	r2, r3
 8001a72:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <read_accel_data+0x64>)
 8001a74:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001a76:	202f      	movs	r0, #47	; 0x2f
 8001a78:	f7ff ff2c 	bl	80018d4 <read_byte>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	b21c      	sxth	r4, r3
 8001a82:	2030      	movs	r0, #48	; 0x30
 8001a84:	f7ff ff26 	bl	80018d4 <read_byte>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	4323      	orrs	r3, r4
 8001a8e:	b21a      	sxth	r2, r3
 8001a90:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <read_accel_data+0x68>)
 8001a92:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001a94:	2031      	movs	r0, #49	; 0x31
 8001a96:	f7ff ff1d 	bl	80018d4 <read_byte>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	021b      	lsls	r3, r3, #8
 8001a9e:	b21c      	sxth	r4, r3
 8001aa0:	2032      	movs	r0, #50	; 0x32
 8001aa2:	f7ff ff17 	bl	80018d4 <read_byte>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b21b      	sxth	r3, r3
 8001aaa:	4323      	orrs	r3, r4
 8001aac:	b21a      	sxth	r2, r3
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <read_accel_data+0x6c>)
 8001ab0:	801a      	strh	r2, [r3, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	bd98      	pop	{r3, r4, r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20021838 	.word	0x20021838
 8001abc:	2002183e 	.word	0x2002183e
 8001ac0:	20021836 	.word	0x20021836

08001ac4 <_ZN3IMUC1Ev>:
#include "stdio.h"
#include <vector>

#define PI 3.1415926535

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001ac4:	b490      	push	{r4, r7}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	805a      	strh	r2, [r3, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	809a      	strh	r2, [r3, #4]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	80da      	strh	r2, [r3, #6]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	811a      	strh	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	815a      	strh	r2, [r3, #10]
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	f04f 0400 	mov.w	r4, #0
 8001afa:	e9c2 3404 	strd	r3, r4, [r2, #16]
{

}
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc90      	pop	{r4, r7}
 8001b08:	4770      	bx	lr
	...

08001b0c <_ZN3IMU4initEv>:

void IMU::init()
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001b14:	f7ff ff3a 	bl	800198c <IMU_init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <_ZN3IMU4initEv+0x24>)
 8001b22:	f011 fe7f 	bl	8013824 <iprintf>

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08017a20 	.word	0x08017a20

08001b34 <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001b3c:	f7ff ff52 	bl	80019e4 <read_gyro_data>
	read_accel_data();
 8001b40:	f7ff ff88 	bl	8001a54 <read_accel_data>

	xa_ = xa;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <_ZN3IMU12updateValuesEv+0x54>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	b21a      	sxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	801a      	strh	r2, [r3, #0]
	ya_ = ya;
 8001b4e:	4b0f      	ldr	r3, [pc, #60]	; (8001b8c <_ZN3IMU12updateValuesEv+0x58>)
 8001b50:	881b      	ldrh	r3, [r3, #0]
 8001b52:	b21a      	sxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	805a      	strh	r2, [r3, #2]
	za_ = za;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <_ZN3IMU12updateValuesEv+0x5c>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	b21a      	sxth	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	809a      	strh	r2, [r3, #4]
	xg_ = xg;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <_ZN3IMU12updateValuesEv+0x60>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001b6c:	4b0a      	ldr	r3, [pc, #40]	; (8001b98 <_ZN3IMU12updateValuesEv+0x64>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	b21a      	sxth	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <_ZN3IMU12updateValuesEv+0x68>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	b21a      	sxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	815a      	strh	r2, [r3, #10]

}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20021838 	.word	0x20021838
 8001b8c:	2002183e 	.word	0x2002183e
 8001b90:	20021836 	.word	0x20021836
 8001b94:	2002183c 	.word	0x2002183c
 8001b98:	2002183a 	.word	0x2002183a
 8001b9c:	20021834 	.word	0x20021834

08001ba0 <_ZN3IMU8getOmegaEv>:

double IMU::getOmega()
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	double corrected_zg = double(zg_) - offset_;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fcd0 	bl	8000554 <__aeabi_i2d>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001bba:	f7fe fb7d 	bl	80002b8 <__aeabi_dsub>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return -(corrected_zg / 16.4) * PI / 180;
 8001bc6:	a315      	add	r3, pc, #84	; (adr r3, 8001c1c <_ZN3IMU8getOmegaEv+0x7c>)
 8001bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001bd0:	f7fe fe54 	bl	800087c <__aeabi_ddiv>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4614      	mov	r4, r2
 8001bda:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bde:	a311      	add	r3, pc, #68	; (adr r3, 8001c24 <_ZN3IMU8getOmegaEv+0x84>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	4620      	mov	r0, r4
 8001be6:	4629      	mov	r1, r5
 8001be8:	f7fe fd1e 	bl	8000628 <__aeabi_dmul>
 8001bec:	4603      	mov	r3, r0
 8001bee:	460c      	mov	r4, r1
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	4621      	mov	r1, r4
 8001bf4:	f04f 0200 	mov.w	r2, #0
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <_ZN3IMU8getOmegaEv+0x78>)
 8001bfa:	f7fe fe3f 	bl	800087c <__aeabi_ddiv>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460c      	mov	r4, r1
 8001c02:	ec44 3b17 	vmov	d7, r3, r4
}
 8001c06:	eeb0 0a47 	vmov.f32	s0, s14
 8001c0a:	eef0 0a67 	vmov.f32	s1, s15
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bdb0      	pop	{r4, r5, r7, pc}
 8001c14:	f3af 8000 	nop.w
 8001c18:	40668000 	.word	0x40668000
 8001c1c:	66666666 	.word	0x66666666
 8001c20:	40306666 	.word	0x40306666
 8001c24:	54411744 	.word	0x54411744
 8001c28:	400921fb 	.word	0x400921fb

08001c2c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c30:	b08a      	sub	sp, #40	; 0x28
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c36:	466b      	mov	r3, sp
 8001c38:	4698      	mov	r8, r3
	HAL_Delay(1000);
 8001c3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c3e:	f004 fb7d 	bl	800633c <HAL_Delay>
	int16_t num = 2000;
 8001c42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c46:	83bb      	strh	r3, [r7, #28]
	double zg_vals[num];
 8001c48:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4c:	1e5d      	subs	r5, r3, #1
 8001c4e:	61bd      	str	r5, [r7, #24]
 8001c50:	462b      	mov	r3, r5
 8001c52:	3301      	adds	r3, #1
 8001c54:	4619      	mov	r1, r3
 8001c56:	f04f 0200 	mov.w	r2, #0
 8001c5a:	f04f 0300 	mov.w	r3, #0
 8001c5e:	f04f 0400 	mov.w	r4, #0
 8001c62:	0194      	lsls	r4, r2, #6
 8001c64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c68:	018b      	lsls	r3, r1, #6
 8001c6a:	462b      	mov	r3, r5
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 0200 	mov.w	r2, #0
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	f04f 0400 	mov.w	r4, #0
 8001c7c:	0194      	lsls	r4, r2, #6
 8001c7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c82:	018b      	lsls	r3, r1, #6
 8001c84:	462b      	mov	r3, r5
 8001c86:	3301      	adds	r3, #1
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	3307      	adds	r3, #7
 8001c8e:	08db      	lsrs	r3, r3, #3
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	ebad 0d03 	sub.w	sp, sp, r3
 8001c96:	466b      	mov	r3, sp
 8001c98:	3307      	adds	r3, #7
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	00db      	lsls	r3, r3, #3
 8001c9e:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	83fb      	strh	r3, [r7, #30]
 8001ca4:	8bfa      	ldrh	r2, [r7, #30]
 8001ca6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	da14      	bge.n	8001cd8 <_ZN3IMU11calibrationEv+0xac>
		zg_vals[i] = double(zg_);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001cb4:	8bfe      	ldrh	r6, [r7, #30]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc4c 	bl	8000554 <__aeabi_i2d>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	6979      	ldr	r1, [r7, #20]
 8001cc2:	00f2      	lsls	r2, r6, #3
 8001cc4:	440a      	add	r2, r1
 8001cc6:	e9c2 3400 	strd	r3, r4, [r2]
		HAL_Delay(2);
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f004 fb36 	bl	800633c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	83fb      	strh	r3, [r7, #30]
 8001cd6:	e7e5      	b.n	8001ca4 <_ZN3IMU11calibrationEv+0x78>
	for(const auto &v : zg_vals){
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
 8001cdc:	697a      	ldr	r2, [r7, #20]
 8001cde:	462b      	mov	r3, r5
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
 8001ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d017      	beq.n	8001d20 <_ZN3IMU11calibrationEv+0xf4>
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf4:	6a38      	ldr	r0, [r7, #32]
 8001cf6:	f7fe fc3f 	bl	8000578 <__aeabi_f2d>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d00:	461a      	mov	r2, r3
 8001d02:	4623      	mov	r3, r4
 8001d04:	f7fe fada 	bl	80002bc <__adddf3>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	4621      	mov	r1, r4
 8001d10:	f7fe ff82 	bl	8000c18 <__aeabi_d2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	623b      	str	r3, [r7, #32]
	for(const auto &v : zg_vals){
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3308      	adds	r3, #8
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d1e:	e7e3      	b.n	8001ce8 <_ZN3IMU11calibrationEv+0xbc>
	offset_ = sum / num;
 8001d20:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d24:	ee07 3a90 	vmov	s15, r3
 8001d28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d2c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d30:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d34:	ee16 0a90 	vmov	r0, s13
 8001d38:	f7fe fc1e 	bl	8000578 <__aeabi_f2d>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	460c      	mov	r4, r1
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8001d46:	46c5      	mov	sp, r8
}
 8001d48:	bf00      	nop
 8001d4a:	3728      	adds	r7, #40	; 0x28
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001d54 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af02      	add	r7, sp, #8
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	71fb      	strb	r3, [r7, #7]
 8001d60:	4613      	mov	r3, r2
 8001d62:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d64:	79bb      	ldrb	r3, [r7, #6]
 8001d66:	b299      	uxth	r1, r3
 8001d68:	1dfa      	adds	r2, r7, #7
 8001d6a:	2364      	movs	r3, #100	; 0x64
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2301      	movs	r3, #1
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <INA260_read+0x50>)
 8001d72:	f005 fee3 	bl	8007b3c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d76:	79bb      	ldrb	r3, [r7, #6]
 8001d78:	b299      	uxth	r1, r3
 8001d7a:	f107 020c 	add.w	r2, r7, #12
 8001d7e:	2364      	movs	r3, #100	; 0x64
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2302      	movs	r3, #2
 8001d84:	4807      	ldr	r0, [pc, #28]	; (8001da4 <INA260_read+0x50>)
 8001d86:	f005 ffd7 	bl	8007d38 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d8a:	7b3b      	ldrb	r3, [r7, #12]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b21a      	sxth	r2, r3
 8001d90:	7b7b      	ldrb	r3, [r7, #13]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20021a54 	.word	0x20021a54

08001da8 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b087      	sub	sp, #28
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	4604      	mov	r4, r0
 8001db0:	4608      	mov	r0, r1
 8001db2:	4611      	mov	r1, r2
 8001db4:	461a      	mov	r2, r3
 8001db6:	4623      	mov	r3, r4
 8001db8:	71fb      	strb	r3, [r7, #7]
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71bb      	strb	r3, [r7, #6]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	717b      	strb	r3, [r7, #5]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	733b      	strb	r3, [r7, #12]
 8001dca:	79bb      	ldrb	r3, [r7, #6]
 8001dcc:	737b      	strb	r3, [r7, #13]
 8001dce:	797b      	ldrb	r3, [r7, #5]
 8001dd0:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001dd2:	793b      	ldrb	r3, [r7, #4]
 8001dd4:	b299      	uxth	r1, r3
 8001dd6:	f107 020c 	add.w	r2, r7, #12
 8001dda:	2364      	movs	r3, #100	; 0x64
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2303      	movs	r3, #3
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <INA260_write+0x48>)
 8001de2:	f005 feab 	bl	8007b3c <HAL_I2C_Master_Transmit>
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20021a54 	.word	0x20021a54

08001df4 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	71bb      	strb	r3, [r7, #6]
 8001e02:	4613      	mov	r3, r2
 8001e04:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001e06:	797b      	ldrb	r3, [r7, #5]
 8001e08:	79ba      	ldrb	r2, [r7, #6]
 8001e0a:	79f9      	ldrb	r1, [r7, #7]
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff ffcb 	bl	8001da8 <INA260_write>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	461a      	mov	r2, r3
 8001e28:	21df      	movs	r1, #223	; 0xdf
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f7ff ffe2 	bl	8001df4 <setConfig>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
{

}
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
	...

08001e50 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e60:	482a      	ldr	r0, [pc, #168]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001e62:	f005 fce9 	bl	8007838 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bf0c      	ite	eq
 8001e6c:	2301      	moveq	r3, #1
 8001e6e:	2300      	movne	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <_ZN8JoyStick8getValueEv+0x2e>
 8001e76:	89fb      	ldrh	r3, [r7, #14]
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e7e:	2101      	movs	r1, #1
 8001e80:	4823      	ldr	r0, [pc, #140]	; (8001f10 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e82:	f005 fcd9 	bl	8007838 <HAL_GPIO_ReadPin>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf0c      	ite	eq
 8001e8c:	2301      	moveq	r3, #1
 8001e8e:	2300      	movne	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <_ZN8JoyStick8getValueEv+0x4e>
 8001e96:	89fb      	ldrh	r3, [r7, #14]
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ea2:	481a      	ldr	r0, [pc, #104]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ea4:	f005 fcc8 	bl	8007838 <HAL_GPIO_ReadPin>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf0c      	ite	eq
 8001eae:	2301      	moveq	r3, #1
 8001eb0:	2300      	movne	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <_ZN8JoyStick8getValueEv+0x70>
 8001eb8:	89fb      	ldrh	r3, [r7, #14]
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ec0:	2104      	movs	r1, #4
 8001ec2:	4814      	ldr	r0, [pc, #80]	; (8001f14 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ec4:	f005 fcb8 	bl	8007838 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf0c      	ite	eq
 8001ece:	2301      	moveq	r3, #1
 8001ed0:	2300      	movne	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <_ZN8JoyStick8getValueEv+0x90>
 8001ed8:	89fb      	ldrh	r3, [r7, #14]
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	480a      	ldr	r0, [pc, #40]	; (8001f0c <_ZN8JoyStick8getValueEv+0xbc>)
 8001ee4:	f005 fca8 	bl	8007838 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf0c      	ite	eq
 8001eee:	2301      	moveq	r3, #1
 8001ef0:	2300      	movne	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <_ZN8JoyStick8getValueEv+0xb0>
 8001ef8:	89fb      	ldrh	r3, [r7, #14]
 8001efa:	f043 0310 	orr.w	r3, r3, #16
 8001efe:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001f00:	89fb      	ldrh	r3, [r7, #14]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40020c00 	.word	0x40020c00
 8001f14:	40020400 	.word	0x40020400

08001f18 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b52      	cmp	r3, #82	; 0x52
 8001f28:	d112      	bne.n	8001f50 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f30:	4856      	ldr	r0, [pc, #344]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f32:	f005 fc99 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f36:	2201      	movs	r2, #1
 8001f38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3c:	4853      	ldr	r0, [pc, #332]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f3e:	f005 fc93 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4850      	ldr	r0, [pc, #320]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f4a:	f005 fc8d 	bl	8007868 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f4e:	e098      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b47      	cmp	r3, #71	; 0x47
 8001f54:	d112      	bne.n	8001f7c <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f56:	2201      	movs	r2, #1
 8001f58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f5c:	484b      	ldr	r0, [pc, #300]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f5e:	f005 fc83 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f68:	4848      	ldr	r0, [pc, #288]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f6a:	f005 fc7d 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f74:	4845      	ldr	r0, [pc, #276]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f76:	f005 fc77 	bl	8007868 <HAL_GPIO_WritePin>
}
 8001f7a:	e082      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	2b42      	cmp	r3, #66	; 0x42
 8001f80:	d112      	bne.n	8001fa8 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f88:	4840      	ldr	r0, [pc, #256]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f8a:	f005 fc6d 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f94:	483d      	ldr	r0, [pc, #244]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001f96:	f005 fc67 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa0:	483a      	ldr	r0, [pc, #232]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fa2:	f005 fc61 	bl	8007868 <HAL_GPIO_WritePin>
}
 8001fa6:	e06c      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001fa8:	78fb      	ldrb	r3, [r7, #3]
 8001faa:	2b43      	cmp	r3, #67	; 0x43
 8001fac:	d112      	bne.n	8001fd4 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fb4:	4835      	ldr	r0, [pc, #212]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fb6:	f005 fc57 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc0:	4832      	ldr	r0, [pc, #200]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fc2:	f005 fc51 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	482f      	ldr	r0, [pc, #188]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fce:	f005 fc4b 	bl	8007868 <HAL_GPIO_WritePin>
}
 8001fd2:	e056      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b4d      	cmp	r3, #77	; 0x4d
 8001fd8:	d112      	bne.n	8002000 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe0:	482a      	ldr	r0, [pc, #168]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fe2:	f005 fc41 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fec:	4827      	ldr	r0, [pc, #156]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001fee:	f005 fc3b 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ff8:	4824      	ldr	r0, [pc, #144]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8001ffa:	f005 fc35 	bl	8007868 <HAL_GPIO_WritePin>
}
 8001ffe:	e040      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8002000:	78fb      	ldrb	r3, [r7, #3]
 8002002:	2b59      	cmp	r3, #89	; 0x59
 8002004:	d112      	bne.n	800202c <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800200c:	481f      	ldr	r0, [pc, #124]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800200e:	f005 fc2b 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002018:	481c      	ldr	r0, [pc, #112]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800201a:	f005 fc25 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800201e:	2201      	movs	r2, #1
 8002020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002024:	4819      	ldr	r0, [pc, #100]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002026:	f005 fc1f 	bl	8007868 <HAL_GPIO_WritePin>
}
 800202a:	e02a      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 800202c:	78fb      	ldrb	r3, [r7, #3]
 800202e:	2b57      	cmp	r3, #87	; 0x57
 8002030:	d112      	bne.n	8002058 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002038:	4814      	ldr	r0, [pc, #80]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800203a:	f005 fc15 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800203e:	2200      	movs	r2, #0
 8002040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002044:	4811      	ldr	r0, [pc, #68]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002046:	f005 fc0f 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800204a:	2200      	movs	r2, #0
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	480e      	ldr	r0, [pc, #56]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002052:	f005 fc09 	bl	8007868 <HAL_GPIO_WritePin>
}
 8002056:	e014      	b.n	8002082 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b7e      	cmp	r3, #126	; 0x7e
 800205c:	d111      	bne.n	8002082 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002064:	4809      	ldr	r0, [pc, #36]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002066:	f005 fbff 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 8002072:	f005 fbf9 	bl	8007868 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002076:	2201      	movs	r2, #1
 8002078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800207c:	4803      	ldr	r0, [pc, #12]	; (800208c <_ZN3LED9fullColorEc+0x174>)
 800207e:	f005 fbf3 	bl	8007868 <HAL_GPIO_WritePin>
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40020000 	.word	0x40020000

08002090 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
 800209c:	4613      	mov	r3, r2
 800209e:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80020a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d106      	bne.n	80020b6 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80020a8:	2201      	movs	r2, #1
 80020aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020ae:	4813      	ldr	r0, [pc, #76]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020b0:	f005 fbda 	bl	8007868 <HAL_GPIO_WritePin>
 80020b4:	e009      	b.n	80020ca <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80020b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020be:	2200      	movs	r2, #0
 80020c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020c4:	480d      	ldr	r0, [pc, #52]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020c6:	f005 fbcf 	bl	8007868 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ca:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020d2:	2201      	movs	r2, #1
 80020d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d8:	4808      	ldr	r0, [pc, #32]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020da:	f005 fbc5 	bl	8007868 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020de:	e009      	b.n	80020f4 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020ee:	4803      	ldr	r0, [pc, #12]	; (80020fc <_ZN3LED2LREaa+0x6c>)
 80020f0:	f005 fbba 	bl	8007868 <HAL_GPIO_WritePin>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40020000 	.word	0x40020000

08002100 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8002100:	b580      	push	{r7, lr}
 8002102:	b092      	sub	sp, #72	; 0x48
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fe92 	bl	8001e38 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
 800211c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211e:	331c      	adds	r3, #28
 8002120:	633b      	str	r3, [r7, #48]	; 0x30
 8002122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	429a      	cmp	r2, r3
 8002128:	d008      	beq.n	800213c <_ZN10LineSensorC1Ev+0x3c>
 800212a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212c:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800212e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002130:	2200      	movs	r2, #0
 8002132:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002136:	3302      	adds	r3, #2
 8002138:	647b      	str	r3, [r7, #68]	; 0x44
 800213a:	e7f2      	b.n	8002122 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002142:	62bb      	str	r3, [r7, #40]	; 0x28
 8002144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002146:	643b      	str	r3, [r7, #64]	; 0x40
 8002148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800214a:	3338      	adds	r3, #56	; 0x38
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	429a      	cmp	r2, r3
 8002154:	d009      	beq.n	800216a <_ZN10LineSensorC1Ev+0x6a>
 8002156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002158:	623b      	str	r3, [r7, #32]
		s = 0;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002164:	3304      	adds	r3, #4
 8002166:	643b      	str	r3, [r7, #64]	; 0x40
 8002168:	e7f1      	b.n	800214e <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	61bb      	str	r3, [r7, #24]
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	429a      	cmp	r2, r3
 8002182:	d009      	beq.n	8002198 <_ZN10LineSensorC1Ev+0x98>
 8002184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002186:	617b      	str	r3, [r7, #20]
		m = 0;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002192:	3304      	adds	r3, #4
 8002194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002196:	e7f1      	b.n	800217c <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	3338      	adds	r3, #56	; 0x38
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d009      	beq.n	80021c6 <_ZN10LineSensorC1Ev+0xc6>
 80021b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b4:	60bb      	str	r3, [r7, #8]
		s = 1;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	3304      	adds	r3, #4
 80021c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80021c4:	e7f1      	b.n	80021aa <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4618      	mov	r0, r3
 80021ca:	3748      	adds	r7, #72	; 0x48
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	220e      	movs	r2, #14
 80021dc:	4619      	mov	r1, r3
 80021de:	4803      	ldr	r0, [pc, #12]	; (80021ec <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021e0:	f004 f912 	bl	8006408 <HAL_ADC_Start_DMA>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	20021978 	.word	0x20021978

080021f0 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2b0d      	cmp	r3, #13
 8002200:	dc2f      	bgt.n	8002262 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	3392      	adds	r3, #146	; 0x92
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3304      	adds	r3, #4
 800220e:	ed93 7a00 	vldr	s14, [r3]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	33a0      	adds	r3, #160	; 0xa0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3304      	adds	r3, #4
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	1a5b      	subs	r3, r3, r1
 8002248:	005b      	lsls	r3, r3, #1
 800224a:	68f9      	ldr	r1, [r7, #12]
 800224c:	440b      	add	r3, r1
 800224e:	3306      	adds	r3, #6
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3304      	adds	r3, #4
 8002256:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	e7cc      	b.n	80021fc <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b07      	ldr	r3, [pc, #28]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800226c:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d902      	bls.n	800227c <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002276:	4b04      	ldr	r3, [pc, #16]	; (8002288 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]


}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	20000200 	.word	0x20000200

0800228c <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 800228c:	b490      	push	{r4, r7}
 800228e:	b08e      	sub	sp, #56	; 0x38
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800229a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800229e:	2b0d      	cmp	r3, #13
 80022a0:	f200 8087 	bhi.w	80023b2 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022a4:	2300      	movs	r3, #0
 80022a6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022ae:	2b09      	cmp	r3, #9
 80022b0:	d81c      	bhi.n	80022ec <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80022b2:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80022b6:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80022ba:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4423      	add	r3, r4
 80022ca:	3306      	adds	r3, #6
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4403      	add	r3, r0
 80022d0:	3304      	adds	r3, #4
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	008b      	lsls	r3, r1, #2
 80022d6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022da:	440b      	add	r3, r1
 80022dc:	3b30      	subs	r3, #48	; 0x30
 80022de:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022e0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022e4:	3301      	adds	r3, #1
 80022e6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ea:	e7de      	b.n	80022aa <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f6:	2b09      	cmp	r3, #9
 80022f8:	d84d      	bhi.n	8002396 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022fe:	3301      	adds	r3, #1
 8002300:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002304:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002308:	2b09      	cmp	r3, #9
 800230a:	d83e      	bhi.n	800238a <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 800230c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002316:	4413      	add	r3, r2
 8002318:	3b30      	subs	r3, #48	; 0x30
 800231a:	ed93 7a00 	vldr	s14, [r3]
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002338:	d521      	bpl.n	800237e <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800233a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002344:	4413      	add	r3, r2
 8002346:	3b30      	subs	r3, #48	; 0x30
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 800234c:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002350:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002354:	0092      	lsls	r2, r2, #2
 8002356:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800235a:	440a      	add	r2, r1
 800235c:	3a30      	subs	r2, #48	; 0x30
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002366:	440b      	add	r3, r1
 8002368:	3b30      	subs	r3, #48	; 0x30
 800236a:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 800236c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002376:	4413      	add	r3, r2
 8002378:	3b30      	subs	r3, #48	; 0x30
 800237a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800237c:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800237e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002382:	3301      	adds	r3, #1
 8002384:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002388:	e7bc      	b.n	8002304 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800238a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800238e:	3301      	adds	r3, #1
 8002390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002394:	e7ad      	b.n	80022f2 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 8002396:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800239a:	69fa      	ldr	r2, [r7, #28]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	33b0      	adds	r3, #176	; 0xb0
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023aa:	3301      	adds	r3, #1
 80023ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023b0:	e773      	b.n	800229a <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 80023b2:	bf00      	nop
 80023b4:	3738      	adds	r7, #56	; 0x38
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc90      	pop	{r4, r7}
 80023ba:	4770      	bx	lr

080023bc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b0a9      	sub	sp, #164	; 0xa4
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80023c4:	2064      	movs	r0, #100	; 0x64
 80023c6:	f003 ffb9 	bl	800633c <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80023d0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023d4:	2b0d      	cmp	r3, #13
 80023d6:	d823      	bhi.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 80023d8:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	32b0      	adds	r2, #176	; 0xb0
 80023e4:	0092      	lsls	r2, r2, #2
 80023e6:	440a      	add	r2, r1
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023f0:	440b      	add	r3, r1
 80023f2:	3b60      	subs	r3, #96	; 0x60
 80023f4:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 80023f6:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 80023fa:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	32b0      	adds	r2, #176	; 0xb0
 8002402:	0092      	lsls	r2, r2, #2
 8002404:	440a      	add	r2, r1
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800240e:	440b      	add	r3, r1
 8002410:	3b98      	subs	r3, #152	; 0x98
 8002412:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002414:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002418:	3301      	adds	r3, #1
 800241a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 800241e:	e7d7      	b.n	80023d0 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fd12 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 800242c:	4603      	mov	r3, r0
 800242e:	2b02      	cmp	r3, #2
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d079      	beq.n	8002530 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800243c:	2300      	movs	r3, #0
 800243e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002442:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002446:	2b0d      	cmp	r3, #13
 8002448:	d850      	bhi.n	80024ec <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 800244a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002454:	4413      	add	r3, r2
 8002456:	3b60      	subs	r3, #96	; 0x60
 8002458:	ed93 7a00 	vldr	s14, [r3]
 800245c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	33b0      	adds	r3, #176	; 0xb0
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	edd3 7a00 	vldr	s15, [r3]
 800246c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	d50f      	bpl.n	8002496 <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 8002476:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800247a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	32b0      	adds	r2, #176	; 0xb0
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	440a      	add	r2, r1
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 800248e:	440b      	add	r3, r1
 8002490:	3b60      	subs	r3, #96	; 0x60
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	e024      	b.n	80024e0 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 8002496:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80024a0:	4413      	add	r3, r2
 80024a2:	3b98      	subs	r3, #152	; 0x98
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	33b0      	adds	r3, #176	; 0xb0
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	edd3 7a00 	vldr	s15, [r3]
 80024b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c0:	dd0e      	ble.n	80024e0 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 80024c2:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80024c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024ca:	6879      	ldr	r1, [r7, #4]
 80024cc:	32b0      	adds	r2, #176	; 0xb0
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	440a      	add	r2, r1
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80024da:	440b      	add	r3, r1
 80024dc:	3b98      	subs	r3, #152	; 0x98
 80024de:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024e0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80024e4:	3301      	adds	r3, #1
 80024e6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80024ea:	e7aa      	b.n	8002442 <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f203 23be 	addw	r3, r3, #702	; 0x2be
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 ff4a 	bl	800338c <_ZN12RotarySwitch8getValueEv>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b00      	cmp	r3, #0
 8002506:	d009      	beq.n	800251c <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800250e:	2201      	movs	r2, #1
 8002510:	f04f 31ff 	mov.w	r1, #4294967295
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fdbb 	bl	8002090 <_ZN3LED2LREaa>
 800251a:	e781      	b.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002522:	2200      	movs	r2, #0
 8002524:	f04f 31ff 	mov.w	r1, #4294967295
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff fdb1 	bl	8002090 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800252e:	e777      	b.n	8002420 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 8002530:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002534:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002538:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800253c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002540:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002544:	3338      	adds	r3, #56	; 0x38
 8002546:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800254a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800254e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002552:	429a      	cmp	r2, r3
 8002554:	d016      	beq.n	8002584 <_ZN10LineSensor11calibrationEv+0x1c8>
 8002556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 800255e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe f807 	bl	8000578 <__aeabi_f2d>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	461a      	mov	r2, r3
 8002570:	4623      	mov	r3, r4
 8002572:	4842      	ldr	r0, [pc, #264]	; (800267c <_ZN10LineSensor11calibrationEv+0x2c0>)
 8002574:	f011 f956 	bl	8013824 <iprintf>
	for(const auto &m : max_values){
 8002578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800257c:	3304      	adds	r3, #4
 800257e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002582:	e7e2      	b.n	800254a <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 8002584:	200a      	movs	r0, #10
 8002586:	f011 f965 	bl	8013854 <putchar>
	for(const auto &m : min_values){
 800258a:	f107 0308 	add.w	r3, r7, #8
 800258e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002592:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002596:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800259a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800259e:	3338      	adds	r3, #56	; 0x38
 80025a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d014      	beq.n	80025d6 <_ZN10LineSensor11calibrationEv+0x21a>
 80025ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025b0:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 80025b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fd ffde 	bl	8000578 <__aeabi_f2d>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	461a      	mov	r2, r3
 80025c2:	4623      	mov	r3, r4
 80025c4:	482d      	ldr	r0, [pc, #180]	; (800267c <_ZN10LineSensor11calibrationEv+0x2c0>)
 80025c6:	f011 f92d 	bl	8013824 <iprintf>
	for(const auto &m : min_values){
 80025ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80025ce:	3304      	adds	r3, #4
 80025d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025d4:	e7e5      	b.n	80025a2 <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 80025d6:	200a      	movs	r0, #10
 80025d8:	f011 f93c 	bl	8013854 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025dc:	2300      	movs	r3, #0
 80025de:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80025e2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025e6:	2b0d      	cmp	r3, #13
 80025e8:	d826      	bhi.n	8002638 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80025f4:	4413      	add	r3, r2
 80025f6:	3b60      	subs	r3, #96	; 0x60
 80025f8:	ed93 7a00 	vldr	s14, [r3]
 80025fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002606:	4413      	add	r3, r2
 8002608:	3b98      	subs	r3, #152	; 0x98
 800260a:	edd3 7a00 	vldr	s15, [r3]
 800260e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002612:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002616:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002680 <_ZN10LineSensor11calibrationEv+0x2c4>
 800261a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	3392      	adds	r3, #146	; 0x92
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	3304      	adds	r3, #4
 8002628:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800262c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002630:	3301      	adds	r3, #1
 8002632:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 8002636:	e7d4      	b.n	80025e2 <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002638:	2300      	movs	r3, #0
 800263a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 800263e:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 8002642:	2b0d      	cmp	r3, #13
 8002644:	d815      	bhi.n	8002672 <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 8002646:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 800264a:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800264e:	0092      	lsls	r2, r2, #2
 8002650:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002654:	440a      	add	r2, r1
 8002656:	3a98      	subs	r2, #152	; 0x98
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	33a0      	adds	r3, #160	; 0xa0
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	3304      	adds	r3, #4
 8002664:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002666:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 800266a:	3301      	adds	r3, #1
 800266c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8002670:	e7e5      	b.n	800263e <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 8002672:	bf00      	nop
 8002674:	37a4      	adds	r7, #164	; 0xa4
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	08017a30 	.word	0x08017a30
 8002680:	447a0000 	.word	0x447a0000

08002684 <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	61bb      	str	r3, [r7, #24]
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3338      	adds	r3, #56	; 0x38
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d012      	beq.n	80026d0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	edd3 7a00 	vldr	s15, [r3]
 80026b4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80026f0 <_ZN10LineSensor13emergencyStopEv+0x6c>
 80026b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	db02      	blt.n	80026c8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026c2:	7ffb      	ldrb	r3, [r7, #31]
 80026c4:	3301      	adds	r3, #1
 80026c6:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	3304      	adds	r3, #4
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	e7e8      	b.n	80026a2 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 80026d0:	7ffb      	ldrb	r3, [r7, #31]
 80026d2:	2b0d      	cmp	r3, #13
 80026d4:	d902      	bls.n	80026dc <_ZN10LineSensor13emergencyStopEv+0x58>
 80026d6:	2301      	movs	r3, #1
 80026d8:	75fb      	strb	r3, [r7, #23]
 80026da:	e001      	b.n	80026e0 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 80026dc:	2300      	movs	r3, #0
 80026de:	75fb      	strb	r3, [r7, #23]

	return flag;
 80026e0:	7dfb      	ldrb	r3, [r7, #23]

}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	44160000 	.word	0x44160000

080026f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
 8002700:	603b      	str	r3, [r7, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f04f 0200 	mov.w	r2, #0
 8002710:	615a      	str	r2, [r3, #20]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f04f 0200 	mov.w	r2, #0
 8002718:	619a      	str	r2, [r3, #24]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	4618      	mov	r0, r3
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800276c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800279c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 80027b0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 80027bc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 80027c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 80027d4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80027e0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80027ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80027f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027f4:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	ee07 3a90 	vmov	s15, r3

}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	3714      	adds	r7, #20
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	0000      	movs	r0, r0
	...

08002810 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff ff95 	bl	8002748 <_ZN9LineTrace9calcErrorEv>
 800281e:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	edd3 7a04 	vldr	s15, [r3, #16]
 8002828:	ed97 7a07 	vldr	s14, [r7, #28]
 800282c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002830:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	ed93 7a05 	vldr	s14, [r3, #20]
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <_ZN9LineTrace3pidEv+0x130>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	edd7 6a07 	vldr	s13, [r7, #28]
 8002844:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800284c:	ee17 0a90 	vmov	r0, s15
 8002850:	f7fd fe92 	bl	8000578 <__aeabi_f2d>
 8002854:	a338      	add	r3, pc, #224	; (adr r3, 8002938 <_ZN9LineTrace3pidEv+0x128>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fe f80f 	bl	800087c <__aeabi_ddiv>
 800285e:	4603      	mov	r3, r0
 8002860:	460c      	mov	r4, r1
 8002862:	4618      	mov	r0, r3
 8002864:	4621      	mov	r1, r4
 8002866:	f7fe f9d7 	bl	8000c18 <__aeabi_d2f>
 800286a:	4603      	mov	r3, r0
 800286c:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4618      	mov	r0, r3
 8002874:	f7fd fe80 	bl	8000578 <__aeabi_f2d>
 8002878:	4604      	mov	r4, r0
 800287a:	460d      	mov	r5, r1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002882:	edd7 7a07 	vldr	s15, [r7, #28]
 8002886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800288a:	ee17 0a90 	vmov	r0, s15
 800288e:	f7fd fe73 	bl	8000578 <__aeabi_f2d>
 8002892:	a329      	add	r3, pc, #164	; (adr r3, 8002938 <_ZN9LineTrace3pidEv+0x128>)
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f7fd fec6 	bl	8000628 <__aeabi_dmul>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4620      	mov	r0, r4
 80028a2:	4629      	mov	r1, r5
 80028a4:	f7fd fd0a 	bl	80002bc <__adddf3>
 80028a8:	4603      	mov	r3, r0
 80028aa:	460c      	mov	r4, r1
 80028ac:	4618      	mov	r0, r3
 80028ae:	4621      	mov	r1, r4
 80028b0:	f7fe f9b2 	bl	8000c18 <__aeabi_d2f>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028b8:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	ed93 7a08 	vldr	s14, [r3, #32]
 80028c0:	edd7 6a06 	vldr	s13, [r7, #24]
 80028c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80028c8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028da:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	ed93 7a08 	vldr	s14, [r3, #32]
 80028e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80028e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80028ec:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <_ZN9LineTrace3pidEv+0x134>)
 80028f2:	edd3 7a00 	vldr	s15, [r3]
 80028f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028fe:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681c      	ldr	r4, [r3, #0]
 8002906:	6938      	ldr	r0, [r7, #16]
 8002908:	f7fd fe36 	bl	8000578 <__aeabi_f2d>
 800290c:	4605      	mov	r5, r0
 800290e:	460e      	mov	r6, r1
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fd fe31 	bl	8000578 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	ec43 2b11 	vmov	d1, r2, r3
 800291e:	ec46 5b10 	vmov	d0, r5, r6
 8002922:	4620      	mov	r0, r4
 8002924:	f000 fa10 	bl	8002d48 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 8002928:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_ZN9LineTrace3pidEv+0x130>)
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	6013      	str	r3, [r2, #0]

}
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002936:	bf00      	nop
 8002938:	d2f1a9fc 	.word	0xd2f1a9fc
 800293c:	3f50624d 	.word	0x3f50624d
 8002940:	20000204 	.word	0x20000204
 8002944:	20000208 	.word	0x20000208

08002948 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	ed87 0a02 	vstr	s0, [r7, #8]
 8002954:	edc7 0a01 	vstr	s1, [r7, #4]
 8002958:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	683a      	ldr	r2, [r7, #0]
 800296c:	619a      	str	r2, [r3, #24]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	621a      	str	r2, [r3, #32]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	7f1b      	ldrb	r3, [r3, #28]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <_ZN9LineTrace4flipEv+0x16>
		pid();
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff21 	bl	8002810 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fe56 	bl	8002684 <_ZN10LineSensor13emergencyStopEv>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002a20 <_ZN9LineTrace4flipEv+0x68>
 80029e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002a20 <_ZN9LineTrace4flipEv+0x68>
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 f9ac 	bl	8002d48 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	330c      	adds	r3, #12
 80029f4:	f04f 32ff 	mov.w	r2, #4294967295
 80029f8:	2101      	movs	r1, #1
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fb48 	bl	8002090 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002a00:	e007      	b.n	8002a12 <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	330c      	adds	r3, #12
 8002a06:	f04f 32ff 	mov.w	r2, #4294967295
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fb3f 	bl	8002090 <_ZN3LED2LREaa>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	f3af 8000 	nop.w
	...

08002a28 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	771a      	strb	r2, [r3, #28]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	0000      	movs	r0, r0
 8002a44:	0000      	movs	r0, r0
	...

08002a48 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	ed9f 1b05 	vldr	d1, [pc, #20]	; 8002a70 <_ZN9LineTrace4stopEv+0x28>
 8002a5e:	ed9f 0b04 	vldr	d0, [pc, #16]	; 8002a70 <_ZN9LineTrace4stopEv+0x28>
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f970 	bl	8002d48 <_ZN5Motor8setRatioEdd>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
	...

08002a78 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_dis_(0){}
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a86:	3330      	adds	r3, #48	; 0x30
 8002a88:	2200      	movs	r2, #0
 8002a8a:	701a      	strb	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a92:	3332      	adds	r3, #50	; 0x32
 8002a94:	2200      	movs	r2, #0
 8002a96:	801a      	strh	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002a9e:	3334      	adds	r3, #52	; 0x34
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]

	if(sd_mount() == 1){
 8002ac0:	f7fe fea2 	bl	8001808 <sd_mount>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf0c      	ite	eq
 8002aca:	2301      	moveq	r3, #1
 8002acc:	2300      	movne	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d005      	beq.n	8002ae0 <_ZN6Logger10sdCardInitEv+0x2c>
	  printf("mount success\r\n");
 8002ad4:	4816      	ldr	r0, [pc, #88]	; (8002b30 <_ZN6Logger10sdCardInitEv+0x7c>)
 8002ad6:	f010 ff2d 	bl	8013934 <puts>
	  ret = true;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
 8002ade:	e004      	b.n	8002aea <_ZN6Logger10sdCardInitEv+0x36>
	}
	else{
	  printf("mount error\r\n");
 8002ae0:	4814      	ldr	r0, [pc, #80]	; (8002b34 <_ZN6Logger10sdCardInitEv+0x80>)
 8002ae2:	f010 ff27 	bl	8013934 <puts>
	  ret = false;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 8002aea:	2364      	movs	r3, #100	; 0x64
 8002aec:	613b      	str	r3, [r7, #16]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 8002aee:	f107 0210 	add.w	r2, r7, #16
 8002af2:	2301      	movs	r3, #1
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4613      	mov	r3, r2
 8002af8:	2201      	movs	r2, #1
 8002afa:	490f      	ldr	r1, [pc, #60]	; (8002b38 <_ZN6Logger10sdCardInitEv+0x84>)
 8002afc:	480f      	ldr	r0, [pc, #60]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002afe:	f7fe fddf 	bl	80016c0 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2201      	movs	r2, #1
 8002b08:	490b      	ldr	r1, [pc, #44]	; (8002b38 <_ZN6Logger10sdCardInitEv+0x84>)
 8002b0a:	480c      	ldr	r0, [pc, #48]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002b0c:	f7fe fe36 	bl	800177c <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 8002b10:	f107 020c 	add.w	r2, r7, #12
 8002b14:	2301      	movs	r3, #1
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4908      	ldr	r1, [pc, #32]	; (8002b40 <_ZN6Logger10sdCardInitEv+0x8c>)
 8002b1e:	4807      	ldr	r0, [pc, #28]	; (8002b3c <_ZN6Logger10sdCardInitEv+0x88>)
 8002b20:	f7fe fdce 	bl	80016c0 <sd_write_array_int>

	return ret;
 8002b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	08017a70 	.word	0x08017a70
 8002b34:	08017a80 	.word	0x08017a80
 8002b38:	08017a90 	.word	0x08017a90
 8002b3c:	08017a9c 	.word	0x08017a9c
 8002b40:	08017aa4 	.word	0x08017aa4

08002b44 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b56:	3330      	adds	r3, #48	; 0x30
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d024      	beq.n	8002ba8 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_tim_] = data;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b64:	3332      	adds	r3, #50	; 0x32
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b78:	3332      	adds	r3, #50	; 0x32
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b86:	3332      	adds	r3, #50	; 0x32
 8002b88:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002b90:	3332      	adds	r3, #50	; 0x32
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d905      	bls.n	8002ba8 <_ZN6Logger8storeLogEf+0x64>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002ba2:	3332      	adds	r3, #50	; 0x32
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	801a      	strh	r2, [r3, #0]
	}
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <_ZN6Logger8saveLogsEPKcS1_>:
		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
	}
}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8002bc0:	68fa      	ldr	r2, [r7, #12]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bcc:	6879      	ldr	r1, [r7, #4]
 8002bce:	68b8      	ldr	r0, [r7, #8]
 8002bd0:	f7fe fcae 	bl	8001530 <sd_write_array_float>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}

08002bdc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af02      	add	r7, sp, #8
 8002be2:	60f8      	str	r0, [r7, #12]
 8002be4:	60b9      	str	r1, [r7, #8]
 8002be6:	607a      	str	r2, [r7, #4]
 8002be8:	603b      	str	r3, [r7, #0]
	sd_write_array_double(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002bf0:	3330      	adds	r3, #48	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	9200      	str	r2, [sp, #0]
 8002bf6:	f241 7270 	movw	r2, #6000	; 0x1770
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	68b8      	ldr	r0, [r7, #8]
 8002bfe:	f7fe fcfd 	bl	80015fc <sd_write_array_double>
	sd_write_array_double(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f503 3398 	add.w	r3, r3, #77824	; 0x13000
 8002c08:	33b0      	adds	r3, #176	; 0xb0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	9200      	str	r2, [sp, #0]
 8002c0e:	f241 7270 	movw	r2, #6000	; 0x1770
 8002c12:	6839      	ldr	r1, [r7, #0]
 8002c14:	68b8      	ldr	r0, [r7, #8]
 8002c16:	f7fe fcf1 	bl	80015fc <sd_write_array_double>
}
 8002c1a:	bf00      	nop
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <_ZN6Logger5startEv>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::start()
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c30:	3330      	adds	r3, #48	; 0x30
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8002c50:	3330      	adds	r3, #48	; 0x30
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	805a      	strh	r2, [r3, #2]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <_ZN5Motor4initEv>:

void Motor::init()
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	4805      	ldr	r0, [pc, #20]	; (8002ca4 <_ZN5Motor4initEv+0x20>)
 8002c90:	f008 fd1c 	bl	800b6cc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002c94:	210c      	movs	r1, #12
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <_ZN5Motor4initEv+0x20>)
 8002c98:	f008 fd18 	bl	800b6cc <HAL_TIM_PWM_Start>

}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20021938 	.word	0x20021938

08002ca8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da0d      	bge.n	8002cd6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc0:	481f      	ldr	r0, [pc, #124]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cc2:	f004 fdd1 	bl	8007868 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	425b      	negs	r3, r3
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	81fb      	strh	r3, [r7, #14]
 8002cd4:	e00a      	b.n	8002cec <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cdc:	4818      	ldr	r0, [pc, #96]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cde:	f004 fdc3 	bl	8007868 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da0d      	bge.n	8002d12 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cfc:	4810      	ldr	r0, [pc, #64]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002cfe:	f004 fdb3 	bl	8007868 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	425b      	negs	r3, r3
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	81bb      	strh	r3, [r7, #12]
 8002d10:	e00a      	b.n	8002d28 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d18:	4809      	ldr	r0, [pc, #36]	; (8002d40 <_ZN5Motor9motorCtrlEv+0x98>)
 8002d1a:	f004 fda5 	bl	8007868 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002d28:	89fa      	ldrh	r2, [r7, #14]
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002d30:	89ba      	ldrh	r2, [r7, #12]
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <_ZN5Motor9motorCtrlEv+0x9c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002d38:	bf00      	nop
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	40020c00 	.word	0x40020c00
 8002d44:	20021938 	.word	0x20021938

08002d48 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6178      	str	r0, [r7, #20]
 8002d50:	ed87 0b02 	vstr	d0, [r7, #8]
 8002d54:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d62:	f7fd fef1 	bl	8000b48 <__aeabi_dcmpgt>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d005      	beq.n	8002d78 <_ZN5Motor8setRatioEdd+0x30>
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	4c2b      	ldr	r4, [pc, #172]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d72:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002d76:	e00e      	b.n	8002d96 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d82:	f7fd fec3 	bl	8000b0c <__aeabi_dcmplt>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <_ZN5Motor8setRatioEdd+0x4e>
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	4c24      	ldr	r4, [pc, #144]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002d92:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002da0:	f7fd fed2 	bl	8000b48 <__aeabi_dcmpgt>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <_ZN5Motor8setRatioEdd+0x6e>
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	4c1c      	ldr	r4, [pc, #112]	; (8002e20 <_ZN5Motor8setRatioEdd+0xd8>)
 8002db0:	e9c7 3400 	strd	r3, r4, [r7]
 8002db4:	e00e      	b.n	8002dd4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	4b1a      	ldr	r3, [pc, #104]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002dbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002dc0:	f7fd fea4 	bl	8000b0c <__aeabi_dcmplt>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d004      	beq.n	8002dd4 <_ZN5Motor8setRatioEdd+0x8c>
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	4c15      	ldr	r4, [pc, #84]	; (8002e24 <_ZN5Motor8setRatioEdd+0xdc>)
 8002dd0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8002dda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dde:	f7fd fc23 	bl	8000628 <__aeabi_dmul>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	4618      	mov	r0, r3
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7fd fecd 	bl	8000b88 <__aeabi_d2iz>
 8002dee:	4603      	mov	r3, r0
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <_ZN5Motor8setRatioEdd+0xe0>)
 8002dfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e00:	f7fd fc12 	bl	8000628 <__aeabi_dmul>
 8002e04:	4603      	mov	r3, r0
 8002e06:	460c      	mov	r4, r1
 8002e08:	4618      	mov	r0, r3
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f7fd febc 	bl	8000b88 <__aeabi_d2iz>
 8002e10:	4603      	mov	r3, r0
 8002e12:	b21a      	sxth	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	805a      	strh	r2, [r3, #2]

}
 8002e18:	bf00      	nop
 8002e1a:	371c      	adds	r7, #28
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd90      	pop	{r4, r7, pc}
 8002e20:	3ff00000 	.word	0x3ff00000
 8002e24:	bff00000 	.word	0xbff00000
 8002e28:	409c2000 	.word	0x409c2000

08002e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002e2c:	b490      	push	{r4, r7}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	f04f 0400 	mov.w	r4, #0
 8002e44:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	f04f 0400 	mov.w	r4, #0
 8002e52:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	e9c2 3408 	strd	r3, r4, [r2, #32]
{
	encoder_ = encoder;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc90      	pop	{r4, r7}
 8002e80:	4770      	bx	lr
 8002e82:	0000      	movs	r0, r0
 8002e84:	0000      	movs	r0, r0
	...

08002e88 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe fe82 	bl	8001ba0 <_ZN3IMU8getOmegaEv>
 8002e9c:	ed87 0b04 	vstr	d0, [r7, #16]
	float distance = encoder_->getDistance();
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fe fa66 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8002eaa:	ec54 3b10 	vmov	r3, r4, d0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	f7fd feb1 	bl	8000c18 <__aeabi_d2f>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	60fb      	str	r3, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8002eba:	a358      	add	r3, pc, #352	; (adr r3, 800301c <_ZN8Odometry12calcPotitionEv+0x194>)
 8002ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002ec4:	f7fd fbb0 	bl	8000628 <__aeabi_dmul>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	460c      	mov	r4, r1
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	x_ = x_ + distance * cos(theta_ + delta_theta_ / 2);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7fd fb4d 	bl	8000578 <__aeabi_f2d>
 8002ede:	4682      	mov	sl, r0
 8002ee0:	468b      	mov	fp, r1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ef6:	f7fd fcc1 	bl	800087c <__aeabi_ddiv>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4640      	mov	r0, r8
 8002f00:	4649      	mov	r1, r9
 8002f02:	f7fd f9db 	bl	80002bc <__adddf3>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	ec43 2b17 	vmov	d7, r2, r3
 8002f0e:	eeb0 0a47 	vmov.f32	s0, s14
 8002f12:	eef0 0a67 	vmov.f32	s1, s15
 8002f16:	f00e fcaf 	bl	8011878 <cos>
 8002f1a:	ec53 2b10 	vmov	r2, r3, d0
 8002f1e:	4650      	mov	r0, sl
 8002f20:	4659      	mov	r1, fp
 8002f22:	f7fd fb81 	bl	8000628 <__aeabi_dmul>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4620      	mov	r0, r4
 8002f2c:	4629      	mov	r1, r5
 8002f2e:	f7fd f9c5 	bl	80002bc <__adddf3>
 8002f32:	4603      	mov	r3, r0
 8002f34:	460c      	mov	r4, r1
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = y_ + distance * sin(theta_ + delta_theta_ / 2);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7fd fb18 	bl	8000578 <__aeabi_f2d>
 8002f48:	4682      	mov	sl, r0
 8002f4a:	468b      	mov	fp, r1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f58:	f04f 0200 	mov.w	r2, #0
 8002f5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f60:	f7fd fc8c 	bl	800087c <__aeabi_ddiv>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd f9a6 	bl	80002bc <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	ec43 2b17 	vmov	d7, r2, r3
 8002f78:	eeb0 0a47 	vmov.f32	s0, s14
 8002f7c:	eef0 0a67 	vmov.f32	s1, s15
 8002f80:	f00e fcbe 	bl	8011900 <sin>
 8002f84:	ec53 2b10 	vmov	r2, r3, d0
 8002f88:	4650      	mov	r0, sl
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	f7fd fb4c 	bl	8000628 <__aeabi_dmul>
 8002f90:	4602      	mov	r2, r0
 8002f92:	460b      	mov	r3, r1
 8002f94:	4620      	mov	r0, r4
 8002f96:	4629      	mov	r1, r5
 8002f98:	f7fd f990 	bl	80002bc <__adddf3>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	460c      	mov	r4, r1
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = theta_ + delta_theta_;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	4623      	mov	r3, r4
 8002fb6:	f7fd f981 	bl	80002bc <__adddf3>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	e9c2 3408 	strd	r3, r4, [r2, #32]


	monitor_x = x_;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4621      	mov	r1, r4
 8002fce:	f7fd fe23 	bl	8000c18 <__aeabi_d2f>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <_ZN8Odometry12calcPotitionEv+0x188>)
 8002fd6:	601a      	str	r2, [r3, #0]
	monitor_y = y_;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	4621      	mov	r1, r4
 8002fe2:	f7fd fe19 	bl	8000c18 <__aeabi_d2f>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	; (8003014 <_ZN8Odometry12calcPotitionEv+0x18c>)
 8002fea:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	4621      	mov	r1, r4
 8002ff6:	f7fd fe0f 	bl	8000c18 <__aeabi_d2f>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <_ZN8Odometry12calcPotitionEv+0x190>)
 8002ffe:	601a      	str	r2, [r3, #0]


}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	f3af 8000 	nop.w
 8003010:	2000020c 	.word	0x2000020c
 8003014:	20000210 	.word	0x20000210
 8003018:	20000214 	.word	0x20000214
 800301c:	d2f1a9fc 	.word	0xd2f1a9fc
 8003020:	3f50624d 	.word	0x3f50624d

08003024 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
	calcPotition();
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f7ff ff2b 	bl	8002e88 <_ZN8Odometry12calcPotitionEv>
}
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <_ZN8Odometry4getXEv>:

double Odometry::getX()
{
 800303a:	b490      	push	{r4, r7}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	return x_;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003048:	ec44 3b17 	vmov	d7, r3, r4
}
 800304c:	eeb0 0a47 	vmov.f32	s0, s14
 8003050:	eef0 0a67 	vmov.f32	s1, s15
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bc90      	pop	{r4, r7}
 800305a:	4770      	bx	lr

0800305c <_ZN8Odometry4getYEv>:

double Odometry::getY()
{
 800305c:	b490      	push	{r4, r7}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	return y_;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 800306a:	ec44 3b17 	vmov	d7, r3, r4
}
 800306e:	eeb0 0a47 	vmov.f32	s0, s14
 8003072:	eef0 0a67 	vmov.f32	s1, s15
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bc90      	pop	{r4, r7}
 800307c:	4770      	bx	lr

0800307e <_ZN8Odometry8getThetaEv>:

double Odometry::getTheta()
{
 800307e:	b490      	push	{r4, r7}
 8003080:	b082      	sub	sp, #8
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
	return theta_;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800308c:	ec44 3b17 	vmov	d7, r3, r4
}
 8003090:	eeb0 0a47 	vmov.f32	s0, s14
 8003094:	eef0 0a67 	vmov.f32	s1, s15
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bc90      	pop	{r4, r7}
 800309e:	4770      	bx	lr

080030a0 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80030a0:	b490      	push	{r4, r7}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	x_ = 0;
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	f04f 0400 	mov.w	r4, #0
 80030b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_ = 0;
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	f04f 0400 	mov.w	r4, #0
 80030c0:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_ = 0;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	f04f 0300 	mov.w	r3, #0
 80030ca:	f04f 0400 	mov.w	r4, #0
 80030ce:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc90      	pop	{r4, r7}
 80030da:	4770      	bx	lr

080030dc <_ZN13PathFollowingC1Ev>:
 */

#include "PathFollowing.hpp"
#include "path_following.h"

PathFollowing::PathFollowing()
 80030dc:	b490      	push	{r4, r7}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
{
	rtParam.kx = 0;
 80030e4:	4a29      	ldr	r2, [pc, #164]	; (800318c <_ZN13PathFollowingC1Ev+0xb0>)
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	f04f 0400 	mov.w	r4, #0
 80030ee:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80030f2:	4a26      	ldr	r2, [pc, #152]	; (800318c <_ZN13PathFollowingC1Ev+0xb0>)
 80030f4:	f04f 0300 	mov.w	r3, #0
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <_ZN13PathFollowingC1Ev+0xb0>)
 8003102:	f04f 0300 	mov.w	r3, #0
 8003106:	f04f 0400 	mov.w	r4, #0
 800310a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 800310e:	4a20      	ldr	r2, [pc, #128]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	f04f 0400 	mov.w	r4, #0
 8003118:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 800311e:	f04f 0300 	mov.w	r3, #0
 8003122:	f04f 0400 	mov.w	r4, #0
 8003126:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 800312a:	4a19      	ldr	r2, [pc, #100]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	f04f 0400 	mov.w	r4, #0
 8003134:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8003138:	4a15      	ldr	r2, [pc, #84]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	f04f 0400 	mov.w	r4, #0
 8003142:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f04f 0400 	mov.w	r4, #0
 8003150:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <_ZN13PathFollowingC1Ev+0xb4>)
 8003156:	f04f 0300 	mov.w	r3, #0
 800315a:	f04f 0400 	mov.w	r4, #0
 800315e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8003162:	4a0c      	ldr	r2, [pc, #48]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f04f 0400 	mov.w	r4, #0
 800316c:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8003170:	4a08      	ldr	r2, [pc, #32]	; (8003194 <_ZN13PathFollowingC1Ev+0xb8>)
 8003172:	f04f 0300 	mov.w	r3, #0
 8003176:	f04f 0400 	mov.w	r4, #0
 800317a:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bc90      	pop	{r4, r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20021e38 	.word	0x20021e38
 8003190:	20021dc8 	.word	0x20021dc8
 8003194:	20021e28 	.word	0x20021e28

08003198 <_ZN13PathFollowing4initEv>:

void PathFollowing::init()
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b082      	sub	sp, #8
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 80031a0:	f001 fd4c 	bl	8004c3c <path_following_initialize>
}
 80031a4:	bf00      	nop
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80031ac:	b490      	push	{r4, r7}
 80031ae:	b088      	sub	sp, #32
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	61f8      	str	r0, [r7, #28]
 80031b4:	ed87 0b04 	vstr	d0, [r7, #16]
 80031b8:	ed87 1b02 	vstr	d1, [r7, #8]
 80031bc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80031c0:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031c2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80031c6:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80031ca:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031cc:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031d0:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80031d4:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80031d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031da:	e9c2 3404 	strd	r3, r4, [r2, #16]

}
 80031de:	bf00      	nop
 80031e0:	3720      	adds	r7, #32
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc90      	pop	{r4, r7}
 80031e6:	4770      	bx	lr
 80031e8:	20021e38 	.word	0x20021e38

080031ec <_ZN13PathFollowing13setTargetPathEddd>:

void PathFollowing::setTargetPath(double x, double y, double th)
{
 80031ec:	b490      	push	{r4, r7}
 80031ee:	b088      	sub	sp, #32
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	61f8      	str	r0, [r7, #28]
 80031f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80031f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80031fc:	ed87 2b00 	vstr	d2, [r7]
	rtU.target_x = x;
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 8003202:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003206:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = y;
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 800320c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003210:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = th;
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <_ZN13PathFollowing13setTargetPathEddd+0x3c>)
 8003216:	e9d7 3400 	ldrd	r3, r4, [r7]
 800321a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800321e:	bf00      	nop
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bc90      	pop	{r4, r7}
 8003226:	4770      	bx	lr
 8003228:	20021dc8 	.word	0x20021dc8

0800322c <_ZN13PathFollowing14setCurrentPathEddd>:

void PathFollowing::setCurrentPath(double x, double y, double th)
{
 800322c:	b490      	push	{r4, r7}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	61f8      	str	r0, [r7, #28]
 8003234:	ed87 0b04 	vstr	d0, [r7, #16]
 8003238:	ed87 1b02 	vstr	d1, [r7, #8]
 800323c:	ed87 2b00 	vstr	d2, [r7]
	rtU.x= x;
 8003240:	4a09      	ldr	r2, [pc, #36]	; (8003268 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003242:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003246:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = y;
 800324a:	4a07      	ldr	r2, [pc, #28]	; (8003268 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 800324c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003250:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = th;
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <_ZN13PathFollowing14setCurrentPathEddd+0x3c>)
 8003256:	e9d7 3400 	ldrd	r3, r4, [r7]
 800325a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
}
 800325e:	bf00      	nop
 8003260:	3720      	adds	r7, #32
 8003262:	46bd      	mov	sp, r7
 8003264:	bc90      	pop	{r4, r7}
 8003266:	4770      	bx	lr
 8003268:	20021dc8 	.word	0x20021dc8

0800326c <_ZN13PathFollowing18getTargetVelocitysERdS0_>:

void PathFollowing::getTargetVelocitys(double &v, double &omega)
{
 800326c:	b490      	push	{r4, r7}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
	v = rtY.V_tar;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 800327a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	e9c2 3400 	strd	r3, r4, [r2]
	omega = rtY.tar;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <_ZN13PathFollowing18getTargetVelocitysERdS0_+0x30>)
 8003286:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	e9c2 3400 	strd	r3, r4, [r2]

}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bc90      	pop	{r4, r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20021e28 	.word	0x20021e28

080032a0 <_ZN13PathFollowing4flipEv>:
void PathFollowing::flip()
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
	path_following_step();
 80032a8:	f001 fbc0 	bl	8004a2c <path_following_step>
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80032bc:	2088      	movs	r0, #136	; 0x88
 80032be:	f7fe fdac 	bl	8001e1a <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80032c2:	2080      	movs	r0, #128	; 0x80
 80032c4:	f7fe fda9 	bl	8001e1a <INA260_init>
}
 80032c8:	bf00      	nop
 80032ca:	3708      	adds	r7, #8
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80032d0:	b590      	push	{r4, r7, lr}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80032d8:	2188      	movs	r1, #136	; 0x88
 80032da:	2002      	movs	r0, #2
 80032dc:	f7fe fd3a 	bl	8001d54 <INA260_read>
 80032e0:	4603      	mov	r3, r0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f936 	bl	8000554 <__aeabi_i2d>
 80032e8:	a30c      	add	r3, pc, #48	; (adr r3, 800331c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fd f99b 	bl	8000628 <__aeabi_dmul>
 80032f2:	4603      	mov	r3, r0
 80032f4:	460c      	mov	r4, r1
 80032f6:	4618      	mov	r0, r3
 80032f8:	4621      	mov	r1, r4
 80032fa:	f7fd fc8d 	bl	8000c18 <__aeabi_d2f>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	4a03      	ldr	r2, [pc, #12]	; (8003318 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800330a:	6013      	str	r3, [r2, #0]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}
 8003314:	f3af 8000 	nop.w
 8003318:	20000218 	.word	0x20000218
 800331c:	47ae147b 	.word	0x47ae147b
 8003320:	3f547ae1 	.word	0x3f547ae1
 8003324:	00000000 	.word	0x00000000

08003328 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8003330:	2300      	movs	r3, #0
 8003332:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f7fd f91d 	bl	8000578 <__aeabi_f2d>
 800333e:	a311      	add	r3, pc, #68	; (adr r3, 8003384 <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8003340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003344:	f7fd fbe2 	bl	8000b0c <__aeabi_dcmplt>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <_ZN11PowerSensor12butteryCheckEv+0x34>
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	b29a      	uxth	r2, r3
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003358:	801a      	strh	r2, [r3, #0]
 800335a:	e002      	b.n	8003362 <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 800335c:	4b08      	ldr	r3, [pc, #32]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 800335e:	2200      	movs	r2, #0
 8003360:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8003362:	4b07      	ldr	r3, [pc, #28]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d004      	beq.n	8003374 <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 800336e:	4b04      	ldr	r3, [pc, #16]	; (8003380 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8003370:	2201      	movs	r2, #1
 8003372:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8003374:	7bfb      	ldrb	r3, [r7, #15]
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2000021c 	.word	0x2000021c
 8003384:	9999999a 	.word	0x9999999a
 8003388:	401d9999 	.word	0x401d9999

0800338c <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8003398:	2102      	movs	r1, #2
 800339a:	4822      	ldr	r0, [pc, #136]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 800339c:	f004 fa4c 	bl	8007838 <HAL_GPIO_ReadPin>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80033b0:	89fb      	ldrh	r3, [r7, #14]
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80033b8:	2108      	movs	r1, #8
 80033ba:	481a      	ldr	r0, [pc, #104]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033bc:	f004 fa3c 	bl	8007838 <HAL_GPIO_ReadPin>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf0c      	ite	eq
 80033c6:	2301      	moveq	r3, #1
 80033c8:	2300      	movne	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <_ZN12RotarySwitch8getValueEv+0x4c>
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	f043 0302 	orr.w	r3, r3, #2
 80033d6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80033d8:	2110      	movs	r1, #16
 80033da:	4812      	ldr	r0, [pc, #72]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033dc:	f004 fa2c 	bl	8007838 <HAL_GPIO_ReadPin>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf0c      	ite	eq
 80033e6:	2301      	moveq	r3, #1
 80033e8:	2300      	movne	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <_ZN12RotarySwitch8getValueEv+0x6c>
 80033f0:	89fb      	ldrh	r3, [r7, #14]
 80033f2:	f043 0304 	orr.w	r3, r3, #4
 80033f6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	480a      	ldr	r0, [pc, #40]	; (8003424 <_ZN12RotarySwitch8getValueEv+0x98>)
 80033fc:	f004 fa1c 	bl	8007838 <HAL_GPIO_ReadPin>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf0c      	ite	eq
 8003406:	2301      	moveq	r3, #1
 8003408:	2300      	movne	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <_ZN12RotarySwitch8getValueEv+0x8c>
 8003410:	89fb      	ldrh	r3, [r7, #14]
 8003412:	f043 0308 	orr.w	r3, r3, #8
 8003416:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8003418:	89fb      	ldrh	r3, [r7, #14]

}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40020c00 	.word	0x40020c00

08003428 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
{

}
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 800344c:	887b      	ldrh	r3, [r7, #2]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d111      	bne.n	8003476 <_ZN10SideSensor12updateStatusEt+0x36>
 8003452:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	f083 0301 	eor.w	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00a      	beq.n	8003476 <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	881b      	ldrh	r3, [r3, #0]
 8003464:	f043 0301 	orr.w	r3, r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 800346e:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e010      	b.n	8003498 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8003476:	887b      	ldrh	r3, [r7, #2]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d10d      	bne.n	8003498 <_ZN10SideSensor12updateStatusEt+0x58>
 800347c:	4b1d      	ldr	r3, [pc, #116]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8003492:	4b18      	ldr	r3, [pc, #96]	; (80034f4 <_ZN10SideSensor12updateStatusEt+0xb4>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800349e:	d111      	bne.n	80034c4 <_ZN10SideSensor12updateStatusEt+0x84>
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	f083 0301 	eor.w	r3, r3, #1
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	f043 0302 	orr.w	r3, r3, #2
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 80034c2:	e011      	b.n	80034e8 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034ca:	d10d      	bne.n	80034e8 <_ZN10SideSensor12updateStatusEt+0xa8>
 80034cc:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d009      	beq.n	80034e8 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	f083 0302 	eor.w	r3, r3, #2
 80034dc:	b29a      	uxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <_ZN10SideSensor12updateStatusEt+0xb8>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	2000021e 	.word	0x2000021e
 80034f8:	2000021f 	.word	0x2000021f

080034fc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80034fc:	b490      	push	{r4, r7}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	f04f 0400 	mov.w	r4, #0
 800352c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	619a      	str	r2, [r3, #24]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	61da      	str	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	621a      	str	r2, [r3, #32]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	625a      	str	r2, [r3, #36]	; 0x24
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	629a      	str	r2, [r3, #40]	; 0x28
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
{
	motor_ = motor;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	635a      	str	r2, [r3, #52]	; 0x34
	encoder_ = encoder;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	639a      	str	r2, [r3, #56]	; 0x38
	imu_ = imu;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	63da      	str	r2, [r3, #60]	; 0x3c

}
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bc90      	pop	{r4, r7}
 8003584:	4770      	bx	lr
	...

08003588 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

double VelocityCtrl::calcVelocity()
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
	double enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	f107 0208 	add.w	r2, r7, #8
 8003598:	f107 0110 	add.w	r1, r7, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7fd fed3 	bl	8001348 <_ZN7Encoder6getCntERdS0_>
	double enc_cnt = (enc_l + enc_r) / 2;
 80035a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035aa:	461a      	mov	r2, r3
 80035ac:	4623      	mov	r3, r4
 80035ae:	f7fc fe85 	bl	80002bc <__adddf3>
 80035b2:	4603      	mov	r3, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	4618      	mov	r0, r3
 80035b8:	4621      	mov	r1, r4
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035c2:	f7fd f95b 	bl	800087c <__aeabi_ddiv>
 80035c6:	4603      	mov	r3, r0
 80035c8:	460c      	mov	r4, r1
 80035ca:	e9c7 3406 	strd	r3, r4, [r7, #24]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80035ce:	a310      	add	r3, pc, #64	; (adr r3, 8003610 <_ZN12VelocityCtrl12calcVelocityEv+0x88>)
 80035d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035d8:	f7fd f826 	bl	8000628 <__aeabi_dmul>
 80035dc:	4603      	mov	r3, r0
 80035de:	460c      	mov	r4, r1
 80035e0:	4618      	mov	r0, r3
 80035e2:	4621      	mov	r1, r4
 80035e4:	f7fd fb18 	bl	8000c18 <__aeabi_d2f>
 80035e8:	4602      	mov	r2, r0
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fc ffc0 	bl	8000578 <__aeabi_f2d>
 80035f8:	4603      	mov	r3, r0
 80035fa:	460c      	mov	r4, r1
 80035fc:	ec44 3b17 	vmov	d7, r3, r4
}
 8003600:	eeb0 0a47 	vmov.f32	s0, s14
 8003604:	eef0 0a67 	vmov.f32	s1, s15
 8003608:	3724      	adds	r7, #36	; 0x24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	bf00      	nop
 8003610:	1ab1d998 	.word	0x1ab1d998
 8003614:	3f7830b5 	.word	0x3f7830b5

08003618 <_ZN12VelocityCtrl3pidEv>:
	return current_omega_;
}
*/

void VelocityCtrl::pid()
{
 8003618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800361a:	b08d      	sub	sp, #52	; 0x34
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	edd3 7a02 	vldr	s15, [r3, #8]
 800362c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003630:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- imu_->getOmega();
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4618      	mov	r0, r3
 800363a:	f7fc ff9d 	bl	8000578 <__aeabi_f2d>
 800363e:	4604      	mov	r4, r0
 8003640:	460d      	mov	r5, r1
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003646:	4618      	mov	r0, r3
 8003648:	f7fe faaa 	bl	8001ba0 <_ZN3IMU8getOmegaEv>
 800364c:	ec53 2b10 	vmov	r2, r3, d0
 8003650:	4620      	mov	r0, r4
 8003652:	4629      	mov	r1, r5
 8003654:	f7fc fe30 	bl	80002b8 <__aeabi_dsub>
 8003658:	4603      	mov	r3, r0
 800365a:	460c      	mov	r4, r1
 800365c:	4618      	mov	r0, r3
 800365e:	4621      	mov	r1, r4
 8003660:	f7fd fada 	bl	8000c18 <__aeabi_d2f>
 8003664:	4603      	mov	r3, r0
 8003666:	62bb      	str	r3, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	edd3 7a06 	vldr	s15, [r3, #24]
 800366e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003676:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	ed93 7a07 	vldr	s14, [r3, #28]
 8003680:	4b73      	ldr	r3, [pc, #460]	; (8003850 <_ZN12VelocityCtrl3pidEv+0x238>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800368a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800368e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003692:	ee17 0a90 	vmov	r0, s15
 8003696:	f7fc ff6f 	bl	8000578 <__aeabi_f2d>
 800369a:	a36b      	add	r3, pc, #428	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f7fc ffc2 	bl	8000628 <__aeabi_dmul>
 80036a4:	4603      	mov	r3, r0
 80036a6:	460c      	mov	r4, r1
 80036a8:	4618      	mov	r0, r3
 80036aa:	4621      	mov	r1, r4
 80036ac:	f7fd fab4 	bl	8000c18 <__aeabi_d2f>
 80036b0:	4603      	mov	r3, r0
 80036b2:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 80036b4:	4b67      	ldr	r3, [pc, #412]	; (8003854 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fc ff5d 	bl	8000578 <__aeabi_f2d>
 80036be:	4604      	mov	r4, r0
 80036c0:	460d      	mov	r5, r1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80036c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d0:	ee17 0a90 	vmov	r0, s15
 80036d4:	f7fc ff50 	bl	8000578 <__aeabi_f2d>
 80036d8:	a35b      	add	r3, pc, #364	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f7fc ffa3 	bl	8000628 <__aeabi_dmul>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4620      	mov	r0, r4
 80036e8:	4629      	mov	r1, r5
 80036ea:	f7fc fde7 	bl	80002bc <__adddf3>
 80036ee:	4603      	mov	r3, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	4618      	mov	r0, r3
 80036f4:	4621      	mov	r1, r4
 80036f6:	f7fd fa8f 	bl	8000c18 <__aeabi_d2f>
 80036fa:	4602      	mov	r2, r0
 80036fc:	4b55      	ldr	r3, [pc, #340]	; (8003854 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80036fe:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003706:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800370a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800370e:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8003718:	4b4f      	ldr	r3, [pc, #316]	; (8003858 <_ZN12VelocityCtrl3pidEv+0x240>)
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8003722:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	ee17 0a90 	vmov	r0, s15
 800372e:	f7fc ff23 	bl	8000578 <__aeabi_f2d>
 8003732:	a345      	add	r3, pc, #276	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003738:	f7fc ff76 	bl	8000628 <__aeabi_dmul>
 800373c:	4603      	mov	r3, r0
 800373e:	460c      	mov	r4, r1
 8003740:	4618      	mov	r0, r3
 8003742:	4621      	mov	r1, r4
 8003744:	f7fd fa68 	bl	8000c18 <__aeabi_d2f>
 8003748:	4603      	mov	r3, r0
 800374a:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 800374c:	4b43      	ldr	r3, [pc, #268]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4618      	mov	r0, r3
 8003752:	f7fc ff11 	bl	8000578 <__aeabi_f2d>
 8003756:	4604      	mov	r4, r0
 8003758:	460d      	mov	r5, r1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8003760:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003768:	ee17 0a90 	vmov	r0, s15
 800376c:	f7fc ff04 	bl	8000578 <__aeabi_f2d>
 8003770:	a335      	add	r3, pc, #212	; (adr r3, 8003848 <_ZN12VelocityCtrl3pidEv+0x230>)
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f7fc ff57 	bl	8000628 <__aeabi_dmul>
 800377a:	4602      	mov	r2, r0
 800377c:	460b      	mov	r3, r1
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	f7fc fd9b 	bl	80002bc <__adddf3>
 8003786:	4603      	mov	r3, r0
 8003788:	460c      	mov	r4, r1
 800378a:	4618      	mov	r0, r3
 800378c:	4621      	mov	r1, r4
 800378e:	f7fd fa43 	bl	8000c18 <__aeabi_d2f>
 8003792:	4602      	mov	r2, r0
 8003794:	4b31      	ldr	r3, [pc, #196]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 8003796:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003798:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800379c:	edd7 7a08 	vldr	s15, [r7, #32]
 80037a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037a4:	4b2b      	ldr	r3, [pc, #172]	; (8003854 <_ZN12VelocityCtrl3pidEv+0x23c>)
 80037a6:	edd3 7a00 	vldr	s15, [r3]
 80037aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ae:	edc7 7a05 	vstr	s15, [r7, #20]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 80037b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80037ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80037be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c2:	4b26      	ldr	r3, [pc, #152]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037cc:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 80037d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80037d4:	edd7 7a06 	vldr	s15, [r7, #24]
 80037d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037dc:	4b1f      	ldr	r3, [pc, #124]	; (800385c <_ZN12VelocityCtrl3pidEv+0x244>)
 80037de:	edd3 7a00 	vldr	s15, [r3]
 80037e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e6:	eef1 7a67 	vneg.f32	s15, s15
 80037ea:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80037f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80037f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037fe:	ee17 0a90 	vmov	r0, s15
 8003802:	f7fc feb9 	bl	8000578 <__aeabi_f2d>
 8003806:	4605      	mov	r5, r0
 8003808:	460e      	mov	r6, r1
 800380a:	ed97 7a05 	vldr	s14, [r7, #20]
 800380e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003816:	ee17 0a90 	vmov	r0, s15
 800381a:	f7fc fead 	bl	8000578 <__aeabi_f2d>
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ec43 2b11 	vmov	d1, r2, r3
 8003826:	ec46 5b10 	vmov	d0, r5, r6
 800382a:	4620      	mov	r0, r4
 800382c:	f7ff fa8c 	bl	8002d48 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <_ZN12VelocityCtrl3pidEv+0x238>)
 8003832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003834:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 8003836:	4a08      	ldr	r2, [pc, #32]	; (8003858 <_ZN12VelocityCtrl3pidEv+0x240>)
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	3734      	adds	r7, #52	; 0x34
 8003840:	46bd      	mov	sp, r7
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003844:	f3af 8000 	nop.w
 8003848:	d2f1a9fc 	.word	0xd2f1a9fc
 800384c:	3f50624d 	.word	0x3f50624d
 8003850:	20000220 	.word	0x20000220
 8003854:	20000228 	.word	0x20000228
 8003858:	20000224 	.word	0x20000224
 800385c:	2000022c 	.word	0x2000022c

08003860 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	ed87 0a02 	vstr	s0, [r7, #8]
 800386c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	605a      	str	r2, [r3, #4]
}
 800387c:	bf00      	nop
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	ed87 0a02 	vstr	s0, [r7, #8]
 8003894:	edc7 0a01 	vstr	s1, [r7, #4]
 8003898:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	61da      	str	r2, [r3, #28]
	v_ki_ = ki;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	621a      	str	r2, [r3, #32]
}
 80038ae:	bf00      	nop
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b085      	sub	sp, #20
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80038c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80038ca:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	629a      	str	r2, [r3, #40]	; 0x28
	o_ki_ = ki;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038e0:	bf00      	nop
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fe47 	bl	8003588 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <_ZN12VelocityCtrl4flipEv+0x1e>
		pid();
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff fe87 	bl	8003618 <_ZN12VelocityCtrl3pidEv>
	}


}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2201      	movs	r2, #1
 800391e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	//calcOmega();
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	motor_->setRatio(0, 0);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003944:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003960 <_ZN12VelocityCtrl4stopEv+0x30>
 8003948:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003960 <_ZN12VelocityCtrl4stopEv+0x30>
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff f9fb 	bl	8002d48 <_ZN5Motor8setRatioEdd>

}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	f3af 8000 	nop.w
	...

08003968 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003970:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003974:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d013      	beq.n	80039a8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003980:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003984:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003988:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00b      	beq.n	80039a8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003990:	e000      	b.n	8003994 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003992:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003994:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0f9      	beq.n	8003992 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800399e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80039a8:	687b      	ldr	r3, [r7, #4]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b086      	sub	sp, #24
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	60f8      	str	r0, [r7, #12]
 80039be:	60b9      	str	r1, [r7, #8]
 80039c0:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e009      	b.n	80039dc <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	60ba      	str	r2, [r7, #8]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ffc9 	bl	8003968 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
 80039dc:	697a      	ldr	r2, [r7, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	dbf1      	blt.n	80039c8 <_write+0x12>
  }
  return len;
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b082      	sub	sp, #8
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	4603      	mov	r3, r0
 80039f6:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 80039f8:	88fb      	ldrh	r3, [r7, #6]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f002 f8f0 	bl	8005be0 <cppExit>
}
 8003a00:	bf00      	nop
 8003a02:	3708      	adds	r7, #8
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1e      	ldr	r2, [pc, #120]	; (8003a90 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10e      	bne.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003a1a:	f002 f801 	bl	8005a20 <cppFlip1ms>

		tim6_timer++;
 8003a1e:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	3301      	adds	r3, #1
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a26:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d902      	bls.n	8003a38 <HAL_TIM_PeriodElapsedCallback+0x30>
 8003a32:	4b18      	ldr	r3, [pc, #96]	; (8003a94 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a17      	ldr	r2, [pc, #92]	; (8003a9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d10e      	bne.n	8003a60 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 8003a42:	f002 f8b3 	bl	8005bac <cppFlip100ns>

		tim7_timer++;
 8003a46:	4b16      	ldr	r3, [pc, #88]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a4e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a10      	ldr	r2, [pc, #64]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d902      	bls.n	8003a60 <HAL_TIM_PeriodElapsedCallback+0x58>
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a0f      	ldr	r2, [pc, #60]	; (8003aa4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d10e      	bne.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003a6a:	f002 f8a9 	bl	8005bc0 <cppFlip10ms>

		tim13_timer++;
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	3301      	adds	r3, #1
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a76:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a06      	ldr	r2, [pc, #24]	; (8003a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d902      	bls.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x80>
 8003a82:	4b09      	ldr	r3, [pc, #36]	; (8003aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	601a      	str	r2, [r3, #0]
	}

}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40001000 	.word	0x40001000
 8003a94:	20021aa8 	.word	0x20021aa8
 8003a98:	0001869f 	.word	0x0001869f
 8003a9c:	40001400 	.word	0x40001400
 8003aa0:	20021aec 	.word	0x20021aec
 8003aa4:	40001c00 	.word	0x40001c00
 8003aa8:	20021af0 	.word	0x20021af0

08003aac <init>:

void init()
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ab6:	4808      	ldr	r0, [pc, #32]	; (8003ad8 <init+0x2c>)
 8003ab8:	f003 fed6 	bl	8007868 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8003abc:	4807      	ldr	r0, [pc, #28]	; (8003adc <init+0x30>)
 8003abe:	f007 fdb6 	bl	800b62e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <init+0x34>)
 8003ac4:	f007 fdb3 	bl	800b62e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8003ac8:	4806      	ldr	r0, [pc, #24]	; (8003ae4 <init+0x38>)
 8003aca:	f007 fdb0 	bl	800b62e <HAL_TIM_Base_Start_IT>

	cppInit();
 8003ace:	f001 ff1f 	bl	8005910 <cppInit>

	//path_following_initialize();

}
 8003ad2:	bf00      	nop
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000
 8003adc:	20021bd4 	.word	0x20021bd4
 8003ae0:	20021d78 	.word	0x20021d78
 8003ae4:	20021af4 	.word	0x20021af4

08003ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003aec:	f002 fbb4 	bl	8006258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003af0:	f000 f82a 	bl	8003b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003af4:	f000 fdbc 	bl	8004670 <MX_GPIO_Init>
  MX_DMA_Init();
 8003af8:	f000 fd8a 	bl	8004610 <MX_DMA_Init>
  MX_I2C2_Init();
 8003afc:	f000 f9e8 	bl	8003ed0 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8003b00:	f000 fa14 	bl	8003f2c <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003b04:	f000 fa32 	bl	8003f6c <MX_SPI2_Init>
  MX_TIM1_Init();
 8003b08:	f000 fa66 	bl	8003fd8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003b0c:	f000 fb70 	bl	80041f0 <MX_TIM4_Init>
  MX_TIM8_Init();
 8003b10:	f000 fc3c 	bl	800438c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003b14:	f000 fd52 	bl	80045bc <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003b18:	f009 fd5c 	bl	800d5d4 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003b1c:	f000 fbcc 	bl	80042b8 <MX_TIM6_Init>
  MX_I2C1_Init();
 8003b20:	f000 f9a8 	bl	8003e74 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003b24:	f000 fb00 	bl	8004128 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003b28:	f000 fc88 	bl	800443c <MX_TIM10_Init>
  MX_TIM11_Init();
 8003b2c:	f000 fcd4 	bl	80044d8 <MX_TIM11_Init>
  MX_ADC2_Init();
 8003b30:	f000 f898 	bl	8003c64 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003b34:	f000 fbf6 	bl	8004324 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003b38:	f000 fd1c 	bl	8004574 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003b3c:	f7ff ffb6 	bl	8003aac <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8003b40:	f002 f85e 	bl	8005c00 <cppLoop>
 8003b44:	e7fc      	b.n	8003b40 <main+0x58>
	...

08003b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b0a4      	sub	sp, #144	; 0x90
 8003b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b4e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003b52:	2234      	movs	r2, #52	; 0x34
 8003b54:	2100      	movs	r1, #0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f00f f81e 	bl	8012b98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b5c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	223c      	movs	r2, #60	; 0x3c
 8003b72:	2100      	movs	r1, #0
 8003b74:	4618      	mov	r0, r3
 8003b76:	f00f f80f 	bl	8012b98 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]
 8003b7e:	4b37      	ldr	r3, [pc, #220]	; (8003c5c <SystemClock_Config+0x114>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	4a36      	ldr	r2, [pc, #216]	; (8003c5c <SystemClock_Config+0x114>)
 8003b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b88:	6413      	str	r3, [r2, #64]	; 0x40
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <SystemClock_Config+0x114>)
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b92:	60bb      	str	r3, [r7, #8]
 8003b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	4b31      	ldr	r3, [pc, #196]	; (8003c60 <SystemClock_Config+0x118>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a30      	ldr	r2, [pc, #192]	; (8003c60 <SystemClock_Config+0x118>)
 8003ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b2e      	ldr	r3, [pc, #184]	; (8003c60 <SystemClock_Config+0x118>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bc4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003bca:	23b4      	movs	r3, #180	; 0xb4
 8003bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8003bd6:	2308      	movs	r3, #8
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003be2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003be6:	4618      	mov	r0, r3
 8003be8:	f005 fa78 	bl	80090dc <HAL_RCC_OscConfig>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8003bf2:	f000 fe93 	bl	800491c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003bf6:	f004 fdf3 	bl	80087e0 <HAL_PWREx_EnableOverDrive>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8003c00:	f000 fe8c 	bl	800491c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c04:	230f      	movs	r3, #15
 8003c06:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003c10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003c14:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c1a:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c1c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c20:	2105      	movs	r1, #5
 8003c22:	4618      	mov	r0, r3
 8003c24:	f004 fe2c 	bl	8008880 <HAL_RCC_ClockConfig>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8003c2e:	f000 fe75 	bl	800491c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003c32:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4618      	mov	r0, r3
 8003c46:	f005 f80b 	bl	8008c60 <HAL_RCCEx_PeriphCLKConfig>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8003c50:	f000 fe64 	bl	800491c <Error_Handler>
  }
}
 8003c54:	bf00      	nop
 8003c56:	3790      	adds	r7, #144	; 0x90
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	40007000 	.word	0x40007000

08003c64 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]
 8003c74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003c76:	4b7c      	ldr	r3, [pc, #496]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c78:	4a7c      	ldr	r2, [pc, #496]	; (8003e6c <MX_ADC2_Init+0x208>)
 8003c7a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c7c:	4b7a      	ldr	r3, [pc, #488]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c82:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003c84:	4b78      	ldr	r3, [pc, #480]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003c8a:	4b77      	ldr	r3, [pc, #476]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003c90:	4b75      	ldr	r3, [pc, #468]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003c96:	4b74      	ldr	r3, [pc, #464]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c9e:	4b72      	ldr	r3, [pc, #456]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003ca4:	4b70      	ldr	r3, [pc, #448]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003ca6:	4a72      	ldr	r2, [pc, #456]	; (8003e70 <MX_ADC2_Init+0x20c>)
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003caa:	4b6f      	ldr	r3, [pc, #444]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8003cb0:	4b6d      	ldr	r3, [pc, #436]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cb2:	220e      	movs	r2, #14
 8003cb4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003cb6:	4b6c      	ldr	r3, [pc, #432]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003cbe:	4b6a      	ldr	r3, [pc, #424]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003cc4:	4868      	ldr	r0, [pc, #416]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003cc6:	f002 fb5b 	bl	8006380 <HAL_ADC_Init>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003cd0:	f000 fe24 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8003cdc:	2306      	movs	r3, #6
 8003cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ce0:	463b      	mov	r3, r7
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4860      	ldr	r0, [pc, #384]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003ce6:	f002 fc9f 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003cf0:	f000 fe14 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003cf4:	230b      	movs	r3, #11
 8003cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003cfc:	463b      	mov	r3, r7
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4859      	ldr	r0, [pc, #356]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d02:	f002 fc91 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003d0c:	f000 fe06 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003d14:	2303      	movs	r3, #3
 8003d16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d18:	463b      	mov	r3, r7
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	4852      	ldr	r0, [pc, #328]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d1e:	f002 fc83 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003d28:	f000 fdf8 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003d2c:	230d      	movs	r3, #13
 8003d2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003d30:	2304      	movs	r3, #4
 8003d32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d34:	463b      	mov	r3, r7
 8003d36:	4619      	mov	r1, r3
 8003d38:	484b      	ldr	r0, [pc, #300]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d3a:	f002 fc75 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003d44:	f000 fdea 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003d4c:	2305      	movs	r3, #5
 8003d4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d50:	463b      	mov	r3, r7
 8003d52:	4619      	mov	r1, r3
 8003d54:	4844      	ldr	r0, [pc, #272]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d56:	f002 fc67 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003d60:	f000 fddc 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d64:	2301      	movs	r3, #1
 8003d66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003d68:	2306      	movs	r3, #6
 8003d6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d6c:	463b      	mov	r3, r7
 8003d6e:	4619      	mov	r1, r3
 8003d70:	483d      	ldr	r0, [pc, #244]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d72:	f002 fc59 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003d7c:	f000 fdce 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003d80:	2302      	movs	r3, #2
 8003d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003d84:	2307      	movs	r3, #7
 8003d86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d88:	463b      	mov	r3, r7
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4836      	ldr	r0, [pc, #216]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003d8e:	f002 fc4b 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003d98:	f000 fdc0 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003da0:	2308      	movs	r3, #8
 8003da2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003da4:	463b      	mov	r3, r7
 8003da6:	4619      	mov	r1, r3
 8003da8:	482f      	ldr	r0, [pc, #188]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003daa:	f002 fc3d 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003db4:	f000 fdb2 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003db8:	2304      	movs	r3, #4
 8003dba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003dbc:	2309      	movs	r3, #9
 8003dbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc0:	463b      	mov	r3, r7
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	4828      	ldr	r0, [pc, #160]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003dc6:	f002 fc2f 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003dd0:	f000 fda4 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003dd8:	230a      	movs	r3, #10
 8003dda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003ddc:	463b      	mov	r3, r7
 8003dde:	4619      	mov	r1, r3
 8003de0:	4821      	ldr	r0, [pc, #132]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003de2:	f002 fc21 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003dec:	f000 fd96 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003df0:	2306      	movs	r3, #6
 8003df2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003df4:	230b      	movs	r3, #11
 8003df6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003df8:	463b      	mov	r3, r7
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	481a      	ldr	r0, [pc, #104]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003dfe:	f002 fc13 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003e08:	f000 fd88 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e0c:	2307      	movs	r3, #7
 8003e0e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8003e10:	230c      	movs	r3, #12
 8003e12:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e14:	463b      	mov	r3, r7
 8003e16:	4619      	mov	r1, r3
 8003e18:	4813      	ldr	r0, [pc, #76]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003e1a:	f002 fc05 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003e24:	f000 fd7a 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003e28:	2308      	movs	r3, #8
 8003e2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003e2c:	230d      	movs	r3, #13
 8003e2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e30:	463b      	mov	r3, r7
 8003e32:	4619      	mov	r1, r3
 8003e34:	480c      	ldr	r0, [pc, #48]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003e36:	f002 fbf7 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8003e40:	f000 fd6c 	bl	800491c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003e44:	2309      	movs	r3, #9
 8003e46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003e48:	230e      	movs	r3, #14
 8003e4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e4c:	463b      	mov	r3, r7
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4805      	ldr	r0, [pc, #20]	; (8003e68 <MX_ADC2_Init+0x204>)
 8003e52:	f002 fbe9 	bl	8006628 <HAL_ADC_ConfigChannel>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003e5c:	f000 fd5e 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}
 8003e68:	20021978 	.word	0x20021978
 8003e6c:	40012100 	.word	0x40012100
 8003e70:	0f000001 	.word	0x0f000001

08003e74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e7a:	4a13      	ldr	r2, [pc, #76]	; (8003ec8 <MX_I2C1_Init+0x54>)
 8003e7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e80:	4a12      	ldr	r2, [pc, #72]	; (8003ecc <MX_I2C1_Init+0x58>)
 8003e82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e84:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003e8a:	4b0e      	ldr	r3, [pc, #56]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e90:	4b0c      	ldr	r3, [pc, #48]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e98:	4b0a      	ldr	r3, [pc, #40]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003e9e:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ea4:	4b07      	ldr	r3, [pc, #28]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003eac:	2280      	movs	r2, #128	; 0x80
 8003eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003eb0:	4804      	ldr	r0, [pc, #16]	; (8003ec4 <MX_I2C1_Init+0x50>)
 8003eb2:	f003 fd0b 	bl	80078cc <HAL_I2C_Init>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ebc:	f000 fd2e 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ec0:	bf00      	nop
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200219c0 	.word	0x200219c0
 8003ec8:	40005400 	.word	0x40005400
 8003ecc:	000186a0 	.word	0x000186a0

08003ed0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ed6:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <MX_I2C2_Init+0x54>)
 8003ed8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003eda:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003edc:	4a12      	ldr	r2, [pc, #72]	; (8003f28 <MX_I2C2_Init+0x58>)
 8003ede:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003ee6:	4b0e      	ldr	r3, [pc, #56]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ef2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ef4:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f00:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003f02:	2200      	movs	r2, #0
 8003f04:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003f0c:	4804      	ldr	r0, [pc, #16]	; (8003f20 <MX_I2C2_Init+0x50>)
 8003f0e:	f003 fcdd 	bl	80078cc <HAL_I2C_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003f18:	f000 fd00 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003f1c:	bf00      	nop
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	20021a54 	.word	0x20021a54
 8003f24:	40005800 	.word	0x40005800
 8003f28:	000186a0 	.word	0x000186a0

08003f2c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f32:	4a0d      	ldr	r2, [pc, #52]	; (8003f68 <MX_SDIO_SD_Init+0x3c>)
 8003f34:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003f4e:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <MX_SDIO_SD_Init+0x38>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003f5a:	bf00      	nop
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	20021c54 	.word	0x20021c54
 8003f68:	40012c00 	.word	0x40012c00

08003f6c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003f70:	4b17      	ldr	r3, [pc, #92]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f72:	4a18      	ldr	r2, [pc, #96]	; (8003fd4 <MX_SPI2_Init+0x68>)
 8003f74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003f76:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003f7e:	4b14      	ldr	r3, [pc, #80]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f84:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f8a:	4b11      	ldr	r3, [pc, #68]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f90:	4b0f      	ldr	r3, [pc, #60]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f9c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003f9e:	4b0c      	ldr	r3, [pc, #48]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fa0:	2228      	movs	r2, #40	; 0x28
 8003fa2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fa4:	4b0a      	ldr	r3, [pc, #40]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003faa:	4b09      	ldr	r3, [pc, #36]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fb8:	220a      	movs	r2, #10
 8003fba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003fbc:	4804      	ldr	r0, [pc, #16]	; (8003fd0 <MX_SPI2_Init+0x64>)
 8003fbe:	f006 fdb7 	bl	800ab30 <HAL_SPI_Init>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003fc8:	f000 fca8 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003fcc:	bf00      	nop
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	200218a0 	.word	0x200218a0
 8003fd4:	40003800 	.word	0x40003800

08003fd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b09a      	sub	sp, #104	; 0x68
 8003fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003fde:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003fe2:	2224      	movs	r2, #36	; 0x24
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00e fdd6 	bl	8012b98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800400a:	463b      	mov	r3, r7
 800400c:	2220      	movs	r2, #32
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f00e fdc1 	bl	8012b98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004016:	4b42      	ldr	r3, [pc, #264]	; (8004120 <MX_TIM1_Init+0x148>)
 8004018:	4a42      	ldr	r2, [pc, #264]	; (8004124 <MX_TIM1_Init+0x14c>)
 800401a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800401c:	4b40      	ldr	r3, [pc, #256]	; (8004120 <MX_TIM1_Init+0x148>)
 800401e:	2200      	movs	r2, #0
 8004020:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004022:	4b3f      	ldr	r3, [pc, #252]	; (8004120 <MX_TIM1_Init+0x148>)
 8004024:	2200      	movs	r2, #0
 8004026:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <MX_TIM1_Init+0x148>)
 800402a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800402e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <MX_TIM1_Init+0x148>)
 8004032:	2200      	movs	r2, #0
 8004034:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004036:	4b3a      	ldr	r3, [pc, #232]	; (8004120 <MX_TIM1_Init+0x148>)
 8004038:	2200      	movs	r2, #0
 800403a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800403c:	4b38      	ldr	r3, [pc, #224]	; (8004120 <MX_TIM1_Init+0x148>)
 800403e:	2200      	movs	r2, #0
 8004040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004042:	4837      	ldr	r0, [pc, #220]	; (8004120 <MX_TIM1_Init+0x148>)
 8004044:	f007 fb17 	bl	800b676 <HAL_TIM_PWM_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800404e:	f000 fc65 	bl	800491c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8004052:	2303      	movs	r3, #3
 8004054:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004056:	2300      	movs	r3, #0
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800405a:	2301      	movs	r3, #1
 800405c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800405e:	2300      	movs	r3, #0
 8004060:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004066:	2300      	movs	r3, #0
 8004068:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800406a:	2301      	movs	r3, #1
 800406c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800406e:	2300      	movs	r3, #0
 8004070:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8004076:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800407a:	4619      	mov	r1, r3
 800407c:	4828      	ldr	r0, [pc, #160]	; (8004120 <MX_TIM1_Init+0x148>)
 800407e:	f007 fb63 	bl	800b748 <HAL_TIM_Encoder_Init>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8004088:	f000 fc48 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800408c:	2300      	movs	r3, #0
 800408e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004090:	2300      	movs	r3, #0
 8004092:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004094:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004098:	4619      	mov	r1, r3
 800409a:	4821      	ldr	r0, [pc, #132]	; (8004120 <MX_TIM1_Init+0x148>)
 800409c:	f008 f88a 	bl	800c1b4 <HAL_TIMEx_MasterConfigSynchronization>
 80040a0:	4603      	mov	r3, r0
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d001      	beq.n	80040aa <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 80040a6:	f000 fc39 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040aa:	2360      	movs	r3, #96	; 0x60
 80040ac:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040b2:	2300      	movs	r3, #0
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80040b6:	2300      	movs	r3, #0
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80040c2:	2300      	movs	r3, #0
 80040c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040c6:	f107 0320 	add.w	r3, r7, #32
 80040ca:	2208      	movs	r2, #8
 80040cc:	4619      	mov	r1, r3
 80040ce:	4814      	ldr	r0, [pc, #80]	; (8004120 <MX_TIM1_Init+0x148>)
 80040d0:	f007 fd0c 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80040da:	f000 fc1f 	bl	800491c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040fc:	463b      	mov	r3, r7
 80040fe:	4619      	mov	r1, r3
 8004100:	4807      	ldr	r0, [pc, #28]	; (8004120 <MX_TIM1_Init+0x148>)
 8004102:	f008 f8d3 	bl	800c2ac <HAL_TIMEx_ConfigBreakDeadTime>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800410c:	f000 fc06 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <MX_TIM1_Init+0x148>)
 8004112:	f001 f97f 	bl	8005414 <HAL_TIM_MspPostInit>

}
 8004116:	bf00      	nop
 8004118:	3768      	adds	r7, #104	; 0x68
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20021c14 	.word	0x20021c14
 8004124:	40010000 	.word	0x40010000

08004128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	; 0x28
 800412c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800412e:	f107 0320 	add.w	r3, r7, #32
 8004132:	2200      	movs	r2, #0
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004138:	1d3b      	adds	r3, r7, #4
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	605a      	str	r2, [r3, #4]
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	60da      	str	r2, [r3, #12]
 8004144:	611a      	str	r2, [r3, #16]
 8004146:	615a      	str	r2, [r3, #20]
 8004148:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800414a:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <MX_TIM3_Init+0xc0>)
 800414c:	4a27      	ldr	r2, [pc, #156]	; (80041ec <MX_TIM3_Init+0xc4>)
 800414e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004150:	4b25      	ldr	r3, [pc, #148]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004152:	2200      	movs	r2, #0
 8004154:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004156:	4b24      	ldr	r3, [pc, #144]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004158:	2200      	movs	r2, #0
 800415a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <MX_TIM3_Init+0xc0>)
 800415e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004162:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004164:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004166:	2200      	movs	r2, #0
 8004168:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800416a:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <MX_TIM3_Init+0xc0>)
 800416c:	2200      	movs	r2, #0
 800416e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004170:	481d      	ldr	r0, [pc, #116]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004172:	f007 fa80 	bl	800b676 <HAL_TIM_PWM_Init>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800417c:	f000 fbce 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004188:	f107 0320 	add.w	r3, r7, #32
 800418c:	4619      	mov	r1, r3
 800418e:	4816      	ldr	r0, [pc, #88]	; (80041e8 <MX_TIM3_Init+0xc0>)
 8004190:	f008 f810 	bl	800c1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800419a:	f000 fbbf 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800419e:	2360      	movs	r3, #96	; 0x60
 80041a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	2200      	movs	r2, #0
 80041b2:	4619      	mov	r1, r3
 80041b4:	480c      	ldr	r0, [pc, #48]	; (80041e8 <MX_TIM3_Init+0xc0>)
 80041b6:	f007 fc99 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80041c0:	f000 fbac 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041c4:	1d3b      	adds	r3, r7, #4
 80041c6:	2204      	movs	r2, #4
 80041c8:	4619      	mov	r1, r3
 80041ca:	4807      	ldr	r0, [pc, #28]	; (80041e8 <MX_TIM3_Init+0xc0>)
 80041cc:	f007 fc8e 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d001      	beq.n	80041da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80041d6:	f000 fba1 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80041da:	4803      	ldr	r0, [pc, #12]	; (80041e8 <MX_TIM3_Init+0xc0>)
 80041dc:	f001 f91a 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80041e0:	bf00      	nop
 80041e2:	3728      	adds	r7, #40	; 0x28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	20021aac 	.word	0x20021aac
 80041ec:	40000400 	.word	0x40000400

080041f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b08a      	sub	sp, #40	; 0x28
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041f6:	f107 0320 	add.w	r3, r7, #32
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]
 800420a:	60da      	str	r2, [r3, #12]
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	615a      	str	r2, [r3, #20]
 8004210:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004212:	4b27      	ldr	r3, [pc, #156]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004214:	4a27      	ldr	r2, [pc, #156]	; (80042b4 <MX_TIM4_Init+0xc4>)
 8004216:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800421a:	2200      	movs	r2, #0
 800421c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800421e:	4b24      	ldr	r3, [pc, #144]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004220:	2200      	movs	r2, #0
 8004222:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8004224:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004226:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800422a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800422c:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800422e:	2200      	movs	r2, #0
 8004230:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004232:	4b1f      	ldr	r3, [pc, #124]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004234:	2200      	movs	r2, #0
 8004236:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004238:	481d      	ldr	r0, [pc, #116]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800423a:	f007 fa1c 	bl	800b676 <HAL_TIM_PWM_Init>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004244:	f000 fb6a 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004248:	2300      	movs	r3, #0
 800424a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800424c:	2300      	movs	r3, #0
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004250:	f107 0320 	add.w	r3, r7, #32
 8004254:	4619      	mov	r1, r3
 8004256:	4816      	ldr	r0, [pc, #88]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004258:	f007 ffac 	bl	800c1b4 <HAL_TIMEx_MasterConfigSynchronization>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004262:	f000 fb5b 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004266:	2360      	movs	r3, #96	; 0x60
 8004268:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004272:	2300      	movs	r3, #0
 8004274:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	2208      	movs	r2, #8
 800427a:	4619      	mov	r1, r3
 800427c:	480c      	ldr	r0, [pc, #48]	; (80042b0 <MX_TIM4_Init+0xc0>)
 800427e:	f007 fc35 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8004288:	f000 fb48 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	220c      	movs	r2, #12
 8004290:	4619      	mov	r1, r3
 8004292:	4807      	ldr	r0, [pc, #28]	; (80042b0 <MX_TIM4_Init+0xc0>)
 8004294:	f007 fc2a 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800429e:	f000 fb3d 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80042a2:	4803      	ldr	r0, [pc, #12]	; (80042b0 <MX_TIM4_Init+0xc0>)
 80042a4:	f001 f8b6 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80042a8:	bf00      	nop
 80042aa:	3728      	adds	r7, #40	; 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20021938 	.word	0x20021938
 80042b4:	40000800 	.word	0x40000800

080042b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042be:	463b      	mov	r3, r7
 80042c0:	2200      	movs	r2, #0
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80042c6:	4b15      	ldr	r3, [pc, #84]	; (800431c <MX_TIM6_Init+0x64>)
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <MX_TIM6_Init+0x68>)
 80042ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80042cc:	4b13      	ldr	r3, [pc, #76]	; (800431c <MX_TIM6_Init+0x64>)
 80042ce:	2259      	movs	r2, #89	; 0x59
 80042d0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042d2:	4b12      	ldr	r3, [pc, #72]	; (800431c <MX_TIM6_Init+0x64>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80042d8:	4b10      	ldr	r3, [pc, #64]	; (800431c <MX_TIM6_Init+0x64>)
 80042da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <MX_TIM6_Init+0x64>)
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80042e6:	480d      	ldr	r0, [pc, #52]	; (800431c <MX_TIM6_Init+0x64>)
 80042e8:	f007 f976 	bl	800b5d8 <HAL_TIM_Base_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80042f2:	f000 fb13 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80042fe:	463b      	mov	r3, r7
 8004300:	4619      	mov	r1, r3
 8004302:	4806      	ldr	r0, [pc, #24]	; (800431c <MX_TIM6_Init+0x64>)
 8004304:	f007 ff56 	bl	800c1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800430e:	f000 fb05 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20021bd4 	.word	0x20021bd4
 8004320:	40001000 	.word	0x40001000

08004324 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800432a:	463b      	mov	r3, r7
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <MX_TIM7_Init+0x60>)
 8004334:	4a14      	ldr	r2, [pc, #80]	; (8004388 <MX_TIM7_Init+0x64>)
 8004336:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <MX_TIM7_Init+0x60>)
 800433a:	22b3      	movs	r2, #179	; 0xb3
 800433c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800433e:	4b11      	ldr	r3, [pc, #68]	; (8004384 <MX_TIM7_Init+0x60>)
 8004340:	2200      	movs	r2, #0
 8004342:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <MX_TIM7_Init+0x60>)
 8004346:	2231      	movs	r2, #49	; 0x31
 8004348:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800434a:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <MX_TIM7_Init+0x60>)
 800434c:	2280      	movs	r2, #128	; 0x80
 800434e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004350:	480c      	ldr	r0, [pc, #48]	; (8004384 <MX_TIM7_Init+0x60>)
 8004352:	f007 f941 	bl	800b5d8 <HAL_TIM_Base_Init>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 800435c:	f000 fade 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004360:	2300      	movs	r3, #0
 8004362:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004364:	2300      	movs	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004368:	463b      	mov	r3, r7
 800436a:	4619      	mov	r1, r3
 800436c:	4805      	ldr	r0, [pc, #20]	; (8004384 <MX_TIM7_Init+0x60>)
 800436e:	f007 ff21 	bl	800c1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8004378:	f000 fad0 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800437c:	bf00      	nop
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20021d78 	.word	0x20021d78
 8004388:	40001400 	.word	0x40001400

0800438c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004392:	f107 030c 	add.w	r3, r7, #12
 8004396:	2224      	movs	r2, #36	; 0x24
 8004398:	2100      	movs	r1, #0
 800439a:	4618      	mov	r0, r3
 800439c:	f00e fbfc 	bl	8012b98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043a0:	1d3b      	adds	r3, r7, #4
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
 80043a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80043a8:	4b22      	ldr	r3, [pc, #136]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043aa:	4a23      	ldr	r2, [pc, #140]	; (8004438 <MX_TIM8_Init+0xac>)
 80043ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80043ae:	4b21      	ldr	r3, [pc, #132]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043b4:	4b1f      	ldr	r3, [pc, #124]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043b6:	2210      	movs	r2, #16
 80043b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80043ba:	4b1e      	ldr	r3, [pc, #120]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043c2:	4b1c      	ldr	r3, [pc, #112]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ce:	4b19      	ldr	r3, [pc, #100]	; (8004434 <MX_TIM8_Init+0xa8>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80043d4:	2303      	movs	r3, #3
 80043d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80043d8:	2300      	movs	r3, #0
 80043da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80043dc:	2301      	movs	r3, #1
 80043de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80043e0:	2300      	movs	r3, #0
 80043e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80043e4:	2300      	movs	r3, #0
 80043e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80043e8:	2300      	movs	r3, #0
 80043ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80043ec:	2301      	movs	r3, #1
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80043f8:	f107 030c 	add.w	r3, r7, #12
 80043fc:	4619      	mov	r1, r3
 80043fe:	480d      	ldr	r0, [pc, #52]	; (8004434 <MX_TIM8_Init+0xa8>)
 8004400:	f007 f9a2 	bl	800b748 <HAL_TIM_Encoder_Init>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800440a:	f000 fa87 	bl	800491c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004412:	2300      	movs	r3, #0
 8004414:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004416:	1d3b      	adds	r3, r7, #4
 8004418:	4619      	mov	r1, r3
 800441a:	4806      	ldr	r0, [pc, #24]	; (8004434 <MX_TIM8_Init+0xa8>)
 800441c:	f007 feca 	bl	800c1b4 <HAL_TIMEx_MasterConfigSynchronization>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8004426:	f000 fa79 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800442a:	bf00      	nop
 800442c:	3730      	adds	r7, #48	; 0x30
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200218f8 	.word	0x200218f8
 8004438:	40010400 	.word	0x40010400

0800443c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004442:	1d3b      	adds	r3, r7, #4
 8004444:	2200      	movs	r2, #0
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	605a      	str	r2, [r3, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	60da      	str	r2, [r3, #12]
 800444e:	611a      	str	r2, [r3, #16]
 8004450:	615a      	str	r2, [r3, #20]
 8004452:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004456:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <MX_TIM10_Init+0x98>)
 8004458:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800445a:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <MX_TIM10_Init+0x94>)
 800445c:	2200      	movs	r2, #0
 800445e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004462:	2200      	movs	r2, #0
 8004464:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800446c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004470:	2200      	movs	r2, #0
 8004472:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <MX_TIM10_Init+0x94>)
 8004476:	2200      	movs	r2, #0
 8004478:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800447a:	4815      	ldr	r0, [pc, #84]	; (80044d0 <MX_TIM10_Init+0x94>)
 800447c:	f007 f8ac 	bl	800b5d8 <HAL_TIM_Base_Init>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8004486:	f000 fa49 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800448a:	4811      	ldr	r0, [pc, #68]	; (80044d0 <MX_TIM10_Init+0x94>)
 800448c:	f007 f8f3 	bl	800b676 <HAL_TIM_PWM_Init>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8004496:	f000 fa41 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800449a:	2360      	movs	r3, #96	; 0x60
 800449c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80044a6:	2300      	movs	r3, #0
 80044a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044aa:	1d3b      	adds	r3, r7, #4
 80044ac:	2200      	movs	r2, #0
 80044ae:	4619      	mov	r1, r3
 80044b0:	4807      	ldr	r0, [pc, #28]	; (80044d0 <MX_TIM10_Init+0x94>)
 80044b2:	f007 fb1b 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80044bc:	f000 fa2e 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80044c0:	4803      	ldr	r0, [pc, #12]	; (80044d0 <MX_TIM10_Init+0x94>)
 80044c2:	f000 ffa7 	bl	8005414 <HAL_TIM_MspPostInit>

}
 80044c6:	bf00      	nop
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20021a14 	.word	0x20021a14
 80044d4:	40014400 	.word	0x40014400

080044d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	2200      	movs	r2, #0
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	605a      	str	r2, [r3, #4]
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	60da      	str	r2, [r3, #12]
 80044ea:	611a      	str	r2, [r3, #16]
 80044ec:	615a      	str	r2, [r3, #20]
 80044ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80044f0:	4b1e      	ldr	r3, [pc, #120]	; (800456c <MX_TIM11_Init+0x94>)
 80044f2:	4a1f      	ldr	r2, [pc, #124]	; (8004570 <MX_TIM11_Init+0x98>)
 80044f4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80044f6:	4b1d      	ldr	r3, [pc, #116]	; (800456c <MX_TIM11_Init+0x94>)
 80044f8:	2200      	movs	r2, #0
 80044fa:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <MX_TIM11_Init+0x94>)
 80044fe:	2200      	movs	r2, #0
 8004500:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <MX_TIM11_Init+0x94>)
 8004504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004508:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450a:	4b18      	ldr	r3, [pc, #96]	; (800456c <MX_TIM11_Init+0x94>)
 800450c:	2200      	movs	r2, #0
 800450e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004510:	4b16      	ldr	r3, [pc, #88]	; (800456c <MX_TIM11_Init+0x94>)
 8004512:	2200      	movs	r2, #0
 8004514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004516:	4815      	ldr	r0, [pc, #84]	; (800456c <MX_TIM11_Init+0x94>)
 8004518:	f007 f85e 	bl	800b5d8 <HAL_TIM_Base_Init>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8004522:	f000 f9fb 	bl	800491c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004526:	4811      	ldr	r0, [pc, #68]	; (800456c <MX_TIM11_Init+0x94>)
 8004528:	f007 f8a5 	bl	800b676 <HAL_TIM_PWM_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8004532:	f000 f9f3 	bl	800491c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004536:	2360      	movs	r3, #96	; 0x60
 8004538:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004546:	1d3b      	adds	r3, r7, #4
 8004548:	2200      	movs	r2, #0
 800454a:	4619      	mov	r1, r3
 800454c:	4807      	ldr	r0, [pc, #28]	; (800456c <MX_TIM11_Init+0x94>)
 800454e:	f007 facd 	bl	800baec <HAL_TIM_PWM_ConfigChannel>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004558:	f000 f9e0 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800455c:	4803      	ldr	r0, [pc, #12]	; (800456c <MX_TIM11_Init+0x94>)
 800455e:	f000 ff59 	bl	8005414 <HAL_TIM_MspPostInit>

}
 8004562:	bf00      	nop
 8004564:	3720      	adds	r7, #32
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20021b34 	.word	0x20021b34
 8004570:	40014800 	.word	0x40014800

08004574 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004578:	4b0e      	ldr	r3, [pc, #56]	; (80045b4 <MX_TIM13_Init+0x40>)
 800457a:	4a0f      	ldr	r2, [pc, #60]	; (80045b8 <MX_TIM13_Init+0x44>)
 800457c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <MX_TIM13_Init+0x40>)
 8004580:	2259      	movs	r2, #89	; 0x59
 8004582:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <MX_TIM13_Init+0x40>)
 8004586:	2200      	movs	r2, #0
 8004588:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <MX_TIM13_Init+0x40>)
 800458c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004590:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <MX_TIM13_Init+0x40>)
 8004594:	2200      	movs	r2, #0
 8004596:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004598:	4b06      	ldr	r3, [pc, #24]	; (80045b4 <MX_TIM13_Init+0x40>)
 800459a:	2280      	movs	r2, #128	; 0x80
 800459c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800459e:	4805      	ldr	r0, [pc, #20]	; (80045b4 <MX_TIM13_Init+0x40>)
 80045a0:	f007 f81a 	bl	800b5d8 <HAL_TIM_Base_Init>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80045aa:	f000 f9b7 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20021af4 	.word	0x20021af4
 80045b8:	40001c00 	.word	0x40001c00

080045bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <MX_USART2_UART_Init+0x50>)
 80045c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80045c6:	4b10      	ldr	r3, [pc, #64]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80045d4:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80045da:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80045e0:	4b09      	ldr	r3, [pc, #36]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045e2:	220c      	movs	r2, #12
 80045e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80045ec:	4b06      	ldr	r3, [pc, #24]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80045f2:	4805      	ldr	r0, [pc, #20]	; (8004608 <MX_USART2_UART_Init+0x4c>)
 80045f4:	f007 fec0 	bl	800c378 <HAL_UART_Init>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80045fe:	f000 f98d 	bl	800491c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004602:	bf00      	nop
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	20021cd8 	.word	0x20021cd8
 800460c:	40004400 	.word	0x40004400

08004610 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	4b14      	ldr	r3, [pc, #80]	; (800466c <MX_DMA_Init+0x5c>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	4a13      	ldr	r2, [pc, #76]	; (800466c <MX_DMA_Init+0x5c>)
 8004620:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004624:	6313      	str	r3, [r2, #48]	; 0x30
 8004626:	4b11      	ldr	r3, [pc, #68]	; (800466c <MX_DMA_Init+0x5c>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8004632:	2200      	movs	r2, #0
 8004634:	2100      	movs	r1, #0
 8004636:	203a      	movs	r0, #58	; 0x3a
 8004638:	f002 fb81 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800463c:	203a      	movs	r0, #58	; 0x3a
 800463e:	f002 fb9a 	bl	8006d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8004642:	2200      	movs	r2, #0
 8004644:	2100      	movs	r1, #0
 8004646:	203b      	movs	r0, #59	; 0x3b
 8004648:	f002 fb79 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800464c:	203b      	movs	r0, #59	; 0x3b
 800464e:	f002 fb92 	bl	8006d76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8004652:	2200      	movs	r2, #0
 8004654:	2100      	movs	r1, #0
 8004656:	2045      	movs	r0, #69	; 0x45
 8004658:	f002 fb71 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800465c:	2045      	movs	r0, #69	; 0x45
 800465e:	f002 fb8a 	bl	8006d76 <HAL_NVIC_EnableIRQ>

}
 8004662:	bf00      	nop
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	40023800 	.word	0x40023800

08004670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08c      	sub	sp, #48	; 0x30
 8004674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004676:	f107 031c 	add.w	r3, r7, #28
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
 800467e:	605a      	str	r2, [r3, #4]
 8004680:	609a      	str	r2, [r3, #8]
 8004682:	60da      	str	r2, [r3, #12]
 8004684:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	4b9c      	ldr	r3, [pc, #624]	; (80048fc <MX_GPIO_Init+0x28c>)
 800468c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468e:	4a9b      	ldr	r2, [pc, #620]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004690:	f043 0310 	orr.w	r3, r3, #16
 8004694:	6313      	str	r3, [r2, #48]	; 0x30
 8004696:	4b99      	ldr	r3, [pc, #612]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	4b95      	ldr	r3, [pc, #596]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046aa:	4a94      	ldr	r2, [pc, #592]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b0:	6313      	str	r3, [r2, #48]	; 0x30
 80046b2:	4b92      	ldr	r3, [pc, #584]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80046be:	2300      	movs	r3, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	4b8e      	ldr	r3, [pc, #568]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	4a8d      	ldr	r2, [pc, #564]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046c8:	f043 0304 	orr.w	r3, r3, #4
 80046cc:	6313      	str	r3, [r2, #48]	; 0x30
 80046ce:	4b8b      	ldr	r3, [pc, #556]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	4b87      	ldr	r3, [pc, #540]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	4a86      	ldr	r2, [pc, #536]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6313      	str	r3, [r2, #48]	; 0x30
 80046ea:	4b84      	ldr	r3, [pc, #528]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	4b80      	ldr	r3, [pc, #512]	; (80048fc <MX_GPIO_Init+0x28c>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	4a7f      	ldr	r2, [pc, #508]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004700:	f043 0302 	orr.w	r3, r3, #2
 8004704:	6313      	str	r3, [r2, #48]	; 0x30
 8004706:	4b7d      	ldr	r3, [pc, #500]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	4b79      	ldr	r3, [pc, #484]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800471a:	4a78      	ldr	r2, [pc, #480]	; (80048fc <MX_GPIO_Init+0x28c>)
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	6313      	str	r3, [r2, #48]	; 0x30
 8004722:	4b76      	ldr	r3, [pc, #472]	; (80048fc <MX_GPIO_Init+0x28c>)
 8004724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800472e:	2200      	movs	r2, #0
 8004730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004734:	4872      	ldr	r0, [pc, #456]	; (8004900 <MX_GPIO_Init+0x290>)
 8004736:	f003 f897 	bl	8007868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800473a:	2200      	movs	r2, #0
 800473c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004740:	4870      	ldr	r0, [pc, #448]	; (8004904 <MX_GPIO_Init+0x294>)
 8004742:	f003 f891 	bl	8007868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004746:	2200      	movs	r2, #0
 8004748:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800474c:	486e      	ldr	r0, [pc, #440]	; (8004908 <MX_GPIO_Init+0x298>)
 800474e:	f003 f88b 	bl	8007868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004752:	2200      	movs	r2, #0
 8004754:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004758:	486c      	ldr	r0, [pc, #432]	; (800490c <MX_GPIO_Init+0x29c>)
 800475a:	f003 f885 	bl	8007868 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800475e:	2304      	movs	r3, #4
 8004760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004762:	4b6b      	ldr	r3, [pc, #428]	; (8004910 <MX_GPIO_Init+0x2a0>)
 8004764:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800476a:	f107 031c 	add.w	r3, r7, #28
 800476e:	4619      	mov	r1, r3
 8004770:	4863      	ldr	r0, [pc, #396]	; (8004900 <MX_GPIO_Init+0x290>)
 8004772:	f002 feb7 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004776:	230f      	movs	r3, #15
 8004778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800477a:	2303      	movs	r3, #3
 800477c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004782:	f107 031c 	add.w	r3, r7, #28
 8004786:	4619      	mov	r1, r3
 8004788:	4862      	ldr	r0, [pc, #392]	; (8004914 <MX_GPIO_Init+0x2a4>)
 800478a:	f002 feab 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800478e:	23e1      	movs	r3, #225	; 0xe1
 8004790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004792:	2303      	movs	r3, #3
 8004794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004796:	2300      	movs	r3, #0
 8004798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800479a:	f107 031c 	add.w	r3, r7, #28
 800479e:	4619      	mov	r1, r3
 80047a0:	485a      	ldr	r0, [pc, #360]	; (800490c <MX_GPIO_Init+0x29c>)
 80047a2:	f002 fe9f 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047a6:	2303      	movs	r3, #3
 80047a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047aa:	2303      	movs	r3, #3
 80047ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ae:	2300      	movs	r3, #0
 80047b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b2:	f107 031c 	add.w	r3, r7, #28
 80047b6:	4619      	mov	r1, r3
 80047b8:	4852      	ldr	r0, [pc, #328]	; (8004904 <MX_GPIO_Init+0x294>)
 80047ba:	f002 fe93 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047be:	2304      	movs	r3, #4
 80047c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047c2:	2300      	movs	r3, #0
 80047c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047c6:	2301      	movs	r3, #1
 80047c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047ca:	f107 031c 	add.w	r3, r7, #28
 80047ce:	4619      	mov	r1, r3
 80047d0:	484c      	ldr	r0, [pc, #304]	; (8004904 <MX_GPIO_Init+0x294>)
 80047d2:	f002 fe87 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80047d6:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80047da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047dc:	2300      	movs	r3, #0
 80047de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047e0:	2301      	movs	r3, #1
 80047e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047e4:	f107 031c 	add.w	r3, r7, #28
 80047e8:	4619      	mov	r1, r3
 80047ea:	4845      	ldr	r0, [pc, #276]	; (8004900 <MX_GPIO_Init+0x290>)
 80047ec:	f002 fe7a 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80047f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f6:	2301      	movs	r3, #1
 80047f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fe:	2300      	movs	r3, #0
 8004800:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004802:	f107 031c 	add.w	r3, r7, #28
 8004806:	4619      	mov	r1, r3
 8004808:	483d      	ldr	r0, [pc, #244]	; (8004900 <MX_GPIO_Init+0x290>)
 800480a:	f002 fe6b 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800480e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004814:	2301      	movs	r3, #1
 8004816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004818:	2300      	movs	r3, #0
 800481a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800481c:	2300      	movs	r3, #0
 800481e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004820:	f107 031c 	add.w	r3, r7, #28
 8004824:	4619      	mov	r1, r3
 8004826:	4837      	ldr	r0, [pc, #220]	; (8004904 <MX_GPIO_Init+0x294>)
 8004828:	f002 fe5c 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800482c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004832:	4b39      	ldr	r3, [pc, #228]	; (8004918 <MX_GPIO_Init+0x2a8>)
 8004834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800483a:	f107 031c 	add.w	r3, r7, #28
 800483e:	4619      	mov	r1, r3
 8004840:	4831      	ldr	r0, [pc, #196]	; (8004908 <MX_GPIO_Init+0x298>)
 8004842:	f002 fe4f 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004846:	f44f 7300 	mov.w	r3, #512	; 0x200
 800484a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800484c:	2301      	movs	r3, #1
 800484e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004850:	2300      	movs	r3, #0
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004854:	2300      	movs	r3, #0
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004858:	f107 031c 	add.w	r3, r7, #28
 800485c:	4619      	mov	r1, r3
 800485e:	482a      	ldr	r0, [pc, #168]	; (8004908 <MX_GPIO_Init+0x298>)
 8004860:	f002 fe40 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004864:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800486a:	2301      	movs	r3, #1
 800486c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800486e:	2301      	movs	r3, #1
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004872:	2300      	movs	r3, #0
 8004874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004876:	f107 031c 	add.w	r3, r7, #28
 800487a:	4619      	mov	r1, r3
 800487c:	4822      	ldr	r0, [pc, #136]	; (8004908 <MX_GPIO_Init+0x298>)
 800487e:	f002 fe31 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004882:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004886:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004888:	2301      	movs	r3, #1
 800488a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800488c:	2300      	movs	r3, #0
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004890:	2300      	movs	r3, #0
 8004892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004894:	f107 031c 	add.w	r3, r7, #28
 8004898:	4619      	mov	r1, r3
 800489a:	481c      	ldr	r0, [pc, #112]	; (800490c <MX_GPIO_Init+0x29c>)
 800489c:	f002 fe22 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80048a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048a6:	2300      	movs	r3, #0
 80048a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048aa:	2300      	movs	r3, #0
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048ae:	f107 031c 	add.w	r3, r7, #28
 80048b2:	4619      	mov	r1, r3
 80048b4:	4815      	ldr	r0, [pc, #84]	; (800490c <MX_GPIO_Init+0x29c>)
 80048b6:	f002 fe15 	bl	80074e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80048ba:	239b      	movs	r3, #155	; 0x9b
 80048bc:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048be:	2300      	movs	r3, #0
 80048c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048c2:	2301      	movs	r3, #1
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048c6:	f107 031c 	add.w	r3, r7, #28
 80048ca:	4619      	mov	r1, r3
 80048cc:	480e      	ldr	r0, [pc, #56]	; (8004908 <MX_GPIO_Init+0x298>)
 80048ce:	f002 fe09 	bl	80074e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80048d2:	2200      	movs	r2, #0
 80048d4:	2100      	movs	r1, #0
 80048d6:	2008      	movs	r0, #8
 80048d8:	f002 fa31 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80048dc:	2008      	movs	r0, #8
 80048de:	f002 fa4a 	bl	8006d76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	2017      	movs	r0, #23
 80048e8:	f002 fa29 	bl	8006d3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80048ec:	2017      	movs	r0, #23
 80048ee:	f002 fa42 	bl	8006d76 <HAL_NVIC_EnableIRQ>

}
 80048f2:	bf00      	nop
 80048f4:	3730      	adds	r7, #48	; 0x30
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	40023800 	.word	0x40023800
 8004900:	40021000 	.word	0x40021000
 8004904:	40020400 	.word	0x40020400
 8004908:	40020c00 	.word	0x40020c00
 800490c:	40020000 	.word	0x40020000
 8004910:	10310000 	.word	0x10310000
 8004914:	40020800 	.word	0x40020800
 8004918:	10110000 	.word	0x10110000

0800491c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004920:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004922:	e7fe      	b.n	8004922 <Error_Handler+0x6>

08004924 <CalcError1>:
RT_MODEL *const rtM = &rtM_;
static void CalcError1(void);

/* Output and update for atomic system: '<S1>/CalcError1' */
static void CalcError1(void)
{
 8004924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004928:	b088      	sub	sp, #32
 800492a:	af00      	add	r7, sp, #0

  /* Sum: '<S2>/Add1' incorporates:
   *  Inport: '<Root>/Py'
   *  Inport: '<Root>/y_cur'
   */
  rtb_Add1 = rtU.target_y - rtU.y;
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <CalcError1+0x100>)
 800492e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004932:	4b3c      	ldr	r3, [pc, #240]	; (8004a24 <CalcError1+0x100>)
 8004934:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004938:	f7fb fcbe 	bl	80002b8 <__aeabi_dsub>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	e9c7 2306 	strd	r2, r3, [r7, #24]

  /* Sum: '<S2>/Add2' incorporates:
   *  Inport: '<Root>/Px'
   *  Inport: '<Root>/x_cur'
   */
  rtb_Add2 = rtU.target_x - rtU.x;
 8004944:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <CalcError1+0x100>)
 8004946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800494a:	4b36      	ldr	r3, [pc, #216]	; (8004a24 <CalcError1+0x100>)
 800494c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8004950:	f7fb fcb2 	bl	80002b8 <__aeabi_dsub>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	e9c7 2304 	strd	r2, r3, [r7, #16]

  /* Trigonometry: '<S2>/Trigonometric Function1' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function2'
   */
  Add4_tmp = sin(rtU.th_cur);
 800495c:	4b31      	ldr	r3, [pc, #196]	; (8004a24 <CalcError1+0x100>)
 800495e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004962:	eeb0 0a47 	vmov.f32	s0, s14
 8004966:	eef0 0a67 	vmov.f32	s1, s15
 800496a:	f00c ffc9 	bl	8011900 <sin>
 800496e:	ed87 0b02 	vstr	d0, [r7, #8]

  /* Trigonometry: '<S2>/Trigonometric Function4' incorporates:
   *  Inport: '<Root>/th_cur'
   *  Trigonometry: '<S2>/Trigonometric Function3'
   */
  Add4_tmp_0 = cos(rtU.th_cur);
 8004972:	4b2c      	ldr	r3, [pc, #176]	; (8004a24 <CalcError1+0x100>)
 8004974:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 8004978:	eeb0 0a47 	vmov.f32	s0, s14
 800497c:	eef0 0a67 	vmov.f32	s1, s15
 8004980:	f00c ff7a 	bl	8011878 <cos>
 8004984:	ed87 0b00 	vstr	d0, [r7]
   *  Product: '<S2>/Product'
   *  Product: '<S2>/Product1'
   *  Trigonometry: '<S2>/Trigonometric Function1'
   *  Trigonometry: '<S2>/Trigonometric Function4'
   */
  rtDW.Add4 = rtb_Add2 * Add4_tmp_0 + rtb_Add1 * Add4_tmp;
 8004988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004990:	f7fb fe4a 	bl	8000628 <__aeabi_dmul>
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	4690      	mov	r8, r2
 800499a:	4699      	mov	r9, r3
 800499c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80049a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049a4:	f7fb fe40 	bl	8000628 <__aeabi_dmul>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4640      	mov	r0, r8
 80049ae:	4649      	mov	r1, r9
 80049b0:	f7fb fc84 	bl	80002bc <__adddf3>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	491b      	ldr	r1, [pc, #108]	; (8004a28 <CalcError1+0x104>)
 80049ba:	e9c1 2300 	strd	r2, r3, [r1]
  /* Sum: '<S2>/Add5' incorporates:
   *  Gain: '<S2>/Gain4'
   *  Product: '<S2>/Product2'
   *  Product: '<S2>/Product3'
   */
  rtDW.Add5 = rtb_Add2 * -Add4_tmp + rtb_Add1 * Add4_tmp_0;
 80049be:	68bc      	ldr	r4, [r7, #8]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80049c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049ca:	4620      	mov	r0, r4
 80049cc:	4629      	mov	r1, r5
 80049ce:	f7fb fe2b 	bl	8000628 <__aeabi_dmul>
 80049d2:	4603      	mov	r3, r0
 80049d4:	460c      	mov	r4, r1
 80049d6:	4625      	mov	r5, r4
 80049d8:	461c      	mov	r4, r3
 80049da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049e2:	f7fb fe21 	bl	8000628 <__aeabi_dmul>
 80049e6:	4602      	mov	r2, r0
 80049e8:	460b      	mov	r3, r1
 80049ea:	4620      	mov	r0, r4
 80049ec:	4629      	mov	r1, r5
 80049ee:	f7fb fc65 	bl	80002bc <__adddf3>
 80049f2:	4603      	mov	r3, r0
 80049f4:	460c      	mov	r4, r1
 80049f6:	4a0c      	ldr	r2, [pc, #48]	; (8004a28 <CalcError1+0x104>)
 80049f8:	e9c2 3402 	strd	r3, r4, [r2, #8]

  /* Sum: '<S2>/Add3' incorporates:
   *  Inport: '<Root>/Pth'
   *  Inport: '<Root>/th_cur'
   */
  rtDW.Add3 = rtU.th - rtU.th_cur;
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <CalcError1+0x100>)
 80049fe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <CalcError1+0x100>)
 8004a04:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fb fc54 	bl	80002b8 <__aeabi_dsub>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4a04      	ldr	r2, [pc, #16]	; (8004a28 <CalcError1+0x104>)
 8004a16:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004a1a:	bf00      	nop
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a24:	20021dc8 	.word	0x20021dc8
 8004a28:	20021df8 	.word	0x20021df8

08004a2c <path_following_step>:

/* Model step function */
void path_following_step(void)
{
 8004a2c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a30:	b08a      	sub	sp, #40	; 0x28
 8004a32:	af00      	add	r7, sp, #0
   *  Inport: '<Root>/Px'
   *
   * About '<S5>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtU.target_x * 1000.0;
 8004a34:	4b7a      	ldr	r3, [pc, #488]	; (8004c20 <path_following_step+0x1f4>)
 8004a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a3a:	f04f 0200 	mov.w	r2, #0
 8004a3e:	4b79      	ldr	r3, [pc, #484]	; (8004c24 <path_following_step+0x1f8>)
 8004a40:	f7fb fdf2 	bl	8000628 <__aeabi_dmul>
 8004a44:	4603      	mov	r3, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	e9c7 3408 	strd	r3, r4, [r7, #32]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp - rtDW.UD_DSTATE;
 8004a4c:	4b76      	ldr	r3, [pc, #472]	; (8004c28 <path_following_step+0x1fc>)
 8004a4e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004a52:	461a      	mov	r2, r3
 8004a54:	4623      	mov	r3, r4
 8004a56:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004a5a:	f7fb fc2d 	bl	80002b8 <__aeabi_dsub>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	e9c7 3406 	strd	r3, r4, [r7, #24]
  mon1 = rtb_TSamp;
 8004a66:	4a71      	ldr	r2, [pc, #452]	; (8004c2c <path_following_step+0x200>)
 8004a68:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004a6c:	e9c2 3400 	strd	r3, r4, [r2]
  mon2 = rtDW.UD_DSTATE;
 8004a70:	4b6d      	ldr	r3, [pc, #436]	; (8004c28 <path_following_step+0x1fc>)
 8004a72:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8004a76:	4a6e      	ldr	r2, [pc, #440]	; (8004c30 <path_following_step+0x204>)
 8004a78:	e9c2 3400 	strd	r3, r4, [r2]

  /* Math: '<S1>/Square' */
  rtb_Square = rtb_Uk1 * rtb_Uk1;
 8004a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a80:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a84:	f7fb fdd0 	bl	8000628 <__aeabi_dmul>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *  Inport: '<Root>/Py'
   *
   * About '<S6>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp_gl = rtU.target_y * 1000.0;
 8004a90:	4b63      	ldr	r3, [pc, #396]	; (8004c20 <path_following_step+0x1f4>)
 8004a92:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	4b62      	ldr	r3, [pc, #392]	; (8004c24 <path_following_step+0x1f8>)
 8004a9c:	f7fb fdc4 	bl	8000628 <__aeabi_dmul>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	e9c7 3402 	strd	r3, r4, [r7, #8]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Uk1 = rtb_TSamp_gl - rtDW.UD_DSTATE_o;
 8004aa8:	4b5f      	ldr	r3, [pc, #380]	; (8004c28 <path_following_step+0x1fc>)
 8004aaa:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ab6:	f7fb fbff 	bl	80002b8 <__aeabi_dsub>
 8004aba:	4603      	mov	r3, r0
 8004abc:	460c      	mov	r4, r1
 8004abe:	e9c7 3406 	strd	r3, r4, [r7, #24]

  /* Sqrt: '<S1>/Sqrt' incorporates:
   *  Math: '<S1>/Square1'
   *  Sum: '<S1>/Add5'
   */
  rtb_Uk1 = sqrt(rtb_Uk1 * rtb_Uk1 + rtb_Square);
 8004ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004aca:	f7fb fdad 	bl	8000628 <__aeabi_dmul>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	460c      	mov	r4, r1
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ada:	f7fb fbef 	bl	80002bc <__adddf3>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	ec44 3b17 	vmov	d7, r3, r4
 8004ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8004aea:	eef0 0a67 	vmov.f32	s1, s15
 8004aee:	f00c ff4f 	bl	8011990 <sqrt>
 8004af2:	ed87 0b06 	vstr	d0, [r7, #24]

  /* Outputs for Atomic SubSystem: '<S1>/CalcError1' */
  CalcError1();
 8004af6:	f7ff ff15 	bl	8004924 <CalcError1>
   *  Inport: '<Root>/Pth'
   *
   * About '<S4>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_Square = rtU.th * 1000.0;
 8004afa:	4b49      	ldr	r3, [pc, #292]	; (8004c20 <path_following_step+0x1f4>)
 8004afc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8004b00:	f04f 0200 	mov.w	r2, #0
 8004b04:	4b47      	ldr	r3, [pc, #284]	; (8004c24 <path_following_step+0x1f8>)
 8004b06:	f7fb fd8f 	bl	8000628 <__aeabi_dmul>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	460c      	mov	r4, r1
 8004b0e:	e9c7 3404 	strd	r3, r4, [r7, #16]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtb_Diff = rtb_Square - rtDW.UD_DSTATE_d;
 8004b12:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <path_following_step+0x1fc>)
 8004b14:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004b20:	f7fb fbca 	bl	80002b8 <__aeabi_dsub>
 8004b24:	4603      	mov	r3, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	e9c7 3400 	strd	r3, r4, [r7]
   *
   * Block description for '<S5>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8004b2c:	4a3e      	ldr	r2, [pc, #248]	; (8004c28 <path_following_step+0x1fc>)
 8004b2e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004b32:	e9c2 3406 	strd	r3, r4, [r2, #24]
   *
   * Block description for '<S6>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_o = rtb_TSamp_gl;
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <path_following_step+0x1fc>)
 8004b38:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004b3c:	e9c2 3408 	strd	r3, r4, [r2, #32]
   *
   * Block description for '<S4>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE_d = rtb_Square;
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <path_following_step+0x1fc>)
 8004b42:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004b46:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
   *  Gain: '<S3>/Gain'
   *  Product: '<S3>/Product1'
   *  Sum: '<S3>/Add5'
   *  Trigonometry: '<S3>/Trigonometric Function2'
   */
  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	; (8004c34 <path_following_step+0x208>)
 8004b4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004b50:	4b35      	ldr	r3, [pc, #212]	; (8004c28 <path_following_step+0x1fc>)
 8004b52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b56:	461a      	mov	r2, r3
 8004b58:	4623      	mov	r3, r4
 8004b5a:	f7fb fd65 	bl	8000628 <__aeabi_dmul>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	460c      	mov	r4, r1
 8004b62:	4625      	mov	r5, r4
 8004b64:	461c      	mov	r4, r3
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <path_following_step+0x1fc>)
 8004b68:	ed93 7b04 	vldr	d7, [r3, #16]
 8004b6c:	eeb0 0a47 	vmov.f32	s0, s14
 8004b70:	eef0 0a67 	vmov.f32	s1, s15
 8004b74:	f00c fe80 	bl	8011878 <cos>
 8004b78:	ec51 0b10 	vmov	r0, r1, d0
 8004b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b80:	f7fb fd52 	bl	8000628 <__aeabi_dmul>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4620      	mov	r0, r4
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7fb fb96 	bl	80002bc <__adddf3>
 8004b90:	4603      	mov	r3, r0
 8004b92:	460c      	mov	r4, r1
 8004b94:	4a28      	ldr	r2, [pc, #160]	; (8004c38 <path_following_step+0x20c>)
 8004b96:	e9c2 3400 	strd	r3, r4, [r2]
   *  Product: '<S3>/Product2'
   *  Sum: '<S3>/Add1'
   *  Sum: '<S3>/Add2'
   *  Trigonometry: '<S3>/Trigonometric Function1'
   */
  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <path_following_step+0x208>)
 8004b9c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <path_following_step+0x1fc>)
 8004ba2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	4623      	mov	r3, r4
 8004baa:	f7fb fd3d 	bl	8000628 <__aeabi_dmul>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	460c      	mov	r4, r1
 8004bb2:	4698      	mov	r8, r3
 8004bb4:	46a1      	mov	r9, r4
 8004bb6:	4b1f      	ldr	r3, [pc, #124]	; (8004c34 <path_following_step+0x208>)
 8004bb8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <path_following_step+0x1fc>)
 8004bbe:	ed93 7b04 	vldr	d7, [r3, #16]
 8004bc2:	eeb0 0a47 	vmov.f32	s0, s14
 8004bc6:	eef0 0a67 	vmov.f32	s1, s15
 8004bca:	f00c fe99 	bl	8011900 <sin>
 8004bce:	ec53 2b10 	vmov	r2, r3, d0
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7fb fd27 	bl	8000628 <__aeabi_dmul>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	460c      	mov	r4, r1
 8004bde:	461a      	mov	r2, r3
 8004be0:	4623      	mov	r3, r4
 8004be2:	4640      	mov	r0, r8
 8004be4:	4649      	mov	r1, r9
 8004be6:	f7fb fb69 	bl	80002bc <__adddf3>
 8004bea:	4603      	mov	r3, r0
 8004bec:	460c      	mov	r4, r1
 8004bee:	4618      	mov	r0, r3
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf6:	f7fb fd17 	bl	8000628 <__aeabi_dmul>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	460c      	mov	r4, r1
 8004bfe:	4618      	mov	r0, r3
 8004c00:	4621      	mov	r1, r4
 8004c02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c06:	f7fb fb59 	bl	80002bc <__adddf3>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <path_following_step+0x20c>)
 8004c10:	e9c2 3402 	strd	r3, r4, [r2, #8]
  //mon2 = rtb_Diff;


  /* End of Outputs for SubSystem: '<S1>/ClacTarget_V��1' */
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}
 8004c14:	bf00      	nop
 8004c16:	3728      	adds	r7, #40	; 0x28
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c1e:	bf00      	nop
 8004c20:	20021dc8 	.word	0x20021dc8
 8004c24:	408f4000 	.word	0x408f4000
 8004c28:	20021df8 	.word	0x20021df8
 8004c2c:	20021db8 	.word	0x20021db8
 8004c30:	20021dc0 	.word	0x20021dc0
 8004c34:	20021e38 	.word	0x20021e38
 8004c38:	20021e28 	.word	0x20021e28

08004c3c <path_following_initialize>:

/* Model initialize function */
void path_following_initialize(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8004c40:	bf00      	nop
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
 8004c56:	4b10      	ldr	r3, [pc, #64]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5a:	4a0f      	ldr	r2, [pc, #60]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c60:	6453      	str	r3, [r2, #68]	; 0x44
 8004c62:	4b0d      	ldr	r3, [pc, #52]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c6e:	2300      	movs	r3, #0
 8004c70:	603b      	str	r3, [r7, #0]
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7e:	4b06      	ldr	r3, [pc, #24]	; (8004c98 <HAL_MspInit+0x4c>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	603b      	str	r3, [r7, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800

08004c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08c      	sub	sp, #48	; 0x30
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca4:	f107 031c 	add.w	r3, r7, #28
 8004ca8:	2200      	movs	r2, #0
 8004caa:	601a      	str	r2, [r3, #0]
 8004cac:	605a      	str	r2, [r3, #4]
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	60da      	str	r2, [r3, #12]
 8004cb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a4a      	ldr	r2, [pc, #296]	; (8004de4 <HAL_ADC_MspInit+0x148>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	f040 808e 	bne.w	8004ddc <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	61bb      	str	r3, [r7, #24]
 8004cc4:	4b48      	ldr	r3, [pc, #288]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc8:	4a47      	ldr	r2, [pc, #284]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cce:	6453      	str	r3, [r2, #68]	; 0x44
 8004cd0:	4b45      	ldr	r3, [pc, #276]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cdc:	2300      	movs	r3, #0
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	4b41      	ldr	r3, [pc, #260]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4a40      	ldr	r2, [pc, #256]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6313      	str	r3, [r2, #48]	; 0x30
 8004cec:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	617b      	str	r3, [r7, #20]
 8004cf6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d00:	4a39      	ldr	r2, [pc, #228]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6313      	str	r3, [r2, #48]	; 0x30
 8004d08:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	4b33      	ldr	r3, [pc, #204]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1c:	4a32      	ldr	r2, [pc, #200]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d1e:	f043 0302 	orr.w	r3, r3, #2
 8004d22:	6313      	str	r3, [r2, #48]	; 0x30
 8004d24:	4b30      	ldr	r3, [pc, #192]	; (8004de8 <HAL_ADC_MspInit+0x14c>)
 8004d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004d30:	230f      	movs	r3, #15
 8004d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d34:	2303      	movs	r3, #3
 8004d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d3c:	f107 031c 	add.w	r3, r7, #28
 8004d40:	4619      	mov	r1, r3
 8004d42:	482a      	ldr	r0, [pc, #168]	; (8004dec <HAL_ADC_MspInit+0x150>)
 8004d44:	f002 fbce 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004d48:	23ff      	movs	r3, #255	; 0xff
 8004d4a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d54:	f107 031c 	add.w	r3, r7, #28
 8004d58:	4619      	mov	r1, r3
 8004d5a:	4825      	ldr	r0, [pc, #148]	; (8004df0 <HAL_ADC_MspInit+0x154>)
 8004d5c:	f002 fbc2 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d60:	2303      	movs	r3, #3
 8004d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d64:	2303      	movs	r3, #3
 8004d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6c:	f107 031c 	add.w	r3, r7, #28
 8004d70:	4619      	mov	r1, r3
 8004d72:	4820      	ldr	r0, [pc, #128]	; (8004df4 <HAL_ADC_MspInit+0x158>)
 8004d74:	f002 fbb6 	bl	80074e4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8004d78:	4b1f      	ldr	r3, [pc, #124]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d7a:	4a20      	ldr	r2, [pc, #128]	; (8004dfc <HAL_ADC_MspInit+0x160>)
 8004d7c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004d84:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d86:	4b1c      	ldr	r3, [pc, #112]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d8c:	4b1a      	ldr	r3, [pc, #104]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004d92:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d98:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004d9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004da0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004da2:	4b15      	ldr	r3, [pc, #84]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004da8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004db0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004db4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004db8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004dc0:	480d      	ldr	r0, [pc, #52]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dc2:	f001 fff3 	bl	8006dac <HAL_DMA_Init>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d001      	beq.n	8004dd0 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8004dcc:	f7ff fda6 	bl	800491c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a09      	ldr	r2, [pc, #36]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8004dd6:	4a08      	ldr	r2, [pc, #32]	; (8004df8 <HAL_ADC_MspInit+0x15c>)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004ddc:	bf00      	nop
 8004dde:	3730      	adds	r7, #48	; 0x30
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40012100 	.word	0x40012100
 8004de8:	40023800 	.word	0x40023800
 8004dec:	40020800 	.word	0x40020800
 8004df0:	40020000 	.word	0x40020000
 8004df4:	40020400 	.word	0x40020400
 8004df8:	20021d18 	.word	0x20021d18
 8004dfc:	40026440 	.word	0x40026440

08004e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	; 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e08:	f107 031c 	add.w	r3, r7, #28
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a32      	ldr	r2, [pc, #200]	; (8004ee8 <HAL_I2C_MspInit+0xe8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d12c      	bne.n	8004e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e22:	2300      	movs	r3, #0
 8004e24:	61bb      	str	r3, [r7, #24]
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	4a30      	ldr	r2, [pc, #192]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	6313      	str	r3, [r2, #48]	; 0x30
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	61bb      	str	r3, [r7, #24]
 8004e3c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e3e:	23c0      	movs	r3, #192	; 0xc0
 8004e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e42:	2312      	movs	r3, #18
 8004e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e46:	2301      	movs	r3, #1
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e4e:	2304      	movs	r3, #4
 8004e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	4619      	mov	r1, r3
 8004e58:	4825      	ldr	r0, [pc, #148]	; (8004ef0 <HAL_I2C_MspInit+0xf0>)
 8004e5a:	f002 fb43 	bl	80074e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	4a21      	ldr	r2, [pc, #132]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e76:	617b      	str	r3, [r7, #20]
 8004e78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004e7a:	e031      	b.n	8004ee0 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1c      	ldr	r2, [pc, #112]	; (8004ef4 <HAL_I2C_MspInit+0xf4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d12c      	bne.n	8004ee0 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a17      	ldr	r2, [pc, #92]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e90:	f043 0302 	orr.w	r3, r3, #2
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004ea2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ea6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ea8:	2312      	movs	r3, #18
 8004eaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eac:	2301      	movs	r3, #1
 8004eae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eb8:	f107 031c 	add.w	r3, r7, #28
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480c      	ldr	r0, [pc, #48]	; (8004ef0 <HAL_I2C_MspInit+0xf0>)
 8004ec0:	f002 fb10 	bl	80074e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
 8004ec8:	4b08      	ldr	r3, [pc, #32]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ecc:	4a07      	ldr	r2, [pc, #28]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004ece:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ed2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ed4:	4b05      	ldr	r3, [pc, #20]	; (8004eec <HAL_I2C_MspInit+0xec>)
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004edc:	60fb      	str	r3, [r7, #12]
 8004ede:	68fb      	ldr	r3, [r7, #12]
}
 8004ee0:	bf00      	nop
 8004ee2:	3730      	adds	r7, #48	; 0x30
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	40005400 	.word	0x40005400
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020400 	.word	0x40020400
 8004ef4:	40005800 	.word	0x40005800

08004ef8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b08a      	sub	sp, #40	; 0x28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f00:	f107 0314 	add.w	r3, r7, #20
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	609a      	str	r2, [r3, #8]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a69      	ldr	r2, [pc, #420]	; (80050bc <HAL_SD_MspInit+0x1c4>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	f040 80cb 	bne.w	80050b2 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
 8004f20:	4b67      	ldr	r3, [pc, #412]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f24:	4a66      	ldr	r2, [pc, #408]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2c:	4b64      	ldr	r3, [pc, #400]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	4a5f      	ldr	r2, [pc, #380]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f42:	f043 0304 	orr.w	r3, r3, #4
 8004f46:	6313      	str	r3, [r2, #48]	; 0x30
 8004f48:	4b5d      	ldr	r3, [pc, #372]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004f54:	2300      	movs	r3, #0
 8004f56:	60bb      	str	r3, [r7, #8]
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f5e:	f043 0308 	orr.w	r3, r3, #8
 8004f62:	6313      	str	r3, [r2, #48]	; 0x30
 8004f64:	4b56      	ldr	r3, [pc, #344]	; (80050c0 <HAL_SD_MspInit+0x1c8>)
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004f70:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004f74:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f76:	2302      	movs	r3, #2
 8004f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004f82:	230c      	movs	r3, #12
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f86:	f107 0314 	add.w	r3, r7, #20
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	484d      	ldr	r0, [pc, #308]	; (80050c4 <HAL_SD_MspInit+0x1cc>)
 8004f8e:	f002 faa9 	bl	80074e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f92:	2304      	movs	r3, #4
 8004f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f96:	2302      	movs	r3, #2
 8004f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004fa2:	230c      	movs	r3, #12
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fa6:	f107 0314 	add.w	r3, r7, #20
 8004faa:	4619      	mov	r1, r3
 8004fac:	4846      	ldr	r0, [pc, #280]	; (80050c8 <HAL_SD_MspInit+0x1d0>)
 8004fae:	f002 fa99 	bl	80074e4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004fb2:	4b46      	ldr	r3, [pc, #280]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fb4:	4a46      	ldr	r2, [pc, #280]	; (80050d0 <HAL_SD_MspInit+0x1d8>)
 8004fb6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004fb8:	4b44      	ldr	r3, [pc, #272]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004fbe:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fc0:	4b42      	ldr	r3, [pc, #264]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fcc:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fd2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004fd4:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fda:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004fdc:	4b3b      	ldr	r3, [pc, #236]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004fe2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004fe4:	4b39      	ldr	r3, [pc, #228]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fe6:	2220      	movs	r2, #32
 8004fe8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004fec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ff0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004ff2:	4b36      	ldr	r3, [pc, #216]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004ff8:	4b34      	ldr	r3, [pc, #208]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8004ffa:	2203      	movs	r2, #3
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004ffe:	4b33      	ldr	r3, [pc, #204]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005000:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005008:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800500e:	482f      	ldr	r0, [pc, #188]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005010:	f001 fecc 	bl	8006dac <HAL_DMA_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d001      	beq.n	800501e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800501a:	f7ff fc7f 	bl	800491c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2a      	ldr	r2, [pc, #168]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005022:	641a      	str	r2, [r3, #64]	; 0x40
 8005024:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_SD_MspInit+0x1d4>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800502a:	4b2a      	ldr	r3, [pc, #168]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_SD_MspInit+0x1e0>)
 800502e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8005030:	4b28      	ldr	r3, [pc, #160]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005036:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005038:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800503a:	2240      	movs	r2, #64	; 0x40
 800503c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800503e:	4b25      	ldr	r3, [pc, #148]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005040:	2200      	movs	r2, #0
 8005042:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005044:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005046:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800504a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800504c:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800504e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005052:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005054:	4b1f      	ldr	r3, [pc, #124]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005056:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800505a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800505c:	4b1d      	ldr	r3, [pc, #116]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800505e:	2220      	movs	r2, #32
 8005060:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005062:	4b1c      	ldr	r3, [pc, #112]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005064:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005068:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800506a:	4b1a      	ldr	r3, [pc, #104]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800506c:	2204      	movs	r2, #4
 800506e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005070:	4b18      	ldr	r3, [pc, #96]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005072:	2203      	movs	r2, #3
 8005074:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005076:	4b17      	ldr	r3, [pc, #92]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005078:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800507c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005080:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005084:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8005086:	4813      	ldr	r0, [pc, #76]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 8005088:	f001 fe90 	bl	8006dac <HAL_DMA_Init>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8005092:	f7ff fc43 	bl	800491c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a0e      	ldr	r2, [pc, #56]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800509a:	63da      	str	r2, [r3, #60]	; 0x3c
 800509c:	4a0d      	ldr	r2, [pc, #52]	; (80050d4 <HAL_SD_MspInit+0x1dc>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80050a2:	2200      	movs	r2, #0
 80050a4:	2100      	movs	r1, #0
 80050a6:	2031      	movs	r0, #49	; 0x31
 80050a8:	f001 fe49 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80050ac:	2031      	movs	r0, #49	; 0x31
 80050ae:	f001 fe62 	bl	8006d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80050b2:	bf00      	nop
 80050b4:	3728      	adds	r7, #40	; 0x28
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40020800 	.word	0x40020800
 80050c8:	40020c00 	.word	0x40020c00
 80050cc:	20021840 	.word	0x20021840
 80050d0:	40026458 	.word	0x40026458
 80050d4:	20021b74 	.word	0x20021b74
 80050d8:	400264a0 	.word	0x400264a0

080050dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08a      	sub	sp, #40	; 0x28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050e4:	f107 0314 	add.w	r3, r7, #20
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
 80050ee:	609a      	str	r2, [r3, #8]
 80050f0:	60da      	str	r2, [r3, #12]
 80050f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a19      	ldr	r2, [pc, #100]	; (8005160 <HAL_SPI_MspInit+0x84>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d12c      	bne.n	8005158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	4b18      	ldr	r3, [pc, #96]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a17      	ldr	r2, [pc, #92]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005108:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b15      	ldr	r3, [pc, #84]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	4b11      	ldr	r3, [pc, #68]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <HAL_SPI_MspInit+0x88>)
 8005124:	f043 0302 	orr.w	r3, r3, #2
 8005128:	6313      	str	r3, [r2, #48]	; 0x30
 800512a:	4b0e      	ldr	r3, [pc, #56]	; (8005164 <HAL_SPI_MspInit+0x88>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005136:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800513a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005144:	2303      	movs	r3, #3
 8005146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005148:	2305      	movs	r3, #5
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4619      	mov	r1, r3
 8005152:	4805      	ldr	r0, [pc, #20]	; (8005168 <HAL_SPI_MspInit+0x8c>)
 8005154:	f002 f9c6 	bl	80074e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005158:	bf00      	nop
 800515a:	3728      	adds	r7, #40	; 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40003800 	.word	0x40003800
 8005164:	40023800 	.word	0x40023800
 8005168:	40020400 	.word	0x40020400

0800516c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08c      	sub	sp, #48	; 0x30
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005174:	f107 031c 	add.w	r3, r7, #28
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	605a      	str	r2, [r3, #4]
 800517e:	609a      	str	r2, [r3, #8]
 8005180:	60da      	str	r2, [r3, #12]
 8005182:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a2d      	ldr	r2, [pc, #180]	; (8005240 <HAL_TIM_PWM_MspInit+0xd4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d12d      	bne.n	80051ea <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	4b2c      	ldr	r3, [pc, #176]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005196:	4a2b      	ldr	r2, [pc, #172]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	6453      	str	r3, [r2, #68]	; 0x44
 800519e:	4b29      	ldr	r3, [pc, #164]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051aa:	2300      	movs	r3, #0
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	4a24      	ldr	r2, [pc, #144]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051b4:	f043 0310 	orr.w	r3, r3, #16
 80051b8:	6313      	str	r3, [r2, #48]	; 0x30
 80051ba:	4b22      	ldr	r3, [pc, #136]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80051c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80051ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051cc:	2302      	movs	r3, #2
 80051ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d0:	2300      	movs	r3, #0
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d4:	2300      	movs	r3, #0
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80051d8:	2301      	movs	r3, #1
 80051da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051dc:	f107 031c 	add.w	r3, r7, #28
 80051e0:	4619      	mov	r1, r3
 80051e2:	4819      	ldr	r0, [pc, #100]	; (8005248 <HAL_TIM_PWM_MspInit+0xdc>)
 80051e4:	f002 f97e 	bl	80074e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80051e8:	e026      	b.n	8005238 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a17      	ldr	r2, [pc, #92]	; (800524c <HAL_TIM_PWM_MspInit+0xe0>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d10e      	bne.n	8005212 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051f4:	2300      	movs	r3, #0
 80051f6:	613b      	str	r3, [r7, #16]
 80051f8:	4b12      	ldr	r3, [pc, #72]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fc:	4a11      	ldr	r2, [pc, #68]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 80051fe:	f043 0302 	orr.w	r3, r3, #2
 8005202:	6413      	str	r3, [r2, #64]	; 0x40
 8005204:	4b0f      	ldr	r3, [pc, #60]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	613b      	str	r3, [r7, #16]
 800520e:	693b      	ldr	r3, [r7, #16]
}
 8005210:	e012      	b.n	8005238 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a0e      	ldr	r2, [pc, #56]	; (8005250 <HAL_TIM_PWM_MspInit+0xe4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d10d      	bne.n	8005238 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800521c:	2300      	movs	r3, #0
 800521e:	60fb      	str	r3, [r7, #12]
 8005220:	4b08      	ldr	r3, [pc, #32]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005224:	4a07      	ldr	r2, [pc, #28]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6413      	str	r3, [r2, #64]	; 0x40
 800522c:	4b05      	ldr	r3, [pc, #20]	; (8005244 <HAL_TIM_PWM_MspInit+0xd8>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	bf00      	nop
 800523a:	3730      	adds	r7, #48	; 0x30
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40010000 	.word	0x40010000
 8005244:	40023800 	.word	0x40023800
 8005248:	40021000 	.word	0x40021000
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800

08005254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3e      	ldr	r2, [pc, #248]	; (800535c <HAL_TIM_Base_MspInit+0x108>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d116      	bne.n	8005294 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005266:	2300      	movs	r3, #0
 8005268:	61fb      	str	r3, [r7, #28]
 800526a:	4b3d      	ldr	r3, [pc, #244]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	4a3c      	ldr	r2, [pc, #240]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005270:	f043 0310 	orr.w	r3, r3, #16
 8005274:	6413      	str	r3, [r2, #64]	; 0x40
 8005276:	4b3a      	ldr	r3, [pc, #232]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	61fb      	str	r3, [r7, #28]
 8005280:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8005282:	2200      	movs	r2, #0
 8005284:	2101      	movs	r1, #1
 8005286:	2036      	movs	r0, #54	; 0x36
 8005288:	f001 fd59 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800528c:	2036      	movs	r0, #54	; 0x36
 800528e:	f001 fd72 	bl	8006d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8005292:	e05e      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a32      	ldr	r2, [pc, #200]	; (8005364 <HAL_TIM_Base_MspInit+0x110>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d116      	bne.n	80052cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	4b2f      	ldr	r3, [pc, #188]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4a2e      	ldr	r2, [pc, #184]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052a8:	f043 0320 	orr.w	r3, r3, #32
 80052ac:	6413      	str	r3, [r2, #64]	; 0x40
 80052ae:	4b2c      	ldr	r3, [pc, #176]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	61bb      	str	r3, [r7, #24]
 80052b8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80052ba:	2200      	movs	r2, #0
 80052bc:	2100      	movs	r1, #0
 80052be:	2037      	movs	r0, #55	; 0x37
 80052c0:	f001 fd3d 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80052c4:	2037      	movs	r0, #55	; 0x37
 80052c6:	f001 fd56 	bl	8006d76 <HAL_NVIC_EnableIRQ>
}
 80052ca:	e042      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <HAL_TIM_Base_MspInit+0x114>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d10e      	bne.n	80052f4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	617b      	str	r3, [r7, #20]
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052de:	4a20      	ldr	r2, [pc, #128]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e4:	6453      	str	r3, [r2, #68]	; 0x44
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 80052e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	617b      	str	r3, [r7, #20]
 80052f0:	697b      	ldr	r3, [r7, #20]
}
 80052f2:	e02e      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a1c      	ldr	r2, [pc, #112]	; (800536c <HAL_TIM_Base_MspInit+0x118>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80052fe:	2300      	movs	r3, #0
 8005300:	613b      	str	r3, [r7, #16]
 8005302:	4b17      	ldr	r3, [pc, #92]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005306:	4a16      	ldr	r2, [pc, #88]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800530c:	6453      	str	r3, [r2, #68]	; 0x44
 800530e:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	693b      	ldr	r3, [r7, #16]
}
 800531a:	e01a      	b.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a13      	ldr	r2, [pc, #76]	; (8005370 <HAL_TIM_Base_MspInit+0x11c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d115      	bne.n	8005352 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <HAL_TIM_Base_MspInit+0x10c>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	60fb      	str	r3, [r7, #12]
 8005340:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8005342:	2200      	movs	r2, #0
 8005344:	2100      	movs	r1, #0
 8005346:	202c      	movs	r0, #44	; 0x2c
 8005348:	f001 fcf9 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800534c:	202c      	movs	r0, #44	; 0x2c
 800534e:	f001 fd12 	bl	8006d76 <HAL_NVIC_EnableIRQ>
}
 8005352:	bf00      	nop
 8005354:	3720      	adds	r7, #32
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}
 800535a:	bf00      	nop
 800535c:	40001000 	.word	0x40001000
 8005360:	40023800 	.word	0x40023800
 8005364:	40001400 	.word	0x40001400
 8005368:	40014400 	.word	0x40014400
 800536c:	40014800 	.word	0x40014800
 8005370:	40001c00 	.word	0x40001c00

08005374 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800537c:	f107 0314 	add.w	r3, r7, #20
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	609a      	str	r2, [r3, #8]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_TIM_Encoder_MspInit+0x94>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d133      	bne.n	80053fe <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005396:	2300      	movs	r3, #0
 8005398:	613b      	str	r3, [r7, #16]
 800539a:	4b1c      	ldr	r3, [pc, #112]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 800539c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539e:	4a1b      	ldr	r2, [pc, #108]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053a0:	f043 0302 	orr.w	r3, r3, #2
 80053a4:	6453      	str	r3, [r2, #68]	; 0x44
 80053a6:	4b19      	ldr	r3, [pc, #100]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	613b      	str	r3, [r7, #16]
 80053b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053b2:	2300      	movs	r3, #0
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	4b15      	ldr	r3, [pc, #84]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ba:	4a14      	ldr	r2, [pc, #80]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	6313      	str	r3, [r2, #48]	; 0x30
 80053c2:	4b12      	ldr	r3, [pc, #72]	; (800540c <HAL_TIM_Encoder_MspInit+0x98>)
 80053c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c6:	f003 0304 	and.w	r3, r3, #4
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053ce:	23c0      	movs	r3, #192	; 0xc0
 80053d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053d2:	2302      	movs	r3, #2
 80053d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053da:	2300      	movs	r3, #0
 80053dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053de:	2303      	movs	r3, #3
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053e2:	f107 0314 	add.w	r3, r7, #20
 80053e6:	4619      	mov	r1, r3
 80053e8:	4809      	ldr	r0, [pc, #36]	; (8005410 <HAL_TIM_Encoder_MspInit+0x9c>)
 80053ea:	f002 f87b 	bl	80074e4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80053ee:	2200      	movs	r2, #0
 80053f0:	2100      	movs	r1, #0
 80053f2:	202c      	movs	r0, #44	; 0x2c
 80053f4:	f001 fca3 	bl	8006d3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80053f8:	202c      	movs	r0, #44	; 0x2c
 80053fa:	f001 fcbc 	bl	8006d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80053fe:	bf00      	nop
 8005400:	3728      	adds	r7, #40	; 0x28
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	40010400 	.word	0x40010400
 800540c:	40023800 	.word	0x40023800
 8005410:	40020800 	.word	0x40020800

08005414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08c      	sub	sp, #48	; 0x30
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 031c 	add.w	r3, r7, #28
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a5c      	ldr	r2, [pc, #368]	; (80055a4 <HAL_TIM_MspPostInit+0x190>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d11f      	bne.n	8005476 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
 800543a:	4b5b      	ldr	r3, [pc, #364]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	4a5a      	ldr	r2, [pc, #360]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005440:	f043 0310 	orr.w	r3, r3, #16
 8005444:	6313      	str	r3, [r2, #48]	; 0x30
 8005446:	4b58      	ldr	r3, [pc, #352]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544a:	f003 0310 	and.w	r3, r3, #16
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005458:	2302      	movs	r3, #2
 800545a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800545c:	2300      	movs	r3, #0
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005460:	2300      	movs	r3, #0
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005464:	2301      	movs	r3, #1
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005468:	f107 031c 	add.w	r3, r7, #28
 800546c:	4619      	mov	r1, r3
 800546e:	484f      	ldr	r0, [pc, #316]	; (80055ac <HAL_TIM_MspPostInit+0x198>)
 8005470:	f002 f838 	bl	80074e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8005474:	e091      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a4d      	ldr	r2, [pc, #308]	; (80055b0 <HAL_TIM_MspPostInit+0x19c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d11e      	bne.n	80054be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	4b48      	ldr	r3, [pc, #288]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4a47      	ldr	r2, [pc, #284]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800548a:	f043 0302 	orr.w	r3, r3, #2
 800548e:	6313      	str	r3, [r2, #48]	; 0x30
 8005490:	4b45      	ldr	r3, [pc, #276]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f003 0302 	and.w	r3, r3, #2
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800549c:	2330      	movs	r3, #48	; 0x30
 800549e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054a8:	2300      	movs	r3, #0
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80054ac:	2302      	movs	r3, #2
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b0:	f107 031c 	add.w	r3, r7, #28
 80054b4:	4619      	mov	r1, r3
 80054b6:	483f      	ldr	r0, [pc, #252]	; (80055b4 <HAL_TIM_MspPostInit+0x1a0>)
 80054b8:	f002 f814 	bl	80074e4 <HAL_GPIO_Init>
}
 80054bc:	e06d      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a3d      	ldr	r2, [pc, #244]	; (80055b8 <HAL_TIM_MspPostInit+0x1a4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d11f      	bne.n	8005508 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c8:	2300      	movs	r3, #0
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 80054ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d0:	4a35      	ldr	r2, [pc, #212]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 80054d2:	f043 0308 	orr.w	r3, r3, #8
 80054d6:	6313      	str	r3, [r2, #48]	; 0x30
 80054d8:	4b33      	ldr	r3, [pc, #204]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 80054da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	613b      	str	r3, [r7, #16]
 80054e2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80054e4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80054e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ea:	2302      	movs	r3, #2
 80054ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f2:	2300      	movs	r3, #0
 80054f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054f6:	2302      	movs	r3, #2
 80054f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054fa:	f107 031c 	add.w	r3, r7, #28
 80054fe:	4619      	mov	r1, r3
 8005500:	482e      	ldr	r0, [pc, #184]	; (80055bc <HAL_TIM_MspPostInit+0x1a8>)
 8005502:	f001 ffef 	bl	80074e4 <HAL_GPIO_Init>
}
 8005506:	e048      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <HAL_TIM_MspPostInit+0x1ac>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d11f      	bne.n	8005552 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551a:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800551c:	f043 0302 	orr.w	r3, r3, #2
 8005520:	6313      	str	r3, [r2, #48]	; 0x30
 8005522:	4b21      	ldr	r3, [pc, #132]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800552e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005534:	2302      	movs	r3, #2
 8005536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005538:	2300      	movs	r3, #0
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800553c:	2300      	movs	r3, #0
 800553e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8005540:	2303      	movs	r3, #3
 8005542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005544:	f107 031c 	add.w	r3, r7, #28
 8005548:	4619      	mov	r1, r3
 800554a:	481a      	ldr	r0, [pc, #104]	; (80055b4 <HAL_TIM_MspPostInit+0x1a0>)
 800554c:	f001 ffca 	bl	80074e4 <HAL_GPIO_Init>
}
 8005550:	e023      	b.n	800559a <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a1b      	ldr	r2, [pc, #108]	; (80055c4 <HAL_TIM_MspPostInit+0x1b0>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d11e      	bne.n	800559a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800555c:	2300      	movs	r3, #0
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005564:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 8005566:	f043 0302 	orr.w	r3, r3, #2
 800556a:	6313      	str	r3, [r2, #48]	; 0x30
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <HAL_TIM_MspPostInit+0x194>)
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800557e:	2302      	movs	r3, #2
 8005580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005582:	2300      	movs	r3, #0
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005586:	2300      	movs	r3, #0
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800558a:	2303      	movs	r3, #3
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800558e:	f107 031c 	add.w	r3, r7, #28
 8005592:	4619      	mov	r1, r3
 8005594:	4807      	ldr	r0, [pc, #28]	; (80055b4 <HAL_TIM_MspPostInit+0x1a0>)
 8005596:	f001 ffa5 	bl	80074e4 <HAL_GPIO_Init>
}
 800559a:	bf00      	nop
 800559c:	3730      	adds	r7, #48	; 0x30
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40023800 	.word	0x40023800
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40000400 	.word	0x40000400
 80055b4:	40020400 	.word	0x40020400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40020c00 	.word	0x40020c00
 80055c0:	40014400 	.word	0x40014400
 80055c4:	40014800 	.word	0x40014800

080055c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d0:	f107 0314 	add.w	r3, r7, #20
 80055d4:	2200      	movs	r2, #0
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	605a      	str	r2, [r3, #4]
 80055da:	609a      	str	r2, [r3, #8]
 80055dc:	60da      	str	r2, [r3, #12]
 80055de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a19      	ldr	r2, [pc, #100]	; (800564c <HAL_UART_MspInit+0x84>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d12b      	bne.n	8005642 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ea:	2300      	movs	r3, #0
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	4b18      	ldr	r3, [pc, #96]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
 80055fa:	4b15      	ldr	r3, [pc, #84]	; (8005650 <HAL_UART_MspInit+0x88>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005602:	613b      	str	r3, [r7, #16]
 8005604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <HAL_UART_MspInit+0x88>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	4a10      	ldr	r2, [pc, #64]	; (8005650 <HAL_UART_MspInit+0x88>)
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6313      	str	r3, [r2, #48]	; 0x30
 8005616:	4b0e      	ldr	r3, [pc, #56]	; (8005650 <HAL_UART_MspInit+0x88>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	60fb      	str	r3, [r7, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8005622:	2360      	movs	r3, #96	; 0x60
 8005624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005626:	2302      	movs	r3, #2
 8005628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800562a:	2300      	movs	r3, #0
 800562c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800562e:	2303      	movs	r3, #3
 8005630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005632:	2307      	movs	r3, #7
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005636:	f107 0314 	add.w	r3, r7, #20
 800563a:	4619      	mov	r1, r3
 800563c:	4805      	ldr	r0, [pc, #20]	; (8005654 <HAL_UART_MspInit+0x8c>)
 800563e:	f001 ff51 	bl	80074e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005642:	bf00      	nop
 8005644:	3728      	adds	r7, #40	; 0x28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40004400 	.word	0x40004400
 8005650:	40023800 	.word	0x40023800
 8005654:	40020c00 	.word	0x40020c00

08005658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800565c:	e7fe      	b.n	800565c <NMI_Handler+0x4>

0800565e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800565e:	b480      	push	{r7}
 8005660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005662:	e7fe      	b.n	8005662 <HardFault_Handler+0x4>

08005664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005668:	e7fe      	b.n	8005668 <MemManage_Handler+0x4>

0800566a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800566a:	b480      	push	{r7}
 800566c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800566e:	e7fe      	b.n	800566e <BusFault_Handler+0x4>

08005670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005670:	b480      	push	{r7}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005674:	e7fe      	b.n	8005674 <UsageFault_Handler+0x4>

08005676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005688:	bf00      	nop
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005692:	b480      	push	{r7}
 8005694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056a4:	f000 fe2a 	bl	80062fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056a8:	bf00      	nop
 80056aa:	bd80      	pop	{r7, pc}

080056ac <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80056b0:	2004      	movs	r0, #4
 80056b2:	f002 f8f3 	bl	800789c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}

080056ba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80056be:	f44f 7080 	mov.w	r0, #256	; 0x100
 80056c2:	f002 f8eb 	bl	800789c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80056c6:	bf00      	nop
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80056d0:	4803      	ldr	r0, [pc, #12]	; (80056e0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80056d2:	f006 f902 	bl	800b8da <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80056d6:	4803      	ldr	r0, [pc, #12]	; (80056e4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80056d8:	f006 f8ff 	bl	800b8da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80056dc:	bf00      	nop
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	200218f8 	.word	0x200218f8
 80056e4:	20021af4 	.word	0x20021af4

080056e8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <SDIO_IRQHandler+0x10>)
 80056ee:	f004 f99b 	bl	8009a28 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20021c54 	.word	0x20021c54

080056fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <TIM6_DAC_IRQHandler+0x10>)
 8005702:	f006 f8ea 	bl	800b8da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20021bd4 	.word	0x20021bd4

08005710 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005714:	4802      	ldr	r0, [pc, #8]	; (8005720 <TIM7_IRQHandler+0x10>)
 8005716:	f006 f8e0 	bl	800b8da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20021d78 	.word	0x20021d78

08005724 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005728:	4802      	ldr	r0, [pc, #8]	; (8005734 <DMA2_Stream2_IRQHandler+0x10>)
 800572a:	f001 fc67 	bl	8006ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800572e:	bf00      	nop
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20021d18 	.word	0x20021d18

08005738 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800573c:	4802      	ldr	r0, [pc, #8]	; (8005748 <DMA2_Stream3_IRQHandler+0x10>)
 800573e:	f001 fc5d 	bl	8006ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005742:	bf00      	nop
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	20021840 	.word	0x20021840

0800574c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <DMA2_Stream6_IRQHandler+0x10>)
 8005752:	f001 fc53 	bl	8006ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20021b74 	.word	0x20021b74

08005760 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800576c:	2300      	movs	r3, #0
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e00a      	b.n	8005788 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005772:	f3af 8000 	nop.w
 8005776:	4601      	mov	r1, r0
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	60ba      	str	r2, [r7, #8]
 800577e:	b2ca      	uxtb	r2, r1
 8005780:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	3301      	adds	r3, #1
 8005786:	617b      	str	r3, [r7, #20]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	429a      	cmp	r2, r3
 800578e:	dbf0      	blt.n	8005772 <_read+0x12>
	}

return len;
 8005790:	687b      	ldr	r3, [r7, #4]
}
 8005792:	4618      	mov	r0, r3
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}

0800579a <_close>:
	}
	return len;
}

int _close(int file)
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	return -1;
 80057a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	370c      	adds	r7, #12
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr

080057b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
 80057ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057c2:	605a      	str	r2, [r3, #4]
	return 0;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <_isatty>:

int _isatty(int file)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
	return 1;
 80057da:	2301      	movs	r3, #1
}
 80057dc:	4618      	mov	r0, r3
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	607a      	str	r2, [r7, #4]
	return 0;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800580c:	4a14      	ldr	r2, [pc, #80]	; (8005860 <_sbrk+0x5c>)
 800580e:	4b15      	ldr	r3, [pc, #84]	; (8005864 <_sbrk+0x60>)
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005818:	4b13      	ldr	r3, [pc, #76]	; (8005868 <_sbrk+0x64>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005820:	4b11      	ldr	r3, [pc, #68]	; (8005868 <_sbrk+0x64>)
 8005822:	4a12      	ldr	r2, [pc, #72]	; (800586c <_sbrk+0x68>)
 8005824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <_sbrk+0x64>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4413      	add	r3, r2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d207      	bcs.n	8005844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005834:	f00d f986 	bl	8012b44 <__errno>
 8005838:	4602      	mov	r2, r0
 800583a:	230c      	movs	r3, #12
 800583c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800583e:	f04f 33ff 	mov.w	r3, #4294967295
 8005842:	e009      	b.n	8005858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005844:	4b08      	ldr	r3, [pc, #32]	; (8005868 <_sbrk+0x64>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800584a:	4b07      	ldr	r3, [pc, #28]	; (8005868 <_sbrk+0x64>)
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	4a05      	ldr	r2, [pc, #20]	; (8005868 <_sbrk+0x64>)
 8005854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005856:	68fb      	ldr	r3, [r7, #12]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	20050000 	.word	0x20050000
 8005864:	00000400 	.word	0x00000400
 8005868:	20000230 	.word	0x20000230
 800586c:	20023ed0 	.word	0x20023ed0

08005870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005870:	b480      	push	{r7}
 8005872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005874:	4b08      	ldr	r3, [pc, #32]	; (8005898 <SystemInit+0x28>)
 8005876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <SystemInit+0x28>)
 800587c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <SystemInit+0x28>)
 8005886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800588a:	609a      	str	r2, [r3, #8]
#endif
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <batteryLowMode>:

double mon_f, mon_d;
double mon_v, mon_w;

void batteryLowMode()
{
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
	lcd_clear();
 80058a0:	f7fb fbfe 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80058a4:	2100      	movs	r1, #0
 80058a6:	2000      	movs	r0, #0
 80058a8:	f7fb fc0a 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 80058ac:	4814      	ldr	r0, [pc, #80]	; (8005900 <batteryLowMode+0x64>)
 80058ae:	f7fb fc31 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80058b2:	2101      	movs	r1, #1
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fb fc03 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 80058ba:	4812      	ldr	r0, [pc, #72]	; (8005904 <batteryLowMode+0x68>)
 80058bc:	f7fb fc2a 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80058c0:	2152      	movs	r1, #82	; 0x52
 80058c2:	4811      	ldr	r0, [pc, #68]	; (8005908 <batteryLowMode+0x6c>)
 80058c4:	f7fc fb28 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80058c8:	2064      	movs	r0, #100	; 0x64
 80058ca:	f000 fd37 	bl	800633c <HAL_Delay>
		led.fullColor('Y');
 80058ce:	2159      	movs	r1, #89	; 0x59
 80058d0:	480d      	ldr	r0, [pc, #52]	; (8005908 <batteryLowMode+0x6c>)
 80058d2:	f7fc fb21 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80058d6:	2064      	movs	r0, #100	; 0x64
 80058d8:	f000 fd30 	bl	800633c <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80058dc:	480b      	ldr	r0, [pc, #44]	; (800590c <batteryLowMode+0x70>)
 80058de:	f7fc fab7 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0e6      	beq.n	80058c0 <batteryLowMode+0x24>
			HAL_Delay(500);
 80058f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80058f6:	f000 fd21 	bl	800633c <HAL_Delay>
			break;
 80058fa:	bf00      	nop
		}
	}
}
 80058fc:	bf00      	nop
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	08017ab0 	.word	0x08017ab0
 8005904:	08017ab8 	.word	0x08017ab8
 8005908:	2000053c 	.word	0x2000053c
 800590c:	20000530 	.word	0x20000530

08005910 <cppInit>:

void cppInit(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
	lcd_init();
 8005914:	f7fb fb80 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8005918:	4832      	ldr	r0, [pc, #200]	; (80059e4 <cppInit+0xd4>)
 800591a:	f7fd fccb 	bl	80032b4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800591e:	2064      	movs	r0, #100	; 0x64
 8005920:	f000 fd0c 	bl	800633c <HAL_Delay>
	power_sensor.updateValues();
 8005924:	482f      	ldr	r0, [pc, #188]	; (80059e4 <cppInit+0xd4>)
 8005926:	f7fd fcd3 	bl	80032d0 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed
 800592a:	482e      	ldr	r0, [pc, #184]	; (80059e4 <cppInit+0xd4>)
 800592c:	f7fd fcfc 	bl	8003328 <_ZN11PowerSensor12butteryCheckEv>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <cppInit+0x2a>
 8005936:	f7ff ffb1 	bl	800589c <batteryLowMode>

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800593a:	482b      	ldr	r0, [pc, #172]	; (80059e8 <cppInit+0xd8>)
 800593c:	f7fd f8ba 	bl	8002ab4 <_ZN6Logger10sdCardInitEv>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <cppInit+0x46>
		led.fullColor('G');
 8005946:	2147      	movs	r1, #71	; 0x47
 8005948:	4828      	ldr	r0, [pc, #160]	; (80059ec <cppInit+0xdc>)
 800594a:	f7fc fae5 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800594e:	2064      	movs	r0, #100	; 0x64
 8005950:	f000 fcf4 	bl	800633c <HAL_Delay>
 8005954:	e006      	b.n	8005964 <cppInit+0x54>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8005956:	2152      	movs	r1, #82	; 0x52
 8005958:	4824      	ldr	r0, [pc, #144]	; (80059ec <cppInit+0xdc>)
 800595a:	f7fc fadd 	bl	8001f18 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800595e:	2064      	movs	r0, #100	; 0x64
 8005960:	f000 fcec 	bl	800633c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8005964:	4822      	ldr	r0, [pc, #136]	; (80059f0 <cppInit+0xe0>)
 8005966:	f7fc fc33 	bl	80021d0 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800596a:	4822      	ldr	r0, [pc, #136]	; (80059f4 <cppInit+0xe4>)
 800596c:	f7fd f98a 	bl	8002c84 <_ZN5Motor4initEv>
	encoder.init();
 8005970:	4821      	ldr	r0, [pc, #132]	; (80059f8 <cppInit+0xe8>)
 8005972:	f7fb fc23 	bl	80011bc <_ZN7Encoder4initEv>
	imu.init();
 8005976:	4821      	ldr	r0, [pc, #132]	; (80059fc <cppInit+0xec>)
 8005978:	f7fc f8c8 	bl	8001b0c <_ZN3IMU4initEv>

	line_sensor.calibration();
 800597c:	481c      	ldr	r0, [pc, #112]	; (80059f0 <cppInit+0xe0>)
 800597e:	f7fc fd1d 	bl	80023bc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005986:	f000 fcd9 	bl	800633c <HAL_Delay>

	led.fullColor('M');
 800598a:	214d      	movs	r1, #77	; 0x4d
 800598c:	4817      	ldr	r0, [pc, #92]	; (80059ec <cppInit+0xdc>)
 800598e:	f7fc fac3 	bl	8001f18 <_ZN3LED9fullColorEc>
	imu.calibration();
 8005992:	481a      	ldr	r0, [pc, #104]	; (80059fc <cppInit+0xec>)
 8005994:	f7fc f94a 	bl	8001c2c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000002, 0);
 8005998:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8005a00 <cppInit+0xf0>
 800599c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8005a04 <cppInit+0xf4>
 80059a0:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8005a08 <cppInit+0xf8>
 80059a4:	4819      	ldr	r0, [pc, #100]	; (8005a0c <cppInit+0xfc>)
 80059a6:	f7fc ffcf 	bl	8002948 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 80059aa:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8005a00 <cppInit+0xf0>
 80059ae:	eddf 0a14 	vldr	s1, [pc, #80]	; 8005a00 <cppInit+0xf0>
 80059b2:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8005a00 <cppInit+0xf0>
 80059b6:	4816      	ldr	r0, [pc, #88]	; (8005a10 <cppInit+0x100>)
 80059b8:	f7fd ff66 	bl	8003888 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 80059bc:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8005a00 <cppInit+0xf0>
 80059c0:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8005a00 <cppInit+0xf0>
 80059c4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8005a00 <cppInit+0xf0>
 80059c8:	4811      	ldr	r0, [pc, #68]	; (8005a10 <cppInit+0x100>)
 80059ca:	f7fd ff76 	bl	80038ba <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 80059ce:	480a      	ldr	r0, [pc, #40]	; (80059f8 <cppInit+0xe8>)
 80059d0:	f7fb fce2 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
	odometry.clearPotition();
 80059d4:	480f      	ldr	r0, [pc, #60]	; (8005a14 <cppInit+0x104>)
 80059d6:	f7fd fb63 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 80059da:	480f      	ldr	r0, [pc, #60]	; (8005a18 <cppInit+0x108>)
 80059dc:	f7fd fbdc 	bl	8003198 <_ZN13PathFollowing4initEv>

}
 80059e0:	bf00      	nop
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	20000540 	.word	0x20000540
 80059e8:	20000570 	.word	0x20000570
 80059ec:	2000053c 	.word	0x2000053c
 80059f0:	20000234 	.word	0x20000234
 80059f4:	20000538 	.word	0x20000538
 80059f8:	2001f1a8 	.word	0x2001f1a8
 80059fc:	20000550 	.word	0x20000550
 8005a00:	00000000 	.word	0x00000000
 8005a04:	360637bd 	.word	0x360637bd
 8005a08:	3a03126f 	.word	0x3a03126f
 8005a0c:	2001f218 	.word	0x2001f218
 8005a10:	2001f1d8 	.word	0x2001f1d8
 8005a14:	2001f278 	.word	0x2001f278
 8005a18:	2001f2a8 	.word	0x2001f2a8
 8005a1c:	00000000 	.word	0x00000000

08005a20 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8005a20:	b598      	push	{r3, r4, r7, lr}
 8005a22:	ed2d 8b04 	vpush	{d8-d9}
 8005a26:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8005a28:	4853      	ldr	r0, [pc, #332]	; (8005b78 <cppFlip1ms+0x158>)
 8005a2a:	f7fc fc2f 	bl	800228c <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8005a2e:	4853      	ldr	r0, [pc, #332]	; (8005b7c <cppFlip1ms+0x15c>)
 8005a30:	f7fc f880 	bl	8001b34 <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 8005a34:	4852      	ldr	r0, [pc, #328]	; (8005b80 <cppFlip1ms+0x160>)
 8005a36:	f7fb fbe3 	bl	8001200 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 8005a3a:	4852      	ldr	r0, [pc, #328]	; (8005b84 <cppFlip1ms+0x164>)
 8005a3c:	f7fc ffbc 	bl	80029b8 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8005a40:	4851      	ldr	r0, [pc, #324]	; (8005b88 <cppFlip1ms+0x168>)
 8005a42:	f7fd ff53 	bl	80038ec <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8005a46:	4851      	ldr	r0, [pc, #324]	; (8005b8c <cppFlip1ms+0x16c>)
 8005a48:	f7fd faec 	bl	8003024 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 8005a4c:	4850      	ldr	r0, [pc, #320]	; (8005b90 <cppFlip1ms+0x170>)
 8005a4e:	f7fd f92b 	bl	8002ca8 <_ZN5Motor9motorCtrlEv>
	*/

	//  rtY.V_tar = rtParam.kx * rtDW.Add4 + cos(rtDW.Add3) * rtb_Uk1;
	//  rtY.tar = (rtParam.ky * rtDW.Add5 + rtParam.kt * sin(rtDW.Add3)) * rtb_Uk1 + rtb_Diff;

	path_following.setGain(10, 10, 10);
 8005a52:	ed9f 2b43 	vldr	d2, [pc, #268]	; 8005b60 <cppFlip1ms+0x140>
 8005a56:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8005b60 <cppFlip1ms+0x140>
 8005a5a:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8005b60 <cppFlip1ms+0x140>
 8005a5e:	484d      	ldr	r0, [pc, #308]	; (8005b94 <cppFlip1ms+0x174>)
 8005a60:	f7fd fba4 	bl	80031ac <_ZN13PathFollowing7setGainEddd>
	path_following.setGain(10, 10, 1000);
 8005a64:	ed9f 2b40 	vldr	d2, [pc, #256]	; 8005b68 <cppFlip1ms+0x148>
 8005a68:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8005b60 <cppFlip1ms+0x140>
 8005a6c:	ed9f 0b3c 	vldr	d0, [pc, #240]	; 8005b60 <cppFlip1ms+0x140>
 8005a70:	4848      	ldr	r0, [pc, #288]	; (8005b94 <cppFlip1ms+0x174>)
 8005a72:	f7fd fb9b 	bl	80031ac <_ZN13PathFollowing7setGainEddd>
	static double x, y, th;
	x += 0.001;
 8005a76:	4b48      	ldr	r3, [pc, #288]	; (8005b98 <cppFlip1ms+0x178>)
 8005a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a7c:	a33c      	add	r3, pc, #240	; (adr r3, 8005b70 <cppFlip1ms+0x150>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	f7fa fc1b 	bl	80002bc <__adddf3>
 8005a86:	4603      	mov	r3, r0
 8005a88:	460c      	mov	r4, r1
 8005a8a:	4a43      	ldr	r2, [pc, #268]	; (8005b98 <cppFlip1ms+0x178>)
 8005a8c:	e9c2 3400 	strd	r3, r4, [r2]
	y += 0.001;
 8005a90:	4b42      	ldr	r3, [pc, #264]	; (8005b9c <cppFlip1ms+0x17c>)
 8005a92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005a96:	a336      	add	r3, pc, #216	; (adr r3, 8005b70 <cppFlip1ms+0x150>)
 8005a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9c:	f7fa fc0e 	bl	80002bc <__adddf3>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	460c      	mov	r4, r1
 8005aa4:	4a3d      	ldr	r2, [pc, #244]	; (8005b9c <cppFlip1ms+0x17c>)
 8005aa6:	e9c2 3400 	strd	r3, r4, [r2]
	th += 0.001;
 8005aaa:	4b3d      	ldr	r3, [pc, #244]	; (8005ba0 <cppFlip1ms+0x180>)
 8005aac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005ab0:	a32f      	add	r3, pc, #188	; (adr r3, 8005b70 <cppFlip1ms+0x150>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fc01 	bl	80002bc <__adddf3>
 8005aba:	4603      	mov	r3, r0
 8005abc:	460c      	mov	r4, r1
 8005abe:	4a38      	ldr	r2, [pc, #224]	; (8005ba0 <cppFlip1ms+0x180>)
 8005ac0:	e9c2 3400 	strd	r3, r4, [r2]
	path_following.setTargetPath(x, y, th);
 8005ac4:	4b34      	ldr	r3, [pc, #208]	; (8005b98 <cppFlip1ms+0x178>)
 8005ac6:	ed93 7b00 	vldr	d7, [r3]
 8005aca:	4b34      	ldr	r3, [pc, #208]	; (8005b9c <cppFlip1ms+0x17c>)
 8005acc:	ed93 6b00 	vldr	d6, [r3]
 8005ad0:	4b33      	ldr	r3, [pc, #204]	; (8005ba0 <cppFlip1ms+0x180>)
 8005ad2:	ed93 5b00 	vldr	d5, [r3]
 8005ad6:	eeb0 2a45 	vmov.f32	s4, s10
 8005ada:	eef0 2a65 	vmov.f32	s5, s11
 8005ade:	eeb0 1a46 	vmov.f32	s2, s12
 8005ae2:	eef0 1a66 	vmov.f32	s3, s13
 8005ae6:	eeb0 0a47 	vmov.f32	s0, s14
 8005aea:	eef0 0a67 	vmov.f32	s1, s15
 8005aee:	4829      	ldr	r0, [pc, #164]	; (8005b94 <cppFlip1ms+0x174>)
 8005af0:	f7fd fb7c 	bl	80031ec <_ZN13PathFollowing13setTargetPathEddd>
	path_following.setCurrentPath(odometry.getX(), odometry.getY(), odometry.getTheta());
 8005af4:	4825      	ldr	r0, [pc, #148]	; (8005b8c <cppFlip1ms+0x16c>)
 8005af6:	f7fd faa0 	bl	800303a <_ZN8Odometry4getXEv>
 8005afa:	eeb0 8a40 	vmov.f32	s16, s0
 8005afe:	eef0 8a60 	vmov.f32	s17, s1
 8005b02:	4822      	ldr	r0, [pc, #136]	; (8005b8c <cppFlip1ms+0x16c>)
 8005b04:	f7fd faaa 	bl	800305c <_ZN8Odometry4getYEv>
 8005b08:	eeb0 9a40 	vmov.f32	s18, s0
 8005b0c:	eef0 9a60 	vmov.f32	s19, s1
 8005b10:	481e      	ldr	r0, [pc, #120]	; (8005b8c <cppFlip1ms+0x16c>)
 8005b12:	f7fd fab4 	bl	800307e <_ZN8Odometry8getThetaEv>
 8005b16:	eeb0 7a40 	vmov.f32	s14, s0
 8005b1a:	eef0 7a60 	vmov.f32	s15, s1
 8005b1e:	eeb0 2a47 	vmov.f32	s4, s14
 8005b22:	eef0 2a67 	vmov.f32	s5, s15
 8005b26:	eeb0 1a49 	vmov.f32	s2, s18
 8005b2a:	eef0 1a69 	vmov.f32	s3, s19
 8005b2e:	eeb0 0a48 	vmov.f32	s0, s16
 8005b32:	eef0 0a68 	vmov.f32	s1, s17
 8005b36:	4817      	ldr	r0, [pc, #92]	; (8005b94 <cppFlip1ms+0x174>)
 8005b38:	f7fd fb78 	bl	800322c <_ZN13PathFollowing14setCurrentPathEddd>
	path_following.flip();
 8005b3c:	4815      	ldr	r0, [pc, #84]	; (8005b94 <cppFlip1ms+0x174>)
 8005b3e:	f7fd fbaf 	bl	80032a0 <_ZN13PathFollowing4flipEv>

	path_following.getTargetVelocitys(mon_v, mon_w);
 8005b42:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <cppFlip1ms+0x184>)
 8005b44:	4918      	ldr	r1, [pc, #96]	; (8005ba8 <cppFlip1ms+0x188>)
 8005b46:	4813      	ldr	r0, [pc, #76]	; (8005b94 <cppFlip1ms+0x174>)
 8005b48:	f7fd fb90 	bl	800326c <_ZN13PathFollowing18getTargetVelocitysERdS0_>


	encoder.clearCnt();
 8005b4c:	480c      	ldr	r0, [pc, #48]	; (8005b80 <cppFlip1ms+0x160>)
 8005b4e:	f7fb fc33 	bl	80013b8 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8005b52:	bf00      	nop
 8005b54:	46bd      	mov	sp, r7
 8005b56:	ecbd 8b04 	vpop	{d8-d9}
 8005b5a:	bd98      	pop	{r3, r4, r7, pc}
 8005b5c:	f3af 8000 	nop.w
 8005b60:	00000000 	.word	0x00000000
 8005b64:	40240000 	.word	0x40240000
 8005b68:	00000000 	.word	0x00000000
 8005b6c:	408f4000 	.word	0x408f4000
 8005b70:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b74:	3f50624d 	.word	0x3f50624d
 8005b78:	20000234 	.word	0x20000234
 8005b7c:	20000550 	.word	0x20000550
 8005b80:	2001f1a8 	.word	0x2001f1a8
 8005b84:	2001f218 	.word	0x2001f218
 8005b88:	2001f1d8 	.word	0x2001f1d8
 8005b8c:	2001f278 	.word	0x2001f278
 8005b90:	20000538 	.word	0x20000538
 8005b94:	2001f2a8 	.word	0x2001f2a8
 8005b98:	2001f2d0 	.word	0x2001f2d0
 8005b9c:	2001f2d8 	.word	0x2001f2d8
 8005ba0:	2001f2e0 	.word	0x2001f2e0
 8005ba4:	2001f2c8 	.word	0x2001f2c8
 8005ba8:	2001f2c0 	.word	0x2001f2c0

08005bac <cppFlip100ns>:

void cppFlip100ns(void)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005bb0:	4802      	ldr	r0, [pc, #8]	; (8005bbc <cppFlip100ns+0x10>)
 8005bb2:	f7fc fb1d 	bl	80021f0 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005bb6:	bf00      	nop
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	20000234 	.word	0x20000234

08005bc0 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005bc4:	4b04      	ldr	r3, [pc, #16]	; (8005bd8 <cppFlip10ms+0x18>)
 8005bc6:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 8005bca:	eeb0 0a67 	vmov.f32	s0, s15
 8005bce:	4803      	ldr	r0, [pc, #12]	; (8005bdc <cppFlip10ms+0x1c>)
 8005bd0:	f7fc ffb8 	bl	8002b44 <_ZN6Logger8storeLogEf>
	//logger.storeDistanceAndTheta(encoder.getDistance(), velocity_ctrl.getCurrentOmega()*DELTA_T);
}
 8005bd4:	bf00      	nop
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000234 	.word	0x20000234
 8005bdc:	20000570 	.word	0x20000570

08005be0 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	4603      	mov	r3, r0
 8005be8:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	4619      	mov	r1, r3
 8005bee:	4803      	ldr	r0, [pc, #12]	; (8005bfc <cppExit+0x1c>)
 8005bf0:	f7fd fc26 	bl	8003440 <_ZN10SideSensor12updateStatusEt>
}
 8005bf4:	bf00      	nop
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	2000052c 	.word	0x2000052c

08005c00 <cppLoop>:

void cppLoop(void)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b089      	sub	sp, #36	; 0x24
 8005c04:	af02      	add	r7, sp, #8
	switch(rotary_switch.getValue()){
 8005c06:	48be      	ldr	r0, [pc, #760]	; (8005f00 <cppLoop+0x300>)
 8005c08:	f7fd fbc0 	bl	800338c <_ZN12RotarySwitch8getValueEv>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b0f      	cmp	r3, #15
 8005c10:	f200 8269 	bhi.w	80060e6 <cppLoop+0x4e6>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <cppLoop+0x1c>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c5d 	.word	0x08005c5d
 8005c20:	08005c7f 	.word	0x08005c7f
 8005c24:	08005d07 	.word	0x08005d07
 8005c28:	08005db3 	.word	0x08005db3
 8005c2c:	08005e6b 	.word	0x08005e6b
 8005c30:	08005f65 	.word	0x08005f65
 8005c34:	0800602f 	.word	0x0800602f
 8005c38:	080060e7 	.word	0x080060e7
 8005c3c:	080060e7 	.word	0x080060e7
 8005c40:	080060e7 	.word	0x080060e7
 8005c44:	080060e7 	.word	0x080060e7
 8005c48:	080060e7 	.word	0x080060e7
 8005c4c:	080060e7 	.word	0x080060e7
 8005c50:	080060e7 	.word	0x080060e7
 8005c54:	080060e7 	.word	0x080060e7
 8005c58:	080060e7 	.word	0x080060e7

	case 0:
		lcd_clear();
 8005c5c:	f7fb fa20 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005c60:	2100      	movs	r1, #0
 8005c62:	2000      	movs	r0, #0
 8005c64:	f7fb fa2c 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 8005c68:	48a6      	ldr	r0, [pc, #664]	; (8005f04 <cppLoop+0x304>)
 8005c6a:	f7fb fa53 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005c6e:	2101      	movs	r1, #1
 8005c70:	2000      	movs	r0, #0
 8005c72:	f7fb fa25 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 8005c76:	48a4      	ldr	r0, [pc, #656]	; (8005f08 <cppLoop+0x308>)
 8005c78:	f7fb fa4c 	bl	8001114 <lcd_printf>
		break;
 8005c7c:	e240      	b.n	8006100 <cppLoop+0x500>

	case 1:
		lcd_clear();
 8005c7e:	f7fb fa0f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005c82:	2100      	movs	r1, #0
 8005c84:	2000      	movs	r0, #0
 8005c86:	f7fb fa1b 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 8005c8a:	48a0      	ldr	r0, [pc, #640]	; (8005f0c <cppLoop+0x30c>)
 8005c8c:	f7fb fa42 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005c90:	2101      	movs	r1, #1
 8005c92:	2000      	movs	r0, #0
 8005c94:	f7fb fa14 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 8005c98:	489d      	ldr	r0, [pc, #628]	; (8005f10 <cppLoop+0x310>)
 8005c9a:	f7fb fa3b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005c9e:	489d      	ldr	r0, [pc, #628]	; (8005f14 <cppLoop+0x314>)
 8005ca0:	f7fc f8d6 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	bf0c      	ite	eq
 8005caa:	2301      	moveq	r3, #1
 8005cac:	2300      	movne	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 821a 	beq.w	80060ea <cppLoop+0x4ea>
			HAL_Delay(500);
 8005cb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cba:	f000 fb3f 	bl	800633c <HAL_Delay>

			logger.start();
 8005cbe:	4896      	ldr	r0, [pc, #600]	; (8005f18 <cppLoop+0x318>)
 8005cc0:	f7fc ffaf 	bl	8002c22 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005cc4:	4895      	ldr	r0, [pc, #596]	; (8005f1c <cppLoop+0x31c>)
 8005cc6:	f7fd fe24 	bl	8003912 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 8005cca:	eddf 0a95 	vldr	s1, [pc, #596]	; 8005f20 <cppLoop+0x320>
 8005cce:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8005f20 <cppLoop+0x320>
 8005cd2:	4892      	ldr	r0, [pc, #584]	; (8005f1c <cppLoop+0x31c>)
 8005cd4:	f7fd fdc4 	bl	8003860 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4891      	ldr	r0, [pc, #580]	; (8005f24 <cppLoop+0x324>)
 8005ce0:	f7fc f9d6 	bl	8002090 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005ce4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005ce8:	f000 fb28 	bl	800633c <HAL_Delay>

			velocity_ctrl.stop();
 8005cec:	488b      	ldr	r0, [pc, #556]	; (8005f1c <cppLoop+0x31c>)
 8005cee:	f7fd fe1f 	bl	8003930 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	488a      	ldr	r0, [pc, #552]	; (8005f24 <cppLoop+0x324>)
 8005cfa:	f7fc f9c9 	bl	8002090 <_ZN3LED2LREaa>

			logger.stop();
 8005cfe:	4886      	ldr	r0, [pc, #536]	; (8005f18 <cppLoop+0x318>)
 8005d00:	f7fc ff9f 	bl	8002c42 <_ZN6Logger4stopEv>
		}

		break;
 8005d04:	e1f1      	b.n	80060ea <cppLoop+0x4ea>

	case 2:
		lcd_clear();
 8005d06:	f7fb f9cb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	f7fb f9d7 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005d12:	4885      	ldr	r0, [pc, #532]	; (8005f28 <cppLoop+0x328>)
 8005d14:	f7fb f9fe 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005d18:	2101      	movs	r1, #1
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f7fb f9d0 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005d20:	4882      	ldr	r0, [pc, #520]	; (8005f2c <cppLoop+0x32c>)
 8005d22:	f7fb f9f7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005d26:	487b      	ldr	r0, [pc, #492]	; (8005f14 <cppLoop+0x314>)
 8005d28:	f7fc f892 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	bf0c      	ite	eq
 8005d32:	2301      	moveq	r3, #1
 8005d34:	2300      	movne	r3, #0
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 81d8 	beq.w	80060ee <cppLoop+0x4ee>
			led.LR(-1, 1);
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f04f 31ff 	mov.w	r1, #4294967295
 8005d44:	4877      	ldr	r0, [pc, #476]	; (8005f24 <cppLoop+0x324>)
 8005d46:	f7fc f9a3 	bl	8002090 <_ZN3LED2LREaa>

			HAL_Delay(1000);
 8005d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d4e:	f000 faf5 	bl	800633c <HAL_Delay>
			float f = 0.123456789123456789123456789;
 8005d52:	4b77      	ldr	r3, [pc, #476]	; (8005f30 <cppLoop+0x330>)
 8005d54:	617b      	str	r3, [r7, #20]
			double d = 0.123456789123456789123456789;
 8005d56:	a468      	add	r4, pc, #416	; (adr r4, 8005ef8 <cppLoop+0x2f8>)
 8005d58:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d5c:	e9c7 3402 	strd	r3, r4, [r7, #8]
			mon_f = f;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fa fc08 	bl	8000578 <__aeabi_f2d>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4a71      	ldr	r2, [pc, #452]	; (8005f34 <cppLoop+0x334>)
 8005d6e:	e9c2 3400 	strd	r3, r4, [r2]
			mon_d = d;
 8005d72:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005d76:	4a70      	ldr	r2, [pc, #448]	; (8005f38 <cppLoop+0x338>)
 8005d78:	e9c2 3400 	strd	r3, r4, [r2]
			sd_write_array_float("type test", "float.txt", 1, &f, OVER_WRITE);
 8005d7c:	f107 0214 	add.w	r2, r7, #20
 8005d80:	2300      	movs	r3, #0
 8005d82:	9300      	str	r3, [sp, #0]
 8005d84:	4613      	mov	r3, r2
 8005d86:	2201      	movs	r2, #1
 8005d88:	496c      	ldr	r1, [pc, #432]	; (8005f3c <cppLoop+0x33c>)
 8005d8a:	486d      	ldr	r0, [pc, #436]	; (8005f40 <cppLoop+0x340>)
 8005d8c:	f7fb fbd0 	bl	8001530 <sd_write_array_float>
			sd_write_array_double("type test", "double.txt", 1, &d, OVER_WRITE);
 8005d90:	f107 0208 	add.w	r2, r7, #8
 8005d94:	2300      	movs	r3, #0
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	4969      	ldr	r1, [pc, #420]	; (8005f44 <cppLoop+0x344>)
 8005d9e:	4868      	ldr	r0, [pc, #416]	; (8005f40 <cppLoop+0x340>)
 8005da0:	f7fb fc2c 	bl	80015fc <sd_write_array_double>

			led.LR(-1, 0);
 8005da4:	2200      	movs	r2, #0
 8005da6:	f04f 31ff 	mov.w	r1, #4294967295
 8005daa:	485e      	ldr	r0, [pc, #376]	; (8005f24 <cppLoop+0x324>)
 8005dac:	f7fc f970 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 8005db0:	e19d      	b.n	80060ee <cppLoop+0x4ee>

	case 3:
		led.fullColor('C');
 8005db2:	2143      	movs	r1, #67	; 0x43
 8005db4:	485b      	ldr	r0, [pc, #364]	; (8005f24 <cppLoop+0x324>)
 8005db6:	f7fc f8af 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005dba:	f7fb f971 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	f7fb f97d 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 8005dc6:	4860      	ldr	r0, [pc, #384]	; (8005f48 <cppLoop+0x348>)
 8005dc8:	f7fb f9a4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005dcc:	2101      	movs	r1, #1
 8005dce:	2000      	movs	r0, #0
 8005dd0:	f7fb f976 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005dd4:	485d      	ldr	r0, [pc, #372]	; (8005f4c <cppLoop+0x34c>)
 8005dd6:	f7fb f99d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005dda:	484e      	ldr	r0, [pc, #312]	; (8005f14 <cppLoop+0x314>)
 8005ddc:	f7fc f838 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	bf0c      	ite	eq
 8005de6:	2301      	moveq	r3, #1
 8005de8:	2300      	movne	r3, #0
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8180 	beq.w	80060f2 <cppLoop+0x4f2>
			led.LR(-1, 1);
 8005df2:	2201      	movs	r2, #1
 8005df4:	f04f 31ff 	mov.w	r1, #4294967295
 8005df8:	484a      	ldr	r0, [pc, #296]	; (8005f24 <cppLoop+0x324>)
 8005dfa:	f7fc f949 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005dfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e02:	f000 fa9b 	bl	800633c <HAL_Delay>

			logger.start();
 8005e06:	4844      	ldr	r0, [pc, #272]	; (8005f18 <cppLoop+0x318>)
 8005e08:	f7fc ff0b 	bl	8002c22 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 8005e0c:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8005f50 <cppLoop+0x350>
 8005e10:	4850      	ldr	r0, [pc, #320]	; (8005f54 <cppLoop+0x354>)
 8005e12:	f7fc fdb2 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005e16:	484f      	ldr	r0, [pc, #316]	; (8005f54 <cppLoop+0x354>)
 8005e18:	f7fc fe06 	bl	8002a28 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 8005e1c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005e20:	f000 fa8c 	bl	800633c <HAL_Delay>

			logger.stop();
 8005e24:	483c      	ldr	r0, [pc, #240]	; (8005f18 <cppLoop+0x318>)
 8005e26:	f7fc ff0c 	bl	8002c42 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 8005e2a:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8005f50 <cppLoop+0x350>
 8005e2e:	4849      	ldr	r0, [pc, #292]	; (8005f54 <cppLoop+0x354>)
 8005e30:	f7fc fda3 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005e34:	4847      	ldr	r0, [pc, #284]	; (8005f54 <cppLoop+0x354>)
 8005e36:	f7fc fe07 	bl	8002a48 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	2101      	movs	r1, #1
 8005e40:	4838      	ldr	r0, [pc, #224]	; (8005f24 <cppLoop+0x324>)
 8005e42:	f7fc f925 	bl	8002090 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005e46:	4a44      	ldr	r2, [pc, #272]	; (8005f58 <cppLoop+0x358>)
 8005e48:	4944      	ldr	r1, [pc, #272]	; (8005f5c <cppLoop+0x35c>)
 8005e4a:	4833      	ldr	r0, [pc, #204]	; (8005f18 <cppLoop+0x318>)
 8005e4c:	f7fc feb2 	bl	8002bb4 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005e50:	f04f 32ff 	mov.w	r2, #4294967295
 8005e54:	2100      	movs	r1, #0
 8005e56:	4833      	ldr	r0, [pc, #204]	; (8005f24 <cppLoop+0x324>)
 8005e58:	f7fc f91a 	bl	8002090 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8005e62:	4830      	ldr	r0, [pc, #192]	; (8005f24 <cppLoop+0x324>)
 8005e64:	f7fc f914 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 8005e68:	e143      	b.n	80060f2 <cppLoop+0x4f2>

	case 4:
		led.fullColor('M');
 8005e6a:	214d      	movs	r1, #77	; 0x4d
 8005e6c:	482d      	ldr	r0, [pc, #180]	; (8005f24 <cppLoop+0x324>)
 8005e6e:	f7fc f853 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005e72:	f7fb f915 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005e76:	2100      	movs	r1, #0
 8005e78:	2000      	movs	r0, #0
 8005e7a:	f7fb f921 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 8005e7e:	4838      	ldr	r0, [pc, #224]	; (8005f60 <cppLoop+0x360>)
 8005e80:	f7fb f948 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005e84:	2101      	movs	r1, #1
 8005e86:	2000      	movs	r0, #0
 8005e88:	f7fb f91a 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8005e8c:	482f      	ldr	r0, [pc, #188]	; (8005f4c <cppLoop+0x34c>)
 8005e8e:	f7fb f941 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005e92:	4820      	ldr	r0, [pc, #128]	; (8005f14 <cppLoop+0x314>)
 8005e94:	f7fb ffdc 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2301      	moveq	r3, #1
 8005ea0:	2300      	movne	r3, #0
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 8126 	beq.w	80060f6 <cppLoop+0x4f6>
			led.LR(-1, 1);
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f04f 31ff 	mov.w	r1, #4294967295
 8005eb0:	481c      	ldr	r0, [pc, #112]	; (8005f24 <cppLoop+0x324>)
 8005eb2:	f7fc f8ed 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005eb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005eba:	f000 fa3f 	bl	800633c <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 8005ebe:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8005f50 <cppLoop+0x350>
 8005ec2:	4824      	ldr	r0, [pc, #144]	; (8005f54 <cppLoop+0x354>)
 8005ec4:	f7fc fd68 	bl	8002998 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 8005ec8:	4814      	ldr	r0, [pc, #80]	; (8005f1c <cppLoop+0x31c>)
 8005eca:	f7fd fd22 	bl	8003912 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 8005ece:	4821      	ldr	r0, [pc, #132]	; (8005f54 <cppLoop+0x354>)
 8005ed0:	f7fc fdaa 	bl	8002a28 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 8005ed4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005ed8:	f000 fa30 	bl	800633c <HAL_Delay>

			line_trace.stop();
 8005edc:	481d      	ldr	r0, [pc, #116]	; (8005f54 <cppLoop+0x354>)
 8005ede:	f7fc fdb3 	bl	8002a48 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 8005ee2:	480e      	ldr	r0, [pc, #56]	; (8005f1c <cppLoop+0x31c>)
 8005ee4:	f7fd fd24 	bl	8003930 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f04f 31ff 	mov.w	r1, #4294967295
 8005eee:	480d      	ldr	r0, [pc, #52]	; (8005f24 <cppLoop+0x324>)
 8005ef0:	f7fc f8ce 	bl	8002090 <_ZN3LED2LREaa>
		}
		break;
 8005ef4:	e0ff      	b.n	80060f6 <cppLoop+0x4f6>
 8005ef6:	bf00      	nop
 8005ef8:	37c1215e 	.word	0x37c1215e
 8005efc:	3fbf9add 	.word	0x3fbf9add
 8005f00:	20000534 	.word	0x20000534
 8005f04:	08017abc 	.word	0x08017abc
 8005f08:	08017ac0 	.word	0x08017ac0
 8005f0c:	08017ac8 	.word	0x08017ac8
 8005f10:	08017ad4 	.word	0x08017ad4
 8005f14:	20000530 	.word	0x20000530
 8005f18:	20000570 	.word	0x20000570
 8005f1c:	2001f1d8 	.word	0x2001f1d8
 8005f20:	00000000 	.word	0x00000000
 8005f24:	2000053c 	.word	0x2000053c
 8005f28:	08017adc 	.word	0x08017adc
 8005f2c:	08017ae0 	.word	0x08017ae0
 8005f30:	3dfcd6ea 	.word	0x3dfcd6ea
 8005f34:	2001f2b0 	.word	0x2001f2b0
 8005f38:	2001f2b8 	.word	0x2001f2b8
 8005f3c:	08017ae8 	.word	0x08017ae8
 8005f40:	08017af4 	.word	0x08017af4
 8005f44:	08017b00 	.word	0x08017b00
 8005f48:	08017b0c 	.word	0x08017b0c
 8005f4c:	08017b14 	.word	0x08017b14
 8005f50:	3dcccccd 	.word	0x3dcccccd
 8005f54:	2001f218 	.word	0x2001f218
 8005f58:	08017b1c 	.word	0x08017b1c
 8005f5c:	08017b28 	.word	0x08017b28
 8005f60:	08017b38 	.word	0x08017b38

	case 5:
		led.fullColor('Y');
 8005f64:	2159      	movs	r1, #89	; 0x59
 8005f66:	486a      	ldr	r0, [pc, #424]	; (8006110 <cppLoop+0x510>)
 8005f68:	f7fb ffd6 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005f6c:	f7fb f898 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005f70:	2100      	movs	r1, #0
 8005f72:	2000      	movs	r0, #0
 8005f74:	f7fb f8a4 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8005f78:	4866      	ldr	r0, [pc, #408]	; (8006114 <cppLoop+0x514>)
 8005f7a:	f7fb f8cb 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005f7e:	2101      	movs	r1, #1
 8005f80:	2000      	movs	r0, #0
 8005f82:	f7fb f89d 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8005f86:	4864      	ldr	r0, [pc, #400]	; (8006118 <cppLoop+0x518>)
 8005f88:	f7fb f8c4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005f8c:	4863      	ldr	r0, [pc, #396]	; (800611c <cppLoop+0x51c>)
 8005f8e:	f7fb ff5f 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	bf0c      	ite	eq
 8005f98:	2301      	moveq	r3, #1
 8005f9a:	2300      	movne	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 80ab 	beq.w	80060fa <cppLoop+0x4fa>
			led.LR(-1, 1);
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8005faa:	4859      	ldr	r0, [pc, #356]	; (8006110 <cppLoop+0x510>)
 8005fac:	f7fc f870 	bl	8002090 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8005fb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fb4:	f000 f9c2 	bl	800633c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8005fb8:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8006120 <cppLoop+0x520>
 8005fbc:	4859      	ldr	r0, [pc, #356]	; (8006124 <cppLoop+0x524>)
 8005fbe:	f7fc fcdc 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005fc2:	4858      	ldr	r0, [pc, #352]	; (8006124 <cppLoop+0x524>)
 8005fc4:	f7fc fd30 	bl	8002a28 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8005fc8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005fcc:	f000 f9b6 	bl	800633c <HAL_Delay>

			led.fullColor('R');
 8005fd0:	2152      	movs	r1, #82	; 0x52
 8005fd2:	484f      	ldr	r0, [pc, #316]	; (8006110 <cppLoop+0x510>)
 8005fd4:	f7fb ffa0 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 8005fd8:	4853      	ldr	r0, [pc, #332]	; (8006128 <cppLoop+0x528>)
 8005fda:	f7fb fa17 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 8005fde:	4852      	ldr	r0, [pc, #328]	; (8006128 <cppLoop+0x528>)
 8005fe0:	f7fb f9da 	bl	8001398 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 8005fe4:	f242 7010 	movw	r0, #10000	; 0x2710
 8005fe8:	f000 f9a8 	bl	800633c <HAL_Delay>

			line_trace.stop();
 8005fec:	484d      	ldr	r0, [pc, #308]	; (8006124 <cppLoop+0x524>)
 8005fee:	f7fc fd2b 	bl	8002a48 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8005ff2:	494e      	ldr	r1, [pc, #312]	; (800612c <cppLoop+0x52c>)
 8005ff4:	484e      	ldr	r0, [pc, #312]	; (8006130 <cppLoop+0x530>)
 8005ff6:	f7fb fa27 	bl	8001448 <user_fopen>
			float d = encoder.getDistance();
 8005ffa:	484b      	ldr	r0, [pc, #300]	; (8006128 <cppLoop+0x528>)
 8005ffc:	f7fb f9bb 	bl	8001376 <_ZN7Encoder11getDistanceEv>
 8006000:	ec54 3b10 	vmov	r3, r4, d0
 8006004:	4618      	mov	r0, r3
 8006006:	4621      	mov	r1, r4
 8006008:	f7fa fe06 	bl	8000c18 <__aeabi_d2f>
 800600c:	4603      	mov	r3, r0
 800600e:	607b      	str	r3, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 8006010:	1d3b      	adds	r3, r7, #4
 8006012:	2201      	movs	r2, #1
 8006014:	4619      	mov	r1, r3
 8006016:	2001      	movs	r0, #1
 8006018:	f7fb fa38 	bl	800148c <sd_write>
			user_fclose();
 800601c:	f7fb fa26 	bl	800146c <user_fclose>

			led.LR(-1, 0);
 8006020:	2200      	movs	r2, #0
 8006022:	f04f 31ff 	mov.w	r1, #4294967295
 8006026:	483a      	ldr	r0, [pc, #232]	; (8006110 <cppLoop+0x510>)
 8006028:	f7fc f832 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 800602c:	e065      	b.n	80060fa <cppLoop+0x4fa>

	case 6:
		led.fullColor('C');
 800602e:	2143      	movs	r1, #67	; 0x43
 8006030:	4837      	ldr	r0, [pc, #220]	; (8006110 <cppLoop+0x510>)
 8006032:	f7fb ff71 	bl	8001f18 <_ZN3LED9fullColorEc>

		lcd_clear();
 8006036:	f7fb f833 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800603a:	2100      	movs	r1, #0
 800603c:	2000      	movs	r0, #0
 800603e:	f7fb f83f 	bl	80010c0 <lcd_locate>
		lcd_printf("Position");
 8006042:	483c      	ldr	r0, [pc, #240]	; (8006134 <cppLoop+0x534>)
 8006044:	f7fb f866 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8006048:	2101      	movs	r1, #1
 800604a:	2000      	movs	r0, #0
 800604c:	f7fb f838 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8006050:	4839      	ldr	r0, [pc, #228]	; (8006138 <cppLoop+0x538>)
 8006052:	f7fb f85f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8006056:	4831      	ldr	r0, [pc, #196]	; (800611c <cppLoop+0x51c>)
 8006058:	f7fb fefa 	bl	8001e50 <_ZN8JoyStick8getValueEv>
 800605c:	4603      	mov	r3, r0
 800605e:	2b02      	cmp	r3, #2
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	d048      	beq.n	80060fe <cppLoop+0x4fe>
			HAL_Delay(500);
 800606c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006070:	f000 f964 	bl	800633c <HAL_Delay>
			led.LR(-1, 1);
 8006074:	2201      	movs	r2, #1
 8006076:	f04f 31ff 	mov.w	r1, #4294967295
 800607a:	4825      	ldr	r0, [pc, #148]	; (8006110 <cppLoop+0x510>)
 800607c:	f7fc f808 	bl	8002090 <_ZN3LED2LREaa>

			line_trace.setNormalRatio(0.1);
 8006080:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800613c <cppLoop+0x53c>
 8006084:	4827      	ldr	r0, [pc, #156]	; (8006124 <cppLoop+0x524>)
 8006086:	f7fc fc78 	bl	800297a <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800608a:	4826      	ldr	r0, [pc, #152]	; (8006124 <cppLoop+0x524>)
 800608c:	f7fc fccc 	bl	8002a28 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8006090:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006094:	f000 f952 	bl	800633c <HAL_Delay>

			led.fullColor('R');
 8006098:	2152      	movs	r1, #82	; 0x52
 800609a:	481d      	ldr	r0, [pc, #116]	; (8006110 <cppLoop+0x510>)
 800609c:	f7fb ff3c 	bl	8001f18 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80060a0:	4821      	ldr	r0, [pc, #132]	; (8006128 <cppLoop+0x528>)
 80060a2:	f7fb f9b3 	bl	800140c <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80060a6:	4820      	ldr	r0, [pc, #128]	; (8006128 <cppLoop+0x528>)
 80060a8:	f7fb f976 	bl	8001398 <_ZN7Encoder13clearDistanceEv>
			odometry.clearPotition();
 80060ac:	4824      	ldr	r0, [pc, #144]	; (8006140 <cppLoop+0x540>)
 80060ae:	f7fc fff7 	bl	80030a0 <_ZN8Odometry13clearPotitionEv>
			logger.start();
 80060b2:	4824      	ldr	r0, [pc, #144]	; (8006144 <cppLoop+0x544>)
 80060b4:	f7fc fdb5 	bl	8002c22 <_ZN6Logger5startEv>

			HAL_Delay(10000);
 80060b8:	f242 7010 	movw	r0, #10000	; 0x2710
 80060bc:	f000 f93e 	bl	800633c <HAL_Delay>

			line_trace.stop();
 80060c0:	4818      	ldr	r0, [pc, #96]	; (8006124 <cppLoop+0x524>)
 80060c2:	f7fc fcc1 	bl	8002a48 <_ZN9LineTrace4stopEv>
			logger.stop();
 80060c6:	481f      	ldr	r0, [pc, #124]	; (8006144 <cppLoop+0x544>)
 80060c8:	f7fc fdbb 	bl	8002c42 <_ZN6Logger4stopEv>

			logger.saveDistanceAndTheta("Position", "delta_distance.txt", "delta_theta.txt");
 80060cc:	4b1e      	ldr	r3, [pc, #120]	; (8006148 <cppLoop+0x548>)
 80060ce:	4a1f      	ldr	r2, [pc, #124]	; (800614c <cppLoop+0x54c>)
 80060d0:	4918      	ldr	r1, [pc, #96]	; (8006134 <cppLoop+0x534>)
 80060d2:	481c      	ldr	r0, [pc, #112]	; (8006144 <cppLoop+0x544>)
 80060d4:	f7fc fd82 	bl	8002bdc <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>

			led.LR(-1, 0);
 80060d8:	2200      	movs	r2, #0
 80060da:	f04f 31ff 	mov.w	r1, #4294967295
 80060de:	480c      	ldr	r0, [pc, #48]	; (8006110 <cppLoop+0x510>)
 80060e0:	f7fb ffd6 	bl	8002090 <_ZN3LED2LREaa>
		}

		break;
 80060e4:	e00b      	b.n	80060fe <cppLoop+0x4fe>
	case 15:

		break;

	default:
		break;
 80060e6:	bf00      	nop
 80060e8:	e00a      	b.n	8006100 <cppLoop+0x500>
		break;
 80060ea:	bf00      	nop
 80060ec:	e008      	b.n	8006100 <cppLoop+0x500>
		break;
 80060ee:	bf00      	nop
 80060f0:	e006      	b.n	8006100 <cppLoop+0x500>
		break;
 80060f2:	bf00      	nop
 80060f4:	e004      	b.n	8006100 <cppLoop+0x500>
		break;
 80060f6:	bf00      	nop
 80060f8:	e002      	b.n	8006100 <cppLoop+0x500>
		break;
 80060fa:	bf00      	nop
 80060fc:	e000      	b.n	8006100 <cppLoop+0x500>
		break;
 80060fe:	bf00      	nop

	}

	HAL_Delay(10);
 8006100:	200a      	movs	r0, #10
 8006102:	f000 f91b 	bl	800633c <HAL_Delay>

}
 8006106:	bf00      	nop
 8006108:	371c      	adds	r7, #28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd90      	pop	{r4, r7, pc}
 800610e:	bf00      	nop
 8006110:	2000053c 	.word	0x2000053c
 8006114:	08017b44 	.word	0x08017b44
 8006118:	08017b4c 	.word	0x08017b4c
 800611c:	20000530 	.word	0x20000530
 8006120:	00000000 	.word	0x00000000
 8006124:	2001f218 	.word	0x2001f218
 8006128:	2001f1a8 	.word	0x2001f1a8
 800612c:	08017b58 	.word	0x08017b58
 8006130:	08017b60 	.word	0x08017b60
 8006134:	08017b6c 	.word	0x08017b6c
 8006138:	08017b78 	.word	0x08017b78
 800613c:	3dcccccd 	.word	0x3dcccccd
 8006140:	2001f278 	.word	0x2001f278
 8006144:	20000570 	.word	0x20000570
 8006148:	08017b80 	.word	0x08017b80
 800614c:	08017b90 	.word	0x08017b90

08006150 <_Z41__static_initialization_and_destruction_0ii>:
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d12e      	bne.n	80061be <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006166:	4293      	cmp	r3, r2
 8006168:	d129      	bne.n	80061be <_Z41__static_initialization_and_destruction_0ii+0x6e>
LineSensor line_sensor;
 800616a:	4817      	ldr	r0, [pc, #92]	; (80061c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800616c:	f7fb ffc8 	bl	8002100 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8006170:	4816      	ldr	r0, [pc, #88]	; (80061cc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8006172:	f7fd f959 	bl	8003428 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8006176:	4816      	ldr	r0, [pc, #88]	; (80061d0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006178:	f7fb fe5e 	bl	8001e38 <_ZN8JoyStickC1Ev>
Motor motor;
 800617c:	4815      	ldr	r0, [pc, #84]	; (80061d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800617e:	f7fc fd70 	bl	8002c62 <_ZN5MotorC1Ev>
IMU imu;
 8006182:	4815      	ldr	r0, [pc, #84]	; (80061d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006184:	f7fb fc9e 	bl	8001ac4 <_ZN3IMUC1Ev>
Logger logger;
 8006188:	4814      	ldr	r0, [pc, #80]	; (80061dc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 800618a:	f7fc fc75 	bl	8002a78 <_ZN6LoggerC1Ev>
Encoder encoder;
 800618e:	4814      	ldr	r0, [pc, #80]	; (80061e0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006190:	f7fa ffe0 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8006194:	4b10      	ldr	r3, [pc, #64]	; (80061d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006196:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8006198:	490e      	ldr	r1, [pc, #56]	; (80061d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800619a:	4812      	ldr	r0, [pc, #72]	; (80061e4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800619c:	f7fd f9ae 	bl	80034fc <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80061a0:	4b10      	ldr	r3, [pc, #64]	; (80061e4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80061a2:	4a09      	ldr	r2, [pc, #36]	; (80061c8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80061a4:	490b      	ldr	r1, [pc, #44]	; (80061d4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80061a6:	4810      	ldr	r0, [pc, #64]	; (80061e8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80061a8:	f7fc faa4 	bl	80026f4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80061ae:	4a0a      	ldr	r2, [pc, #40]	; (80061d8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80061b0:	490b      	ldr	r1, [pc, #44]	; (80061e0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80061b2:	480e      	ldr	r0, [pc, #56]	; (80061ec <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80061b4:	f7fc fe3a 	bl	8002e2c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
PathFollowing path_following;
 80061b8:	480d      	ldr	r0, [pc, #52]	; (80061f0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80061ba:	f7fc ff8f 	bl	80030dc <_ZN13PathFollowingC1Ev>
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000234 	.word	0x20000234
 80061cc:	2000052c 	.word	0x2000052c
 80061d0:	20000530 	.word	0x20000530
 80061d4:	20000538 	.word	0x20000538
 80061d8:	20000550 	.word	0x20000550
 80061dc:	20000570 	.word	0x20000570
 80061e0:	2001f1a8 	.word	0x2001f1a8
 80061e4:	2001f1d8 	.word	0x2001f1d8
 80061e8:	2001f218 	.word	0x2001f218
 80061ec:	2001f278 	.word	0x2001f278
 80061f0:	2001f2a8 	.word	0x2001f2a8

080061f4 <_GLOBAL__sub_I_line_sensor>:
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80061fc:	2001      	movs	r0, #1
 80061fe:	f7ff ffa7 	bl	8006150 <_Z41__static_initialization_and_destruction_0ii>
 8006202:	bd80      	pop	{r7, pc}

08006204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800623c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800620a:	e003      	b.n	8006214 <LoopCopyDataInit>

0800620c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800620c:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800620e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006212:	3104      	adds	r1, #4

08006214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006214:	480b      	ldr	r0, [pc, #44]	; (8006244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006216:	4b0c      	ldr	r3, [pc, #48]	; (8006248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800621a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800621c:	d3f6      	bcc.n	800620c <CopyDataInit>
  ldr  r2, =_sbss
 800621e:	4a0b      	ldr	r2, [pc, #44]	; (800624c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006220:	e002      	b.n	8006228 <LoopFillZerobss>

08006222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006224:	f842 3b04 	str.w	r3, [r2], #4

08006228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006228:	4b09      	ldr	r3, [pc, #36]	; (8006250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800622a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800622c:	d3f9      	bcc.n	8006222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800622e:	f7ff fb1f 	bl	8005870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006232:	f00c fc8d 	bl	8012b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006236:	f7fd fc57 	bl	8003ae8 <main>
  bx  lr    
 800623a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800623c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8006240:	080185a0 	.word	0x080185a0
  ldr  r0, =_sdata
 8006244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006248:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800624c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8006250:	20023ecc 	.word	0x20023ecc

08006254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006254:	e7fe      	b.n	8006254 <ADC_IRQHandler>
	...

08006258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800625c:	4b0e      	ldr	r3, [pc, #56]	; (8006298 <HAL_Init+0x40>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <HAL_Init+0x40>)
 8006262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006268:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <HAL_Init+0x40>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a0a      	ldr	r2, [pc, #40]	; (8006298 <HAL_Init+0x40>)
 800626e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006274:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_Init+0x40>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a07      	ldr	r2, [pc, #28]	; (8006298 <HAL_Init+0x40>)
 800627a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800627e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006280:	2003      	movs	r0, #3
 8006282:	f000 fd51 	bl	8006d28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006286:	2000      	movs	r0, #0
 8006288:	f000 f808 	bl	800629c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800628c:	f7fe fcde 	bl	8004c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40023c00 	.word	0x40023c00

0800629c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062a4:	4b12      	ldr	r3, [pc, #72]	; (80062f0 <HAL_InitTick+0x54>)
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	4b12      	ldr	r3, [pc, #72]	; (80062f4 <HAL_InitTick+0x58>)
 80062aa:	781b      	ldrb	r3, [r3, #0]
 80062ac:	4619      	mov	r1, r3
 80062ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fd69 	bl	8006d92 <HAL_SYSTICK_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d001      	beq.n	80062ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e00e      	b.n	80062e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2b0f      	cmp	r3, #15
 80062ce:	d80a      	bhi.n	80062e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062d0:	2200      	movs	r2, #0
 80062d2:	6879      	ldr	r1, [r7, #4]
 80062d4:	f04f 30ff 	mov.w	r0, #4294967295
 80062d8:	f000 fd31 	bl	8006d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062dc:	4a06      	ldr	r2, [pc, #24]	; (80062f8 <HAL_InitTick+0x5c>)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	e000      	b.n	80062e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	20000000 	.word	0x20000000
 80062f4:	20000008 	.word	0x20000008
 80062f8:	20000004 	.word	0x20000004

080062fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006300:	4b06      	ldr	r3, [pc, #24]	; (800631c <HAL_IncTick+0x20>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	4b06      	ldr	r3, [pc, #24]	; (8006320 <HAL_IncTick+0x24>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4413      	add	r3, r2
 800630c:	4a04      	ldr	r2, [pc, #16]	; (8006320 <HAL_IncTick+0x24>)
 800630e:	6013      	str	r3, [r2, #0]
}
 8006310:	bf00      	nop
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000008 	.word	0x20000008
 8006320:	20021e50 	.word	0x20021e50

08006324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  return uwTick;
 8006328:	4b03      	ldr	r3, [pc, #12]	; (8006338 <HAL_GetTick+0x14>)
 800632a:	681b      	ldr	r3, [r3, #0]
}
 800632c:	4618      	mov	r0, r3
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	20021e50 	.word	0x20021e50

0800633c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006344:	f7ff ffee 	bl	8006324 <HAL_GetTick>
 8006348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d005      	beq.n	8006362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006356:	4b09      	ldr	r3, [pc, #36]	; (800637c <HAL_Delay+0x40>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006362:	bf00      	nop
 8006364:	f7ff ffde 	bl	8006324 <HAL_GetTick>
 8006368:	4602      	mov	r2, r0
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	429a      	cmp	r2, r3
 8006372:	d8f7      	bhi.n	8006364 <HAL_Delay+0x28>
  {
  }
}
 8006374:	bf00      	nop
 8006376:	3710      	adds	r7, #16
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}
 800637c:	20000008 	.word	0x20000008

08006380 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006388:	2300      	movs	r3, #0
 800638a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d101      	bne.n	8006396 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e033      	b.n	80063fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d109      	bne.n	80063b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7fe fc7c 	bl	8004c9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d118      	bne.n	80063f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80063c6:	f023 0302 	bic.w	r3, r3, #2
 80063ca:	f043 0202 	orr.w	r2, r3, #2
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa5a 	bl	800688c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f023 0303 	bic.w	r3, r3, #3
 80063e6:	f043 0201 	orr.w	r2, r3, #1
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
 80063ee:	e001      	b.n	80063f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
	...

08006408 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800641e:	2b01      	cmp	r3, #1
 8006420:	d101      	bne.n	8006426 <HAL_ADC_Start_DMA+0x1e>
 8006422:	2302      	movs	r3, #2
 8006424:	e0cc      	b.n	80065c0 <HAL_ADC_Start_DMA+0x1b8>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2201      	movs	r2, #1
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b01      	cmp	r3, #1
 800643a:	d018      	beq.n	800646e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f042 0201 	orr.w	r2, r2, #1
 800644a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800644c:	4b5e      	ldr	r3, [pc, #376]	; (80065c8 <HAL_ADC_Start_DMA+0x1c0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a5e      	ldr	r2, [pc, #376]	; (80065cc <HAL_ADC_Start_DMA+0x1c4>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	0c9a      	lsrs	r2, r3, #18
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006460:	e002      	b.n	8006468 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	3b01      	subs	r3, #1
 8006466:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f9      	bne.n	8006462 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	2b01      	cmp	r3, #1
 800647a:	f040 80a0 	bne.w	80065be <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006482:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006486:	f023 0301 	bic.w	r3, r3, #1
 800648a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80064a8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d106      	bne.n	80064cc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c2:	f023 0206 	bic.w	r2, r3, #6
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	645a      	str	r2, [r3, #68]	; 0x44
 80064ca:	e002      	b.n	80064d2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80064da:	4b3d      	ldr	r3, [pc, #244]	; (80065d0 <HAL_ADC_Start_DMA+0x1c8>)
 80064dc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e2:	4a3c      	ldr	r2, [pc, #240]	; (80065d4 <HAL_ADC_Start_DMA+0x1cc>)
 80064e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ea:	4a3b      	ldr	r2, [pc, #236]	; (80065d8 <HAL_ADC_Start_DMA+0x1d0>)
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f2:	4a3a      	ldr	r2, [pc, #232]	; (80065dc <HAL_ADC_Start_DMA+0x1d4>)
 80064f4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80064fe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800650e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800651e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	334c      	adds	r3, #76	; 0x4c
 800652a:	4619      	mov	r1, r3
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f000 fcea 	bl	8006f08 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2b00      	cmp	r3, #0
 800653e:	d12a      	bne.n	8006596 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a26      	ldr	r2, [pc, #152]	; (80065e0 <HAL_ADC_Start_DMA+0x1d8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d015      	beq.n	8006576 <HAL_ADC_Start_DMA+0x16e>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <HAL_ADC_Start_DMA+0x1dc>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d105      	bne.n	8006560 <HAL_ADC_Start_DMA+0x158>
 8006554:	4b1e      	ldr	r3, [pc, #120]	; (80065d0 <HAL_ADC_Start_DMA+0x1c8>)
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 031f 	and.w	r3, r3, #31
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00a      	beq.n	8006576 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a20      	ldr	r2, [pc, #128]	; (80065e8 <HAL_ADC_Start_DMA+0x1e0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d129      	bne.n	80065be <HAL_ADC_Start_DMA+0x1b6>
 800656a:	4b19      	ldr	r3, [pc, #100]	; (80065d0 <HAL_ADC_Start_DMA+0x1c8>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d823      	bhi.n	80065be <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d11c      	bne.n	80065be <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689a      	ldr	r2, [r3, #8]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	e013      	b.n	80065be <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a11      	ldr	r2, [pc, #68]	; (80065e0 <HAL_ADC_Start_DMA+0x1d8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10e      	bne.n	80065be <HAL_ADC_Start_DMA+0x1b6>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d107      	bne.n	80065be <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80065bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3718      	adds	r7, #24
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	20000000 	.word	0x20000000
 80065cc:	431bde83 	.word	0x431bde83
 80065d0:	40012300 	.word	0x40012300
 80065d4:	08006a85 	.word	0x08006a85
 80065d8:	08006b3f 	.word	0x08006b3f
 80065dc:	08006b5b 	.word	0x08006b5b
 80065e0:	40012000 	.word	0x40012000
 80065e4:	40012100 	.word	0x40012100
 80065e8:	40012200 	.word	0x40012200

080065ec <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_ADC_ConfigChannel+0x1c>
 8006640:	2302      	movs	r3, #2
 8006642:	e113      	b.n	800686c <HAL_ADC_ConfigChannel+0x244>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b09      	cmp	r3, #9
 8006652:	d925      	bls.n	80066a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68d9      	ldr	r1, [r3, #12]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	b29b      	uxth	r3, r3
 8006660:	461a      	mov	r2, r3
 8006662:	4613      	mov	r3, r2
 8006664:	005b      	lsls	r3, r3, #1
 8006666:	4413      	add	r3, r2
 8006668:	3b1e      	subs	r3, #30
 800666a:	2207      	movs	r2, #7
 800666c:	fa02 f303 	lsl.w	r3, r2, r3
 8006670:	43da      	mvns	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	400a      	ands	r2, r1
 8006678:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68d9      	ldr	r1, [r3, #12]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	b29b      	uxth	r3, r3
 800668a:	4618      	mov	r0, r3
 800668c:	4603      	mov	r3, r0
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	4403      	add	r3, r0
 8006692:	3b1e      	subs	r3, #30
 8006694:	409a      	lsls	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	e022      	b.n	80066e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6919      	ldr	r1, [r3, #16]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	4613      	mov	r3, r2
 80066b0:	005b      	lsls	r3, r3, #1
 80066b2:	4413      	add	r3, r2
 80066b4:	2207      	movs	r2, #7
 80066b6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ba:	43da      	mvns	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	400a      	ands	r2, r1
 80066c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6919      	ldr	r1, [r3, #16]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689a      	ldr	r2, [r3, #8]
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	4618      	mov	r0, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	4403      	add	r3, r0
 80066dc:	409a      	lsls	r2, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	2b06      	cmp	r3, #6
 80066ec:	d824      	bhi.n	8006738 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	3b05      	subs	r3, #5
 8006700:	221f      	movs	r2, #31
 8006702:	fa02 f303 	lsl.w	r3, r2, r3
 8006706:	43da      	mvns	r2, r3
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	400a      	ands	r2, r1
 800670e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	b29b      	uxth	r3, r3
 800671c:	4618      	mov	r0, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	3b05      	subs	r3, #5
 800672a:	fa00 f203 	lsl.w	r2, r0, r3
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	635a      	str	r2, [r3, #52]	; 0x34
 8006736:	e04c      	b.n	80067d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b0c      	cmp	r3, #12
 800673e:	d824      	bhi.n	800678a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	3b23      	subs	r3, #35	; 0x23
 8006752:	221f      	movs	r2, #31
 8006754:	fa02 f303 	lsl.w	r3, r2, r3
 8006758:	43da      	mvns	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	400a      	ands	r2, r1
 8006760:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	b29b      	uxth	r3, r3
 800676e:	4618      	mov	r0, r3
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685a      	ldr	r2, [r3, #4]
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	3b23      	subs	r3, #35	; 0x23
 800677c:	fa00 f203 	lsl.w	r2, r0, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	631a      	str	r2, [r3, #48]	; 0x30
 8006788:	e023      	b.n	80067d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	4613      	mov	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	4413      	add	r3, r2
 800679a:	3b41      	subs	r3, #65	; 0x41
 800679c:	221f      	movs	r2, #31
 800679e:	fa02 f303 	lsl.w	r3, r2, r3
 80067a2:	43da      	mvns	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	400a      	ands	r2, r1
 80067aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	4618      	mov	r0, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	4613      	mov	r3, r2
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	4413      	add	r3, r2
 80067c4:	3b41      	subs	r3, #65	; 0x41
 80067c6:	fa00 f203 	lsl.w	r2, r0, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80067d2:	4b29      	ldr	r3, [pc, #164]	; (8006878 <HAL_ADC_ConfigChannel+0x250>)
 80067d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a28      	ldr	r2, [pc, #160]	; (800687c <HAL_ADC_ConfigChannel+0x254>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d10f      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x1d8>
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b12      	cmp	r3, #18
 80067e6:	d10b      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a1d      	ldr	r2, [pc, #116]	; (800687c <HAL_ADC_ConfigChannel+0x254>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d12b      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x23a>
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a1c      	ldr	r2, [pc, #112]	; (8006880 <HAL_ADC_ConfigChannel+0x258>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <HAL_ADC_ConfigChannel+0x1f4>
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	2b11      	cmp	r3, #17
 800681a:	d122      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a11      	ldr	r2, [pc, #68]	; (8006880 <HAL_ADC_ConfigChannel+0x258>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d111      	bne.n	8006862 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800683e:	4b11      	ldr	r3, [pc, #68]	; (8006884 <HAL_ADC_ConfigChannel+0x25c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a11      	ldr	r2, [pc, #68]	; (8006888 <HAL_ADC_ConfigChannel+0x260>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	0c9a      	lsrs	r2, r3, #18
 800684a:	4613      	mov	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4413      	add	r3, r2
 8006850:	005b      	lsls	r3, r3, #1
 8006852:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006854:	e002      	b.n	800685c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	3b01      	subs	r3, #1
 800685a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f9      	bne.n	8006856 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2200      	movs	r2, #0
 8006866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3714      	adds	r7, #20
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	40012300 	.word	0x40012300
 800687c:	40012000 	.word	0x40012000
 8006880:	10000012 	.word	0x10000012
 8006884:	20000000 	.word	0x20000000
 8006888:	431bde83 	.word	0x431bde83

0800688c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006894:	4b79      	ldr	r3, [pc, #484]	; (8006a7c <ADC_Init+0x1f0>)
 8006896:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	6859      	ldr	r1, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	021a      	lsls	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	430a      	orrs	r2, r1
 80068d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80068e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	6859      	ldr	r1, [r3, #4]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	430a      	orrs	r2, r1
 80068f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006906:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6899      	ldr	r1, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68da      	ldr	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	430a      	orrs	r2, r1
 8006918:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	4a58      	ldr	r2, [pc, #352]	; (8006a80 <ADC_Init+0x1f4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d022      	beq.n	800696a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	689a      	ldr	r2, [r3, #8]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006932:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6899      	ldr	r1, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006954:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6899      	ldr	r1, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	609a      	str	r2, [r3, #8]
 8006968:	e00f      	b.n	800698a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006978:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006988:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0202 	bic.w	r2, r2, #2
 8006998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6899      	ldr	r1, [r3, #8]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	7e1b      	ldrb	r3, [r3, #24]
 80069a4:	005a      	lsls	r2, r3, #1
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80069d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6859      	ldr	r1, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	3b01      	subs	r3, #1
 80069e4:	035a      	lsls	r2, r3, #13
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	605a      	str	r2, [r3, #4]
 80069ee:	e007      	b.n	8006a00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80069fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	051a      	lsls	r2, r3, #20
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006a34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6899      	ldr	r1, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a42:	025a      	lsls	r2, r3, #9
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	029a      	lsls	r2, r3, #10
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	430a      	orrs	r2, r1
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	40012300 	.word	0x40012300
 8006a80:	0f000001 	.word	0x0f000001

08006a84 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a96:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d13c      	bne.n	8006b18 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d12b      	bne.n	8006b10 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d127      	bne.n	8006b10 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d006      	beq.n	8006adc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d119      	bne.n	8006b10 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0220 	bic.w	r2, r2, #32
 8006aea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d105      	bne.n	8006b10 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f043 0201 	orr.w	r2, r3, #1
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff fd6b 	bl	80065ec <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b16:	e00e      	b.n	8006b36 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	f003 0310 	and.w	r3, r3, #16
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f7ff fd75 	bl	8006614 <HAL_ADC_ErrorCallback>
}
 8006b2a:	e004      	b.n	8006b36 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b4a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff fd57 	bl	8006600 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b52:	bf00      	nop
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b66:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2240      	movs	r2, #64	; 0x40
 8006b6c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	f043 0204 	orr.w	r2, r3, #4
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff fd4a 	bl	8006614 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b80:	bf00      	nop
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <__NVIC_SetPriorityGrouping>:
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b98:	4b0c      	ldr	r3, [pc, #48]	; (8006bcc <__NVIC_SetPriorityGrouping+0x44>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b9e:	68ba      	ldr	r2, [r7, #8]
 8006ba0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006bb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bba:	4a04      	ldr	r2, [pc, #16]	; (8006bcc <__NVIC_SetPriorityGrouping+0x44>)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	60d3      	str	r3, [r2, #12]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr
 8006bcc:	e000ed00 	.word	0xe000ed00

08006bd0 <__NVIC_GetPriorityGrouping>:
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <__NVIC_GetPriorityGrouping+0x18>)
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	0a1b      	lsrs	r3, r3, #8
 8006bda:	f003 0307 	and.w	r3, r3, #7
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	e000ed00 	.word	0xe000ed00

08006bec <__NVIC_EnableIRQ>:
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	db0b      	blt.n	8006c16 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	f003 021f 	and.w	r2, r3, #31
 8006c04:	4907      	ldr	r1, [pc, #28]	; (8006c24 <__NVIC_EnableIRQ+0x38>)
 8006c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	2001      	movs	r0, #1
 8006c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8006c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c16:	bf00      	nop
 8006c18:	370c      	adds	r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	e000e100 	.word	0xe000e100

08006c28 <__NVIC_SetPriority>:
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6039      	str	r1, [r7, #0]
 8006c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db0a      	blt.n	8006c52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	490c      	ldr	r1, [pc, #48]	; (8006c74 <__NVIC_SetPriority+0x4c>)
 8006c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c46:	0112      	lsls	r2, r2, #4
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c50:	e00a      	b.n	8006c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	4908      	ldr	r1, [pc, #32]	; (8006c78 <__NVIC_SetPriority+0x50>)
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	3b04      	subs	r3, #4
 8006c60:	0112      	lsls	r2, r2, #4
 8006c62:	b2d2      	uxtb	r2, r2
 8006c64:	440b      	add	r3, r1
 8006c66:	761a      	strb	r2, [r3, #24]
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr
 8006c74:	e000e100 	.word	0xe000e100
 8006c78:	e000ed00 	.word	0xe000ed00

08006c7c <NVIC_EncodePriority>:
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b089      	sub	sp, #36	; 0x24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f1c3 0307 	rsb	r3, r3, #7
 8006c96:	2b04      	cmp	r3, #4
 8006c98:	bf28      	it	cs
 8006c9a:	2304      	movcs	r3, #4
 8006c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	3304      	adds	r3, #4
 8006ca2:	2b06      	cmp	r3, #6
 8006ca4:	d902      	bls.n	8006cac <NVIC_EncodePriority+0x30>
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	3b03      	subs	r3, #3
 8006caa:	e000      	b.n	8006cae <NVIC_EncodePriority+0x32>
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cba:	43da      	mvns	r2, r3
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	401a      	ands	r2, r3
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	fa01 f303 	lsl.w	r3, r1, r3
 8006cce:	43d9      	mvns	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cd4:	4313      	orrs	r3, r2
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3724      	adds	r7, #36	; 0x24
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
	...

08006ce4 <SysTick_Config>:
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf4:	d301      	bcc.n	8006cfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e00f      	b.n	8006d1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cfa:	4a0a      	ldr	r2, [pc, #40]	; (8006d24 <SysTick_Config+0x40>)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d02:	210f      	movs	r1, #15
 8006d04:	f04f 30ff 	mov.w	r0, #4294967295
 8006d08:	f7ff ff8e 	bl	8006c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d0c:	4b05      	ldr	r3, [pc, #20]	; (8006d24 <SysTick_Config+0x40>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <SysTick_Config+0x40>)
 8006d14:	2207      	movs	r2, #7
 8006d16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	e000e010 	.word	0xe000e010

08006d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff ff29 	bl	8006b88 <__NVIC_SetPriorityGrouping>
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	4603      	mov	r3, r0
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d50:	f7ff ff3e 	bl	8006bd0 <__NVIC_GetPriorityGrouping>
 8006d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	68b9      	ldr	r1, [r7, #8]
 8006d5a:	6978      	ldr	r0, [r7, #20]
 8006d5c:	f7ff ff8e 	bl	8006c7c <NVIC_EncodePriority>
 8006d60:	4602      	mov	r2, r0
 8006d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7ff ff5d 	bl	8006c28 <__NVIC_SetPriority>
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff ff31 	bl	8006bec <__NVIC_EnableIRQ>
}
 8006d8a:	bf00      	nop
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b082      	sub	sp, #8
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7ff ffa2 	bl	8006ce4 <SysTick_Config>
 8006da0:	4603      	mov	r3, r0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006db8:	f7ff fab4 	bl	8006324 <HAL_GetTick>
 8006dbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d101      	bne.n	8006dc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e099      	b.n	8006efc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0201 	bic.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006de8:	e00f      	b.n	8006e0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dea:	f7ff fa9b 	bl	8006324 <HAL_GetTick>
 8006dee:	4602      	mov	r2, r0
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	1ad3      	subs	r3, r2, r3
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	d908      	bls.n	8006e0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2220      	movs	r2, #32
 8006dfc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2203      	movs	r2, #3
 8006e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e078      	b.n	8006efc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e8      	bne.n	8006dea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4b38      	ldr	r3, [pc, #224]	; (8006f04 <HAL_DMA_Init+0x158>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	699b      	ldr	r3, [r3, #24]
 8006e48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a1b      	ldr	r3, [r3, #32]
 8006e54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d107      	bne.n	8006e74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	697a      	ldr	r2, [r7, #20]
 8006e7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f023 0307 	bic.w	r3, r3, #7
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d117      	bne.n	8006ece <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	697a      	ldr	r2, [r7, #20]
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00e      	beq.n	8006ece <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fa9d 	bl	80073f0 <DMA_CheckFifoParam>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d008      	beq.n	8006ece <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2240      	movs	r2, #64	; 0x40
 8006ec0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e016      	b.n	8006efc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa54 	bl	8007384 <DMA_CalcBaseAndBitshift>
 8006edc:	4603      	mov	r3, r0
 8006ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	223f      	movs	r2, #63	; 0x3f
 8006ee6:	409a      	lsls	r2, r3
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	f010803f 	.word	0xf010803f

08006f08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b086      	sub	sp, #24
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	607a      	str	r2, [r7, #4]
 8006f14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d101      	bne.n	8006f2e <HAL_DMA_Start_IT+0x26>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	e040      	b.n	8006fb0 <HAL_DMA_Start_IT+0xa8>
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d12f      	bne.n	8006fa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	68b9      	ldr	r1, [r7, #8]
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f000 f9e6 	bl	8007328 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f60:	223f      	movs	r2, #63	; 0x3f
 8006f62:	409a      	lsls	r2, r3
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0216 	orr.w	r2, r2, #22
 8006f76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d007      	beq.n	8006f90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f042 0208 	orr.w	r2, r2, #8
 8006f8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	e005      	b.n	8006fae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006faa:	2302      	movs	r3, #2
 8006fac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3718      	adds	r7, #24
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d004      	beq.n	8006fd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2280      	movs	r2, #128	; 0x80
 8006fd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e00c      	b.n	8006ff0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2205      	movs	r2, #5
 8006fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 0201 	bic.w	r2, r2, #1
 8006fec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	370c      	adds	r7, #12
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007008:	4b92      	ldr	r3, [pc, #584]	; (8007254 <HAL_DMA_IRQHandler+0x258>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a92      	ldr	r2, [pc, #584]	; (8007258 <HAL_DMA_IRQHandler+0x25c>)
 800700e:	fba2 2303 	umull	r2, r3, r2, r3
 8007012:	0a9b      	lsrs	r3, r3, #10
 8007014:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007026:	2208      	movs	r2, #8
 8007028:	409a      	lsls	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	4013      	ands	r3, r2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d01a      	beq.n	8007068 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b00      	cmp	r3, #0
 800703e:	d013      	beq.n	8007068 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0204 	bic.w	r2, r2, #4
 800704e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	2208      	movs	r2, #8
 8007056:	409a      	lsls	r2, r3
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007060:	f043 0201 	orr.w	r2, r3, #1
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706c:	2201      	movs	r2, #1
 800706e:	409a      	lsls	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d012      	beq.n	800709e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00b      	beq.n	800709e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	2201      	movs	r2, #1
 800708c:	409a      	lsls	r2, r3
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007096:	f043 0202 	orr.w	r2, r3, #2
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a2:	2204      	movs	r2, #4
 80070a4:	409a      	lsls	r2, r3
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	4013      	ands	r3, r2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d012      	beq.n	80070d4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f003 0302 	and.w	r3, r3, #2
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c0:	2204      	movs	r2, #4
 80070c2:	409a      	lsls	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070cc:	f043 0204 	orr.w	r2, r3, #4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d8:	2210      	movs	r2, #16
 80070da:	409a      	lsls	r2, r3
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4013      	ands	r3, r2
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d043      	beq.n	800716c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d03c      	beq.n	800716c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f6:	2210      	movs	r2, #16
 80070f8:	409a      	lsls	r2, r3
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d018      	beq.n	800713e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d108      	bne.n	800712c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2b00      	cmp	r3, #0
 8007120:	d024      	beq.n	800716c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
 800712a:	e01f      	b.n	800716c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01b      	beq.n	800716c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	4798      	blx	r3
 800713c:	e016      	b.n	800716c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d107      	bne.n	800715c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f022 0208 	bic.w	r2, r2, #8
 800715a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007170:	2220      	movs	r2, #32
 8007172:	409a      	lsls	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4013      	ands	r3, r2
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 808e 	beq.w	800729a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0310 	and.w	r3, r3, #16
 8007188:	2b00      	cmp	r3, #0
 800718a:	f000 8086 	beq.w	800729a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007192:	2220      	movs	r2, #32
 8007194:	409a      	lsls	r2, r3
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	d136      	bne.n	8007214 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0216 	bic.w	r2, r2, #22
 80071b4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	695a      	ldr	r2, [r3, #20]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071c4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <HAL_DMA_IRQHandler+0x1da>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d007      	beq.n	80071e6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f022 0208 	bic.w	r2, r2, #8
 80071e4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ea:	223f      	movs	r2, #63	; 0x3f
 80071ec:	409a      	lsls	r2, r3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2201      	movs	r2, #1
 80071fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	2b00      	cmp	r3, #0
 8007208:	d07d      	beq.n	8007306 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	4798      	blx	r3
        }
        return;
 8007212:	e078      	b.n	8007306 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800721e:	2b00      	cmp	r3, #0
 8007220:	d01c      	beq.n	800725c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800722c:	2b00      	cmp	r3, #0
 800722e:	d108      	bne.n	8007242 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007234:	2b00      	cmp	r3, #0
 8007236:	d030      	beq.n	800729a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	4798      	blx	r3
 8007240:	e02b      	b.n	800729a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007246:	2b00      	cmp	r3, #0
 8007248:	d027      	beq.n	800729a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
 8007252:	e022      	b.n	800729a <HAL_DMA_IRQHandler+0x29e>
 8007254:	20000000 	.word	0x20000000
 8007258:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10f      	bne.n	800728a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f022 0210 	bic.w	r2, r2, #16
 8007278:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2201      	movs	r2, #1
 8007286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d032      	beq.n	8007308 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d022      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2205      	movs	r2, #5
 80072b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f022 0201 	bic.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	3301      	adds	r3, #1
 80072ca:	60bb      	str	r3, [r7, #8]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d307      	bcc.n	80072e2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1f2      	bne.n	80072c6 <HAL_DMA_IRQHandler+0x2ca>
 80072e0:	e000      	b.n	80072e4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80072e2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d005      	beq.n	8007308 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3
 8007304:	e000      	b.n	8007308 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007306:	bf00      	nop
    }
  }
}
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop

08007310 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007344:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	683a      	ldr	r2, [r7, #0]
 800734c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b40      	cmp	r3, #64	; 0x40
 8007354:	d108      	bne.n	8007368 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	687a      	ldr	r2, [r7, #4]
 800735c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007366:	e007      	b.n	8007378 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	68ba      	ldr	r2, [r7, #8]
 800736e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	60da      	str	r2, [r3, #12]
}
 8007378:	bf00      	nop
 800737a:	3714      	adds	r7, #20
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	b2db      	uxtb	r3, r3
 8007392:	3b10      	subs	r3, #16
 8007394:	4a14      	ldr	r2, [pc, #80]	; (80073e8 <DMA_CalcBaseAndBitshift+0x64>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	091b      	lsrs	r3, r3, #4
 800739c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800739e:	4a13      	ldr	r2, [pc, #76]	; (80073ec <DMA_CalcBaseAndBitshift+0x68>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4413      	add	r3, r2
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d909      	bls.n	80073c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073ba:	f023 0303 	bic.w	r3, r3, #3
 80073be:	1d1a      	adds	r2, r3, #4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	659a      	str	r2, [r3, #88]	; 0x58
 80073c4:	e007      	b.n	80073d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	aaaaaaab 	.word	0xaaaaaaab
 80073ec:	08017c10 	.word	0x08017c10

080073f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007400:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	699b      	ldr	r3, [r3, #24]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11f      	bne.n	800744a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b03      	cmp	r3, #3
 800740e:	d855      	bhi.n	80074bc <DMA_CheckFifoParam+0xcc>
 8007410:	a201      	add	r2, pc, #4	; (adr r2, 8007418 <DMA_CheckFifoParam+0x28>)
 8007412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007416:	bf00      	nop
 8007418:	08007429 	.word	0x08007429
 800741c:	0800743b 	.word	0x0800743b
 8007420:	08007429 	.word	0x08007429
 8007424:	080074bd 	.word	0x080074bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d045      	beq.n	80074c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007438:	e042      	b.n	80074c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007442:	d13f      	bne.n	80074c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007448:	e03c      	b.n	80074c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007452:	d121      	bne.n	8007498 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b03      	cmp	r3, #3
 8007458:	d836      	bhi.n	80074c8 <DMA_CheckFifoParam+0xd8>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <DMA_CheckFifoParam+0x70>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	08007471 	.word	0x08007471
 8007464:	08007477 	.word	0x08007477
 8007468:	08007471 	.word	0x08007471
 800746c:	08007489 	.word	0x08007489
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	73fb      	strb	r3, [r7, #15]
      break;
 8007474:	e02f      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800747a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d024      	beq.n	80074cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007486:	e021      	b.n	80074cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800748c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007490:	d11e      	bne.n	80074d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007496:	e01b      	b.n	80074d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b02      	cmp	r3, #2
 800749c:	d902      	bls.n	80074a4 <DMA_CheckFifoParam+0xb4>
 800749e:	2b03      	cmp	r3, #3
 80074a0:	d003      	beq.n	80074aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80074a2:	e018      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	73fb      	strb	r3, [r7, #15]
      break;
 80074a8:	e015      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00e      	beq.n	80074d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	73fb      	strb	r3, [r7, #15]
      break;
 80074ba:	e00b      	b.n	80074d4 <DMA_CheckFifoParam+0xe4>
      break;
 80074bc:	bf00      	nop
 80074be:	e00a      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      break;
 80074c0:	bf00      	nop
 80074c2:	e008      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      break;
 80074c4:	bf00      	nop
 80074c6:	e006      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      break;
 80074c8:	bf00      	nop
 80074ca:	e004      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      break;
 80074cc:	bf00      	nop
 80074ce:	e002      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80074d0:	bf00      	nop
 80074d2:	e000      	b.n	80074d6 <DMA_CheckFifoParam+0xe6>
      break;
 80074d4:	bf00      	nop
    }
  } 
  
  return status; 
 80074d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b089      	sub	sp, #36	; 0x24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	61fb      	str	r3, [r7, #28]
 80074fe:	e177      	b.n	80077f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007500:	2201      	movs	r2, #1
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4013      	ands	r3, r2
 8007512:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	429a      	cmp	r2, r3
 800751a:	f040 8166 	bne.w	80077ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d00b      	beq.n	800753e <HAL_GPIO_Init+0x5a>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2b02      	cmp	r3, #2
 800752c:	d007      	beq.n	800753e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007532:	2b11      	cmp	r3, #17
 8007534:	d003      	beq.n	800753e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b12      	cmp	r3, #18
 800753c:	d130      	bne.n	80075a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	005b      	lsls	r3, r3, #1
 8007548:	2203      	movs	r2, #3
 800754a:	fa02 f303 	lsl.w	r3, r2, r3
 800754e:	43db      	mvns	r3, r3
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	4013      	ands	r3, r2
 8007554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	4313      	orrs	r3, r2
 8007566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69ba      	ldr	r2, [r7, #24]
 800756c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007574:	2201      	movs	r2, #1
 8007576:	69fb      	ldr	r3, [r7, #28]
 8007578:	fa02 f303 	lsl.w	r3, r2, r3
 800757c:	43db      	mvns	r3, r3
 800757e:	69ba      	ldr	r2, [r7, #24]
 8007580:	4013      	ands	r3, r2
 8007582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	091b      	lsrs	r3, r3, #4
 800758a:	f003 0201 	and.w	r2, r3, #1
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	fa02 f303 	lsl.w	r3, r2, r3
 8007594:	69ba      	ldr	r2, [r7, #24]
 8007596:	4313      	orrs	r3, r2
 8007598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80075a6:	69fb      	ldr	r3, [r7, #28]
 80075a8:	005b      	lsls	r3, r3, #1
 80075aa:	2203      	movs	r2, #3
 80075ac:	fa02 f303 	lsl.w	r3, r2, r3
 80075b0:	43db      	mvns	r3, r3
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	4013      	ands	r3, r2
 80075b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	fa02 f303 	lsl.w	r3, r2, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2b02      	cmp	r3, #2
 80075d6:	d003      	beq.n	80075e0 <HAL_GPIO_Init+0xfc>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	2b12      	cmp	r3, #18
 80075de:	d123      	bne.n	8007628 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	08da      	lsrs	r2, r3, #3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3208      	adds	r2, #8
 80075e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	f003 0307 	and.w	r3, r3, #7
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	220f      	movs	r2, #15
 80075f8:	fa02 f303 	lsl.w	r3, r2, r3
 80075fc:	43db      	mvns	r3, r3
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	4013      	ands	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	f003 0307 	and.w	r3, r3, #7
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	fa02 f303 	lsl.w	r3, r2, r3
 8007614:	69ba      	ldr	r2, [r7, #24]
 8007616:	4313      	orrs	r3, r2
 8007618:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	08da      	lsrs	r2, r3, #3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	3208      	adds	r2, #8
 8007622:	69b9      	ldr	r1, [r7, #24]
 8007624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	2203      	movs	r2, #3
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	43db      	mvns	r3, r3
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	4013      	ands	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f003 0203 	and.w	r2, r3, #3
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4313      	orrs	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80c0 	beq.w	80077ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800766a:	2300      	movs	r3, #0
 800766c:	60fb      	str	r3, [r7, #12]
 800766e:	4b65      	ldr	r3, [pc, #404]	; (8007804 <HAL_GPIO_Init+0x320>)
 8007670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007672:	4a64      	ldr	r2, [pc, #400]	; (8007804 <HAL_GPIO_Init+0x320>)
 8007674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007678:	6453      	str	r3, [r2, #68]	; 0x44
 800767a:	4b62      	ldr	r3, [pc, #392]	; (8007804 <HAL_GPIO_Init+0x320>)
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007686:	4a60      	ldr	r2, [pc, #384]	; (8007808 <HAL_GPIO_Init+0x324>)
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	089b      	lsrs	r3, r3, #2
 800768c:	3302      	adds	r3, #2
 800768e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007692:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f003 0303 	and.w	r3, r3, #3
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	220f      	movs	r2, #15
 800769e:	fa02 f303 	lsl.w	r3, r2, r3
 80076a2:	43db      	mvns	r3, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4013      	ands	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a57      	ldr	r2, [pc, #348]	; (800780c <HAL_GPIO_Init+0x328>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d037      	beq.n	8007722 <HAL_GPIO_Init+0x23e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a56      	ldr	r2, [pc, #344]	; (8007810 <HAL_GPIO_Init+0x32c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d031      	beq.n	800771e <HAL_GPIO_Init+0x23a>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a55      	ldr	r2, [pc, #340]	; (8007814 <HAL_GPIO_Init+0x330>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d02b      	beq.n	800771a <HAL_GPIO_Init+0x236>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a54      	ldr	r2, [pc, #336]	; (8007818 <HAL_GPIO_Init+0x334>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d025      	beq.n	8007716 <HAL_GPIO_Init+0x232>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a53      	ldr	r2, [pc, #332]	; (800781c <HAL_GPIO_Init+0x338>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d01f      	beq.n	8007712 <HAL_GPIO_Init+0x22e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a52      	ldr	r2, [pc, #328]	; (8007820 <HAL_GPIO_Init+0x33c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d019      	beq.n	800770e <HAL_GPIO_Init+0x22a>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a51      	ldr	r2, [pc, #324]	; (8007824 <HAL_GPIO_Init+0x340>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d013      	beq.n	800770a <HAL_GPIO_Init+0x226>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a50      	ldr	r2, [pc, #320]	; (8007828 <HAL_GPIO_Init+0x344>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d00d      	beq.n	8007706 <HAL_GPIO_Init+0x222>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a4f      	ldr	r2, [pc, #316]	; (800782c <HAL_GPIO_Init+0x348>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d007      	beq.n	8007702 <HAL_GPIO_Init+0x21e>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a4e      	ldr	r2, [pc, #312]	; (8007830 <HAL_GPIO_Init+0x34c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d101      	bne.n	80076fe <HAL_GPIO_Init+0x21a>
 80076fa:	2309      	movs	r3, #9
 80076fc:	e012      	b.n	8007724 <HAL_GPIO_Init+0x240>
 80076fe:	230a      	movs	r3, #10
 8007700:	e010      	b.n	8007724 <HAL_GPIO_Init+0x240>
 8007702:	2308      	movs	r3, #8
 8007704:	e00e      	b.n	8007724 <HAL_GPIO_Init+0x240>
 8007706:	2307      	movs	r3, #7
 8007708:	e00c      	b.n	8007724 <HAL_GPIO_Init+0x240>
 800770a:	2306      	movs	r3, #6
 800770c:	e00a      	b.n	8007724 <HAL_GPIO_Init+0x240>
 800770e:	2305      	movs	r3, #5
 8007710:	e008      	b.n	8007724 <HAL_GPIO_Init+0x240>
 8007712:	2304      	movs	r3, #4
 8007714:	e006      	b.n	8007724 <HAL_GPIO_Init+0x240>
 8007716:	2303      	movs	r3, #3
 8007718:	e004      	b.n	8007724 <HAL_GPIO_Init+0x240>
 800771a:	2302      	movs	r3, #2
 800771c:	e002      	b.n	8007724 <HAL_GPIO_Init+0x240>
 800771e:	2301      	movs	r3, #1
 8007720:	e000      	b.n	8007724 <HAL_GPIO_Init+0x240>
 8007722:	2300      	movs	r3, #0
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	f002 0203 	and.w	r2, r2, #3
 800772a:	0092      	lsls	r2, r2, #2
 800772c:	4093      	lsls	r3, r2
 800772e:	69ba      	ldr	r2, [r7, #24]
 8007730:	4313      	orrs	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007734:	4934      	ldr	r1, [pc, #208]	; (8007808 <HAL_GPIO_Init+0x324>)
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	089b      	lsrs	r3, r3, #2
 800773a:	3302      	adds	r3, #2
 800773c:	69ba      	ldr	r2, [r7, #24]
 800773e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007742:	4b3c      	ldr	r3, [pc, #240]	; (8007834 <HAL_GPIO_Init+0x350>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	43db      	mvns	r3, r3
 800774c:	69ba      	ldr	r2, [r7, #24]
 800774e:	4013      	ands	r3, r2
 8007750:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d003      	beq.n	8007766 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800775e:	69ba      	ldr	r2, [r7, #24]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007766:	4a33      	ldr	r2, [pc, #204]	; (8007834 <HAL_GPIO_Init+0x350>)
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800776c:	4b31      	ldr	r3, [pc, #196]	; (8007834 <HAL_GPIO_Init+0x350>)
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	43db      	mvns	r3, r3
 8007776:	69ba      	ldr	r2, [r7, #24]
 8007778:	4013      	ands	r3, r2
 800777a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d003      	beq.n	8007790 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007788:	69ba      	ldr	r2, [r7, #24]
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007790:	4a28      	ldr	r2, [pc, #160]	; (8007834 <HAL_GPIO_Init+0x350>)
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <HAL_GPIO_Init+0x350>)
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	43db      	mvns	r3, r3
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	4013      	ands	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d003      	beq.n	80077ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80077ba:	4a1e      	ldr	r2, [pc, #120]	; (8007834 <HAL_GPIO_Init+0x350>)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80077c0:	4b1c      	ldr	r3, [pc, #112]	; (8007834 <HAL_GPIO_Init+0x350>)
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	69ba      	ldr	r2, [r7, #24]
 80077cc:	4013      	ands	r3, r2
 80077ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80077e4:	4a13      	ldr	r2, [pc, #76]	; (8007834 <HAL_GPIO_Init+0x350>)
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	3301      	adds	r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b0f      	cmp	r3, #15
 80077f4:	f67f ae84 	bls.w	8007500 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80077f8:	bf00      	nop
 80077fa:	3724      	adds	r7, #36	; 0x24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	40023800 	.word	0x40023800
 8007808:	40013800 	.word	0x40013800
 800780c:	40020000 	.word	0x40020000
 8007810:	40020400 	.word	0x40020400
 8007814:	40020800 	.word	0x40020800
 8007818:	40020c00 	.word	0x40020c00
 800781c:	40021000 	.word	0x40021000
 8007820:	40021400 	.word	0x40021400
 8007824:	40021800 	.word	0x40021800
 8007828:	40021c00 	.word	0x40021c00
 800782c:	40022000 	.word	0x40022000
 8007830:	40022400 	.word	0x40022400
 8007834:	40013c00 	.word	0x40013c00

08007838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	460b      	mov	r3, r1
 8007842:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	691a      	ldr	r2, [r3, #16]
 8007848:	887b      	ldrh	r3, [r7, #2]
 800784a:	4013      	ands	r3, r2
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007850:	2301      	movs	r3, #1
 8007852:	73fb      	strb	r3, [r7, #15]
 8007854:	e001      	b.n	800785a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007856:	2300      	movs	r3, #0
 8007858:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800785a:	7bfb      	ldrb	r3, [r7, #15]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	460b      	mov	r3, r1
 8007872:	807b      	strh	r3, [r7, #2]
 8007874:	4613      	mov	r3, r2
 8007876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007878:	787b      	ldrb	r3, [r7, #1]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800787e:	887a      	ldrh	r2, [r7, #2]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007884:	e003      	b.n	800788e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007886:	887b      	ldrh	r3, [r7, #2]
 8007888:	041a      	lsls	r2, r3, #16
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	619a      	str	r2, [r3, #24]
}
 800788e:	bf00      	nop
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
	...

0800789c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80078a6:	4b08      	ldr	r3, [pc, #32]	; (80078c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078a8:	695a      	ldr	r2, [r3, #20]
 80078aa:	88fb      	ldrh	r3, [r7, #6]
 80078ac:	4013      	ands	r3, r2
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d006      	beq.n	80078c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80078b2:	4a05      	ldr	r2, [pc, #20]	; (80078c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80078b4:	88fb      	ldrh	r3, [r7, #6]
 80078b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f7fc f897 	bl	80039ee <HAL_GPIO_EXTI_Callback>
  }
}
 80078c0:	bf00      	nop
 80078c2:	3708      	adds	r7, #8
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}
 80078c8:	40013c00 	.word	0x40013c00

080078cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b084      	sub	sp, #16
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e11f      	b.n	8007b1e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d106      	bne.n	80078f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7fd fa84 	bl	8004e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2224      	movs	r2, #36	; 0x24
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f022 0201 	bic.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800791e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800792e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007930:	f001 f96e 	bl	8008c10 <HAL_RCC_GetPCLK1Freq>
 8007934:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	4a7b      	ldr	r2, [pc, #492]	; (8007b28 <HAL_I2C_Init+0x25c>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d807      	bhi.n	8007950 <HAL_I2C_Init+0x84>
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4a7a      	ldr	r2, [pc, #488]	; (8007b2c <HAL_I2C_Init+0x260>)
 8007944:	4293      	cmp	r3, r2
 8007946:	bf94      	ite	ls
 8007948:	2301      	movls	r3, #1
 800794a:	2300      	movhi	r3, #0
 800794c:	b2db      	uxtb	r3, r3
 800794e:	e006      	b.n	800795e <HAL_I2C_Init+0x92>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a77      	ldr	r2, [pc, #476]	; (8007b30 <HAL_I2C_Init+0x264>)
 8007954:	4293      	cmp	r3, r2
 8007956:	bf94      	ite	ls
 8007958:	2301      	movls	r3, #1
 800795a:	2300      	movhi	r3, #0
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d001      	beq.n	8007966 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e0db      	b.n	8007b1e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	4a72      	ldr	r2, [pc, #456]	; (8007b34 <HAL_I2C_Init+0x268>)
 800796a:	fba2 2303 	umull	r2, r3, r2, r3
 800796e:	0c9b      	lsrs	r3, r3, #18
 8007970:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68ba      	ldr	r2, [r7, #8]
 8007982:	430a      	orrs	r2, r1
 8007984:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	4a64      	ldr	r2, [pc, #400]	; (8007b28 <HAL_I2C_Init+0x25c>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d802      	bhi.n	80079a0 <HAL_I2C_Init+0xd4>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	3301      	adds	r3, #1
 800799e:	e009      	b.n	80079b4 <HAL_I2C_Init+0xe8>
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80079a6:	fb02 f303 	mul.w	r3, r2, r3
 80079aa:	4a63      	ldr	r2, [pc, #396]	; (8007b38 <HAL_I2C_Init+0x26c>)
 80079ac:	fba2 2303 	umull	r2, r3, r2, r3
 80079b0:	099b      	lsrs	r3, r3, #6
 80079b2:	3301      	adds	r3, #1
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69db      	ldr	r3, [r3, #28]
 80079c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80079c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	4956      	ldr	r1, [pc, #344]	; (8007b28 <HAL_I2C_Init+0x25c>)
 80079d0:	428b      	cmp	r3, r1
 80079d2:	d80d      	bhi.n	80079f0 <HAL_I2C_Init+0x124>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	1e59      	subs	r1, r3, #1
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	005b      	lsls	r3, r3, #1
 80079de:	fbb1 f3f3 	udiv	r3, r1, r3
 80079e2:	3301      	adds	r3, #1
 80079e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079e8:	2b04      	cmp	r3, #4
 80079ea:	bf38      	it	cc
 80079ec:	2304      	movcc	r3, #4
 80079ee:	e04f      	b.n	8007a90 <HAL_I2C_Init+0x1c4>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d111      	bne.n	8007a1c <HAL_I2C_Init+0x150>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	1e58      	subs	r0, r3, #1
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6859      	ldr	r1, [r3, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	440b      	add	r3, r1
 8007a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf0c      	ite	eq
 8007a14:	2301      	moveq	r3, #1
 8007a16:	2300      	movne	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e012      	b.n	8007a42 <HAL_I2C_Init+0x176>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	1e58      	subs	r0, r3, #1
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6859      	ldr	r1, [r3, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	0099      	lsls	r1, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a32:	3301      	adds	r3, #1
 8007a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	bf0c      	ite	eq
 8007a3c:	2301      	moveq	r3, #1
 8007a3e:	2300      	movne	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <HAL_I2C_Init+0x17e>
 8007a46:	2301      	movs	r3, #1
 8007a48:	e022      	b.n	8007a90 <HAL_I2C_Init+0x1c4>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10e      	bne.n	8007a70 <HAL_I2C_Init+0x1a4>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	1e58      	subs	r0, r3, #1
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6859      	ldr	r1, [r3, #4]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	440b      	add	r3, r1
 8007a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a64:	3301      	adds	r3, #1
 8007a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a6e:	e00f      	b.n	8007a90 <HAL_I2C_Init+0x1c4>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	1e58      	subs	r0, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6859      	ldr	r1, [r3, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	0099      	lsls	r1, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a86:	3301      	adds	r3, #1
 8007a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	6809      	ldr	r1, [r1, #0]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	69da      	ldr	r2, [r3, #28]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6a1b      	ldr	r3, [r3, #32]
 8007aaa:	431a      	orrs	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	430a      	orrs	r2, r1
 8007ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007abe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6911      	ldr	r1, [r2, #16]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	68d2      	ldr	r2, [r2, #12]
 8007aca:	4311      	orrs	r1, r2
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6812      	ldr	r2, [r2, #0]
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	695a      	ldr	r2, [r3, #20]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	699b      	ldr	r3, [r3, #24]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0201 	orr.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	000186a0 	.word	0x000186a0
 8007b2c:	001e847f 	.word	0x001e847f
 8007b30:	003d08ff 	.word	0x003d08ff
 8007b34:	431bde83 	.word	0x431bde83
 8007b38:	10624dd3 	.word	0x10624dd3

08007b3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	607a      	str	r2, [r7, #4]
 8007b46:	461a      	mov	r2, r3
 8007b48:	460b      	mov	r3, r1
 8007b4a:	817b      	strh	r3, [r7, #10]
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b50:	f7fe fbe8 	bl	8006324 <HAL_GetTick>
 8007b54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b20      	cmp	r3, #32
 8007b60:	f040 80e0 	bne.w	8007d24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	9300      	str	r3, [sp, #0]
 8007b68:	2319      	movs	r3, #25
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	4970      	ldr	r1, [pc, #448]	; (8007d30 <HAL_I2C_Master_Transmit+0x1f4>)
 8007b6e:	68f8      	ldr	r0, [r7, #12]
 8007b70:	f000 fc58 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d001      	beq.n	8007b7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	e0d3      	b.n	8007d26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d101      	bne.n	8007b8c <HAL_I2C_Master_Transmit+0x50>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e0cc      	b.n	8007d26 <HAL_I2C_Master_Transmit+0x1ea>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d007      	beq.n	8007bb2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f042 0201 	orr.w	r2, r2, #1
 8007bb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2221      	movs	r2, #33	; 0x21
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2210      	movs	r2, #16
 8007bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	893a      	ldrh	r2, [r7, #8]
 8007be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	4a50      	ldr	r2, [pc, #320]	; (8007d34 <HAL_I2C_Master_Transmit+0x1f8>)
 8007bf2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007bf4:	8979      	ldrh	r1, [r7, #10]
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	6a3a      	ldr	r2, [r7, #32]
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fac2 	bl	8008184 <I2C_MasterRequestWrite>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e08d      	b.n	8007d26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	613b      	str	r3, [r7, #16]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	695b      	ldr	r3, [r3, #20]
 8007c14:	613b      	str	r3, [r7, #16]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	699b      	ldr	r3, [r3, #24]
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007c20:	e066      	b.n	8007cf0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	6a39      	ldr	r1, [r7, #32]
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 fcd2 	bl	80085d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00d      	beq.n	8007c4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d107      	bne.n	8007c4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e06b      	b.n	8007d26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	781a      	ldrb	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5e:	1c5a      	adds	r2, r3, #1
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c76:	3b01      	subs	r3, #1
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d11b      	bne.n	8007cc4 <HAL_I2C_Master_Transmit+0x188>
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d017      	beq.n	8007cc4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	781a      	ldrb	r2, [r3, #0]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca4:	1c5a      	adds	r2, r3, #1
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cbc:	3b01      	subs	r3, #1
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cc4:	697a      	ldr	r2, [r7, #20]
 8007cc6:	6a39      	ldr	r1, [r7, #32]
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f000 fcc2 	bl	8008652 <I2C_WaitOnBTFFlagUntilTimeout>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00d      	beq.n	8007cf0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd8:	2b04      	cmp	r3, #4
 8007cda:	d107      	bne.n	8007cec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007cec:	2301      	movs	r3, #1
 8007cee:	e01a      	b.n	8007d26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d194      	bne.n	8007c22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2220      	movs	r2, #32
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	e000      	b.n	8007d26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007d24:	2302      	movs	r3, #2
  }
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	00100002 	.word	0x00100002
 8007d34:	ffff0000 	.word	0xffff0000

08007d38 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08c      	sub	sp, #48	; 0x30
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	607a      	str	r2, [r7, #4]
 8007d42:	461a      	mov	r2, r3
 8007d44:	460b      	mov	r3, r1
 8007d46:	817b      	strh	r3, [r7, #10]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d4c:	f7fe faea 	bl	8006324 <HAL_GetTick>
 8007d50:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	2b20      	cmp	r3, #32
 8007d5c:	f040 820b 	bne.w	8008176 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	2319      	movs	r3, #25
 8007d66:	2201      	movs	r2, #1
 8007d68:	497c      	ldr	r1, [pc, #496]	; (8007f5c <HAL_I2C_Master_Receive+0x224>)
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fb5a 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d001      	beq.n	8007d7a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8007d76:	2302      	movs	r3, #2
 8007d78:	e1fe      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_I2C_Master_Receive+0x50>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e1f7      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d007      	beq.n	8007dae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0201 	orr.w	r2, r2, #1
 8007dac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dbc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2222      	movs	r2, #34	; 0x22
 8007dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2210      	movs	r2, #16
 8007dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	893a      	ldrh	r2, [r7, #8]
 8007dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	4a5c      	ldr	r2, [pc, #368]	; (8007f60 <HAL_I2C_Master_Receive+0x228>)
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007df0:	8979      	ldrh	r1, [r7, #10]
 8007df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 fa46 	bl	8008288 <I2C_MasterRequestRead>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d001      	beq.n	8007e06 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007e02:	2301      	movs	r3, #1
 8007e04:	e1b8      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d113      	bne.n	8007e36 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e0e:	2300      	movs	r3, #0
 8007e10:	623b      	str	r3, [r7, #32]
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	623b      	str	r3, [r7, #32]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	623b      	str	r3, [r7, #32]
 8007e22:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e18c      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d11b      	bne.n	8007e76 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e4e:	2300      	movs	r3, #0
 8007e50:	61fb      	str	r3, [r7, #28]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	699b      	ldr	r3, [r3, #24]
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e72:	601a      	str	r2, [r3, #0]
 8007e74:	e16c      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d11b      	bne.n	8007eb6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e8c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	61bb      	str	r3, [r7, #24]
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	e14c      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681a      	ldr	r2, [r3, #0]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ec4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	617b      	str	r3, [r7, #20]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	617b      	str	r3, [r7, #20]
 8007eda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007edc:	e138      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	f200 80f1 	bhi.w	80080ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d123      	bne.n	8007f38 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ef2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fbed 	bl	80086d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d001      	beq.n	8007f04 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007f00:	2301      	movs	r3, #1
 8007f02:	e139      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691a      	ldr	r2, [r3, #16]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	b2d2      	uxtb	r2, r2
 8007f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f36:	e10b      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d14e      	bne.n	8007fde <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	9300      	str	r3, [sp, #0]
 8007f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f46:	2200      	movs	r2, #0
 8007f48:	4906      	ldr	r1, [pc, #24]	; (8007f64 <HAL_I2C_Master_Receive+0x22c>)
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 fa6a 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 8007f50:	4603      	mov	r3, r0
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d008      	beq.n	8007f68 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e10e      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
 8007f5a:	bf00      	nop
 8007f5c:	00100002 	.word	0x00100002
 8007f60:	ffff0000 	.word	0xffff0000
 8007f64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	b2d2      	uxtb	r2, r2
 8007f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	1c5a      	adds	r2, r3, #1
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	691a      	ldr	r2, [r3, #16]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	1c5a      	adds	r2, r3, #1
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fdc:	e0b8      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	4966      	ldr	r1, [pc, #408]	; (8008180 <HAL_I2C_Master_Receive+0x448>)
 8007fe8:	68f8      	ldr	r0, [r7, #12]
 8007fea:	f000 fa1b 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e0bf      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691a      	ldr	r2, [r3, #16]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008012:	b2d2      	uxtb	r2, r2
 8008014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008030:	b29b      	uxth	r3, r3
 8008032:	3b01      	subs	r3, #1
 8008034:	b29a      	uxth	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2200      	movs	r2, #0
 8008042:	494f      	ldr	r1, [pc, #316]	; (8008180 <HAL_I2C_Master_Receive+0x448>)
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f000 f9ed 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e091      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008076:	1c5a      	adds	r2, r3, #1
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	691a      	ldr	r2, [r3, #16]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a0:	b2d2      	uxtb	r2, r2
 80080a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	1c5a      	adds	r2, r3, #1
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080b2:	3b01      	subs	r3, #1
 80080b4:	b29a      	uxth	r2, r3
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080be:	b29b      	uxth	r3, r3
 80080c0:	3b01      	subs	r3, #1
 80080c2:	b29a      	uxth	r2, r3
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80080c8:	e042      	b.n	8008150 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f000 fb00 	bl	80086d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d001      	beq.n	80080de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e04c      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	691a      	ldr	r2, [r3, #16]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	b2d2      	uxtb	r2, r2
 80080ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f0:	1c5a      	adds	r2, r3, #1
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080fa:	3b01      	subs	r3, #1
 80080fc:	b29a      	uxth	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008106:	b29b      	uxth	r3, r3
 8008108:	3b01      	subs	r3, #1
 800810a:	b29a      	uxth	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b04      	cmp	r3, #4
 800811c:	d118      	bne.n	8008150 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	691a      	ldr	r2, [r3, #16]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	b2d2      	uxtb	r2, r2
 800812a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800813a:	3b01      	subs	r3, #1
 800813c:	b29a      	uxth	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008146:	b29b      	uxth	r3, r3
 8008148:	3b01      	subs	r3, #1
 800814a:	b29a      	uxth	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008154:	2b00      	cmp	r3, #0
 8008156:	f47f aec2 	bne.w	8007ede <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2220      	movs	r2, #32
 800815e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	e000      	b.n	8008178 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008176:	2302      	movs	r3, #2
  }
}
 8008178:	4618      	mov	r0, r3
 800817a:	3728      	adds	r7, #40	; 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	00010004 	.word	0x00010004

08008184 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b088      	sub	sp, #32
 8008188:	af02      	add	r7, sp, #8
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	607a      	str	r2, [r7, #4]
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	460b      	mov	r3, r1
 8008192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008198:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d006      	beq.n	80081ae <I2C_MasterRequestWrite+0x2a>
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	2b01      	cmp	r3, #1
 80081a4:	d003      	beq.n	80081ae <I2C_MasterRequestWrite+0x2a>
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081ac:	d108      	bne.n	80081c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681a      	ldr	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	e00b      	b.n	80081d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	2b12      	cmp	r3, #18
 80081c6:	d107      	bne.n	80081d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 f91d 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00d      	beq.n	800820c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081fe:	d103      	bne.n	8008208 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008206:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008208:	2303      	movs	r3, #3
 800820a:	e035      	b.n	8008278 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008214:	d108      	bne.n	8008228 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008216:	897b      	ldrh	r3, [r7, #10]
 8008218:	b2db      	uxtb	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008224:	611a      	str	r2, [r3, #16]
 8008226:	e01b      	b.n	8008260 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008228:	897b      	ldrh	r3, [r7, #10]
 800822a:	11db      	asrs	r3, r3, #7
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0306 	and.w	r3, r3, #6
 8008232:	b2db      	uxtb	r3, r3
 8008234:	f063 030f 	orn	r3, r3, #15
 8008238:	b2da      	uxtb	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	490e      	ldr	r1, [pc, #56]	; (8008280 <I2C_MasterRequestWrite+0xfc>)
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f000 f943 	bl	80084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d001      	beq.n	8008256 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e010      	b.n	8008278 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008256:	897b      	ldrh	r3, [r7, #10]
 8008258:	b2da      	uxtb	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	4907      	ldr	r1, [pc, #28]	; (8008284 <I2C_MasterRequestWrite+0x100>)
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 f933 	bl	80084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	00010008 	.word	0x00010008
 8008284:	00010002 	.word	0x00010002

08008288 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af02      	add	r7, sp, #8
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	607a      	str	r2, [r7, #4]
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	460b      	mov	r3, r1
 8008296:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80082ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d006      	beq.n	80082c2 <I2C_MasterRequestRead+0x3a>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d003      	beq.n	80082c2 <I2C_MasterRequestRead+0x3a>
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80082c0:	d108      	bne.n	80082d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	e00b      	b.n	80082ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	2b11      	cmp	r3, #17
 80082da:	d107      	bne.n	80082ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	681a      	ldr	r2, [r3, #0]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 f893 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00d      	beq.n	8008320 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008312:	d103      	bne.n	800831c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800831a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	e079      	b.n	8008414 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008328:	d108      	bne.n	800833c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800832a:	897b      	ldrh	r3, [r7, #10]
 800832c:	b2db      	uxtb	r3, r3
 800832e:	f043 0301 	orr.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	611a      	str	r2, [r3, #16]
 800833a:	e05f      	b.n	80083fc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800833c:	897b      	ldrh	r3, [r7, #10]
 800833e:	11db      	asrs	r3, r3, #7
 8008340:	b2db      	uxtb	r3, r3
 8008342:	f003 0306 	and.w	r3, r3, #6
 8008346:	b2db      	uxtb	r3, r3
 8008348:	f063 030f 	orn	r3, r3, #15
 800834c:	b2da      	uxtb	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	687a      	ldr	r2, [r7, #4]
 8008358:	4930      	ldr	r1, [pc, #192]	; (800841c <I2C_MasterRequestRead+0x194>)
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 f8b9 	bl	80084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d001      	beq.n	800836a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e054      	b.n	8008414 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800836a:	897b      	ldrh	r3, [r7, #10]
 800836c:	b2da      	uxtb	r2, r3
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	4929      	ldr	r1, [pc, #164]	; (8008420 <I2C_MasterRequestRead+0x198>)
 800837a:	68f8      	ldr	r0, [r7, #12]
 800837c:	f000 f8a9 	bl	80084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e044      	b.n	8008414 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	695b      	ldr	r3, [r3, #20]
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	9300      	str	r3, [sp, #0]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083bc:	68f8      	ldr	r0, [r7, #12]
 80083be:	f000 f831 	bl	8008424 <I2C_WaitOnFlagUntilTimeout>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00d      	beq.n	80083e4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083d6:	d103      	bne.n	80083e0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083de:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e017      	b.n	8008414 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80083e4:	897b      	ldrh	r3, [r7, #10]
 80083e6:	11db      	asrs	r3, r3, #7
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f003 0306 	and.w	r3, r3, #6
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f063 030e 	orn	r3, r3, #14
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4907      	ldr	r1, [pc, #28]	; (8008420 <I2C_MasterRequestRead+0x198>)
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f865 	bl	80084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3718      	adds	r7, #24
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	00010008 	.word	0x00010008
 8008420:	00010002 	.word	0x00010002

08008424 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	4613      	mov	r3, r2
 8008432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008434:	e025      	b.n	8008482 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800843c:	d021      	beq.n	8008482 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800843e:	f7fd ff71 	bl	8006324 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	69bb      	ldr	r3, [r7, #24]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d302      	bcc.n	8008454 <I2C_WaitOnFlagUntilTimeout+0x30>
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d116      	bne.n	8008482 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2220      	movs	r2, #32
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	f043 0220 	orr.w	r2, r3, #32
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e023      	b.n	80084ca <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	0c1b      	lsrs	r3, r3, #16
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	d10d      	bne.n	80084a8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	43da      	mvns	r2, r3
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	4013      	ands	r3, r2
 8008498:	b29b      	uxth	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	bf0c      	ite	eq
 800849e:	2301      	moveq	r3, #1
 80084a0:	2300      	movne	r3, #0
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	e00c      	b.n	80084c2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699b      	ldr	r3, [r3, #24]
 80084ae:	43da      	mvns	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	4013      	ands	r3, r2
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	bf0c      	ite	eq
 80084ba:	2301      	moveq	r3, #1
 80084bc:	2300      	movne	r3, #0
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d0b6      	beq.n	8008436 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80084c8:	2300      	movs	r3, #0
}
 80084ca:	4618      	mov	r0, r3
 80084cc:	3710      	adds	r7, #16
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}

080084d2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80084d2:	b580      	push	{r7, lr}
 80084d4:	b084      	sub	sp, #16
 80084d6:	af00      	add	r7, sp, #0
 80084d8:	60f8      	str	r0, [r7, #12]
 80084da:	60b9      	str	r1, [r7, #8]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80084e0:	e051      	b.n	8008586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f0:	d123      	bne.n	800853a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008500:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800850a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2220      	movs	r2, #32
 8008516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	f043 0204 	orr.w	r2, r3, #4
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e046      	b.n	80085c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008540:	d021      	beq.n	8008586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008542:	f7fd feef 	bl	8006324 <HAL_GetTick>
 8008546:	4602      	mov	r2, r0
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	1ad3      	subs	r3, r2, r3
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	429a      	cmp	r2, r3
 8008550:	d302      	bcc.n	8008558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d116      	bne.n	8008586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2200      	movs	r2, #0
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2220      	movs	r2, #32
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	f043 0220 	orr.w	r2, r3, #32
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e020      	b.n	80085c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	0c1b      	lsrs	r3, r3, #16
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b01      	cmp	r3, #1
 800858e:	d10c      	bne.n	80085aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	43da      	mvns	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4013      	ands	r3, r2
 800859c:	b29b      	uxth	r3, r3
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bf14      	ite	ne
 80085a2:	2301      	movne	r3, #1
 80085a4:	2300      	moveq	r3, #0
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	e00b      	b.n	80085c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	43da      	mvns	r2, r3
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	4013      	ands	r3, r2
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	bf14      	ite	ne
 80085bc:	2301      	movne	r3, #1
 80085be:	2300      	moveq	r3, #0
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d18d      	bne.n	80084e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085dc:	e02d      	b.n	800863a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	f000 f8ce 	bl	8008780 <I2C_IsAcknowledgeFailed>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d001      	beq.n	80085ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e02d      	b.n	800864a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f4:	d021      	beq.n	800863a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085f6:	f7fd fe95 	bl	8006324 <HAL_GetTick>
 80085fa:	4602      	mov	r2, r0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	d302      	bcc.n	800860c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d116      	bne.n	800863a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2220      	movs	r2, #32
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008626:	f043 0220 	orr.w	r2, r3, #32
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e007      	b.n	800864a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	695b      	ldr	r3, [r3, #20]
 8008640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008644:	2b80      	cmp	r3, #128	; 0x80
 8008646:	d1ca      	bne.n	80085de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b084      	sub	sp, #16
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800865e:	e02d      	b.n	80086bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008660:	68f8      	ldr	r0, [r7, #12]
 8008662:	f000 f88d 	bl	8008780 <I2C_IsAcknowledgeFailed>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800866c:	2301      	movs	r3, #1
 800866e:	e02d      	b.n	80086cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008676:	d021      	beq.n	80086bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008678:	f7fd fe54 	bl	8006324 <HAL_GetTick>
 800867c:	4602      	mov	r2, r0
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	1ad3      	subs	r3, r2, r3
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	429a      	cmp	r2, r3
 8008686:	d302      	bcc.n	800868e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d116      	bne.n	80086bc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	f043 0220 	orr.w	r2, r3, #32
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e007      	b.n	80086cc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	695b      	ldr	r3, [r3, #20]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d1ca      	bne.n	8008660 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086e0:	e042      	b.n	8008768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	695b      	ldr	r3, [r3, #20]
 80086e8:	f003 0310 	and.w	r3, r3, #16
 80086ec:	2b10      	cmp	r3, #16
 80086ee:	d119      	bne.n	8008724 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f06f 0210 	mvn.w	r2, #16
 80086f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2220      	movs	r2, #32
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2200      	movs	r2, #0
 800870c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e029      	b.n	8008778 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008724:	f7fd fdfe 	bl	8006324 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	68ba      	ldr	r2, [r7, #8]
 8008730:	429a      	cmp	r2, r3
 8008732:	d302      	bcc.n	800873a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d116      	bne.n	8008768 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2200      	movs	r2, #0
 800873e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	f043 0220 	orr.w	r2, r3, #32
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	e007      	b.n	8008778 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008772:	2b40      	cmp	r3, #64	; 0x40
 8008774:	d1b5      	bne.n	80086e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008796:	d11b      	bne.n	80087d0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80087a0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087bc:	f043 0204 	orr.w	r2, r3, #4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	e000      	b.n	80087d2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
	...

080087e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80087e6:	2300      	movs	r3, #0
 80087e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80087ea:	2300      	movs	r3, #0
 80087ec:	603b      	str	r3, [r7, #0]
 80087ee:	4b20      	ldr	r3, [pc, #128]	; (8008870 <HAL_PWREx_EnableOverDrive+0x90>)
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <HAL_PWREx_EnableOverDrive+0x90>)
 80087f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f8:	6413      	str	r3, [r2, #64]	; 0x40
 80087fa:	4b1d      	ldr	r3, [pc, #116]	; (8008870 <HAL_PWREx_EnableOverDrive+0x90>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008806:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <HAL_PWREx_EnableOverDrive+0x94>)
 8008808:	2201      	movs	r2, #1
 800880a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800880c:	f7fd fd8a 	bl	8006324 <HAL_GetTick>
 8008810:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008812:	e009      	b.n	8008828 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008814:	f7fd fd86 	bl	8006324 <HAL_GetTick>
 8008818:	4602      	mov	r2, r0
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008822:	d901      	bls.n	8008828 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008824:	2303      	movs	r3, #3
 8008826:	e01f      	b.n	8008868 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <HAL_PWREx_EnableOverDrive+0x98>)
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008834:	d1ee      	bne.n	8008814 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008838:	2201      	movs	r2, #1
 800883a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800883c:	f7fd fd72 	bl	8006324 <HAL_GetTick>
 8008840:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008842:	e009      	b.n	8008858 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008844:	f7fd fd6e 	bl	8006324 <HAL_GetTick>
 8008848:	4602      	mov	r2, r0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008852:	d901      	bls.n	8008858 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e007      	b.n	8008868 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <HAL_PWREx_EnableOverDrive+0x98>)
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008860:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008864:	d1ee      	bne.n	8008844 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008866:	2300      	movs	r3, #0
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	40023800 	.word	0x40023800
 8008874:	420e0040 	.word	0x420e0040
 8008878:	40007000 	.word	0x40007000
 800887c:	420e0044 	.word	0x420e0044

08008880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b084      	sub	sp, #16
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e0cc      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008894:	4b68      	ldr	r3, [pc, #416]	; (8008a38 <HAL_RCC_ClockConfig+0x1b8>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 030f 	and.w	r3, r3, #15
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d90c      	bls.n	80088bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088a2:	4b65      	ldr	r3, [pc, #404]	; (8008a38 <HAL_RCC_ClockConfig+0x1b8>)
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	b2d2      	uxtb	r2, r2
 80088a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80088aa:	4b63      	ldr	r3, [pc, #396]	; (8008a38 <HAL_RCC_ClockConfig+0x1b8>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d001      	beq.n	80088bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e0b8      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d020      	beq.n	800890a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088d4:	4b59      	ldr	r3, [pc, #356]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	4a58      	ldr	r2, [pc, #352]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80088da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d005      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088ec:	4b53      	ldr	r3, [pc, #332]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	4a52      	ldr	r2, [pc, #328]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80088f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088f8:	4b50      	ldr	r3, [pc, #320]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	494d      	ldr	r1, [pc, #308]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008906:	4313      	orrs	r3, r2
 8008908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b00      	cmp	r3, #0
 8008914:	d044      	beq.n	80089a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685b      	ldr	r3, [r3, #4]
 800891a:	2b01      	cmp	r3, #1
 800891c:	d107      	bne.n	800892e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800891e:	4b47      	ldr	r3, [pc, #284]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008926:	2b00      	cmp	r3, #0
 8008928:	d119      	bne.n	800895e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e07f      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2b02      	cmp	r3, #2
 8008934:	d003      	beq.n	800893e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800893a:	2b03      	cmp	r3, #3
 800893c:	d107      	bne.n	800894e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800893e:	4b3f      	ldr	r3, [pc, #252]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d109      	bne.n	800895e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800894a:	2301      	movs	r3, #1
 800894c:	e06f      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800894e:	4b3b      	ldr	r3, [pc, #236]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e067      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800895e:	4b37      	ldr	r3, [pc, #220]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	f023 0203 	bic.w	r2, r3, #3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	4934      	ldr	r1, [pc, #208]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 800896c:	4313      	orrs	r3, r2
 800896e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008970:	f7fd fcd8 	bl	8006324 <HAL_GetTick>
 8008974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008976:	e00a      	b.n	800898e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008978:	f7fd fcd4 	bl	8006324 <HAL_GetTick>
 800897c:	4602      	mov	r2, r0
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	f241 3288 	movw	r2, #5000	; 0x1388
 8008986:	4293      	cmp	r3, r2
 8008988:	d901      	bls.n	800898e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800898a:	2303      	movs	r3, #3
 800898c:	e04f      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800898e:	4b2b      	ldr	r3, [pc, #172]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 020c 	and.w	r2, r3, #12
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	009b      	lsls	r3, r3, #2
 800899c:	429a      	cmp	r2, r3
 800899e:	d1eb      	bne.n	8008978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089a0:	4b25      	ldr	r3, [pc, #148]	; (8008a38 <HAL_RCC_ClockConfig+0x1b8>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 030f 	and.w	r3, r3, #15
 80089a8:	683a      	ldr	r2, [r7, #0]
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d20c      	bcs.n	80089c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ae:	4b22      	ldr	r3, [pc, #136]	; (8008a38 <HAL_RCC_ClockConfig+0x1b8>)
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	b2d2      	uxtb	r2, r2
 80089b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089b6:	4b20      	ldr	r3, [pc, #128]	; (8008a38 <HAL_RCC_ClockConfig+0x1b8>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 030f 	and.w	r3, r3, #15
 80089be:	683a      	ldr	r2, [r7, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d001      	beq.n	80089c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e032      	b.n	8008a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0304 	and.w	r3, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089d4:	4b19      	ldr	r3, [pc, #100]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	4916      	ldr	r1, [pc, #88]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f003 0308 	and.w	r3, r3, #8
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d009      	beq.n	8008a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80089f2:	4b12      	ldr	r3, [pc, #72]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	490e      	ldr	r1, [pc, #56]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a06:	f000 f821 	bl	8008a4c <HAL_RCC_GetSysClockFreq>
 8008a0a:	4601      	mov	r1, r0
 8008a0c:	4b0b      	ldr	r3, [pc, #44]	; (8008a3c <HAL_RCC_ClockConfig+0x1bc>)
 8008a0e:	689b      	ldr	r3, [r3, #8]
 8008a10:	091b      	lsrs	r3, r3, #4
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	4a0a      	ldr	r2, [pc, #40]	; (8008a40 <HAL_RCC_ClockConfig+0x1c0>)
 8008a18:	5cd3      	ldrb	r3, [r2, r3]
 8008a1a:	fa21 f303 	lsr.w	r3, r1, r3
 8008a1e:	4a09      	ldr	r2, [pc, #36]	; (8008a44 <HAL_RCC_ClockConfig+0x1c4>)
 8008a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <HAL_RCC_ClockConfig+0x1c8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7fd fc38 	bl	800629c <HAL_InitTick>

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}
 8008a36:	bf00      	nop
 8008a38:	40023c00 	.word	0x40023c00
 8008a3c:	40023800 	.word	0x40023800
 8008a40:	08017bf8 	.word	0x08017bf8
 8008a44:	20000000 	.word	0x20000000
 8008a48:	20000004 	.word	0x20000004

08008a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	607b      	str	r3, [r7, #4]
 8008a56:	2300      	movs	r3, #0
 8008a58:	60fb      	str	r3, [r7, #12]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a62:	4b63      	ldr	r3, [pc, #396]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	f003 030c 	and.w	r3, r3, #12
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d007      	beq.n	8008a7e <HAL_RCC_GetSysClockFreq+0x32>
 8008a6e:	2b08      	cmp	r3, #8
 8008a70:	d008      	beq.n	8008a84 <HAL_RCC_GetSysClockFreq+0x38>
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f040 80b4 	bne.w	8008be0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a78:	4b5e      	ldr	r3, [pc, #376]	; (8008bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008a7a:	60bb      	str	r3, [r7, #8]
       break;
 8008a7c:	e0b3      	b.n	8008be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a7e:	4b5d      	ldr	r3, [pc, #372]	; (8008bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008a80:	60bb      	str	r3, [r7, #8]
      break;
 8008a82:	e0b0      	b.n	8008be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a84:	4b5a      	ldr	r3, [pc, #360]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a8c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008a8e:	4b58      	ldr	r3, [pc, #352]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d04a      	beq.n	8008b30 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a9a:	4b55      	ldr	r3, [pc, #340]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	099b      	lsrs	r3, r3, #6
 8008aa0:	f04f 0400 	mov.w	r4, #0
 8008aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008aa8:	f04f 0200 	mov.w	r2, #0
 8008aac:	ea03 0501 	and.w	r5, r3, r1
 8008ab0:	ea04 0602 	and.w	r6, r4, r2
 8008ab4:	4629      	mov	r1, r5
 8008ab6:	4632      	mov	r2, r6
 8008ab8:	f04f 0300 	mov.w	r3, #0
 8008abc:	f04f 0400 	mov.w	r4, #0
 8008ac0:	0154      	lsls	r4, r2, #5
 8008ac2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ac6:	014b      	lsls	r3, r1, #5
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4622      	mov	r2, r4
 8008acc:	1b49      	subs	r1, r1, r5
 8008ace:	eb62 0206 	sbc.w	r2, r2, r6
 8008ad2:	f04f 0300 	mov.w	r3, #0
 8008ad6:	f04f 0400 	mov.w	r4, #0
 8008ada:	0194      	lsls	r4, r2, #6
 8008adc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008ae0:	018b      	lsls	r3, r1, #6
 8008ae2:	1a5b      	subs	r3, r3, r1
 8008ae4:	eb64 0402 	sbc.w	r4, r4, r2
 8008ae8:	f04f 0100 	mov.w	r1, #0
 8008aec:	f04f 0200 	mov.w	r2, #0
 8008af0:	00e2      	lsls	r2, r4, #3
 8008af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008af6:	00d9      	lsls	r1, r3, #3
 8008af8:	460b      	mov	r3, r1
 8008afa:	4614      	mov	r4, r2
 8008afc:	195b      	adds	r3, r3, r5
 8008afe:	eb44 0406 	adc.w	r4, r4, r6
 8008b02:	f04f 0100 	mov.w	r1, #0
 8008b06:	f04f 0200 	mov.w	r2, #0
 8008b0a:	02a2      	lsls	r2, r4, #10
 8008b0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008b10:	0299      	lsls	r1, r3, #10
 8008b12:	460b      	mov	r3, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	4618      	mov	r0, r3
 8008b18:	4621      	mov	r1, r4
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f04f 0400 	mov.w	r4, #0
 8008b20:	461a      	mov	r2, r3
 8008b22:	4623      	mov	r3, r4
 8008b24:	f7f8 f8c8 	bl	8000cb8 <__aeabi_uldivmod>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	460c      	mov	r4, r1
 8008b2c:	60fb      	str	r3, [r7, #12]
 8008b2e:	e049      	b.n	8008bc4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b30:	4b2f      	ldr	r3, [pc, #188]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	099b      	lsrs	r3, r3, #6
 8008b36:	f04f 0400 	mov.w	r4, #0
 8008b3a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008b3e:	f04f 0200 	mov.w	r2, #0
 8008b42:	ea03 0501 	and.w	r5, r3, r1
 8008b46:	ea04 0602 	and.w	r6, r4, r2
 8008b4a:	4629      	mov	r1, r5
 8008b4c:	4632      	mov	r2, r6
 8008b4e:	f04f 0300 	mov.w	r3, #0
 8008b52:	f04f 0400 	mov.w	r4, #0
 8008b56:	0154      	lsls	r4, r2, #5
 8008b58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008b5c:	014b      	lsls	r3, r1, #5
 8008b5e:	4619      	mov	r1, r3
 8008b60:	4622      	mov	r2, r4
 8008b62:	1b49      	subs	r1, r1, r5
 8008b64:	eb62 0206 	sbc.w	r2, r2, r6
 8008b68:	f04f 0300 	mov.w	r3, #0
 8008b6c:	f04f 0400 	mov.w	r4, #0
 8008b70:	0194      	lsls	r4, r2, #6
 8008b72:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008b76:	018b      	lsls	r3, r1, #6
 8008b78:	1a5b      	subs	r3, r3, r1
 8008b7a:	eb64 0402 	sbc.w	r4, r4, r2
 8008b7e:	f04f 0100 	mov.w	r1, #0
 8008b82:	f04f 0200 	mov.w	r2, #0
 8008b86:	00e2      	lsls	r2, r4, #3
 8008b88:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008b8c:	00d9      	lsls	r1, r3, #3
 8008b8e:	460b      	mov	r3, r1
 8008b90:	4614      	mov	r4, r2
 8008b92:	195b      	adds	r3, r3, r5
 8008b94:	eb44 0406 	adc.w	r4, r4, r6
 8008b98:	f04f 0100 	mov.w	r1, #0
 8008b9c:	f04f 0200 	mov.w	r2, #0
 8008ba0:	02a2      	lsls	r2, r4, #10
 8008ba2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008ba6:	0299      	lsls	r1, r3, #10
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4614      	mov	r4, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	4621      	mov	r1, r4
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f04f 0400 	mov.w	r4, #0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	4623      	mov	r3, r4
 8008bba:	f7f8 f87d 	bl	8000cb8 <__aeabi_uldivmod>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	460c      	mov	r4, r1
 8008bc2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008bc4:	4b0a      	ldr	r3, [pc, #40]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	0c1b      	lsrs	r3, r3, #16
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	3301      	adds	r3, #1
 8008bd0:	005b      	lsls	r3, r3, #1
 8008bd2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008bd4:	68fa      	ldr	r2, [r7, #12]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bdc:	60bb      	str	r3, [r7, #8]
      break;
 8008bde:	e002      	b.n	8008be6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008be0:	4b04      	ldr	r3, [pc, #16]	; (8008bf4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8008be2:	60bb      	str	r3, [r7, #8]
      break;
 8008be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008be6:	68bb      	ldr	r3, [r7, #8]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bf0:	40023800 	.word	0x40023800
 8008bf4:	00f42400 	.word	0x00f42400

08008bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008bfc:	4b03      	ldr	r3, [pc, #12]	; (8008c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	20000000 	.word	0x20000000

08008c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008c14:	f7ff fff0 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c18:	4601      	mov	r1, r0
 8008c1a:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	0a9b      	lsrs	r3, r3, #10
 8008c20:	f003 0307 	and.w	r3, r3, #7
 8008c24:	4a03      	ldr	r2, [pc, #12]	; (8008c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c26:	5cd3      	ldrb	r3, [r2, r3]
 8008c28:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	40023800 	.word	0x40023800
 8008c34:	08017c08 	.word	0x08017c08

08008c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008c3c:	f7ff ffdc 	bl	8008bf8 <HAL_RCC_GetHCLKFreq>
 8008c40:	4601      	mov	r1, r0
 8008c42:	4b05      	ldr	r3, [pc, #20]	; (8008c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	0b5b      	lsrs	r3, r3, #13
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	4a03      	ldr	r2, [pc, #12]	; (8008c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c4e:	5cd3      	ldrb	r3, [r2, r3]
 8008c50:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	08017c08 	.word	0x08017c08

08008c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008c70:	2300      	movs	r3, #0
 8008c72:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00a      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008c88:	4b66      	ldr	r3, [pc, #408]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c8e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c96:	4963      	ldr	r1, [pc, #396]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00a      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008caa:	4b5e      	ldr	r3, [pc, #376]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cb8:	495a      	ldr	r1, [pc, #360]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d10b      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d105      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d075      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008ce4:	4b50      	ldr	r3, [pc, #320]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008cea:	f7fd fb1b 	bl	8006324 <HAL_GetTick>
 8008cee:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008cf2:	f7fd fb17 	bl	8006324 <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e1dc      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008d04:	4b47      	ldr	r3, [pc, #284]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d1f0      	bne.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0301 	and.w	r3, r3, #1
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d009      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	019a      	lsls	r2, r3, #6
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	071b      	lsls	r3, r3, #28
 8008d28:	493e      	ldr	r1, [pc, #248]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0302 	and.w	r3, r3, #2
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d01f      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008d3c:	4b39      	ldr	r3, [pc, #228]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d42:	0f1b      	lsrs	r3, r3, #28
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	019a      	lsls	r2, r3, #6
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	061b      	lsls	r3, r3, #24
 8008d56:	431a      	orrs	r2, r3
 8008d58:	69bb      	ldr	r3, [r7, #24]
 8008d5a:	071b      	lsls	r3, r3, #28
 8008d5c:	4931      	ldr	r1, [pc, #196]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008d64:	4b2f      	ldr	r3, [pc, #188]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d6a:	f023 021f 	bic.w	r2, r3, #31
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	492b      	ldr	r1, [pc, #172]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00d      	beq.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	019a      	lsls	r2, r3, #6
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	061b      	lsls	r3, r3, #24
 8008d94:	431a      	orrs	r2, r3
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	071b      	lsls	r3, r3, #28
 8008d9c:	4921      	ldr	r1, [pc, #132]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008da4:	4b20      	ldr	r3, [pc, #128]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8008da6:	2201      	movs	r2, #1
 8008da8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008daa:	f7fd fabb 	bl	8006324 <HAL_GetTick>
 8008dae:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008db0:	e008      	b.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008db2:	f7fd fab7 	bl	8006324 <HAL_GetTick>
 8008db6:	4602      	mov	r2, r0
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	d901      	bls.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008dc0:	2303      	movs	r3, #3
 8008dc2:	e17c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008dc4:	4b17      	ldr	r3, [pc, #92]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d0f0      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f003 0304 	and.w	r3, r3, #4
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d112      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10c      	bne.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 80ce 	beq.w	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 8008dfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008dfe:	f040 80c8 	bne.w	8008f92 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008e02:	4b0a      	ldr	r3, [pc, #40]	; (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008e08:	f7fd fa8c 	bl	8006324 <HAL_GetTick>
 8008e0c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e0e:	e00f      	b.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008e10:	f7fd fa88 	bl	8006324 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d908      	bls.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e14d      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008e22:	bf00      	nop
 8008e24:	40023800 	.word	0x40023800
 8008e28:	42470068 	.word	0x42470068
 8008e2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008e30:	4ba5      	ldr	r3, [pc, #660]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e3c:	d0e8      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f003 0304 	and.w	r3, r3, #4
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d02e      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008e4a:	4b9f      	ldr	r3, [pc, #636]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e50:	0c1b      	lsrs	r3, r3, #16
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	3301      	adds	r3, #1
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008e5c:	4b9a      	ldr	r3, [pc, #616]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e62:	0f1b      	lsrs	r3, r3, #28
 8008e64:	f003 0307 	and.w	r3, r3, #7
 8008e68:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691b      	ldr	r3, [r3, #16]
 8008e6e:	019a      	lsls	r2, r3, #6
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	085b      	lsrs	r3, r3, #1
 8008e74:	3b01      	subs	r3, #1
 8008e76:	041b      	lsls	r3, r3, #16
 8008e78:	431a      	orrs	r2, r3
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	061b      	lsls	r3, r3, #24
 8008e80:	431a      	orrs	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	071b      	lsls	r3, r3, #28
 8008e86:	4990      	ldr	r1, [pc, #576]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008e8e:	4b8e      	ldr	r3, [pc, #568]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e94:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	021b      	lsls	r3, r3, #8
 8008ea0:	4989      	ldr	r1, [pc, #548]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f003 0308 	and.w	r3, r3, #8
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d02c      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008eb4:	4b84      	ldr	r3, [pc, #528]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	f003 0303 	and.w	r3, r3, #3
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	005b      	lsls	r3, r3, #1
 8008ec4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ec6:	4b80      	ldr	r3, [pc, #512]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	0e1b      	lsrs	r3, r3, #24
 8008ece:	f003 030f 	and.w	r3, r3, #15
 8008ed2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	019a      	lsls	r2, r3, #6
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	085b      	lsrs	r3, r3, #1
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	041b      	lsls	r3, r3, #16
 8008ee2:	431a      	orrs	r2, r3
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	061b      	lsls	r3, r3, #24
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	071b      	lsls	r3, r3, #28
 8008ef0:	4975      	ldr	r1, [pc, #468]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008ef8:	4b73      	ldr	r3, [pc, #460]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008efa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008efe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f06:	4970      	ldr	r1, [pc, #448]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d024      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008f1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f22:	d11f      	bne.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008f24:	4b68      	ldr	r3, [pc, #416]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2a:	0e1b      	lsrs	r3, r3, #24
 8008f2c:	f003 030f 	and.w	r3, r3, #15
 8008f30:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008f32:	4b65      	ldr	r3, [pc, #404]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f38:	0f1b      	lsrs	r3, r3, #28
 8008f3a:	f003 0307 	and.w	r3, r3, #7
 8008f3e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	019a      	lsls	r2, r3, #6
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	085b      	lsrs	r3, r3, #1
 8008f4c:	3b01      	subs	r3, #1
 8008f4e:	041b      	lsls	r3, r3, #16
 8008f50:	431a      	orrs	r2, r3
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	061b      	lsls	r3, r3, #24
 8008f56:	431a      	orrs	r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	071b      	lsls	r3, r3, #28
 8008f5c:	495a      	ldr	r1, [pc, #360]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008f64:	4b59      	ldr	r3, [pc, #356]	; (80090cc <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8008f66:	2201      	movs	r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008f6a:	f7fd f9db 	bl	8006324 <HAL_GetTick>
 8008f6e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f70:	e008      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008f72:	f7fd f9d7 	bl	8006324 <HAL_GetTick>
 8008f76:	4602      	mov	r2, r0
 8008f78:	69fb      	ldr	r3, [r7, #28]
 8008f7a:	1ad3      	subs	r3, r2, r3
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d901      	bls.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008f80:	2303      	movs	r3, #3
 8008f82:	e09c      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008f84:	4b50      	ldr	r3, [pc, #320]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f90:	d1ef      	bne.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0320 	and.w	r3, r3, #32
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8083 	beq.w	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	60bb      	str	r3, [r7, #8]
 8008fa4:	4b48      	ldr	r3, [pc, #288]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	4a47      	ldr	r2, [pc, #284]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fae:	6413      	str	r3, [r2, #64]	; 0x40
 8008fb0:	4b45      	ldr	r3, [pc, #276]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fb8:	60bb      	str	r3, [r7, #8]
 8008fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008fbc:	4b44      	ldr	r3, [pc, #272]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a43      	ldr	r2, [pc, #268]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fc8:	f7fd f9ac 	bl	8006324 <HAL_GetTick>
 8008fcc:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fce:	e008      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008fd0:	f7fd f9a8 	bl	8006324 <HAL_GetTick>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e06d      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008fe2:	4b3b      	ldr	r3, [pc, #236]	; (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f0      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008fee:	4b36      	ldr	r3, [pc, #216]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ff6:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d02f      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009006:	69ba      	ldr	r2, [r7, #24]
 8009008:	429a      	cmp	r2, r3
 800900a:	d028      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800900c:	4b2e      	ldr	r3, [pc, #184]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800900e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009014:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009018:	2201      	movs	r2, #1
 800901a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800901c:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009022:	4a29      	ldr	r2, [pc, #164]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009028:	4b27      	ldr	r3, [pc, #156]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800902a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b01      	cmp	r3, #1
 8009032:	d114      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009034:	f7fd f976 	bl	8006324 <HAL_GetTick>
 8009038:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800903a:	e00a      	b.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800903c:	f7fd f972 	bl	8006324 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	69fb      	ldr	r3, [r7, #28]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	f241 3288 	movw	r2, #5000	; 0x1388
 800904a:	4293      	cmp	r3, r2
 800904c:	d901      	bls.n	8009052 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e035      	b.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009052:	4b1d      	ldr	r3, [pc, #116]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009056:	f003 0302 	and.w	r3, r3, #2
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0ee      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800906a:	d10d      	bne.n	8009088 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800906c:	4b16      	ldr	r3, [pc, #88]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009078:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800907c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009080:	4911      	ldr	r1, [pc, #68]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009082:	4313      	orrs	r3, r2
 8009084:	608b      	str	r3, [r1, #8]
 8009086:	e005      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8009088:	4b0f      	ldr	r3, [pc, #60]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	4a0e      	ldr	r2, [pc, #56]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800908e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009092:	6093      	str	r3, [r2, #8]
 8009094:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8009096:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a0:	4909      	ldr	r1, [pc, #36]	; (80090c8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0310 	and.w	r3, r3, #16
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80090b8:	4b07      	ldr	r3, [pc, #28]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80090ba:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	40023800 	.word	0x40023800
 80090cc:	42470070 	.word	0x42470070
 80090d0:	40007000 	.word	0x40007000
 80090d4:	42470e40 	.word	0x42470e40
 80090d8:	424711e0 	.word	0x424711e0

080090dc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b086      	sub	sp, #24
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090e4:	2300      	movs	r3, #0
 80090e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d075      	beq.n	80091e0 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80090f4:	4ba2      	ldr	r3, [pc, #648]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	f003 030c 	and.w	r3, r3, #12
 80090fc:	2b04      	cmp	r3, #4
 80090fe:	d00c      	beq.n	800911a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009100:	4b9f      	ldr	r3, [pc, #636]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009108:	2b08      	cmp	r3, #8
 800910a:	d112      	bne.n	8009132 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800910c:	4b9c      	ldr	r3, [pc, #624]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009114:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009118:	d10b      	bne.n	8009132 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800911a:	4b99      	ldr	r3, [pc, #612]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d05b      	beq.n	80091de <HAL_RCC_OscConfig+0x102>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d157      	bne.n	80091de <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e20b      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800913a:	d106      	bne.n	800914a <HAL_RCC_OscConfig+0x6e>
 800913c:	4b90      	ldr	r3, [pc, #576]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a8f      	ldr	r2, [pc, #572]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009146:	6013      	str	r3, [r2, #0]
 8009148:	e01d      	b.n	8009186 <HAL_RCC_OscConfig+0xaa>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009152:	d10c      	bne.n	800916e <HAL_RCC_OscConfig+0x92>
 8009154:	4b8a      	ldr	r3, [pc, #552]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a89      	ldr	r2, [pc, #548]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800915a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	4b87      	ldr	r3, [pc, #540]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a86      	ldr	r2, [pc, #536]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	e00b      	b.n	8009186 <HAL_RCC_OscConfig+0xaa>
 800916e:	4b84      	ldr	r3, [pc, #528]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a83      	ldr	r2, [pc, #524]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	4b81      	ldr	r3, [pc, #516]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a80      	ldr	r2, [pc, #512]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009180:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009184:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d013      	beq.n	80091b6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800918e:	f7fd f8c9 	bl	8006324 <HAL_GetTick>
 8009192:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009194:	e008      	b.n	80091a8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009196:	f7fd f8c5 	bl	8006324 <HAL_GetTick>
 800919a:	4602      	mov	r2, r0
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	1ad3      	subs	r3, r2, r3
 80091a0:	2b64      	cmp	r3, #100	; 0x64
 80091a2:	d901      	bls.n	80091a8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80091a4:	2303      	movs	r3, #3
 80091a6:	e1d0      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091a8:	4b75      	ldr	r3, [pc, #468]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d0f0      	beq.n	8009196 <HAL_RCC_OscConfig+0xba>
 80091b4:	e014      	b.n	80091e0 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b6:	f7fd f8b5 	bl	8006324 <HAL_GetTick>
 80091ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091bc:	e008      	b.n	80091d0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091be:	f7fd f8b1 	bl	8006324 <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b64      	cmp	r3, #100	; 0x64
 80091ca:	d901      	bls.n	80091d0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e1bc      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091d0:	4b6b      	ldr	r3, [pc, #428]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <HAL_RCC_OscConfig+0xe2>
 80091dc:	e000      	b.n	80091e0 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0302 	and.w	r3, r3, #2
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d063      	beq.n	80092b4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80091ec:	4b64      	ldr	r3, [pc, #400]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f003 030c 	and.w	r3, r3, #12
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80091f8:	4b61      	ldr	r3, [pc, #388]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009200:	2b08      	cmp	r3, #8
 8009202:	d11c      	bne.n	800923e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009204:	4b5e      	ldr	r3, [pc, #376]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d116      	bne.n	800923e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009210:	4b5b      	ldr	r3, [pc, #364]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d005      	beq.n	8009228 <HAL_RCC_OscConfig+0x14c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68db      	ldr	r3, [r3, #12]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d001      	beq.n	8009228 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e190      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009228:	4b55      	ldr	r3, [pc, #340]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	00db      	lsls	r3, r3, #3
 8009236:	4952      	ldr	r1, [pc, #328]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009238:	4313      	orrs	r3, r2
 800923a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800923c:	e03a      	b.n	80092b4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d020      	beq.n	8009288 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009246:	4b4f      	ldr	r3, [pc, #316]	; (8009384 <HAL_RCC_OscConfig+0x2a8>)
 8009248:	2201      	movs	r2, #1
 800924a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800924c:	f7fd f86a 	bl	8006324 <HAL_GetTick>
 8009250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009252:	e008      	b.n	8009266 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009254:	f7fd f866 	bl	8006324 <HAL_GetTick>
 8009258:	4602      	mov	r2, r0
 800925a:	693b      	ldr	r3, [r7, #16]
 800925c:	1ad3      	subs	r3, r2, r3
 800925e:	2b02      	cmp	r3, #2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e171      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009266:	4b46      	ldr	r3, [pc, #280]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0f0      	beq.n	8009254 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009272:	4b43      	ldr	r3, [pc, #268]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	493f      	ldr	r1, [pc, #252]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009282:	4313      	orrs	r3, r2
 8009284:	600b      	str	r3, [r1, #0]
 8009286:	e015      	b.n	80092b4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009288:	4b3e      	ldr	r3, [pc, #248]	; (8009384 <HAL_RCC_OscConfig+0x2a8>)
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800928e:	f7fd f849 	bl	8006324 <HAL_GetTick>
 8009292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009294:	e008      	b.n	80092a8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009296:	f7fd f845 	bl	8006324 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e150      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092a8:	4b35      	ldr	r3, [pc, #212]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0302 	and.w	r3, r3, #2
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d1f0      	bne.n	8009296 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 0308 	and.w	r3, r3, #8
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d030      	beq.n	8009322 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d016      	beq.n	80092f6 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092c8:	4b2f      	ldr	r3, [pc, #188]	; (8009388 <HAL_RCC_OscConfig+0x2ac>)
 80092ca:	2201      	movs	r2, #1
 80092cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ce:	f7fd f829 	bl	8006324 <HAL_GetTick>
 80092d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092d4:	e008      	b.n	80092e8 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80092d6:	f7fd f825 	bl	8006324 <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d901      	bls.n	80092e8 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e130      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092e8:	4b25      	ldr	r3, [pc, #148]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 80092ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d0f0      	beq.n	80092d6 <HAL_RCC_OscConfig+0x1fa>
 80092f4:	e015      	b.n	8009322 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092f6:	4b24      	ldr	r3, [pc, #144]	; (8009388 <HAL_RCC_OscConfig+0x2ac>)
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092fc:	f7fd f812 	bl	8006324 <HAL_GetTick>
 8009300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009304:	f7fd f80e 	bl	8006324 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e119      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009316:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	2b00      	cmp	r3, #0
 8009320:	d1f0      	bne.n	8009304 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 809f 	beq.w	800946e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009330:	2300      	movs	r3, #0
 8009332:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009334:	4b12      	ldr	r3, [pc, #72]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d10f      	bne.n	8009360 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009340:	2300      	movs	r3, #0
 8009342:	60fb      	str	r3, [r7, #12]
 8009344:	4b0e      	ldr	r3, [pc, #56]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	4a0d      	ldr	r2, [pc, #52]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 800934a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800934e:	6413      	str	r3, [r2, #64]	; 0x40
 8009350:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <HAL_RCC_OscConfig+0x2a4>)
 8009352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009358:	60fb      	str	r3, [r7, #12]
 800935a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800935c:	2301      	movs	r3, #1
 800935e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009360:	4b0a      	ldr	r3, [pc, #40]	; (800938c <HAL_RCC_OscConfig+0x2b0>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009368:	2b00      	cmp	r3, #0
 800936a:	d120      	bne.n	80093ae <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <HAL_RCC_OscConfig+0x2b0>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a06      	ldr	r2, [pc, #24]	; (800938c <HAL_RCC_OscConfig+0x2b0>)
 8009372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009378:	f7fc ffd4 	bl	8006324 <HAL_GetTick>
 800937c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800937e:	e010      	b.n	80093a2 <HAL_RCC_OscConfig+0x2c6>
 8009380:	40023800 	.word	0x40023800
 8009384:	42470000 	.word	0x42470000
 8009388:	42470e80 	.word	0x42470e80
 800938c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009390:	f7fc ffc8 	bl	8006324 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e0d3      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093a2:	4b6c      	ldr	r3, [pc, #432]	; (8009554 <HAL_RCC_OscConfig+0x478>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0f0      	beq.n	8009390 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d106      	bne.n	80093c4 <HAL_RCC_OscConfig+0x2e8>
 80093b6:	4b68      	ldr	r3, [pc, #416]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ba:	4a67      	ldr	r2, [pc, #412]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093bc:	f043 0301 	orr.w	r3, r3, #1
 80093c0:	6713      	str	r3, [r2, #112]	; 0x70
 80093c2:	e01c      	b.n	80093fe <HAL_RCC_OscConfig+0x322>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2b05      	cmp	r3, #5
 80093ca:	d10c      	bne.n	80093e6 <HAL_RCC_OscConfig+0x30a>
 80093cc:	4b62      	ldr	r3, [pc, #392]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d0:	4a61      	ldr	r2, [pc, #388]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093d2:	f043 0304 	orr.w	r3, r3, #4
 80093d6:	6713      	str	r3, [r2, #112]	; 0x70
 80093d8:	4b5f      	ldr	r3, [pc, #380]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093dc:	4a5e      	ldr	r2, [pc, #376]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093de:	f043 0301 	orr.w	r3, r3, #1
 80093e2:	6713      	str	r3, [r2, #112]	; 0x70
 80093e4:	e00b      	b.n	80093fe <HAL_RCC_OscConfig+0x322>
 80093e6:	4b5c      	ldr	r3, [pc, #368]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	4a5b      	ldr	r2, [pc, #364]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093ec:	f023 0301 	bic.w	r3, r3, #1
 80093f0:	6713      	str	r3, [r2, #112]	; 0x70
 80093f2:	4b59      	ldr	r3, [pc, #356]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f6:	4a58      	ldr	r2, [pc, #352]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80093f8:	f023 0304 	bic.w	r3, r3, #4
 80093fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d015      	beq.n	8009432 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009406:	f7fc ff8d 	bl	8006324 <HAL_GetTick>
 800940a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800940c:	e00a      	b.n	8009424 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800940e:	f7fc ff89 	bl	8006324 <HAL_GetTick>
 8009412:	4602      	mov	r2, r0
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	1ad3      	subs	r3, r2, r3
 8009418:	f241 3288 	movw	r2, #5000	; 0x1388
 800941c:	4293      	cmp	r3, r2
 800941e:	d901      	bls.n	8009424 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8009420:	2303      	movs	r3, #3
 8009422:	e092      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009424:	4b4c      	ldr	r3, [pc, #304]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 8009426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009428:	f003 0302 	and.w	r3, r3, #2
 800942c:	2b00      	cmp	r3, #0
 800942e:	d0ee      	beq.n	800940e <HAL_RCC_OscConfig+0x332>
 8009430:	e014      	b.n	800945c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009432:	f7fc ff77 	bl	8006324 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009438:	e00a      	b.n	8009450 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800943a:	f7fc ff73 	bl	8006324 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	f241 3288 	movw	r2, #5000	; 0x1388
 8009448:	4293      	cmp	r3, r2
 800944a:	d901      	bls.n	8009450 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e07c      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009450:	4b41      	ldr	r3, [pc, #260]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 8009452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009454:	f003 0302 	and.w	r3, r3, #2
 8009458:	2b00      	cmp	r3, #0
 800945a:	d1ee      	bne.n	800943a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800945c:	7dfb      	ldrb	r3, [r7, #23]
 800945e:	2b01      	cmp	r3, #1
 8009460:	d105      	bne.n	800946e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009462:	4b3d      	ldr	r3, [pc, #244]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 8009464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009466:	4a3c      	ldr	r2, [pc, #240]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 8009468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800946c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d068      	beq.n	8009548 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009476:	4b38      	ldr	r3, [pc, #224]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f003 030c 	and.w	r3, r3, #12
 800947e:	2b08      	cmp	r3, #8
 8009480:	d060      	beq.n	8009544 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	2b02      	cmp	r3, #2
 8009488:	d145      	bne.n	8009516 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800948a:	4b34      	ldr	r3, [pc, #208]	; (800955c <HAL_RCC_OscConfig+0x480>)
 800948c:	2200      	movs	r2, #0
 800948e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009490:	f7fc ff48 	bl	8006324 <HAL_GetTick>
 8009494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009496:	e008      	b.n	80094aa <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009498:	f7fc ff44 	bl	8006324 <HAL_GetTick>
 800949c:	4602      	mov	r2, r0
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d901      	bls.n	80094aa <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	e04f      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094aa:	4b2b      	ldr	r3, [pc, #172]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1f0      	bne.n	8009498 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	69da      	ldr	r2, [r3, #28]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6a1b      	ldr	r3, [r3, #32]
 80094be:	431a      	orrs	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c4:	019b      	lsls	r3, r3, #6
 80094c6:	431a      	orrs	r2, r3
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	3b01      	subs	r3, #1
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	431a      	orrs	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d8:	061b      	lsls	r3, r3, #24
 80094da:	431a      	orrs	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e0:	071b      	lsls	r3, r3, #28
 80094e2:	491d      	ldr	r1, [pc, #116]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094e8:	4b1c      	ldr	r3, [pc, #112]	; (800955c <HAL_RCC_OscConfig+0x480>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ee:	f7fc ff19 	bl	8006324 <HAL_GetTick>
 80094f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80094f4:	e008      	b.n	8009508 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f6:	f7fc ff15 	bl	8006324 <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	2b02      	cmp	r3, #2
 8009502:	d901      	bls.n	8009508 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8009504:	2303      	movs	r3, #3
 8009506:	e020      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009508:	4b13      	ldr	r3, [pc, #76]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0f0      	beq.n	80094f6 <HAL_RCC_OscConfig+0x41a>
 8009514:	e018      	b.n	8009548 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009516:	4b11      	ldr	r3, [pc, #68]	; (800955c <HAL_RCC_OscConfig+0x480>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800951c:	f7fc ff02 	bl	8006324 <HAL_GetTick>
 8009520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009522:	e008      	b.n	8009536 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009524:	f7fc fefe 	bl	8006324 <HAL_GetTick>
 8009528:	4602      	mov	r2, r0
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	1ad3      	subs	r3, r2, r3
 800952e:	2b02      	cmp	r3, #2
 8009530:	d901      	bls.n	8009536 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8009532:	2303      	movs	r3, #3
 8009534:	e009      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009536:	4b08      	ldr	r3, [pc, #32]	; (8009558 <HAL_RCC_OscConfig+0x47c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800953e:	2b00      	cmp	r3, #0
 8009540:	d1f0      	bne.n	8009524 <HAL_RCC_OscConfig+0x448>
 8009542:	e001      	b.n	8009548 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8009548:	2300      	movs	r3, #0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	40007000 	.word	0x40007000
 8009558:	40023800 	.word	0x40023800
 800955c:	42470060 	.word	0x42470060

08009560 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e022      	b.n	80095b8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d105      	bne.n	800958a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f7fb fcb7 	bl	8004ef8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2203      	movs	r2, #3
 800958e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f814 	bl	80095c0 <HAL_SD_InitCard>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e00a      	b.n	80095b8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3708      	adds	r7, #8
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095c0:	b5b0      	push	{r4, r5, r7, lr}
 80095c2:	b08e      	sub	sp, #56	; 0x38
 80095c4:	af04      	add	r7, sp, #16
 80095c6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80095cc:	2300      	movs	r3, #0
 80095ce:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80095d8:	2300      	movs	r3, #0
 80095da:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80095dc:	2376      	movs	r3, #118	; 0x76
 80095de:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681d      	ldr	r5, [r3, #0]
 80095e4:	466c      	mov	r4, sp
 80095e6:	f107 0314 	add.w	r3, r7, #20
 80095ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80095ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80095f2:	f107 0308 	add.w	r3, r7, #8
 80095f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80095f8:	4628      	mov	r0, r5
 80095fa:	f003 fa87 	bl	800cb0c <SDIO_Init>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e031      	b.n	8009674 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009610:	4b1a      	ldr	r3, [pc, #104]	; (800967c <HAL_SD_InitCard+0xbc>)
 8009612:	2200      	movs	r2, #0
 8009614:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f003 fabf 	bl	800cb9e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009620:	4b16      	ldr	r3, [pc, #88]	; (800967c <HAL_SD_InitCard+0xbc>)
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 ffc6 	bl	800a5b8 <SD_PowerON>
 800962c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00b      	beq.n	800964c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e013      	b.n	8009674 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fee5 	bl	800a41c <SD_InitCard>
 8009652:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2201      	movs	r2, #1
 800965e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	431a      	orrs	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	e000      	b.n	8009674 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8009672:	2300      	movs	r3, #0
}
 8009674:	4618      	mov	r0, r3
 8009676:	3728      	adds	r7, #40	; 0x28
 8009678:	46bd      	mov	sp, r7
 800967a:	bdb0      	pop	{r4, r5, r7, pc}
 800967c:	422580a0 	.word	0x422580a0

08009680 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b08c      	sub	sp, #48	; 0x30
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
 800968c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d107      	bne.n	80096a8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e0c7      	b.n	8009838 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80096ae:	b2db      	uxtb	r3, r3
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	f040 80c0 	bne.w	8009836 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80096bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	441a      	add	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d907      	bls.n	80096da <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80096d6:	2301      	movs	r3, #1
 80096d8:	e0ae      	b.n	8009838 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2203      	movs	r2, #3
 80096de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2200      	movs	r2, #0
 80096e8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80096f8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	4a50      	ldr	r2, [pc, #320]	; (8009840 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009700:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	4a4f      	ldr	r2, [pc, #316]	; (8009844 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8009708:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970e:	2200      	movs	r2, #0
 8009710:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3380      	adds	r3, #128	; 0x80
 800971c:	4619      	mov	r1, r3
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	025b      	lsls	r3, r3, #9
 8009724:	089b      	lsrs	r3, r3, #2
 8009726:	f7fd fbef 	bl	8006f08 <HAL_DMA_Start_IT>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d017      	beq.n	8009760 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800973e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a40      	ldr	r2, [pc, #256]	; (8009848 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009746:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2201      	movs	r2, #1
 8009758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e06b      	b.n	8009838 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009760:	4b3a      	ldr	r3, [pc, #232]	; (800984c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8009762:	2201      	movs	r2, #1
 8009764:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976a:	2b01      	cmp	r3, #1
 800976c:	d002      	beq.n	8009774 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800976e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009770:	025b      	lsls	r3, r3, #9
 8009772:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f44f 7100 	mov.w	r1, #512	; 0x200
 800977c:	4618      	mov	r0, r3
 800977e:	f003 faa1 	bl	800ccc4 <SDMMC_CmdBlockLength>
 8009782:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	2b00      	cmp	r3, #0
 8009788:	d00f      	beq.n	80097aa <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a2e      	ldr	r2, [pc, #184]	; (8009848 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009790:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	431a      	orrs	r2, r3
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2201      	movs	r2, #1
 80097a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e046      	b.n	8009838 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097aa:	f04f 33ff 	mov.w	r3, #4294967295
 80097ae:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	025b      	lsls	r3, r3, #9
 80097b4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80097b6:	2390      	movs	r3, #144	; 0x90
 80097b8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80097ba:	2302      	movs	r3, #2
 80097bc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80097be:	2300      	movs	r3, #0
 80097c0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80097c2:	2301      	movs	r3, #1
 80097c4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f107 0210 	add.w	r2, r7, #16
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f003 fa4b 	bl	800cc6c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d90a      	bls.n	80097f2 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	2282      	movs	r2, #130	; 0x82
 80097e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097e8:	4618      	mov	r0, r3
 80097ea:	f003 faaf 	bl	800cd4c <SDMMC_CmdReadMultiBlock>
 80097ee:	62f8      	str	r0, [r7, #44]	; 0x2c
 80097f0:	e009      	b.n	8009806 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2281      	movs	r2, #129	; 0x81
 80097f6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097fe:	4618      	mov	r0, r3
 8009800:	f003 fa82 	bl	800cd08 <SDMMC_CmdReadSingleBlock>
 8009804:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009808:	2b00      	cmp	r3, #0
 800980a:	d012      	beq.n	8009832 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a0d      	ldr	r2, [pc, #52]	; (8009848 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8009812:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981a:	431a      	orrs	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e002      	b.n	8009838 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	e000      	b.n	8009838 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8009836:	2302      	movs	r3, #2
  }
}
 8009838:	4618      	mov	r0, r3
 800983a:	3730      	adds	r7, #48	; 0x30
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	0800a22b 	.word	0x0800a22b
 8009844:	0800a29d 	.word	0x0800a29d
 8009848:	004005ff 	.word	0x004005ff
 800984c:	4225858c 	.word	0x4225858c

08009850 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08c      	sub	sp, #48	; 0x30
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d107      	bne.n	8009878 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e0ca      	b.n	8009a0e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b01      	cmp	r3, #1
 8009882:	f040 80c3 	bne.w	8009a0c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800988c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	441a      	add	r2, r3
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009896:	429a      	cmp	r2, r3
 8009898:	d907      	bls.n	80098aa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800989e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e0b1      	b.n	8009a0e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	2203      	movs	r2, #3
 80098ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	2200      	movs	r2, #0
 80098b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f042 021a 	orr.w	r2, r2, #26
 80098c8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ce:	4a52      	ldr	r2, [pc, #328]	; (8009a18 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80098d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098d6:	4a51      	ldr	r2, [pc, #324]	; (8009a1c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 80098d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098de:	2200      	movs	r2, #0
 80098e0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d002      	beq.n	80098f0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	025b      	lsls	r3, r3, #9
 80098ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80098f8:	4618      	mov	r0, r3
 80098fa:	f003 f9e3 	bl	800ccc4 <SDMMC_CmdBlockLength>
 80098fe:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	2b00      	cmp	r3, #0
 8009904:	d00f      	beq.n	8009926 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a45      	ldr	r2, [pc, #276]	; (8009a20 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800990c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009914:	431a      	orrs	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e073      	b.n	8009a0e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d90a      	bls.n	8009942 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	22a0      	movs	r2, #160	; 0xa0
 8009930:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009938:	4618      	mov	r0, r3
 800993a:	f003 fa4b 	bl	800cdd4 <SDMMC_CmdWriteMultiBlock>
 800993e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8009940:	e009      	b.n	8009956 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2290      	movs	r2, #144	; 0x90
 8009946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800994e:	4618      	mov	r0, r3
 8009950:	f003 fa1e 	bl	800cd90 <SDMMC_CmdWriteSingleBlock>
 8009954:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d012      	beq.n	8009982 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2f      	ldr	r2, [pc, #188]	; (8009a20 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8009962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996a:	431a      	orrs	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e045      	b.n	8009a0e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009982:	4b28      	ldr	r3, [pc, #160]	; (8009a24 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8009984:	2201      	movs	r2, #1
 8009986:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800998c:	68b9      	ldr	r1, [r7, #8]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	3380      	adds	r3, #128	; 0x80
 8009994:	461a      	mov	r2, r3
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	025b      	lsls	r3, r3, #9
 800999a:	089b      	lsrs	r3, r3, #2
 800999c:	f7fd fab4 	bl	8006f08 <HAL_DMA_Start_IT>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01a      	beq.n	80099dc <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 021a 	bic.w	r2, r2, #26
 80099b4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a19      	ldr	r2, [pc, #100]	; (8009a20 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80099bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e018      	b.n	8009a0e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099dc:	f04f 33ff 	mov.w	r3, #4294967295
 80099e0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	025b      	lsls	r3, r3, #9
 80099e6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80099e8:	2390      	movs	r3, #144	; 0x90
 80099ea:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80099f0:	2300      	movs	r3, #0
 80099f2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80099f4:	2301      	movs	r3, #1
 80099f6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f107 0210 	add.w	r2, r7, #16
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f003 f932 	bl	800cc6c <SDIO_ConfigData>

      return HAL_OK;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	e000      	b.n	8009a0e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8009a0c:	2302      	movs	r3, #2
  }
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3730      	adds	r7, #48	; 0x30
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	0800a201 	.word	0x0800a201
 8009a1c:	0800a29d 	.word	0x0800a29d
 8009a20:	004005ff 	.word	0x004005ff
 8009a24:	4225858c 	.word	0x4225858c

08009a28 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d008      	beq.n	8009a56 <HAL_SD_IRQHandler+0x2e>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f003 0308 	and.w	r3, r3, #8
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d003      	beq.n	8009a56 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 ffc8 	bl	800a9e4 <SD_Read_IT>
 8009a54:	e155      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f000 808f 	beq.w	8009b84 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009a6e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	6812      	ldr	r2, [r2, #0]
 8009a7a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8009a7e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8009a82:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f022 0201 	bic.w	r2, r2, #1
 8009a92:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0308 	and.w	r3, r3, #8
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d039      	beq.n	8009b12 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f003 0302 	and.w	r3, r3, #2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <HAL_SD_IRQHandler+0x8a>
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d011      	beq.n	8009ad6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f003 f9ae 	bl	800ce18 <SDMMC_CmdStopTransfer>
 8009abc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f91f 	bl	8009d14 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f240 523a 	movw	r2, #1338	; 0x53a
 8009ade:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2200      	movs	r2, #0
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d104      	bne.n	8009b02 <HAL_SD_IRQHandler+0xda>
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d003      	beq.n	8009b0a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f003 fe0c 	bl	800d720 <HAL_SD_RxCpltCallback>
 8009b08:	e0fb      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f003 fdfe 	bl	800d70c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009b10:	e0f7      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	f000 80f2 	beq.w	8009d02 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	f003 0320 	and.w	r3, r3, #32
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d011      	beq.n	8009b4c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f003 f973 	bl	800ce18 <SDMMC_CmdStopTransfer>
 8009b32:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d008      	beq.n	8009b4c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	431a      	orrs	r2, r3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f8e4 	bl	8009d14 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f040 80d5 	bne.w	8009d02 <HAL_SD_IRQHandler+0x2da>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f040 80cf 	bne.w	8009d02 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0208 	bic.w	r2, r2, #8
 8009b72:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f003 fdc5 	bl	800d70c <HAL_SD_TxCpltCallback>
}
 8009b82:	e0be      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d008      	beq.n	8009ba4 <HAL_SD_IRQHandler+0x17c>
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f003 0308 	and.w	r3, r3, #8
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 ff72 	bl	800aa86 <SD_Write_IT>
 8009ba2:	e0ae      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009baa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 80a7 	beq.w	8009d02 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bba:	f003 0302 	and.w	r3, r3, #2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d005      	beq.n	8009bce <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bc6:	f043 0202 	orr.w	r2, r3, #2
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd4:	f003 0308 	and.w	r3, r3, #8
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d005      	beq.n	8009be8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be0:	f043 0208 	orr.w	r2, r3, #8
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bee:	f003 0320 	and.w	r3, r3, #32
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d005      	beq.n	8009c02 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	f043 0220 	orr.w	r2, r3, #32
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c08:	f003 0310 	and.w	r3, r3, #16
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d005      	beq.n	8009c1c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c14:	f043 0210 	orr.w	r2, r3, #16
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f240 523a 	movw	r2, #1338	; 0x53a
 8009c24:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009c34:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f003 f8ec 	bl	800ce18 <SDMMC_CmdStopTransfer>
 8009c40:	4602      	mov	r2, r0
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c46:	431a      	orrs	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f003 0308 	and.w	r3, r3, #8
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00a      	beq.n	8009c6c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2201      	movs	r2, #1
 8009c5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f855 	bl	8009d14 <HAL_SD_ErrorCallback>
}
 8009c6a:	e04a      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d045      	beq.n	8009d02 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d104      	bne.n	8009c8a <HAL_SD_IRQHandler+0x262>
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d011      	beq.n	8009cae <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8e:	4a1f      	ldr	r2, [pc, #124]	; (8009d0c <HAL_SD_IRQHandler+0x2e4>)
 8009c90:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fd f98e 	bl	8006fb8 <HAL_DMA_Abort_IT>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d02f      	beq.n	8009d02 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 fb4a 	bl	800a340 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009cac:	e029      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f003 0301 	and.w	r3, r3, #1
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d104      	bne.n	8009cc2 <HAL_SD_IRQHandler+0x29a>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f003 0302 	and.w	r3, r3, #2
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d011      	beq.n	8009ce6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	4a12      	ldr	r2, [pc, #72]	; (8009d10 <HAL_SD_IRQHandler+0x2e8>)
 8009cc8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fd f972 	bl	8006fb8 <HAL_DMA_Abort_IT>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d013      	beq.n	8009d02 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f000 fb65 	bl	800a3ae <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009ce4:	e00d      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f003 fcfc 	bl	800d6f8 <HAL_SD_AbortCallback>
}
 8009d00:	e7ff      	b.n	8009d02 <HAL_SD_IRQHandler+0x2da>
 8009d02:	bf00      	nop
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	0800a341 	.word	0x0800a341
 8009d10:	0800a3af 	.word	0x0800a3af

08009d14 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d36:	0f9b      	lsrs	r3, r3, #30
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d42:	0e9b      	lsrs	r3, r3, #26
 8009d44:	b2db      	uxtb	r3, r3
 8009d46:	f003 030f 	and.w	r3, r3, #15
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d54:	0e1b      	lsrs	r3, r3, #24
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f003 0303 	and.w	r3, r3, #3
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d66:	0c1b      	lsrs	r3, r3, #16
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d72:	0a1b      	lsrs	r3, r3, #8
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d88:	0d1b      	lsrs	r3, r3, #20
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d94:	0c1b      	lsrs	r3, r3, #16
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	f003 030f 	and.w	r3, r3, #15
 8009d9c:	b2da      	uxtb	r2, r3
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009da6:	0bdb      	lsrs	r3, r3, #15
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009db8:	0b9b      	lsrs	r3, r3, #14
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	b2da      	uxtb	r2, r3
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dca:	0b5b      	lsrs	r3, r3, #13
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ddc:	0b1b      	lsrs	r3, r3, #12
 8009dde:	b2db      	uxtb	r3, r3
 8009de0:	f003 0301 	and.w	r3, r3, #1
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2200      	movs	r2, #0
 8009dee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d163      	bne.n	8009ec0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dfc:	009a      	lsls	r2, r3, #2
 8009dfe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e02:	4013      	ands	r3, r2
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009e08:	0f92      	lsrs	r2, r2, #30
 8009e0a:	431a      	orrs	r2, r3
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e14:	0edb      	lsrs	r3, r3, #27
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	f003 0307 	and.w	r3, r3, #7
 8009e1c:	b2da      	uxtb	r2, r3
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e26:	0e1b      	lsrs	r3, r3, #24
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	f003 0307 	and.w	r3, r3, #7
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e38:	0d5b      	lsrs	r3, r3, #21
 8009e3a:	b2db      	uxtb	r3, r3
 8009e3c:	f003 0307 	and.w	r3, r3, #7
 8009e40:	b2da      	uxtb	r2, r3
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e4a:	0c9b      	lsrs	r3, r3, #18
 8009e4c:	b2db      	uxtb	r3, r3
 8009e4e:	f003 0307 	and.w	r3, r3, #7
 8009e52:	b2da      	uxtb	r2, r3
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e5c:	0bdb      	lsrs	r3, r3, #15
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	7e1b      	ldrb	r3, [r3, #24]
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 0307 	and.w	r3, r3, #7
 8009e7e:	3302      	adds	r3, #2
 8009e80:	2201      	movs	r2, #1
 8009e82:	fa02 f303 	lsl.w	r3, r2, r3
 8009e86:	687a      	ldr	r2, [r7, #4]
 8009e88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009e8a:	fb02 f203 	mul.w	r2, r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	7a1b      	ldrb	r3, [r3, #8]
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 030f 	and.w	r3, r3, #15
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	409a      	lsls	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009eac:	0a52      	lsrs	r2, r2, #9
 8009eae:	fb02 f203 	mul.w	r2, r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ebc:	661a      	str	r2, [r3, #96]	; 0x60
 8009ebe:	e031      	b.n	8009f24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d11d      	bne.n	8009f04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ecc:	041b      	lsls	r3, r3, #16
 8009ece:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ed6:	0c1b      	lsrs	r3, r3, #16
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	029a      	lsls	r2, r3, #10
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ef8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	661a      	str	r2, [r3, #96]	; 0x60
 8009f02:	e00f      	b.n	8009f24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a58      	ldr	r2, [pc, #352]	; (800a06c <HAL_SD_GetCardCSD+0x344>)
 8009f0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e09d      	b.n	800a060 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f28:	0b9b      	lsrs	r3, r3, #14
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	f003 0301 	and.w	r3, r3, #1
 8009f30:	b2da      	uxtb	r2, r3
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f3a:	09db      	lsrs	r3, r3, #7
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f52:	b2da      	uxtb	r2, r3
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f5c:	0fdb      	lsrs	r3, r3, #31
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f68:	0f5b      	lsrs	r3, r3, #29
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	f003 0303 	and.w	r3, r3, #3
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7a:	0e9b      	lsrs	r3, r3, #26
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f8c:	0d9b      	lsrs	r3, r3, #22
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	f003 030f 	and.w	r3, r3, #15
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f9e:	0d5b      	lsrs	r3, r3, #21
 8009fa0:	b2db      	uxtb	r3, r3
 8009fa2:	f003 0301 	and.w	r3, r3, #1
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fba:	0c1b      	lsrs	r3, r3, #16
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0301 	and.w	r3, r3, #1
 8009fc2:	b2da      	uxtb	r2, r3
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fce:	0bdb      	lsrs	r3, r3, #15
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	b2da      	uxtb	r2, r3
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe2:	0b9b      	lsrs	r3, r3, #14
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff6:	0b5b      	lsrs	r3, r3, #13
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	f003 0301 	and.w	r3, r3, #1
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00a:	0b1b      	lsrs	r3, r3, #12
 800a00c:	b2db      	uxtb	r3, r3
 800a00e:	f003 0301 	and.w	r3, r3, #1
 800a012:	b2da      	uxtb	r2, r3
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01e:	0a9b      	lsrs	r3, r3, #10
 800a020:	b2db      	uxtb	r3, r3
 800a022:	f003 0303 	and.w	r3, r3, #3
 800a026:	b2da      	uxtb	r2, r3
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	b2db      	uxtb	r3, r3
 800a036:	f003 0303 	and.w	r3, r3, #3
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a046:	085b      	lsrs	r3, r3, #1
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a04e:	b2da      	uxtb	r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800a05e:	2300      	movs	r3, #0
}
 800a060:	4618      	mov	r0, r3
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr
 800a06c:	004005ff 	.word	0x004005ff

0800a070 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800a0c8:	b5b0      	push	{r4, r5, r7, lr}
 800a0ca:	b08e      	sub	sp, #56	; 0x38
 800a0cc:	af04      	add	r7, sp, #16
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2203      	movs	r2, #3
 800a0d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d02e      	beq.n	800a140 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e8:	d106      	bne.n	800a0f8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	639a      	str	r2, [r3, #56]	; 0x38
 800a0f6:	e029      	b.n	800a14c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0fe:	d10a      	bne.n	800a116 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb0f 	bl	800a724 <SD_WideBus_Enable>
 800a106:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	639a      	str	r2, [r3, #56]	; 0x38
 800a114:	e01a      	b.n	800a14c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d10a      	bne.n	800a132 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f000 fb4c 	bl	800a7ba <SD_WideBus_Disable>
 800a122:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	431a      	orrs	r2, r3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38
 800a130:	e00c      	b.n	800a14c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a136:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	639a      	str	r2, [r3, #56]	; 0x38
 800a13e:	e005      	b.n	800a14c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a150:	2b00      	cmp	r3, #0
 800a152:	d009      	beq.n	800a168 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a18      	ldr	r2, [pc, #96]	; (800a1bc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800a15a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a164:	2301      	movs	r3, #1
 800a166:	e024      	b.n	800a1b2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	689b      	ldr	r3, [r3, #8]
 800a172:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	699b      	ldr	r3, [r3, #24]
 800a188:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681d      	ldr	r5, [r3, #0]
 800a18e:	466c      	mov	r4, sp
 800a190:	f107 0318 	add.w	r3, r7, #24
 800a194:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a19c:	f107 030c 	add.w	r3, r7, #12
 800a1a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	f002 fcb2 	bl	800cb0c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3728      	adds	r7, #40	; 0x28
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bdb0      	pop	{r4, r5, r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	004005ff 	.word	0x004005ff

0800a1c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a1cc:	f107 030c 	add.w	r3, r7, #12
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 fa7e 	bl	800a6d4 <SD_SendStatus>
 800a1d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d005      	beq.n	800a1ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	0a5b      	lsrs	r3, r3, #9
 800a1f0:	f003 030f 	and.w	r3, r3, #15
 800a1f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a1f6:	693b      	ldr	r3, [r7, #16]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a21c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a21e:	bf00      	nop
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b084      	sub	sp, #16
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a236:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23c:	2b82      	cmp	r3, #130	; 0x82
 800a23e:	d111      	bne.n	800a264 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4618      	mov	r0, r3
 800a246:	f002 fde7 	bl	800ce18 <SDMMC_CmdStopTransfer>
 800a24a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	431a      	orrs	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	f7ff fd58 	bl	8009d14 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0208 	bic.w	r2, r2, #8
 800a272:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f240 523a 	movw	r2, #1338	; 0x53a
 800a27c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2201      	movs	r2, #1
 800a282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f003 fa47 	bl	800d720 <HAL_SD_RxCpltCallback>
#endif
}
 800a292:	bf00      	nop
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7fd f830 	bl	8007310 <HAL_DMA_GetError>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b02      	cmp	r3, #2
 800a2b4:	d03e      	beq.n	800a334 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2bc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2c4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d002      	beq.n	800a2d2 <SD_DMAError+0x36>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b01      	cmp	r3, #1
 800a2d0:	d12d      	bne.n	800a32e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a19      	ldr	r2, [pc, #100]	; (800a33c <SD_DMAError+0xa0>)
 800a2d8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a2e8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f7ff ff62 	bl	800a1c0 <HAL_SD_GetCardState>
 800a2fc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	2b06      	cmp	r3, #6
 800a302:	d002      	beq.n	800a30a <SD_DMAError+0x6e>
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b05      	cmp	r3, #5
 800a308:	d10a      	bne.n	800a320 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	4618      	mov	r0, r3
 800a310:	f002 fd82 	bl	800ce18 <SDMMC_CmdStopTransfer>
 800a314:	4602      	mov	r2, r0
 800a316:	697b      	ldr	r3, [r7, #20]
 800a318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a31a:	431a      	orrs	r2, r3
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2200      	movs	r2, #0
 800a32c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a32e:	6978      	ldr	r0, [r7, #20]
 800a330:	f7ff fcf0 	bl	8009d14 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a334:	bf00      	nop
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	004005ff 	.word	0x004005ff

0800a340 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f240 523a 	movw	r2, #1338	; 0x53a
 800a356:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff ff31 	bl	800a1c0 <HAL_SD_GetCardState>
 800a35e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2200      	movs	r2, #0
 800a36c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	2b06      	cmp	r3, #6
 800a372:	d002      	beq.n	800a37a <SD_DMATxAbort+0x3a>
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	2b05      	cmp	r3, #5
 800a378:	d10a      	bne.n	800a390 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f002 fd4a 	bl	800ce18 <SDMMC_CmdStopTransfer>
 800a384:	4602      	mov	r2, r0
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a38a:	431a      	orrs	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a394:	2b00      	cmp	r3, #0
 800a396:	d103      	bne.n	800a3a0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f003 f9ad 	bl	800d6f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a39e:	e002      	b.n	800a3a6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	f7ff fcb7 	bl	8009d14 <HAL_SD_ErrorCallback>
}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ba:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f240 523a 	movw	r2, #1338	; 0x53a
 800a3c4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f7ff fefa 	bl	800a1c0 <HAL_SD_GetCardState>
 800a3cc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	2b06      	cmp	r3, #6
 800a3e0:	d002      	beq.n	800a3e8 <SD_DMARxAbort+0x3a>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b05      	cmp	r3, #5
 800a3e6:	d10a      	bne.n	800a3fe <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f002 fd13 	bl	800ce18 <SDMMC_CmdStopTransfer>
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f8:	431a      	orrs	r2, r3
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a402:	2b00      	cmp	r3, #0
 800a404:	d103      	bne.n	800a40e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f003 f976 	bl	800d6f8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a40c:	e002      	b.n	800a414 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a40e:	68f8      	ldr	r0, [r7, #12]
 800a410:	f7ff fc80 	bl	8009d14 <HAL_SD_ErrorCallback>
}
 800a414:	bf00      	nop
 800a416:	3710      	adds	r7, #16
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a41c:	b5b0      	push	{r4, r5, r7, lr}
 800a41e:	b094      	sub	sp, #80	; 0x50
 800a420:	af04      	add	r7, sp, #16
 800a422:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a424:	2301      	movs	r3, #1
 800a426:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f002 fbc5 	bl	800cbbc <SDIO_GetPowerState>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a438:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a43c:	e0b7      	b.n	800a5ae <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a442:	2b03      	cmp	r3, #3
 800a444:	d02f      	beq.n	800a4a6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f002 fdee 	bl	800d02c <SDMMC_CmdSendCID>
 800a450:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <SD_InitCard+0x40>
    {
      return errorstate;
 800a458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45a:	e0a8      	b.n	800a5ae <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2100      	movs	r1, #0
 800a462:	4618      	mov	r0, r3
 800a464:	f002 fbef 	bl	800cc46 <SDIO_GetResponse>
 800a468:	4602      	mov	r2, r0
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2104      	movs	r1, #4
 800a474:	4618      	mov	r0, r3
 800a476:	f002 fbe6 	bl	800cc46 <SDIO_GetResponse>
 800a47a:	4602      	mov	r2, r0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	2108      	movs	r1, #8
 800a486:	4618      	mov	r0, r3
 800a488:	f002 fbdd 	bl	800cc46 <SDIO_GetResponse>
 800a48c:	4602      	mov	r2, r0
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	210c      	movs	r1, #12
 800a498:	4618      	mov	r0, r3
 800a49a:	f002 fbd4 	bl	800cc46 <SDIO_GetResponse>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4aa:	2b03      	cmp	r3, #3
 800a4ac:	d00d      	beq.n	800a4ca <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f107 020e 	add.w	r2, r7, #14
 800a4b6:	4611      	mov	r1, r2
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 fdf4 	bl	800d0a6 <SDMMC_CmdSetRelAdd>
 800a4be:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d001      	beq.n	800a4ca <SD_InitCard+0xae>
    {
      return errorstate;
 800a4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c8:	e071      	b.n	800a5ae <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d036      	beq.n	800a540 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a4d2:	89fb      	ldrh	r3, [r7, #14]
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e2:	041b      	lsls	r3, r3, #16
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4610      	mov	r0, r2
 800a4e8:	f002 fdbe 	bl	800d068 <SDMMC_CmdSendCSD>
 800a4ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	e05a      	b.n	800a5ae <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f002 fba1 	bl	800cc46 <SDIO_GetResponse>
 800a504:	4602      	mov	r2, r0
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	2104      	movs	r1, #4
 800a510:	4618      	mov	r0, r3
 800a512:	f002 fb98 	bl	800cc46 <SDIO_GetResponse>
 800a516:	4602      	mov	r2, r0
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2108      	movs	r1, #8
 800a522:	4618      	mov	r0, r3
 800a524:	f002 fb8f 	bl	800cc46 <SDIO_GetResponse>
 800a528:	4602      	mov	r2, r0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	210c      	movs	r1, #12
 800a534:	4618      	mov	r0, r3
 800a536:	f002 fb86 	bl	800cc46 <SDIO_GetResponse>
 800a53a:	4602      	mov	r2, r0
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2104      	movs	r1, #4
 800a546:	4618      	mov	r0, r3
 800a548:	f002 fb7d 	bl	800cc46 <SDIO_GetResponse>
 800a54c:	4603      	mov	r3, r0
 800a54e:	0d1a      	lsrs	r2, r3, #20
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a554:	f107 0310 	add.w	r3, r7, #16
 800a558:	4619      	mov	r1, r3
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f7ff fbe4 	bl	8009d28 <HAL_SD_GetCardCSD>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a56a:	e020      	b.n	800a5ae <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6819      	ldr	r1, [r3, #0]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a574:	041b      	lsls	r3, r3, #16
 800a576:	f04f 0400 	mov.w	r4, #0
 800a57a:	461a      	mov	r2, r3
 800a57c:	4623      	mov	r3, r4
 800a57e:	4608      	mov	r0, r1
 800a580:	f002 fc6c 	bl	800ce5c <SDMMC_CmdSelDesel>
 800a584:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <SD_InitCard+0x174>
  {
    return errorstate;
 800a58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58e:	e00e      	b.n	800a5ae <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681d      	ldr	r5, [r3, #0]
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	466c      	mov	r4, sp
 800a598:	f103 0210 	add.w	r2, r3, #16
 800a59c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a59e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f002 fab0 	bl	800cb0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3740      	adds	r7, #64	; 0x40
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800a5b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f002 fc66 	bl	800cea2 <SDMMC_CmdGoIdleState>
 800a5d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d001      	beq.n	800a5e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	e072      	b.n	800a6c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f002 fc79 	bl	800cede <SDMMC_CmdOperCond>
 800a5ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00d      	beq.n	800a610 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f002 fc4f 	bl	800cea2 <SDMMC_CmdGoIdleState>
 800a604:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d004      	beq.n	800a616 <SD_PowerON+0x5e>
    {
      return errorstate;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	e05b      	b.n	800a6c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d137      	bne.n	800a68e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2100      	movs	r1, #0
 800a624:	4618      	mov	r0, r3
 800a626:	f002 fc79 	bl	800cf1c <SDMMC_CmdAppCommand>
 800a62a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d02d      	beq.n	800a68e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a632:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a636:	e047      	b.n	800a6c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	2100      	movs	r1, #0
 800a63e:	4618      	mov	r0, r3
 800a640:	f002 fc6c 	bl	800cf1c <SDMMC_CmdAppCommand>
 800a644:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <SD_PowerON+0x98>
    {
      return errorstate;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	e03b      	b.n	800a6c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	491e      	ldr	r1, [pc, #120]	; (800a6d0 <SD_PowerON+0x118>)
 800a656:	4618      	mov	r0, r3
 800a658:	f002 fc82 	bl	800cf60 <SDMMC_CmdAppOperCommand>
 800a65c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a668:	e02e      	b.n	800a6c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2100      	movs	r1, #0
 800a670:	4618      	mov	r0, r3
 800a672:	f002 fae8 	bl	800cc46 <SDIO_GetResponse>
 800a676:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	0fdb      	lsrs	r3, r3, #31
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d101      	bne.n	800a684 <SD_PowerON+0xcc>
 800a680:	2301      	movs	r3, #1
 800a682:	e000      	b.n	800a686 <SD_PowerON+0xce>
 800a684:	2300      	movs	r3, #0
 800a686:	613b      	str	r3, [r7, #16]

    count++;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	3301      	adds	r3, #1
 800a68c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a694:	4293      	cmp	r3, r2
 800a696:	d802      	bhi.n	800a69e <SD_PowerON+0xe6>
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d0cc      	beq.n	800a638 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d902      	bls.n	800a6ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a6a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a6ac:	e00c      	b.n	800a6c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	645a      	str	r2, [r3, #68]	; 0x44
 800a6be:	e002      	b.n	800a6c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	c1100000 	.word	0xc1100000

0800a6d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d102      	bne.n	800a6ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a6e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6e8:	e018      	b.n	800a71c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f2:	041b      	lsls	r3, r3, #16
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	4610      	mov	r0, r2
 800a6f8:	f002 fcf6 	bl	800d0e8 <SDMMC_CmdSendStatus>
 800a6fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d001      	beq.n	800a708 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	e009      	b.n	800a71c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2100      	movs	r1, #0
 800a70e:	4618      	mov	r0, r3
 800a710:	f002 fa99 	bl	800cc46 <SDIO_GetResponse>
 800a714:	4602      	mov	r2, r0
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3710      	adds	r7, #16
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a72c:	2300      	movs	r3, #0
 800a72e:	60fb      	str	r3, [r7, #12]
 800a730:	2300      	movs	r3, #0
 800a732:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	2100      	movs	r1, #0
 800a73a:	4618      	mov	r0, r3
 800a73c:	f002 fa83 	bl	800cc46 <SDIO_GetResponse>
 800a740:	4603      	mov	r3, r0
 800a742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a746:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a74a:	d102      	bne.n	800a752 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a74c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a750:	e02f      	b.n	800a7b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a752:	f107 030c 	add.w	r3, r7, #12
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f879 	bl	800a850 <SD_FindSCR>
 800a75e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d001      	beq.n	800a76a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	e023      	b.n	800a7b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a770:	2b00      	cmp	r3, #0
 800a772:	d01c      	beq.n	800a7ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77c:	041b      	lsls	r3, r3, #16
 800a77e:	4619      	mov	r1, r3
 800a780:	4610      	mov	r0, r2
 800a782:	f002 fbcb 	bl	800cf1c <SDMMC_CmdAppCommand>
 800a786:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d001      	beq.n	800a792 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	e00f      	b.n	800a7b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2102      	movs	r1, #2
 800a798:	4618      	mov	r0, r3
 800a79a:	f002 fc04 	bl	800cfa6 <SDMMC_CmdBusWidth>
 800a79e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	e003      	b.n	800a7b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	e001      	b.n	800a7b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a7ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b086      	sub	sp, #24
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f002 fa38 	bl	800cc46 <SDIO_GetResponse>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7e0:	d102      	bne.n	800a7e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a7e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a7e6:	e02f      	b.n	800a848 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a7e8:	f107 030c 	add.w	r3, r7, #12
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f000 f82e 	bl	800a850 <SD_FindSCR>
 800a7f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	e023      	b.n	800a848 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d01c      	beq.n	800a844 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a812:	041b      	lsls	r3, r3, #16
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f002 fb80 	bl	800cf1c <SDMMC_CmdAppCommand>
 800a81c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	e00f      	b.n	800a848 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2100      	movs	r1, #0
 800a82e:	4618      	mov	r0, r3
 800a830:	f002 fbb9 	bl	800cfa6 <SDMMC_CmdBusWidth>
 800a834:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	e003      	b.n	800a848 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a840:	2300      	movs	r3, #0
 800a842:	e001      	b.n	800a848 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a844:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}

0800a850 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a850:	b590      	push	{r4, r7, lr}
 800a852:	b08f      	sub	sp, #60	; 0x3c
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a85a:	f7fb fd63 	bl	8006324 <HAL_GetTick>
 800a85e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a864:	2300      	movs	r3, #0
 800a866:	60bb      	str	r3, [r7, #8]
 800a868:	2300      	movs	r3, #0
 800a86a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	2108      	movs	r1, #8
 800a876:	4618      	mov	r0, r3
 800a878:	f002 fa24 	bl	800ccc4 <SDMMC_CmdBlockLength>
 800a87c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	2b00      	cmp	r3, #0
 800a882:	d001      	beq.n	800a888 <SD_FindSCR+0x38>
  {
    return errorstate;
 800a884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a886:	e0a9      	b.n	800a9dc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a890:	041b      	lsls	r3, r3, #16
 800a892:	4619      	mov	r1, r3
 800a894:	4610      	mov	r0, r2
 800a896:	f002 fb41 	bl	800cf1c <SDMMC_CmdAppCommand>
 800a89a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800a8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a4:	e09a      	b.n	800a9dc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a8a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a8ac:	2308      	movs	r3, #8
 800a8ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a8b0:	2330      	movs	r3, #48	; 0x30
 800a8b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f107 0210 	add.w	r2, r7, #16
 800a8c8:	4611      	mov	r1, r2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f002 f9ce 	bl	800cc6c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f002 fb88 	bl	800cfea <SDMMC_CmdSendSCR>
 800a8da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d022      	beq.n	800a928 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800a8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e4:	e07a      	b.n	800a9dc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d00e      	beq.n	800a912 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6819      	ldr	r1, [r3, #0]
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	f107 0208 	add.w	r2, r7, #8
 800a900:	18d4      	adds	r4, r2, r3
 800a902:	4608      	mov	r0, r1
 800a904:	f002 f92d 	bl	800cb62 <SDIO_ReadFIFO>
 800a908:	4603      	mov	r3, r0
 800a90a:	6023      	str	r3, [r4, #0]
      index++;
 800a90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a90e:	3301      	adds	r3, #1
 800a910:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a912:	f7fb fd07 	bl	8006324 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d102      	bne.n	800a928 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a926:	e059      	b.n	800a9dc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a92e:	f240 432a 	movw	r3, #1066	; 0x42a
 800a932:	4013      	ands	r3, r2
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0d6      	beq.n	800a8e6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	f003 0308 	and.w	r3, r3, #8
 800a942:	2b00      	cmp	r3, #0
 800a944:	d005      	beq.n	800a952 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2208      	movs	r2, #8
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a94e:	2308      	movs	r3, #8
 800a950:	e044      	b.n	800a9dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a958:	f003 0302 	and.w	r3, r3, #2
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d005      	beq.n	800a96c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2202      	movs	r2, #2
 800a966:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a968:	2302      	movs	r3, #2
 800a96a:	e037      	b.n	800a9dc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a972:	f003 0320 	and.w	r3, r3, #32
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	2220      	movs	r2, #32
 800a980:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a982:	2320      	movs	r3, #32
 800a984:	e02a      	b.n	800a9dc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f240 523a 	movw	r2, #1338	; 0x53a
 800a98e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	061a      	lsls	r2, r3, #24
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	021b      	lsls	r3, r3, #8
 800a998:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a99c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	0a1b      	lsrs	r3, r3, #8
 800a9a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a9a6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	0e1b      	lsrs	r3, r3, #24
 800a9ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	601a      	str	r2, [r3, #0]
    scr++;
 800a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b4:	3304      	adds	r3, #4
 800a9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	061a      	lsls	r2, r3, #24
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	021b      	lsls	r3, r3, #8
 800a9c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9c4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	0a1b      	lsrs	r3, r3, #8
 800a9ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a9ce:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	0e1b      	lsrs	r3, r3, #24
 800a9d4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	373c      	adds	r7, #60	; 0x3c
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd90      	pop	{r4, r7, pc}

0800a9e4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d03f      	beq.n	800aa7e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a9fe:	2300      	movs	r3, #0
 800aa00:	617b      	str	r3, [r7, #20]
 800aa02:	e033      	b.n	800aa6c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f002 f8aa 	bl	800cb62 <SDIO_ReadFIFO>
 800aa0e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	3301      	adds	r3, #1
 800aa1c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	0a1b      	lsrs	r3, r3, #8
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	3301      	adds	r3, #1
 800aa32:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	0c1b      	lsrs	r3, r3, #16
 800aa3e:	b2da      	uxtb	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	3301      	adds	r3, #1
 800aa48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	0e1b      	lsrs	r3, r3, #24
 800aa54:	b2da      	uxtb	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	701a      	strb	r2, [r3, #0]
      tmp++;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2b07      	cmp	r3, #7
 800aa70:	d9c8      	bls.n	800aa04 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	693a      	ldr	r2, [r7, #16]
 800aa7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800aa7e:	bf00      	nop
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b086      	sub	sp, #24
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a1b      	ldr	r3, [r3, #32]
 800aa92:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa98:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800aa9a:	693b      	ldr	r3, [r7, #16]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d043      	beq.n	800ab28 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	e037      	b.n	800ab16 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	3301      	adds	r3, #1
 800aab0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	021a      	lsls	r2, r3, #8
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	3301      	adds	r3, #1
 800aac8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	3b01      	subs	r3, #1
 800aace:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	041a      	lsls	r2, r3, #16
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	4313      	orrs	r3, r2
 800aada:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3301      	adds	r3, #1
 800aae0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	3b01      	subs	r3, #1
 800aae6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	061a      	lsls	r2, r3, #24
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	4313      	orrs	r3, r2
 800aaf2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	3b01      	subs	r3, #1
 800aafe:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f107 0208 	add.w	r2, r7, #8
 800ab08:	4611      	mov	r1, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f002 f836 	bl	800cb7c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	3301      	adds	r3, #1
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	2b07      	cmp	r3, #7
 800ab1a:	d9c4      	bls.n	800aaa6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	68fa      	ldr	r2, [r7, #12]
 800ab20:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ab28:	bf00      	nop
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b082      	sub	sp, #8
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d101      	bne.n	800ab42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	e056      	b.n	800abf0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2200      	movs	r2, #0
 800ab46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d106      	bne.n	800ab62 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f7fa fabd 	bl	80050dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2202      	movs	r2, #2
 800ab66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ab78:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	431a      	orrs	r2, r3
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	431a      	orrs	r2, r3
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab9e:	431a      	orrs	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	69db      	ldr	r3, [r3, #28]
 800aba4:	431a      	orrs	r2, r3
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a1b      	ldr	r3, [r3, #32]
 800abaa:	ea42 0103 	orr.w	r1, r2, r3
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	430a      	orrs	r2, r1
 800abb8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	0c1b      	lsrs	r3, r3, #16
 800abc0:	f003 0104 	and.w	r1, r3, #4
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	430a      	orrs	r2, r1
 800abce:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	69da      	ldr	r2, [r3, #28]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800abde:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2201      	movs	r2, #1
 800abea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b088      	sub	sp, #32
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	603b      	str	r3, [r7, #0]
 800ac04:	4613      	mov	r3, r2
 800ac06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d101      	bne.n	800ac1a <HAL_SPI_Transmit+0x22>
 800ac16:	2302      	movs	r3, #2
 800ac18:	e11e      	b.n	800ae58 <HAL_SPI_Transmit+0x260>
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ac22:	f7fb fb7f 	bl	8006324 <HAL_GetTick>
 800ac26:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ac28:	88fb      	ldrh	r3, [r7, #6]
 800ac2a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	2b01      	cmp	r3, #1
 800ac36:	d002      	beq.n	800ac3e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ac38:	2302      	movs	r3, #2
 800ac3a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ac3c:	e103      	b.n	800ae46 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ac3e:	68bb      	ldr	r3, [r7, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d002      	beq.n	800ac4a <HAL_SPI_Transmit+0x52>
 800ac44:	88fb      	ldrh	r3, [r7, #6]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d102      	bne.n	800ac50 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ac4e:	e0fa      	b.n	800ae46 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2203      	movs	r2, #3
 800ac54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	88fa      	ldrh	r2, [r7, #6]
 800ac68:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	88fa      	ldrh	r2, [r7, #6]
 800ac6e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2200      	movs	r2, #0
 800ac7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2200      	movs	r2, #0
 800ac86:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	689b      	ldr	r3, [r3, #8]
 800ac92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac96:	d107      	bne.n	800aca8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aca6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb2:	2b40      	cmp	r3, #64	; 0x40
 800acb4:	d007      	beq.n	800acc6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800acc4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800acce:	d14b      	bne.n	800ad68 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <HAL_SPI_Transmit+0xe6>
 800acd8:	8afb      	ldrh	r3, [r7, #22]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d13e      	bne.n	800ad5c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace2:	881a      	ldrh	r2, [r3, #0]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acee:	1c9a      	adds	r2, r3, #2
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	3b01      	subs	r3, #1
 800acfc:	b29a      	uxth	r2, r3
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ad02:	e02b      	b.n	800ad5c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 0302 	and.w	r3, r3, #2
 800ad0e:	2b02      	cmp	r3, #2
 800ad10:	d112      	bne.n	800ad38 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad16:	881a      	ldrh	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad22:	1c9a      	adds	r2, r3, #2
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	3b01      	subs	r3, #1
 800ad30:	b29a      	uxth	r2, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	86da      	strh	r2, [r3, #54]	; 0x36
 800ad36:	e011      	b.n	800ad5c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad38:	f7fb faf4 	bl	8006324 <HAL_GetTick>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	1ad3      	subs	r3, r2, r3
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d803      	bhi.n	800ad50 <HAL_SPI_Transmit+0x158>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad4e:	d102      	bne.n	800ad56 <HAL_SPI_Transmit+0x15e>
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d102      	bne.n	800ad5c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ad56:	2303      	movs	r3, #3
 800ad58:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ad5a:	e074      	b.n	800ae46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1ce      	bne.n	800ad04 <HAL_SPI_Transmit+0x10c>
 800ad66:	e04c      	b.n	800ae02 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	685b      	ldr	r3, [r3, #4]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d002      	beq.n	800ad76 <HAL_SPI_Transmit+0x17e>
 800ad70:	8afb      	ldrh	r3, [r7, #22]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d140      	bne.n	800adf8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	330c      	adds	r3, #12
 800ad80:	7812      	ldrb	r2, [r2, #0]
 800ad82:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800ad9c:	e02c      	b.n	800adf8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	f003 0302 	and.w	r3, r3, #2
 800ada8:	2b02      	cmp	r3, #2
 800adaa:	d113      	bne.n	800add4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	330c      	adds	r3, #12
 800adb6:	7812      	ldrb	r2, [r2, #0]
 800adb8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adbe:	1c5a      	adds	r2, r3, #1
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3b01      	subs	r3, #1
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	86da      	strh	r2, [r3, #54]	; 0x36
 800add2:	e011      	b.n	800adf8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800add4:	f7fb faa6 	bl	8006324 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	683a      	ldr	r2, [r7, #0]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d803      	bhi.n	800adec <HAL_SPI_Transmit+0x1f4>
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adea:	d102      	bne.n	800adf2 <HAL_SPI_Transmit+0x1fa>
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800adf2:	2303      	movs	r3, #3
 800adf4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800adf6:	e026      	b.n	800ae46 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1cd      	bne.n	800ad9e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae02:	69ba      	ldr	r2, [r7, #24]
 800ae04:	6839      	ldr	r1, [r7, #0]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 fba4 	bl	800b554 <SPI_EndRxTxTransaction>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2220      	movs	r2, #32
 800ae16:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	689b      	ldr	r3, [r3, #8]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10a      	bne.n	800ae36 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae20:	2300      	movs	r3, #0
 800ae22:	613b      	str	r3, [r7, #16]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	613b      	str	r3, [r7, #16]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	689b      	ldr	r3, [r3, #8]
 800ae32:	613b      	str	r3, [r7, #16]
 800ae34:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d002      	beq.n	800ae44 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	77fb      	strb	r3, [r7, #31]
 800ae42:	e000      	b.n	800ae46 <HAL_SPI_Transmit+0x24e>
  }

error:
 800ae44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2201      	movs	r2, #1
 800ae4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ae56:	7ffb      	ldrb	r3, [r7, #31]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3720      	adds	r7, #32
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af02      	add	r7, sp, #8
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	603b      	str	r3, [r7, #0]
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae70:	2300      	movs	r3, #0
 800ae72:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae7c:	d112      	bne.n	800aea4 <HAL_SPI_Receive+0x44>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	689b      	ldr	r3, [r3, #8]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d10e      	bne.n	800aea4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2204      	movs	r2, #4
 800ae8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ae8e:	88fa      	ldrh	r2, [r7, #6]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	9300      	str	r3, [sp, #0]
 800ae94:	4613      	mov	r3, r2
 800ae96:	68ba      	ldr	r2, [r7, #8]
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 f8e9 	bl	800b072 <HAL_SPI_TransmitReceive>
 800aea0:	4603      	mov	r3, r0
 800aea2:	e0e2      	b.n	800b06a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d101      	bne.n	800aeb2 <HAL_SPI_Receive+0x52>
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e0db      	b.n	800b06a <HAL_SPI_Receive+0x20a>
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aeba:	f7fb fa33 	bl	8006324 <HAL_GetTick>
 800aebe:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d002      	beq.n	800aed2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800aecc:	2302      	movs	r3, #2
 800aece:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aed0:	e0c2      	b.n	800b058 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d002      	beq.n	800aede <HAL_SPI_Receive+0x7e>
 800aed8:	88fb      	ldrh	r3, [r7, #6]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d102      	bne.n	800aee4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800aee2:	e0b9      	b.n	800b058 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	2204      	movs	r2, #4
 800aee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2200      	movs	r2, #0
 800aef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	68ba      	ldr	r2, [r7, #8]
 800aef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	88fa      	ldrh	r2, [r7, #6]
 800aefc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	88fa      	ldrh	r2, [r7, #6]
 800af02:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2200      	movs	r2, #0
 800af20:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af2a:	d107      	bne.n	800af3c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	681a      	ldr	r2, [r3, #0]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800af3a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af46:	2b40      	cmp	r3, #64	; 0x40
 800af48:	d007      	beq.n	800af5a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af58:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d162      	bne.n	800b028 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800af62:	e02e      	b.n	800afc2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d115      	bne.n	800af9e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f103 020c 	add.w	r2, r3, #12
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	7812      	ldrb	r2, [r2, #0]
 800af80:	b2d2      	uxtb	r2, r2
 800af82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800af92:	b29b      	uxth	r3, r3
 800af94:	3b01      	subs	r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800af9c:	e011      	b.n	800afc2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af9e:	f7fb f9c1 	bl	8006324 <HAL_GetTick>
 800afa2:	4602      	mov	r2, r0
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	1ad3      	subs	r3, r2, r3
 800afa8:	683a      	ldr	r2, [r7, #0]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d803      	bhi.n	800afb6 <HAL_SPI_Receive+0x156>
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb4:	d102      	bne.n	800afbc <HAL_SPI_Receive+0x15c>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800afbc:	2303      	movs	r3, #3
 800afbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 800afc0:	e04a      	b.n	800b058 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d1cb      	bne.n	800af64 <HAL_SPI_Receive+0x104>
 800afcc:	e031      	b.n	800b032 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d113      	bne.n	800b004 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	68da      	ldr	r2, [r3, #12]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe6:	b292      	uxth	r2, r2
 800afe8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afee:	1c9a      	adds	r2, r3, #2
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aff8:	b29b      	uxth	r3, r3
 800affa:	3b01      	subs	r3, #1
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b002:	e011      	b.n	800b028 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b004:	f7fb f98e 	bl	8006324 <HAL_GetTick>
 800b008:	4602      	mov	r2, r0
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	1ad3      	subs	r3, r2, r3
 800b00e:	683a      	ldr	r2, [r7, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d803      	bhi.n	800b01c <HAL_SPI_Receive+0x1bc>
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b01a:	d102      	bne.n	800b022 <HAL_SPI_Receive+0x1c2>
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d102      	bne.n	800b028 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b026:	e017      	b.n	800b058 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1cd      	bne.n	800afce <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f000 fa27 	bl	800b48a <SPI_EndRxTransaction>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2220      	movs	r2, #32
 800b046:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d002      	beq.n	800b056 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b050:	2301      	movs	r3, #1
 800b052:	75fb      	strb	r3, [r7, #23]
 800b054:	e000      	b.n	800b058 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b056:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b068:	7dfb      	ldrb	r3, [r7, #23]
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3718      	adds	r7, #24
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}

0800b072 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b072:	b580      	push	{r7, lr}
 800b074:	b08c      	sub	sp, #48	; 0x30
 800b076:	af00      	add	r7, sp, #0
 800b078:	60f8      	str	r0, [r7, #12]
 800b07a:	60b9      	str	r1, [r7, #8]
 800b07c:	607a      	str	r2, [r7, #4]
 800b07e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b080:	2301      	movs	r3, #1
 800b082:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b084:	2300      	movs	r3, #0
 800b086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b090:	2b01      	cmp	r3, #1
 800b092:	d101      	bne.n	800b098 <HAL_SPI_TransmitReceive+0x26>
 800b094:	2302      	movs	r3, #2
 800b096:	e18a      	b.n	800b3ae <HAL_SPI_TransmitReceive+0x33c>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0a0:	f7fb f940 	bl	8006324 <HAL_GetTick>
 800b0a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b0b6:	887b      	ldrh	r3, [r7, #2]
 800b0b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b0ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d00f      	beq.n	800b0e2 <HAL_SPI_TransmitReceive+0x70>
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0c8:	d107      	bne.n	800b0da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d103      	bne.n	800b0da <HAL_SPI_TransmitReceive+0x68>
 800b0d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d003      	beq.n	800b0e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b0da:	2302      	movs	r3, #2
 800b0dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b0e0:	e15b      	b.n	800b39a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d005      	beq.n	800b0f4 <HAL_SPI_TransmitReceive+0x82>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d002      	beq.n	800b0f4 <HAL_SPI_TransmitReceive+0x82>
 800b0ee:	887b      	ldrh	r3, [r7, #2]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d103      	bne.n	800b0fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b0fa:	e14e      	b.n	800b39a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b102:	b2db      	uxtb	r3, r3
 800b104:	2b04      	cmp	r3, #4
 800b106:	d003      	beq.n	800b110 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2205      	movs	r2, #5
 800b10c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	887a      	ldrh	r2, [r7, #2]
 800b120:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	887a      	ldrh	r2, [r7, #2]
 800b126:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	68ba      	ldr	r2, [r7, #8]
 800b12c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	887a      	ldrh	r2, [r7, #2]
 800b132:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	887a      	ldrh	r2, [r7, #2]
 800b138:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	2200      	movs	r2, #0
 800b13e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2200      	movs	r2, #0
 800b144:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b150:	2b40      	cmp	r3, #64	; 0x40
 800b152:	d007      	beq.n	800b164 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b16c:	d178      	bne.n	800b260 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <HAL_SPI_TransmitReceive+0x10a>
 800b176:	8b7b      	ldrh	r3, [r7, #26]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d166      	bne.n	800b24a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b180:	881a      	ldrh	r2, [r3, #0]
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	1c9a      	adds	r2, r3, #2
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b196:	b29b      	uxth	r3, r3
 800b198:	3b01      	subs	r3, #1
 800b19a:	b29a      	uxth	r2, r3
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b1a0:	e053      	b.n	800b24a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	2b02      	cmp	r3, #2
 800b1ae:	d11b      	bne.n	800b1e8 <HAL_SPI_TransmitReceive+0x176>
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d016      	beq.n	800b1e8 <HAL_SPI_TransmitReceive+0x176>
 800b1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d113      	bne.n	800b1e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1c4:	881a      	ldrh	r2, [r3, #0]
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d0:	1c9a      	adds	r2, r3, #2
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	b29a      	uxth	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f003 0301 	and.w	r3, r3, #1
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d119      	bne.n	800b22a <HAL_SPI_TransmitReceive+0x1b8>
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d014      	beq.n	800b22a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20a:	b292      	uxth	r2, r2
 800b20c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b212:	1c9a      	adds	r2, r3, #2
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	3b01      	subs	r3, #1
 800b220:	b29a      	uxth	r2, r3
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b226:	2301      	movs	r3, #1
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b22a:	f7fb f87b 	bl	8006324 <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b236:	429a      	cmp	r2, r3
 800b238:	d807      	bhi.n	800b24a <HAL_SPI_TransmitReceive+0x1d8>
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b240:	d003      	beq.n	800b24a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b248:	e0a7      	b.n	800b39a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b24e:	b29b      	uxth	r3, r3
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1a6      	bne.n	800b1a2 <HAL_SPI_TransmitReceive+0x130>
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b258:	b29b      	uxth	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d1a1      	bne.n	800b1a2 <HAL_SPI_TransmitReceive+0x130>
 800b25e:	e07c      	b.n	800b35a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	685b      	ldr	r3, [r3, #4]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <HAL_SPI_TransmitReceive+0x1fc>
 800b268:	8b7b      	ldrh	r3, [r7, #26]
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d16b      	bne.n	800b346 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	330c      	adds	r3, #12
 800b278:	7812      	ldrb	r2, [r2, #0]
 800b27a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b280:	1c5a      	adds	r2, r3, #1
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	3b01      	subs	r3, #1
 800b28e:	b29a      	uxth	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b294:	e057      	b.n	800b346 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	f003 0302 	and.w	r3, r3, #2
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d11c      	bne.n	800b2de <HAL_SPI_TransmitReceive+0x26c>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d017      	beq.n	800b2de <HAL_SPI_TransmitReceive+0x26c>
 800b2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d114      	bne.n	800b2de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	330c      	adds	r3, #12
 800b2be:	7812      	ldrb	r2, [r2, #0]
 800b2c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2c6:	1c5a      	adds	r2, r3, #1
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	3b01      	subs	r3, #1
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b2da:	2300      	movs	r3, #0
 800b2dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	f003 0301 	and.w	r3, r3, #1
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d119      	bne.n	800b320 <HAL_SPI_TransmitReceive+0x2ae>
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d014      	beq.n	800b320 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	68da      	ldr	r2, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b300:	b2d2      	uxtb	r2, r2
 800b302:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	1c5a      	adds	r2, r3, #1
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b312:	b29b      	uxth	r3, r3
 800b314:	3b01      	subs	r3, #1
 800b316:	b29a      	uxth	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b31c:	2301      	movs	r3, #1
 800b31e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b320:	f7fb f800 	bl	8006324 <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d803      	bhi.n	800b338 <HAL_SPI_TransmitReceive+0x2c6>
 800b330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b336:	d102      	bne.n	800b33e <HAL_SPI_TransmitReceive+0x2cc>
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d103      	bne.n	800b346 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b33e:	2303      	movs	r3, #3
 800b340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b344:	e029      	b.n	800b39a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1a2      	bne.n	800b296 <HAL_SPI_TransmitReceive+0x224>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b354:	b29b      	uxth	r3, r3
 800b356:	2b00      	cmp	r3, #0
 800b358:	d19d      	bne.n	800b296 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 f8f8 	bl	800b554 <SPI_EndRxTxTransaction>
 800b364:	4603      	mov	r3, r0
 800b366:	2b00      	cmp	r3, #0
 800b368:	d006      	beq.n	800b378 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2220      	movs	r2, #32
 800b374:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b376:	e010      	b.n	800b39a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10b      	bne.n	800b398 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b380:	2300      	movs	r3, #0
 800b382:	617b      	str	r3, [r7, #20]
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	617b      	str	r3, [r7, #20]
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	e000      	b.n	800b39a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b398:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	2201      	movs	r2, #1
 800b39e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b3aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3730      	adds	r7, #48	; 0x30
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	603b      	str	r3, [r7, #0]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b3c6:	e04c      	b.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ce:	d048      	beq.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b3d0:	f7fa ffa8 	bl	8006324 <HAL_GetTick>
 800b3d4:	4602      	mov	r2, r0
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	1ad3      	subs	r3, r2, r3
 800b3da:	683a      	ldr	r2, [r7, #0]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d902      	bls.n	800b3e6 <SPI_WaitFlagStateUntilTimeout+0x30>
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d13d      	bne.n	800b462 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b3f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3fe:	d111      	bne.n	800b424 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b408:	d004      	beq.n	800b414 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b412:	d107      	bne.n	800b424 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b42c:	d10f      	bne.n	800b44e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b44c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2201      	movs	r2, #1
 800b452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b45e:	2303      	movs	r3, #3
 800b460:	e00f      	b.n	800b482 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	689a      	ldr	r2, [r3, #8]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	4013      	ands	r3, r2
 800b46c:	68ba      	ldr	r2, [r7, #8]
 800b46e:	429a      	cmp	r2, r3
 800b470:	bf0c      	ite	eq
 800b472:	2301      	moveq	r3, #1
 800b474:	2300      	movne	r3, #0
 800b476:	b2db      	uxtb	r3, r3
 800b478:	461a      	mov	r2, r3
 800b47a:	79fb      	ldrb	r3, [r7, #7]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d1a3      	bne.n	800b3c8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b086      	sub	sp, #24
 800b48e:	af02      	add	r7, sp, #8
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b49e:	d111      	bne.n	800b4c4 <SPI_EndRxTransaction+0x3a>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	689b      	ldr	r3, [r3, #8]
 800b4a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4a8:	d004      	beq.n	800b4b4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4b2:	d107      	bne.n	800b4c4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4c2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b4cc:	d12a      	bne.n	800b524 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4d6:	d012      	beq.n	800b4fe <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	2180      	movs	r1, #128	; 0x80
 800b4e2:	68f8      	ldr	r0, [r7, #12]
 800b4e4:	f7ff ff67 	bl	800b3b6 <SPI_WaitFlagStateUntilTimeout>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d02d      	beq.n	800b54a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4f2:	f043 0220 	orr.w	r2, r3, #32
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e026      	b.n	800b54c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	9300      	str	r3, [sp, #0]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	2200      	movs	r2, #0
 800b506:	2101      	movs	r1, #1
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f7ff ff54 	bl	800b3b6 <SPI_WaitFlagStateUntilTimeout>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d01a      	beq.n	800b54a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b518:	f043 0220 	orr.w	r2, r3, #32
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e013      	b.n	800b54c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	9300      	str	r3, [sp, #0]
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	2200      	movs	r2, #0
 800b52c:	2101      	movs	r1, #1
 800b52e:	68f8      	ldr	r0, [r7, #12]
 800b530:	f7ff ff41 	bl	800b3b6 <SPI_WaitFlagStateUntilTimeout>
 800b534:	4603      	mov	r3, r0
 800b536:	2b00      	cmp	r3, #0
 800b538:	d007      	beq.n	800b54a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b53e:	f043 0220 	orr.w	r2, r3, #32
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e000      	b.n	800b54c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b088      	sub	sp, #32
 800b558:	af02      	add	r7, sp, #8
 800b55a:	60f8      	str	r0, [r7, #12]
 800b55c:	60b9      	str	r1, [r7, #8]
 800b55e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b560:	4b1b      	ldr	r3, [pc, #108]	; (800b5d0 <SPI_EndRxTxTransaction+0x7c>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a1b      	ldr	r2, [pc, #108]	; (800b5d4 <SPI_EndRxTxTransaction+0x80>)
 800b566:	fba2 2303 	umull	r2, r3, r2, r3
 800b56a:	0d5b      	lsrs	r3, r3, #21
 800b56c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b570:	fb02 f303 	mul.w	r3, r2, r3
 800b574:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b57e:	d112      	bne.n	800b5a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	2200      	movs	r2, #0
 800b588:	2180      	movs	r1, #128	; 0x80
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff ff13 	bl	800b3b6 <SPI_WaitFlagStateUntilTimeout>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d016      	beq.n	800b5c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59a:	f043 0220 	orr.w	r2, r3, #32
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e00f      	b.n	800b5c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00a      	beq.n	800b5c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5bc:	2b80      	cmp	r3, #128	; 0x80
 800b5be:	d0f2      	beq.n	800b5a6 <SPI_EndRxTxTransaction+0x52>
 800b5c0:	e000      	b.n	800b5c4 <SPI_EndRxTxTransaction+0x70>
        break;
 800b5c2:	bf00      	nop
  }

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20000000 	.word	0x20000000
 800b5d4:	165e9f81 	.word	0x165e9f81

0800b5d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d101      	bne.n	800b5ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	e01d      	b.n	800b626 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d106      	bne.n	800b604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7f9 fe28 	bl	8005254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	3304      	adds	r3, #4
 800b614:	4619      	mov	r1, r3
 800b616:	4610      	mov	r0, r2
 800b618:	f000 fb56 	bl	800bcc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2201      	movs	r2, #1
 800b620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3708      	adds	r7, #8
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b62e:	b480      	push	{r7}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	68da      	ldr	r2, [r3, #12]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f042 0201 	orr.w	r2, r2, #1
 800b644:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	f003 0307 	and.w	r3, r3, #7
 800b650:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	2b06      	cmp	r3, #6
 800b656:	d007      	beq.n	800b668 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	681a      	ldr	r2, [r3, #0]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f042 0201 	orr.w	r2, r2, #1
 800b666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b082      	sub	sp, #8
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d101      	bne.n	800b688 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e01d      	b.n	800b6c4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d106      	bne.n	800b6a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2200      	movs	r2, #0
 800b698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7f9 fd65 	bl	800516c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	4610      	mov	r0, r2
 800b6b6:	f000 fb07 	bl	800bcc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6c2:	2300      	movs	r3, #0
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3708      	adds	r7, #8
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	6839      	ldr	r1, [r7, #0]
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f000 fd42 	bl	800c168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a15      	ldr	r2, [pc, #84]	; (800b740 <HAL_TIM_PWM_Start+0x74>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_TIM_PWM_Start+0x2c>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a14      	ldr	r2, [pc, #80]	; (800b744 <HAL_TIM_PWM_Start+0x78>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d101      	bne.n	800b6fc <HAL_TIM_PWM_Start+0x30>
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e000      	b.n	800b6fe <HAL_TIM_PWM_Start+0x32>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d007      	beq.n	800b712 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f003 0307 	and.w	r3, r3, #7
 800b71c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b06      	cmp	r3, #6
 800b722:	d007      	beq.n	800b734 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f042 0201 	orr.w	r2, r2, #1
 800b732:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	40010000 	.word	0x40010000
 800b744:	40010400 	.word	0x40010400

0800b748 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b086      	sub	sp, #24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
 800b750:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d101      	bne.n	800b75c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b758:	2301      	movs	r3, #1
 800b75a:	e083      	b.n	800b864 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2200      	movs	r2, #0
 800b76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f7f9 fdff 	bl	8005374 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2202      	movs	r2, #2
 800b77a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	6812      	ldr	r2, [r2, #0]
 800b788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b78c:	f023 0307 	bic.w	r3, r3, #7
 800b790:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681a      	ldr	r2, [r3, #0]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3304      	adds	r3, #4
 800b79a:	4619      	mov	r1, r3
 800b79c:	4610      	mov	r0, r2
 800b79e:	f000 fa93 	bl	800bcc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	689b      	ldr	r3, [r3, #8]
 800b7a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7ca:	f023 0303 	bic.w	r3, r3, #3
 800b7ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	689a      	ldr	r2, [r3, #8]
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	699b      	ldr	r3, [r3, #24]
 800b7d8:	021b      	lsls	r3, r3, #8
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b7e8:	f023 030c 	bic.w	r3, r3, #12
 800b7ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	68da      	ldr	r2, [r3, #12]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	69db      	ldr	r3, [r3, #28]
 800b802:	021b      	lsls	r3, r3, #8
 800b804:	4313      	orrs	r3, r2
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	011a      	lsls	r2, r3, #4
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	031b      	lsls	r3, r3, #12
 800b818:	4313      	orrs	r3, r2
 800b81a:	693a      	ldr	r2, [r7, #16]
 800b81c:	4313      	orrs	r3, r2
 800b81e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b826:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b82e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	4313      	orrs	r3, r2
 800b83c:	68fa      	ldr	r2, [r7, #12]
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	697a      	ldr	r2, [r7, #20]
 800b848:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	693a      	ldr	r2, [r7, #16]
 800b850:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <HAL_TIM_Encoder_Start+0x16>
 800b87c:	2b04      	cmp	r3, #4
 800b87e:	d008      	beq.n	800b892 <HAL_TIM_Encoder_Start+0x26>
 800b880:	e00f      	b.n	800b8a2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2201      	movs	r2, #1
 800b888:	2100      	movs	r1, #0
 800b88a:	4618      	mov	r0, r3
 800b88c:	f000 fc6c 	bl	800c168 <TIM_CCxChannelCmd>
      break;
 800b890:	e016      	b.n	800b8c0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	2201      	movs	r2, #1
 800b898:	2104      	movs	r1, #4
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 fc64 	bl	800c168 <TIM_CCxChannelCmd>
      break;
 800b8a0:	e00e      	b.n	800b8c0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f000 fc5c 	bl	800c168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	2104      	movs	r1, #4
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 fc55 	bl	800c168 <TIM_CCxChannelCmd>
      break;
 800b8be:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f042 0201 	orr.w	r2, r2, #1
 800b8ce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b8d0:	2300      	movs	r3, #0
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3708      	adds	r7, #8
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	f003 0302 	and.w	r3, r3, #2
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d122      	bne.n	800b936 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	f003 0302 	and.w	r3, r3, #2
 800b8fa:	2b02      	cmp	r3, #2
 800b8fc:	d11b      	bne.n	800b936 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f06f 0202 	mvn.w	r2, #2
 800b906:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2201      	movs	r2, #1
 800b90c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	699b      	ldr	r3, [r3, #24]
 800b914:	f003 0303 	and.w	r3, r3, #3
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f9b5 	bl	800bc8c <HAL_TIM_IC_CaptureCallback>
 800b922:	e005      	b.n	800b930 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 f9a7 	bl	800bc78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f9b8 	bl	800bca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2200      	movs	r2, #0
 800b934:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	691b      	ldr	r3, [r3, #16]
 800b93c:	f003 0304 	and.w	r3, r3, #4
 800b940:	2b04      	cmp	r3, #4
 800b942:	d122      	bne.n	800b98a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	f003 0304 	and.w	r3, r3, #4
 800b94e:	2b04      	cmp	r3, #4
 800b950:	d11b      	bne.n	800b98a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f06f 0204 	mvn.w	r2, #4
 800b95a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d003      	beq.n	800b978 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 f98b 	bl	800bc8c <HAL_TIM_IC_CaptureCallback>
 800b976:	e005      	b.n	800b984 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f97d 	bl	800bc78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f98e 	bl	800bca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	691b      	ldr	r3, [r3, #16]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b08      	cmp	r3, #8
 800b996:	d122      	bne.n	800b9de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f003 0308 	and.w	r3, r3, #8
 800b9a2:	2b08      	cmp	r3, #8
 800b9a4:	d11b      	bne.n	800b9de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f06f 0208 	mvn.w	r2, #8
 800b9ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2204      	movs	r2, #4
 800b9b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	69db      	ldr	r3, [r3, #28]
 800b9bc:	f003 0303 	and.w	r3, r3, #3
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d003      	beq.n	800b9cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 f961 	bl	800bc8c <HAL_TIM_IC_CaptureCallback>
 800b9ca:	e005      	b.n	800b9d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9cc:	6878      	ldr	r0, [r7, #4]
 800b9ce:	f000 f953 	bl	800bc78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 f964 	bl	800bca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	691b      	ldr	r3, [r3, #16]
 800b9e4:	f003 0310 	and.w	r3, r3, #16
 800b9e8:	2b10      	cmp	r3, #16
 800b9ea:	d122      	bne.n	800ba32 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f003 0310 	and.w	r3, r3, #16
 800b9f6:	2b10      	cmp	r3, #16
 800b9f8:	d11b      	bne.n	800ba32 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f06f 0210 	mvn.w	r2, #16
 800ba02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2208      	movs	r2, #8
 800ba08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69db      	ldr	r3, [r3, #28]
 800ba10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d003      	beq.n	800ba20 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 f937 	bl	800bc8c <HAL_TIM_IC_CaptureCallback>
 800ba1e:	e005      	b.n	800ba2c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 f929 	bl	800bc78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f93a 	bl	800bca0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	691b      	ldr	r3, [r3, #16]
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d10e      	bne.n	800ba5e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b01      	cmp	r3, #1
 800ba4c:	d107      	bne.n	800ba5e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	f06f 0201 	mvn.w	r2, #1
 800ba56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7f7 ffd5 	bl	8003a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	691b      	ldr	r3, [r3, #16]
 800ba64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba68:	2b80      	cmp	r3, #128	; 0x80
 800ba6a:	d10e      	bne.n	800ba8a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba76:	2b80      	cmp	r3, #128	; 0x80
 800ba78:	d107      	bne.n	800ba8a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 fc6d 	bl	800c364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	691b      	ldr	r3, [r3, #16]
 800ba90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba94:	2b40      	cmp	r3, #64	; 0x40
 800ba96:	d10e      	bne.n	800bab6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baa2:	2b40      	cmp	r3, #64	; 0x40
 800baa4:	d107      	bne.n	800bab6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800baae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f8ff 	bl	800bcb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	691b      	ldr	r3, [r3, #16]
 800babc:	f003 0320 	and.w	r3, r3, #32
 800bac0:	2b20      	cmp	r3, #32
 800bac2:	d10e      	bne.n	800bae2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b20      	cmp	r3, #32
 800bad0:	d107      	bne.n	800bae2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f06f 0220 	mvn.w	r2, #32
 800bada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	f000 fc37 	bl	800c350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bae2:	bf00      	nop
 800bae4:	3708      	adds	r7, #8
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
	...

0800baec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d101      	bne.n	800bb06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800bb02:	2302      	movs	r3, #2
 800bb04:	e0b4      	b.n	800bc70 <HAL_TIM_PWM_ConfigChannel+0x184>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2201      	movs	r2, #1
 800bb0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2202      	movs	r2, #2
 800bb12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b0c      	cmp	r3, #12
 800bb1a:	f200 809f 	bhi.w	800bc5c <HAL_TIM_PWM_ConfigChannel+0x170>
 800bb1e:	a201      	add	r2, pc, #4	; (adr r2, 800bb24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800bb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb24:	0800bb59 	.word	0x0800bb59
 800bb28:	0800bc5d 	.word	0x0800bc5d
 800bb2c:	0800bc5d 	.word	0x0800bc5d
 800bb30:	0800bc5d 	.word	0x0800bc5d
 800bb34:	0800bb99 	.word	0x0800bb99
 800bb38:	0800bc5d 	.word	0x0800bc5d
 800bb3c:	0800bc5d 	.word	0x0800bc5d
 800bb40:	0800bc5d 	.word	0x0800bc5d
 800bb44:	0800bbdb 	.word	0x0800bbdb
 800bb48:	0800bc5d 	.word	0x0800bc5d
 800bb4c:	0800bc5d 	.word	0x0800bc5d
 800bb50:	0800bc5d 	.word	0x0800bc5d
 800bb54:	0800bc1b 	.word	0x0800bc1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68b9      	ldr	r1, [r7, #8]
 800bb5e:	4618      	mov	r0, r3
 800bb60:	f000 f952 	bl	800be08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	699a      	ldr	r2, [r3, #24]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f042 0208 	orr.w	r2, r2, #8
 800bb72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 0204 	bic.w	r2, r2, #4
 800bb82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6999      	ldr	r1, [r3, #24]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	691a      	ldr	r2, [r3, #16]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	430a      	orrs	r2, r1
 800bb94:	619a      	str	r2, [r3, #24]
      break;
 800bb96:	e062      	b.n	800bc5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68b9      	ldr	r1, [r7, #8]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f9a2 	bl	800bee8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	699a      	ldr	r2, [r3, #24]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	699a      	ldr	r2, [r3, #24]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6999      	ldr	r1, [r3, #24]
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	021a      	lsls	r2, r3, #8
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	430a      	orrs	r2, r1
 800bbd6:	619a      	str	r2, [r3, #24]
      break;
 800bbd8:	e041      	b.n	800bc5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f000 f9f7 	bl	800bfd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	69da      	ldr	r2, [r3, #28]
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f042 0208 	orr.w	r2, r2, #8
 800bbf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	69da      	ldr	r2, [r3, #28]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f022 0204 	bic.w	r2, r2, #4
 800bc04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	69d9      	ldr	r1, [r3, #28]
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	691a      	ldr	r2, [r3, #16]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	430a      	orrs	r2, r1
 800bc16:	61da      	str	r2, [r3, #28]
      break;
 800bc18:	e021      	b.n	800bc5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68b9      	ldr	r1, [r7, #8]
 800bc20:	4618      	mov	r0, r3
 800bc22:	f000 fa4b 	bl	800c0bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	69da      	ldr	r2, [r3, #28]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	69da      	ldr	r2, [r3, #28]
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	69d9      	ldr	r1, [r3, #28]
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	021a      	lsls	r2, r3, #8
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	430a      	orrs	r2, r1
 800bc58:	61da      	str	r2, [r3, #28]
      break;
 800bc5a:	e000      	b.n	800bc5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800bc5c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3710      	adds	r7, #16
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b085      	sub	sp, #20
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
 800bcd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a40      	ldr	r2, [pc, #256]	; (800bddc <TIM_Base_SetConfig+0x114>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d013      	beq.n	800bd08 <TIM_Base_SetConfig+0x40>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bce6:	d00f      	beq.n	800bd08 <TIM_Base_SetConfig+0x40>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	4a3d      	ldr	r2, [pc, #244]	; (800bde0 <TIM_Base_SetConfig+0x118>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d00b      	beq.n	800bd08 <TIM_Base_SetConfig+0x40>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4a3c      	ldr	r2, [pc, #240]	; (800bde4 <TIM_Base_SetConfig+0x11c>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d007      	beq.n	800bd08 <TIM_Base_SetConfig+0x40>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4a3b      	ldr	r2, [pc, #236]	; (800bde8 <TIM_Base_SetConfig+0x120>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d003      	beq.n	800bd08 <TIM_Base_SetConfig+0x40>
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	4a3a      	ldr	r2, [pc, #232]	; (800bdec <TIM_Base_SetConfig+0x124>)
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d108      	bne.n	800bd1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4313      	orrs	r3, r2
 800bd18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a2f      	ldr	r2, [pc, #188]	; (800bddc <TIM_Base_SetConfig+0x114>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d02b      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd28:	d027      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a2c      	ldr	r2, [pc, #176]	; (800bde0 <TIM_Base_SetConfig+0x118>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d023      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a2b      	ldr	r2, [pc, #172]	; (800bde4 <TIM_Base_SetConfig+0x11c>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d01f      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a2a      	ldr	r2, [pc, #168]	; (800bde8 <TIM_Base_SetConfig+0x120>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d01b      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a29      	ldr	r2, [pc, #164]	; (800bdec <TIM_Base_SetConfig+0x124>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d017      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a28      	ldr	r2, [pc, #160]	; (800bdf0 <TIM_Base_SetConfig+0x128>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d013      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	4a27      	ldr	r2, [pc, #156]	; (800bdf4 <TIM_Base_SetConfig+0x12c>)
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d00f      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4a26      	ldr	r2, [pc, #152]	; (800bdf8 <TIM_Base_SetConfig+0x130>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d00b      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	4a25      	ldr	r2, [pc, #148]	; (800bdfc <TIM_Base_SetConfig+0x134>)
 800bd66:	4293      	cmp	r3, r2
 800bd68:	d007      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4a24      	ldr	r2, [pc, #144]	; (800be00 <TIM_Base_SetConfig+0x138>)
 800bd6e:	4293      	cmp	r3, r2
 800bd70:	d003      	beq.n	800bd7a <TIM_Base_SetConfig+0xb2>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	4a23      	ldr	r2, [pc, #140]	; (800be04 <TIM_Base_SetConfig+0x13c>)
 800bd76:	4293      	cmp	r3, r2
 800bd78:	d108      	bne.n	800bd8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	68fa      	ldr	r2, [r7, #12]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	4313      	orrs	r3, r2
 800bd98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	68fa      	ldr	r2, [r7, #12]
 800bd9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	689a      	ldr	r2, [r3, #8]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a0a      	ldr	r2, [pc, #40]	; (800bddc <TIM_Base_SetConfig+0x114>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d003      	beq.n	800bdc0 <TIM_Base_SetConfig+0xf8>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	4a0c      	ldr	r2, [pc, #48]	; (800bdec <TIM_Base_SetConfig+0x124>)
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d103      	bne.n	800bdc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	691a      	ldr	r2, [r3, #16]
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	615a      	str	r2, [r3, #20]
}
 800bdce:	bf00      	nop
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
 800bdda:	bf00      	nop
 800bddc:	40010000 	.word	0x40010000
 800bde0:	40000400 	.word	0x40000400
 800bde4:	40000800 	.word	0x40000800
 800bde8:	40000c00 	.word	0x40000c00
 800bdec:	40010400 	.word	0x40010400
 800bdf0:	40014000 	.word	0x40014000
 800bdf4:	40014400 	.word	0x40014400
 800bdf8:	40014800 	.word	0x40014800
 800bdfc:	40001800 	.word	0x40001800
 800be00:	40001c00 	.word	0x40001c00
 800be04:	40002000 	.word	0x40002000

0800be08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be08:	b480      	push	{r7}
 800be0a:	b087      	sub	sp, #28
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	f023 0201 	bic.w	r2, r3, #1
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a1b      	ldr	r3, [r3, #32]
 800be22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	699b      	ldr	r3, [r3, #24]
 800be2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	f023 0303 	bic.w	r3, r3, #3
 800be3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	68fa      	ldr	r2, [r7, #12]
 800be46:	4313      	orrs	r3, r2
 800be48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	f023 0302 	bic.w	r3, r3, #2
 800be50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	689b      	ldr	r3, [r3, #8]
 800be56:	697a      	ldr	r2, [r7, #20]
 800be58:	4313      	orrs	r3, r2
 800be5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	4a20      	ldr	r2, [pc, #128]	; (800bee0 <TIM_OC1_SetConfig+0xd8>)
 800be60:	4293      	cmp	r3, r2
 800be62:	d003      	beq.n	800be6c <TIM_OC1_SetConfig+0x64>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a1f      	ldr	r2, [pc, #124]	; (800bee4 <TIM_OC1_SetConfig+0xdc>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d10c      	bne.n	800be86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f023 0308 	bic.w	r3, r3, #8
 800be72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	f023 0304 	bic.w	r3, r3, #4
 800be84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a15      	ldr	r2, [pc, #84]	; (800bee0 <TIM_OC1_SetConfig+0xd8>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d003      	beq.n	800be96 <TIM_OC1_SetConfig+0x8e>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a14      	ldr	r2, [pc, #80]	; (800bee4 <TIM_OC1_SetConfig+0xdc>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d111      	bne.n	800beba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	693a      	ldr	r2, [r7, #16]
 800beac:	4313      	orrs	r3, r2
 800beae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	693a      	ldr	r2, [r7, #16]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	693a      	ldr	r2, [r7, #16]
 800bebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	68fa      	ldr	r2, [r7, #12]
 800bec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685a      	ldr	r2, [r3, #4]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	697a      	ldr	r2, [r7, #20]
 800bed2:	621a      	str	r2, [r3, #32]
}
 800bed4:	bf00      	nop
 800bed6:	371c      	adds	r7, #28
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	40010000 	.word	0x40010000
 800bee4:	40010400 	.word	0x40010400

0800bee8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bee8:	b480      	push	{r7}
 800beea:	b087      	sub	sp, #28
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a1b      	ldr	r3, [r3, #32]
 800bef6:	f023 0210 	bic.w	r2, r3, #16
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a1b      	ldr	r3, [r3, #32]
 800bf02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	021b      	lsls	r3, r3, #8
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f023 0320 	bic.w	r3, r3, #32
 800bf32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	011b      	lsls	r3, r3, #4
 800bf3a:	697a      	ldr	r2, [r7, #20]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a22      	ldr	r2, [pc, #136]	; (800bfcc <TIM_OC2_SetConfig+0xe4>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d003      	beq.n	800bf50 <TIM_OC2_SetConfig+0x68>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a21      	ldr	r2, [pc, #132]	; (800bfd0 <TIM_OC2_SetConfig+0xe8>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d10d      	bne.n	800bf6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bf50:	697b      	ldr	r3, [r7, #20]
 800bf52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	697a      	ldr	r2, [r7, #20]
 800bf60:	4313      	orrs	r3, r2
 800bf62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4a17      	ldr	r2, [pc, #92]	; (800bfcc <TIM_OC2_SetConfig+0xe4>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d003      	beq.n	800bf7c <TIM_OC2_SetConfig+0x94>
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	4a16      	ldr	r2, [pc, #88]	; (800bfd0 <TIM_OC2_SetConfig+0xe8>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d113      	bne.n	800bfa4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bf7c:	693b      	ldr	r3, [r7, #16]
 800bf7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bf84:	693b      	ldr	r3, [r7, #16]
 800bf86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	695b      	ldr	r3, [r3, #20]
 800bf90:	009b      	lsls	r3, r3, #2
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	699b      	ldr	r3, [r3, #24]
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	693a      	ldr	r2, [r7, #16]
 800bfa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	697a      	ldr	r2, [r7, #20]
 800bfbc:	621a      	str	r2, [r3, #32]
}
 800bfbe:	bf00      	nop
 800bfc0:	371c      	adds	r7, #28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	40010000 	.word	0x40010000
 800bfd0:	40010400 	.word	0x40010400

0800bfd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b087      	sub	sp, #28
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6a1b      	ldr	r3, [r3, #32]
 800bfee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f023 0303 	bic.w	r3, r3, #3
 800c00a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68fa      	ldr	r2, [r7, #12]
 800c012:	4313      	orrs	r3, r2
 800c014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c01c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	689b      	ldr	r3, [r3, #8]
 800c022:	021b      	lsls	r3, r3, #8
 800c024:	697a      	ldr	r2, [r7, #20]
 800c026:	4313      	orrs	r3, r2
 800c028:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a21      	ldr	r2, [pc, #132]	; (800c0b4 <TIM_OC3_SetConfig+0xe0>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d003      	beq.n	800c03a <TIM_OC3_SetConfig+0x66>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a20      	ldr	r2, [pc, #128]	; (800c0b8 <TIM_OC3_SetConfig+0xe4>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d10d      	bne.n	800c056 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c040:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	021b      	lsls	r3, r3, #8
 800c048:	697a      	ldr	r2, [r7, #20]
 800c04a:	4313      	orrs	r3, r2
 800c04c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c054:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4a16      	ldr	r2, [pc, #88]	; (800c0b4 <TIM_OC3_SetConfig+0xe0>)
 800c05a:	4293      	cmp	r3, r2
 800c05c:	d003      	beq.n	800c066 <TIM_OC3_SetConfig+0x92>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	4a15      	ldr	r2, [pc, #84]	; (800c0b8 <TIM_OC3_SetConfig+0xe4>)
 800c062:	4293      	cmp	r3, r2
 800c064:	d113      	bne.n	800c08e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c066:	693b      	ldr	r3, [r7, #16]
 800c068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c06c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	011b      	lsls	r3, r3, #4
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4313      	orrs	r3, r2
 800c080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	693a      	ldr	r2, [r7, #16]
 800c092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	685a      	ldr	r2, [r3, #4]
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	697a      	ldr	r2, [r7, #20]
 800c0a6:	621a      	str	r2, [r3, #32]
}
 800c0a8:	bf00      	nop
 800c0aa:	371c      	adds	r7, #28
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	40010000 	.word	0x40010000
 800c0b8:	40010400 	.word	0x40010400

0800c0bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	021b      	lsls	r3, r3, #8
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c106:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	689b      	ldr	r3, [r3, #8]
 800c10c:	031b      	lsls	r3, r3, #12
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	4313      	orrs	r3, r2
 800c112:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a12      	ldr	r2, [pc, #72]	; (800c160 <TIM_OC4_SetConfig+0xa4>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d003      	beq.n	800c124 <TIM_OC4_SetConfig+0x68>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a11      	ldr	r2, [pc, #68]	; (800c164 <TIM_OC4_SetConfig+0xa8>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d109      	bne.n	800c138 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c12a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	695b      	ldr	r3, [r3, #20]
 800c130:	019b      	lsls	r3, r3, #6
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	4313      	orrs	r3, r2
 800c136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	685a      	ldr	r2, [r3, #4]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	621a      	str	r2, [r3, #32]
}
 800c152:	bf00      	nop
 800c154:	371c      	adds	r7, #28
 800c156:	46bd      	mov	sp, r7
 800c158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15c:	4770      	bx	lr
 800c15e:	bf00      	nop
 800c160:	40010000 	.word	0x40010000
 800c164:	40010400 	.word	0x40010400

0800c168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	60f8      	str	r0, [r7, #12]
 800c170:	60b9      	str	r1, [r7, #8]
 800c172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	f003 031f 	and.w	r3, r3, #31
 800c17a:	2201      	movs	r2, #1
 800c17c:	fa02 f303 	lsl.w	r3, r2, r3
 800c180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	6a1a      	ldr	r2, [r3, #32]
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	43db      	mvns	r3, r3
 800c18a:	401a      	ands	r2, r3
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	6a1a      	ldr	r2, [r3, #32]
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	f003 031f 	and.w	r3, r3, #31
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	fa01 f303 	lsl.w	r3, r1, r3
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	621a      	str	r2, [r3, #32]
}
 800c1a6:	bf00      	nop
 800c1a8:	371c      	adds	r7, #28
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b0:	4770      	bx	lr
	...

0800c1b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b085      	sub	sp, #20
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d101      	bne.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	e05a      	b.n	800c282 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2202      	movs	r2, #2
 800c1d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	4313      	orrs	r3, r2
 800c1fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a21      	ldr	r2, [pc, #132]	; (800c290 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d022      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c218:	d01d      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a1d      	ldr	r2, [pc, #116]	; (800c294 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d018      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a1b      	ldr	r2, [pc, #108]	; (800c298 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d013      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a1a      	ldr	r2, [pc, #104]	; (800c29c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d00e      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	4a18      	ldr	r2, [pc, #96]	; (800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d009      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	4a17      	ldr	r2, [pc, #92]	; (800c2a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d004      	beq.n	800c256 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a15      	ldr	r2, [pc, #84]	; (800c2a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d10c      	bne.n	800c270 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c25c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	68ba      	ldr	r2, [r7, #8]
 800c264:	4313      	orrs	r3, r2
 800c266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	68ba      	ldr	r2, [r7, #8]
 800c26e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c280:	2300      	movs	r3, #0
}
 800c282:	4618      	mov	r0, r3
 800c284:	3714      	adds	r7, #20
 800c286:	46bd      	mov	sp, r7
 800c288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28c:	4770      	bx	lr
 800c28e:	bf00      	nop
 800c290:	40010000 	.word	0x40010000
 800c294:	40000400 	.word	0x40000400
 800c298:	40000800 	.word	0x40000800
 800c29c:	40000c00 	.word	0x40000c00
 800c2a0:	40010400 	.word	0x40010400
 800c2a4:	40014000 	.word	0x40014000
 800c2a8:	40001800 	.word	0x40001800

0800c2ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2c0:	2b01      	cmp	r3, #1
 800c2c2:	d101      	bne.n	800c2c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e03d      	b.n	800c344 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4313      	orrs	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	691b      	ldr	r3, [r3, #16]
 800c312:	4313      	orrs	r3, r2
 800c314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	4313      	orrs	r3, r2
 800c322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	69db      	ldr	r3, [r3, #28]
 800c32e:	4313      	orrs	r3, r2
 800c330:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c342:	2300      	movs	r3, #0
}
 800c344:	4618      	mov	r0, r3
 800c346:	3714      	adds	r7, #20
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr

0800c350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c350:	b480      	push	{r7}
 800c352:	b083      	sub	sp, #12
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c358:	bf00      	nop
 800c35a:	370c      	adds	r7, #12
 800c35c:	46bd      	mov	sp, r7
 800c35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c36c:	bf00      	nop
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d101      	bne.n	800c38a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e03f      	b.n	800c40a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d106      	bne.n	800c3a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2200      	movs	r2, #0
 800c39a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f7f9 f912 	bl	80055c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2224      	movs	r2, #36	; 0x24
 800c3a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	68da      	ldr	r2, [r3, #12]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c3ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f829 	bl	800c414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	691a      	ldr	r2, [r3, #16]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c3d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	695a      	ldr	r2, [r3, #20]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c3e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	68da      	ldr	r2, [r3, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c3f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2220      	movs	r2, #32
 800c3fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2220      	movs	r2, #32
 800c404:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c408:	2300      	movs	r3, #0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3708      	adds	r7, #8
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
	...

0800c414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	430a      	orrs	r2, r1
 800c432:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	431a      	orrs	r2, r3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	431a      	orrs	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	69db      	ldr	r3, [r3, #28]
 800c448:	4313      	orrs	r3, r2
 800c44a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c456:	f023 030c 	bic.w	r3, r3, #12
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	6812      	ldr	r2, [r2, #0]
 800c45e:	68f9      	ldr	r1, [r7, #12]
 800c460:	430b      	orrs	r3, r1
 800c462:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	699a      	ldr	r2, [r3, #24]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	430a      	orrs	r2, r1
 800c478:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c482:	f040 818b 	bne.w	800c79c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	4ac1      	ldr	r2, [pc, #772]	; (800c790 <UART_SetConfig+0x37c>)
 800c48c:	4293      	cmp	r3, r2
 800c48e:	d005      	beq.n	800c49c <UART_SetConfig+0x88>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4abf      	ldr	r2, [pc, #764]	; (800c794 <UART_SetConfig+0x380>)
 800c496:	4293      	cmp	r3, r2
 800c498:	f040 80bd 	bne.w	800c616 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c49c:	f7fc fbcc 	bl	8008c38 <HAL_RCC_GetPCLK2Freq>
 800c4a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	461d      	mov	r5, r3
 800c4a6:	f04f 0600 	mov.w	r6, #0
 800c4aa:	46a8      	mov	r8, r5
 800c4ac:	46b1      	mov	r9, r6
 800c4ae:	eb18 0308 	adds.w	r3, r8, r8
 800c4b2:	eb49 0409 	adc.w	r4, r9, r9
 800c4b6:	4698      	mov	r8, r3
 800c4b8:	46a1      	mov	r9, r4
 800c4ba:	eb18 0805 	adds.w	r8, r8, r5
 800c4be:	eb49 0906 	adc.w	r9, r9, r6
 800c4c2:	f04f 0100 	mov.w	r1, #0
 800c4c6:	f04f 0200 	mov.w	r2, #0
 800c4ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c4ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c4d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c4d6:	4688      	mov	r8, r1
 800c4d8:	4691      	mov	r9, r2
 800c4da:	eb18 0005 	adds.w	r0, r8, r5
 800c4de:	eb49 0106 	adc.w	r1, r9, r6
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	461d      	mov	r5, r3
 800c4e8:	f04f 0600 	mov.w	r6, #0
 800c4ec:	196b      	adds	r3, r5, r5
 800c4ee:	eb46 0406 	adc.w	r4, r6, r6
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	4623      	mov	r3, r4
 800c4f6:	f7f4 fbdf 	bl	8000cb8 <__aeabi_uldivmod>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	460c      	mov	r4, r1
 800c4fe:	461a      	mov	r2, r3
 800c500:	4ba5      	ldr	r3, [pc, #660]	; (800c798 <UART_SetConfig+0x384>)
 800c502:	fba3 2302 	umull	r2, r3, r3, r2
 800c506:	095b      	lsrs	r3, r3, #5
 800c508:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	461d      	mov	r5, r3
 800c510:	f04f 0600 	mov.w	r6, #0
 800c514:	46a9      	mov	r9, r5
 800c516:	46b2      	mov	sl, r6
 800c518:	eb19 0309 	adds.w	r3, r9, r9
 800c51c:	eb4a 040a 	adc.w	r4, sl, sl
 800c520:	4699      	mov	r9, r3
 800c522:	46a2      	mov	sl, r4
 800c524:	eb19 0905 	adds.w	r9, r9, r5
 800c528:	eb4a 0a06 	adc.w	sl, sl, r6
 800c52c:	f04f 0100 	mov.w	r1, #0
 800c530:	f04f 0200 	mov.w	r2, #0
 800c534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c538:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c53c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c540:	4689      	mov	r9, r1
 800c542:	4692      	mov	sl, r2
 800c544:	eb19 0005 	adds.w	r0, r9, r5
 800c548:	eb4a 0106 	adc.w	r1, sl, r6
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	461d      	mov	r5, r3
 800c552:	f04f 0600 	mov.w	r6, #0
 800c556:	196b      	adds	r3, r5, r5
 800c558:	eb46 0406 	adc.w	r4, r6, r6
 800c55c:	461a      	mov	r2, r3
 800c55e:	4623      	mov	r3, r4
 800c560:	f7f4 fbaa 	bl	8000cb8 <__aeabi_uldivmod>
 800c564:	4603      	mov	r3, r0
 800c566:	460c      	mov	r4, r1
 800c568:	461a      	mov	r2, r3
 800c56a:	4b8b      	ldr	r3, [pc, #556]	; (800c798 <UART_SetConfig+0x384>)
 800c56c:	fba3 1302 	umull	r1, r3, r3, r2
 800c570:	095b      	lsrs	r3, r3, #5
 800c572:	2164      	movs	r1, #100	; 0x64
 800c574:	fb01 f303 	mul.w	r3, r1, r3
 800c578:	1ad3      	subs	r3, r2, r3
 800c57a:	00db      	lsls	r3, r3, #3
 800c57c:	3332      	adds	r3, #50	; 0x32
 800c57e:	4a86      	ldr	r2, [pc, #536]	; (800c798 <UART_SetConfig+0x384>)
 800c580:	fba2 2303 	umull	r2, r3, r2, r3
 800c584:	095b      	lsrs	r3, r3, #5
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c58c:	4498      	add	r8, r3
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	461d      	mov	r5, r3
 800c592:	f04f 0600 	mov.w	r6, #0
 800c596:	46a9      	mov	r9, r5
 800c598:	46b2      	mov	sl, r6
 800c59a:	eb19 0309 	adds.w	r3, r9, r9
 800c59e:	eb4a 040a 	adc.w	r4, sl, sl
 800c5a2:	4699      	mov	r9, r3
 800c5a4:	46a2      	mov	sl, r4
 800c5a6:	eb19 0905 	adds.w	r9, r9, r5
 800c5aa:	eb4a 0a06 	adc.w	sl, sl, r6
 800c5ae:	f04f 0100 	mov.w	r1, #0
 800c5b2:	f04f 0200 	mov.w	r2, #0
 800c5b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c5ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c5be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c5c2:	4689      	mov	r9, r1
 800c5c4:	4692      	mov	sl, r2
 800c5c6:	eb19 0005 	adds.w	r0, r9, r5
 800c5ca:	eb4a 0106 	adc.w	r1, sl, r6
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	461d      	mov	r5, r3
 800c5d4:	f04f 0600 	mov.w	r6, #0
 800c5d8:	196b      	adds	r3, r5, r5
 800c5da:	eb46 0406 	adc.w	r4, r6, r6
 800c5de:	461a      	mov	r2, r3
 800c5e0:	4623      	mov	r3, r4
 800c5e2:	f7f4 fb69 	bl	8000cb8 <__aeabi_uldivmod>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	4b6a      	ldr	r3, [pc, #424]	; (800c798 <UART_SetConfig+0x384>)
 800c5ee:	fba3 1302 	umull	r1, r3, r3, r2
 800c5f2:	095b      	lsrs	r3, r3, #5
 800c5f4:	2164      	movs	r1, #100	; 0x64
 800c5f6:	fb01 f303 	mul.w	r3, r1, r3
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	3332      	adds	r3, #50	; 0x32
 800c600:	4a65      	ldr	r2, [pc, #404]	; (800c798 <UART_SetConfig+0x384>)
 800c602:	fba2 2303 	umull	r2, r3, r2, r3
 800c606:	095b      	lsrs	r3, r3, #5
 800c608:	f003 0207 	and.w	r2, r3, #7
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4442      	add	r2, r8
 800c612:	609a      	str	r2, [r3, #8]
 800c614:	e26f      	b.n	800caf6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c616:	f7fc fafb 	bl	8008c10 <HAL_RCC_GetPCLK1Freq>
 800c61a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	461d      	mov	r5, r3
 800c620:	f04f 0600 	mov.w	r6, #0
 800c624:	46a8      	mov	r8, r5
 800c626:	46b1      	mov	r9, r6
 800c628:	eb18 0308 	adds.w	r3, r8, r8
 800c62c:	eb49 0409 	adc.w	r4, r9, r9
 800c630:	4698      	mov	r8, r3
 800c632:	46a1      	mov	r9, r4
 800c634:	eb18 0805 	adds.w	r8, r8, r5
 800c638:	eb49 0906 	adc.w	r9, r9, r6
 800c63c:	f04f 0100 	mov.w	r1, #0
 800c640:	f04f 0200 	mov.w	r2, #0
 800c644:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c648:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c64c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c650:	4688      	mov	r8, r1
 800c652:	4691      	mov	r9, r2
 800c654:	eb18 0005 	adds.w	r0, r8, r5
 800c658:	eb49 0106 	adc.w	r1, r9, r6
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	461d      	mov	r5, r3
 800c662:	f04f 0600 	mov.w	r6, #0
 800c666:	196b      	adds	r3, r5, r5
 800c668:	eb46 0406 	adc.w	r4, r6, r6
 800c66c:	461a      	mov	r2, r3
 800c66e:	4623      	mov	r3, r4
 800c670:	f7f4 fb22 	bl	8000cb8 <__aeabi_uldivmod>
 800c674:	4603      	mov	r3, r0
 800c676:	460c      	mov	r4, r1
 800c678:	461a      	mov	r2, r3
 800c67a:	4b47      	ldr	r3, [pc, #284]	; (800c798 <UART_SetConfig+0x384>)
 800c67c:	fba3 2302 	umull	r2, r3, r3, r2
 800c680:	095b      	lsrs	r3, r3, #5
 800c682:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c686:	68bb      	ldr	r3, [r7, #8]
 800c688:	461d      	mov	r5, r3
 800c68a:	f04f 0600 	mov.w	r6, #0
 800c68e:	46a9      	mov	r9, r5
 800c690:	46b2      	mov	sl, r6
 800c692:	eb19 0309 	adds.w	r3, r9, r9
 800c696:	eb4a 040a 	adc.w	r4, sl, sl
 800c69a:	4699      	mov	r9, r3
 800c69c:	46a2      	mov	sl, r4
 800c69e:	eb19 0905 	adds.w	r9, r9, r5
 800c6a2:	eb4a 0a06 	adc.w	sl, sl, r6
 800c6a6:	f04f 0100 	mov.w	r1, #0
 800c6aa:	f04f 0200 	mov.w	r2, #0
 800c6ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c6b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c6b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c6ba:	4689      	mov	r9, r1
 800c6bc:	4692      	mov	sl, r2
 800c6be:	eb19 0005 	adds.w	r0, r9, r5
 800c6c2:	eb4a 0106 	adc.w	r1, sl, r6
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	461d      	mov	r5, r3
 800c6cc:	f04f 0600 	mov.w	r6, #0
 800c6d0:	196b      	adds	r3, r5, r5
 800c6d2:	eb46 0406 	adc.w	r4, r6, r6
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	4623      	mov	r3, r4
 800c6da:	f7f4 faed 	bl	8000cb8 <__aeabi_uldivmod>
 800c6de:	4603      	mov	r3, r0
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	4b2c      	ldr	r3, [pc, #176]	; (800c798 <UART_SetConfig+0x384>)
 800c6e6:	fba3 1302 	umull	r1, r3, r3, r2
 800c6ea:	095b      	lsrs	r3, r3, #5
 800c6ec:	2164      	movs	r1, #100	; 0x64
 800c6ee:	fb01 f303 	mul.w	r3, r1, r3
 800c6f2:	1ad3      	subs	r3, r2, r3
 800c6f4:	00db      	lsls	r3, r3, #3
 800c6f6:	3332      	adds	r3, #50	; 0x32
 800c6f8:	4a27      	ldr	r2, [pc, #156]	; (800c798 <UART_SetConfig+0x384>)
 800c6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6fe:	095b      	lsrs	r3, r3, #5
 800c700:	005b      	lsls	r3, r3, #1
 800c702:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c706:	4498      	add	r8, r3
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	461d      	mov	r5, r3
 800c70c:	f04f 0600 	mov.w	r6, #0
 800c710:	46a9      	mov	r9, r5
 800c712:	46b2      	mov	sl, r6
 800c714:	eb19 0309 	adds.w	r3, r9, r9
 800c718:	eb4a 040a 	adc.w	r4, sl, sl
 800c71c:	4699      	mov	r9, r3
 800c71e:	46a2      	mov	sl, r4
 800c720:	eb19 0905 	adds.w	r9, r9, r5
 800c724:	eb4a 0a06 	adc.w	sl, sl, r6
 800c728:	f04f 0100 	mov.w	r1, #0
 800c72c:	f04f 0200 	mov.w	r2, #0
 800c730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c73c:	4689      	mov	r9, r1
 800c73e:	4692      	mov	sl, r2
 800c740:	eb19 0005 	adds.w	r0, r9, r5
 800c744:	eb4a 0106 	adc.w	r1, sl, r6
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	461d      	mov	r5, r3
 800c74e:	f04f 0600 	mov.w	r6, #0
 800c752:	196b      	adds	r3, r5, r5
 800c754:	eb46 0406 	adc.w	r4, r6, r6
 800c758:	461a      	mov	r2, r3
 800c75a:	4623      	mov	r3, r4
 800c75c:	f7f4 faac 	bl	8000cb8 <__aeabi_uldivmod>
 800c760:	4603      	mov	r3, r0
 800c762:	460c      	mov	r4, r1
 800c764:	461a      	mov	r2, r3
 800c766:	4b0c      	ldr	r3, [pc, #48]	; (800c798 <UART_SetConfig+0x384>)
 800c768:	fba3 1302 	umull	r1, r3, r3, r2
 800c76c:	095b      	lsrs	r3, r3, #5
 800c76e:	2164      	movs	r1, #100	; 0x64
 800c770:	fb01 f303 	mul.w	r3, r1, r3
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	3332      	adds	r3, #50	; 0x32
 800c77a:	4a07      	ldr	r2, [pc, #28]	; (800c798 <UART_SetConfig+0x384>)
 800c77c:	fba2 2303 	umull	r2, r3, r2, r3
 800c780:	095b      	lsrs	r3, r3, #5
 800c782:	f003 0207 	and.w	r2, r3, #7
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4442      	add	r2, r8
 800c78c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800c78e:	e1b2      	b.n	800caf6 <UART_SetConfig+0x6e2>
 800c790:	40011000 	.word	0x40011000
 800c794:	40011400 	.word	0x40011400
 800c798:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4ad7      	ldr	r2, [pc, #860]	; (800cb00 <UART_SetConfig+0x6ec>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	d005      	beq.n	800c7b2 <UART_SetConfig+0x39e>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	4ad6      	ldr	r2, [pc, #856]	; (800cb04 <UART_SetConfig+0x6f0>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	f040 80d1 	bne.w	800c954 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7b2:	f7fc fa41 	bl	8008c38 <HAL_RCC_GetPCLK2Freq>
 800c7b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	469a      	mov	sl, r3
 800c7bc:	f04f 0b00 	mov.w	fp, #0
 800c7c0:	46d0      	mov	r8, sl
 800c7c2:	46d9      	mov	r9, fp
 800c7c4:	eb18 0308 	adds.w	r3, r8, r8
 800c7c8:	eb49 0409 	adc.w	r4, r9, r9
 800c7cc:	4698      	mov	r8, r3
 800c7ce:	46a1      	mov	r9, r4
 800c7d0:	eb18 080a 	adds.w	r8, r8, sl
 800c7d4:	eb49 090b 	adc.w	r9, r9, fp
 800c7d8:	f04f 0100 	mov.w	r1, #0
 800c7dc:	f04f 0200 	mov.w	r2, #0
 800c7e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c7e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c7e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c7ec:	4688      	mov	r8, r1
 800c7ee:	4691      	mov	r9, r2
 800c7f0:	eb1a 0508 	adds.w	r5, sl, r8
 800c7f4:	eb4b 0609 	adc.w	r6, fp, r9
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	f04f 0200 	mov.w	r2, #0
 800c802:	f04f 0300 	mov.w	r3, #0
 800c806:	f04f 0400 	mov.w	r4, #0
 800c80a:	0094      	lsls	r4, r2, #2
 800c80c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c810:	008b      	lsls	r3, r1, #2
 800c812:	461a      	mov	r2, r3
 800c814:	4623      	mov	r3, r4
 800c816:	4628      	mov	r0, r5
 800c818:	4631      	mov	r1, r6
 800c81a:	f7f4 fa4d 	bl	8000cb8 <__aeabi_uldivmod>
 800c81e:	4603      	mov	r3, r0
 800c820:	460c      	mov	r4, r1
 800c822:	461a      	mov	r2, r3
 800c824:	4bb8      	ldr	r3, [pc, #736]	; (800cb08 <UART_SetConfig+0x6f4>)
 800c826:	fba3 2302 	umull	r2, r3, r3, r2
 800c82a:	095b      	lsrs	r3, r3, #5
 800c82c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	469b      	mov	fp, r3
 800c834:	f04f 0c00 	mov.w	ip, #0
 800c838:	46d9      	mov	r9, fp
 800c83a:	46e2      	mov	sl, ip
 800c83c:	eb19 0309 	adds.w	r3, r9, r9
 800c840:	eb4a 040a 	adc.w	r4, sl, sl
 800c844:	4699      	mov	r9, r3
 800c846:	46a2      	mov	sl, r4
 800c848:	eb19 090b 	adds.w	r9, r9, fp
 800c84c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c850:	f04f 0100 	mov.w	r1, #0
 800c854:	f04f 0200 	mov.w	r2, #0
 800c858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c85c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c860:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c864:	4689      	mov	r9, r1
 800c866:	4692      	mov	sl, r2
 800c868:	eb1b 0509 	adds.w	r5, fp, r9
 800c86c:	eb4c 060a 	adc.w	r6, ip, sl
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	4619      	mov	r1, r3
 800c876:	f04f 0200 	mov.w	r2, #0
 800c87a:	f04f 0300 	mov.w	r3, #0
 800c87e:	f04f 0400 	mov.w	r4, #0
 800c882:	0094      	lsls	r4, r2, #2
 800c884:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c888:	008b      	lsls	r3, r1, #2
 800c88a:	461a      	mov	r2, r3
 800c88c:	4623      	mov	r3, r4
 800c88e:	4628      	mov	r0, r5
 800c890:	4631      	mov	r1, r6
 800c892:	f7f4 fa11 	bl	8000cb8 <__aeabi_uldivmod>
 800c896:	4603      	mov	r3, r0
 800c898:	460c      	mov	r4, r1
 800c89a:	461a      	mov	r2, r3
 800c89c:	4b9a      	ldr	r3, [pc, #616]	; (800cb08 <UART_SetConfig+0x6f4>)
 800c89e:	fba3 1302 	umull	r1, r3, r3, r2
 800c8a2:	095b      	lsrs	r3, r3, #5
 800c8a4:	2164      	movs	r1, #100	; 0x64
 800c8a6:	fb01 f303 	mul.w	r3, r1, r3
 800c8aa:	1ad3      	subs	r3, r2, r3
 800c8ac:	011b      	lsls	r3, r3, #4
 800c8ae:	3332      	adds	r3, #50	; 0x32
 800c8b0:	4a95      	ldr	r2, [pc, #596]	; (800cb08 <UART_SetConfig+0x6f4>)
 800c8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b6:	095b      	lsrs	r3, r3, #5
 800c8b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8bc:	4498      	add	r8, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	469b      	mov	fp, r3
 800c8c2:	f04f 0c00 	mov.w	ip, #0
 800c8c6:	46d9      	mov	r9, fp
 800c8c8:	46e2      	mov	sl, ip
 800c8ca:	eb19 0309 	adds.w	r3, r9, r9
 800c8ce:	eb4a 040a 	adc.w	r4, sl, sl
 800c8d2:	4699      	mov	r9, r3
 800c8d4:	46a2      	mov	sl, r4
 800c8d6:	eb19 090b 	adds.w	r9, r9, fp
 800c8da:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c8de:	f04f 0100 	mov.w	r1, #0
 800c8e2:	f04f 0200 	mov.w	r2, #0
 800c8e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c8ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c8f2:	4689      	mov	r9, r1
 800c8f4:	4692      	mov	sl, r2
 800c8f6:	eb1b 0509 	adds.w	r5, fp, r9
 800c8fa:	eb4c 060a 	adc.w	r6, ip, sl
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	4619      	mov	r1, r3
 800c904:	f04f 0200 	mov.w	r2, #0
 800c908:	f04f 0300 	mov.w	r3, #0
 800c90c:	f04f 0400 	mov.w	r4, #0
 800c910:	0094      	lsls	r4, r2, #2
 800c912:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c916:	008b      	lsls	r3, r1, #2
 800c918:	461a      	mov	r2, r3
 800c91a:	4623      	mov	r3, r4
 800c91c:	4628      	mov	r0, r5
 800c91e:	4631      	mov	r1, r6
 800c920:	f7f4 f9ca 	bl	8000cb8 <__aeabi_uldivmod>
 800c924:	4603      	mov	r3, r0
 800c926:	460c      	mov	r4, r1
 800c928:	461a      	mov	r2, r3
 800c92a:	4b77      	ldr	r3, [pc, #476]	; (800cb08 <UART_SetConfig+0x6f4>)
 800c92c:	fba3 1302 	umull	r1, r3, r3, r2
 800c930:	095b      	lsrs	r3, r3, #5
 800c932:	2164      	movs	r1, #100	; 0x64
 800c934:	fb01 f303 	mul.w	r3, r1, r3
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	3332      	adds	r3, #50	; 0x32
 800c93e:	4a72      	ldr	r2, [pc, #456]	; (800cb08 <UART_SetConfig+0x6f4>)
 800c940:	fba2 2303 	umull	r2, r3, r2, r3
 800c944:	095b      	lsrs	r3, r3, #5
 800c946:	f003 020f 	and.w	r2, r3, #15
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	4442      	add	r2, r8
 800c950:	609a      	str	r2, [r3, #8]
 800c952:	e0d0      	b.n	800caf6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800c954:	f7fc f95c 	bl	8008c10 <HAL_RCC_GetPCLK1Freq>
 800c958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	469a      	mov	sl, r3
 800c95e:	f04f 0b00 	mov.w	fp, #0
 800c962:	46d0      	mov	r8, sl
 800c964:	46d9      	mov	r9, fp
 800c966:	eb18 0308 	adds.w	r3, r8, r8
 800c96a:	eb49 0409 	adc.w	r4, r9, r9
 800c96e:	4698      	mov	r8, r3
 800c970:	46a1      	mov	r9, r4
 800c972:	eb18 080a 	adds.w	r8, r8, sl
 800c976:	eb49 090b 	adc.w	r9, r9, fp
 800c97a:	f04f 0100 	mov.w	r1, #0
 800c97e:	f04f 0200 	mov.w	r2, #0
 800c982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c98a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c98e:	4688      	mov	r8, r1
 800c990:	4691      	mov	r9, r2
 800c992:	eb1a 0508 	adds.w	r5, sl, r8
 800c996:	eb4b 0609 	adc.w	r6, fp, r9
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	4619      	mov	r1, r3
 800c9a0:	f04f 0200 	mov.w	r2, #0
 800c9a4:	f04f 0300 	mov.w	r3, #0
 800c9a8:	f04f 0400 	mov.w	r4, #0
 800c9ac:	0094      	lsls	r4, r2, #2
 800c9ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800c9b2:	008b      	lsls	r3, r1, #2
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	4623      	mov	r3, r4
 800c9b8:	4628      	mov	r0, r5
 800c9ba:	4631      	mov	r1, r6
 800c9bc:	f7f4 f97c 	bl	8000cb8 <__aeabi_uldivmod>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	460c      	mov	r4, r1
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	4b50      	ldr	r3, [pc, #320]	; (800cb08 <UART_SetConfig+0x6f4>)
 800c9c8:	fba3 2302 	umull	r2, r3, r3, r2
 800c9cc:	095b      	lsrs	r3, r3, #5
 800c9ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	469b      	mov	fp, r3
 800c9d6:	f04f 0c00 	mov.w	ip, #0
 800c9da:	46d9      	mov	r9, fp
 800c9dc:	46e2      	mov	sl, ip
 800c9de:	eb19 0309 	adds.w	r3, r9, r9
 800c9e2:	eb4a 040a 	adc.w	r4, sl, sl
 800c9e6:	4699      	mov	r9, r3
 800c9e8:	46a2      	mov	sl, r4
 800c9ea:	eb19 090b 	adds.w	r9, r9, fp
 800c9ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 800c9f2:	f04f 0100 	mov.w	r1, #0
 800c9f6:	f04f 0200 	mov.w	r2, #0
 800c9fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca06:	4689      	mov	r9, r1
 800ca08:	4692      	mov	sl, r2
 800ca0a:	eb1b 0509 	adds.w	r5, fp, r9
 800ca0e:	eb4c 060a 	adc.w	r6, ip, sl
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	4619      	mov	r1, r3
 800ca18:	f04f 0200 	mov.w	r2, #0
 800ca1c:	f04f 0300 	mov.w	r3, #0
 800ca20:	f04f 0400 	mov.w	r4, #0
 800ca24:	0094      	lsls	r4, r2, #2
 800ca26:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ca2a:	008b      	lsls	r3, r1, #2
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	4623      	mov	r3, r4
 800ca30:	4628      	mov	r0, r5
 800ca32:	4631      	mov	r1, r6
 800ca34:	f7f4 f940 	bl	8000cb8 <__aeabi_uldivmod>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	460c      	mov	r4, r1
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4b32      	ldr	r3, [pc, #200]	; (800cb08 <UART_SetConfig+0x6f4>)
 800ca40:	fba3 1302 	umull	r1, r3, r3, r2
 800ca44:	095b      	lsrs	r3, r3, #5
 800ca46:	2164      	movs	r1, #100	; 0x64
 800ca48:	fb01 f303 	mul.w	r3, r1, r3
 800ca4c:	1ad3      	subs	r3, r2, r3
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	3332      	adds	r3, #50	; 0x32
 800ca52:	4a2d      	ldr	r2, [pc, #180]	; (800cb08 <UART_SetConfig+0x6f4>)
 800ca54:	fba2 2303 	umull	r2, r3, r2, r3
 800ca58:	095b      	lsrs	r3, r3, #5
 800ca5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca5e:	4498      	add	r8, r3
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	469b      	mov	fp, r3
 800ca64:	f04f 0c00 	mov.w	ip, #0
 800ca68:	46d9      	mov	r9, fp
 800ca6a:	46e2      	mov	sl, ip
 800ca6c:	eb19 0309 	adds.w	r3, r9, r9
 800ca70:	eb4a 040a 	adc.w	r4, sl, sl
 800ca74:	4699      	mov	r9, r3
 800ca76:	46a2      	mov	sl, r4
 800ca78:	eb19 090b 	adds.w	r9, r9, fp
 800ca7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ca80:	f04f 0100 	mov.w	r1, #0
 800ca84:	f04f 0200 	mov.w	r2, #0
 800ca88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca94:	4689      	mov	r9, r1
 800ca96:	4692      	mov	sl, r2
 800ca98:	eb1b 0509 	adds.w	r5, fp, r9
 800ca9c:	eb4c 060a 	adc.w	r6, ip, sl
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	4619      	mov	r1, r3
 800caa6:	f04f 0200 	mov.w	r2, #0
 800caaa:	f04f 0300 	mov.w	r3, #0
 800caae:	f04f 0400 	mov.w	r4, #0
 800cab2:	0094      	lsls	r4, r2, #2
 800cab4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cab8:	008b      	lsls	r3, r1, #2
 800caba:	461a      	mov	r2, r3
 800cabc:	4623      	mov	r3, r4
 800cabe:	4628      	mov	r0, r5
 800cac0:	4631      	mov	r1, r6
 800cac2:	f7f4 f8f9 	bl	8000cb8 <__aeabi_uldivmod>
 800cac6:	4603      	mov	r3, r0
 800cac8:	460c      	mov	r4, r1
 800caca:	461a      	mov	r2, r3
 800cacc:	4b0e      	ldr	r3, [pc, #56]	; (800cb08 <UART_SetConfig+0x6f4>)
 800cace:	fba3 1302 	umull	r1, r3, r3, r2
 800cad2:	095b      	lsrs	r3, r3, #5
 800cad4:	2164      	movs	r1, #100	; 0x64
 800cad6:	fb01 f303 	mul.w	r3, r1, r3
 800cada:	1ad3      	subs	r3, r2, r3
 800cadc:	011b      	lsls	r3, r3, #4
 800cade:	3332      	adds	r3, #50	; 0x32
 800cae0:	4a09      	ldr	r2, [pc, #36]	; (800cb08 <UART_SetConfig+0x6f4>)
 800cae2:	fba2 2303 	umull	r2, r3, r2, r3
 800cae6:	095b      	lsrs	r3, r3, #5
 800cae8:	f003 020f 	and.w	r2, r3, #15
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4442      	add	r2, r8
 800caf2:	609a      	str	r2, [r3, #8]
}
 800caf4:	e7ff      	b.n	800caf6 <UART_SetConfig+0x6e2>
 800caf6:	bf00      	nop
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb00:	40011000 	.word	0x40011000
 800cb04:	40011400 	.word	0x40011400
 800cb08:	51eb851f 	.word	0x51eb851f

0800cb0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800cb0c:	b084      	sub	sp, #16
 800cb0e:	b480      	push	{r7}
 800cb10:	b085      	sub	sp, #20
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	f107 001c 	add.w	r0, r7, #28
 800cb1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cb22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cb24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cb26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cb28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800cb2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800cb2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800cb32:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800cb36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cb38:	68fa      	ldr	r2, [r7, #12]
 800cb3a:	4313      	orrs	r3, r2
 800cb3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800cb46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	431a      	orrs	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800cb52:	2300      	movs	r3, #0
}
 800cb54:	4618      	mov	r0, r3
 800cb56:	3714      	adds	r7, #20
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5e:	b004      	add	sp, #16
 800cb60:	4770      	bx	lr

0800cb62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b083      	sub	sp, #12
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	681a      	ldr	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	370c      	adds	r7, #12
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b082      	sub	sp, #8
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2203      	movs	r2, #3
 800cbaa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800cbac:	2002      	movs	r0, #2
 800cbae:	f7f9 fbc5 	bl	800633c <HAL_Delay>
  
  return HAL_OK;
 800cbb2:	2300      	movs	r3, #0
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f003 0303 	and.w	r3, r3, #3
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	681a      	ldr	r2, [r3, #0]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800cbf2:	683b      	ldr	r3, [r7, #0]
 800cbf4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cbf6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800cbfc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800cc02:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800cc04:	68fa      	ldr	r2, [r7, #12]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68db      	ldr	r3, [r3, #12]
 800cc0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cc12:	f023 030f 	bic.w	r3, r3, #15
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800cc1e:	2300      	movs	r3, #0
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3714      	adds	r7, #20
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	691b      	ldr	r3, [r3, #16]
 800cc38:	b2db      	uxtb	r3, r3
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800cc46:	b480      	push	{r7}
 800cc48:	b085      	sub	sp, #20
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3314      	adds	r3, #20
 800cc54:	461a      	mov	r2, r3
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	4413      	add	r3, r2
 800cc5a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
}  
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b085      	sub	sp, #20
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc76:	2300      	movs	r3, #0
 800cc78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	681a      	ldr	r2, [r3, #0]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cc92:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800cc98:	431a      	orrs	r2, r3
                       Data->DPSM);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800cc9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	4313      	orrs	r3, r2
 800cca4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccaa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	431a      	orrs	r2, r3
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ccb6:	2300      	movs	r3, #0

}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3714      	adds	r7, #20
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc2:	4770      	bx	lr

0800ccc4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ccd2:	2310      	movs	r3, #16
 800ccd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccd6:	2340      	movs	r3, #64	; 0x40
 800ccd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cce2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cce4:	f107 0308 	add.w	r3, r7, #8
 800cce8:	4619      	mov	r1, r3
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	f7ff ff74 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ccf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf4:	2110      	movs	r1, #16
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f000 fa40 	bl	800d17c <SDMMC_GetCmdResp1>
 800ccfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccfe:	69fb      	ldr	r3, [r7, #28]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3720      	adds	r7, #32
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b088      	sub	sp, #32
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800cd16:	2311      	movs	r3, #17
 800cd18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd1a:	2340      	movs	r3, #64	; 0x40
 800cd1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd28:	f107 0308 	add.w	r3, r7, #8
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f7ff ff52 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cd34:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd38:	2111      	movs	r1, #17
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fa1e 	bl	800d17c <SDMMC_GetCmdResp1>
 800cd40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd42:	69fb      	ldr	r3, [r7, #28]
}
 800cd44:	4618      	mov	r0, r3
 800cd46:	3720      	adds	r7, #32
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b088      	sub	sp, #32
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cd5a:	2312      	movs	r3, #18
 800cd5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd5e:	2340      	movs	r3, #64	; 0x40
 800cd60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd62:	2300      	movs	r3, #0
 800cd64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd6c:	f107 0308 	add.w	r3, r7, #8
 800cd70:	4619      	mov	r1, r3
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f7ff ff30 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cd78:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd7c:	2112      	movs	r1, #18
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f9fc 	bl	800d17c <SDMMC_GetCmdResp1>
 800cd84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd86:	69fb      	ldr	r3, [r7, #28]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3720      	adds	r7, #32
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cd9e:	2318      	movs	r3, #24
 800cda0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cda2:	2340      	movs	r3, #64	; 0x40
 800cda4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cda6:	2300      	movs	r3, #0
 800cda8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdb0:	f107 0308 	add.w	r3, r7, #8
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff ff0e 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cdbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc0:	2118      	movs	r1, #24
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 f9da 	bl	800d17c <SDMMC_GetCmdResp1>
 800cdc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdca:	69fb      	ldr	r3, [r7, #28]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3720      	adds	r7, #32
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cde2:	2319      	movs	r3, #25
 800cde4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cde6:	2340      	movs	r3, #64	; 0x40
 800cde8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdea:	2300      	movs	r3, #0
 800cdec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdf4:	f107 0308 	add.w	r3, r7, #8
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f7ff feec 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ce00:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce04:	2119      	movs	r1, #25
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 f9b8 	bl	800d17c <SDMMC_GetCmdResp1>
 800ce0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce0e:	69fb      	ldr	r3, [r7, #28]
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3720      	adds	r7, #32
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b088      	sub	sp, #32
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ce20:	2300      	movs	r3, #0
 800ce22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ce24:	230c      	movs	r3, #12
 800ce26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce28:	2340      	movs	r3, #64	; 0x40
 800ce2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce36:	f107 0308 	add.w	r3, r7, #8
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f7ff fecb 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ce42:	4a05      	ldr	r2, [pc, #20]	; (800ce58 <SDMMC_CmdStopTransfer+0x40>)
 800ce44:	210c      	movs	r1, #12
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 f998 	bl	800d17c <SDMMC_GetCmdResp1>
 800ce4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce4e:	69fb      	ldr	r3, [r7, #28]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3720      	adds	r7, #32
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	05f5e100 	.word	0x05f5e100

0800ce5c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08a      	sub	sp, #40	; 0x28
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	60f8      	str	r0, [r7, #12]
 800ce64:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ce6c:	2307      	movs	r3, #7
 800ce6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce70:	2340      	movs	r3, #64	; 0x40
 800ce72:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce74:	2300      	movs	r3, #0
 800ce76:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce7c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce7e:	f107 0310 	add.w	r3, r7, #16
 800ce82:	4619      	mov	r1, r3
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fea7 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ce8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce8e:	2107      	movs	r1, #7
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f000 f973 	bl	800d17c <SDMMC_GetCmdResp1>
 800ce96:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3728      	adds	r7, #40	; 0x28
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b088      	sub	sp, #32
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ceba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cebe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cec0:	f107 0308 	add.w	r3, r7, #8
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fe86 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 f92d 	bl	800d12c <SDMMC_GetCmdError>
 800ced2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ced4:	69fb      	ldr	r3, [r7, #28]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3720      	adds	r7, #32
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b088      	sub	sp, #32
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cee6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ceea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ceec:	2308      	movs	r3, #8
 800ceee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cef0:	2340      	movs	r3, #64	; 0x40
 800cef2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cef4:	2300      	movs	r3, #0
 800cef6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cefc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cefe:	f107 0308 	add.w	r3, r7, #8
 800cf02:	4619      	mov	r1, r3
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f7ff fe67 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fb16 	bl	800d53c <SDMMC_GetCmdResp7>
 800cf10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf12:	69fb      	ldr	r3, [r7, #28]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3720      	adds	r7, #32
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b088      	sub	sp, #32
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cf2a:	2337      	movs	r3, #55	; 0x37
 800cf2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf2e:	2340      	movs	r3, #64	; 0x40
 800cf30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf32:	2300      	movs	r3, #0
 800cf34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf3c:	f107 0308 	add.w	r3, r7, #8
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f7ff fe48 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cf48:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf4c:	2137      	movs	r1, #55	; 0x37
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f914 	bl	800d17c <SDMMC_GetCmdResp1>
 800cf54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf56:	69fb      	ldr	r3, [r7, #28]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3720      	adds	r7, #32
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b088      	sub	sp, #32
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cf70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cf76:	2329      	movs	r3, #41	; 0x29
 800cf78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cf7a:	2340      	movs	r3, #64	; 0x40
 800cf7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cf82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cf88:	f107 0308 	add.w	r3, r7, #8
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7ff fe22 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f000 fa23 	bl	800d3e0 <SDMMC_GetCmdResp3>
 800cf9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cf9c:	69fb      	ldr	r3, [r7, #28]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b088      	sub	sp, #32
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	6078      	str	r0, [r7, #4]
 800cfae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cfb4:	2306      	movs	r3, #6
 800cfb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cfb8:	2340      	movs	r3, #64	; 0x40
 800cfba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cfc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cfc6:	f107 0308 	add.w	r3, r7, #8
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f7ff fe03 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cfd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfd6:	2106      	movs	r1, #6
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f000 f8cf 	bl	800d17c <SDMMC_GetCmdResp1>
 800cfde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cfe0:	69fb      	ldr	r3, [r7, #28]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3720      	adds	r7, #32
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cfea:	b580      	push	{r7, lr}
 800cfec:	b088      	sub	sp, #32
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cff2:	2300      	movs	r3, #0
 800cff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cff6:	2333      	movs	r3, #51	; 0x33
 800cff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cffa:	2340      	movs	r3, #64	; 0x40
 800cffc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cffe:	2300      	movs	r3, #0
 800d000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d006:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d008:	f107 0308 	add.w	r3, r7, #8
 800d00c:	4619      	mov	r1, r3
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7ff fde2 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800d014:	f241 3288 	movw	r2, #5000	; 0x1388
 800d018:	2133      	movs	r1, #51	; 0x33
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f8ae 	bl	800d17c <SDMMC_GetCmdResp1>
 800d020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d022:	69fb      	ldr	r3, [r7, #28]
}
 800d024:	4618      	mov	r0, r3
 800d026:	3720      	adds	r7, #32
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b088      	sub	sp, #32
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d034:	2300      	movs	r3, #0
 800d036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d038:	2302      	movs	r3, #2
 800d03a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d03c:	23c0      	movs	r3, #192	; 0xc0
 800d03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d040:	2300      	movs	r3, #0
 800d042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d048:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d04a:	f107 0308 	add.w	r3, r7, #8
 800d04e:	4619      	mov	r1, r3
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7ff fdc1 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 f97c 	bl	800d354 <SDMMC_GetCmdResp2>
 800d05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d05e:	69fb      	ldr	r3, [r7, #28]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3720      	adds	r7, #32
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b088      	sub	sp, #32
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d076:	2309      	movs	r3, #9
 800d078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800d07a:	23c0      	movs	r3, #192	; 0xc0
 800d07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d07e:	2300      	movs	r3, #0
 800d080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d086:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d088:	f107 0308 	add.w	r3, r7, #8
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fda2 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f95d 	bl	800d354 <SDMMC_GetCmdResp2>
 800d09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d09c:	69fb      	ldr	r3, [r7, #28]
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3720      	adds	r7, #32
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b088      	sub	sp, #32
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	6078      	str	r0, [r7, #4]
 800d0ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d0b4:	2303      	movs	r3, #3
 800d0b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0b8:	2340      	movs	r3, #64	; 0x40
 800d0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d0c6:	f107 0308 	add.w	r3, r7, #8
 800d0ca:	4619      	mov	r1, r3
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f7ff fd83 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d0d2:	683a      	ldr	r2, [r7, #0]
 800d0d4:	2103      	movs	r1, #3
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 f9bc 	bl	800d454 <SDMMC_GetCmdResp6>
 800d0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d0de:	69fb      	ldr	r3, [r7, #28]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3720      	adds	r7, #32
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b088      	sub	sp, #32
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d0f6:	230d      	movs	r3, #13
 800d0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800d0fa:	2340      	movs	r3, #64	; 0x40
 800d0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800d0fe:	2300      	movs	r3, #0
 800d100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800d102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d106:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800d108:	f107 0308 	add.w	r3, r7, #8
 800d10c:	4619      	mov	r1, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f7ff fd62 	bl	800cbd8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800d114:	f241 3288 	movw	r2, #5000	; 0x1388
 800d118:	210d      	movs	r1, #13
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 f82e 	bl	800d17c <SDMMC_GetCmdResp1>
 800d120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d122:	69fb      	ldr	r3, [r7, #28]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3720      	adds	r7, #32
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800d12c:	b490      	push	{r4, r7}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d134:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <SDMMC_GetCmdError+0x48>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4a0f      	ldr	r2, [pc, #60]	; (800d178 <SDMMC_GetCmdError+0x4c>)
 800d13a:	fba2 2303 	umull	r2, r3, r2, r3
 800d13e:	0a5b      	lsrs	r3, r3, #9
 800d140:	f241 3288 	movw	r2, #5000	; 0x1388
 800d144:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d148:	4623      	mov	r3, r4
 800d14a:	1e5c      	subs	r4, r3, #1
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d102      	bne.n	800d156 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d154:	e009      	b.n	800d16a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0f2      	beq.n	800d148 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	22c5      	movs	r2, #197	; 0xc5
 800d166:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800d168:	2300      	movs	r3, #0
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bc90      	pop	{r4, r7}
 800d172:	4770      	bx	lr
 800d174:	20000000 	.word	0x20000000
 800d178:	10624dd3 	.word	0x10624dd3

0800d17c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b087      	sub	sp, #28
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	460b      	mov	r3, r1
 800d186:	607a      	str	r2, [r7, #4]
 800d188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d18a:	4b6f      	ldr	r3, [pc, #444]	; (800d348 <SDMMC_GetCmdResp1+0x1cc>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4a6f      	ldr	r2, [pc, #444]	; (800d34c <SDMMC_GetCmdResp1+0x1d0>)
 800d190:	fba2 2303 	umull	r2, r3, r2, r3
 800d194:	0a5b      	lsrs	r3, r3, #9
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d19c:	4623      	mov	r3, r4
 800d19e:	1e5c      	subs	r4, r3, #1
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d102      	bne.n	800d1aa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1a8:	e0c9      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ae:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d0f0      	beq.n	800d19c <SDMMC_GetCmdResp1+0x20>
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d1eb      	bne.n	800d19c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c8:	f003 0304 	and.w	r3, r3, #4
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d004      	beq.n	800d1da <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2204      	movs	r2, #4
 800d1d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1d6:	2304      	movs	r3, #4
 800d1d8:	e0b1      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d004      	beq.n	800d1f0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e0a6      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	22c5      	movs	r2, #197	; 0xc5
 800d1f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f7ff fd18 	bl	800cc2c <SDIO_GetCommandResponse>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	461a      	mov	r2, r3
 800d200:	7afb      	ldrb	r3, [r7, #11]
 800d202:	4293      	cmp	r3, r2
 800d204:	d001      	beq.n	800d20a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d206:	2301      	movs	r3, #1
 800d208:	e099      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d20a:	2100      	movs	r1, #0
 800d20c:	68f8      	ldr	r0, [r7, #12]
 800d20e:	f7ff fd1a 	bl	800cc46 <SDIO_GetResponse>
 800d212:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d214:	693a      	ldr	r2, [r7, #16]
 800d216:	4b4e      	ldr	r3, [pc, #312]	; (800d350 <SDMMC_GetCmdResp1+0x1d4>)
 800d218:	4013      	ands	r3, r2
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d101      	bne.n	800d222 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800d21e:	2300      	movs	r3, #0
 800d220:	e08d      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	2b00      	cmp	r3, #0
 800d226:	da02      	bge.n	800d22e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d228:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d22c:	e087      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d238:	2340      	movs	r3, #64	; 0x40
 800d23a:	e080      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d23c:	693b      	ldr	r3, [r7, #16]
 800d23e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d242:	2b00      	cmp	r3, #0
 800d244:	d001      	beq.n	800d24a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d246:	2380      	movs	r3, #128	; 0x80
 800d248:	e079      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d254:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d258:	e071      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d25a:	693b      	ldr	r3, [r7, #16]
 800d25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d260:	2b00      	cmp	r3, #0
 800d262:	d002      	beq.n	800d26a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d264:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d268:	e069      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d002      	beq.n	800d27a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d278:	e061      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d280:	2b00      	cmp	r3, #0
 800d282:	d002      	beq.n	800d28a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d284:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d288:	e059      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d290:	2b00      	cmp	r3, #0
 800d292:	d002      	beq.n	800d29a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d298:	e051      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d002      	beq.n	800d2aa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d2a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d2a8:	e049      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d2b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d2b8:	e041      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d2ba:	693b      	ldr	r3, [r7, #16]
 800d2bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d2c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2c8:	e039      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d002      	beq.n	800d2da <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d2d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d2d8:	e031      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d2e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d2e8:	e029      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d2f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2f8:	e021      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d304:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d308:	e019      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d310:	2b00      	cmp	r3, #0
 800d312:	d002      	beq.n	800d31a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d314:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d318:	e011      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d320:	2b00      	cmp	r3, #0
 800d322:	d002      	beq.n	800d32a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d324:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d328:	e009      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	f003 0308 	and.w	r3, r3, #8
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d334:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d338:	e001      	b.n	800d33e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d33a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d33e:	4618      	mov	r0, r3
 800d340:	371c      	adds	r7, #28
 800d342:	46bd      	mov	sp, r7
 800d344:	bd90      	pop	{r4, r7, pc}
 800d346:	bf00      	nop
 800d348:	20000000 	.word	0x20000000
 800d34c:	10624dd3 	.word	0x10624dd3
 800d350:	fdffe008 	.word	0xfdffe008

0800d354 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d354:	b490      	push	{r4, r7}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d35c:	4b1e      	ldr	r3, [pc, #120]	; (800d3d8 <SDMMC_GetCmdResp2+0x84>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	4a1e      	ldr	r2, [pc, #120]	; (800d3dc <SDMMC_GetCmdResp2+0x88>)
 800d362:	fba2 2303 	umull	r2, r3, r2, r3
 800d366:	0a5b      	lsrs	r3, r3, #9
 800d368:	f241 3288 	movw	r2, #5000	; 0x1388
 800d36c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d370:	4623      	mov	r3, r4
 800d372:	1e5c      	subs	r4, r3, #1
 800d374:	2b00      	cmp	r3, #0
 800d376:	d102      	bne.n	800d37e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d378:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d37c:	e026      	b.n	800d3cc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d382:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d0f0      	beq.n	800d370 <SDMMC_GetCmdResp2+0x1c>
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1eb      	bne.n	800d370 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39c:	f003 0304 	and.w	r3, r3, #4
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d004      	beq.n	800d3ae <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2204      	movs	r2, #4
 800d3a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d3aa:	2304      	movs	r3, #4
 800d3ac:	e00e      	b.n	800d3cc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b2:	f003 0301 	and.w	r3, r3, #1
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d004      	beq.n	800d3c4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e003      	b.n	800d3cc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	22c5      	movs	r2, #197	; 0xc5
 800d3c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d3ca:	2300      	movs	r3, #0
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3710      	adds	r7, #16
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bc90      	pop	{r4, r7}
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	20000000 	.word	0x20000000
 800d3dc:	10624dd3 	.word	0x10624dd3

0800d3e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d3e0:	b490      	push	{r4, r7}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d3e8:	4b18      	ldr	r3, [pc, #96]	; (800d44c <SDMMC_GetCmdResp3+0x6c>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a18      	ldr	r2, [pc, #96]	; (800d450 <SDMMC_GetCmdResp3+0x70>)
 800d3ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d3f2:	0a5b      	lsrs	r3, r3, #9
 800d3f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d3f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d3fc:	4623      	mov	r3, r4
 800d3fe:	1e5c      	subs	r4, r3, #1
 800d400:	2b00      	cmp	r3, #0
 800d402:	d102      	bne.n	800d40a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d404:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d408:	e01b      	b.n	800d442 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d40e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d416:	2b00      	cmp	r3, #0
 800d418:	d0f0      	beq.n	800d3fc <SDMMC_GetCmdResp3+0x1c>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d420:	2b00      	cmp	r3, #0
 800d422:	d1eb      	bne.n	800d3fc <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d428:	f003 0304 	and.w	r3, r3, #4
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d004      	beq.n	800d43a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2204      	movs	r2, #4
 800d434:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d436:	2304      	movs	r3, #4
 800d438:	e003      	b.n	800d442 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	22c5      	movs	r2, #197	; 0xc5
 800d43e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3710      	adds	r7, #16
 800d446:	46bd      	mov	sp, r7
 800d448:	bc90      	pop	{r4, r7}
 800d44a:	4770      	bx	lr
 800d44c:	20000000 	.word	0x20000000
 800d450:	10624dd3 	.word	0x10624dd3

0800d454 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d454:	b590      	push	{r4, r7, lr}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	460b      	mov	r3, r1
 800d45e:	607a      	str	r2, [r7, #4]
 800d460:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d462:	4b34      	ldr	r3, [pc, #208]	; (800d534 <SDMMC_GetCmdResp6+0xe0>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	4a34      	ldr	r2, [pc, #208]	; (800d538 <SDMMC_GetCmdResp6+0xe4>)
 800d468:	fba2 2303 	umull	r2, r3, r2, r3
 800d46c:	0a5b      	lsrs	r3, r3, #9
 800d46e:	f241 3288 	movw	r2, #5000	; 0x1388
 800d472:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d476:	4623      	mov	r3, r4
 800d478:	1e5c      	subs	r4, r3, #1
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d47e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d482:	e052      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d488:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d490:	2b00      	cmp	r3, #0
 800d492:	d0f0      	beq.n	800d476 <SDMMC_GetCmdResp6+0x22>
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d1eb      	bne.n	800d476 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a2:	f003 0304 	and.w	r3, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d004      	beq.n	800d4b4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	2204      	movs	r2, #4
 800d4ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d4b0:	2304      	movs	r3, #4
 800d4b2:	e03a      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b8:	f003 0301 	and.w	r3, r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e02f      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f7ff fbae 	bl	800cc2c <SDIO_GetCommandResponse>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	7afb      	ldrb	r3, [r7, #11]
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d001      	beq.n	800d4de <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e025      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	22c5      	movs	r2, #197	; 0xc5
 800d4e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f7ff fbad 	bl	800cc46 <SDIO_GetResponse>
 800d4ec:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d4f8:	693b      	ldr	r3, [r7, #16]
 800d4fa:	0c1b      	lsrs	r3, r3, #16
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d502:	2300      	movs	r3, #0
 800d504:	e011      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d514:	e009      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d002      	beq.n	800d526 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d524:	e001      	b.n	800d52a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd90      	pop	{r4, r7, pc}
 800d532:	bf00      	nop
 800d534:	20000000 	.word	0x20000000
 800d538:	10624dd3 	.word	0x10624dd3

0800d53c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d53c:	b490      	push	{r4, r7}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d544:	4b21      	ldr	r3, [pc, #132]	; (800d5cc <SDMMC_GetCmdResp7+0x90>)
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a21      	ldr	r2, [pc, #132]	; (800d5d0 <SDMMC_GetCmdResp7+0x94>)
 800d54a:	fba2 2303 	umull	r2, r3, r2, r3
 800d54e:	0a5b      	lsrs	r3, r3, #9
 800d550:	f241 3288 	movw	r2, #5000	; 0x1388
 800d554:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d558:	4623      	mov	r3, r4
 800d55a:	1e5c      	subs	r4, r3, #1
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d102      	bne.n	800d566 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d560:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d564:	e02c      	b.n	800d5c0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d572:	2b00      	cmp	r3, #0
 800d574:	d0f0      	beq.n	800d558 <SDMMC_GetCmdResp7+0x1c>
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1eb      	bne.n	800d558 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d584:	f003 0304 	and.w	r3, r3, #4
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d004      	beq.n	800d596 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2204      	movs	r2, #4
 800d590:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d592:	2304      	movs	r3, #4
 800d594:	e014      	b.n	800d5c0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d004      	beq.n	800d5ac <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	e009      	b.n	800d5c0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d002      	beq.n	800d5be <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2240      	movs	r2, #64	; 0x40
 800d5bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d5be:	2300      	movs	r3, #0
  
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bc90      	pop	{r4, r7}
 800d5c8:	4770      	bx	lr
 800d5ca:	bf00      	nop
 800d5cc:	20000000 	.word	0x20000000
 800d5d0:	10624dd3 	.word	0x10624dd3

0800d5d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d5d4:	b580      	push	{r7, lr}
 800d5d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d5d8:	4904      	ldr	r1, [pc, #16]	; (800d5ec <MX_FATFS_Init+0x18>)
 800d5da:	4805      	ldr	r0, [pc, #20]	; (800d5f0 <MX_FATFS_Init+0x1c>)
 800d5dc:	f004 f874 	bl	80116c8 <FATFS_LinkDriver>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4b03      	ldr	r3, [pc, #12]	; (800d5f4 <MX_FATFS_Init+0x20>)
 800d5e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d5e8:	bf00      	nop
 800d5ea:	bd80      	pop	{r7, pc}
 800d5ec:	20021e58 	.word	0x20021e58
 800d5f0:	08017c18 	.word	0x08017c18
 800d5f4:	20021e54 	.word	0x20021e54

0800d5f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d5f8:	b480      	push	{r7}
 800d5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d5fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d612:	f000 f896 	bl	800d742 <BSP_SD_IsDetected>
 800d616:	4603      	mov	r3, r0
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d001      	beq.n	800d620 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d61c:	2301      	movs	r3, #1
 800d61e:	e012      	b.n	800d646 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d620:	480b      	ldr	r0, [pc, #44]	; (800d650 <BSP_SD_Init+0x48>)
 800d622:	f7fb ff9d 	bl	8009560 <HAL_SD_Init>
 800d626:	4603      	mov	r3, r0
 800d628:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d62a:	79fb      	ldrb	r3, [r7, #7]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d109      	bne.n	800d644 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d630:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d634:	4806      	ldr	r0, [pc, #24]	; (800d650 <BSP_SD_Init+0x48>)
 800d636:	f7fc fd47 	bl	800a0c8 <HAL_SD_ConfigWideBusOperation>
 800d63a:	4603      	mov	r3, r0
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d001      	beq.n	800d644 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d640:	2301      	movs	r3, #1
 800d642:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d644:	79fb      	ldrb	r3, [r7, #7]
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20021c54 	.word	0x20021c54

0800d654 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b086      	sub	sp, #24
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d660:	2300      	movs	r3, #0
 800d662:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	68f9      	ldr	r1, [r7, #12]
 800d66a:	4806      	ldr	r0, [pc, #24]	; (800d684 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d66c:	f7fc f808 	bl	8009680 <HAL_SD_ReadBlocks_DMA>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	20021c54 	.word	0x20021c54

0800d688 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d694:	2300      	movs	r3, #0
 800d696:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	68ba      	ldr	r2, [r7, #8]
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	4806      	ldr	r0, [pc, #24]	; (800d6b8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d6a0:	f7fc f8d6 	bl	8009850 <HAL_SD_WriteBlocks_DMA>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d001      	beq.n	800d6ae <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d6ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3718      	adds	r7, #24
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20021c54 	.word	0x20021c54

0800d6bc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d6c0:	4805      	ldr	r0, [pc, #20]	; (800d6d8 <BSP_SD_GetCardState+0x1c>)
 800d6c2:	f7fc fd7d 	bl	800a1c0 <HAL_SD_GetCardState>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b04      	cmp	r3, #4
 800d6ca:	bf14      	ite	ne
 800d6cc:	2301      	movne	r3, #1
 800d6ce:	2300      	moveq	r3, #0
 800d6d0:	b2db      	uxtb	r3, r3
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	20021c54 	.word	0x20021c54

0800d6dc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d6e4:	6879      	ldr	r1, [r7, #4]
 800d6e6:	4803      	ldr	r0, [pc, #12]	; (800d6f4 <BSP_SD_GetCardInfo+0x18>)
 800d6e8:	f7fc fcc2 	bl	800a070 <HAL_SD_GetCardInfo>
}
 800d6ec:	bf00      	nop
 800d6ee:	3708      	adds	r7, #8
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}
 800d6f4:	20021c54 	.word	0x20021c54

0800d6f8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b082      	sub	sp, #8
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d700:	f000 f818 	bl	800d734 <BSP_SD_AbortCallback>
}
 800d704:	bf00      	nop
 800d706:	3708      	adds	r7, #8
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b082      	sub	sp, #8
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d714:	f000 f9a8 	bl	800da68 <BSP_SD_WriteCpltCallback>
}
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}

0800d720 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b082      	sub	sp, #8
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d728:	f000 f9aa 	bl	800da80 <BSP_SD_ReadCpltCallback>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d734:	b480      	push	{r7}
 800d736:	af00      	add	r7, sp, #0

}
 800d738:	bf00      	nop
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b082      	sub	sp, #8
 800d746:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d748:	2301      	movs	r3, #1
 800d74a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d74c:	f000 f80c 	bl	800d768 <BSP_PlatformIsDetected>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d101      	bne.n	800d75a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d756:	2300      	movs	r3, #0
 800d758:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d75a:	79fb      	ldrb	r3, [r7, #7]
 800d75c:	b2db      	uxtb	r3, r3
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
	...

0800d768 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d76e:	2301      	movs	r3, #1
 800d770:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d772:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d776:	4806      	ldr	r0, [pc, #24]	; (800d790 <BSP_PlatformIsDetected+0x28>)
 800d778:	f7fa f85e 	bl	8007838 <HAL_GPIO_ReadPin>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d001      	beq.n	800d786 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d782:	2300      	movs	r3, #0
 800d784:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d786:	79fb      	ldrb	r3, [r7, #7]
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	40020000 	.word	0x40020000

0800d794 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d79c:	f7f8 fdc2 	bl	8006324 <HAL_GetTick>
 800d7a0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d7a2:	e006      	b.n	800d7b2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d7a4:	f7ff ff8a 	bl	800d6bc <BSP_SD_GetCardState>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e009      	b.n	800d7c6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d7b2:	f7f8 fdb7 	bl	8006324 <HAL_GetTick>
 800d7b6:	4602      	mov	r2, r0
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d8f0      	bhi.n	800d7a4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d7c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3710      	adds	r7, #16
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
	...

0800d7d0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b082      	sub	sp, #8
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d7da:	4b0b      	ldr	r3, [pc, #44]	; (800d808 <SD_CheckStatus+0x38>)
 800d7dc:	2201      	movs	r2, #1
 800d7de:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d7e0:	f7ff ff6c 	bl	800d6bc <BSP_SD_GetCardState>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d107      	bne.n	800d7fa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d7ea:	4b07      	ldr	r3, [pc, #28]	; (800d808 <SD_CheckStatus+0x38>)
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	f023 0301 	bic.w	r3, r3, #1
 800d7f4:	b2da      	uxtb	r2, r3
 800d7f6:	4b04      	ldr	r3, [pc, #16]	; (800d808 <SD_CheckStatus+0x38>)
 800d7f8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d7fa:	4b03      	ldr	r3, [pc, #12]	; (800d808 <SD_CheckStatus+0x38>)
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	b2db      	uxtb	r3, r3
}
 800d800:	4618      	mov	r0, r3
 800d802:	3708      	adds	r7, #8
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	20000009 	.word	0x20000009

0800d80c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	4603      	mov	r3, r0
 800d814:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d816:	f7ff fef7 	bl	800d608 <BSP_SD_Init>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d107      	bne.n	800d830 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d820:	79fb      	ldrb	r3, [r7, #7]
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff ffd4 	bl	800d7d0 <SD_CheckStatus>
 800d828:	4603      	mov	r3, r0
 800d82a:	461a      	mov	r2, r3
 800d82c:	4b04      	ldr	r3, [pc, #16]	; (800d840 <SD_initialize+0x34>)
 800d82e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d830:	4b03      	ldr	r3, [pc, #12]	; (800d840 <SD_initialize+0x34>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	b2db      	uxtb	r3, r3
}
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	20000009 	.word	0x20000009

0800d844 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	4603      	mov	r3, r0
 800d84c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d84e:	79fb      	ldrb	r3, [r7, #7]
 800d850:	4618      	mov	r0, r3
 800d852:	f7ff ffbd 	bl	800d7d0 <SD_CheckStatus>
 800d856:	4603      	mov	r3, r0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	607a      	str	r2, [r7, #4]
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d870:	2301      	movs	r3, #1
 800d872:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d874:	f247 5030 	movw	r0, #30000	; 0x7530
 800d878:	f7ff ff8c 	bl	800d794 <SD_CheckStatusWithTimeout>
 800d87c:	4603      	mov	r3, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	da01      	bge.n	800d886 <SD_read+0x26>
  {
    return res;
 800d882:	7dfb      	ldrb	r3, [r7, #23]
 800d884:	e03b      	b.n	800d8fe <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d886:	683a      	ldr	r2, [r7, #0]
 800d888:	6879      	ldr	r1, [r7, #4]
 800d88a:	68b8      	ldr	r0, [r7, #8]
 800d88c:	f7ff fee2 	bl	800d654 <BSP_SD_ReadBlocks_DMA>
 800d890:	4603      	mov	r3, r0
 800d892:	2b00      	cmp	r3, #0
 800d894:	d132      	bne.n	800d8fc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d896:	4b1c      	ldr	r3, [pc, #112]	; (800d908 <SD_read+0xa8>)
 800d898:	2200      	movs	r2, #0
 800d89a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d89c:	f7f8 fd42 	bl	8006324 <HAL_GetTick>
 800d8a0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d8a2:	bf00      	nop
 800d8a4:	4b18      	ldr	r3, [pc, #96]	; (800d908 <SD_read+0xa8>)
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d108      	bne.n	800d8be <SD_read+0x5e>
 800d8ac:	f7f8 fd3a 	bl	8006324 <HAL_GetTick>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d9f2      	bls.n	800d8a4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d8be:	4b12      	ldr	r3, [pc, #72]	; (800d908 <SD_read+0xa8>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d102      	bne.n	800d8cc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d8c6:	2301      	movs	r3, #1
 800d8c8:	75fb      	strb	r3, [r7, #23]
 800d8ca:	e017      	b.n	800d8fc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d8cc:	4b0e      	ldr	r3, [pc, #56]	; (800d908 <SD_read+0xa8>)
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d8d2:	f7f8 fd27 	bl	8006324 <HAL_GetTick>
 800d8d6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d8d8:	e007      	b.n	800d8ea <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d8da:	f7ff feef 	bl	800d6bc <BSP_SD_GetCardState>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d102      	bne.n	800d8ea <SD_read+0x8a>
          {
            res = RES_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d8e8:	e008      	b.n	800d8fc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d8ea:	f7f8 fd1b 	bl	8006324 <HAL_GetTick>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	1ad3      	subs	r3, r2, r3
 800d8f4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d9ee      	bls.n	800d8da <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	2001f2ec 	.word	0x2001f2ec

0800d90c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	60b9      	str	r1, [r7, #8]
 800d914:	607a      	str	r2, [r7, #4]
 800d916:	603b      	str	r3, [r7, #0]
 800d918:	4603      	mov	r3, r0
 800d91a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d91c:	2301      	movs	r3, #1
 800d91e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d920:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <SD_write+0xa8>)
 800d922:	2200      	movs	r2, #0
 800d924:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d926:	f247 5030 	movw	r0, #30000	; 0x7530
 800d92a:	f7ff ff33 	bl	800d794 <SD_CheckStatusWithTimeout>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	da01      	bge.n	800d938 <SD_write+0x2c>
  {
    return res;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
 800d936:	e038      	b.n	800d9aa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d938:	683a      	ldr	r2, [r7, #0]
 800d93a:	6879      	ldr	r1, [r7, #4]
 800d93c:	68b8      	ldr	r0, [r7, #8]
 800d93e:	f7ff fea3 	bl	800d688 <BSP_SD_WriteBlocks_DMA>
 800d942:	4603      	mov	r3, r0
 800d944:	2b00      	cmp	r3, #0
 800d946:	d12f      	bne.n	800d9a8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d948:	f7f8 fcec 	bl	8006324 <HAL_GetTick>
 800d94c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d94e:	bf00      	nop
 800d950:	4b18      	ldr	r3, [pc, #96]	; (800d9b4 <SD_write+0xa8>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d108      	bne.n	800d96a <SD_write+0x5e>
 800d958:	f7f8 fce4 	bl	8006324 <HAL_GetTick>
 800d95c:	4602      	mov	r2, r0
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	f247 522f 	movw	r2, #29999	; 0x752f
 800d966:	4293      	cmp	r3, r2
 800d968:	d9f2      	bls.n	800d950 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d96a:	4b12      	ldr	r3, [pc, #72]	; (800d9b4 <SD_write+0xa8>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d102      	bne.n	800d978 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d972:	2301      	movs	r3, #1
 800d974:	75fb      	strb	r3, [r7, #23]
 800d976:	e017      	b.n	800d9a8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d978:	4b0e      	ldr	r3, [pc, #56]	; (800d9b4 <SD_write+0xa8>)
 800d97a:	2200      	movs	r2, #0
 800d97c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d97e:	f7f8 fcd1 	bl	8006324 <HAL_GetTick>
 800d982:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d984:	e007      	b.n	800d996 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d986:	f7ff fe99 	bl	800d6bc <BSP_SD_GetCardState>
 800d98a:	4603      	mov	r3, r0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <SD_write+0x8a>
          {
            res = RES_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	75fb      	strb	r3, [r7, #23]
            break;
 800d994:	e008      	b.n	800d9a8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d996:	f7f8 fcc5 	bl	8006324 <HAL_GetTick>
 800d99a:	4602      	mov	r2, r0
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	f247 522f 	movw	r2, #29999	; 0x752f
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d9ee      	bls.n	800d986 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3718      	adds	r7, #24
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	2001f2e8 	.word	0x2001f2e8

0800d9b8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b08c      	sub	sp, #48	; 0x30
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	4603      	mov	r3, r0
 800d9c0:	603a      	str	r2, [r7, #0]
 800d9c2:	71fb      	strb	r3, [r7, #7]
 800d9c4:	460b      	mov	r3, r1
 800d9c6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d9ce:	4b25      	ldr	r3, [pc, #148]	; (800da64 <SD_ioctl+0xac>)
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d001      	beq.n	800d9e0 <SD_ioctl+0x28>
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e03c      	b.n	800da5a <SD_ioctl+0xa2>

  switch (cmd)
 800d9e0:	79bb      	ldrb	r3, [r7, #6]
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d834      	bhi.n	800da50 <SD_ioctl+0x98>
 800d9e6:	a201      	add	r2, pc, #4	; (adr r2, 800d9ec <SD_ioctl+0x34>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800d9fd 	.word	0x0800d9fd
 800d9f0:	0800da05 	.word	0x0800da05
 800d9f4:	0800da1d 	.word	0x0800da1d
 800d9f8:	0800da37 	.word	0x0800da37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da02:	e028      	b.n	800da56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800da04:	f107 030c 	add.w	r3, r7, #12
 800da08:	4618      	mov	r0, r3
 800da0a:	f7ff fe67 	bl	800d6dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800da0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da14:	2300      	movs	r3, #0
 800da16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da1a:	e01c      	b.n	800da56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da1c:	f107 030c 	add.w	r3, r7, #12
 800da20:	4618      	mov	r0, r3
 800da22:	f7ff fe5b 	bl	800d6dc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800da26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da28:	b29a      	uxth	r2, r3
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800da2e:	2300      	movs	r3, #0
 800da30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da34:	e00f      	b.n	800da56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800da36:	f107 030c 	add.w	r3, r7, #12
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fe4e 	bl	800d6dc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800da40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da42:	0a5a      	lsrs	r2, r3, #9
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800da48:	2300      	movs	r3, #0
 800da4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800da4e:	e002      	b.n	800da56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800da50:	2304      	movs	r3, #4
 800da52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800da56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3730      	adds	r7, #48	; 0x30
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	20000009 	.word	0x20000009

0800da68 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800da68:	b480      	push	{r7}
 800da6a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800da6c:	4b03      	ldr	r3, [pc, #12]	; (800da7c <BSP_SD_WriteCpltCallback+0x14>)
 800da6e:	2201      	movs	r2, #1
 800da70:	601a      	str	r2, [r3, #0]
}
 800da72:	bf00      	nop
 800da74:	46bd      	mov	sp, r7
 800da76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7a:	4770      	bx	lr
 800da7c:	2001f2e8 	.word	0x2001f2e8

0800da80 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800da80:	b480      	push	{r7}
 800da82:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800da84:	4b03      	ldr	r3, [pc, #12]	; (800da94 <BSP_SD_ReadCpltCallback+0x14>)
 800da86:	2201      	movs	r2, #1
 800da88:	601a      	str	r2, [r3, #0]
}
 800da8a:	bf00      	nop
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	2001f2ec 	.word	0x2001f2ec

0800da98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	4a08      	ldr	r2, [pc, #32]	; (800dac8 <disk_status+0x30>)
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	685b      	ldr	r3, [r3, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	79fa      	ldrb	r2, [r7, #7]
 800dab0:	4905      	ldr	r1, [pc, #20]	; (800dac8 <disk_status+0x30>)
 800dab2:	440a      	add	r2, r1
 800dab4:	7a12      	ldrb	r2, [r2, #8]
 800dab6:	4610      	mov	r0, r2
 800dab8:	4798      	blx	r3
 800daba:	4603      	mov	r3, r0
 800dabc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dabe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3710      	adds	r7, #16
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}
 800dac8:	2001f518 	.word	0x2001f518

0800dacc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dacc:	b580      	push	{r7, lr}
 800dace:	b084      	sub	sp, #16
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dad6:	2300      	movs	r3, #0
 800dad8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	4a0d      	ldr	r2, [pc, #52]	; (800db14 <disk_initialize+0x48>)
 800dade:	5cd3      	ldrb	r3, [r2, r3]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d111      	bne.n	800db08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dae4:	79fb      	ldrb	r3, [r7, #7]
 800dae6:	4a0b      	ldr	r2, [pc, #44]	; (800db14 <disk_initialize+0x48>)
 800dae8:	2101      	movs	r1, #1
 800daea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800daec:	79fb      	ldrb	r3, [r7, #7]
 800daee:	4a09      	ldr	r2, [pc, #36]	; (800db14 <disk_initialize+0x48>)
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4413      	add	r3, r2
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	79fa      	ldrb	r2, [r7, #7]
 800dafa:	4906      	ldr	r1, [pc, #24]	; (800db14 <disk_initialize+0x48>)
 800dafc:	440a      	add	r2, r1
 800dafe:	7a12      	ldrb	r2, [r2, #8]
 800db00:	4610      	mov	r0, r2
 800db02:	4798      	blx	r3
 800db04:	4603      	mov	r3, r0
 800db06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800db08:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}
 800db12:	bf00      	nop
 800db14:	2001f518 	.word	0x2001f518

0800db18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800db18:	b590      	push	{r4, r7, lr}
 800db1a:	b087      	sub	sp, #28
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60b9      	str	r1, [r7, #8]
 800db20:	607a      	str	r2, [r7, #4]
 800db22:	603b      	str	r3, [r7, #0]
 800db24:	4603      	mov	r3, r0
 800db26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	4a0a      	ldr	r2, [pc, #40]	; (800db54 <disk_read+0x3c>)
 800db2c:	009b      	lsls	r3, r3, #2
 800db2e:	4413      	add	r3, r2
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	689c      	ldr	r4, [r3, #8]
 800db34:	7bfb      	ldrb	r3, [r7, #15]
 800db36:	4a07      	ldr	r2, [pc, #28]	; (800db54 <disk_read+0x3c>)
 800db38:	4413      	add	r3, r2
 800db3a:	7a18      	ldrb	r0, [r3, #8]
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	68b9      	ldr	r1, [r7, #8]
 800db42:	47a0      	blx	r4
 800db44:	4603      	mov	r3, r0
 800db46:	75fb      	strb	r3, [r7, #23]
  return res;
 800db48:	7dfb      	ldrb	r3, [r7, #23]
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	371c      	adds	r7, #28
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd90      	pop	{r4, r7, pc}
 800db52:	bf00      	nop
 800db54:	2001f518 	.word	0x2001f518

0800db58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800db58:	b590      	push	{r4, r7, lr}
 800db5a:	b087      	sub	sp, #28
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
 800db62:	603b      	str	r3, [r7, #0]
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800db68:	7bfb      	ldrb	r3, [r7, #15]
 800db6a:	4a0a      	ldr	r2, [pc, #40]	; (800db94 <disk_write+0x3c>)
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	4413      	add	r3, r2
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	68dc      	ldr	r4, [r3, #12]
 800db74:	7bfb      	ldrb	r3, [r7, #15]
 800db76:	4a07      	ldr	r2, [pc, #28]	; (800db94 <disk_write+0x3c>)
 800db78:	4413      	add	r3, r2
 800db7a:	7a18      	ldrb	r0, [r3, #8]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	68b9      	ldr	r1, [r7, #8]
 800db82:	47a0      	blx	r4
 800db84:	4603      	mov	r3, r0
 800db86:	75fb      	strb	r3, [r7, #23]
  return res;
 800db88:	7dfb      	ldrb	r3, [r7, #23]
}
 800db8a:	4618      	mov	r0, r3
 800db8c:	371c      	adds	r7, #28
 800db8e:	46bd      	mov	sp, r7
 800db90:	bd90      	pop	{r4, r7, pc}
 800db92:	bf00      	nop
 800db94:	2001f518 	.word	0x2001f518

0800db98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	4603      	mov	r3, r0
 800dba0:	603a      	str	r2, [r7, #0]
 800dba2:	71fb      	strb	r3, [r7, #7]
 800dba4:	460b      	mov	r3, r1
 800dba6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800dba8:	79fb      	ldrb	r3, [r7, #7]
 800dbaa:	4a09      	ldr	r2, [pc, #36]	; (800dbd0 <disk_ioctl+0x38>)
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	79fa      	ldrb	r2, [r7, #7]
 800dbb6:	4906      	ldr	r1, [pc, #24]	; (800dbd0 <disk_ioctl+0x38>)
 800dbb8:	440a      	add	r2, r1
 800dbba:	7a10      	ldrb	r0, [r2, #8]
 800dbbc:	79b9      	ldrb	r1, [r7, #6]
 800dbbe:	683a      	ldr	r2, [r7, #0]
 800dbc0:	4798      	blx	r3
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	73fb      	strb	r3, [r7, #15]
  return res;
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	2001f518 	.word	0x2001f518

0800dbd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b085      	sub	sp, #20
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	3301      	adds	r3, #1
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800dbe4:	89fb      	ldrh	r3, [r7, #14]
 800dbe6:	021b      	lsls	r3, r3, #8
 800dbe8:	b21a      	sxth	r2, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	b21b      	sxth	r3, r3
 800dbf0:	4313      	orrs	r3, r2
 800dbf2:	b21b      	sxth	r3, r3
 800dbf4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800dbf6:	89fb      	ldrh	r3, [r7, #14]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800dc04:	b480      	push	{r7}
 800dc06:	b085      	sub	sp, #20
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	3303      	adds	r3, #3
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	021b      	lsls	r3, r3, #8
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	3202      	adds	r2, #2
 800dc1c:	7812      	ldrb	r2, [r2, #0]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	021b      	lsls	r3, r3, #8
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	3201      	adds	r2, #1
 800dc2a:	7812      	ldrb	r2, [r2, #0]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	021b      	lsls	r3, r3, #8
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	7812      	ldrb	r2, [r2, #0]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	60fb      	str	r3, [r7, #12]
	return rv;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3714      	adds	r7, #20
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr

0800dc4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800dc4a:	b480      	push	{r7}
 800dc4c:	b083      	sub	sp, #12
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	460b      	mov	r3, r1
 800dc54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	1c5a      	adds	r2, r3, #1
 800dc5a:	607a      	str	r2, [r7, #4]
 800dc5c:	887a      	ldrh	r2, [r7, #2]
 800dc5e:	b2d2      	uxtb	r2, r2
 800dc60:	701a      	strb	r2, [r3, #0]
 800dc62:	887b      	ldrh	r3, [r7, #2]
 800dc64:	0a1b      	lsrs	r3, r3, #8
 800dc66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	1c5a      	adds	r2, r3, #1
 800dc6c:	607a      	str	r2, [r7, #4]
 800dc6e:	887a      	ldrh	r2, [r7, #2]
 800dc70:	b2d2      	uxtb	r2, r2
 800dc72:	701a      	strb	r2, [r3, #0]
}
 800dc74:	bf00      	nop
 800dc76:	370c      	adds	r7, #12
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7e:	4770      	bx	lr

0800dc80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	b2d2      	uxtb	r2, r2
 800dc94:	701a      	strb	r2, [r3, #0]
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	0a1b      	lsrs	r3, r3, #8
 800dc9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	1c5a      	adds	r2, r3, #1
 800dca0:	607a      	str	r2, [r7, #4]
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	b2d2      	uxtb	r2, r2
 800dca6:	701a      	strb	r2, [r3, #0]
 800dca8:	683b      	ldr	r3, [r7, #0]
 800dcaa:	0a1b      	lsrs	r3, r3, #8
 800dcac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	1c5a      	adds	r2, r3, #1
 800dcb2:	607a      	str	r2, [r7, #4]
 800dcb4:	683a      	ldr	r2, [r7, #0]
 800dcb6:	b2d2      	uxtb	r2, r2
 800dcb8:	701a      	strb	r2, [r3, #0]
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	0a1b      	lsrs	r3, r3, #8
 800dcbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	607a      	str	r2, [r7, #4]
 800dcc6:	683a      	ldr	r2, [r7, #0]
 800dcc8:	b2d2      	uxtb	r2, r2
 800dcca:	701a      	strb	r2, [r3, #0]
}
 800dccc:	bf00      	nop
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800dcd8:	b480      	push	{r7}
 800dcda:	b087      	sub	sp, #28
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dce8:	68bb      	ldr	r3, [r7, #8]
 800dcea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00d      	beq.n	800dd0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dcf2:	693a      	ldr	r2, [r7, #16]
 800dcf4:	1c53      	adds	r3, r2, #1
 800dcf6:	613b      	str	r3, [r7, #16]
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	1c59      	adds	r1, r3, #1
 800dcfc:	6179      	str	r1, [r7, #20]
 800dcfe:	7812      	ldrb	r2, [r2, #0]
 800dd00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	3b01      	subs	r3, #1
 800dd06:	607b      	str	r3, [r7, #4]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d1f1      	bne.n	800dcf2 <mem_cpy+0x1a>
	}
}
 800dd0e:	bf00      	nop
 800dd10:	371c      	adds	r7, #28
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr

0800dd1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800dd1a:	b480      	push	{r7}
 800dd1c:	b087      	sub	sp, #28
 800dd1e:	af00      	add	r7, sp, #0
 800dd20:	60f8      	str	r0, [r7, #12]
 800dd22:	60b9      	str	r1, [r7, #8]
 800dd24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	1c5a      	adds	r2, r3, #1
 800dd2e:	617a      	str	r2, [r7, #20]
 800dd30:	68ba      	ldr	r2, [r7, #8]
 800dd32:	b2d2      	uxtb	r2, r2
 800dd34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	3b01      	subs	r3, #1
 800dd3a:	607b      	str	r3, [r7, #4]
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d1f3      	bne.n	800dd2a <mem_set+0x10>
}
 800dd42:	bf00      	nop
 800dd44:	371c      	adds	r7, #28
 800dd46:	46bd      	mov	sp, r7
 800dd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4c:	4770      	bx	lr

0800dd4e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dd4e:	b480      	push	{r7}
 800dd50:	b089      	sub	sp, #36	; 0x24
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	60f8      	str	r0, [r7, #12]
 800dd56:	60b9      	str	r1, [r7, #8]
 800dd58:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	61fb      	str	r3, [r7, #28]
 800dd5e:	68bb      	ldr	r3, [r7, #8]
 800dd60:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dd62:	2300      	movs	r3, #0
 800dd64:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	61fa      	str	r2, [r7, #28]
 800dd6c:	781b      	ldrb	r3, [r3, #0]
 800dd6e:	4619      	mov	r1, r3
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	1c5a      	adds	r2, r3, #1
 800dd74:	61ba      	str	r2, [r7, #24]
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	1acb      	subs	r3, r1, r3
 800dd7a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	607b      	str	r3, [r7, #4]
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d002      	beq.n	800dd8e <mem_cmp+0x40>
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d0eb      	beq.n	800dd66 <mem_cmp+0x18>

	return r;
 800dd8e:	697b      	ldr	r3, [r7, #20]
}
 800dd90:	4618      	mov	r0, r3
 800dd92:	3724      	adds	r7, #36	; 0x24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9a:	4770      	bx	lr

0800dd9c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
 800dda4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800dda6:	e002      	b.n	800ddae <chk_chr+0x12>
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	3301      	adds	r3, #1
 800ddac:	607b      	str	r3, [r7, #4]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d005      	beq.n	800ddc2 <chk_chr+0x26>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	d1f2      	bne.n	800dda8 <chk_chr+0xc>
	return *str;
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
}
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	370c      	adds	r7, #12
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd0:	4770      	bx	lr
	...

0800ddd4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ddd4:	b480      	push	{r7}
 800ddd6:	b085      	sub	sp, #20
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ddde:	2300      	movs	r3, #0
 800dde0:	60bb      	str	r3, [r7, #8]
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	e029      	b.n	800de3c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dde8:	4a27      	ldr	r2, [pc, #156]	; (800de88 <chk_lock+0xb4>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	011b      	lsls	r3, r3, #4
 800ddee:	4413      	add	r3, r2
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d01d      	beq.n	800de32 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ddf6:	4a24      	ldr	r2, [pc, #144]	; (800de88 <chk_lock+0xb4>)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	011b      	lsls	r3, r3, #4
 800ddfc:	4413      	add	r3, r2
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	429a      	cmp	r2, r3
 800de06:	d116      	bne.n	800de36 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800de08:	4a1f      	ldr	r2, [pc, #124]	; (800de88 <chk_lock+0xb4>)
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	011b      	lsls	r3, r3, #4
 800de0e:	4413      	add	r3, r2
 800de10:	3304      	adds	r3, #4
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800de18:	429a      	cmp	r2, r3
 800de1a:	d10c      	bne.n	800de36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800de1c:	4a1a      	ldr	r2, [pc, #104]	; (800de88 <chk_lock+0xb4>)
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	011b      	lsls	r3, r3, #4
 800de22:	4413      	add	r3, r2
 800de24:	3308      	adds	r3, #8
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800de2c:	429a      	cmp	r2, r3
 800de2e:	d102      	bne.n	800de36 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800de30:	e007      	b.n	800de42 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800de32:	2301      	movs	r3, #1
 800de34:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	3301      	adds	r3, #1
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b01      	cmp	r3, #1
 800de40:	d9d2      	bls.n	800dde8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	2b02      	cmp	r3, #2
 800de46:	d109      	bne.n	800de5c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d102      	bne.n	800de54 <chk_lock+0x80>
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2b02      	cmp	r3, #2
 800de52:	d101      	bne.n	800de58 <chk_lock+0x84>
 800de54:	2300      	movs	r3, #0
 800de56:	e010      	b.n	800de7a <chk_lock+0xa6>
 800de58:	2312      	movs	r3, #18
 800de5a:	e00e      	b.n	800de7a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d108      	bne.n	800de74 <chk_lock+0xa0>
 800de62:	4a09      	ldr	r2, [pc, #36]	; (800de88 <chk_lock+0xb4>)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	011b      	lsls	r3, r3, #4
 800de68:	4413      	add	r3, r2
 800de6a:	330c      	adds	r3, #12
 800de6c:	881b      	ldrh	r3, [r3, #0]
 800de6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de72:	d101      	bne.n	800de78 <chk_lock+0xa4>
 800de74:	2310      	movs	r3, #16
 800de76:	e000      	b.n	800de7a <chk_lock+0xa6>
 800de78:	2300      	movs	r3, #0
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3714      	adds	r7, #20
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop
 800de88:	2001f2f8 	.word	0x2001f2f8

0800de8c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800de8c:	b480      	push	{r7}
 800de8e:	b083      	sub	sp, #12
 800de90:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800de92:	2300      	movs	r3, #0
 800de94:	607b      	str	r3, [r7, #4]
 800de96:	e002      	b.n	800de9e <enq_lock+0x12>
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	3301      	adds	r3, #1
 800de9c:	607b      	str	r3, [r7, #4]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d806      	bhi.n	800deb2 <enq_lock+0x26>
 800dea4:	4a09      	ldr	r2, [pc, #36]	; (800decc <enq_lock+0x40>)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	011b      	lsls	r3, r3, #4
 800deaa:	4413      	add	r3, r2
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d1f2      	bne.n	800de98 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	bf14      	ite	ne
 800deb8:	2301      	movne	r3, #1
 800deba:	2300      	moveq	r3, #0
 800debc:	b2db      	uxtb	r3, r3
}
 800debe:	4618      	mov	r0, r3
 800dec0:	370c      	adds	r7, #12
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr
 800deca:	bf00      	nop
 800decc:	2001f2f8 	.word	0x2001f2f8

0800ded0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800deda:	2300      	movs	r3, #0
 800dedc:	60fb      	str	r3, [r7, #12]
 800dede:	e01f      	b.n	800df20 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dee0:	4a41      	ldr	r2, [pc, #260]	; (800dfe8 <inc_lock+0x118>)
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	011b      	lsls	r3, r3, #4
 800dee6:	4413      	add	r3, r2
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	429a      	cmp	r2, r3
 800def0:	d113      	bne.n	800df1a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800def2:	4a3d      	ldr	r2, [pc, #244]	; (800dfe8 <inc_lock+0x118>)
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	011b      	lsls	r3, r3, #4
 800def8:	4413      	add	r3, r2
 800defa:	3304      	adds	r3, #4
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800df02:	429a      	cmp	r2, r3
 800df04:	d109      	bne.n	800df1a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800df06:	4a38      	ldr	r2, [pc, #224]	; (800dfe8 <inc_lock+0x118>)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	011b      	lsls	r3, r3, #4
 800df0c:	4413      	add	r3, r2
 800df0e:	3308      	adds	r3, #8
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800df16:	429a      	cmp	r2, r3
 800df18:	d006      	beq.n	800df28 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	3301      	adds	r3, #1
 800df1e:	60fb      	str	r3, [r7, #12]
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d9dc      	bls.n	800dee0 <inc_lock+0x10>
 800df26:	e000      	b.n	800df2a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800df28:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d132      	bne.n	800df96 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800df30:	2300      	movs	r3, #0
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	e002      	b.n	800df3c <inc_lock+0x6c>
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	3301      	adds	r3, #1
 800df3a:	60fb      	str	r3, [r7, #12]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2b01      	cmp	r3, #1
 800df40:	d806      	bhi.n	800df50 <inc_lock+0x80>
 800df42:	4a29      	ldr	r2, [pc, #164]	; (800dfe8 <inc_lock+0x118>)
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	011b      	lsls	r3, r3, #4
 800df48:	4413      	add	r3, r2
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1f2      	bne.n	800df36 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	2b02      	cmp	r3, #2
 800df54:	d101      	bne.n	800df5a <inc_lock+0x8a>
 800df56:	2300      	movs	r3, #0
 800df58:	e040      	b.n	800dfdc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	4922      	ldr	r1, [pc, #136]	; (800dfe8 <inc_lock+0x118>)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	011b      	lsls	r3, r3, #4
 800df64:	440b      	add	r3, r1
 800df66:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	689a      	ldr	r2, [r3, #8]
 800df6c:	491e      	ldr	r1, [pc, #120]	; (800dfe8 <inc_lock+0x118>)
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	011b      	lsls	r3, r3, #4
 800df72:	440b      	add	r3, r1
 800df74:	3304      	adds	r3, #4
 800df76:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	695a      	ldr	r2, [r3, #20]
 800df7c:	491a      	ldr	r1, [pc, #104]	; (800dfe8 <inc_lock+0x118>)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	011b      	lsls	r3, r3, #4
 800df82:	440b      	add	r3, r1
 800df84:	3308      	adds	r3, #8
 800df86:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800df88:	4a17      	ldr	r2, [pc, #92]	; (800dfe8 <inc_lock+0x118>)
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	011b      	lsls	r3, r3, #4
 800df8e:	4413      	add	r3, r2
 800df90:	330c      	adds	r3, #12
 800df92:	2200      	movs	r2, #0
 800df94:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800df96:	683b      	ldr	r3, [r7, #0]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d009      	beq.n	800dfb0 <inc_lock+0xe0>
 800df9c:	4a12      	ldr	r2, [pc, #72]	; (800dfe8 <inc_lock+0x118>)
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	011b      	lsls	r3, r3, #4
 800dfa2:	4413      	add	r3, r2
 800dfa4:	330c      	adds	r3, #12
 800dfa6:	881b      	ldrh	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <inc_lock+0xe0>
 800dfac:	2300      	movs	r3, #0
 800dfae:	e015      	b.n	800dfdc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d108      	bne.n	800dfc8 <inc_lock+0xf8>
 800dfb6:	4a0c      	ldr	r2, [pc, #48]	; (800dfe8 <inc_lock+0x118>)
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	011b      	lsls	r3, r3, #4
 800dfbc:	4413      	add	r3, r2
 800dfbe:	330c      	adds	r3, #12
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	3301      	adds	r3, #1
 800dfc4:	b29a      	uxth	r2, r3
 800dfc6:	e001      	b.n	800dfcc <inc_lock+0xfc>
 800dfc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfcc:	4906      	ldr	r1, [pc, #24]	; (800dfe8 <inc_lock+0x118>)
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	011b      	lsls	r3, r3, #4
 800dfd2:	440b      	add	r3, r1
 800dfd4:	330c      	adds	r3, #12
 800dfd6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	3301      	adds	r3, #1
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr
 800dfe8:	2001f2f8 	.word	0x2001f2f8

0800dfec <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b085      	sub	sp, #20
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	3b01      	subs	r3, #1
 800dff8:	607b      	str	r3, [r7, #4]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d825      	bhi.n	800e04c <dec_lock+0x60>
		n = Files[i].ctr;
 800e000:	4a17      	ldr	r2, [pc, #92]	; (800e060 <dec_lock+0x74>)
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	011b      	lsls	r3, r3, #4
 800e006:	4413      	add	r3, r2
 800e008:	330c      	adds	r3, #12
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e00e:	89fb      	ldrh	r3, [r7, #14]
 800e010:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e014:	d101      	bne.n	800e01a <dec_lock+0x2e>
 800e016:	2300      	movs	r3, #0
 800e018:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e01a:	89fb      	ldrh	r3, [r7, #14]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <dec_lock+0x3a>
 800e020:	89fb      	ldrh	r3, [r7, #14]
 800e022:	3b01      	subs	r3, #1
 800e024:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e026:	4a0e      	ldr	r2, [pc, #56]	; (800e060 <dec_lock+0x74>)
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	011b      	lsls	r3, r3, #4
 800e02c:	4413      	add	r3, r2
 800e02e:	330c      	adds	r3, #12
 800e030:	89fa      	ldrh	r2, [r7, #14]
 800e032:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e034:	89fb      	ldrh	r3, [r7, #14]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d105      	bne.n	800e046 <dec_lock+0x5a>
 800e03a:	4a09      	ldr	r2, [pc, #36]	; (800e060 <dec_lock+0x74>)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	011b      	lsls	r3, r3, #4
 800e040:	4413      	add	r3, r2
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e046:	2300      	movs	r3, #0
 800e048:	737b      	strb	r3, [r7, #13]
 800e04a:	e001      	b.n	800e050 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e04c:	2302      	movs	r3, #2
 800e04e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e050:	7b7b      	ldrb	r3, [r7, #13]
}
 800e052:	4618      	mov	r0, r3
 800e054:	3714      	adds	r7, #20
 800e056:	46bd      	mov	sp, r7
 800e058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05c:	4770      	bx	lr
 800e05e:	bf00      	nop
 800e060:	2001f2f8 	.word	0x2001f2f8

0800e064 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e06c:	2300      	movs	r3, #0
 800e06e:	60fb      	str	r3, [r7, #12]
 800e070:	e010      	b.n	800e094 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e072:	4a0d      	ldr	r2, [pc, #52]	; (800e0a8 <clear_lock+0x44>)
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	011b      	lsls	r3, r3, #4
 800e078:	4413      	add	r3, r2
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d105      	bne.n	800e08e <clear_lock+0x2a>
 800e082:	4a09      	ldr	r2, [pc, #36]	; (800e0a8 <clear_lock+0x44>)
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	011b      	lsls	r3, r3, #4
 800e088:	4413      	add	r3, r2
 800e08a:	2200      	movs	r2, #0
 800e08c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	3301      	adds	r3, #1
 800e092:	60fb      	str	r3, [r7, #12]
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b01      	cmp	r3, #1
 800e098:	d9eb      	bls.n	800e072 <clear_lock+0xe>
	}
}
 800e09a:	bf00      	nop
 800e09c:	3714      	adds	r7, #20
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a4:	4770      	bx	lr
 800e0a6:	bf00      	nop
 800e0a8:	2001f2f8 	.word	0x2001f2f8

0800e0ac <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b086      	sub	sp, #24
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	78db      	ldrb	r3, [r3, #3]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d034      	beq.n	800e12a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0c4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	7858      	ldrb	r0, [r3, #1]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	f7ff fd40 	bl	800db58 <disk_write>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	73fb      	strb	r3, [r7, #15]
 800e0e2:	e022      	b.n	800e12a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ee:	697a      	ldr	r2, [r7, #20]
 800e0f0:	1ad2      	subs	r2, r2, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d217      	bcs.n	800e12a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	789b      	ldrb	r3, [r3, #2]
 800e0fe:	613b      	str	r3, [r7, #16]
 800e100:	e010      	b.n	800e124 <sync_window+0x78>
					wsect += fs->fsize;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	4413      	add	r3, r2
 800e10a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7858      	ldrb	r0, [r3, #1]
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e116:	2301      	movs	r3, #1
 800e118:	697a      	ldr	r2, [r7, #20]
 800e11a:	f7ff fd1d 	bl	800db58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	3b01      	subs	r3, #1
 800e122:	613b      	str	r3, [r7, #16]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	2b01      	cmp	r3, #1
 800e128:	d8eb      	bhi.n	800e102 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b084      	sub	sp, #16
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e13e:	2300      	movs	r3, #0
 800e140:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e146:	683a      	ldr	r2, [r7, #0]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d01b      	beq.n	800e184 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f7ff ffad 	bl	800e0ac <sync_window>
 800e152:	4603      	mov	r3, r0
 800e154:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e156:	7bfb      	ldrb	r3, [r7, #15]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d113      	bne.n	800e184 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	7858      	ldrb	r0, [r3, #1]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e166:	2301      	movs	r3, #1
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	f7ff fcd5 	bl	800db18 <disk_read>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d004      	beq.n	800e17e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e174:	f04f 33ff 	mov.w	r3, #4294967295
 800e178:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e17a:	2301      	movs	r3, #1
 800e17c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	683a      	ldr	r2, [r7, #0]
 800e182:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800e184:	7bfb      	ldrb	r3, [r7, #15]
}
 800e186:	4618      	mov	r0, r3
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
	...

0800e190 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	f7ff ff87 	bl	800e0ac <sync_window>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e1a2:	7bfb      	ldrb	r3, [r7, #15]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d159      	bne.n	800e25c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	2b03      	cmp	r3, #3
 800e1ae:	d149      	bne.n	800e244 <sync_fs+0xb4>
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	791b      	ldrb	r3, [r3, #4]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d145      	bne.n	800e244 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	899b      	ldrh	r3, [r3, #12]
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	2100      	movs	r1, #0
 800e1c6:	f7ff fda8 	bl	800dd1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	333c      	adds	r3, #60	; 0x3c
 800e1ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e1d2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7ff fd37 	bl	800dc4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	333c      	adds	r3, #60	; 0x3c
 800e1e0:	4921      	ldr	r1, [pc, #132]	; (800e268 <sync_fs+0xd8>)
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff fd4c 	bl	800dc80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	333c      	adds	r3, #60	; 0x3c
 800e1ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e1f0:	491e      	ldr	r1, [pc, #120]	; (800e26c <sync_fs+0xdc>)
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7ff fd44 	bl	800dc80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	333c      	adds	r3, #60	; 0x3c
 800e1fc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	699b      	ldr	r3, [r3, #24]
 800e204:	4619      	mov	r1, r3
 800e206:	4610      	mov	r0, r2
 800e208:	f7ff fd3a 	bl	800dc80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	333c      	adds	r3, #60	; 0x3c
 800e210:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	695b      	ldr	r3, [r3, #20]
 800e218:	4619      	mov	r1, r3
 800e21a:	4610      	mov	r0, r2
 800e21c:	f7ff fd30 	bl	800dc80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	7858      	ldrb	r0, [r3, #1]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e238:	2301      	movs	r3, #1
 800e23a:	f7ff fc8d 	bl	800db58 <disk_write>
			fs->fsi_flag = 0;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2200      	movs	r2, #0
 800e242:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	2200      	movs	r2, #0
 800e24a:	2100      	movs	r1, #0
 800e24c:	4618      	mov	r0, r3
 800e24e:	f7ff fca3 	bl	800db98 <disk_ioctl>
 800e252:	4603      	mov	r3, r0
 800e254:	2b00      	cmp	r3, #0
 800e256:	d001      	beq.n	800e25c <sync_fs+0xcc>
 800e258:	2301      	movs	r3, #1
 800e25a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
 800e266:	bf00      	nop
 800e268:	41615252 	.word	0x41615252
 800e26c:	61417272 	.word	0x61417272

0800e270 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
 800e278:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e27a:	683b      	ldr	r3, [r7, #0]
 800e27c:	3b02      	subs	r3, #2
 800e27e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	3b02      	subs	r3, #2
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d301      	bcc.n	800e290 <clust2sect+0x20>
 800e28c:	2300      	movs	r3, #0
 800e28e:	e008      	b.n	800e2a2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	895b      	ldrh	r3, [r3, #10]
 800e294:	461a      	mov	r2, r3
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	fb03 f202 	mul.w	r2, r3, r2
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2a0:	4413      	add	r3, r2
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	370c      	adds	r7, #12
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr

0800e2ae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e2ae:	b580      	push	{r7, lr}
 800e2b0:	b086      	sub	sp, #24
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	2b01      	cmp	r3, #1
 800e2c2:	d904      	bls.n	800e2ce <get_fat+0x20>
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	6a1b      	ldr	r3, [r3, #32]
 800e2c8:	683a      	ldr	r2, [r7, #0]
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d302      	bcc.n	800e2d4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	617b      	str	r3, [r7, #20]
 800e2d2:	e0b7      	b.n	800e444 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800e2d8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	781b      	ldrb	r3, [r3, #0]
 800e2de:	2b02      	cmp	r3, #2
 800e2e0:	d05a      	beq.n	800e398 <get_fat+0xea>
 800e2e2:	2b03      	cmp	r3, #3
 800e2e4:	d07d      	beq.n	800e3e2 <get_fat+0x134>
 800e2e6:	2b01      	cmp	r3, #1
 800e2e8:	f040 80a2 	bne.w	800e430 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e2ec:	683b      	ldr	r3, [r7, #0]
 800e2ee:	60fb      	str	r3, [r7, #12]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	085b      	lsrs	r3, r3, #1
 800e2f4:	68fa      	ldr	r2, [r7, #12]
 800e2f6:	4413      	add	r3, r2
 800e2f8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	899b      	ldrh	r3, [r3, #12]
 800e302:	4619      	mov	r1, r3
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	fbb3 f3f1 	udiv	r3, r3, r1
 800e30a:	4413      	add	r3, r2
 800e30c:	4619      	mov	r1, r3
 800e30e:	6938      	ldr	r0, [r7, #16]
 800e310:	f7ff ff10 	bl	800e134 <move_window>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	f040 808d 	bne.w	800e436 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	1c5a      	adds	r2, r3, #1
 800e320:	60fa      	str	r2, [r7, #12]
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	8992      	ldrh	r2, [r2, #12]
 800e326:	fbb3 f1f2 	udiv	r1, r3, r2
 800e32a:	fb02 f201 	mul.w	r2, r2, r1
 800e32e:	1a9b      	subs	r3, r3, r2
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	4413      	add	r3, r2
 800e334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e338:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	899b      	ldrh	r3, [r3, #12]
 800e342:	4619      	mov	r1, r3
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	fbb3 f3f1 	udiv	r3, r3, r1
 800e34a:	4413      	add	r3, r2
 800e34c:	4619      	mov	r1, r3
 800e34e:	6938      	ldr	r0, [r7, #16]
 800e350:	f7ff fef0 	bl	800e134 <move_window>
 800e354:	4603      	mov	r3, r0
 800e356:	2b00      	cmp	r3, #0
 800e358:	d16f      	bne.n	800e43a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	899b      	ldrh	r3, [r3, #12]
 800e35e:	461a      	mov	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	fbb3 f1f2 	udiv	r1, r3, r2
 800e366:	fb02 f201 	mul.w	r2, r2, r1
 800e36a:	1a9b      	subs	r3, r3, r2
 800e36c:	693a      	ldr	r2, [r7, #16]
 800e36e:	4413      	add	r3, r2
 800e370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e374:	021b      	lsls	r3, r3, #8
 800e376:	461a      	mov	r2, r3
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	f003 0301 	and.w	r3, r3, #1
 800e384:	2b00      	cmp	r3, #0
 800e386:	d002      	beq.n	800e38e <get_fat+0xe0>
 800e388:	68bb      	ldr	r3, [r7, #8]
 800e38a:	091b      	lsrs	r3, r3, #4
 800e38c:	e002      	b.n	800e394 <get_fat+0xe6>
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e394:	617b      	str	r3, [r7, #20]
			break;
 800e396:	e055      	b.n	800e444 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e398:	693b      	ldr	r3, [r7, #16]
 800e39a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	899b      	ldrh	r3, [r3, #12]
 800e3a0:	085b      	lsrs	r3, r3, #1
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3ac:	4413      	add	r3, r2
 800e3ae:	4619      	mov	r1, r3
 800e3b0:	6938      	ldr	r0, [r7, #16]
 800e3b2:	f7ff febf 	bl	800e134 <move_window>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d140      	bne.n	800e43e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	005b      	lsls	r3, r3, #1
 800e3c6:	693a      	ldr	r2, [r7, #16]
 800e3c8:	8992      	ldrh	r2, [r2, #12]
 800e3ca:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3ce:	fb02 f200 	mul.w	r2, r2, r0
 800e3d2:	1a9b      	subs	r3, r3, r2
 800e3d4:	440b      	add	r3, r1
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fbfc 	bl	800dbd4 <ld_word>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	617b      	str	r3, [r7, #20]
			break;
 800e3e0:	e030      	b.n	800e444 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e3e2:	693b      	ldr	r3, [r7, #16]
 800e3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	899b      	ldrh	r3, [r3, #12]
 800e3ea:	089b      	lsrs	r3, r3, #2
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e3f6:	4413      	add	r3, r2
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6938      	ldr	r0, [r7, #16]
 800e3fc:	f7ff fe9a 	bl	800e134 <move_window>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d11d      	bne.n	800e442 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	8992      	ldrh	r2, [r2, #12]
 800e414:	fbb3 f0f2 	udiv	r0, r3, r2
 800e418:	fb02 f200 	mul.w	r2, r2, r0
 800e41c:	1a9b      	subs	r3, r3, r2
 800e41e:	440b      	add	r3, r1
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff fbef 	bl	800dc04 <ld_dword>
 800e426:	4603      	mov	r3, r0
 800e428:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e42c:	617b      	str	r3, [r7, #20]
			break;
 800e42e:	e009      	b.n	800e444 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e430:	2301      	movs	r3, #1
 800e432:	617b      	str	r3, [r7, #20]
 800e434:	e006      	b.n	800e444 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e436:	bf00      	nop
 800e438:	e004      	b.n	800e444 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e43a:	bf00      	nop
 800e43c:	e002      	b.n	800e444 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e43e:	bf00      	nop
 800e440:	e000      	b.n	800e444 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e442:	bf00      	nop
		}
	}

	return val;
 800e444:	697b      	ldr	r3, [r7, #20]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3718      	adds	r7, #24
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e44e:	b590      	push	{r4, r7, lr}
 800e450:	b089      	sub	sp, #36	; 0x24
 800e452:	af00      	add	r7, sp, #0
 800e454:	60f8      	str	r0, [r7, #12]
 800e456:	60b9      	str	r1, [r7, #8]
 800e458:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e45a:	2302      	movs	r3, #2
 800e45c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	2b01      	cmp	r3, #1
 800e462:	f240 8106 	bls.w	800e672 <put_fat+0x224>
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6a1b      	ldr	r3, [r3, #32]
 800e46a:	68ba      	ldr	r2, [r7, #8]
 800e46c:	429a      	cmp	r2, r3
 800e46e:	f080 8100 	bcs.w	800e672 <put_fat+0x224>
		switch (fs->fs_type) {
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	2b02      	cmp	r3, #2
 800e478:	f000 8088 	beq.w	800e58c <put_fat+0x13e>
 800e47c:	2b03      	cmp	r3, #3
 800e47e:	f000 80b0 	beq.w	800e5e2 <put_fat+0x194>
 800e482:	2b01      	cmp	r3, #1
 800e484:	f040 80f5 	bne.w	800e672 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	61bb      	str	r3, [r7, #24]
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	085b      	lsrs	r3, r3, #1
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	4413      	add	r3, r2
 800e494:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	899b      	ldrh	r3, [r3, #12]
 800e49e:	4619      	mov	r1, r3
 800e4a0:	69bb      	ldr	r3, [r7, #24]
 800e4a2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4a6:	4413      	add	r3, r2
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f7ff fe42 	bl	800e134 <move_window>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e4b4:	7ffb      	ldrb	r3, [r7, #31]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	f040 80d4 	bne.w	800e664 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	61ba      	str	r2, [r7, #24]
 800e4c8:	68fa      	ldr	r2, [r7, #12]
 800e4ca:	8992      	ldrh	r2, [r2, #12]
 800e4cc:	fbb3 f0f2 	udiv	r0, r3, r2
 800e4d0:	fb02 f200 	mul.w	r2, r2, r0
 800e4d4:	1a9b      	subs	r3, r3, r2
 800e4d6:	440b      	add	r3, r1
 800e4d8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	f003 0301 	and.w	r3, r3, #1
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00d      	beq.n	800e500 <put_fat+0xb2>
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	b25b      	sxtb	r3, r3
 800e4ea:	f003 030f 	and.w	r3, r3, #15
 800e4ee:	b25a      	sxtb	r2, r3
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	b2db      	uxtb	r3, r3
 800e4f4:	011b      	lsls	r3, r3, #4
 800e4f6:	b25b      	sxtb	r3, r3
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	b25b      	sxtb	r3, r3
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	e001      	b.n	800e504 <put_fat+0xb6>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	697a      	ldr	r2, [r7, #20]
 800e506:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2201      	movs	r2, #1
 800e50c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	899b      	ldrh	r3, [r3, #12]
 800e516:	4619      	mov	r1, r3
 800e518:	69bb      	ldr	r3, [r7, #24]
 800e51a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e51e:	4413      	add	r3, r2
 800e520:	4619      	mov	r1, r3
 800e522:	68f8      	ldr	r0, [r7, #12]
 800e524:	f7ff fe06 	bl	800e134 <move_window>
 800e528:	4603      	mov	r3, r0
 800e52a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e52c:	7ffb      	ldrb	r3, [r7, #31]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	f040 809a 	bne.w	800e668 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	899b      	ldrh	r3, [r3, #12]
 800e53e:	461a      	mov	r2, r3
 800e540:	69bb      	ldr	r3, [r7, #24]
 800e542:	fbb3 f0f2 	udiv	r0, r3, r2
 800e546:	fb02 f200 	mul.w	r2, r2, r0
 800e54a:	1a9b      	subs	r3, r3, r2
 800e54c:	440b      	add	r3, r1
 800e54e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	f003 0301 	and.w	r3, r3, #1
 800e556:	2b00      	cmp	r3, #0
 800e558:	d003      	beq.n	800e562 <put_fat+0x114>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	091b      	lsrs	r3, r3, #4
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	e00e      	b.n	800e580 <put_fat+0x132>
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	781b      	ldrb	r3, [r3, #0]
 800e566:	b25b      	sxtb	r3, r3
 800e568:	f023 030f 	bic.w	r3, r3, #15
 800e56c:	b25a      	sxtb	r2, r3
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	0a1b      	lsrs	r3, r3, #8
 800e572:	b25b      	sxtb	r3, r3
 800e574:	f003 030f 	and.w	r3, r3, #15
 800e578:	b25b      	sxtb	r3, r3
 800e57a:	4313      	orrs	r3, r2
 800e57c:	b25b      	sxtb	r3, r3
 800e57e:	b2db      	uxtb	r3, r3
 800e580:	697a      	ldr	r2, [r7, #20]
 800e582:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	2201      	movs	r2, #1
 800e588:	70da      	strb	r2, [r3, #3]
			break;
 800e58a:	e072      	b.n	800e672 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	899b      	ldrh	r3, [r3, #12]
 800e594:	085b      	lsrs	r3, r3, #1
 800e596:	b29b      	uxth	r3, r3
 800e598:	4619      	mov	r1, r3
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5a0:	4413      	add	r3, r2
 800e5a2:	4619      	mov	r1, r3
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	f7ff fdc5 	bl	800e134 <move_window>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e5ae:	7ffb      	ldrb	r3, [r7, #31]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d15b      	bne.n	800e66c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	005b      	lsls	r3, r3, #1
 800e5be:	68fa      	ldr	r2, [r7, #12]
 800e5c0:	8992      	ldrh	r2, [r2, #12]
 800e5c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e5c6:	fb02 f200 	mul.w	r2, r2, r0
 800e5ca:	1a9b      	subs	r3, r3, r2
 800e5cc:	440b      	add	r3, r1
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	b292      	uxth	r2, r2
 800e5d2:	4611      	mov	r1, r2
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	f7ff fb38 	bl	800dc4a <st_word>
			fs->wflag = 1;
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	2201      	movs	r2, #1
 800e5de:	70da      	strb	r2, [r3, #3]
			break;
 800e5e0:	e047      	b.n	800e672 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	899b      	ldrh	r3, [r3, #12]
 800e5ea:	089b      	lsrs	r3, r3, #2
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5f6:	4413      	add	r3, r2
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f7ff fd9a 	bl	800e134 <move_window>
 800e600:	4603      	mov	r3, r0
 800e602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e604:	7ffb      	ldrb	r3, [r7, #31]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d132      	bne.n	800e670 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	8992      	ldrh	r2, [r2, #12]
 800e61e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e622:	fb02 f200 	mul.w	r2, r2, r0
 800e626:	1a9b      	subs	r3, r3, r2
 800e628:	440b      	add	r3, r1
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7ff faea 	bl	800dc04 <ld_dword>
 800e630:	4603      	mov	r3, r0
 800e632:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e636:	4323      	orrs	r3, r4
 800e638:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	8992      	ldrh	r2, [r2, #12]
 800e648:	fbb3 f0f2 	udiv	r0, r3, r2
 800e64c:	fb02 f200 	mul.w	r2, r2, r0
 800e650:	1a9b      	subs	r3, r3, r2
 800e652:	440b      	add	r3, r1
 800e654:	6879      	ldr	r1, [r7, #4]
 800e656:	4618      	mov	r0, r3
 800e658:	f7ff fb12 	bl	800dc80 <st_dword>
			fs->wflag = 1;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2201      	movs	r2, #1
 800e660:	70da      	strb	r2, [r3, #3]
			break;
 800e662:	e006      	b.n	800e672 <put_fat+0x224>
			if (res != FR_OK) break;
 800e664:	bf00      	nop
 800e666:	e004      	b.n	800e672 <put_fat+0x224>
			if (res != FR_OK) break;
 800e668:	bf00      	nop
 800e66a:	e002      	b.n	800e672 <put_fat+0x224>
			if (res != FR_OK) break;
 800e66c:	bf00      	nop
 800e66e:	e000      	b.n	800e672 <put_fat+0x224>
			if (res != FR_OK) break;
 800e670:	bf00      	nop
		}
	}
	return res;
 800e672:	7ffb      	ldrb	r3, [r7, #31]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3724      	adds	r7, #36	; 0x24
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd90      	pop	{r4, r7, pc}

0800e67c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b088      	sub	sp, #32
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e688:	2300      	movs	r3, #0
 800e68a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	2b01      	cmp	r3, #1
 800e696:	d904      	bls.n	800e6a2 <remove_chain+0x26>
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	6a1b      	ldr	r3, [r3, #32]
 800e69c:	68ba      	ldr	r2, [r7, #8]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	d301      	bcc.n	800e6a6 <remove_chain+0x2a>
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	e04b      	b.n	800e73e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d00c      	beq.n	800e6c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e6ac:	f04f 32ff 	mov.w	r2, #4294967295
 800e6b0:	6879      	ldr	r1, [r7, #4]
 800e6b2:	69b8      	ldr	r0, [r7, #24]
 800e6b4:	f7ff fecb 	bl	800e44e <put_fat>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e6bc:	7ffb      	ldrb	r3, [r7, #31]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d001      	beq.n	800e6c6 <remove_chain+0x4a>
 800e6c2:	7ffb      	ldrb	r3, [r7, #31]
 800e6c4:	e03b      	b.n	800e73e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e6c6:	68b9      	ldr	r1, [r7, #8]
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f7ff fdf0 	bl	800e2ae <get_fat>
 800e6ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d031      	beq.n	800e73a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	2b01      	cmp	r3, #1
 800e6da:	d101      	bne.n	800e6e0 <remove_chain+0x64>
 800e6dc:	2302      	movs	r3, #2
 800e6de:	e02e      	b.n	800e73e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e6:	d101      	bne.n	800e6ec <remove_chain+0x70>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	e028      	b.n	800e73e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	68b9      	ldr	r1, [r7, #8]
 800e6f0:	69b8      	ldr	r0, [r7, #24]
 800e6f2:	f7ff feac 	bl	800e44e <put_fat>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e6fa:	7ffb      	ldrb	r3, [r7, #31]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d001      	beq.n	800e704 <remove_chain+0x88>
 800e700:	7ffb      	ldrb	r3, [r7, #31]
 800e702:	e01c      	b.n	800e73e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	699a      	ldr	r2, [r3, #24]
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	6a1b      	ldr	r3, [r3, #32]
 800e70c:	3b02      	subs	r3, #2
 800e70e:	429a      	cmp	r2, r3
 800e710:	d20b      	bcs.n	800e72a <remove_chain+0xae>
			fs->free_clst++;
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	699b      	ldr	r3, [r3, #24]
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800e71c:	69bb      	ldr	r3, [r7, #24]
 800e71e:	791b      	ldrb	r3, [r3, #4]
 800e720:	f043 0301 	orr.w	r3, r3, #1
 800e724:	b2da      	uxtb	r2, r3
 800e726:	69bb      	ldr	r3, [r7, #24]
 800e728:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	6a1b      	ldr	r3, [r3, #32]
 800e732:	68ba      	ldr	r2, [r7, #8]
 800e734:	429a      	cmp	r2, r3
 800e736:	d3c6      	bcc.n	800e6c6 <remove_chain+0x4a>
 800e738:	e000      	b.n	800e73c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e73a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e73c:	2300      	movs	r3, #0
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3720      	adds	r7, #32
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b088      	sub	sp, #32
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10d      	bne.n	800e778 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	695b      	ldr	r3, [r3, #20]
 800e760:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e762:	69bb      	ldr	r3, [r7, #24]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d004      	beq.n	800e772 <create_chain+0x2c>
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	6a1b      	ldr	r3, [r3, #32]
 800e76c:	69ba      	ldr	r2, [r7, #24]
 800e76e:	429a      	cmp	r2, r3
 800e770:	d31b      	bcc.n	800e7aa <create_chain+0x64>
 800e772:	2301      	movs	r3, #1
 800e774:	61bb      	str	r3, [r7, #24]
 800e776:	e018      	b.n	800e7aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e778:	6839      	ldr	r1, [r7, #0]
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7ff fd97 	bl	800e2ae <get_fat>
 800e780:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2b01      	cmp	r3, #1
 800e786:	d801      	bhi.n	800e78c <create_chain+0x46>
 800e788:	2301      	movs	r3, #1
 800e78a:	e070      	b.n	800e86e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e792:	d101      	bne.n	800e798 <create_chain+0x52>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	e06a      	b.n	800e86e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	6a1b      	ldr	r3, [r3, #32]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d201      	bcs.n	800e7a6 <create_chain+0x60>
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	e063      	b.n	800e86e <create_chain+0x128>
		scl = clst;
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	6a1b      	ldr	r3, [r3, #32]
 800e7b8:	69fa      	ldr	r2, [r7, #28]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d307      	bcc.n	800e7ce <create_chain+0x88>
				ncl = 2;
 800e7be:	2302      	movs	r3, #2
 800e7c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e7c2:	69fa      	ldr	r2, [r7, #28]
 800e7c4:	69bb      	ldr	r3, [r7, #24]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d901      	bls.n	800e7ce <create_chain+0x88>
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	e04f      	b.n	800e86e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e7ce:	69f9      	ldr	r1, [r7, #28]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f7ff fd6c 	bl	800e2ae <get_fat>
 800e7d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d00e      	beq.n	800e7fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2b01      	cmp	r3, #1
 800e7e2:	d003      	beq.n	800e7ec <create_chain+0xa6>
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ea:	d101      	bne.n	800e7f0 <create_chain+0xaa>
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	e03e      	b.n	800e86e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e7f0:	69fa      	ldr	r2, [r7, #28]
 800e7f2:	69bb      	ldr	r3, [r7, #24]
 800e7f4:	429a      	cmp	r2, r3
 800e7f6:	d1da      	bne.n	800e7ae <create_chain+0x68>
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	e038      	b.n	800e86e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e7fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e7fe:	f04f 32ff 	mov.w	r2, #4294967295
 800e802:	69f9      	ldr	r1, [r7, #28]
 800e804:	6938      	ldr	r0, [r7, #16]
 800e806:	f7ff fe22 	bl	800e44e <put_fat>
 800e80a:	4603      	mov	r3, r0
 800e80c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d109      	bne.n	800e828 <create_chain+0xe2>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d006      	beq.n	800e828 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e81a:	69fa      	ldr	r2, [r7, #28]
 800e81c:	6839      	ldr	r1, [r7, #0]
 800e81e:	6938      	ldr	r0, [r7, #16]
 800e820:	f7ff fe15 	bl	800e44e <put_fat>
 800e824:	4603      	mov	r3, r0
 800e826:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e828:	7dfb      	ldrb	r3, [r7, #23]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d116      	bne.n	800e85c <create_chain+0x116>
		fs->last_clst = ncl;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	699a      	ldr	r2, [r3, #24]
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	6a1b      	ldr	r3, [r3, #32]
 800e83c:	3b02      	subs	r3, #2
 800e83e:	429a      	cmp	r2, r3
 800e840:	d804      	bhi.n	800e84c <create_chain+0x106>
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	699b      	ldr	r3, [r3, #24]
 800e846:	1e5a      	subs	r2, r3, #1
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	791b      	ldrb	r3, [r3, #4]
 800e850:	f043 0301 	orr.w	r3, r3, #1
 800e854:	b2da      	uxtb	r2, r3
 800e856:	693b      	ldr	r3, [r7, #16]
 800e858:	711a      	strb	r2, [r3, #4]
 800e85a:	e007      	b.n	800e86c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e85c:	7dfb      	ldrb	r3, [r7, #23]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d102      	bne.n	800e868 <create_chain+0x122>
 800e862:	f04f 33ff 	mov.w	r3, #4294967295
 800e866:	e000      	b.n	800e86a <create_chain+0x124>
 800e868:	2301      	movs	r3, #1
 800e86a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e86c:	69fb      	ldr	r3, [r7, #28]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3720      	adds	r7, #32
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e876:	b480      	push	{r7}
 800e878:	b087      	sub	sp, #28
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e88a:	3304      	adds	r3, #4
 800e88c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	899b      	ldrh	r3, [r3, #12]
 800e892:	461a      	mov	r2, r3
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	fbb3 f3f2 	udiv	r3, r3, r2
 800e89a:	68fa      	ldr	r2, [r7, #12]
 800e89c:	8952      	ldrh	r2, [r2, #10]
 800e89e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e8a2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	1d1a      	adds	r2, r3, #4
 800e8a8:	613a      	str	r2, [r7, #16]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <clmt_clust+0x42>
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	e010      	b.n	800e8da <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e8b8:	697a      	ldr	r2, [r7, #20]
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	429a      	cmp	r2, r3
 800e8be:	d307      	bcc.n	800e8d0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e8c0:	697a      	ldr	r2, [r7, #20]
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	1ad3      	subs	r3, r2, r3
 800e8c6:	617b      	str	r3, [r7, #20]
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e8ce:	e7e9      	b.n	800e8a4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e8d0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	697b      	ldr	r3, [r7, #20]
 800e8d8:	4413      	add	r3, r2
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	371c      	adds	r7, #28
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e4:	4770      	bx	lr

0800e8e6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b086      	sub	sp, #24
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	6078      	str	r0, [r7, #4]
 800e8ee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e8fc:	d204      	bcs.n	800e908 <dir_sdi+0x22>
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	f003 031f 	and.w	r3, r3, #31
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <dir_sdi+0x26>
		return FR_INT_ERR;
 800e908:	2302      	movs	r3, #2
 800e90a:	e071      	b.n	800e9f0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	689b      	ldr	r3, [r3, #8]
 800e916:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d106      	bne.n	800e92c <dir_sdi+0x46>
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	2b02      	cmp	r3, #2
 800e924:	d902      	bls.n	800e92c <dir_sdi+0x46>
		clst = fs->dirbase;
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e92a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10c      	bne.n	800e94c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e932:	683b      	ldr	r3, [r7, #0]
 800e934:	095b      	lsrs	r3, r3, #5
 800e936:	693a      	ldr	r2, [r7, #16]
 800e938:	8912      	ldrh	r2, [r2, #8]
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d301      	bcc.n	800e942 <dir_sdi+0x5c>
 800e93e:	2302      	movs	r3, #2
 800e940:	e056      	b.n	800e9f0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	61da      	str	r2, [r3, #28]
 800e94a:	e02d      	b.n	800e9a8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	895b      	ldrh	r3, [r3, #10]
 800e950:	461a      	mov	r2, r3
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	899b      	ldrh	r3, [r3, #12]
 800e956:	fb03 f302 	mul.w	r3, r3, r2
 800e95a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e95c:	e019      	b.n	800e992 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6979      	ldr	r1, [r7, #20]
 800e962:	4618      	mov	r0, r3
 800e964:	f7ff fca3 	bl	800e2ae <get_fat>
 800e968:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e96a:	697b      	ldr	r3, [r7, #20]
 800e96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e970:	d101      	bne.n	800e976 <dir_sdi+0x90>
 800e972:	2301      	movs	r3, #1
 800e974:	e03c      	b.n	800e9f0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e976:	697b      	ldr	r3, [r7, #20]
 800e978:	2b01      	cmp	r3, #1
 800e97a:	d904      	bls.n	800e986 <dir_sdi+0xa0>
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	429a      	cmp	r2, r3
 800e984:	d301      	bcc.n	800e98a <dir_sdi+0xa4>
 800e986:	2302      	movs	r3, #2
 800e988:	e032      	b.n	800e9f0 <dir_sdi+0x10a>
			ofs -= csz;
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e992:	683a      	ldr	r2, [r7, #0]
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	429a      	cmp	r2, r3
 800e998:	d2e1      	bcs.n	800e95e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e99a:	6979      	ldr	r1, [r7, #20]
 800e99c:	6938      	ldr	r0, [r7, #16]
 800e99e:	f7ff fc67 	bl	800e270 <clust2sect>
 800e9a2:	4602      	mov	r2, r0
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	697a      	ldr	r2, [r7, #20]
 800e9ac:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	69db      	ldr	r3, [r3, #28]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d101      	bne.n	800e9ba <dir_sdi+0xd4>
 800e9b6:	2302      	movs	r3, #2
 800e9b8:	e01a      	b.n	800e9f0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	69da      	ldr	r2, [r3, #28]
 800e9be:	693b      	ldr	r3, [r7, #16]
 800e9c0:	899b      	ldrh	r3, [r3, #12]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	683b      	ldr	r3, [r7, #0]
 800e9c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e9ca:	441a      	add	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e9d0:	693b      	ldr	r3, [r7, #16]
 800e9d2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	899b      	ldrh	r3, [r3, #12]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	fbb3 f0f2 	udiv	r0, r3, r2
 800e9e2:	fb02 f200 	mul.w	r2, r2, r0
 800e9e6:	1a9b      	subs	r3, r3, r2
 800e9e8:	18ca      	adds	r2, r1, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3718      	adds	r7, #24
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	695b      	ldr	r3, [r3, #20]
 800ea0c:	3320      	adds	r3, #32
 800ea0e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	69db      	ldr	r3, [r3, #28]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d003      	beq.n	800ea20 <dir_next+0x28>
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ea1e:	d301      	bcc.n	800ea24 <dir_next+0x2c>
 800ea20:	2304      	movs	r3, #4
 800ea22:	e0bb      	b.n	800eb9c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	899b      	ldrh	r3, [r3, #12]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea30:	fb02 f201 	mul.w	r2, r2, r1
 800ea34:	1a9b      	subs	r3, r3, r2
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	f040 809d 	bne.w	800eb76 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	69db      	ldr	r3, [r3, #28]
 800ea40:	1c5a      	adds	r2, r3, #1
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	699b      	ldr	r3, [r3, #24]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d10b      	bne.n	800ea66 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	095b      	lsrs	r3, r3, #5
 800ea52:	68fa      	ldr	r2, [r7, #12]
 800ea54:	8912      	ldrh	r2, [r2, #8]
 800ea56:	4293      	cmp	r3, r2
 800ea58:	f0c0 808d 	bcc.w	800eb76 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	61da      	str	r2, [r3, #28]
 800ea62:	2304      	movs	r3, #4
 800ea64:	e09a      	b.n	800eb9c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	899b      	ldrh	r3, [r3, #12]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	8952      	ldrh	r2, [r2, #10]
 800ea76:	3a01      	subs	r2, #1
 800ea78:	4013      	ands	r3, r2
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d17b      	bne.n	800eb76 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ea7e:	687a      	ldr	r2, [r7, #4]
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	699b      	ldr	r3, [r3, #24]
 800ea84:	4619      	mov	r1, r3
 800ea86:	4610      	mov	r0, r2
 800ea88:	f7ff fc11 	bl	800e2ae <get_fat>
 800ea8c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ea8e:	697b      	ldr	r3, [r7, #20]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d801      	bhi.n	800ea98 <dir_next+0xa0>
 800ea94:	2302      	movs	r3, #2
 800ea96:	e081      	b.n	800eb9c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9e:	d101      	bne.n	800eaa4 <dir_next+0xac>
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	e07b      	b.n	800eb9c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	6a1b      	ldr	r3, [r3, #32]
 800eaa8:	697a      	ldr	r2, [r7, #20]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d359      	bcc.n	800eb62 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d104      	bne.n	800eabe <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	61da      	str	r2, [r3, #28]
 800eaba:	2304      	movs	r3, #4
 800eabc:	e06e      	b.n	800eb9c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800eabe:	687a      	ldr	r2, [r7, #4]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	699b      	ldr	r3, [r3, #24]
 800eac4:	4619      	mov	r1, r3
 800eac6:	4610      	mov	r0, r2
 800eac8:	f7ff fe3d 	bl	800e746 <create_chain>
 800eacc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <dir_next+0xe0>
 800ead4:	2307      	movs	r3, #7
 800ead6:	e061      	b.n	800eb9c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d101      	bne.n	800eae2 <dir_next+0xea>
 800eade:	2302      	movs	r3, #2
 800eae0:	e05c      	b.n	800eb9c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae8:	d101      	bne.n	800eaee <dir_next+0xf6>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e056      	b.n	800eb9c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f7ff fadc 	bl	800e0ac <sync_window>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d001      	beq.n	800eafe <dir_next+0x106>
 800eafa:	2301      	movs	r3, #1
 800eafc:	e04e      	b.n	800eb9c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	899b      	ldrh	r3, [r3, #12]
 800eb08:	461a      	mov	r2, r3
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	f7ff f905 	bl	800dd1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eb10:	2300      	movs	r3, #0
 800eb12:	613b      	str	r3, [r7, #16]
 800eb14:	6979      	ldr	r1, [r7, #20]
 800eb16:	68f8      	ldr	r0, [r7, #12]
 800eb18:	f7ff fbaa 	bl	800e270 <clust2sect>
 800eb1c:	4602      	mov	r2, r0
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	639a      	str	r2, [r3, #56]	; 0x38
 800eb22:	e012      	b.n	800eb4a <dir_next+0x152>
						fs->wflag = 1;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2201      	movs	r2, #1
 800eb28:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eb2a:	68f8      	ldr	r0, [r7, #12]
 800eb2c:	f7ff fabe 	bl	800e0ac <sync_window>
 800eb30:	4603      	mov	r3, r0
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <dir_next+0x142>
 800eb36:	2301      	movs	r3, #1
 800eb38:	e030      	b.n	800eb9c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eb3a:	693b      	ldr	r3, [r7, #16]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	613b      	str	r3, [r7, #16]
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb44:	1c5a      	adds	r2, r3, #1
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	639a      	str	r2, [r3, #56]	; 0x38
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	895b      	ldrh	r3, [r3, #10]
 800eb4e:	461a      	mov	r2, r3
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d3e6      	bcc.n	800eb24 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	1ad2      	subs	r2, r2, r3
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	697a      	ldr	r2, [r7, #20]
 800eb66:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eb68:	6979      	ldr	r1, [r7, #20]
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7ff fb80 	bl	800e270 <clust2sect>
 800eb70:	4602      	mov	r2, r0
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	68ba      	ldr	r2, [r7, #8]
 800eb7a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	899b      	ldrh	r3, [r3, #12]
 800eb86:	461a      	mov	r2, r3
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800eb8e:	fb02 f200 	mul.w	r2, r2, r0
 800eb92:	1a9b      	subs	r3, r3, r2
 800eb94:	18ca      	adds	r2, r1, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ebb4:	2100      	movs	r1, #0
 800ebb6:	6878      	ldr	r0, [r7, #4]
 800ebb8:	f7ff fe95 	bl	800e8e6 <dir_sdi>
 800ebbc:	4603      	mov	r3, r0
 800ebbe:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ebc0:	7dfb      	ldrb	r3, [r7, #23]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d12b      	bne.n	800ec1e <dir_alloc+0x7a>
		n = 0;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	69db      	ldr	r3, [r3, #28]
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f7ff faaf 	bl	800e134 <move_window>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ebda:	7dfb      	ldrb	r3, [r7, #23]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d11d      	bne.n	800ec1c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6a1b      	ldr	r3, [r3, #32]
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	2be5      	cmp	r3, #229	; 0xe5
 800ebe8:	d004      	beq.n	800ebf4 <dir_alloc+0x50>
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6a1b      	ldr	r3, [r3, #32]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d107      	bne.n	800ec04 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	3301      	adds	r3, #1
 800ebf8:	613b      	str	r3, [r7, #16]
 800ebfa:	693a      	ldr	r2, [r7, #16]
 800ebfc:	683b      	ldr	r3, [r7, #0]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d102      	bne.n	800ec08 <dir_alloc+0x64>
 800ec02:	e00c      	b.n	800ec1e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ec04:	2300      	movs	r3, #0
 800ec06:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ec08:	2101      	movs	r1, #1
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7ff fef4 	bl	800e9f8 <dir_next>
 800ec10:	4603      	mov	r3, r0
 800ec12:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ec14:	7dfb      	ldrb	r3, [r7, #23]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0d7      	beq.n	800ebca <dir_alloc+0x26>
 800ec1a:	e000      	b.n	800ec1e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ec1c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ec1e:	7dfb      	ldrb	r3, [r7, #23]
 800ec20:	2b04      	cmp	r3, #4
 800ec22:	d101      	bne.n	800ec28 <dir_alloc+0x84>
 800ec24:	2307      	movs	r3, #7
 800ec26:	75fb      	strb	r3, [r7, #23]
	return res;
 800ec28:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec2a:	4618      	mov	r0, r3
 800ec2c:	3718      	adds	r7, #24
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	bd80      	pop	{r7, pc}

0800ec32 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b084      	sub	sp, #16
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
 800ec3a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	331a      	adds	r3, #26
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe ffc7 	bl	800dbd4 <ld_word>
 800ec46:	4603      	mov	r3, r0
 800ec48:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	2b03      	cmp	r3, #3
 800ec50:	d109      	bne.n	800ec66 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ec52:	683b      	ldr	r3, [r7, #0]
 800ec54:	3314      	adds	r3, #20
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7fe ffbc 	bl	800dbd4 <ld_word>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	041b      	lsls	r3, r3, #16
 800ec60:	68fa      	ldr	r2, [r7, #12]
 800ec62:	4313      	orrs	r3, r2
 800ec64:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ec66:	68fb      	ldr	r3, [r7, #12]
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	60f8      	str	r0, [r7, #12]
 800ec78:	60b9      	str	r1, [r7, #8]
 800ec7a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	331a      	adds	r3, #26
 800ec80:	687a      	ldr	r2, [r7, #4]
 800ec82:	b292      	uxth	r2, r2
 800ec84:	4611      	mov	r1, r2
 800ec86:	4618      	mov	r0, r3
 800ec88:	f7fe ffdf 	bl	800dc4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	2b03      	cmp	r3, #3
 800ec92:	d109      	bne.n	800eca8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	f103 0214 	add.w	r2, r3, #20
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	0c1b      	lsrs	r3, r3, #16
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	4619      	mov	r1, r3
 800eca2:	4610      	mov	r0, r2
 800eca4:	f7fe ffd1 	bl	800dc4a <st_word>
	}
}
 800eca8:	bf00      	nop
 800ecaa:	3710      	adds	r7, #16
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ecb0:	b590      	push	{r4, r7, lr}
 800ecb2:	b087      	sub	sp, #28
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	331a      	adds	r3, #26
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe ff88 	bl	800dbd4 <ld_word>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d001      	beq.n	800ecce <cmp_lfn+0x1e>
 800ecca:	2300      	movs	r3, #0
 800eccc:	e059      	b.n	800ed82 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ecd6:	1e5a      	subs	r2, r3, #1
 800ecd8:	4613      	mov	r3, r2
 800ecda:	005b      	lsls	r3, r3, #1
 800ecdc:	4413      	add	r3, r2
 800ecde:	009b      	lsls	r3, r3, #2
 800ece0:	4413      	add	r3, r2
 800ece2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ece4:	2301      	movs	r3, #1
 800ece6:	81fb      	strh	r3, [r7, #14]
 800ece8:	2300      	movs	r3, #0
 800ecea:	613b      	str	r3, [r7, #16]
 800ecec:	e033      	b.n	800ed56 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ecee:	4a27      	ldr	r2, [pc, #156]	; (800ed8c <cmp_lfn+0xdc>)
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	461a      	mov	r2, r3
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	f7fe ff69 	bl	800dbd4 <ld_word>
 800ed02:	4603      	mov	r3, r0
 800ed04:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ed06:	89fb      	ldrh	r3, [r7, #14]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d01a      	beq.n	800ed42 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	2bfe      	cmp	r3, #254	; 0xfe
 800ed10:	d812      	bhi.n	800ed38 <cmp_lfn+0x88>
 800ed12:	89bb      	ldrh	r3, [r7, #12]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f002 fd23 	bl	8011760 <ff_wtoupper>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	461c      	mov	r4, r3
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	1c5a      	adds	r2, r3, #1
 800ed22:	617a      	str	r2, [r7, #20]
 800ed24:	005b      	lsls	r3, r3, #1
 800ed26:	687a      	ldr	r2, [r7, #4]
 800ed28:	4413      	add	r3, r2
 800ed2a:	881b      	ldrh	r3, [r3, #0]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f002 fd17 	bl	8011760 <ff_wtoupper>
 800ed32:	4603      	mov	r3, r0
 800ed34:	429c      	cmp	r4, r3
 800ed36:	d001      	beq.n	800ed3c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ed38:	2300      	movs	r3, #0
 800ed3a:	e022      	b.n	800ed82 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ed3c:	89bb      	ldrh	r3, [r7, #12]
 800ed3e:	81fb      	strh	r3, [r7, #14]
 800ed40:	e006      	b.n	800ed50 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ed42:	89bb      	ldrh	r3, [r7, #12]
 800ed44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed48:	4293      	cmp	r3, r2
 800ed4a:	d001      	beq.n	800ed50 <cmp_lfn+0xa0>
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	e018      	b.n	800ed82 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ed50:	693b      	ldr	r3, [r7, #16]
 800ed52:	3301      	adds	r3, #1
 800ed54:	613b      	str	r3, [r7, #16]
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	2b0c      	cmp	r3, #12
 800ed5a:	d9c8      	bls.n	800ecee <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00b      	beq.n	800ed80 <cmp_lfn+0xd0>
 800ed68:	89fb      	ldrh	r3, [r7, #14]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d008      	beq.n	800ed80 <cmp_lfn+0xd0>
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	4413      	add	r3, r2
 800ed76:	881b      	ldrh	r3, [r3, #0]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d001      	beq.n	800ed80 <cmp_lfn+0xd0>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	e000      	b.n	800ed82 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ed80:	2301      	movs	r3, #1
}
 800ed82:	4618      	mov	r0, r3
 800ed84:	371c      	adds	r7, #28
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd90      	pop	{r4, r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	08017cac 	.word	0x08017cac

0800ed90 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	331a      	adds	r3, #26
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7fe ff18 	bl	800dbd4 <ld_word>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d001      	beq.n	800edae <pick_lfn+0x1e>
 800edaa:	2300      	movs	r3, #0
 800edac:	e04d      	b.n	800ee4a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800edae:	683b      	ldr	r3, [r7, #0]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edb6:	1e5a      	subs	r2, r3, #1
 800edb8:	4613      	mov	r3, r2
 800edba:	005b      	lsls	r3, r3, #1
 800edbc:	4413      	add	r3, r2
 800edbe:	009b      	lsls	r3, r3, #2
 800edc0:	4413      	add	r3, r2
 800edc2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800edc4:	2301      	movs	r3, #1
 800edc6:	81fb      	strh	r3, [r7, #14]
 800edc8:	2300      	movs	r3, #0
 800edca:	613b      	str	r3, [r7, #16]
 800edcc:	e028      	b.n	800ee20 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800edce:	4a21      	ldr	r2, [pc, #132]	; (800ee54 <pick_lfn+0xc4>)
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	4413      	add	r3, r2
 800edd4:	781b      	ldrb	r3, [r3, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	4413      	add	r3, r2
 800eddc:	4618      	mov	r0, r3
 800edde:	f7fe fef9 	bl	800dbd4 <ld_word>
 800ede2:	4603      	mov	r3, r0
 800ede4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ede6:	89fb      	ldrh	r3, [r7, #14]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00f      	beq.n	800ee0c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	2bfe      	cmp	r3, #254	; 0xfe
 800edf0:	d901      	bls.n	800edf6 <pick_lfn+0x66>
 800edf2:	2300      	movs	r3, #0
 800edf4:	e029      	b.n	800ee4a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800edf6:	89bb      	ldrh	r3, [r7, #12]
 800edf8:	81fb      	strh	r3, [r7, #14]
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	1c5a      	adds	r2, r3, #1
 800edfe:	617a      	str	r2, [r7, #20]
 800ee00:	005b      	lsls	r3, r3, #1
 800ee02:	687a      	ldr	r2, [r7, #4]
 800ee04:	4413      	add	r3, r2
 800ee06:	89fa      	ldrh	r2, [r7, #14]
 800ee08:	801a      	strh	r2, [r3, #0]
 800ee0a:	e006      	b.n	800ee1a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ee0c:	89bb      	ldrh	r3, [r7, #12]
 800ee0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d001      	beq.n	800ee1a <pick_lfn+0x8a>
 800ee16:	2300      	movs	r3, #0
 800ee18:	e017      	b.n	800ee4a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ee1a:	693b      	ldr	r3, [r7, #16]
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	613b      	str	r3, [r7, #16]
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	2b0c      	cmp	r3, #12
 800ee24:	d9d3      	bls.n	800edce <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	781b      	ldrb	r3, [r3, #0]
 800ee2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00a      	beq.n	800ee48 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ee32:	697b      	ldr	r3, [r7, #20]
 800ee34:	2bfe      	cmp	r3, #254	; 0xfe
 800ee36:	d901      	bls.n	800ee3c <pick_lfn+0xac>
 800ee38:	2300      	movs	r3, #0
 800ee3a:	e006      	b.n	800ee4a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ee3c:	697b      	ldr	r3, [r7, #20]
 800ee3e:	005b      	lsls	r3, r3, #1
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	4413      	add	r3, r2
 800ee44:	2200      	movs	r2, #0
 800ee46:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ee48:	2301      	movs	r3, #1
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3718      	adds	r7, #24
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	08017cac 	.word	0x08017cac

0800ee58 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	4611      	mov	r1, r2
 800ee64:	461a      	mov	r2, r3
 800ee66:	460b      	mov	r3, r1
 800ee68:	71fb      	strb	r3, [r7, #7]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ee6e:	68bb      	ldr	r3, [r7, #8]
 800ee70:	330d      	adds	r3, #13
 800ee72:	79ba      	ldrb	r2, [r7, #6]
 800ee74:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	330b      	adds	r3, #11
 800ee7a:	220f      	movs	r2, #15
 800ee7c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	330c      	adds	r3, #12
 800ee82:	2200      	movs	r2, #0
 800ee84:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	331a      	adds	r3, #26
 800ee8a:	2100      	movs	r1, #0
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe fedc 	bl	800dc4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ee92:	79fb      	ldrb	r3, [r7, #7]
 800ee94:	1e5a      	subs	r2, r3, #1
 800ee96:	4613      	mov	r3, r2
 800ee98:	005b      	lsls	r3, r3, #1
 800ee9a:	4413      	add	r3, r2
 800ee9c:	009b      	lsls	r3, r3, #2
 800ee9e:	4413      	add	r3, r2
 800eea0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800eea2:	2300      	movs	r3, #0
 800eea4:	82fb      	strh	r3, [r7, #22]
 800eea6:	2300      	movs	r3, #0
 800eea8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800eeaa:	8afb      	ldrh	r3, [r7, #22]
 800eeac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eeb0:	4293      	cmp	r3, r2
 800eeb2:	d007      	beq.n	800eec4 <put_lfn+0x6c>
 800eeb4:	69fb      	ldr	r3, [r7, #28]
 800eeb6:	1c5a      	adds	r2, r3, #1
 800eeb8:	61fa      	str	r2, [r7, #28]
 800eeba:	005b      	lsls	r3, r3, #1
 800eebc:	68fa      	ldr	r2, [r7, #12]
 800eebe:	4413      	add	r3, r2
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800eec4:	4a17      	ldr	r2, [pc, #92]	; (800ef24 <put_lfn+0xcc>)
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	4413      	add	r3, r2
 800eeca:	781b      	ldrb	r3, [r3, #0]
 800eecc:	461a      	mov	r2, r3
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	4413      	add	r3, r2
 800eed2:	8afa      	ldrh	r2, [r7, #22]
 800eed4:	4611      	mov	r1, r2
 800eed6:	4618      	mov	r0, r3
 800eed8:	f7fe feb7 	bl	800dc4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800eedc:	8afb      	ldrh	r3, [r7, #22]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d102      	bne.n	800eee8 <put_lfn+0x90>
 800eee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eee6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	3301      	adds	r3, #1
 800eeec:	61bb      	str	r3, [r7, #24]
 800eeee:	69bb      	ldr	r3, [r7, #24]
 800eef0:	2b0c      	cmp	r3, #12
 800eef2:	d9da      	bls.n	800eeaa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800eef4:	8afb      	ldrh	r3, [r7, #22]
 800eef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d006      	beq.n	800ef0c <put_lfn+0xb4>
 800eefe:	69fb      	ldr	r3, [r7, #28]
 800ef00:	005b      	lsls	r3, r3, #1
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	4413      	add	r3, r2
 800ef06:	881b      	ldrh	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d103      	bne.n	800ef14 <put_lfn+0xbc>
 800ef0c:	79fb      	ldrb	r3, [r7, #7]
 800ef0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef12:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ef14:	68bb      	ldr	r3, [r7, #8]
 800ef16:	79fa      	ldrb	r2, [r7, #7]
 800ef18:	701a      	strb	r2, [r3, #0]
}
 800ef1a:	bf00      	nop
 800ef1c:	3720      	adds	r7, #32
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	08017cac 	.word	0x08017cac

0800ef28 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b08c      	sub	sp, #48	; 0x30
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ef36:	220b      	movs	r2, #11
 800ef38:	68b9      	ldr	r1, [r7, #8]
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7fe fecc 	bl	800dcd8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	2b05      	cmp	r3, #5
 800ef44:	d92b      	bls.n	800ef9e <gen_numname+0x76>
		sr = seq;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ef4a:	e022      	b.n	800ef92 <gen_numname+0x6a>
			wc = *lfn++;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	1c9a      	adds	r2, r3, #2
 800ef50:	607a      	str	r2, [r7, #4]
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ef56:	2300      	movs	r3, #0
 800ef58:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef5a:	e017      	b.n	800ef8c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	005a      	lsls	r2, r3, #1
 800ef60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef62:	f003 0301 	and.w	r3, r3, #1
 800ef66:	4413      	add	r3, r2
 800ef68:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ef6a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ef6c:	085b      	lsrs	r3, r3, #1
 800ef6e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d005      	beq.n	800ef86 <gen_numname+0x5e>
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ef80:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ef84:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ef86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef88:	3301      	adds	r3, #1
 800ef8a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8e:	2b0f      	cmp	r3, #15
 800ef90:	d9e4      	bls.n	800ef5c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	881b      	ldrh	r3, [r3, #0]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1d8      	bne.n	800ef4c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800ef9a:	69fb      	ldr	r3, [r7, #28]
 800ef9c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ef9e:	2307      	movs	r3, #7
 800efa0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	f003 030f 	and.w	r3, r3, #15
 800efaa:	b2db      	uxtb	r3, r3
 800efac:	3330      	adds	r3, #48	; 0x30
 800efae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800efb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efb6:	2b39      	cmp	r3, #57	; 0x39
 800efb8:	d904      	bls.n	800efc4 <gen_numname+0x9c>
 800efba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800efbe:	3307      	adds	r3, #7
 800efc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800efc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efc6:	1e5a      	subs	r2, r3, #1
 800efc8:	62ba      	str	r2, [r7, #40]	; 0x28
 800efca:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800efce:	4413      	add	r3, r2
 800efd0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800efd4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	091b      	lsrs	r3, r3, #4
 800efdc:	603b      	str	r3, [r7, #0]
	} while (seq);
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d1de      	bne.n	800efa2 <gen_numname+0x7a>
	ns[i] = '~';
 800efe4:	f107 0214 	add.w	r2, r7, #20
 800efe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efea:	4413      	add	r3, r2
 800efec:	227e      	movs	r2, #126	; 0x7e
 800efee:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800eff0:	2300      	movs	r3, #0
 800eff2:	627b      	str	r3, [r7, #36]	; 0x24
 800eff4:	e002      	b.n	800effc <gen_numname+0xd4>
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	3301      	adds	r3, #1
 800effa:	627b      	str	r3, [r7, #36]	; 0x24
 800effc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800effe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f000:	429a      	cmp	r2, r3
 800f002:	d205      	bcs.n	800f010 <gen_numname+0xe8>
 800f004:	68fa      	ldr	r2, [r7, #12]
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	4413      	add	r3, r2
 800f00a:	781b      	ldrb	r3, [r3, #0]
 800f00c:	2b20      	cmp	r3, #32
 800f00e:	d1f2      	bne.n	800eff6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f012:	2b07      	cmp	r3, #7
 800f014:	d808      	bhi.n	800f028 <gen_numname+0x100>
 800f016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f018:	1c5a      	adds	r2, r3, #1
 800f01a:	62ba      	str	r2, [r7, #40]	; 0x28
 800f01c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f020:	4413      	add	r3, r2
 800f022:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f026:	e000      	b.n	800f02a <gen_numname+0x102>
 800f028:	2120      	movs	r1, #32
 800f02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f02c:	1c5a      	adds	r2, r3, #1
 800f02e:	627a      	str	r2, [r7, #36]	; 0x24
 800f030:	68fa      	ldr	r2, [r7, #12]
 800f032:	4413      	add	r3, r2
 800f034:	460a      	mov	r2, r1
 800f036:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f03a:	2b07      	cmp	r3, #7
 800f03c:	d9e8      	bls.n	800f010 <gen_numname+0xe8>
}
 800f03e:	bf00      	nop
 800f040:	3730      	adds	r7, #48	; 0x30
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}

0800f046 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f046:	b480      	push	{r7}
 800f048:	b085      	sub	sp, #20
 800f04a:	af00      	add	r7, sp, #0
 800f04c:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f04e:	2300      	movs	r3, #0
 800f050:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f052:	230b      	movs	r3, #11
 800f054:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	0852      	lsrs	r2, r2, #1
 800f05c:	01db      	lsls	r3, r3, #7
 800f05e:	4313      	orrs	r3, r2
 800f060:	b2da      	uxtb	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	1c59      	adds	r1, r3, #1
 800f066:	6079      	str	r1, [r7, #4]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	4413      	add	r3, r2
 800f06c:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	3b01      	subs	r3, #1
 800f072:	60bb      	str	r3, [r7, #8]
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d1ed      	bne.n	800f056 <sum_sfn+0x10>
	return sum;
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3714      	adds	r7, #20
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr

0800f088 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b086      	sub	sp, #24
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f092:	2304      	movs	r3, #4
 800f094:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f09c:	23ff      	movs	r3, #255	; 0xff
 800f09e:	757b      	strb	r3, [r7, #21]
 800f0a0:	23ff      	movs	r3, #255	; 0xff
 800f0a2:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f0a4:	e081      	b.n	800f1aa <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	69db      	ldr	r3, [r3, #28]
 800f0aa:	4619      	mov	r1, r3
 800f0ac:	6938      	ldr	r0, [r7, #16]
 800f0ae:	f7ff f841 	bl	800e134 <move_window>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f0b6:	7dfb      	ldrb	r3, [r7, #23]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d17c      	bne.n	800f1b6 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	6a1b      	ldr	r3, [r3, #32]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f0c4:	7dbb      	ldrb	r3, [r7, #22]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d102      	bne.n	800f0d0 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f0ca:	2304      	movs	r3, #4
 800f0cc:	75fb      	strb	r3, [r7, #23]
 800f0ce:	e077      	b.n	800f1c0 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6a1b      	ldr	r3, [r3, #32]
 800f0d4:	330b      	adds	r3, #11
 800f0d6:	781b      	ldrb	r3, [r3, #0]
 800f0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0dc:	73fb      	strb	r3, [r7, #15]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	7bfa      	ldrb	r2, [r7, #15]
 800f0e2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f0e4:	7dbb      	ldrb	r3, [r7, #22]
 800f0e6:	2be5      	cmp	r3, #229	; 0xe5
 800f0e8:	d00e      	beq.n	800f108 <dir_read+0x80>
 800f0ea:	7dbb      	ldrb	r3, [r7, #22]
 800f0ec:	2b2e      	cmp	r3, #46	; 0x2e
 800f0ee:	d00b      	beq.n	800f108 <dir_read+0x80>
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	f023 0320 	bic.w	r3, r3, #32
 800f0f6:	2b08      	cmp	r3, #8
 800f0f8:	bf0c      	ite	eq
 800f0fa:	2301      	moveq	r3, #1
 800f0fc:	2300      	movne	r3, #0
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	461a      	mov	r2, r3
 800f102:	683b      	ldr	r3, [r7, #0]
 800f104:	4293      	cmp	r3, r2
 800f106:	d002      	beq.n	800f10e <dir_read+0x86>
				ord = 0xFF;
 800f108:	23ff      	movs	r3, #255	; 0xff
 800f10a:	757b      	strb	r3, [r7, #21]
 800f10c:	e044      	b.n	800f198 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	2b0f      	cmp	r3, #15
 800f112:	d12f      	bne.n	800f174 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f114:	7dbb      	ldrb	r3, [r7, #22]
 800f116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00d      	beq.n	800f13a <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	6a1b      	ldr	r3, [r3, #32]
 800f122:	7b5b      	ldrb	r3, [r3, #13]
 800f124:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f126:	7dbb      	ldrb	r3, [r7, #22]
 800f128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f12c:	75bb      	strb	r3, [r7, #22]
 800f12e:	7dbb      	ldrb	r3, [r7, #22]
 800f130:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	695a      	ldr	r2, [r3, #20]
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f13a:	7dba      	ldrb	r2, [r7, #22]
 800f13c:	7d7b      	ldrb	r3, [r7, #21]
 800f13e:	429a      	cmp	r2, r3
 800f140:	d115      	bne.n	800f16e <dir_read+0xe6>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6a1b      	ldr	r3, [r3, #32]
 800f146:	330d      	adds	r3, #13
 800f148:	781b      	ldrb	r3, [r3, #0]
 800f14a:	7d3a      	ldrb	r2, [r7, #20]
 800f14c:	429a      	cmp	r2, r3
 800f14e:	d10e      	bne.n	800f16e <dir_read+0xe6>
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	691a      	ldr	r2, [r3, #16]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a1b      	ldr	r3, [r3, #32]
 800f158:	4619      	mov	r1, r3
 800f15a:	4610      	mov	r0, r2
 800f15c:	f7ff fe18 	bl	800ed90 <pick_lfn>
 800f160:	4603      	mov	r3, r0
 800f162:	2b00      	cmp	r3, #0
 800f164:	d003      	beq.n	800f16e <dir_read+0xe6>
 800f166:	7d7b      	ldrb	r3, [r7, #21]
 800f168:	3b01      	subs	r3, #1
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	e000      	b.n	800f170 <dir_read+0xe8>
 800f16e:	23ff      	movs	r3, #255	; 0xff
 800f170:	757b      	strb	r3, [r7, #21]
 800f172:	e011      	b.n	800f198 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f174:	7d7b      	ldrb	r3, [r7, #21]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d109      	bne.n	800f18e <dir_read+0x106>
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6a1b      	ldr	r3, [r3, #32]
 800f17e:	4618      	mov	r0, r3
 800f180:	f7ff ff61 	bl	800f046 <sum_sfn>
 800f184:	4603      	mov	r3, r0
 800f186:	461a      	mov	r2, r3
 800f188:	7d3b      	ldrb	r3, [r7, #20]
 800f18a:	4293      	cmp	r3, r2
 800f18c:	d015      	beq.n	800f1ba <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f04f 32ff 	mov.w	r2, #4294967295
 800f194:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f196:	e010      	b.n	800f1ba <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f198:	2100      	movs	r1, #0
 800f19a:	6878      	ldr	r0, [r7, #4]
 800f19c:	f7ff fc2c 	bl	800e9f8 <dir_next>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d109      	bne.n	800f1be <dir_read+0x136>
	while (dp->sect) {
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	69db      	ldr	r3, [r3, #28]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	f47f af79 	bne.w	800f0a6 <dir_read+0x1e>
 800f1b4:	e004      	b.n	800f1c0 <dir_read+0x138>
		if (res != FR_OK) break;
 800f1b6:	bf00      	nop
 800f1b8:	e002      	b.n	800f1c0 <dir_read+0x138>
					break;
 800f1ba:	bf00      	nop
 800f1bc:	e000      	b.n	800f1c0 <dir_read+0x138>
		if (res != FR_OK) break;
 800f1be:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f1c0:	7dfb      	ldrb	r3, [r7, #23]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <dir_read+0x144>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	61da      	str	r2, [r3, #28]
	return res;
 800f1cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3718      	adds	r7, #24
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}

0800f1d6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f1d6:	b580      	push	{r7, lr}
 800f1d8:	b086      	sub	sp, #24
 800f1da:	af00      	add	r7, sp, #0
 800f1dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f7ff fb7d 	bl	800e8e6 <dir_sdi>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f1f0:	7dfb      	ldrb	r3, [r7, #23]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d001      	beq.n	800f1fa <dir_find+0x24>
 800f1f6:	7dfb      	ldrb	r3, [r7, #23]
 800f1f8:	e0a9      	b.n	800f34e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f1fa:	23ff      	movs	r3, #255	; 0xff
 800f1fc:	753b      	strb	r3, [r7, #20]
 800f1fe:	7d3b      	ldrb	r3, [r7, #20]
 800f200:	757b      	strb	r3, [r7, #21]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f04f 32ff 	mov.w	r2, #4294967295
 800f208:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	69db      	ldr	r3, [r3, #28]
 800f20e:	4619      	mov	r1, r3
 800f210:	6938      	ldr	r0, [r7, #16]
 800f212:	f7fe ff8f 	bl	800e134 <move_window>
 800f216:	4603      	mov	r3, r0
 800f218:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f21a:	7dfb      	ldrb	r3, [r7, #23]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f040 8090 	bne.w	800f342 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6a1b      	ldr	r3, [r3, #32]
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f22a:	7dbb      	ldrb	r3, [r7, #22]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d102      	bne.n	800f236 <dir_find+0x60>
 800f230:	2304      	movs	r3, #4
 800f232:	75fb      	strb	r3, [r7, #23]
 800f234:	e08a      	b.n	800f34c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	6a1b      	ldr	r3, [r3, #32]
 800f23a:	330b      	adds	r3, #11
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f242:	73fb      	strb	r3, [r7, #15]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	7bfa      	ldrb	r2, [r7, #15]
 800f248:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f24a:	7dbb      	ldrb	r3, [r7, #22]
 800f24c:	2be5      	cmp	r3, #229	; 0xe5
 800f24e:	d007      	beq.n	800f260 <dir_find+0x8a>
 800f250:	7bfb      	ldrb	r3, [r7, #15]
 800f252:	f003 0308 	and.w	r3, r3, #8
 800f256:	2b00      	cmp	r3, #0
 800f258:	d009      	beq.n	800f26e <dir_find+0x98>
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
 800f25c:	2b0f      	cmp	r3, #15
 800f25e:	d006      	beq.n	800f26e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f260:	23ff      	movs	r3, #255	; 0xff
 800f262:	757b      	strb	r3, [r7, #21]
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f04f 32ff 	mov.w	r2, #4294967295
 800f26a:	631a      	str	r2, [r3, #48]	; 0x30
 800f26c:	e05e      	b.n	800f32c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f26e:	7bfb      	ldrb	r3, [r7, #15]
 800f270:	2b0f      	cmp	r3, #15
 800f272:	d136      	bne.n	800f2e2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d154      	bne.n	800f32c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f282:	7dbb      	ldrb	r3, [r7, #22]
 800f284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00d      	beq.n	800f2a8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6a1b      	ldr	r3, [r3, #32]
 800f290:	7b5b      	ldrb	r3, [r3, #13]
 800f292:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f294:	7dbb      	ldrb	r3, [r7, #22]
 800f296:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f29a:	75bb      	strb	r3, [r7, #22]
 800f29c:	7dbb      	ldrb	r3, [r7, #22]
 800f29e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	695a      	ldr	r2, [r3, #20]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f2a8:	7dba      	ldrb	r2, [r7, #22]
 800f2aa:	7d7b      	ldrb	r3, [r7, #21]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	d115      	bne.n	800f2dc <dir_find+0x106>
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	6a1b      	ldr	r3, [r3, #32]
 800f2b4:	330d      	adds	r3, #13
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	7d3a      	ldrb	r2, [r7, #20]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d10e      	bne.n	800f2dc <dir_find+0x106>
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	691a      	ldr	r2, [r3, #16]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6a1b      	ldr	r3, [r3, #32]
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	4610      	mov	r0, r2
 800f2ca:	f7ff fcf1 	bl	800ecb0 <cmp_lfn>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d003      	beq.n	800f2dc <dir_find+0x106>
 800f2d4:	7d7b      	ldrb	r3, [r7, #21]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	e000      	b.n	800f2de <dir_find+0x108>
 800f2dc:	23ff      	movs	r3, #255	; 0xff
 800f2de:	757b      	strb	r3, [r7, #21]
 800f2e0:	e024      	b.n	800f32c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f2e2:	7d7b      	ldrb	r3, [r7, #21]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d109      	bne.n	800f2fc <dir_find+0x126>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6a1b      	ldr	r3, [r3, #32]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff feaa 	bl	800f046 <sum_sfn>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	7d3b      	ldrb	r3, [r7, #20]
 800f2f8:	4293      	cmp	r3, r2
 800f2fa:	d024      	beq.n	800f346 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f302:	f003 0301 	and.w	r3, r3, #1
 800f306:	2b00      	cmp	r3, #0
 800f308:	d10a      	bne.n	800f320 <dir_find+0x14a>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a18      	ldr	r0, [r3, #32]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	3324      	adds	r3, #36	; 0x24
 800f312:	220b      	movs	r2, #11
 800f314:	4619      	mov	r1, r3
 800f316:	f7fe fd1a 	bl	800dd4e <mem_cmp>
 800f31a:	4603      	mov	r3, r0
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d014      	beq.n	800f34a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f320:	23ff      	movs	r3, #255	; 0xff
 800f322:	757b      	strb	r3, [r7, #21]
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f04f 32ff 	mov.w	r2, #4294967295
 800f32a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f32c:	2100      	movs	r1, #0
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f7ff fb62 	bl	800e9f8 <dir_next>
 800f334:	4603      	mov	r3, r0
 800f336:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f338:	7dfb      	ldrb	r3, [r7, #23]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	f43f af65 	beq.w	800f20a <dir_find+0x34>
 800f340:	e004      	b.n	800f34c <dir_find+0x176>
		if (res != FR_OK) break;
 800f342:	bf00      	nop
 800f344:	e002      	b.n	800f34c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f346:	bf00      	nop
 800f348:	e000      	b.n	800f34c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f34a:	bf00      	nop

	return res;
 800f34c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f34e:	4618      	mov	r0, r3
 800f350:	3718      	adds	r7, #24
 800f352:	46bd      	mov	sp, r7
 800f354:	bd80      	pop	{r7, pc}
	...

0800f358 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b08c      	sub	sp, #48	; 0x30
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f36c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f370:	2b00      	cmp	r3, #0
 800f372:	d001      	beq.n	800f378 <dir_register+0x20>
 800f374:	2306      	movs	r3, #6
 800f376:	e0e0      	b.n	800f53a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f378:	2300      	movs	r3, #0
 800f37a:	627b      	str	r3, [r7, #36]	; 0x24
 800f37c:	e002      	b.n	800f384 <dir_register+0x2c>
 800f37e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f380:	3301      	adds	r3, #1
 800f382:	627b      	str	r3, [r7, #36]	; 0x24
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	691a      	ldr	r2, [r3, #16]
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	005b      	lsls	r3, r3, #1
 800f38c:	4413      	add	r3, r2
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d1f4      	bne.n	800f37e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f39a:	f107 030c 	add.w	r3, r7, #12
 800f39e:	220c      	movs	r2, #12
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7fe fc99 	bl	800dcd8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f3a6:	7dfb      	ldrb	r3, [r7, #23]
 800f3a8:	f003 0301 	and.w	r3, r3, #1
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d032      	beq.n	800f416 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	2240      	movs	r2, #64	; 0x40
 800f3b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3bc:	e016      	b.n	800f3ec <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	691a      	ldr	r2, [r3, #16]
 800f3c8:	f107 010c 	add.w	r1, r7, #12
 800f3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ce:	f7ff fdab 	bl	800ef28 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7ff feff 	bl	800f1d6 <dir_find>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f3de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d106      	bne.n	800f3f4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f3e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3e8:	3301      	adds	r3, #1
 800f3ea:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ee:	2b63      	cmp	r3, #99	; 0x63
 800f3f0:	d9e5      	bls.n	800f3be <dir_register+0x66>
 800f3f2:	e000      	b.n	800f3f6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f3f4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	2b64      	cmp	r3, #100	; 0x64
 800f3fa:	d101      	bne.n	800f400 <dir_register+0xa8>
 800f3fc:	2307      	movs	r3, #7
 800f3fe:	e09c      	b.n	800f53a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f404:	2b04      	cmp	r3, #4
 800f406:	d002      	beq.n	800f40e <dir_register+0xb6>
 800f408:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f40c:	e095      	b.n	800f53a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f40e:	7dfa      	ldrb	r2, [r7, #23]
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f416:	7dfb      	ldrb	r3, [r7, #23]
 800f418:	f003 0302 	and.w	r3, r3, #2
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d007      	beq.n	800f430 <dir_register+0xd8>
 800f420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f422:	330c      	adds	r3, #12
 800f424:	4a47      	ldr	r2, [pc, #284]	; (800f544 <dir_register+0x1ec>)
 800f426:	fba2 2303 	umull	r2, r3, r2, r3
 800f42a:	089b      	lsrs	r3, r3, #2
 800f42c:	3301      	adds	r3, #1
 800f42e:	e000      	b.n	800f432 <dir_register+0xda>
 800f430:	2301      	movs	r3, #1
 800f432:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f434:	6a39      	ldr	r1, [r7, #32]
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f7ff fbb4 	bl	800eba4 <dir_alloc>
 800f43c:	4603      	mov	r3, r0
 800f43e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f446:	2b00      	cmp	r3, #0
 800f448:	d148      	bne.n	800f4dc <dir_register+0x184>
 800f44a:	6a3b      	ldr	r3, [r7, #32]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	623b      	str	r3, [r7, #32]
 800f450:	6a3b      	ldr	r3, [r7, #32]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d042      	beq.n	800f4dc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	695a      	ldr	r2, [r3, #20]
 800f45a:	6a3b      	ldr	r3, [r7, #32]
 800f45c:	015b      	lsls	r3, r3, #5
 800f45e:	1ad3      	subs	r3, r2, r3
 800f460:	4619      	mov	r1, r3
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7ff fa3f 	bl	800e8e6 <dir_sdi>
 800f468:	4603      	mov	r3, r0
 800f46a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f46e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f472:	2b00      	cmp	r3, #0
 800f474:	d132      	bne.n	800f4dc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	3324      	adds	r3, #36	; 0x24
 800f47a:	4618      	mov	r0, r3
 800f47c:	f7ff fde3 	bl	800f046 <sum_sfn>
 800f480:	4603      	mov	r3, r0
 800f482:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	69db      	ldr	r3, [r3, #28]
 800f488:	4619      	mov	r1, r3
 800f48a:	69f8      	ldr	r0, [r7, #28]
 800f48c:	f7fe fe52 	bl	800e134 <move_window>
 800f490:	4603      	mov	r3, r0
 800f492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d11d      	bne.n	800f4da <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	6918      	ldr	r0, [r3, #16]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6a19      	ldr	r1, [r3, #32]
 800f4a6:	6a3b      	ldr	r3, [r7, #32]
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	7efb      	ldrb	r3, [r7, #27]
 800f4ac:	f7ff fcd4 	bl	800ee58 <put_lfn>
				fs->wflag = 1;
 800f4b0:	69fb      	ldr	r3, [r7, #28]
 800f4b2:	2201      	movs	r2, #1
 800f4b4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f4b6:	2100      	movs	r1, #0
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7ff fa9d 	bl	800e9f8 <dir_next>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f4c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d107      	bne.n	800f4dc <dir_register+0x184>
 800f4cc:	6a3b      	ldr	r3, [r7, #32]
 800f4ce:	3b01      	subs	r3, #1
 800f4d0:	623b      	str	r3, [r7, #32]
 800f4d2:	6a3b      	ldr	r3, [r7, #32]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d1d5      	bne.n	800f484 <dir_register+0x12c>
 800f4d8:	e000      	b.n	800f4dc <dir_register+0x184>
				if (res != FR_OK) break;
 800f4da:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f4dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d128      	bne.n	800f536 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	69db      	ldr	r3, [r3, #28]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	69f8      	ldr	r0, [r7, #28]
 800f4ec:	f7fe fe22 	bl	800e134 <move_window>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f4f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d11b      	bne.n	800f536 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	6a1b      	ldr	r3, [r3, #32]
 800f502:	2220      	movs	r2, #32
 800f504:	2100      	movs	r1, #0
 800f506:	4618      	mov	r0, r3
 800f508:	f7fe fc07 	bl	800dd1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6a18      	ldr	r0, [r3, #32]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	3324      	adds	r3, #36	; 0x24
 800f514:	220b      	movs	r2, #11
 800f516:	4619      	mov	r1, r3
 800f518:	f7fe fbde 	bl	800dcd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	330c      	adds	r3, #12
 800f528:	f002 0218 	and.w	r2, r2, #24
 800f52c:	b2d2      	uxtb	r2, r2
 800f52e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	2201      	movs	r2, #1
 800f534:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3730      	adds	r7, #48	; 0x30
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	4ec4ec4f 	.word	0x4ec4ec4f

0800f548 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b086      	sub	sp, #24
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	695b      	ldr	r3, [r3, #20]
 800f55a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f560:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f564:	d007      	beq.n	800f576 <dir_remove+0x2e>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f56a:	4619      	mov	r1, r3
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff f9ba 	bl	800e8e6 <dir_sdi>
 800f572:	4603      	mov	r3, r0
 800f574:	e000      	b.n	800f578 <dir_remove+0x30>
 800f576:	2300      	movs	r3, #0
 800f578:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f57a:	7dfb      	ldrb	r3, [r7, #23]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d128      	bne.n	800f5d2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	4619      	mov	r1, r3
 800f586:	6938      	ldr	r0, [r7, #16]
 800f588:	f7fe fdd4 	bl	800e134 <move_window>
 800f58c:	4603      	mov	r3, r0
 800f58e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f590:	7dfb      	ldrb	r3, [r7, #23]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d115      	bne.n	800f5c2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	6a1b      	ldr	r3, [r3, #32]
 800f59a:	22e5      	movs	r2, #229	; 0xe5
 800f59c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	695b      	ldr	r3, [r3, #20]
 800f5a8:	68fa      	ldr	r2, [r7, #12]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d90b      	bls.n	800f5c6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f7ff fa21 	bl	800e9f8 <dir_next>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800f5ba:	7dfb      	ldrb	r3, [r7, #23]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d0df      	beq.n	800f580 <dir_remove+0x38>
 800f5c0:	e002      	b.n	800f5c8 <dir_remove+0x80>
			if (res != FR_OK) break;
 800f5c2:	bf00      	nop
 800f5c4:	e000      	b.n	800f5c8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800f5c6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800f5c8:	7dfb      	ldrb	r3, [r7, #23]
 800f5ca:	2b04      	cmp	r3, #4
 800f5cc:	d101      	bne.n	800f5d2 <dir_remove+0x8a>
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800f5d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3718      	adds	r7, #24
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b08a      	sub	sp, #40	; 0x28
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	613b      	str	r3, [r7, #16]
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	691b      	ldr	r3, [r3, #16]
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	617b      	str	r3, [r7, #20]
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	1c5a      	adds	r2, r3, #1
 800f600:	61ba      	str	r2, [r7, #24]
 800f602:	693a      	ldr	r2, [r7, #16]
 800f604:	4413      	add	r3, r2
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f60a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f60c:	2b1f      	cmp	r3, #31
 800f60e:	d940      	bls.n	800f692 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f612:	2b2f      	cmp	r3, #47	; 0x2f
 800f614:	d006      	beq.n	800f624 <create_name+0x48>
 800f616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f618:	2b5c      	cmp	r3, #92	; 0x5c
 800f61a:	d110      	bne.n	800f63e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f61c:	e002      	b.n	800f624 <create_name+0x48>
 800f61e:	69bb      	ldr	r3, [r7, #24]
 800f620:	3301      	adds	r3, #1
 800f622:	61bb      	str	r3, [r7, #24]
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	4413      	add	r3, r2
 800f62a:	781b      	ldrb	r3, [r3, #0]
 800f62c:	2b2f      	cmp	r3, #47	; 0x2f
 800f62e:	d0f6      	beq.n	800f61e <create_name+0x42>
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	69bb      	ldr	r3, [r7, #24]
 800f634:	4413      	add	r3, r2
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	2b5c      	cmp	r3, #92	; 0x5c
 800f63a:	d0f0      	beq.n	800f61e <create_name+0x42>
			break;
 800f63c:	e02a      	b.n	800f694 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	2bfe      	cmp	r3, #254	; 0xfe
 800f642:	d901      	bls.n	800f648 <create_name+0x6c>
 800f644:	2306      	movs	r3, #6
 800f646:	e1c9      	b.n	800f9dc <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f648:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f64e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f650:	2101      	movs	r1, #1
 800f652:	4618      	mov	r0, r3
 800f654:	f002 f848 	bl	80116e8 <ff_convert>
 800f658:	4603      	mov	r3, r0
 800f65a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f65c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d101      	bne.n	800f666 <create_name+0x8a>
 800f662:	2306      	movs	r3, #6
 800f664:	e1ba      	b.n	800f9dc <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f666:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f668:	2b7f      	cmp	r3, #127	; 0x7f
 800f66a:	d809      	bhi.n	800f680 <create_name+0xa4>
 800f66c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f66e:	4619      	mov	r1, r3
 800f670:	48a5      	ldr	r0, [pc, #660]	; (800f908 <create_name+0x32c>)
 800f672:	f7fe fb93 	bl	800dd9c <chk_chr>
 800f676:	4603      	mov	r3, r0
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d001      	beq.n	800f680 <create_name+0xa4>
 800f67c:	2306      	movs	r3, #6
 800f67e:	e1ad      	b.n	800f9dc <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800f680:	697b      	ldr	r3, [r7, #20]
 800f682:	1c5a      	adds	r2, r3, #1
 800f684:	617a      	str	r2, [r7, #20]
 800f686:	005b      	lsls	r3, r3, #1
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	4413      	add	r3, r2
 800f68c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f68e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f690:	e7b4      	b.n	800f5fc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f692:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f694:	693a      	ldr	r2, [r7, #16]
 800f696:	69bb      	ldr	r3, [r7, #24]
 800f698:	441a      	add	r2, r3
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6a0:	2b1f      	cmp	r3, #31
 800f6a2:	d801      	bhi.n	800f6a8 <create_name+0xcc>
 800f6a4:	2304      	movs	r3, #4
 800f6a6:	e000      	b.n	800f6aa <create_name+0xce>
 800f6a8:	2300      	movs	r3, #0
 800f6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800f6ae:	697b      	ldr	r3, [r7, #20]
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d109      	bne.n	800f6c8 <create_name+0xec>
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6ba:	3b01      	subs	r3, #1
 800f6bc:	005b      	lsls	r3, r3, #1
 800f6be:	68fa      	ldr	r2, [r7, #12]
 800f6c0:	4413      	add	r3, r2
 800f6c2:	881b      	ldrh	r3, [r3, #0]
 800f6c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f6c6:	d016      	beq.n	800f6f6 <create_name+0x11a>
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	2b02      	cmp	r3, #2
 800f6cc:	d14e      	bne.n	800f76c <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800f6ce:	697b      	ldr	r3, [r7, #20]
 800f6d0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6d4:	3b01      	subs	r3, #1
 800f6d6:	005b      	lsls	r3, r3, #1
 800f6d8:	68fa      	ldr	r2, [r7, #12]
 800f6da:	4413      	add	r3, r2
 800f6dc:	881b      	ldrh	r3, [r3, #0]
 800f6de:	2b2e      	cmp	r3, #46	; 0x2e
 800f6e0:	d144      	bne.n	800f76c <create_name+0x190>
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f6e8:	3b02      	subs	r3, #2
 800f6ea:	005b      	lsls	r3, r3, #1
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	4413      	add	r3, r2
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	2b2e      	cmp	r3, #46	; 0x2e
 800f6f4:	d13a      	bne.n	800f76c <create_name+0x190>
		lfn[di] = 0;
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	005b      	lsls	r3, r3, #1
 800f6fa:	68fa      	ldr	r2, [r7, #12]
 800f6fc:	4413      	add	r3, r2
 800f6fe:	2200      	movs	r2, #0
 800f700:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f702:	2300      	movs	r3, #0
 800f704:	623b      	str	r3, [r7, #32]
 800f706:	e00f      	b.n	800f728 <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800f708:	6a3a      	ldr	r2, [r7, #32]
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d201      	bcs.n	800f714 <create_name+0x138>
 800f710:	212e      	movs	r1, #46	; 0x2e
 800f712:	e000      	b.n	800f716 <create_name+0x13a>
 800f714:	2120      	movs	r1, #32
 800f716:	687a      	ldr	r2, [r7, #4]
 800f718:	6a3b      	ldr	r3, [r7, #32]
 800f71a:	4413      	add	r3, r2
 800f71c:	3324      	adds	r3, #36	; 0x24
 800f71e:	460a      	mov	r2, r1
 800f720:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800f722:	6a3b      	ldr	r3, [r7, #32]
 800f724:	3301      	adds	r3, #1
 800f726:	623b      	str	r3, [r7, #32]
 800f728:	6a3b      	ldr	r3, [r7, #32]
 800f72a:	2b0a      	cmp	r3, #10
 800f72c:	d9ec      	bls.n	800f708 <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800f72e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f732:	f043 0320 	orr.w	r3, r3, #32
 800f736:	b2d9      	uxtb	r1, r3
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	6a3b      	ldr	r3, [r7, #32]
 800f73c:	4413      	add	r3, r2
 800f73e:	3324      	adds	r3, #36	; 0x24
 800f740:	460a      	mov	r2, r1
 800f742:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800f744:	2300      	movs	r3, #0
 800f746:	e149      	b.n	800f9dc <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f74e:	3b01      	subs	r3, #1
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	68fa      	ldr	r2, [r7, #12]
 800f754:	4413      	add	r3, r2
 800f756:	881b      	ldrh	r3, [r3, #0]
 800f758:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f75a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f75c:	2b20      	cmp	r3, #32
 800f75e:	d002      	beq.n	800f766 <create_name+0x18a>
 800f760:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f762:	2b2e      	cmp	r3, #46	; 0x2e
 800f764:	d106      	bne.n	800f774 <create_name+0x198>
		di--;
 800f766:	697b      	ldr	r3, [r7, #20]
 800f768:	3b01      	subs	r3, #1
 800f76a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d1ea      	bne.n	800f748 <create_name+0x16c>
 800f772:	e000      	b.n	800f776 <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800f774:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	005b      	lsls	r3, r3, #1
 800f77a:	68fa      	ldr	r2, [r7, #12]
 800f77c:	4413      	add	r3, r2
 800f77e:	2200      	movs	r2, #0
 800f780:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d101      	bne.n	800f78c <create_name+0x1b0>
 800f788:	2306      	movs	r3, #6
 800f78a:	e127      	b.n	800f9dc <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	3324      	adds	r3, #36	; 0x24
 800f790:	220b      	movs	r2, #11
 800f792:	2120      	movs	r1, #32
 800f794:	4618      	mov	r0, r3
 800f796:	f7fe fac0 	bl	800dd1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f79a:	2300      	movs	r3, #0
 800f79c:	61bb      	str	r3, [r7, #24]
 800f79e:	e002      	b.n	800f7a6 <create_name+0x1ca>
 800f7a0:	69bb      	ldr	r3, [r7, #24]
 800f7a2:	3301      	adds	r3, #1
 800f7a4:	61bb      	str	r3, [r7, #24]
 800f7a6:	69bb      	ldr	r3, [r7, #24]
 800f7a8:	005b      	lsls	r3, r3, #1
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4413      	add	r3, r2
 800f7ae:	881b      	ldrh	r3, [r3, #0]
 800f7b0:	2b20      	cmp	r3, #32
 800f7b2:	d0f5      	beq.n	800f7a0 <create_name+0x1c4>
 800f7b4:	69bb      	ldr	r3, [r7, #24]
 800f7b6:	005b      	lsls	r3, r3, #1
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	2b2e      	cmp	r3, #46	; 0x2e
 800f7c0:	d0ee      	beq.n	800f7a0 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d009      	beq.n	800f7dc <create_name+0x200>
 800f7c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7cc:	f043 0303 	orr.w	r3, r3, #3
 800f7d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f7d4:	e002      	b.n	800f7dc <create_name+0x200>
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	3b01      	subs	r3, #1
 800f7da:	617b      	str	r3, [r7, #20]
 800f7dc:	697b      	ldr	r3, [r7, #20]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d009      	beq.n	800f7f6 <create_name+0x21a>
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f7e8:	3b01      	subs	r3, #1
 800f7ea:	005b      	lsls	r3, r3, #1
 800f7ec:	68fa      	ldr	r2, [r7, #12]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	2b2e      	cmp	r3, #46	; 0x2e
 800f7f4:	d1ef      	bne.n	800f7d6 <create_name+0x1fa>

	i = b = 0; ni = 8;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	623b      	str	r3, [r7, #32]
 800f800:	2308      	movs	r3, #8
 800f802:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f804:	69bb      	ldr	r3, [r7, #24]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	61ba      	str	r2, [r7, #24]
 800f80a:	005b      	lsls	r3, r3, #1
 800f80c:	68fa      	ldr	r2, [r7, #12]
 800f80e:	4413      	add	r3, r2
 800f810:	881b      	ldrh	r3, [r3, #0]
 800f812:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f814:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f816:	2b00      	cmp	r3, #0
 800f818:	f000 8096 	beq.w	800f948 <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f81c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f81e:	2b20      	cmp	r3, #32
 800f820:	d006      	beq.n	800f830 <create_name+0x254>
 800f822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f824:	2b2e      	cmp	r3, #46	; 0x2e
 800f826:	d10a      	bne.n	800f83e <create_name+0x262>
 800f828:	69ba      	ldr	r2, [r7, #24]
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d006      	beq.n	800f83e <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800f830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f834:	f043 0303 	orr.w	r3, r3, #3
 800f838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f83c:	e083      	b.n	800f946 <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f83e:	6a3a      	ldr	r2, [r7, #32]
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	429a      	cmp	r2, r3
 800f844:	d203      	bcs.n	800f84e <create_name+0x272>
 800f846:	69ba      	ldr	r2, [r7, #24]
 800f848:	697b      	ldr	r3, [r7, #20]
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d123      	bne.n	800f896 <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800f84e:	69fb      	ldr	r3, [r7, #28]
 800f850:	2b0b      	cmp	r3, #11
 800f852:	d106      	bne.n	800f862 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800f854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f858:	f043 0303 	orr.w	r3, r3, #3
 800f85c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f860:	e075      	b.n	800f94e <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f862:	69ba      	ldr	r2, [r7, #24]
 800f864:	697b      	ldr	r3, [r7, #20]
 800f866:	429a      	cmp	r2, r3
 800f868:	d005      	beq.n	800f876 <create_name+0x29a>
 800f86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f86e:	f043 0303 	orr.w	r3, r3, #3
 800f872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f876:	69ba      	ldr	r2, [r7, #24]
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	d866      	bhi.n	800f94c <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	61bb      	str	r3, [r7, #24]
 800f882:	2308      	movs	r3, #8
 800f884:	623b      	str	r3, [r7, #32]
 800f886:	230b      	movs	r3, #11
 800f888:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f88a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f894:	e057      	b.n	800f946 <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f898:	2b7f      	cmp	r3, #127	; 0x7f
 800f89a:	d914      	bls.n	800f8c6 <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f89c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f89e:	2100      	movs	r1, #0
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f001 ff21 	bl	80116e8 <ff_convert>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f8aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d004      	beq.n	800f8ba <create_name+0x2de>
 800f8b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8b2:	3b80      	subs	r3, #128	; 0x80
 800f8b4:	4a15      	ldr	r2, [pc, #84]	; (800f90c <create_name+0x330>)
 800f8b6:	5cd3      	ldrb	r3, [r2, r3]
 800f8b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f8ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8be:	f043 0302 	orr.w	r3, r3, #2
 800f8c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f8c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d007      	beq.n	800f8dc <create_name+0x300>
 800f8cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	480f      	ldr	r0, [pc, #60]	; (800f910 <create_name+0x334>)
 800f8d2:	f7fe fa63 	bl	800dd9c <chk_chr>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d008      	beq.n	800f8ee <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f8dc:	235f      	movs	r3, #95	; 0x5f
 800f8de:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f8e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f8e4:	f043 0303 	orr.w	r3, r3, #3
 800f8e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f8ec:	e021      	b.n	800f932 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f8ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8f0:	2b40      	cmp	r3, #64	; 0x40
 800f8f2:	d90f      	bls.n	800f914 <create_name+0x338>
 800f8f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f8f6:	2b5a      	cmp	r3, #90	; 0x5a
 800f8f8:	d80c      	bhi.n	800f914 <create_name+0x338>
					b |= 2;
 800f8fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f8fe:	f043 0302 	orr.w	r3, r3, #2
 800f902:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f906:	e014      	b.n	800f932 <create_name+0x356>
 800f908:	08017ba4 	.word	0x08017ba4
 800f90c:	08017c2c 	.word	0x08017c2c
 800f910:	08017bb0 	.word	0x08017bb0
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f914:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f916:	2b60      	cmp	r3, #96	; 0x60
 800f918:	d90b      	bls.n	800f932 <create_name+0x356>
 800f91a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f91c:	2b7a      	cmp	r3, #122	; 0x7a
 800f91e:	d808      	bhi.n	800f932 <create_name+0x356>
						b |= 1; w -= 0x20;
 800f920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f924:	f043 0301 	orr.w	r3, r3, #1
 800f928:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f92c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f92e:	3b20      	subs	r3, #32
 800f930:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f932:	6a3b      	ldr	r3, [r7, #32]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	623a      	str	r2, [r7, #32]
 800f938:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f93a:	b2d1      	uxtb	r1, r2
 800f93c:	687a      	ldr	r2, [r7, #4]
 800f93e:	4413      	add	r3, r2
 800f940:	460a      	mov	r2, r1
 800f942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f946:	e75d      	b.n	800f804 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800f948:	bf00      	nop
 800f94a:	e000      	b.n	800f94e <create_name+0x372>
			if (si > di) break;			/* No extension */
 800f94c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f954:	2be5      	cmp	r3, #229	; 0xe5
 800f956:	d103      	bne.n	800f960 <create_name+0x384>
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2205      	movs	r2, #5
 800f95c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	2b08      	cmp	r3, #8
 800f964:	d104      	bne.n	800f970 <create_name+0x394>
 800f966:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f96a:	009b      	lsls	r3, r3, #2
 800f96c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f974:	f003 030c 	and.w	r3, r3, #12
 800f978:	2b0c      	cmp	r3, #12
 800f97a:	d005      	beq.n	800f988 <create_name+0x3ac>
 800f97c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f980:	f003 0303 	and.w	r3, r3, #3
 800f984:	2b03      	cmp	r3, #3
 800f986:	d105      	bne.n	800f994 <create_name+0x3b8>
 800f988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f98c:	f043 0302 	orr.w	r3, r3, #2
 800f990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f998:	f003 0302 	and.w	r3, r3, #2
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d117      	bne.n	800f9d0 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f9a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9a4:	f003 0303 	and.w	r3, r3, #3
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d105      	bne.n	800f9b8 <create_name+0x3dc>
 800f9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9b0:	f043 0310 	orr.w	r3, r3, #16
 800f9b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f9b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9bc:	f003 030c 	and.w	r3, r3, #12
 800f9c0:	2b04      	cmp	r3, #4
 800f9c2:	d105      	bne.n	800f9d0 <create_name+0x3f4>
 800f9c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9c8:	f043 0308 	orr.w	r3, r3, #8
 800f9cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f9d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f9da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3728      	adds	r7, #40	; 0x28
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}

0800f9e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f9e4:	b580      	push	{r7, lr}
 800f9e6:	b086      	sub	sp, #24
 800f9e8:	af00      	add	r7, sp, #0
 800f9ea:	6078      	str	r0, [r7, #4]
 800f9ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	2b2f      	cmp	r3, #47	; 0x2f
 800f9fe:	d00b      	beq.n	800fa18 <follow_path+0x34>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	781b      	ldrb	r3, [r3, #0]
 800fa04:	2b5c      	cmp	r3, #92	; 0x5c
 800fa06:	d007      	beq.n	800fa18 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	69da      	ldr	r2, [r3, #28]
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	609a      	str	r2, [r3, #8]
 800fa10:	e00d      	b.n	800fa2e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	3301      	adds	r3, #1
 800fa16:	603b      	str	r3, [r7, #0]
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	2b2f      	cmp	r3, #47	; 0x2f
 800fa1e:	d0f8      	beq.n	800fa12 <follow_path+0x2e>
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	781b      	ldrb	r3, [r3, #0]
 800fa24:	2b5c      	cmp	r3, #92	; 0x5c
 800fa26:	d0f4      	beq.n	800fa12 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800fa28:	693b      	ldr	r3, [r7, #16]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	2b1f      	cmp	r3, #31
 800fa34:	d80a      	bhi.n	800fa4c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2280      	movs	r2, #128	; 0x80
 800fa3a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fa3e:	2100      	movs	r1, #0
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f7fe ff50 	bl	800e8e6 <dir_sdi>
 800fa46:	4603      	mov	r3, r0
 800fa48:	75fb      	strb	r3, [r7, #23]
 800fa4a:	e05b      	b.n	800fb04 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fa4c:	463b      	mov	r3, r7
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f7ff fdc3 	bl	800f5dc <create_name>
 800fa56:	4603      	mov	r3, r0
 800fa58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fa5a:	7dfb      	ldrb	r3, [r7, #23]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d14c      	bne.n	800fafa <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f7ff fbb8 	bl	800f1d6 <dir_find>
 800fa66:	4603      	mov	r3, r0
 800fa68:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa70:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fa72:	7dfb      	ldrb	r3, [r7, #23]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d01b      	beq.n	800fab0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fa78:	7dfb      	ldrb	r3, [r7, #23]
 800fa7a:	2b04      	cmp	r3, #4
 800fa7c:	d13f      	bne.n	800fafe <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800fa7e:	7afb      	ldrb	r3, [r7, #11]
 800fa80:	f003 0320 	and.w	r3, r3, #32
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d00b      	beq.n	800faa0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800fa88:	7afb      	ldrb	r3, [r7, #11]
 800fa8a:	f003 0304 	and.w	r3, r3, #4
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d031      	beq.n	800faf6 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	2280      	movs	r2, #128	; 0x80
 800fa96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800fa9e:	e02e      	b.n	800fafe <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800faa0:	7afb      	ldrb	r3, [r7, #11]
 800faa2:	f003 0304 	and.w	r3, r3, #4
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d129      	bne.n	800fafe <follow_path+0x11a>
 800faaa:	2305      	movs	r3, #5
 800faac:	75fb      	strb	r3, [r7, #23]
				break;
 800faae:	e026      	b.n	800fafe <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fab0:	7afb      	ldrb	r3, [r7, #11]
 800fab2:	f003 0304 	and.w	r3, r3, #4
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d123      	bne.n	800fb02 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	799b      	ldrb	r3, [r3, #6]
 800fabe:	f003 0310 	and.w	r3, r3, #16
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d102      	bne.n	800facc <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800fac6:	2305      	movs	r3, #5
 800fac8:	75fb      	strb	r3, [r7, #23]
 800faca:	e01b      	b.n	800fb04 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	695b      	ldr	r3, [r3, #20]
 800fad6:	68fa      	ldr	r2, [r7, #12]
 800fad8:	8992      	ldrh	r2, [r2, #12]
 800fada:	fbb3 f0f2 	udiv	r0, r3, r2
 800fade:	fb02 f200 	mul.w	r2, r2, r0
 800fae2:	1a9b      	subs	r3, r3, r2
 800fae4:	440b      	add	r3, r1
 800fae6:	4619      	mov	r1, r3
 800fae8:	68f8      	ldr	r0, [r7, #12]
 800faea:	f7ff f8a2 	bl	800ec32 <ld_clust>
 800faee:	4602      	mov	r2, r0
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	609a      	str	r2, [r3, #8]
 800faf4:	e7aa      	b.n	800fa4c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800faf6:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800faf8:	e7a8      	b.n	800fa4c <follow_path+0x68>
			if (res != FR_OK) break;
 800fafa:	bf00      	nop
 800fafc:	e002      	b.n	800fb04 <follow_path+0x120>
				break;
 800fafe:	bf00      	nop
 800fb00:	e000      	b.n	800fb04 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb02:	bf00      	nop
			}
		}
	}

	return res;
 800fb04:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3718      	adds	r7, #24
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fb0e:	b480      	push	{r7}
 800fb10:	b087      	sub	sp, #28
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fb16:	f04f 33ff 	mov.w	r3, #4294967295
 800fb1a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d031      	beq.n	800fb88 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	617b      	str	r3, [r7, #20]
 800fb2a:	e002      	b.n	800fb32 <get_ldnumber+0x24>
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	617b      	str	r3, [r7, #20]
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b1f      	cmp	r3, #31
 800fb38:	d903      	bls.n	800fb42 <get_ldnumber+0x34>
 800fb3a:	697b      	ldr	r3, [r7, #20]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b3a      	cmp	r3, #58	; 0x3a
 800fb40:	d1f4      	bne.n	800fb2c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	781b      	ldrb	r3, [r3, #0]
 800fb46:	2b3a      	cmp	r3, #58	; 0x3a
 800fb48:	d11c      	bne.n	800fb84 <get_ldnumber+0x76>
			tp = *path;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	1c5a      	adds	r2, r3, #1
 800fb54:	60fa      	str	r2, [r7, #12]
 800fb56:	781b      	ldrb	r3, [r3, #0]
 800fb58:	3b30      	subs	r3, #48	; 0x30
 800fb5a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	2b09      	cmp	r3, #9
 800fb60:	d80e      	bhi.n	800fb80 <get_ldnumber+0x72>
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d10a      	bne.n	800fb80 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d107      	bne.n	800fb80 <get_ldnumber+0x72>
					vol = (int)i;
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fb74:	697b      	ldr	r3, [r7, #20]
 800fb76:	3301      	adds	r3, #1
 800fb78:	617b      	str	r3, [r7, #20]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	697a      	ldr	r2, [r7, #20]
 800fb7e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	e002      	b.n	800fb8a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fb84:	2300      	movs	r3, #0
 800fb86:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fb88:	693b      	ldr	r3, [r7, #16]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	371c      	adds	r7, #28
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
	...

0800fb98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b082      	sub	sp, #8
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2200      	movs	r2, #0
 800fba6:	70da      	strb	r2, [r3, #3]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f04f 32ff 	mov.w	r2, #4294967295
 800fbae:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fbb0:	6839      	ldr	r1, [r7, #0]
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f7fe fabe 	bl	800e134 <move_window>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d001      	beq.n	800fbc2 <check_fs+0x2a>
 800fbbe:	2304      	movs	r3, #4
 800fbc0:	e038      	b.n	800fc34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	333c      	adds	r3, #60	; 0x3c
 800fbc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7fe f802 	bl	800dbd4 <ld_word>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	461a      	mov	r2, r3
 800fbd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fbd8:	429a      	cmp	r2, r3
 800fbda:	d001      	beq.n	800fbe0 <check_fs+0x48>
 800fbdc:	2303      	movs	r3, #3
 800fbde:	e029      	b.n	800fc34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbe6:	2be9      	cmp	r3, #233	; 0xe9
 800fbe8:	d009      	beq.n	800fbfe <check_fs+0x66>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fbf0:	2beb      	cmp	r3, #235	; 0xeb
 800fbf2:	d11e      	bne.n	800fc32 <check_fs+0x9a>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fbfa:	2b90      	cmp	r3, #144	; 0x90
 800fbfc:	d119      	bne.n	800fc32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	333c      	adds	r3, #60	; 0x3c
 800fc02:	3336      	adds	r3, #54	; 0x36
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7fd fffd 	bl	800dc04 <ld_dword>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc10:	4a0a      	ldr	r2, [pc, #40]	; (800fc3c <check_fs+0xa4>)
 800fc12:	4293      	cmp	r3, r2
 800fc14:	d101      	bne.n	800fc1a <check_fs+0x82>
 800fc16:	2300      	movs	r3, #0
 800fc18:	e00c      	b.n	800fc34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	333c      	adds	r3, #60	; 0x3c
 800fc1e:	3352      	adds	r3, #82	; 0x52
 800fc20:	4618      	mov	r0, r3
 800fc22:	f7fd ffef 	bl	800dc04 <ld_dword>
 800fc26:	4602      	mov	r2, r0
 800fc28:	4b05      	ldr	r3, [pc, #20]	; (800fc40 <check_fs+0xa8>)
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d101      	bne.n	800fc32 <check_fs+0x9a>
 800fc2e:	2300      	movs	r3, #0
 800fc30:	e000      	b.n	800fc34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fc32:	2302      	movs	r3, #2
}
 800fc34:	4618      	mov	r0, r3
 800fc36:	3708      	adds	r7, #8
 800fc38:	46bd      	mov	sp, r7
 800fc3a:	bd80      	pop	{r7, pc}
 800fc3c:	00544146 	.word	0x00544146
 800fc40:	33544146 	.word	0x33544146

0800fc44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b096      	sub	sp, #88	; 0x58
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	4613      	mov	r3, r2
 800fc50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fc58:	68f8      	ldr	r0, [r7, #12]
 800fc5a:	f7ff ff58 	bl	800fb0e <get_ldnumber>
 800fc5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	da01      	bge.n	800fc6a <find_volume+0x26>
 800fc66:	230b      	movs	r3, #11
 800fc68:	e26b      	b.n	8010142 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fc6a:	4ab0      	ldr	r2, [pc, #704]	; (800ff2c <find_volume+0x2e8>)
 800fc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d101      	bne.n	800fc7e <find_volume+0x3a>
 800fc7a:	230c      	movs	r3, #12
 800fc7c:	e261      	b.n	8010142 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fc84:	79fb      	ldrb	r3, [r7, #7]
 800fc86:	f023 0301 	bic.w	r3, r3, #1
 800fc8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d01a      	beq.n	800fcca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	785b      	ldrb	r3, [r3, #1]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fd fefd 	bl	800da98 <disk_status>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fca4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fca8:	f003 0301 	and.w	r3, r3, #1
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d10c      	bne.n	800fcca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fcb0:	79fb      	ldrb	r3, [r7, #7]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d007      	beq.n	800fcc6 <find_volume+0x82>
 800fcb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcba:	f003 0304 	and.w	r3, r3, #4
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d001      	beq.n	800fcc6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fcc2:	230a      	movs	r3, #10
 800fcc4:	e23d      	b.n	8010142 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e23b      	b.n	8010142 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fcca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fccc:	2200      	movs	r2, #0
 800fcce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcd2:	b2da      	uxtb	r2, r3
 800fcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcd6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcda:	785b      	ldrb	r3, [r3, #1]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f7fd fef5 	bl	800dacc <disk_initialize>
 800fce2:	4603      	mov	r3, r0
 800fce4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fce8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fcec:	f003 0301 	and.w	r3, r3, #1
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d001      	beq.n	800fcf8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e224      	b.n	8010142 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fcf8:	79fb      	ldrb	r3, [r7, #7]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d007      	beq.n	800fd0e <find_volume+0xca>
 800fcfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd02:	f003 0304 	and.w	r3, r3, #4
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d001      	beq.n	800fd0e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fd0a:	230a      	movs	r3, #10
 800fd0c:	e219      	b.n	8010142 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd10:	7858      	ldrb	r0, [r3, #1]
 800fd12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd14:	330c      	adds	r3, #12
 800fd16:	461a      	mov	r2, r3
 800fd18:	2102      	movs	r1, #2
 800fd1a:	f7fd ff3d 	bl	800db98 <disk_ioctl>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <find_volume+0xe4>
 800fd24:	2301      	movs	r3, #1
 800fd26:	e20c      	b.n	8010142 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fd28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2a:	899b      	ldrh	r3, [r3, #12]
 800fd2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd30:	d80d      	bhi.n	800fd4e <find_volume+0x10a>
 800fd32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd34:	899b      	ldrh	r3, [r3, #12]
 800fd36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd3a:	d308      	bcc.n	800fd4e <find_volume+0x10a>
 800fd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3e:	899b      	ldrh	r3, [r3, #12]
 800fd40:	461a      	mov	r2, r3
 800fd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd44:	899b      	ldrh	r3, [r3, #12]
 800fd46:	3b01      	subs	r3, #1
 800fd48:	4013      	ands	r3, r2
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <find_volume+0x10e>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e1f7      	b.n	8010142 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fd52:	2300      	movs	r3, #0
 800fd54:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fd56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fd58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fd5a:	f7ff ff1d 	bl	800fb98 <check_fs>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fd64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fd68:	2b02      	cmp	r3, #2
 800fd6a:	d14b      	bne.n	800fe04 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	643b      	str	r3, [r7, #64]	; 0x40
 800fd70:	e01f      	b.n	800fdb2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd74:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fd78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd7a:	011b      	lsls	r3, r3, #4
 800fd7c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fd80:	4413      	add	r3, r2
 800fd82:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fd84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd86:	3304      	adds	r3, #4
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d006      	beq.n	800fd9c <find_volume+0x158>
 800fd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd90:	3308      	adds	r3, #8
 800fd92:	4618      	mov	r0, r3
 800fd94:	f7fd ff36 	bl	800dc04 <ld_dword>
 800fd98:	4602      	mov	r2, r0
 800fd9a:	e000      	b.n	800fd9e <find_volume+0x15a>
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800fda6:	440b      	add	r3, r1
 800fda8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdae:	3301      	adds	r3, #1
 800fdb0:	643b      	str	r3, [r7, #64]	; 0x40
 800fdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdb4:	2b03      	cmp	r3, #3
 800fdb6:	d9dc      	bls.n	800fd72 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fdb8:	2300      	movs	r3, #0
 800fdba:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fdbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d002      	beq.n	800fdc8 <find_volume+0x184>
 800fdc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fdc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdca:	009b      	lsls	r3, r3, #2
 800fdcc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800fdd0:	4413      	add	r3, r2
 800fdd2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fdd6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fdd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d005      	beq.n	800fdea <find_volume+0x1a6>
 800fdde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fde0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fde2:	f7ff fed9 	bl	800fb98 <check_fs>
 800fde6:	4603      	mov	r3, r0
 800fde8:	e000      	b.n	800fdec <find_volume+0x1a8>
 800fdea:	2303      	movs	r3, #3
 800fdec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fdf0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d905      	bls.n	800fe04 <find_volume+0x1c0>
 800fdf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	643b      	str	r3, [r7, #64]	; 0x40
 800fdfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe00:	2b03      	cmp	r3, #3
 800fe02:	d9e1      	bls.n	800fdc8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fe04:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe08:	2b04      	cmp	r3, #4
 800fe0a:	d101      	bne.n	800fe10 <find_volume+0x1cc>
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	e198      	b.n	8010142 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fe10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe14:	2b01      	cmp	r3, #1
 800fe16:	d901      	bls.n	800fe1c <find_volume+0x1d8>
 800fe18:	230d      	movs	r3, #13
 800fe1a:	e192      	b.n	8010142 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fe1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe1e:	333c      	adds	r3, #60	; 0x3c
 800fe20:	330b      	adds	r3, #11
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7fd fed6 	bl	800dbd4 <ld_word>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe2e:	899b      	ldrh	r3, [r3, #12]
 800fe30:	429a      	cmp	r2, r3
 800fe32:	d001      	beq.n	800fe38 <find_volume+0x1f4>
 800fe34:	230d      	movs	r3, #13
 800fe36:	e184      	b.n	8010142 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800fe38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3a:	333c      	adds	r3, #60	; 0x3c
 800fe3c:	3316      	adds	r3, #22
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fd fec8 	bl	800dbd4 <ld_word>
 800fe44:	4603      	mov	r3, r0
 800fe46:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fe48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d106      	bne.n	800fe5c <find_volume+0x218>
 800fe4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe50:	333c      	adds	r3, #60	; 0x3c
 800fe52:	3324      	adds	r3, #36	; 0x24
 800fe54:	4618      	mov	r0, r3
 800fe56:	f7fd fed5 	bl	800dc04 <ld_dword>
 800fe5a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fe5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe60:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fe62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe64:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800fe68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fe6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe6e:	789b      	ldrb	r3, [r3, #2]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d005      	beq.n	800fe80 <find_volume+0x23c>
 800fe74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe76:	789b      	ldrb	r3, [r3, #2]
 800fe78:	2b02      	cmp	r3, #2
 800fe7a:	d001      	beq.n	800fe80 <find_volume+0x23c>
 800fe7c:	230d      	movs	r3, #13
 800fe7e:	e160      	b.n	8010142 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800fe80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe82:	789b      	ldrb	r3, [r3, #2]
 800fe84:	461a      	mov	r2, r3
 800fe86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe88:	fb02 f303 	mul.w	r3, r2, r3
 800fe8c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800fe8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe90:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe98:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800fe9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9c:	895b      	ldrh	r3, [r3, #10]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d008      	beq.n	800feb4 <find_volume+0x270>
 800fea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea4:	895b      	ldrh	r3, [r3, #10]
 800fea6:	461a      	mov	r2, r3
 800fea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feaa:	895b      	ldrh	r3, [r3, #10]
 800feac:	3b01      	subs	r3, #1
 800feae:	4013      	ands	r3, r2
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d001      	beq.n	800feb8 <find_volume+0x274>
 800feb4:	230d      	movs	r3, #13
 800feb6:	e144      	b.n	8010142 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	333c      	adds	r3, #60	; 0x3c
 800febc:	3311      	adds	r3, #17
 800febe:	4618      	mov	r0, r3
 800fec0:	f7fd fe88 	bl	800dbd4 <ld_word>
 800fec4:	4603      	mov	r3, r0
 800fec6:	461a      	mov	r2, r3
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800fecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fece:	891b      	ldrh	r3, [r3, #8]
 800fed0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fed2:	8992      	ldrh	r2, [r2, #12]
 800fed4:	0952      	lsrs	r2, r2, #5
 800fed6:	b292      	uxth	r2, r2
 800fed8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fedc:	fb02 f201 	mul.w	r2, r2, r1
 800fee0:	1a9b      	subs	r3, r3, r2
 800fee2:	b29b      	uxth	r3, r3
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d001      	beq.n	800feec <find_volume+0x2a8>
 800fee8:	230d      	movs	r3, #13
 800feea:	e12a      	b.n	8010142 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	333c      	adds	r3, #60	; 0x3c
 800fef0:	3313      	adds	r3, #19
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fd fe6e 	bl	800dbd4 <ld_word>
 800fef8:	4603      	mov	r3, r0
 800fefa:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800fefc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <find_volume+0x2cc>
 800ff02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff04:	333c      	adds	r3, #60	; 0x3c
 800ff06:	3320      	adds	r3, #32
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f7fd fe7b 	bl	800dc04 <ld_dword>
 800ff0e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff12:	333c      	adds	r3, #60	; 0x3c
 800ff14:	330e      	adds	r3, #14
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7fd fe5c 	bl	800dbd4 <ld_word>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ff20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d104      	bne.n	800ff30 <find_volume+0x2ec>
 800ff26:	230d      	movs	r3, #13
 800ff28:	e10b      	b.n	8010142 <find_volume+0x4fe>
 800ff2a:	bf00      	nop
 800ff2c:	2001f2f0 	.word	0x2001f2f0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ff30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff34:	4413      	add	r3, r2
 800ff36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff38:	8911      	ldrh	r1, [r2, #8]
 800ff3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff3c:	8992      	ldrh	r2, [r2, #12]
 800ff3e:	0952      	lsrs	r2, r2, #5
 800ff40:	b292      	uxth	r2, r2
 800ff42:	fbb1 f2f2 	udiv	r2, r1, r2
 800ff46:	b292      	uxth	r2, r2
 800ff48:	4413      	add	r3, r2
 800ff4a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ff4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff50:	429a      	cmp	r2, r3
 800ff52:	d201      	bcs.n	800ff58 <find_volume+0x314>
 800ff54:	230d      	movs	r3, #13
 800ff56:	e0f4      	b.n	8010142 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ff58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ff5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5c:	1ad3      	subs	r3, r2, r3
 800ff5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff60:	8952      	ldrh	r2, [r2, #10]
 800ff62:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff66:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ff68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <find_volume+0x32e>
 800ff6e:	230d      	movs	r3, #13
 800ff70:	e0e7      	b.n	8010142 <find_volume+0x4fe>
		fmt = FS_FAT32;
 800ff72:	2303      	movs	r3, #3
 800ff74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ff78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff7a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff7e:	4293      	cmp	r3, r2
 800ff80:	d802      	bhi.n	800ff88 <find_volume+0x344>
 800ff82:	2302      	movs	r3, #2
 800ff84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ff88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d802      	bhi.n	800ff98 <find_volume+0x354>
 800ff92:	2301      	movs	r3, #1
 800ff94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ff98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9a:	1c9a      	adds	r2, r3, #2
 800ff9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9e:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800ffa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffa4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ffa6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffaa:	441a      	add	r2, r3
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800ffb0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ffb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffb4:	441a      	add	r2, r3
 800ffb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffb8:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800ffba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffbe:	2b03      	cmp	r3, #3
 800ffc0:	d11e      	bne.n	8010000 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ffc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffc4:	333c      	adds	r3, #60	; 0x3c
 800ffc6:	332a      	adds	r3, #42	; 0x2a
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fd fe03 	bl	800dbd4 <ld_word>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d001      	beq.n	800ffd8 <find_volume+0x394>
 800ffd4:	230d      	movs	r3, #13
 800ffd6:	e0b4      	b.n	8010142 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ffd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffda:	891b      	ldrh	r3, [r3, #8]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d001      	beq.n	800ffe4 <find_volume+0x3a0>
 800ffe0:	230d      	movs	r3, #13
 800ffe2:	e0ae      	b.n	8010142 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ffe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe6:	333c      	adds	r3, #60	; 0x3c
 800ffe8:	332c      	adds	r3, #44	; 0x2c
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fd fe0a 	bl	800dc04 <ld_dword>
 800fff0:	4602      	mov	r2, r0
 800fff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800fff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff8:	6a1b      	ldr	r3, [r3, #32]
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	647b      	str	r3, [r7, #68]	; 0x44
 800fffe:	e01f      	b.n	8010040 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010002:	891b      	ldrh	r3, [r3, #8]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d101      	bne.n	801000c <find_volume+0x3c8>
 8010008:	230d      	movs	r3, #13
 801000a:	e09a      	b.n	8010142 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801000c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801000e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010012:	441a      	add	r2, r3
 8010014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010016:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010018:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801001c:	2b02      	cmp	r3, #2
 801001e:	d103      	bne.n	8010028 <find_volume+0x3e4>
 8010020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010022:	6a1b      	ldr	r3, [r3, #32]
 8010024:	005b      	lsls	r3, r3, #1
 8010026:	e00a      	b.n	801003e <find_volume+0x3fa>
 8010028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801002a:	6a1a      	ldr	r2, [r3, #32]
 801002c:	4613      	mov	r3, r2
 801002e:	005b      	lsls	r3, r3, #1
 8010030:	4413      	add	r3, r2
 8010032:	085a      	lsrs	r2, r3, #1
 8010034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010036:	6a1b      	ldr	r3, [r3, #32]
 8010038:	f003 0301 	and.w	r3, r3, #1
 801003c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801003e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010042:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010046:	899b      	ldrh	r3, [r3, #12]
 8010048:	4619      	mov	r1, r3
 801004a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801004c:	440b      	add	r3, r1
 801004e:	3b01      	subs	r3, #1
 8010050:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010052:	8989      	ldrh	r1, [r1, #12]
 8010054:	fbb3 f3f1 	udiv	r3, r3, r1
 8010058:	429a      	cmp	r2, r3
 801005a:	d201      	bcs.n	8010060 <find_volume+0x41c>
 801005c:	230d      	movs	r3, #13
 801005e:	e070      	b.n	8010142 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	f04f 32ff 	mov.w	r2, #4294967295
 8010066:	619a      	str	r2, [r3, #24]
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	699a      	ldr	r2, [r3, #24]
 801006c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8010070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010072:	2280      	movs	r2, #128	; 0x80
 8010074:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801007a:	2b03      	cmp	r3, #3
 801007c:	d149      	bne.n	8010112 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	333c      	adds	r3, #60	; 0x3c
 8010082:	3330      	adds	r3, #48	; 0x30
 8010084:	4618      	mov	r0, r3
 8010086:	f7fd fda5 	bl	800dbd4 <ld_word>
 801008a:	4603      	mov	r3, r0
 801008c:	2b01      	cmp	r3, #1
 801008e:	d140      	bne.n	8010112 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010092:	3301      	adds	r3, #1
 8010094:	4619      	mov	r1, r3
 8010096:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010098:	f7fe f84c 	bl	800e134 <move_window>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d137      	bne.n	8010112 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80100a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a4:	2200      	movs	r2, #0
 80100a6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100aa:	333c      	adds	r3, #60	; 0x3c
 80100ac:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fd fd8f 	bl	800dbd4 <ld_word>
 80100b6:	4603      	mov	r3, r0
 80100b8:	461a      	mov	r2, r3
 80100ba:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80100be:	429a      	cmp	r2, r3
 80100c0:	d127      	bne.n	8010112 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	333c      	adds	r3, #60	; 0x3c
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fd fd9c 	bl	800dc04 <ld_dword>
 80100cc:	4602      	mov	r2, r0
 80100ce:	4b1f      	ldr	r3, [pc, #124]	; (801014c <find_volume+0x508>)
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d11e      	bne.n	8010112 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80100d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d6:	333c      	adds	r3, #60	; 0x3c
 80100d8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fd fd91 	bl	800dc04 <ld_dword>
 80100e2:	4602      	mov	r2, r0
 80100e4:	4b1a      	ldr	r3, [pc, #104]	; (8010150 <find_volume+0x50c>)
 80100e6:	429a      	cmp	r2, r3
 80100e8:	d113      	bne.n	8010112 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	333c      	adds	r3, #60	; 0x3c
 80100ee:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fd fd86 	bl	800dc04 <ld_dword>
 80100f8:	4602      	mov	r2, r0
 80100fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	333c      	adds	r3, #60	; 0x3c
 8010102:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd fd7c 	bl	800dc04 <ld_dword>
 801010c:	4602      	mov	r2, r0
 801010e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010110:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010118:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801011a:	4b0e      	ldr	r3, [pc, #56]	; (8010154 <find_volume+0x510>)
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	3301      	adds	r3, #1
 8010120:	b29a      	uxth	r2, r3
 8010122:	4b0c      	ldr	r3, [pc, #48]	; (8010154 <find_volume+0x510>)
 8010124:	801a      	strh	r2, [r3, #0]
 8010126:	4b0b      	ldr	r3, [pc, #44]	; (8010154 <find_volume+0x510>)
 8010128:	881a      	ldrh	r2, [r3, #0]
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801012e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010130:	4a09      	ldr	r2, [pc, #36]	; (8010158 <find_volume+0x514>)
 8010132:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8010134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010136:	2200      	movs	r2, #0
 8010138:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801013a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801013c:	f7fd ff92 	bl	800e064 <clear_lock>
#endif
	return FR_OK;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3758      	adds	r7, #88	; 0x58
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}
 801014a:	bf00      	nop
 801014c:	41615252 	.word	0x41615252
 8010150:	61417272 	.word	0x61417272
 8010154:	2001f2f4 	.word	0x2001f2f4
 8010158:	2001f318 	.word	0x2001f318

0801015c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010166:	2309      	movs	r3, #9
 8010168:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d01c      	beq.n	80101aa <validate+0x4e>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d018      	beq.n	80101aa <validate+0x4e>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d013      	beq.n	80101aa <validate+0x4e>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	889a      	ldrh	r2, [r3, #4]
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	88db      	ldrh	r3, [r3, #6]
 801018c:	429a      	cmp	r2, r3
 801018e:	d10c      	bne.n	80101aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	785b      	ldrb	r3, [r3, #1]
 8010196:	4618      	mov	r0, r3
 8010198:	f7fd fc7e 	bl	800da98 <disk_status>
 801019c:	4603      	mov	r3, r0
 801019e:	f003 0301 	and.w	r3, r3, #1
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d101      	bne.n	80101aa <validate+0x4e>
			res = FR_OK;
 80101a6:	2300      	movs	r3, #0
 80101a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80101aa:	7bfb      	ldrb	r3, [r7, #15]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d102      	bne.n	80101b6 <validate+0x5a>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	e000      	b.n	80101b8 <validate+0x5c>
 80101b6:	2300      	movs	r3, #0
 80101b8:	683a      	ldr	r2, [r7, #0]
 80101ba:	6013      	str	r3, [r2, #0]
	return res;
 80101bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3710      	adds	r7, #16
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
	...

080101c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	4613      	mov	r3, r2
 80101d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80101da:	f107 0310 	add.w	r3, r7, #16
 80101de:	4618      	mov	r0, r3
 80101e0:	f7ff fc95 	bl	800fb0e <get_ldnumber>
 80101e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80101e6:	69fb      	ldr	r3, [r7, #28]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	da01      	bge.n	80101f0 <f_mount+0x28>
 80101ec:	230b      	movs	r3, #11
 80101ee:	e02b      	b.n	8010248 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80101f0:	4a17      	ldr	r2, [pc, #92]	; (8010250 <f_mount+0x88>)
 80101f2:	69fb      	ldr	r3, [r7, #28]
 80101f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80101fa:	69bb      	ldr	r3, [r7, #24]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d005      	beq.n	801020c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010200:	69b8      	ldr	r0, [r7, #24]
 8010202:	f7fd ff2f 	bl	800e064 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	2200      	movs	r2, #0
 801020a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d002      	beq.n	8010218 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	2200      	movs	r2, #0
 8010216:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010218:	68fa      	ldr	r2, [r7, #12]
 801021a:	490d      	ldr	r1, [pc, #52]	; (8010250 <f_mount+0x88>)
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d002      	beq.n	801022e <f_mount+0x66>
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	2b01      	cmp	r3, #1
 801022c:	d001      	beq.n	8010232 <f_mount+0x6a>
 801022e:	2300      	movs	r3, #0
 8010230:	e00a      	b.n	8010248 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010232:	f107 010c 	add.w	r1, r7, #12
 8010236:	f107 0308 	add.w	r3, r7, #8
 801023a:	2200      	movs	r2, #0
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff fd01 	bl	800fc44 <find_volume>
 8010242:	4603      	mov	r3, r0
 8010244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010246:	7dfb      	ldrb	r3, [r7, #23]
}
 8010248:	4618      	mov	r0, r3
 801024a:	3720      	adds	r7, #32
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}
 8010250:	2001f2f0 	.word	0x2001f2f0

08010254 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b09a      	sub	sp, #104	; 0x68
 8010258:	af00      	add	r7, sp, #0
 801025a:	60f8      	str	r0, [r7, #12]
 801025c:	60b9      	str	r1, [r7, #8]
 801025e:	4613      	mov	r3, r2
 8010260:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d101      	bne.n	801026c <f_open+0x18>
 8010268:	2309      	movs	r3, #9
 801026a:	e1bb      	b.n	80105e4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010272:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010274:	79fa      	ldrb	r2, [r7, #7]
 8010276:	f107 0114 	add.w	r1, r7, #20
 801027a:	f107 0308 	add.w	r3, r7, #8
 801027e:	4618      	mov	r0, r3
 8010280:	f7ff fce0 	bl	800fc44 <find_volume>
 8010284:	4603      	mov	r3, r0
 8010286:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801028a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801028e:	2b00      	cmp	r3, #0
 8010290:	f040 819f 	bne.w	80105d2 <f_open+0x37e>
		dj.obj.fs = fs;
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010298:	68ba      	ldr	r2, [r7, #8]
 801029a:	f107 0318 	add.w	r3, r7, #24
 801029e:	4611      	mov	r1, r2
 80102a0:	4618      	mov	r0, r3
 80102a2:	f7ff fb9f 	bl	800f9e4 <follow_path>
 80102a6:	4603      	mov	r3, r0
 80102a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80102ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d11a      	bne.n	80102ea <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80102b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102b8:	b25b      	sxtb	r3, r3
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	da03      	bge.n	80102c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80102be:	2306      	movs	r3, #6
 80102c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80102c4:	e011      	b.n	80102ea <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	f023 0301 	bic.w	r3, r3, #1
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	bf14      	ite	ne
 80102d0:	2301      	movne	r3, #1
 80102d2:	2300      	moveq	r3, #0
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	461a      	mov	r2, r3
 80102d8:	f107 0318 	add.w	r3, r7, #24
 80102dc:	4611      	mov	r1, r2
 80102de:	4618      	mov	r0, r3
 80102e0:	f7fd fd78 	bl	800ddd4 <chk_lock>
 80102e4:	4603      	mov	r3, r0
 80102e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80102ea:	79fb      	ldrb	r3, [r7, #7]
 80102ec:	f003 031c 	and.w	r3, r3, #28
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d07f      	beq.n	80103f4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80102f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d017      	beq.n	801032c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80102fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010300:	2b04      	cmp	r3, #4
 8010302:	d10e      	bne.n	8010322 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010304:	f7fd fdc2 	bl	800de8c <enq_lock>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d006      	beq.n	801031c <f_open+0xc8>
 801030e:	f107 0318 	add.w	r3, r7, #24
 8010312:	4618      	mov	r0, r3
 8010314:	f7ff f820 	bl	800f358 <dir_register>
 8010318:	4603      	mov	r3, r0
 801031a:	e000      	b.n	801031e <f_open+0xca>
 801031c:	2312      	movs	r3, #18
 801031e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010322:	79fb      	ldrb	r3, [r7, #7]
 8010324:	f043 0308 	orr.w	r3, r3, #8
 8010328:	71fb      	strb	r3, [r7, #7]
 801032a:	e010      	b.n	801034e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801032c:	7fbb      	ldrb	r3, [r7, #30]
 801032e:	f003 0311 	and.w	r3, r3, #17
 8010332:	2b00      	cmp	r3, #0
 8010334:	d003      	beq.n	801033e <f_open+0xea>
					res = FR_DENIED;
 8010336:	2307      	movs	r3, #7
 8010338:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801033c:	e007      	b.n	801034e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801033e:	79fb      	ldrb	r3, [r7, #7]
 8010340:	f003 0304 	and.w	r3, r3, #4
 8010344:	2b00      	cmp	r3, #0
 8010346:	d002      	beq.n	801034e <f_open+0xfa>
 8010348:	2308      	movs	r3, #8
 801034a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801034e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010352:	2b00      	cmp	r3, #0
 8010354:	d168      	bne.n	8010428 <f_open+0x1d4>
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	f003 0308 	and.w	r3, r3, #8
 801035c:	2b00      	cmp	r3, #0
 801035e:	d063      	beq.n	8010428 <f_open+0x1d4>
				dw = GET_FATTIME();
 8010360:	f7fd f94a 	bl	800d5f8 <get_fattime>
 8010364:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010368:	330e      	adds	r3, #14
 801036a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801036c:	4618      	mov	r0, r3
 801036e:	f7fd fc87 	bl	800dc80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010374:	3316      	adds	r3, #22
 8010376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010378:	4618      	mov	r0, r3
 801037a:	f7fd fc81 	bl	800dc80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801037e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010380:	330b      	adds	r3, #11
 8010382:	2220      	movs	r2, #32
 8010384:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801038a:	4611      	mov	r1, r2
 801038c:	4618      	mov	r0, r3
 801038e:	f7fe fc50 	bl	800ec32 <ld_clust>
 8010392:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010394:	697b      	ldr	r3, [r7, #20]
 8010396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010398:	2200      	movs	r2, #0
 801039a:	4618      	mov	r0, r3
 801039c:	f7fe fc68 	bl	800ec70 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80103a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a2:	331c      	adds	r3, #28
 80103a4:	2100      	movs	r1, #0
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7fd fc6a 	bl	800dc80 <st_dword>
					fs->wflag = 1;
 80103ac:	697b      	ldr	r3, [r7, #20]
 80103ae:	2201      	movs	r2, #1
 80103b0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80103b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d037      	beq.n	8010428 <f_open+0x1d4>
						dw = fs->winsect;
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103bc:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80103be:	f107 0318 	add.w	r3, r7, #24
 80103c2:	2200      	movs	r2, #0
 80103c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80103c6:	4618      	mov	r0, r3
 80103c8:	f7fe f958 	bl	800e67c <remove_chain>
 80103cc:	4603      	mov	r3, r0
 80103ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80103d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d126      	bne.n	8010428 <f_open+0x1d4>
							res = move_window(fs, dw);
 80103da:	697b      	ldr	r3, [r7, #20]
 80103dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fd fea8 	bl	800e134 <move_window>
 80103e4:	4603      	mov	r3, r0
 80103e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80103ee:	3a01      	subs	r2, #1
 80103f0:	615a      	str	r2, [r3, #20]
 80103f2:	e019      	b.n	8010428 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80103f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d115      	bne.n	8010428 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80103fc:	7fbb      	ldrb	r3, [r7, #30]
 80103fe:	f003 0310 	and.w	r3, r3, #16
 8010402:	2b00      	cmp	r3, #0
 8010404:	d003      	beq.n	801040e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010406:	2304      	movs	r3, #4
 8010408:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801040c:	e00c      	b.n	8010428 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	f003 0302 	and.w	r3, r3, #2
 8010414:	2b00      	cmp	r3, #0
 8010416:	d007      	beq.n	8010428 <f_open+0x1d4>
 8010418:	7fbb      	ldrb	r3, [r7, #30]
 801041a:	f003 0301 	and.w	r3, r3, #1
 801041e:	2b00      	cmp	r3, #0
 8010420:	d002      	beq.n	8010428 <f_open+0x1d4>
						res = FR_DENIED;
 8010422:	2307      	movs	r3, #7
 8010424:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010428:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801042c:	2b00      	cmp	r3, #0
 801042e:	d128      	bne.n	8010482 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010430:	79fb      	ldrb	r3, [r7, #7]
 8010432:	f003 0308 	and.w	r3, r3, #8
 8010436:	2b00      	cmp	r3, #0
 8010438:	d003      	beq.n	8010442 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801043a:	79fb      	ldrb	r3, [r7, #7]
 801043c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010440:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801044a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010450:	79fb      	ldrb	r3, [r7, #7]
 8010452:	f023 0301 	bic.w	r3, r3, #1
 8010456:	2b00      	cmp	r3, #0
 8010458:	bf14      	ite	ne
 801045a:	2301      	movne	r3, #1
 801045c:	2300      	moveq	r3, #0
 801045e:	b2db      	uxtb	r3, r3
 8010460:	461a      	mov	r2, r3
 8010462:	f107 0318 	add.w	r3, r7, #24
 8010466:	4611      	mov	r1, r2
 8010468:	4618      	mov	r0, r3
 801046a:	f7fd fd31 	bl	800ded0 <inc_lock>
 801046e:	4602      	mov	r2, r0
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	691b      	ldr	r3, [r3, #16]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d102      	bne.n	8010482 <f_open+0x22e>
 801047c:	2302      	movs	r3, #2
 801047e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010486:	2b00      	cmp	r3, #0
 8010488:	f040 80a3 	bne.w	80105d2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010490:	4611      	mov	r1, r2
 8010492:	4618      	mov	r0, r3
 8010494:	f7fe fbcd 	bl	800ec32 <ld_clust>
 8010498:	4602      	mov	r2, r0
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801049e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a0:	331c      	adds	r3, #28
 80104a2:	4618      	mov	r0, r3
 80104a4:	f7fd fbae 	bl	800dc04 <ld_dword>
 80104a8:	4602      	mov	r2, r0
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2200      	movs	r2, #0
 80104b2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80104b4:	697a      	ldr	r2, [r7, #20]
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80104ba:	697b      	ldr	r3, [r7, #20]
 80104bc:	88da      	ldrh	r2, [r3, #6]
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	79fa      	ldrb	r2, [r7, #7]
 80104c6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	2200      	movs	r2, #0
 80104cc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2200      	movs	r2, #0
 80104d8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3330      	adds	r3, #48	; 0x30
 80104de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80104e2:	2100      	movs	r1, #0
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fd fc18 	bl	800dd1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80104ea:	79fb      	ldrb	r3, [r7, #7]
 80104ec:	f003 0320 	and.w	r3, r3, #32
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d06e      	beq.n	80105d2 <f_open+0x37e>
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	68db      	ldr	r3, [r3, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d06a      	beq.n	80105d2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	68da      	ldr	r2, [r3, #12]
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	895b      	ldrh	r3, [r3, #10]
 8010508:	461a      	mov	r2, r3
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	899b      	ldrh	r3, [r3, #12]
 801050e:	fb03 f302 	mul.w	r3, r3, r2
 8010512:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	68db      	ldr	r3, [r3, #12]
 801051e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010520:	e016      	b.n	8010550 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010526:	4618      	mov	r0, r3
 8010528:	f7fd fec1 	bl	800e2ae <get_fat>
 801052c:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801052e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010530:	2b01      	cmp	r3, #1
 8010532:	d802      	bhi.n	801053a <f_open+0x2e6>
 8010534:	2302      	movs	r3, #2
 8010536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801053a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801053c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010540:	d102      	bne.n	8010548 <f_open+0x2f4>
 8010542:	2301      	movs	r3, #1
 8010544:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010548:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801054a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054c:	1ad3      	subs	r3, r2, r3
 801054e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010550:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010554:	2b00      	cmp	r3, #0
 8010556:	d103      	bne.n	8010560 <f_open+0x30c>
 8010558:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801055a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801055c:	429a      	cmp	r2, r3
 801055e:	d8e0      	bhi.n	8010522 <f_open+0x2ce>
				}
				fp->clust = clst;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010564:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010566:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801056a:	2b00      	cmp	r3, #0
 801056c:	d131      	bne.n	80105d2 <f_open+0x37e>
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	899b      	ldrh	r3, [r3, #12]
 8010572:	461a      	mov	r2, r3
 8010574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010576:	fbb3 f1f2 	udiv	r1, r3, r2
 801057a:	fb02 f201 	mul.w	r2, r2, r1
 801057e:	1a9b      	subs	r3, r3, r2
 8010580:	2b00      	cmp	r3, #0
 8010582:	d026      	beq.n	80105d2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010588:	4618      	mov	r0, r3
 801058a:	f7fd fe71 	bl	800e270 <clust2sect>
 801058e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010592:	2b00      	cmp	r3, #0
 8010594:	d103      	bne.n	801059e <f_open+0x34a>
						res = FR_INT_ERR;
 8010596:	2302      	movs	r3, #2
 8010598:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801059c:	e019      	b.n	80105d2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	899b      	ldrh	r3, [r3, #12]
 80105a2:	461a      	mov	r2, r3
 80105a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80105aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ac:	441a      	add	r2, r3
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	7858      	ldrb	r0, [r3, #1]
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6a1a      	ldr	r2, [r3, #32]
 80105c0:	2301      	movs	r3, #1
 80105c2:	f7fd faa9 	bl	800db18 <disk_read>
 80105c6:	4603      	mov	r3, r0
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <f_open+0x37e>
 80105cc:	2301      	movs	r3, #1
 80105ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80105d2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d002      	beq.n	80105e0 <f_open+0x38c>
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105e0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3768      	adds	r7, #104	; 0x68
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b08e      	sub	sp, #56	; 0x38
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	60f8      	str	r0, [r7, #12]
 80105f4:	60b9      	str	r1, [r7, #8]
 80105f6:	607a      	str	r2, [r7, #4]
 80105f8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80105fe:	683b      	ldr	r3, [r7, #0]
 8010600:	2200      	movs	r2, #0
 8010602:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	f107 0214 	add.w	r2, r7, #20
 801060a:	4611      	mov	r1, r2
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff fda5 	bl	801015c <validate>
 8010612:	4603      	mov	r3, r0
 8010614:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801061c:	2b00      	cmp	r3, #0
 801061e:	d107      	bne.n	8010630 <f_read+0x44>
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	7d5b      	ldrb	r3, [r3, #21]
 8010624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010628:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801062c:	2b00      	cmp	r3, #0
 801062e:	d002      	beq.n	8010636 <f_read+0x4a>
 8010630:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010634:	e135      	b.n	80108a2 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	7d1b      	ldrb	r3, [r3, #20]
 801063a:	f003 0301 	and.w	r3, r3, #1
 801063e:	2b00      	cmp	r3, #0
 8010640:	d101      	bne.n	8010646 <f_read+0x5a>
 8010642:	2307      	movs	r3, #7
 8010644:	e12d      	b.n	80108a2 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	68da      	ldr	r2, [r3, #12]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	699b      	ldr	r3, [r3, #24]
 801064e:	1ad3      	subs	r3, r2, r3
 8010650:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	6a3b      	ldr	r3, [r7, #32]
 8010656:	429a      	cmp	r2, r3
 8010658:	f240 811e 	bls.w	8010898 <f_read+0x2ac>
 801065c:	6a3b      	ldr	r3, [r7, #32]
 801065e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010660:	e11a      	b.n	8010898 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	697a      	ldr	r2, [r7, #20]
 8010668:	8992      	ldrh	r2, [r2, #12]
 801066a:	fbb3 f1f2 	udiv	r1, r3, r2
 801066e:	fb02 f201 	mul.w	r2, r2, r1
 8010672:	1a9b      	subs	r3, r3, r2
 8010674:	2b00      	cmp	r3, #0
 8010676:	f040 80d5 	bne.w	8010824 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	699b      	ldr	r3, [r3, #24]
 801067e:	697a      	ldr	r2, [r7, #20]
 8010680:	8992      	ldrh	r2, [r2, #12]
 8010682:	fbb3 f3f2 	udiv	r3, r3, r2
 8010686:	697a      	ldr	r2, [r7, #20]
 8010688:	8952      	ldrh	r2, [r2, #10]
 801068a:	3a01      	subs	r2, #1
 801068c:	4013      	ands	r3, r2
 801068e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010690:	69fb      	ldr	r3, [r7, #28]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d12f      	bne.n	80106f6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010696:	68fb      	ldr	r3, [r7, #12]
 8010698:	699b      	ldr	r3, [r3, #24]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d103      	bne.n	80106a6 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	689b      	ldr	r3, [r3, #8]
 80106a2:	633b      	str	r3, [r7, #48]	; 0x30
 80106a4:	e013      	b.n	80106ce <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d007      	beq.n	80106be <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	699b      	ldr	r3, [r3, #24]
 80106b2:	4619      	mov	r1, r3
 80106b4:	68f8      	ldr	r0, [r7, #12]
 80106b6:	f7fe f8de 	bl	800e876 <clmt_clust>
 80106ba:	6338      	str	r0, [r7, #48]	; 0x30
 80106bc:	e007      	b.n	80106ce <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	69db      	ldr	r3, [r3, #28]
 80106c4:	4619      	mov	r1, r3
 80106c6:	4610      	mov	r0, r2
 80106c8:	f7fd fdf1 	bl	800e2ae <get_fat>
 80106cc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80106ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d804      	bhi.n	80106de <f_read+0xf2>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	2202      	movs	r2, #2
 80106d8:	755a      	strb	r2, [r3, #21]
 80106da:	2302      	movs	r3, #2
 80106dc:	e0e1      	b.n	80108a2 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80106de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106e4:	d104      	bne.n	80106f0 <f_read+0x104>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	2201      	movs	r2, #1
 80106ea:	755a      	strb	r2, [r3, #21]
 80106ec:	2301      	movs	r3, #1
 80106ee:	e0d8      	b.n	80108a2 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106f4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80106f6:	697a      	ldr	r2, [r7, #20]
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	69db      	ldr	r3, [r3, #28]
 80106fc:	4619      	mov	r1, r3
 80106fe:	4610      	mov	r0, r2
 8010700:	f7fd fdb6 	bl	800e270 <clust2sect>
 8010704:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	2b00      	cmp	r3, #0
 801070a:	d104      	bne.n	8010716 <f_read+0x12a>
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	2202      	movs	r2, #2
 8010710:	755a      	strb	r2, [r3, #21]
 8010712:	2302      	movs	r3, #2
 8010714:	e0c5      	b.n	80108a2 <f_read+0x2b6>
			sect += csect;
 8010716:	69ba      	ldr	r2, [r7, #24]
 8010718:	69fb      	ldr	r3, [r7, #28]
 801071a:	4413      	add	r3, r2
 801071c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	899b      	ldrh	r3, [r3, #12]
 8010722:	461a      	mov	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	fbb3 f3f2 	udiv	r3, r3, r2
 801072a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 801072c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801072e:	2b00      	cmp	r3, #0
 8010730:	d041      	beq.n	80107b6 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010732:	69fa      	ldr	r2, [r7, #28]
 8010734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010736:	4413      	add	r3, r2
 8010738:	697a      	ldr	r2, [r7, #20]
 801073a:	8952      	ldrh	r2, [r2, #10]
 801073c:	4293      	cmp	r3, r2
 801073e:	d905      	bls.n	801074c <f_read+0x160>
					cc = fs->csize - csect;
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	895b      	ldrh	r3, [r3, #10]
 8010744:	461a      	mov	r2, r3
 8010746:	69fb      	ldr	r3, [r7, #28]
 8010748:	1ad3      	subs	r3, r2, r3
 801074a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	7858      	ldrb	r0, [r3, #1]
 8010750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010752:	69ba      	ldr	r2, [r7, #24]
 8010754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010756:	f7fd f9df 	bl	800db18 <disk_read>
 801075a:	4603      	mov	r3, r0
 801075c:	2b00      	cmp	r3, #0
 801075e:	d004      	beq.n	801076a <f_read+0x17e>
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2201      	movs	r2, #1
 8010764:	755a      	strb	r2, [r3, #21]
 8010766:	2301      	movs	r3, #1
 8010768:	e09b      	b.n	80108a2 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	7d1b      	ldrb	r3, [r3, #20]
 801076e:	b25b      	sxtb	r3, r3
 8010770:	2b00      	cmp	r3, #0
 8010772:	da18      	bge.n	80107a6 <f_read+0x1ba>
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	6a1a      	ldr	r2, [r3, #32]
 8010778:	69bb      	ldr	r3, [r7, #24]
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801077e:	429a      	cmp	r2, r3
 8010780:	d911      	bls.n	80107a6 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	6a1a      	ldr	r2, [r3, #32]
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	1ad3      	subs	r3, r2, r3
 801078a:	697a      	ldr	r2, [r7, #20]
 801078c:	8992      	ldrh	r2, [r2, #12]
 801078e:	fb02 f303 	mul.w	r3, r2, r3
 8010792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010794:	18d0      	adds	r0, r2, r3
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	899b      	ldrh	r3, [r3, #12]
 80107a0:	461a      	mov	r2, r3
 80107a2:	f7fd fa99 	bl	800dcd8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	899b      	ldrh	r3, [r3, #12]
 80107aa:	461a      	mov	r2, r3
 80107ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ae:	fb02 f303 	mul.w	r3, r2, r3
 80107b2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80107b4:	e05c      	b.n	8010870 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	6a1b      	ldr	r3, [r3, #32]
 80107ba:	69ba      	ldr	r2, [r7, #24]
 80107bc:	429a      	cmp	r2, r3
 80107be:	d02e      	beq.n	801081e <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	7d1b      	ldrb	r3, [r3, #20]
 80107c4:	b25b      	sxtb	r3, r3
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	da18      	bge.n	80107fc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	7858      	ldrb	r0, [r3, #1]
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6a1a      	ldr	r2, [r3, #32]
 80107d8:	2301      	movs	r3, #1
 80107da:	f7fd f9bd 	bl	800db58 <disk_write>
 80107de:	4603      	mov	r3, r0
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d004      	beq.n	80107ee <f_read+0x202>
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	2201      	movs	r2, #1
 80107e8:	755a      	strb	r2, [r3, #21]
 80107ea:	2301      	movs	r3, #1
 80107ec:	e059      	b.n	80108a2 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	7d1b      	ldrb	r3, [r3, #20]
 80107f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107f6:	b2da      	uxtb	r2, r3
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	7858      	ldrb	r0, [r3, #1]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010806:	2301      	movs	r3, #1
 8010808:	69ba      	ldr	r2, [r7, #24]
 801080a:	f7fd f985 	bl	800db18 <disk_read>
 801080e:	4603      	mov	r3, r0
 8010810:	2b00      	cmp	r3, #0
 8010812:	d004      	beq.n	801081e <f_read+0x232>
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	2201      	movs	r2, #1
 8010818:	755a      	strb	r2, [r3, #21]
 801081a:	2301      	movs	r3, #1
 801081c:	e041      	b.n	80108a2 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	69ba      	ldr	r2, [r7, #24]
 8010822:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	899b      	ldrh	r3, [r3, #12]
 8010828:	4618      	mov	r0, r3
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	699b      	ldr	r3, [r3, #24]
 801082e:	697a      	ldr	r2, [r7, #20]
 8010830:	8992      	ldrh	r2, [r2, #12]
 8010832:	fbb3 f1f2 	udiv	r1, r3, r2
 8010836:	fb02 f201 	mul.w	r2, r2, r1
 801083a:	1a9b      	subs	r3, r3, r2
 801083c:	1ac3      	subs	r3, r0, r3
 801083e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	429a      	cmp	r2, r3
 8010846:	d901      	bls.n	801084c <f_read+0x260>
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	699b      	ldr	r3, [r3, #24]
 8010856:	697a      	ldr	r2, [r7, #20]
 8010858:	8992      	ldrh	r2, [r2, #12]
 801085a:	fbb3 f0f2 	udiv	r0, r3, r2
 801085e:	fb02 f200 	mul.w	r2, r2, r0
 8010862:	1a9b      	subs	r3, r3, r2
 8010864:	440b      	add	r3, r1
 8010866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010868:	4619      	mov	r1, r3
 801086a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801086c:	f7fd fa34 	bl	800dcd8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010874:	4413      	add	r3, r2
 8010876:	627b      	str	r3, [r7, #36]	; 0x24
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	699a      	ldr	r2, [r3, #24]
 801087c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801087e:	441a      	add	r2, r3
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	619a      	str	r2, [r3, #24]
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	681a      	ldr	r2, [r3, #0]
 8010888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801088a:	441a      	add	r2, r3
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	601a      	str	r2, [r3, #0]
 8010890:	687a      	ldr	r2, [r7, #4]
 8010892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010894:	1ad3      	subs	r3, r2, r3
 8010896:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2b00      	cmp	r3, #0
 801089c:	f47f aee1 	bne.w	8010662 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80108a0:	2300      	movs	r3, #0
}
 80108a2:	4618      	mov	r0, r3
 80108a4:	3738      	adds	r7, #56	; 0x38
 80108a6:	46bd      	mov	sp, r7
 80108a8:	bd80      	pop	{r7, pc}

080108aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b08c      	sub	sp, #48	; 0x30
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	60f8      	str	r0, [r7, #12]
 80108b2:	60b9      	str	r1, [r7, #8]
 80108b4:	607a      	str	r2, [r7, #4]
 80108b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	2200      	movs	r2, #0
 80108c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f107 0210 	add.w	r2, r7, #16
 80108c8:	4611      	mov	r1, r2
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7ff fc46 	bl	801015c <validate>
 80108d0:	4603      	mov	r3, r0
 80108d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80108d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d107      	bne.n	80108ee <f_write+0x44>
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	7d5b      	ldrb	r3, [r3, #21]
 80108e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80108e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d002      	beq.n	80108f4 <f_write+0x4a>
 80108ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108f2:	e16a      	b.n	8010bca <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	7d1b      	ldrb	r3, [r3, #20]
 80108f8:	f003 0302 	and.w	r3, r3, #2
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d101      	bne.n	8010904 <f_write+0x5a>
 8010900:	2307      	movs	r3, #7
 8010902:	e162      	b.n	8010bca <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	699a      	ldr	r2, [r3, #24]
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	441a      	add	r2, r3
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	429a      	cmp	r2, r3
 8010912:	f080 814c 	bcs.w	8010bae <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	699b      	ldr	r3, [r3, #24]
 801091a:	43db      	mvns	r3, r3
 801091c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801091e:	e146      	b.n	8010bae <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	699b      	ldr	r3, [r3, #24]
 8010924:	693a      	ldr	r2, [r7, #16]
 8010926:	8992      	ldrh	r2, [r2, #12]
 8010928:	fbb3 f1f2 	udiv	r1, r3, r2
 801092c:	fb02 f201 	mul.w	r2, r2, r1
 8010930:	1a9b      	subs	r3, r3, r2
 8010932:	2b00      	cmp	r3, #0
 8010934:	f040 80f1 	bne.w	8010b1a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	699b      	ldr	r3, [r3, #24]
 801093c:	693a      	ldr	r2, [r7, #16]
 801093e:	8992      	ldrh	r2, [r2, #12]
 8010940:	fbb3 f3f2 	udiv	r3, r3, r2
 8010944:	693a      	ldr	r2, [r7, #16]
 8010946:	8952      	ldrh	r2, [r2, #10]
 8010948:	3a01      	subs	r2, #1
 801094a:	4013      	ands	r3, r2
 801094c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801094e:	69bb      	ldr	r3, [r7, #24]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d143      	bne.n	80109dc <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	699b      	ldr	r3, [r3, #24]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d10c      	bne.n	8010976 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	689b      	ldr	r3, [r3, #8]
 8010960:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010964:	2b00      	cmp	r3, #0
 8010966:	d11a      	bne.n	801099e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	2100      	movs	r1, #0
 801096c:	4618      	mov	r0, r3
 801096e:	f7fd feea 	bl	800e746 <create_chain>
 8010972:	62b8      	str	r0, [r7, #40]	; 0x28
 8010974:	e013      	b.n	801099e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097a:	2b00      	cmp	r3, #0
 801097c:	d007      	beq.n	801098e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	4619      	mov	r1, r3
 8010984:	68f8      	ldr	r0, [r7, #12]
 8010986:	f7fd ff76 	bl	800e876 <clmt_clust>
 801098a:	62b8      	str	r0, [r7, #40]	; 0x28
 801098c:	e007      	b.n	801099e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801098e:	68fa      	ldr	r2, [r7, #12]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	69db      	ldr	r3, [r3, #28]
 8010994:	4619      	mov	r1, r3
 8010996:	4610      	mov	r0, r2
 8010998:	f7fd fed5 	bl	800e746 <create_chain>
 801099c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801099e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	f000 8109 	beq.w	8010bb8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80109a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109a8:	2b01      	cmp	r3, #1
 80109aa:	d104      	bne.n	80109b6 <f_write+0x10c>
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	2202      	movs	r2, #2
 80109b0:	755a      	strb	r2, [r3, #21]
 80109b2:	2302      	movs	r3, #2
 80109b4:	e109      	b.n	8010bca <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80109b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109bc:	d104      	bne.n	80109c8 <f_write+0x11e>
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	2201      	movs	r2, #1
 80109c2:	755a      	strb	r2, [r3, #21]
 80109c4:	2301      	movs	r3, #1
 80109c6:	e100      	b.n	8010bca <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109cc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d102      	bne.n	80109dc <f_write+0x132>
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80109da:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	7d1b      	ldrb	r3, [r3, #20]
 80109e0:	b25b      	sxtb	r3, r3
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	da18      	bge.n	8010a18 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	7858      	ldrb	r0, [r3, #1]
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6a1a      	ldr	r2, [r3, #32]
 80109f4:	2301      	movs	r3, #1
 80109f6:	f7fd f8af 	bl	800db58 <disk_write>
 80109fa:	4603      	mov	r3, r0
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d004      	beq.n	8010a0a <f_write+0x160>
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2201      	movs	r2, #1
 8010a04:	755a      	strb	r2, [r3, #21]
 8010a06:	2301      	movs	r3, #1
 8010a08:	e0df      	b.n	8010bca <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	7d1b      	ldrb	r3, [r3, #20]
 8010a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a12:	b2da      	uxtb	r2, r3
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010a18:	693a      	ldr	r2, [r7, #16]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	69db      	ldr	r3, [r3, #28]
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4610      	mov	r0, r2
 8010a22:	f7fd fc25 	bl	800e270 <clust2sect>
 8010a26:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a28:	697b      	ldr	r3, [r7, #20]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d104      	bne.n	8010a38 <f_write+0x18e>
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2202      	movs	r2, #2
 8010a32:	755a      	strb	r2, [r3, #21]
 8010a34:	2302      	movs	r3, #2
 8010a36:	e0c8      	b.n	8010bca <f_write+0x320>
			sect += csect;
 8010a38:	697a      	ldr	r2, [r7, #20]
 8010a3a:	69bb      	ldr	r3, [r7, #24]
 8010a3c:	4413      	add	r3, r2
 8010a3e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	899b      	ldrh	r3, [r3, #12]
 8010a44:	461a      	mov	r2, r3
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a4c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010a4e:	6a3b      	ldr	r3, [r7, #32]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d043      	beq.n	8010adc <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010a54:	69ba      	ldr	r2, [r7, #24]
 8010a56:	6a3b      	ldr	r3, [r7, #32]
 8010a58:	4413      	add	r3, r2
 8010a5a:	693a      	ldr	r2, [r7, #16]
 8010a5c:	8952      	ldrh	r2, [r2, #10]
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	d905      	bls.n	8010a6e <f_write+0x1c4>
					cc = fs->csize - csect;
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	895b      	ldrh	r3, [r3, #10]
 8010a66:	461a      	mov	r2, r3
 8010a68:	69bb      	ldr	r3, [r7, #24]
 8010a6a:	1ad3      	subs	r3, r2, r3
 8010a6c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	7858      	ldrb	r0, [r3, #1]
 8010a72:	6a3b      	ldr	r3, [r7, #32]
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	69f9      	ldr	r1, [r7, #28]
 8010a78:	f7fd f86e 	bl	800db58 <disk_write>
 8010a7c:	4603      	mov	r3, r0
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d004      	beq.n	8010a8c <f_write+0x1e2>
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2201      	movs	r2, #1
 8010a86:	755a      	strb	r2, [r3, #21]
 8010a88:	2301      	movs	r3, #1
 8010a8a:	e09e      	b.n	8010bca <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	6a1a      	ldr	r2, [r3, #32]
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	1ad3      	subs	r3, r2, r3
 8010a94:	6a3a      	ldr	r2, [r7, #32]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d918      	bls.n	8010acc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	6a1a      	ldr	r2, [r3, #32]
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	1ad3      	subs	r3, r2, r3
 8010aa8:	693a      	ldr	r2, [r7, #16]
 8010aaa:	8992      	ldrh	r2, [r2, #12]
 8010aac:	fb02 f303 	mul.w	r3, r2, r3
 8010ab0:	69fa      	ldr	r2, [r7, #28]
 8010ab2:	18d1      	adds	r1, r2, r3
 8010ab4:	693b      	ldr	r3, [r7, #16]
 8010ab6:	899b      	ldrh	r3, [r3, #12]
 8010ab8:	461a      	mov	r2, r3
 8010aba:	f7fd f90d 	bl	800dcd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	7d1b      	ldrb	r3, [r3, #20]
 8010ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010acc:	693b      	ldr	r3, [r7, #16]
 8010ace:	899b      	ldrh	r3, [r3, #12]
 8010ad0:	461a      	mov	r2, r3
 8010ad2:	6a3b      	ldr	r3, [r7, #32]
 8010ad4:	fb02 f303 	mul.w	r3, r2, r3
 8010ad8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010ada:	e04b      	b.n	8010b74 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	6a1b      	ldr	r3, [r3, #32]
 8010ae0:	697a      	ldr	r2, [r7, #20]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d016      	beq.n	8010b14 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	699a      	ldr	r2, [r3, #24]
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d210      	bcs.n	8010b14 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010af2:	693b      	ldr	r3, [r7, #16]
 8010af4:	7858      	ldrb	r0, [r3, #1]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010afc:	2301      	movs	r3, #1
 8010afe:	697a      	ldr	r2, [r7, #20]
 8010b00:	f7fd f80a 	bl	800db18 <disk_read>
 8010b04:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d004      	beq.n	8010b14 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2201      	movs	r2, #1
 8010b0e:	755a      	strb	r2, [r3, #21]
 8010b10:	2301      	movs	r3, #1
 8010b12:	e05a      	b.n	8010bca <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	697a      	ldr	r2, [r7, #20]
 8010b18:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	899b      	ldrh	r3, [r3, #12]
 8010b1e:	4618      	mov	r0, r3
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	699b      	ldr	r3, [r3, #24]
 8010b24:	693a      	ldr	r2, [r7, #16]
 8010b26:	8992      	ldrh	r2, [r2, #12]
 8010b28:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b2c:	fb02 f201 	mul.w	r2, r2, r1
 8010b30:	1a9b      	subs	r3, r3, r2
 8010b32:	1ac3      	subs	r3, r0, r3
 8010b34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d901      	bls.n	8010b42 <f_write+0x298>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	699b      	ldr	r3, [r3, #24]
 8010b4c:	693a      	ldr	r2, [r7, #16]
 8010b4e:	8992      	ldrh	r2, [r2, #12]
 8010b50:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b54:	fb02 f200 	mul.w	r2, r2, r0
 8010b58:	1a9b      	subs	r3, r3, r2
 8010b5a:	440b      	add	r3, r1
 8010b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b5e:	69f9      	ldr	r1, [r7, #28]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7fd f8b9 	bl	800dcd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	7d1b      	ldrb	r3, [r3, #20]
 8010b6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b6e:	b2da      	uxtb	r2, r3
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010b74:	69fa      	ldr	r2, [r7, #28]
 8010b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b78:	4413      	add	r3, r2
 8010b7a:	61fb      	str	r3, [r7, #28]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	699a      	ldr	r2, [r3, #24]
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	441a      	add	r2, r3
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	619a      	str	r2, [r3, #24]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	68da      	ldr	r2, [r3, #12]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	699b      	ldr	r3, [r3, #24]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	bf38      	it	cc
 8010b94:	461a      	movcc	r2, r3
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	60da      	str	r2, [r3, #12]
 8010b9a:	683b      	ldr	r3, [r7, #0]
 8010b9c:	681a      	ldr	r2, [r3, #0]
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba0:	441a      	add	r2, r3
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	601a      	str	r2, [r3, #0]
 8010ba6:	687a      	ldr	r2, [r7, #4]
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	1ad3      	subs	r3, r2, r3
 8010bac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	f47f aeb5 	bne.w	8010920 <f_write+0x76>
 8010bb6:	e000      	b.n	8010bba <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010bb8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	7d1b      	ldrb	r3, [r3, #20]
 8010bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bc2:	b2da      	uxtb	r2, r3
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3730      	adds	r7, #48	; 0x30
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b086      	sub	sp, #24
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f107 0208 	add.w	r2, r7, #8
 8010be0:	4611      	mov	r1, r2
 8010be2:	4618      	mov	r0, r3
 8010be4:	f7ff faba 	bl	801015c <validate>
 8010be8:	4603      	mov	r3, r0
 8010bea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010bec:	7dfb      	ldrb	r3, [r7, #23]
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d168      	bne.n	8010cc4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	7d1b      	ldrb	r3, [r3, #20]
 8010bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d062      	beq.n	8010cc4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	7d1b      	ldrb	r3, [r3, #20]
 8010c02:	b25b      	sxtb	r3, r3
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	da15      	bge.n	8010c34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	7858      	ldrb	r0, [r3, #1]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6a1a      	ldr	r2, [r3, #32]
 8010c16:	2301      	movs	r3, #1
 8010c18:	f7fc ff9e 	bl	800db58 <disk_write>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d001      	beq.n	8010c26 <f_sync+0x54>
 8010c22:	2301      	movs	r3, #1
 8010c24:	e04f      	b.n	8010cc6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	7d1b      	ldrb	r3, [r3, #20]
 8010c2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c2e:	b2da      	uxtb	r2, r3
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010c34:	f7fc fce0 	bl	800d5f8 <get_fattime>
 8010c38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c40:	4619      	mov	r1, r3
 8010c42:	4610      	mov	r0, r2
 8010c44:	f7fd fa76 	bl	800e134 <move_window>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010c4c:	7dfb      	ldrb	r3, [r7, #23]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d138      	bne.n	8010cc4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	330b      	adds	r3, #11
 8010c5c:	781a      	ldrb	r2, [r3, #0]
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	330b      	adds	r3, #11
 8010c62:	f042 0220 	orr.w	r2, r2, #32
 8010c66:	b2d2      	uxtb	r2, r2
 8010c68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	6818      	ldr	r0, [r3, #0]
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	689b      	ldr	r3, [r3, #8]
 8010c72:	461a      	mov	r2, r3
 8010c74:	68f9      	ldr	r1, [r7, #12]
 8010c76:	f7fd fffb 	bl	800ec70 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f103 021c 	add.w	r2, r3, #28
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	4619      	mov	r1, r3
 8010c86:	4610      	mov	r0, r2
 8010c88:	f7fc fffa 	bl	800dc80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	3316      	adds	r3, #22
 8010c90:	6939      	ldr	r1, [r7, #16]
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fc fff4 	bl	800dc80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	3312      	adds	r3, #18
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fc ffd3 	bl	800dc4a <st_word>
					fs->wflag = 1;
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7fd fa6f 	bl	800e190 <sync_fs>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	7d1b      	ldrb	r3, [r3, #20]
 8010cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010cbe:	b2da      	uxtb	r2, r3
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3718      	adds	r7, #24
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bd80      	pop	{r7, pc}

08010cce <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010cce:	b580      	push	{r7, lr}
 8010cd0:	b084      	sub	sp, #16
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010cd6:	6878      	ldr	r0, [r7, #4]
 8010cd8:	f7ff ff7b 	bl	8010bd2 <f_sync>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010ce0:	7bfb      	ldrb	r3, [r7, #15]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d118      	bne.n	8010d18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f107 0208 	add.w	r2, r7, #8
 8010cec:	4611      	mov	r1, r2
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7ff fa34 	bl	801015c <validate>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010cf8:	7bfb      	ldrb	r3, [r7, #15]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d10c      	bne.n	8010d18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	691b      	ldr	r3, [r3, #16]
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7fd f972 	bl	800dfec <dec_lock>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d102      	bne.n	8010d18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	2200      	movs	r2, #0
 8010d16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010d22:	b590      	push	{r4, r7, lr}
 8010d24:	b093      	sub	sp, #76	; 0x4c
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010d2a:	f107 010c 	add.w	r1, r7, #12
 8010d2e:	1d3b      	adds	r3, r7, #4
 8010d30:	2200      	movs	r2, #0
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7fe ff86 	bl	800fc44 <find_volume>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010d3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d131      	bne.n	8010daa <f_chdir+0x88>
		dj.obj.fs = fs;
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	f107 0310 	add.w	r3, r7, #16
 8010d50:	4611      	mov	r1, r2
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7fe fe46 	bl	800f9e4 <follow_path>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 8010d5e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d11a      	bne.n	8010d9c <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010d66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d6a:	b25b      	sxtb	r3, r3
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	da03      	bge.n	8010d78 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	69ba      	ldr	r2, [r7, #24]
 8010d74:	61da      	str	r2, [r3, #28]
 8010d76:	e011      	b.n	8010d9c <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8010d78:	7dbb      	ldrb	r3, [r7, #22]
 8010d7a:	f003 0310 	and.w	r3, r3, #16
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d009      	beq.n	8010d96 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d86:	68fc      	ldr	r4, [r7, #12]
 8010d88:	4611      	mov	r1, r2
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fd ff51 	bl	800ec32 <ld_clust>
 8010d90:	4603      	mov	r3, r0
 8010d92:	61e3      	str	r3, [r4, #28]
 8010d94:	e002      	b.n	8010d9c <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8010d96:	2305      	movs	r3, #5
 8010d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010d9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010da0:	2b04      	cmp	r3, #4
 8010da2:	d102      	bne.n	8010daa <f_chdir+0x88>
 8010da4:	2305      	movs	r3, #5
 8010da6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 8010daa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	374c      	adds	r7, #76	; 0x4c
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd90      	pop	{r4, r7, pc}

08010db6 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010db6:	b580      	push	{r7, lr}
 8010db8:	b090      	sub	sp, #64	; 0x40
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
 8010dbe:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	f107 0208 	add.w	r2, r7, #8
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	4618      	mov	r0, r3
 8010dca:	f7ff f9c7 	bl	801015c <validate>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010dd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d103      	bne.n	8010de4 <f_lseek+0x2e>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	7d5b      	ldrb	r3, [r3, #21]
 8010de0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010de4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d002      	beq.n	8010df2 <f_lseek+0x3c>
 8010dec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010df0:	e201      	b.n	80111f6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	f000 80d9 	beq.w	8010fae <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e02:	d15a      	bne.n	8010eba <f_lseek+0x104>
			tbl = fp->cltbl;
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e08:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0c:	1d1a      	adds	r2, r3, #4
 8010e0e:	627a      	str	r2, [r7, #36]	; 0x24
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	617b      	str	r3, [r7, #20]
 8010e14:	2302      	movs	r3, #2
 8010e16:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	689b      	ldr	r3, [r3, #8]
 8010e1c:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d03a      	beq.n	8010e9a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e26:	613b      	str	r3, [r7, #16]
 8010e28:	2300      	movs	r3, #0
 8010e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2e:	3302      	adds	r3, #2
 8010e30:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e34:	60fb      	str	r3, [r7, #12]
 8010e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e38:	3301      	adds	r3, #1
 8010e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010e40:	4618      	mov	r0, r3
 8010e42:	f7fd fa34 	bl	800e2ae <get_fat>
 8010e46:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d804      	bhi.n	8010e58 <f_lseek+0xa2>
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2202      	movs	r2, #2
 8010e52:	755a      	strb	r2, [r3, #21]
 8010e54:	2302      	movs	r3, #2
 8010e56:	e1ce      	b.n	80111f6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e5e:	d104      	bne.n	8010e6a <f_lseek+0xb4>
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2201      	movs	r2, #1
 8010e64:	755a      	strb	r2, [r3, #21]
 8010e66:	2301      	movs	r3, #1
 8010e68:	e1c5      	b.n	80111f6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e70:	429a      	cmp	r2, r3
 8010e72:	d0de      	beq.n	8010e32 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010e74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d809      	bhi.n	8010e90 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	1d1a      	adds	r2, r3, #4
 8010e80:	627a      	str	r2, [r7, #36]	; 0x24
 8010e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e84:	601a      	str	r2, [r3, #0]
 8010e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e88:	1d1a      	adds	r2, r3, #4
 8010e8a:	627a      	str	r2, [r7, #36]	; 0x24
 8010e8c:	693a      	ldr	r2, [r7, #16]
 8010e8e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	6a1b      	ldr	r3, [r3, #32]
 8010e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d3c4      	bcc.n	8010e24 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ea0:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8010ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ea4:	697b      	ldr	r3, [r7, #20]
 8010ea6:	429a      	cmp	r2, r3
 8010ea8:	d803      	bhi.n	8010eb2 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	2200      	movs	r2, #0
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	e19f      	b.n	80111f2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8010eb2:	2311      	movs	r3, #17
 8010eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010eb8:	e19b      	b.n	80111f2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	68db      	ldr	r3, [r3, #12]
 8010ebe:	683a      	ldr	r2, [r7, #0]
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d902      	bls.n	8010eca <f_lseek+0x114>
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	683a      	ldr	r2, [r7, #0]
 8010ece:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8010ed0:	683b      	ldr	r3, [r7, #0]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	f000 818d 	beq.w	80111f2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010ed8:	683b      	ldr	r3, [r7, #0]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	4619      	mov	r1, r3
 8010ede:	6878      	ldr	r0, [r7, #4]
 8010ee0:	f7fd fcc9 	bl	800e876 <clmt_clust>
 8010ee4:	4602      	mov	r2, r0
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010eea:	68ba      	ldr	r2, [r7, #8]
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	69db      	ldr	r3, [r3, #28]
 8010ef0:	4619      	mov	r1, r3
 8010ef2:	4610      	mov	r0, r2
 8010ef4:	f7fd f9bc 	bl	800e270 <clust2sect>
 8010ef8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d104      	bne.n	8010f0a <f_lseek+0x154>
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	2202      	movs	r2, #2
 8010f04:	755a      	strb	r2, [r3, #21]
 8010f06:	2302      	movs	r3, #2
 8010f08:	e175      	b.n	80111f6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	3b01      	subs	r3, #1
 8010f0e:	68ba      	ldr	r2, [r7, #8]
 8010f10:	8992      	ldrh	r2, [r2, #12]
 8010f12:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f16:	68ba      	ldr	r2, [r7, #8]
 8010f18:	8952      	ldrh	r2, [r2, #10]
 8010f1a:	3a01      	subs	r2, #1
 8010f1c:	4013      	ands	r3, r2
 8010f1e:	69ba      	ldr	r2, [r7, #24]
 8010f20:	4413      	add	r3, r2
 8010f22:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	699b      	ldr	r3, [r3, #24]
 8010f28:	68ba      	ldr	r2, [r7, #8]
 8010f2a:	8992      	ldrh	r2, [r2, #12]
 8010f2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f30:	fb02 f201 	mul.w	r2, r2, r1
 8010f34:	1a9b      	subs	r3, r3, r2
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	f000 815b 	beq.w	80111f2 <f_lseek+0x43c>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	6a1b      	ldr	r3, [r3, #32]
 8010f40:	69ba      	ldr	r2, [r7, #24]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	f000 8155 	beq.w	80111f2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	7d1b      	ldrb	r3, [r3, #20]
 8010f4c:	b25b      	sxtb	r3, r3
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	da18      	bge.n	8010f84 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	7858      	ldrb	r0, [r3, #1]
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	6a1a      	ldr	r2, [r3, #32]
 8010f60:	2301      	movs	r3, #1
 8010f62:	f7fc fdf9 	bl	800db58 <disk_write>
 8010f66:	4603      	mov	r3, r0
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d004      	beq.n	8010f76 <f_lseek+0x1c0>
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2201      	movs	r2, #1
 8010f70:	755a      	strb	r2, [r3, #21]
 8010f72:	2301      	movs	r3, #1
 8010f74:	e13f      	b.n	80111f6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	7d1b      	ldrb	r3, [r3, #20]
 8010f7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f7e:	b2da      	uxtb	r2, r3
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	7858      	ldrb	r0, [r3, #1]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f8e:	2301      	movs	r3, #1
 8010f90:	69ba      	ldr	r2, [r7, #24]
 8010f92:	f7fc fdc1 	bl	800db18 <disk_read>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d004      	beq.n	8010fa6 <f_lseek+0x1f0>
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	755a      	strb	r2, [r3, #21]
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e127      	b.n	80111f6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	69ba      	ldr	r2, [r7, #24]
 8010faa:	621a      	str	r2, [r3, #32]
 8010fac:	e121      	b.n	80111f2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	68db      	ldr	r3, [r3, #12]
 8010fb2:	683a      	ldr	r2, [r7, #0]
 8010fb4:	429a      	cmp	r2, r3
 8010fb6:	d908      	bls.n	8010fca <f_lseek+0x214>
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	7d1b      	ldrb	r3, [r3, #20]
 8010fbc:	f003 0302 	and.w	r3, r3, #2
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d102      	bne.n	8010fca <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	699b      	ldr	r3, [r3, #24]
 8010fce:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010fd8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010fda:	683b      	ldr	r3, [r7, #0]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	f000 80b5 	beq.w	801114c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8010fe2:	68bb      	ldr	r3, [r7, #8]
 8010fe4:	895b      	ldrh	r3, [r3, #10]
 8010fe6:	461a      	mov	r2, r3
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	899b      	ldrh	r3, [r3, #12]
 8010fec:	fb03 f302 	mul.w	r3, r3, r2
 8010ff0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d01b      	beq.n	8011030 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	1e5a      	subs	r2, r3, #1
 8010ffc:	69fb      	ldr	r3, [r7, #28]
 8010ffe:	fbb2 f2f3 	udiv	r2, r2, r3
 8011002:	6a3b      	ldr	r3, [r7, #32]
 8011004:	1e59      	subs	r1, r3, #1
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801100c:	429a      	cmp	r2, r3
 801100e:	d30f      	bcc.n	8011030 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8011010:	6a3b      	ldr	r3, [r7, #32]
 8011012:	1e5a      	subs	r2, r3, #1
 8011014:	69fb      	ldr	r3, [r7, #28]
 8011016:	425b      	negs	r3, r3
 8011018:	401a      	ands	r2, r3
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	683a      	ldr	r2, [r7, #0]
 8011024:	1ad3      	subs	r3, r2, r3
 8011026:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	69db      	ldr	r3, [r3, #28]
 801102c:	63bb      	str	r3, [r7, #56]	; 0x38
 801102e:	e022      	b.n	8011076 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	689b      	ldr	r3, [r3, #8]
 8011034:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8011036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011038:	2b00      	cmp	r3, #0
 801103a:	d119      	bne.n	8011070 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	2100      	movs	r1, #0
 8011040:	4618      	mov	r0, r3
 8011042:	f7fd fb80 	bl	800e746 <create_chain>
 8011046:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801104a:	2b01      	cmp	r3, #1
 801104c:	d104      	bne.n	8011058 <f_lseek+0x2a2>
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2202      	movs	r2, #2
 8011052:	755a      	strb	r2, [r3, #21]
 8011054:	2302      	movs	r3, #2
 8011056:	e0ce      	b.n	80111f6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801105a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801105e:	d104      	bne.n	801106a <f_lseek+0x2b4>
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	2201      	movs	r2, #1
 8011064:	755a      	strb	r2, [r3, #21]
 8011066:	2301      	movs	r3, #1
 8011068:	e0c5      	b.n	80111f6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801106e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011074:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8011076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011078:	2b00      	cmp	r3, #0
 801107a:	d067      	beq.n	801114c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801107c:	e03a      	b.n	80110f4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801107e:	683a      	ldr	r2, [r7, #0]
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	1ad3      	subs	r3, r2, r3
 8011084:	603b      	str	r3, [r7, #0]
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	699a      	ldr	r2, [r3, #24]
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	441a      	add	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	7d1b      	ldrb	r3, [r3, #20]
 8011096:	f003 0302 	and.w	r3, r3, #2
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00b      	beq.n	80110b6 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110a2:	4618      	mov	r0, r3
 80110a4:	f7fd fb4f 	bl	800e746 <create_chain>
 80110a8:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80110aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d108      	bne.n	80110c2 <f_lseek+0x30c>
							ofs = 0; break;
 80110b0:	2300      	movs	r3, #0
 80110b2:	603b      	str	r3, [r7, #0]
 80110b4:	e022      	b.n	80110fc <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7fd f8f7 	bl	800e2ae <get_fat>
 80110c0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110c8:	d104      	bne.n	80110d4 <f_lseek+0x31e>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2201      	movs	r2, #1
 80110ce:	755a      	strb	r2, [r3, #21]
 80110d0:	2301      	movs	r3, #1
 80110d2:	e090      	b.n	80111f6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80110d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d6:	2b01      	cmp	r3, #1
 80110d8:	d904      	bls.n	80110e4 <f_lseek+0x32e>
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	6a1b      	ldr	r3, [r3, #32]
 80110de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110e0:	429a      	cmp	r2, r3
 80110e2:	d304      	bcc.n	80110ee <f_lseek+0x338>
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	2202      	movs	r2, #2
 80110e8:	755a      	strb	r2, [r3, #21]
 80110ea:	2302      	movs	r3, #2
 80110ec:	e083      	b.n	80111f6 <f_lseek+0x440>
					fp->clust = clst;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110f2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	69fb      	ldr	r3, [r7, #28]
 80110f8:	429a      	cmp	r2, r3
 80110fa:	d8c0      	bhi.n	801107e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	699a      	ldr	r2, [r3, #24]
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	441a      	add	r2, r3
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	899b      	ldrh	r3, [r3, #12]
 801110c:	461a      	mov	r2, r3
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	fbb3 f1f2 	udiv	r1, r3, r2
 8011114:	fb02 f201 	mul.w	r2, r2, r1
 8011118:	1a9b      	subs	r3, r3, r2
 801111a:	2b00      	cmp	r3, #0
 801111c:	d016      	beq.n	801114c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011122:	4618      	mov	r0, r3
 8011124:	f7fd f8a4 	bl	800e270 <clust2sect>
 8011128:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801112a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801112c:	2b00      	cmp	r3, #0
 801112e:	d104      	bne.n	801113a <f_lseek+0x384>
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	2202      	movs	r2, #2
 8011134:	755a      	strb	r2, [r3, #21]
 8011136:	2302      	movs	r3, #2
 8011138:	e05d      	b.n	80111f6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	899b      	ldrh	r3, [r3, #12]
 801113e:	461a      	mov	r2, r3
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	fbb3 f3f2 	udiv	r3, r3, r2
 8011146:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011148:	4413      	add	r3, r2
 801114a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	699a      	ldr	r2, [r3, #24]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	429a      	cmp	r2, r3
 8011156:	d90a      	bls.n	801116e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	699a      	ldr	r2, [r3, #24]
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	7d1b      	ldrb	r3, [r3, #20]
 8011164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011168:	b2da      	uxtb	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	699b      	ldr	r3, [r3, #24]
 8011172:	68ba      	ldr	r2, [r7, #8]
 8011174:	8992      	ldrh	r2, [r2, #12]
 8011176:	fbb3 f1f2 	udiv	r1, r3, r2
 801117a:	fb02 f201 	mul.w	r2, r2, r1
 801117e:	1a9b      	subs	r3, r3, r2
 8011180:	2b00      	cmp	r3, #0
 8011182:	d036      	beq.n	80111f2 <f_lseek+0x43c>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6a1b      	ldr	r3, [r3, #32]
 8011188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801118a:	429a      	cmp	r2, r3
 801118c:	d031      	beq.n	80111f2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	7d1b      	ldrb	r3, [r3, #20]
 8011192:	b25b      	sxtb	r3, r3
 8011194:	2b00      	cmp	r3, #0
 8011196:	da18      	bge.n	80111ca <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	7858      	ldrb	r0, [r3, #1]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a1a      	ldr	r2, [r3, #32]
 80111a6:	2301      	movs	r3, #1
 80111a8:	f7fc fcd6 	bl	800db58 <disk_write>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d004      	beq.n	80111bc <f_lseek+0x406>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2201      	movs	r2, #1
 80111b6:	755a      	strb	r2, [r3, #21]
 80111b8:	2301      	movs	r3, #1
 80111ba:	e01c      	b.n	80111f6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	7d1b      	ldrb	r3, [r3, #20]
 80111c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	7858      	ldrb	r0, [r3, #1]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80111d4:	2301      	movs	r3, #1
 80111d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111d8:	f7fc fc9e 	bl	800db18 <disk_read>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d004      	beq.n	80111ec <f_lseek+0x436>
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2201      	movs	r2, #1
 80111e6:	755a      	strb	r2, [r3, #21]
 80111e8:	2301      	movs	r3, #1
 80111ea:	e004      	b.n	80111f6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111f0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80111f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3740      	adds	r7, #64	; 0x40
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b0a0      	sub	sp, #128	; 0x80
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8011206:	2300      	movs	r3, #0
 8011208:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801120a:	f107 010c 	add.w	r1, r7, #12
 801120e:	1d3b      	adds	r3, r7, #4
 8011210:	2202      	movs	r2, #2
 8011212:	4618      	mov	r0, r3
 8011214:	f7fe fd16 	bl	800fc44 <find_volume>
 8011218:	4603      	mov	r3, r0
 801121a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8011222:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011226:	2b00      	cmp	r3, #0
 8011228:	f040 80a4 	bne.w	8011374 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011232:	4611      	mov	r1, r2
 8011234:	4618      	mov	r0, r3
 8011236:	f7fe fbd5 	bl	800f9e4 <follow_path>
 801123a:	4603      	mov	r3, r0
 801123c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8011240:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011244:	2b00      	cmp	r3, #0
 8011246:	d108      	bne.n	801125a <f_unlink+0x5c>
 8011248:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 801124c:	f003 0320 	and.w	r3, r3, #32
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8011254:	2306      	movs	r3, #6
 8011256:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801125a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801125e:	2b00      	cmp	r3, #0
 8011260:	d108      	bne.n	8011274 <f_unlink+0x76>
 8011262:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011266:	2102      	movs	r1, #2
 8011268:	4618      	mov	r0, r3
 801126a:	f7fc fdb3 	bl	800ddd4 <chk_lock>
 801126e:	4603      	mov	r3, r0
 8011270:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8011274:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011278:	2b00      	cmp	r3, #0
 801127a:	d17b      	bne.n	8011374 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801127c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8011280:	b25b      	sxtb	r3, r3
 8011282:	2b00      	cmp	r3, #0
 8011284:	da03      	bge.n	801128e <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8011286:	2306      	movs	r3, #6
 8011288:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801128c:	e008      	b.n	80112a0 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 801128e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8011292:	f003 0301 	and.w	r3, r3, #1
 8011296:	2b00      	cmp	r3, #0
 8011298:	d002      	beq.n	80112a0 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801129a:	2307      	movs	r3, #7
 801129c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80112a0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d13d      	bne.n	8011324 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80112ac:	4611      	mov	r1, r2
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fd fcbf 	bl	800ec32 <ld_clust>
 80112b4:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80112b6:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80112ba:	f003 0310 	and.w	r3, r3, #16
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d030      	beq.n	8011324 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	69db      	ldr	r3, [r3, #28]
 80112c6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80112c8:	429a      	cmp	r2, r3
 80112ca:	d103      	bne.n	80112d4 <f_unlink+0xd6>
						res = FR_DENIED;
 80112cc:	2307      	movs	r3, #7
 80112ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80112d2:	e027      	b.n	8011324 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80112d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80112da:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80112dc:	f107 0310 	add.w	r3, r7, #16
 80112e0:	2100      	movs	r1, #0
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fd faff 	bl	800e8e6 <dir_sdi>
 80112e8:	4603      	mov	r3, r0
 80112ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 80112ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d116      	bne.n	8011324 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80112f6:	f107 0310 	add.w	r3, r7, #16
 80112fa:	2100      	movs	r1, #0
 80112fc:	4618      	mov	r0, r3
 80112fe:	f7fd fec3 	bl	800f088 <dir_read>
 8011302:	4603      	mov	r3, r0
 8011304:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8011308:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801130c:	2b00      	cmp	r3, #0
 801130e:	d102      	bne.n	8011316 <f_unlink+0x118>
 8011310:	2307      	movs	r3, #7
 8011312:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8011316:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801131a:	2b04      	cmp	r3, #4
 801131c:	d102      	bne.n	8011324 <f_unlink+0x126>
 801131e:	2300      	movs	r3, #0
 8011320:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8011324:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011328:	2b00      	cmp	r3, #0
 801132a:	d123      	bne.n	8011374 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801132c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8011330:	4618      	mov	r0, r3
 8011332:	f7fe f909 	bl	800f548 <dir_remove>
 8011336:	4603      	mov	r3, r0
 8011338:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801133c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10c      	bne.n	801135e <f_unlink+0x160>
 8011344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011346:	2b00      	cmp	r3, #0
 8011348:	d009      	beq.n	801135e <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801134a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801134e:	2200      	movs	r2, #0
 8011350:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011352:	4618      	mov	r0, r3
 8011354:	f7fd f992 	bl	800e67c <remove_chain>
 8011358:	4603      	mov	r3, r0
 801135a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801135e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8011362:	2b00      	cmp	r3, #0
 8011364:	d106      	bne.n	8011374 <f_unlink+0x176>
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	4618      	mov	r0, r3
 801136a:	f7fc ff11 	bl	800e190 <sync_fs>
 801136e:	4603      	mov	r3, r0
 8011370:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8011374:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8011378:	4618      	mov	r0, r3
 801137a:	3780      	adds	r7, #128	; 0x80
 801137c:	46bd      	mov	sp, r7
 801137e:	bd80      	pop	{r7, pc}

08011380 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b098      	sub	sp, #96	; 0x60
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011388:	f107 010c 	add.w	r1, r7, #12
 801138c:	1d3b      	adds	r3, r7, #4
 801138e:	2202      	movs	r2, #2
 8011390:	4618      	mov	r0, r3
 8011392:	f7fe fc57 	bl	800fc44 <find_volume>
 8011396:	4603      	mov	r3, r0
 8011398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80113a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	f040 80ff 	bne.w	80115a8 <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80113aa:	687a      	ldr	r2, [r7, #4]
 80113ac:	f107 0310 	add.w	r3, r7, #16
 80113b0:	4611      	mov	r1, r2
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fe fb16 	bl	800f9e4 <follow_path>
 80113b8:	4603      	mov	r3, r0
 80113ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80113be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d102      	bne.n	80113cc <f_mkdir+0x4c>
 80113c6:	2308      	movs	r3, #8
 80113c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80113cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113d0:	2b04      	cmp	r3, #4
 80113d2:	d108      	bne.n	80113e6 <f_mkdir+0x66>
 80113d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80113d8:	f003 0320 	and.w	r3, r3, #32
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d002      	beq.n	80113e6 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80113e0:	2306      	movs	r3, #6
 80113e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80113e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113ea:	2b04      	cmp	r3, #4
 80113ec:	f040 80dc 	bne.w	80115a8 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80113f0:	f107 0310 	add.w	r3, r7, #16
 80113f4:	2100      	movs	r1, #0
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7fd f9a5 	bl	800e746 <create_chain>
 80113fc:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	895b      	ldrh	r3, [r3, #10]
 8011402:	461a      	mov	r2, r3
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	899b      	ldrh	r3, [r3, #12]
 8011408:	fb03 f302 	mul.w	r3, r3, r2
 801140c:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 801140e:	2300      	movs	r3, #0
 8011410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011416:	2b00      	cmp	r3, #0
 8011418:	d102      	bne.n	8011420 <f_mkdir+0xa0>
 801141a:	2307      	movs	r3, #7
 801141c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8011420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011422:	2b01      	cmp	r3, #1
 8011424:	d102      	bne.n	801142c <f_mkdir+0xac>
 8011426:	2302      	movs	r3, #2
 8011428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801142c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801142e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011432:	d102      	bne.n	801143a <f_mkdir+0xba>
 8011434:	2301      	movs	r3, #1
 8011436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801143a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801143e:	2b00      	cmp	r3, #0
 8011440:	d106      	bne.n	8011450 <f_mkdir+0xd0>
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	4618      	mov	r0, r3
 8011446:	f7fc fe31 	bl	800e0ac <sync_window>
 801144a:	4603      	mov	r3, r0
 801144c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8011450:	f7fc f8d2 	bl	800d5f8 <get_fattime>
 8011454:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011456:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801145a:	2b00      	cmp	r3, #0
 801145c:	d16c      	bne.n	8011538 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011462:	4618      	mov	r0, r3
 8011464:	f7fc ff04 	bl	800e270 <clust2sect>
 8011468:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	333c      	adds	r3, #60	; 0x3c
 801146e:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	899b      	ldrh	r3, [r3, #12]
 8011474:	461a      	mov	r2, r3
 8011476:	2100      	movs	r1, #0
 8011478:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801147a:	f7fc fc4e 	bl	800dd1a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801147e:	220b      	movs	r2, #11
 8011480:	2120      	movs	r1, #32
 8011482:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011484:	f7fc fc49 	bl	800dd1a <mem_set>
					dir[DIR_Name] = '.';
 8011488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801148a:	222e      	movs	r2, #46	; 0x2e
 801148c:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801148e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011490:	330b      	adds	r3, #11
 8011492:	2210      	movs	r2, #16
 8011494:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011498:	3316      	adds	r3, #22
 801149a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801149c:	4618      	mov	r0, r3
 801149e:	f7fc fbef 	bl	800dc80 <st_dword>
					st_clust(fs, dir, dcl);
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7fd fbe1 	bl	800ec70 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80114ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114b0:	3320      	adds	r3, #32
 80114b2:	2220      	movs	r2, #32
 80114b4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fc fc0e 	bl	800dcd8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80114bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114be:	3321      	adds	r3, #33	; 0x21
 80114c0:	222e      	movs	r2, #46	; 0x2e
 80114c2:	701a      	strb	r2, [r3, #0]
 80114c4:	69bb      	ldr	r3, [r7, #24]
 80114c6:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	2b03      	cmp	r3, #3
 80114ce:	d106      	bne.n	80114de <f_mkdir+0x15e>
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d101      	bne.n	80114de <f_mkdir+0x15e>
 80114da:	2300      	movs	r3, #0
 80114dc:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80114de:	68f8      	ldr	r0, [r7, #12]
 80114e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114e2:	3320      	adds	r3, #32
 80114e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80114e6:	4619      	mov	r1, r3
 80114e8:	f7fd fbc2 	bl	800ec70 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	895b      	ldrh	r3, [r3, #10]
 80114f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80114f2:	e01c      	b.n	801152e <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 80114f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114f6:	1c5a      	adds	r2, r3, #1
 80114f8:	657a      	str	r2, [r7, #84]	; 0x54
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	2201      	movs	r2, #1
 8011502:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	4618      	mov	r0, r3
 8011508:	f7fc fdd0 	bl	800e0ac <sync_window>
 801150c:	4603      	mov	r3, r0
 801150e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8011512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011516:	2b00      	cmp	r3, #0
 8011518:	d10d      	bne.n	8011536 <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	899b      	ldrh	r3, [r3, #12]
 801151e:	461a      	mov	r2, r3
 8011520:	2100      	movs	r1, #0
 8011522:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011524:	f7fc fbf9 	bl	800dd1a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011528:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801152a:	3b01      	subs	r3, #1
 801152c:	65bb      	str	r3, [r7, #88]	; 0x58
 801152e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011530:	2b00      	cmp	r3, #0
 8011532:	d1df      	bne.n	80114f4 <f_mkdir+0x174>
 8011534:	e000      	b.n	8011538 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8011536:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8011538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801153c:	2b00      	cmp	r3, #0
 801153e:	d107      	bne.n	8011550 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011540:	f107 0310 	add.w	r3, r7, #16
 8011544:	4618      	mov	r0, r3
 8011546:	f7fd ff07 	bl	800f358 <dir_register>
 801154a:	4603      	mov	r3, r0
 801154c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8011550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011554:	2b00      	cmp	r3, #0
 8011556:	d120      	bne.n	801159a <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8011558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155a:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801155c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801155e:	3316      	adds	r3, #22
 8011560:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8011562:	4618      	mov	r0, r3
 8011564:	f7fc fb8c 	bl	800dc80 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801156c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801156e:	4618      	mov	r0, r3
 8011570:	f7fd fb7e 	bl	800ec70 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8011574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011576:	330b      	adds	r3, #11
 8011578:	2210      	movs	r2, #16
 801157a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	2201      	movs	r2, #1
 8011580:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8011582:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011586:	2b00      	cmp	r3, #0
 8011588:	d10e      	bne.n	80115a8 <f_mkdir+0x228>
					res = sync_fs(fs);
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	4618      	mov	r0, r3
 801158e:	f7fc fdff 	bl	800e190 <sync_fs>
 8011592:	4603      	mov	r3, r0
 8011594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011598:	e006      	b.n	80115a8 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 801159a:	f107 0310 	add.w	r3, r7, #16
 801159e:	2200      	movs	r2, #0
 80115a0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fd f86a 	bl	800e67c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80115a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3760      	adds	r7, #96	; 0x60
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}

080115b4 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b088      	sub	sp, #32
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
	int n = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80115c8:	e01b      	b.n	8011602 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80115ca:	f107 0310 	add.w	r3, r7, #16
 80115ce:	f107 0114 	add.w	r1, r7, #20
 80115d2:	2201      	movs	r2, #1
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f7ff f809 	bl	80105ec <f_read>
		if (rc != 1) break;
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	2b01      	cmp	r3, #1
 80115de:	d116      	bne.n	801160e <f_gets+0x5a>
		c = s[0];
 80115e0:	7d3b      	ldrb	r3, [r7, #20]
 80115e2:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
 80115e6:	2b0d      	cmp	r3, #13
 80115e8:	d100      	bne.n	80115ec <f_gets+0x38>
 80115ea:	e00a      	b.n	8011602 <f_gets+0x4e>
		*p++ = c;
 80115ec:	69bb      	ldr	r3, [r7, #24]
 80115ee:	1c5a      	adds	r2, r3, #1
 80115f0:	61ba      	str	r2, [r7, #24]
 80115f2:	7dfa      	ldrb	r2, [r7, #23]
 80115f4:	701a      	strb	r2, [r3, #0]
		n++;
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	3301      	adds	r3, #1
 80115fa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80115fc:	7dfb      	ldrb	r3, [r7, #23]
 80115fe:	2b0a      	cmp	r3, #10
 8011600:	d007      	beq.n	8011612 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	3b01      	subs	r3, #1
 8011606:	69fa      	ldr	r2, [r7, #28]
 8011608:	429a      	cmp	r2, r3
 801160a:	dbde      	blt.n	80115ca <f_gets+0x16>
 801160c:	e002      	b.n	8011614 <f_gets+0x60>
		if (rc != 1) break;
 801160e:	bf00      	nop
 8011610:	e000      	b.n	8011614 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8011612:	bf00      	nop
	}
	*p = 0;
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	2200      	movs	r2, #0
 8011618:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d001      	beq.n	8011624 <f_gets+0x70>
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	e000      	b.n	8011626 <f_gets+0x72>
 8011624:	2300      	movs	r3, #0
}
 8011626:	4618      	mov	r0, r3
 8011628:	3720      	adds	r7, #32
 801162a:	46bd      	mov	sp, r7
 801162c:	bd80      	pop	{r7, pc}
	...

08011630 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011630:	b480      	push	{r7}
 8011632:	b087      	sub	sp, #28
 8011634:	af00      	add	r7, sp, #0
 8011636:	60f8      	str	r0, [r7, #12]
 8011638:	60b9      	str	r1, [r7, #8]
 801163a:	4613      	mov	r3, r2
 801163c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801163e:	2301      	movs	r3, #1
 8011640:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011642:	2300      	movs	r3, #0
 8011644:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011646:	4b1f      	ldr	r3, [pc, #124]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011648:	7a5b      	ldrb	r3, [r3, #9]
 801164a:	b2db      	uxtb	r3, r3
 801164c:	2b00      	cmp	r3, #0
 801164e:	d131      	bne.n	80116b4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011650:	4b1c      	ldr	r3, [pc, #112]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011652:	7a5b      	ldrb	r3, [r3, #9]
 8011654:	b2db      	uxtb	r3, r3
 8011656:	461a      	mov	r2, r3
 8011658:	4b1a      	ldr	r3, [pc, #104]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 801165a:	2100      	movs	r1, #0
 801165c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801165e:	4b19      	ldr	r3, [pc, #100]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011660:	7a5b      	ldrb	r3, [r3, #9]
 8011662:	b2db      	uxtb	r3, r3
 8011664:	4a17      	ldr	r2, [pc, #92]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011666:	009b      	lsls	r3, r3, #2
 8011668:	4413      	add	r3, r2
 801166a:	68fa      	ldr	r2, [r7, #12]
 801166c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801166e:	4b15      	ldr	r3, [pc, #84]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011670:	7a5b      	ldrb	r3, [r3, #9]
 8011672:	b2db      	uxtb	r3, r3
 8011674:	461a      	mov	r2, r3
 8011676:	4b13      	ldr	r3, [pc, #76]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011678:	4413      	add	r3, r2
 801167a:	79fa      	ldrb	r2, [r7, #7]
 801167c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801167e:	4b11      	ldr	r3, [pc, #68]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 8011680:	7a5b      	ldrb	r3, [r3, #9]
 8011682:	b2db      	uxtb	r3, r3
 8011684:	1c5a      	adds	r2, r3, #1
 8011686:	b2d1      	uxtb	r1, r2
 8011688:	4a0e      	ldr	r2, [pc, #56]	; (80116c4 <FATFS_LinkDriverEx+0x94>)
 801168a:	7251      	strb	r1, [r2, #9]
 801168c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801168e:	7dbb      	ldrb	r3, [r7, #22]
 8011690:	3330      	adds	r3, #48	; 0x30
 8011692:	b2da      	uxtb	r2, r3
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011698:	68bb      	ldr	r3, [r7, #8]
 801169a:	3301      	adds	r3, #1
 801169c:	223a      	movs	r2, #58	; 0x3a
 801169e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	3302      	adds	r3, #2
 80116a4:	222f      	movs	r2, #47	; 0x2f
 80116a6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	3303      	adds	r3, #3
 80116ac:	2200      	movs	r2, #0
 80116ae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116b0:	2300      	movs	r3, #0
 80116b2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	371c      	adds	r7, #28
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	2001f518 	.word	0x2001f518

080116c8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80116d2:	2200      	movs	r2, #0
 80116d4:	6839      	ldr	r1, [r7, #0]
 80116d6:	6878      	ldr	r0, [r7, #4]
 80116d8:	f7ff ffaa 	bl	8011630 <FATFS_LinkDriverEx>
 80116dc:	4603      	mov	r3, r0
}
 80116de:	4618      	mov	r0, r3
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}
	...

080116e8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80116e8:	b480      	push	{r7}
 80116ea:	b085      	sub	sp, #20
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	4603      	mov	r3, r0
 80116f0:	6039      	str	r1, [r7, #0]
 80116f2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80116f4:	88fb      	ldrh	r3, [r7, #6]
 80116f6:	2b7f      	cmp	r3, #127	; 0x7f
 80116f8:	d802      	bhi.n	8011700 <ff_convert+0x18>
		c = chr;
 80116fa:	88fb      	ldrh	r3, [r7, #6]
 80116fc:	81fb      	strh	r3, [r7, #14]
 80116fe:	e025      	b.n	801174c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d00b      	beq.n	801171e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8011706:	88fb      	ldrh	r3, [r7, #6]
 8011708:	2bff      	cmp	r3, #255	; 0xff
 801170a:	d805      	bhi.n	8011718 <ff_convert+0x30>
 801170c:	88fb      	ldrh	r3, [r7, #6]
 801170e:	3b80      	subs	r3, #128	; 0x80
 8011710:	4a12      	ldr	r2, [pc, #72]	; (801175c <ff_convert+0x74>)
 8011712:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011716:	e000      	b.n	801171a <ff_convert+0x32>
 8011718:	2300      	movs	r3, #0
 801171a:	81fb      	strh	r3, [r7, #14]
 801171c:	e016      	b.n	801174c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801171e:	2300      	movs	r3, #0
 8011720:	81fb      	strh	r3, [r7, #14]
 8011722:	e009      	b.n	8011738 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8011724:	89fb      	ldrh	r3, [r7, #14]
 8011726:	4a0d      	ldr	r2, [pc, #52]	; (801175c <ff_convert+0x74>)
 8011728:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801172c:	88fa      	ldrh	r2, [r7, #6]
 801172e:	429a      	cmp	r2, r3
 8011730:	d006      	beq.n	8011740 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011732:	89fb      	ldrh	r3, [r7, #14]
 8011734:	3301      	adds	r3, #1
 8011736:	81fb      	strh	r3, [r7, #14]
 8011738:	89fb      	ldrh	r3, [r7, #14]
 801173a:	2b7f      	cmp	r3, #127	; 0x7f
 801173c:	d9f2      	bls.n	8011724 <ff_convert+0x3c>
 801173e:	e000      	b.n	8011742 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011740:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011742:	89fb      	ldrh	r3, [r7, #14]
 8011744:	3380      	adds	r3, #128	; 0x80
 8011746:	b29b      	uxth	r3, r3
 8011748:	b2db      	uxtb	r3, r3
 801174a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801174c:	89fb      	ldrh	r3, [r7, #14]
}
 801174e:	4618      	mov	r0, r3
 8011750:	3714      	adds	r7, #20
 8011752:	46bd      	mov	sp, r7
 8011754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011758:	4770      	bx	lr
 801175a:	bf00      	nop
 801175c:	08017cbc 	.word	0x08017cbc

08011760 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011760:	b480      	push	{r7}
 8011762:	b087      	sub	sp, #28
 8011764:	af00      	add	r7, sp, #0
 8011766:	4603      	mov	r3, r0
 8011768:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801176a:	88fb      	ldrh	r3, [r7, #6]
 801176c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011770:	d201      	bcs.n	8011776 <ff_wtoupper+0x16>
 8011772:	4b3e      	ldr	r3, [pc, #248]	; (801186c <ff_wtoupper+0x10c>)
 8011774:	e000      	b.n	8011778 <ff_wtoupper+0x18>
 8011776:	4b3e      	ldr	r3, [pc, #248]	; (8011870 <ff_wtoupper+0x110>)
 8011778:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	1c9a      	adds	r2, r3, #2
 801177e:	617a      	str	r2, [r7, #20]
 8011780:	881b      	ldrh	r3, [r3, #0]
 8011782:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011784:	8a7b      	ldrh	r3, [r7, #18]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d068      	beq.n	801185c <ff_wtoupper+0xfc>
 801178a:	88fa      	ldrh	r2, [r7, #6]
 801178c:	8a7b      	ldrh	r3, [r7, #18]
 801178e:	429a      	cmp	r2, r3
 8011790:	d364      	bcc.n	801185c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	1c9a      	adds	r2, r3, #2
 8011796:	617a      	str	r2, [r7, #20]
 8011798:	881b      	ldrh	r3, [r3, #0]
 801179a:	823b      	strh	r3, [r7, #16]
 801179c:	8a3b      	ldrh	r3, [r7, #16]
 801179e:	0a1b      	lsrs	r3, r3, #8
 80117a0:	81fb      	strh	r3, [r7, #14]
 80117a2:	8a3b      	ldrh	r3, [r7, #16]
 80117a4:	b2db      	uxtb	r3, r3
 80117a6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80117a8:	88fa      	ldrh	r2, [r7, #6]
 80117aa:	8a79      	ldrh	r1, [r7, #18]
 80117ac:	8a3b      	ldrh	r3, [r7, #16]
 80117ae:	440b      	add	r3, r1
 80117b0:	429a      	cmp	r2, r3
 80117b2:	da49      	bge.n	8011848 <ff_wtoupper+0xe8>
			switch (cmd) {
 80117b4:	89fb      	ldrh	r3, [r7, #14]
 80117b6:	2b08      	cmp	r3, #8
 80117b8:	d84f      	bhi.n	801185a <ff_wtoupper+0xfa>
 80117ba:	a201      	add	r2, pc, #4	; (adr r2, 80117c0 <ff_wtoupper+0x60>)
 80117bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c0:	080117e5 	.word	0x080117e5
 80117c4:	080117f7 	.word	0x080117f7
 80117c8:	0801180d 	.word	0x0801180d
 80117cc:	08011815 	.word	0x08011815
 80117d0:	0801181d 	.word	0x0801181d
 80117d4:	08011825 	.word	0x08011825
 80117d8:	0801182d 	.word	0x0801182d
 80117dc:	08011835 	.word	0x08011835
 80117e0:	0801183d 	.word	0x0801183d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80117e4:	88fa      	ldrh	r2, [r7, #6]
 80117e6:	8a7b      	ldrh	r3, [r7, #18]
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	005b      	lsls	r3, r3, #1
 80117ec:	697a      	ldr	r2, [r7, #20]
 80117ee:	4413      	add	r3, r2
 80117f0:	881b      	ldrh	r3, [r3, #0]
 80117f2:	80fb      	strh	r3, [r7, #6]
 80117f4:	e027      	b.n	8011846 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80117f6:	88fa      	ldrh	r2, [r7, #6]
 80117f8:	8a7b      	ldrh	r3, [r7, #18]
 80117fa:	1ad3      	subs	r3, r2, r3
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	f003 0301 	and.w	r3, r3, #1
 8011802:	b29b      	uxth	r3, r3
 8011804:	88fa      	ldrh	r2, [r7, #6]
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	80fb      	strh	r3, [r7, #6]
 801180a:	e01c      	b.n	8011846 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801180c:	88fb      	ldrh	r3, [r7, #6]
 801180e:	3b10      	subs	r3, #16
 8011810:	80fb      	strh	r3, [r7, #6]
 8011812:	e018      	b.n	8011846 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011814:	88fb      	ldrh	r3, [r7, #6]
 8011816:	3b20      	subs	r3, #32
 8011818:	80fb      	strh	r3, [r7, #6]
 801181a:	e014      	b.n	8011846 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801181c:	88fb      	ldrh	r3, [r7, #6]
 801181e:	3b30      	subs	r3, #48	; 0x30
 8011820:	80fb      	strh	r3, [r7, #6]
 8011822:	e010      	b.n	8011846 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011824:	88fb      	ldrh	r3, [r7, #6]
 8011826:	3b1a      	subs	r3, #26
 8011828:	80fb      	strh	r3, [r7, #6]
 801182a:	e00c      	b.n	8011846 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801182c:	88fb      	ldrh	r3, [r7, #6]
 801182e:	3308      	adds	r3, #8
 8011830:	80fb      	strh	r3, [r7, #6]
 8011832:	e008      	b.n	8011846 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011834:	88fb      	ldrh	r3, [r7, #6]
 8011836:	3b50      	subs	r3, #80	; 0x50
 8011838:	80fb      	strh	r3, [r7, #6]
 801183a:	e004      	b.n	8011846 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801183c:	88fb      	ldrh	r3, [r7, #6]
 801183e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011842:	80fb      	strh	r3, [r7, #6]
 8011844:	bf00      	nop
			}
			break;
 8011846:	e008      	b.n	801185a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011848:	89fb      	ldrh	r3, [r7, #14]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d195      	bne.n	801177a <ff_wtoupper+0x1a>
 801184e:	8a3b      	ldrh	r3, [r7, #16]
 8011850:	005b      	lsls	r3, r3, #1
 8011852:	697a      	ldr	r2, [r7, #20]
 8011854:	4413      	add	r3, r2
 8011856:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011858:	e78f      	b.n	801177a <ff_wtoupper+0x1a>
			break;
 801185a:	bf00      	nop
	}

	return chr;
 801185c:	88fb      	ldrh	r3, [r7, #6]
}
 801185e:	4618      	mov	r0, r3
 8011860:	371c      	adds	r7, #28
 8011862:	46bd      	mov	sp, r7
 8011864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011868:	4770      	bx	lr
 801186a:	bf00      	nop
 801186c:	08017dbc 	.word	0x08017dbc
 8011870:	08017fb0 	.word	0x08017fb0
 8011874:	00000000 	.word	0x00000000

08011878 <cos>:
 8011878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801187a:	ec51 0b10 	vmov	r0, r1, d0
 801187e:	4a1e      	ldr	r2, [pc, #120]	; (80118f8 <cos+0x80>)
 8011880:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011884:	4293      	cmp	r3, r2
 8011886:	dc06      	bgt.n	8011896 <cos+0x1e>
 8011888:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80118f0 <cos+0x78>
 801188c:	f000 fb80 	bl	8011f90 <__kernel_cos>
 8011890:	ec51 0b10 	vmov	r0, r1, d0
 8011894:	e007      	b.n	80118a6 <cos+0x2e>
 8011896:	4a19      	ldr	r2, [pc, #100]	; (80118fc <cos+0x84>)
 8011898:	4293      	cmp	r3, r2
 801189a:	dd09      	ble.n	80118b0 <cos+0x38>
 801189c:	ee10 2a10 	vmov	r2, s0
 80118a0:	460b      	mov	r3, r1
 80118a2:	f7ee fd09 	bl	80002b8 <__aeabi_dsub>
 80118a6:	ec41 0b10 	vmov	d0, r0, r1
 80118aa:	b005      	add	sp, #20
 80118ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80118b0:	4668      	mov	r0, sp
 80118b2:	f000 f8c9 	bl	8011a48 <__ieee754_rem_pio2>
 80118b6:	f000 0003 	and.w	r0, r0, #3
 80118ba:	2801      	cmp	r0, #1
 80118bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80118c0:	ed9d 0b00 	vldr	d0, [sp]
 80118c4:	d007      	beq.n	80118d6 <cos+0x5e>
 80118c6:	2802      	cmp	r0, #2
 80118c8:	d00e      	beq.n	80118e8 <cos+0x70>
 80118ca:	2800      	cmp	r0, #0
 80118cc:	d0de      	beq.n	801188c <cos+0x14>
 80118ce:	2001      	movs	r0, #1
 80118d0:	f000 ff66 	bl	80127a0 <__kernel_sin>
 80118d4:	e7dc      	b.n	8011890 <cos+0x18>
 80118d6:	f000 ff63 	bl	80127a0 <__kernel_sin>
 80118da:	ec53 2b10 	vmov	r2, r3, d0
 80118de:	ee10 0a10 	vmov	r0, s0
 80118e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80118e6:	e7de      	b.n	80118a6 <cos+0x2e>
 80118e8:	f000 fb52 	bl	8011f90 <__kernel_cos>
 80118ec:	e7f5      	b.n	80118da <cos+0x62>
 80118ee:	bf00      	nop
	...
 80118f8:	3fe921fb 	.word	0x3fe921fb
 80118fc:	7fefffff 	.word	0x7fefffff

08011900 <sin>:
 8011900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011902:	ec51 0b10 	vmov	r0, r1, d0
 8011906:	4a20      	ldr	r2, [pc, #128]	; (8011988 <sin+0x88>)
 8011908:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801190c:	4293      	cmp	r3, r2
 801190e:	dc07      	bgt.n	8011920 <sin+0x20>
 8011910:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011980 <sin+0x80>
 8011914:	2000      	movs	r0, #0
 8011916:	f000 ff43 	bl	80127a0 <__kernel_sin>
 801191a:	ec51 0b10 	vmov	r0, r1, d0
 801191e:	e007      	b.n	8011930 <sin+0x30>
 8011920:	4a1a      	ldr	r2, [pc, #104]	; (801198c <sin+0x8c>)
 8011922:	4293      	cmp	r3, r2
 8011924:	dd09      	ble.n	801193a <sin+0x3a>
 8011926:	ee10 2a10 	vmov	r2, s0
 801192a:	460b      	mov	r3, r1
 801192c:	f7ee fcc4 	bl	80002b8 <__aeabi_dsub>
 8011930:	ec41 0b10 	vmov	d0, r0, r1
 8011934:	b005      	add	sp, #20
 8011936:	f85d fb04 	ldr.w	pc, [sp], #4
 801193a:	4668      	mov	r0, sp
 801193c:	f000 f884 	bl	8011a48 <__ieee754_rem_pio2>
 8011940:	f000 0003 	and.w	r0, r0, #3
 8011944:	2801      	cmp	r0, #1
 8011946:	ed9d 1b02 	vldr	d1, [sp, #8]
 801194a:	ed9d 0b00 	vldr	d0, [sp]
 801194e:	d004      	beq.n	801195a <sin+0x5a>
 8011950:	2802      	cmp	r0, #2
 8011952:	d005      	beq.n	8011960 <sin+0x60>
 8011954:	b970      	cbnz	r0, 8011974 <sin+0x74>
 8011956:	2001      	movs	r0, #1
 8011958:	e7dd      	b.n	8011916 <sin+0x16>
 801195a:	f000 fb19 	bl	8011f90 <__kernel_cos>
 801195e:	e7dc      	b.n	801191a <sin+0x1a>
 8011960:	2001      	movs	r0, #1
 8011962:	f000 ff1d 	bl	80127a0 <__kernel_sin>
 8011966:	ec53 2b10 	vmov	r2, r3, d0
 801196a:	ee10 0a10 	vmov	r0, s0
 801196e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011972:	e7dd      	b.n	8011930 <sin+0x30>
 8011974:	f000 fb0c 	bl	8011f90 <__kernel_cos>
 8011978:	e7f5      	b.n	8011966 <sin+0x66>
 801197a:	bf00      	nop
 801197c:	f3af 8000 	nop.w
	...
 8011988:	3fe921fb 	.word	0x3fe921fb
 801198c:	7fefffff 	.word	0x7fefffff

08011990 <sqrt>:
 8011990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011994:	ed2d 8b02 	vpush	{d8}
 8011998:	b08b      	sub	sp, #44	; 0x2c
 801199a:	ec55 4b10 	vmov	r4, r5, d0
 801199e:	f000 fa45 	bl	8011e2c <__ieee754_sqrt>
 80119a2:	4b26      	ldr	r3, [pc, #152]	; (8011a3c <sqrt+0xac>)
 80119a4:	eeb0 8a40 	vmov.f32	s16, s0
 80119a8:	eef0 8a60 	vmov.f32	s17, s1
 80119ac:	f993 6000 	ldrsb.w	r6, [r3]
 80119b0:	1c73      	adds	r3, r6, #1
 80119b2:	d02a      	beq.n	8011a0a <sqrt+0x7a>
 80119b4:	4622      	mov	r2, r4
 80119b6:	462b      	mov	r3, r5
 80119b8:	4620      	mov	r0, r4
 80119ba:	4629      	mov	r1, r5
 80119bc:	f7ef f8ce 	bl	8000b5c <__aeabi_dcmpun>
 80119c0:	4607      	mov	r7, r0
 80119c2:	bb10      	cbnz	r0, 8011a0a <sqrt+0x7a>
 80119c4:	f04f 0800 	mov.w	r8, #0
 80119c8:	f04f 0900 	mov.w	r9, #0
 80119cc:	4642      	mov	r2, r8
 80119ce:	464b      	mov	r3, r9
 80119d0:	4620      	mov	r0, r4
 80119d2:	4629      	mov	r1, r5
 80119d4:	f7ef f89a 	bl	8000b0c <__aeabi_dcmplt>
 80119d8:	b1b8      	cbz	r0, 8011a0a <sqrt+0x7a>
 80119da:	2301      	movs	r3, #1
 80119dc:	9300      	str	r3, [sp, #0]
 80119de:	4b18      	ldr	r3, [pc, #96]	; (8011a40 <sqrt+0xb0>)
 80119e0:	9301      	str	r3, [sp, #4]
 80119e2:	9708      	str	r7, [sp, #32]
 80119e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80119e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80119ec:	b9b6      	cbnz	r6, 8011a1c <sqrt+0x8c>
 80119ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80119f2:	4668      	mov	r0, sp
 80119f4:	f001 f81c 	bl	8012a30 <matherr>
 80119f8:	b1d0      	cbz	r0, 8011a30 <sqrt+0xa0>
 80119fa:	9b08      	ldr	r3, [sp, #32]
 80119fc:	b11b      	cbz	r3, 8011a06 <sqrt+0x76>
 80119fe:	f001 f8a1 	bl	8012b44 <__errno>
 8011a02:	9b08      	ldr	r3, [sp, #32]
 8011a04:	6003      	str	r3, [r0, #0]
 8011a06:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011a0a:	eeb0 0a48 	vmov.f32	s0, s16
 8011a0e:	eef0 0a68 	vmov.f32	s1, s17
 8011a12:	b00b      	add	sp, #44	; 0x2c
 8011a14:	ecbd 8b02 	vpop	{d8}
 8011a18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a1c:	4642      	mov	r2, r8
 8011a1e:	464b      	mov	r3, r9
 8011a20:	4640      	mov	r0, r8
 8011a22:	4649      	mov	r1, r9
 8011a24:	f7ee ff2a 	bl	800087c <__aeabi_ddiv>
 8011a28:	2e02      	cmp	r6, #2
 8011a2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011a2e:	d1e0      	bne.n	80119f2 <sqrt+0x62>
 8011a30:	f001 f888 	bl	8012b44 <__errno>
 8011a34:	2321      	movs	r3, #33	; 0x21
 8011a36:	6003      	str	r3, [r0, #0]
 8011a38:	e7df      	b.n	80119fa <sqrt+0x6a>
 8011a3a:	bf00      	nop
 8011a3c:	2000000a 	.word	0x2000000a
 8011a40:	0801806c 	.word	0x0801806c
 8011a44:	00000000 	.word	0x00000000

08011a48 <__ieee754_rem_pio2>:
 8011a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4c:	ec57 6b10 	vmov	r6, r7, d0
 8011a50:	4bc3      	ldr	r3, [pc, #780]	; (8011d60 <__ieee754_rem_pio2+0x318>)
 8011a52:	b08d      	sub	sp, #52	; 0x34
 8011a54:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011a58:	4598      	cmp	r8, r3
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	9704      	str	r7, [sp, #16]
 8011a5e:	dc07      	bgt.n	8011a70 <__ieee754_rem_pio2+0x28>
 8011a60:	2200      	movs	r2, #0
 8011a62:	2300      	movs	r3, #0
 8011a64:	ed84 0b00 	vstr	d0, [r4]
 8011a68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011a6c:	2500      	movs	r5, #0
 8011a6e:	e027      	b.n	8011ac0 <__ieee754_rem_pio2+0x78>
 8011a70:	4bbc      	ldr	r3, [pc, #752]	; (8011d64 <__ieee754_rem_pio2+0x31c>)
 8011a72:	4598      	cmp	r8, r3
 8011a74:	dc75      	bgt.n	8011b62 <__ieee754_rem_pio2+0x11a>
 8011a76:	9b04      	ldr	r3, [sp, #16]
 8011a78:	4dbb      	ldr	r5, [pc, #748]	; (8011d68 <__ieee754_rem_pio2+0x320>)
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	ee10 0a10 	vmov	r0, s0
 8011a80:	a3a9      	add	r3, pc, #676	; (adr r3, 8011d28 <__ieee754_rem_pio2+0x2e0>)
 8011a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a86:	4639      	mov	r1, r7
 8011a88:	dd36      	ble.n	8011af8 <__ieee754_rem_pio2+0xb0>
 8011a8a:	f7ee fc15 	bl	80002b8 <__aeabi_dsub>
 8011a8e:	45a8      	cmp	r8, r5
 8011a90:	4606      	mov	r6, r0
 8011a92:	460f      	mov	r7, r1
 8011a94:	d018      	beq.n	8011ac8 <__ieee754_rem_pio2+0x80>
 8011a96:	a3a6      	add	r3, pc, #664	; (adr r3, 8011d30 <__ieee754_rem_pio2+0x2e8>)
 8011a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a9c:	f7ee fc0c 	bl	80002b8 <__aeabi_dsub>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	e9c4 2300 	strd	r2, r3, [r4]
 8011aa8:	4630      	mov	r0, r6
 8011aaa:	4639      	mov	r1, r7
 8011aac:	f7ee fc04 	bl	80002b8 <__aeabi_dsub>
 8011ab0:	a39f      	add	r3, pc, #636	; (adr r3, 8011d30 <__ieee754_rem_pio2+0x2e8>)
 8011ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab6:	f7ee fbff 	bl	80002b8 <__aeabi_dsub>
 8011aba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011abe:	2501      	movs	r5, #1
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	b00d      	add	sp, #52	; 0x34
 8011ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ac8:	a39b      	add	r3, pc, #620	; (adr r3, 8011d38 <__ieee754_rem_pio2+0x2f0>)
 8011aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ace:	f7ee fbf3 	bl	80002b8 <__aeabi_dsub>
 8011ad2:	a39b      	add	r3, pc, #620	; (adr r3, 8011d40 <__ieee754_rem_pio2+0x2f8>)
 8011ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad8:	4606      	mov	r6, r0
 8011ada:	460f      	mov	r7, r1
 8011adc:	f7ee fbec 	bl	80002b8 <__aeabi_dsub>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	e9c4 2300 	strd	r2, r3, [r4]
 8011ae8:	4630      	mov	r0, r6
 8011aea:	4639      	mov	r1, r7
 8011aec:	f7ee fbe4 	bl	80002b8 <__aeabi_dsub>
 8011af0:	a393      	add	r3, pc, #588	; (adr r3, 8011d40 <__ieee754_rem_pio2+0x2f8>)
 8011af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af6:	e7de      	b.n	8011ab6 <__ieee754_rem_pio2+0x6e>
 8011af8:	f7ee fbe0 	bl	80002bc <__adddf3>
 8011afc:	45a8      	cmp	r8, r5
 8011afe:	4606      	mov	r6, r0
 8011b00:	460f      	mov	r7, r1
 8011b02:	d016      	beq.n	8011b32 <__ieee754_rem_pio2+0xea>
 8011b04:	a38a      	add	r3, pc, #552	; (adr r3, 8011d30 <__ieee754_rem_pio2+0x2e8>)
 8011b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b0a:	f7ee fbd7 	bl	80002bc <__adddf3>
 8011b0e:	4602      	mov	r2, r0
 8011b10:	460b      	mov	r3, r1
 8011b12:	e9c4 2300 	strd	r2, r3, [r4]
 8011b16:	4630      	mov	r0, r6
 8011b18:	4639      	mov	r1, r7
 8011b1a:	f7ee fbcd 	bl	80002b8 <__aeabi_dsub>
 8011b1e:	a384      	add	r3, pc, #528	; (adr r3, 8011d30 <__ieee754_rem_pio2+0x2e8>)
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	f7ee fbca 	bl	80002bc <__adddf3>
 8011b28:	f04f 35ff 	mov.w	r5, #4294967295
 8011b2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011b30:	e7c6      	b.n	8011ac0 <__ieee754_rem_pio2+0x78>
 8011b32:	a381      	add	r3, pc, #516	; (adr r3, 8011d38 <__ieee754_rem_pio2+0x2f0>)
 8011b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b38:	f7ee fbc0 	bl	80002bc <__adddf3>
 8011b3c:	a380      	add	r3, pc, #512	; (adr r3, 8011d40 <__ieee754_rem_pio2+0x2f8>)
 8011b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b42:	4606      	mov	r6, r0
 8011b44:	460f      	mov	r7, r1
 8011b46:	f7ee fbb9 	bl	80002bc <__adddf3>
 8011b4a:	4602      	mov	r2, r0
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	e9c4 2300 	strd	r2, r3, [r4]
 8011b52:	4630      	mov	r0, r6
 8011b54:	4639      	mov	r1, r7
 8011b56:	f7ee fbaf 	bl	80002b8 <__aeabi_dsub>
 8011b5a:	a379      	add	r3, pc, #484	; (adr r3, 8011d40 <__ieee754_rem_pio2+0x2f8>)
 8011b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b60:	e7e0      	b.n	8011b24 <__ieee754_rem_pio2+0xdc>
 8011b62:	4b82      	ldr	r3, [pc, #520]	; (8011d6c <__ieee754_rem_pio2+0x324>)
 8011b64:	4598      	cmp	r8, r3
 8011b66:	f300 80d0 	bgt.w	8011d0a <__ieee754_rem_pio2+0x2c2>
 8011b6a:	f000 fed3 	bl	8012914 <fabs>
 8011b6e:	ec57 6b10 	vmov	r6, r7, d0
 8011b72:	ee10 0a10 	vmov	r0, s0
 8011b76:	a374      	add	r3, pc, #464	; (adr r3, 8011d48 <__ieee754_rem_pio2+0x300>)
 8011b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b7c:	4639      	mov	r1, r7
 8011b7e:	f7ee fd53 	bl	8000628 <__aeabi_dmul>
 8011b82:	2200      	movs	r2, #0
 8011b84:	4b7a      	ldr	r3, [pc, #488]	; (8011d70 <__ieee754_rem_pio2+0x328>)
 8011b86:	f7ee fb99 	bl	80002bc <__adddf3>
 8011b8a:	f7ee fffd 	bl	8000b88 <__aeabi_d2iz>
 8011b8e:	4605      	mov	r5, r0
 8011b90:	f7ee fce0 	bl	8000554 <__aeabi_i2d>
 8011b94:	a364      	add	r3, pc, #400	; (adr r3, 8011d28 <__ieee754_rem_pio2+0x2e0>)
 8011b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b9e:	f7ee fd43 	bl	8000628 <__aeabi_dmul>
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	460b      	mov	r3, r1
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	4639      	mov	r1, r7
 8011baa:	f7ee fb85 	bl	80002b8 <__aeabi_dsub>
 8011bae:	a360      	add	r3, pc, #384	; (adr r3, 8011d30 <__ieee754_rem_pio2+0x2e8>)
 8011bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bb4:	4682      	mov	sl, r0
 8011bb6:	468b      	mov	fp, r1
 8011bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011bbc:	f7ee fd34 	bl	8000628 <__aeabi_dmul>
 8011bc0:	2d1f      	cmp	r5, #31
 8011bc2:	4606      	mov	r6, r0
 8011bc4:	460f      	mov	r7, r1
 8011bc6:	dc0c      	bgt.n	8011be2 <__ieee754_rem_pio2+0x19a>
 8011bc8:	1e6a      	subs	r2, r5, #1
 8011bca:	4b6a      	ldr	r3, [pc, #424]	; (8011d74 <__ieee754_rem_pio2+0x32c>)
 8011bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd0:	4543      	cmp	r3, r8
 8011bd2:	d006      	beq.n	8011be2 <__ieee754_rem_pio2+0x19a>
 8011bd4:	4632      	mov	r2, r6
 8011bd6:	463b      	mov	r3, r7
 8011bd8:	4650      	mov	r0, sl
 8011bda:	4659      	mov	r1, fp
 8011bdc:	f7ee fb6c 	bl	80002b8 <__aeabi_dsub>
 8011be0:	e00e      	b.n	8011c00 <__ieee754_rem_pio2+0x1b8>
 8011be2:	4632      	mov	r2, r6
 8011be4:	463b      	mov	r3, r7
 8011be6:	4650      	mov	r0, sl
 8011be8:	4659      	mov	r1, fp
 8011bea:	f7ee fb65 	bl	80002b8 <__aeabi_dsub>
 8011bee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011bf2:	9305      	str	r3, [sp, #20]
 8011bf4:	9a05      	ldr	r2, [sp, #20]
 8011bf6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011bfa:	1ad3      	subs	r3, r2, r3
 8011bfc:	2b10      	cmp	r3, #16
 8011bfe:	dc02      	bgt.n	8011c06 <__ieee754_rem_pio2+0x1be>
 8011c00:	e9c4 0100 	strd	r0, r1, [r4]
 8011c04:	e039      	b.n	8011c7a <__ieee754_rem_pio2+0x232>
 8011c06:	a34c      	add	r3, pc, #304	; (adr r3, 8011d38 <__ieee754_rem_pio2+0x2f0>)
 8011c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c10:	f7ee fd0a 	bl	8000628 <__aeabi_dmul>
 8011c14:	4606      	mov	r6, r0
 8011c16:	460f      	mov	r7, r1
 8011c18:	4602      	mov	r2, r0
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	4650      	mov	r0, sl
 8011c1e:	4659      	mov	r1, fp
 8011c20:	f7ee fb4a 	bl	80002b8 <__aeabi_dsub>
 8011c24:	4602      	mov	r2, r0
 8011c26:	460b      	mov	r3, r1
 8011c28:	4680      	mov	r8, r0
 8011c2a:	4689      	mov	r9, r1
 8011c2c:	4650      	mov	r0, sl
 8011c2e:	4659      	mov	r1, fp
 8011c30:	f7ee fb42 	bl	80002b8 <__aeabi_dsub>
 8011c34:	4632      	mov	r2, r6
 8011c36:	463b      	mov	r3, r7
 8011c38:	f7ee fb3e 	bl	80002b8 <__aeabi_dsub>
 8011c3c:	a340      	add	r3, pc, #256	; (adr r3, 8011d40 <__ieee754_rem_pio2+0x2f8>)
 8011c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c42:	4606      	mov	r6, r0
 8011c44:	460f      	mov	r7, r1
 8011c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c4a:	f7ee fced 	bl	8000628 <__aeabi_dmul>
 8011c4e:	4632      	mov	r2, r6
 8011c50:	463b      	mov	r3, r7
 8011c52:	f7ee fb31 	bl	80002b8 <__aeabi_dsub>
 8011c56:	4602      	mov	r2, r0
 8011c58:	460b      	mov	r3, r1
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	460f      	mov	r7, r1
 8011c5e:	4640      	mov	r0, r8
 8011c60:	4649      	mov	r1, r9
 8011c62:	f7ee fb29 	bl	80002b8 <__aeabi_dsub>
 8011c66:	9a05      	ldr	r2, [sp, #20]
 8011c68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	2b31      	cmp	r3, #49	; 0x31
 8011c70:	dc20      	bgt.n	8011cb4 <__ieee754_rem_pio2+0x26c>
 8011c72:	e9c4 0100 	strd	r0, r1, [r4]
 8011c76:	46c2      	mov	sl, r8
 8011c78:	46cb      	mov	fp, r9
 8011c7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011c7e:	4650      	mov	r0, sl
 8011c80:	4642      	mov	r2, r8
 8011c82:	464b      	mov	r3, r9
 8011c84:	4659      	mov	r1, fp
 8011c86:	f7ee fb17 	bl	80002b8 <__aeabi_dsub>
 8011c8a:	463b      	mov	r3, r7
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	f7ee fb13 	bl	80002b8 <__aeabi_dsub>
 8011c92:	9b04      	ldr	r3, [sp, #16]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011c9a:	f6bf af11 	bge.w	8011ac0 <__ieee754_rem_pio2+0x78>
 8011c9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011ca2:	6063      	str	r3, [r4, #4]
 8011ca4:	f8c4 8000 	str.w	r8, [r4]
 8011ca8:	60a0      	str	r0, [r4, #8]
 8011caa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011cae:	60e3      	str	r3, [r4, #12]
 8011cb0:	426d      	negs	r5, r5
 8011cb2:	e705      	b.n	8011ac0 <__ieee754_rem_pio2+0x78>
 8011cb4:	a326      	add	r3, pc, #152	; (adr r3, 8011d50 <__ieee754_rem_pio2+0x308>)
 8011cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cbe:	f7ee fcb3 	bl	8000628 <__aeabi_dmul>
 8011cc2:	4606      	mov	r6, r0
 8011cc4:	460f      	mov	r7, r1
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	460b      	mov	r3, r1
 8011cca:	4640      	mov	r0, r8
 8011ccc:	4649      	mov	r1, r9
 8011cce:	f7ee faf3 	bl	80002b8 <__aeabi_dsub>
 8011cd2:	4602      	mov	r2, r0
 8011cd4:	460b      	mov	r3, r1
 8011cd6:	4682      	mov	sl, r0
 8011cd8:	468b      	mov	fp, r1
 8011cda:	4640      	mov	r0, r8
 8011cdc:	4649      	mov	r1, r9
 8011cde:	f7ee faeb 	bl	80002b8 <__aeabi_dsub>
 8011ce2:	4632      	mov	r2, r6
 8011ce4:	463b      	mov	r3, r7
 8011ce6:	f7ee fae7 	bl	80002b8 <__aeabi_dsub>
 8011cea:	a31b      	add	r3, pc, #108	; (adr r3, 8011d58 <__ieee754_rem_pio2+0x310>)
 8011cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf0:	4606      	mov	r6, r0
 8011cf2:	460f      	mov	r7, r1
 8011cf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011cf8:	f7ee fc96 	bl	8000628 <__aeabi_dmul>
 8011cfc:	4632      	mov	r2, r6
 8011cfe:	463b      	mov	r3, r7
 8011d00:	f7ee fada 	bl	80002b8 <__aeabi_dsub>
 8011d04:	4606      	mov	r6, r0
 8011d06:	460f      	mov	r7, r1
 8011d08:	e764      	b.n	8011bd4 <__ieee754_rem_pio2+0x18c>
 8011d0a:	4b1b      	ldr	r3, [pc, #108]	; (8011d78 <__ieee754_rem_pio2+0x330>)
 8011d0c:	4598      	cmp	r8, r3
 8011d0e:	dd35      	ble.n	8011d7c <__ieee754_rem_pio2+0x334>
 8011d10:	ee10 2a10 	vmov	r2, s0
 8011d14:	463b      	mov	r3, r7
 8011d16:	4630      	mov	r0, r6
 8011d18:	4639      	mov	r1, r7
 8011d1a:	f7ee facd 	bl	80002b8 <__aeabi_dsub>
 8011d1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d22:	e9c4 0100 	strd	r0, r1, [r4]
 8011d26:	e6a1      	b.n	8011a6c <__ieee754_rem_pio2+0x24>
 8011d28:	54400000 	.word	0x54400000
 8011d2c:	3ff921fb 	.word	0x3ff921fb
 8011d30:	1a626331 	.word	0x1a626331
 8011d34:	3dd0b461 	.word	0x3dd0b461
 8011d38:	1a600000 	.word	0x1a600000
 8011d3c:	3dd0b461 	.word	0x3dd0b461
 8011d40:	2e037073 	.word	0x2e037073
 8011d44:	3ba3198a 	.word	0x3ba3198a
 8011d48:	6dc9c883 	.word	0x6dc9c883
 8011d4c:	3fe45f30 	.word	0x3fe45f30
 8011d50:	2e000000 	.word	0x2e000000
 8011d54:	3ba3198a 	.word	0x3ba3198a
 8011d58:	252049c1 	.word	0x252049c1
 8011d5c:	397b839a 	.word	0x397b839a
 8011d60:	3fe921fb 	.word	0x3fe921fb
 8011d64:	4002d97b 	.word	0x4002d97b
 8011d68:	3ff921fb 	.word	0x3ff921fb
 8011d6c:	413921fb 	.word	0x413921fb
 8011d70:	3fe00000 	.word	0x3fe00000
 8011d74:	08018074 	.word	0x08018074
 8011d78:	7fefffff 	.word	0x7fefffff
 8011d7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011d80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011d84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011d88:	4630      	mov	r0, r6
 8011d8a:	460f      	mov	r7, r1
 8011d8c:	f7ee fefc 	bl	8000b88 <__aeabi_d2iz>
 8011d90:	f7ee fbe0 	bl	8000554 <__aeabi_i2d>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	4630      	mov	r0, r6
 8011d9a:	4639      	mov	r1, r7
 8011d9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011da0:	f7ee fa8a 	bl	80002b8 <__aeabi_dsub>
 8011da4:	2200      	movs	r2, #0
 8011da6:	4b1f      	ldr	r3, [pc, #124]	; (8011e24 <__ieee754_rem_pio2+0x3dc>)
 8011da8:	f7ee fc3e 	bl	8000628 <__aeabi_dmul>
 8011dac:	460f      	mov	r7, r1
 8011dae:	4606      	mov	r6, r0
 8011db0:	f7ee feea 	bl	8000b88 <__aeabi_d2iz>
 8011db4:	f7ee fbce 	bl	8000554 <__aeabi_i2d>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	4630      	mov	r0, r6
 8011dbe:	4639      	mov	r1, r7
 8011dc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011dc4:	f7ee fa78 	bl	80002b8 <__aeabi_dsub>
 8011dc8:	2200      	movs	r2, #0
 8011dca:	4b16      	ldr	r3, [pc, #88]	; (8011e24 <__ieee754_rem_pio2+0x3dc>)
 8011dcc:	f7ee fc2c 	bl	8000628 <__aeabi_dmul>
 8011dd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011dd4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011dd8:	f04f 0803 	mov.w	r8, #3
 8011ddc:	2600      	movs	r6, #0
 8011dde:	2700      	movs	r7, #0
 8011de0:	4632      	mov	r2, r6
 8011de2:	463b      	mov	r3, r7
 8011de4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011de8:	f108 3aff 	add.w	sl, r8, #4294967295
 8011dec:	f7ee fe84 	bl	8000af8 <__aeabi_dcmpeq>
 8011df0:	b9b0      	cbnz	r0, 8011e20 <__ieee754_rem_pio2+0x3d8>
 8011df2:	4b0d      	ldr	r3, [pc, #52]	; (8011e28 <__ieee754_rem_pio2+0x3e0>)
 8011df4:	9301      	str	r3, [sp, #4]
 8011df6:	2302      	movs	r3, #2
 8011df8:	9300      	str	r3, [sp, #0]
 8011dfa:	462a      	mov	r2, r5
 8011dfc:	4643      	mov	r3, r8
 8011dfe:	4621      	mov	r1, r4
 8011e00:	a806      	add	r0, sp, #24
 8011e02:	f000 f98d 	bl	8012120 <__kernel_rem_pio2>
 8011e06:	9b04      	ldr	r3, [sp, #16]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	4605      	mov	r5, r0
 8011e0c:	f6bf ae58 	bge.w	8011ac0 <__ieee754_rem_pio2+0x78>
 8011e10:	6863      	ldr	r3, [r4, #4]
 8011e12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011e16:	6063      	str	r3, [r4, #4]
 8011e18:	68e3      	ldr	r3, [r4, #12]
 8011e1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011e1e:	e746      	b.n	8011cae <__ieee754_rem_pio2+0x266>
 8011e20:	46d0      	mov	r8, sl
 8011e22:	e7dd      	b.n	8011de0 <__ieee754_rem_pio2+0x398>
 8011e24:	41700000 	.word	0x41700000
 8011e28:	080180f4 	.word	0x080180f4

08011e2c <__ieee754_sqrt>:
 8011e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e30:	4955      	ldr	r1, [pc, #340]	; (8011f88 <__ieee754_sqrt+0x15c>)
 8011e32:	ec55 4b10 	vmov	r4, r5, d0
 8011e36:	43a9      	bics	r1, r5
 8011e38:	462b      	mov	r3, r5
 8011e3a:	462a      	mov	r2, r5
 8011e3c:	d112      	bne.n	8011e64 <__ieee754_sqrt+0x38>
 8011e3e:	ee10 2a10 	vmov	r2, s0
 8011e42:	ee10 0a10 	vmov	r0, s0
 8011e46:	4629      	mov	r1, r5
 8011e48:	f7ee fbee 	bl	8000628 <__aeabi_dmul>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	460b      	mov	r3, r1
 8011e50:	4620      	mov	r0, r4
 8011e52:	4629      	mov	r1, r5
 8011e54:	f7ee fa32 	bl	80002bc <__adddf3>
 8011e58:	4604      	mov	r4, r0
 8011e5a:	460d      	mov	r5, r1
 8011e5c:	ec45 4b10 	vmov	d0, r4, r5
 8011e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e64:	2d00      	cmp	r5, #0
 8011e66:	ee10 0a10 	vmov	r0, s0
 8011e6a:	4621      	mov	r1, r4
 8011e6c:	dc0f      	bgt.n	8011e8e <__ieee754_sqrt+0x62>
 8011e6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011e72:	4330      	orrs	r0, r6
 8011e74:	d0f2      	beq.n	8011e5c <__ieee754_sqrt+0x30>
 8011e76:	b155      	cbz	r5, 8011e8e <__ieee754_sqrt+0x62>
 8011e78:	ee10 2a10 	vmov	r2, s0
 8011e7c:	4620      	mov	r0, r4
 8011e7e:	4629      	mov	r1, r5
 8011e80:	f7ee fa1a 	bl	80002b8 <__aeabi_dsub>
 8011e84:	4602      	mov	r2, r0
 8011e86:	460b      	mov	r3, r1
 8011e88:	f7ee fcf8 	bl	800087c <__aeabi_ddiv>
 8011e8c:	e7e4      	b.n	8011e58 <__ieee754_sqrt+0x2c>
 8011e8e:	151b      	asrs	r3, r3, #20
 8011e90:	d073      	beq.n	8011f7a <__ieee754_sqrt+0x14e>
 8011e92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011e96:	07dd      	lsls	r5, r3, #31
 8011e98:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011e9c:	bf48      	it	mi
 8011e9e:	0fc8      	lsrmi	r0, r1, #31
 8011ea0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011ea4:	bf44      	itt	mi
 8011ea6:	0049      	lslmi	r1, r1, #1
 8011ea8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011eac:	2500      	movs	r5, #0
 8011eae:	1058      	asrs	r0, r3, #1
 8011eb0:	0fcb      	lsrs	r3, r1, #31
 8011eb2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011eb6:	0049      	lsls	r1, r1, #1
 8011eb8:	2316      	movs	r3, #22
 8011eba:	462c      	mov	r4, r5
 8011ebc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011ec0:	19a7      	adds	r7, r4, r6
 8011ec2:	4297      	cmp	r7, r2
 8011ec4:	bfde      	ittt	le
 8011ec6:	19bc      	addle	r4, r7, r6
 8011ec8:	1bd2      	suble	r2, r2, r7
 8011eca:	19ad      	addle	r5, r5, r6
 8011ecc:	0fcf      	lsrs	r7, r1, #31
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011ed4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011ed8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011edc:	d1f0      	bne.n	8011ec0 <__ieee754_sqrt+0x94>
 8011ede:	f04f 0c20 	mov.w	ip, #32
 8011ee2:	469e      	mov	lr, r3
 8011ee4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011ee8:	42a2      	cmp	r2, r4
 8011eea:	eb06 070e 	add.w	r7, r6, lr
 8011eee:	dc02      	bgt.n	8011ef6 <__ieee754_sqrt+0xca>
 8011ef0:	d112      	bne.n	8011f18 <__ieee754_sqrt+0xec>
 8011ef2:	428f      	cmp	r7, r1
 8011ef4:	d810      	bhi.n	8011f18 <__ieee754_sqrt+0xec>
 8011ef6:	2f00      	cmp	r7, #0
 8011ef8:	eb07 0e06 	add.w	lr, r7, r6
 8011efc:	da42      	bge.n	8011f84 <__ieee754_sqrt+0x158>
 8011efe:	f1be 0f00 	cmp.w	lr, #0
 8011f02:	db3f      	blt.n	8011f84 <__ieee754_sqrt+0x158>
 8011f04:	f104 0801 	add.w	r8, r4, #1
 8011f08:	1b12      	subs	r2, r2, r4
 8011f0a:	428f      	cmp	r7, r1
 8011f0c:	bf88      	it	hi
 8011f0e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8011f12:	1bc9      	subs	r1, r1, r7
 8011f14:	4433      	add	r3, r6
 8011f16:	4644      	mov	r4, r8
 8011f18:	0052      	lsls	r2, r2, #1
 8011f1a:	f1bc 0c01 	subs.w	ip, ip, #1
 8011f1e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011f22:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011f26:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011f2a:	d1dd      	bne.n	8011ee8 <__ieee754_sqrt+0xbc>
 8011f2c:	430a      	orrs	r2, r1
 8011f2e:	d006      	beq.n	8011f3e <__ieee754_sqrt+0x112>
 8011f30:	1c5c      	adds	r4, r3, #1
 8011f32:	bf13      	iteet	ne
 8011f34:	3301      	addne	r3, #1
 8011f36:	3501      	addeq	r5, #1
 8011f38:	4663      	moveq	r3, ip
 8011f3a:	f023 0301 	bicne.w	r3, r3, #1
 8011f3e:	106a      	asrs	r2, r5, #1
 8011f40:	085b      	lsrs	r3, r3, #1
 8011f42:	07e9      	lsls	r1, r5, #31
 8011f44:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011f48:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011f4c:	bf48      	it	mi
 8011f4e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011f52:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011f56:	461c      	mov	r4, r3
 8011f58:	e780      	b.n	8011e5c <__ieee754_sqrt+0x30>
 8011f5a:	0aca      	lsrs	r2, r1, #11
 8011f5c:	3815      	subs	r0, #21
 8011f5e:	0549      	lsls	r1, r1, #21
 8011f60:	2a00      	cmp	r2, #0
 8011f62:	d0fa      	beq.n	8011f5a <__ieee754_sqrt+0x12e>
 8011f64:	02d6      	lsls	r6, r2, #11
 8011f66:	d50a      	bpl.n	8011f7e <__ieee754_sqrt+0x152>
 8011f68:	f1c3 0420 	rsb	r4, r3, #32
 8011f6c:	fa21 f404 	lsr.w	r4, r1, r4
 8011f70:	1e5d      	subs	r5, r3, #1
 8011f72:	4099      	lsls	r1, r3
 8011f74:	4322      	orrs	r2, r4
 8011f76:	1b43      	subs	r3, r0, r5
 8011f78:	e78b      	b.n	8011e92 <__ieee754_sqrt+0x66>
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	e7f0      	b.n	8011f60 <__ieee754_sqrt+0x134>
 8011f7e:	0052      	lsls	r2, r2, #1
 8011f80:	3301      	adds	r3, #1
 8011f82:	e7ef      	b.n	8011f64 <__ieee754_sqrt+0x138>
 8011f84:	46a0      	mov	r8, r4
 8011f86:	e7bf      	b.n	8011f08 <__ieee754_sqrt+0xdc>
 8011f88:	7ff00000 	.word	0x7ff00000
 8011f8c:	00000000 	.word	0x00000000

08011f90 <__kernel_cos>:
 8011f90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f94:	ec59 8b10 	vmov	r8, r9, d0
 8011f98:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011f9c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011fa0:	ed2d 8b02 	vpush	{d8}
 8011fa4:	eeb0 8a41 	vmov.f32	s16, s2
 8011fa8:	eef0 8a61 	vmov.f32	s17, s3
 8011fac:	da07      	bge.n	8011fbe <__kernel_cos+0x2e>
 8011fae:	ee10 0a10 	vmov	r0, s0
 8011fb2:	4649      	mov	r1, r9
 8011fb4:	f7ee fde8 	bl	8000b88 <__aeabi_d2iz>
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	f000 8089 	beq.w	80120d0 <__kernel_cos+0x140>
 8011fbe:	4642      	mov	r2, r8
 8011fc0:	464b      	mov	r3, r9
 8011fc2:	4640      	mov	r0, r8
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee fb2f 	bl	8000628 <__aeabi_dmul>
 8011fca:	2200      	movs	r2, #0
 8011fcc:	4b4e      	ldr	r3, [pc, #312]	; (8012108 <__kernel_cos+0x178>)
 8011fce:	4604      	mov	r4, r0
 8011fd0:	460d      	mov	r5, r1
 8011fd2:	f7ee fb29 	bl	8000628 <__aeabi_dmul>
 8011fd6:	a340      	add	r3, pc, #256	; (adr r3, 80120d8 <__kernel_cos+0x148>)
 8011fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fdc:	4682      	mov	sl, r0
 8011fde:	468b      	mov	fp, r1
 8011fe0:	4620      	mov	r0, r4
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	f7ee fb20 	bl	8000628 <__aeabi_dmul>
 8011fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80120e0 <__kernel_cos+0x150>)
 8011fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fee:	f7ee f965 	bl	80002bc <__adddf3>
 8011ff2:	4622      	mov	r2, r4
 8011ff4:	462b      	mov	r3, r5
 8011ff6:	f7ee fb17 	bl	8000628 <__aeabi_dmul>
 8011ffa:	a33b      	add	r3, pc, #236	; (adr r3, 80120e8 <__kernel_cos+0x158>)
 8011ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012000:	f7ee f95a 	bl	80002b8 <__aeabi_dsub>
 8012004:	4622      	mov	r2, r4
 8012006:	462b      	mov	r3, r5
 8012008:	f7ee fb0e 	bl	8000628 <__aeabi_dmul>
 801200c:	a338      	add	r3, pc, #224	; (adr r3, 80120f0 <__kernel_cos+0x160>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	f7ee f953 	bl	80002bc <__adddf3>
 8012016:	4622      	mov	r2, r4
 8012018:	462b      	mov	r3, r5
 801201a:	f7ee fb05 	bl	8000628 <__aeabi_dmul>
 801201e:	a336      	add	r3, pc, #216	; (adr r3, 80120f8 <__kernel_cos+0x168>)
 8012020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012024:	f7ee f948 	bl	80002b8 <__aeabi_dsub>
 8012028:	4622      	mov	r2, r4
 801202a:	462b      	mov	r3, r5
 801202c:	f7ee fafc 	bl	8000628 <__aeabi_dmul>
 8012030:	a333      	add	r3, pc, #204	; (adr r3, 8012100 <__kernel_cos+0x170>)
 8012032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012036:	f7ee f941 	bl	80002bc <__adddf3>
 801203a:	4622      	mov	r2, r4
 801203c:	462b      	mov	r3, r5
 801203e:	f7ee faf3 	bl	8000628 <__aeabi_dmul>
 8012042:	4622      	mov	r2, r4
 8012044:	462b      	mov	r3, r5
 8012046:	f7ee faef 	bl	8000628 <__aeabi_dmul>
 801204a:	ec53 2b18 	vmov	r2, r3, d8
 801204e:	4604      	mov	r4, r0
 8012050:	460d      	mov	r5, r1
 8012052:	4640      	mov	r0, r8
 8012054:	4649      	mov	r1, r9
 8012056:	f7ee fae7 	bl	8000628 <__aeabi_dmul>
 801205a:	460b      	mov	r3, r1
 801205c:	4602      	mov	r2, r0
 801205e:	4629      	mov	r1, r5
 8012060:	4620      	mov	r0, r4
 8012062:	f7ee f929 	bl	80002b8 <__aeabi_dsub>
 8012066:	4b29      	ldr	r3, [pc, #164]	; (801210c <__kernel_cos+0x17c>)
 8012068:	429e      	cmp	r6, r3
 801206a:	4680      	mov	r8, r0
 801206c:	4689      	mov	r9, r1
 801206e:	dc11      	bgt.n	8012094 <__kernel_cos+0x104>
 8012070:	4602      	mov	r2, r0
 8012072:	460b      	mov	r3, r1
 8012074:	4650      	mov	r0, sl
 8012076:	4659      	mov	r1, fp
 8012078:	f7ee f91e 	bl	80002b8 <__aeabi_dsub>
 801207c:	460b      	mov	r3, r1
 801207e:	4924      	ldr	r1, [pc, #144]	; (8012110 <__kernel_cos+0x180>)
 8012080:	4602      	mov	r2, r0
 8012082:	2000      	movs	r0, #0
 8012084:	f7ee f918 	bl	80002b8 <__aeabi_dsub>
 8012088:	ecbd 8b02 	vpop	{d8}
 801208c:	ec41 0b10 	vmov	d0, r0, r1
 8012090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012094:	4b1f      	ldr	r3, [pc, #124]	; (8012114 <__kernel_cos+0x184>)
 8012096:	491e      	ldr	r1, [pc, #120]	; (8012110 <__kernel_cos+0x180>)
 8012098:	429e      	cmp	r6, r3
 801209a:	bfcc      	ite	gt
 801209c:	4d1e      	ldrgt	r5, [pc, #120]	; (8012118 <__kernel_cos+0x188>)
 801209e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80120a2:	2400      	movs	r4, #0
 80120a4:	4622      	mov	r2, r4
 80120a6:	462b      	mov	r3, r5
 80120a8:	2000      	movs	r0, #0
 80120aa:	f7ee f905 	bl	80002b8 <__aeabi_dsub>
 80120ae:	4622      	mov	r2, r4
 80120b0:	4606      	mov	r6, r0
 80120b2:	460f      	mov	r7, r1
 80120b4:	462b      	mov	r3, r5
 80120b6:	4650      	mov	r0, sl
 80120b8:	4659      	mov	r1, fp
 80120ba:	f7ee f8fd 	bl	80002b8 <__aeabi_dsub>
 80120be:	4642      	mov	r2, r8
 80120c0:	464b      	mov	r3, r9
 80120c2:	f7ee f8f9 	bl	80002b8 <__aeabi_dsub>
 80120c6:	4602      	mov	r2, r0
 80120c8:	460b      	mov	r3, r1
 80120ca:	4630      	mov	r0, r6
 80120cc:	4639      	mov	r1, r7
 80120ce:	e7d9      	b.n	8012084 <__kernel_cos+0xf4>
 80120d0:	2000      	movs	r0, #0
 80120d2:	490f      	ldr	r1, [pc, #60]	; (8012110 <__kernel_cos+0x180>)
 80120d4:	e7d8      	b.n	8012088 <__kernel_cos+0xf8>
 80120d6:	bf00      	nop
 80120d8:	be8838d4 	.word	0xbe8838d4
 80120dc:	bda8fae9 	.word	0xbda8fae9
 80120e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80120e4:	3e21ee9e 	.word	0x3e21ee9e
 80120e8:	809c52ad 	.word	0x809c52ad
 80120ec:	3e927e4f 	.word	0x3e927e4f
 80120f0:	19cb1590 	.word	0x19cb1590
 80120f4:	3efa01a0 	.word	0x3efa01a0
 80120f8:	16c15177 	.word	0x16c15177
 80120fc:	3f56c16c 	.word	0x3f56c16c
 8012100:	5555554c 	.word	0x5555554c
 8012104:	3fa55555 	.word	0x3fa55555
 8012108:	3fe00000 	.word	0x3fe00000
 801210c:	3fd33332 	.word	0x3fd33332
 8012110:	3ff00000 	.word	0x3ff00000
 8012114:	3fe90000 	.word	0x3fe90000
 8012118:	3fd20000 	.word	0x3fd20000
 801211c:	00000000 	.word	0x00000000

08012120 <__kernel_rem_pio2>:
 8012120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012124:	ed2d 8b02 	vpush	{d8}
 8012128:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801212c:	1ed4      	subs	r4, r2, #3
 801212e:	9308      	str	r3, [sp, #32]
 8012130:	9101      	str	r1, [sp, #4]
 8012132:	4bc5      	ldr	r3, [pc, #788]	; (8012448 <__kernel_rem_pio2+0x328>)
 8012134:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012136:	9009      	str	r0, [sp, #36]	; 0x24
 8012138:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801213c:	9304      	str	r3, [sp, #16]
 801213e:	9b08      	ldr	r3, [sp, #32]
 8012140:	3b01      	subs	r3, #1
 8012142:	9307      	str	r3, [sp, #28]
 8012144:	2318      	movs	r3, #24
 8012146:	fb94 f4f3 	sdiv	r4, r4, r3
 801214a:	f06f 0317 	mvn.w	r3, #23
 801214e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012152:	fb04 3303 	mla	r3, r4, r3, r3
 8012156:	eb03 0a02 	add.w	sl, r3, r2
 801215a:	9b04      	ldr	r3, [sp, #16]
 801215c:	9a07      	ldr	r2, [sp, #28]
 801215e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012438 <__kernel_rem_pio2+0x318>
 8012162:	eb03 0802 	add.w	r8, r3, r2
 8012166:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012168:	1aa7      	subs	r7, r4, r2
 801216a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801216e:	ae22      	add	r6, sp, #136	; 0x88
 8012170:	2500      	movs	r5, #0
 8012172:	4545      	cmp	r5, r8
 8012174:	dd13      	ble.n	801219e <__kernel_rem_pio2+0x7e>
 8012176:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012438 <__kernel_rem_pio2+0x318>
 801217a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801217e:	2600      	movs	r6, #0
 8012180:	9b04      	ldr	r3, [sp, #16]
 8012182:	429e      	cmp	r6, r3
 8012184:	dc32      	bgt.n	80121ec <__kernel_rem_pio2+0xcc>
 8012186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012188:	9302      	str	r3, [sp, #8]
 801218a:	9b08      	ldr	r3, [sp, #32]
 801218c:	199d      	adds	r5, r3, r6
 801218e:	ab22      	add	r3, sp, #136	; 0x88
 8012190:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012194:	9306      	str	r3, [sp, #24]
 8012196:	ec59 8b18 	vmov	r8, r9, d8
 801219a:	2700      	movs	r7, #0
 801219c:	e01f      	b.n	80121de <__kernel_rem_pio2+0xbe>
 801219e:	42ef      	cmn	r7, r5
 80121a0:	d407      	bmi.n	80121b2 <__kernel_rem_pio2+0x92>
 80121a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80121a6:	f7ee f9d5 	bl	8000554 <__aeabi_i2d>
 80121aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80121ae:	3501      	adds	r5, #1
 80121b0:	e7df      	b.n	8012172 <__kernel_rem_pio2+0x52>
 80121b2:	ec51 0b18 	vmov	r0, r1, d8
 80121b6:	e7f8      	b.n	80121aa <__kernel_rem_pio2+0x8a>
 80121b8:	9906      	ldr	r1, [sp, #24]
 80121ba:	9d02      	ldr	r5, [sp, #8]
 80121bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80121c0:	9106      	str	r1, [sp, #24]
 80121c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80121c6:	9502      	str	r5, [sp, #8]
 80121c8:	f7ee fa2e 	bl	8000628 <__aeabi_dmul>
 80121cc:	4602      	mov	r2, r0
 80121ce:	460b      	mov	r3, r1
 80121d0:	4640      	mov	r0, r8
 80121d2:	4649      	mov	r1, r9
 80121d4:	f7ee f872 	bl	80002bc <__adddf3>
 80121d8:	3701      	adds	r7, #1
 80121da:	4680      	mov	r8, r0
 80121dc:	4689      	mov	r9, r1
 80121de:	9b07      	ldr	r3, [sp, #28]
 80121e0:	429f      	cmp	r7, r3
 80121e2:	dde9      	ble.n	80121b8 <__kernel_rem_pio2+0x98>
 80121e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80121e8:	3601      	adds	r6, #1
 80121ea:	e7c9      	b.n	8012180 <__kernel_rem_pio2+0x60>
 80121ec:	9b04      	ldr	r3, [sp, #16]
 80121ee:	aa0e      	add	r2, sp, #56	; 0x38
 80121f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80121f4:	930c      	str	r3, [sp, #48]	; 0x30
 80121f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80121f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80121fc:	9c04      	ldr	r4, [sp, #16]
 80121fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012200:	ab9a      	add	r3, sp, #616	; 0x268
 8012202:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012206:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801220a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801220e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012212:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012216:	ab9a      	add	r3, sp, #616	; 0x268
 8012218:	445b      	add	r3, fp
 801221a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801221e:	2500      	movs	r5, #0
 8012220:	1b63      	subs	r3, r4, r5
 8012222:	2b00      	cmp	r3, #0
 8012224:	dc78      	bgt.n	8012318 <__kernel_rem_pio2+0x1f8>
 8012226:	4650      	mov	r0, sl
 8012228:	ec49 8b10 	vmov	d0, r8, r9
 801222c:	f000 fc04 	bl	8012a38 <scalbn>
 8012230:	ec57 6b10 	vmov	r6, r7, d0
 8012234:	2200      	movs	r2, #0
 8012236:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801223a:	ee10 0a10 	vmov	r0, s0
 801223e:	4639      	mov	r1, r7
 8012240:	f7ee f9f2 	bl	8000628 <__aeabi_dmul>
 8012244:	ec41 0b10 	vmov	d0, r0, r1
 8012248:	f000 fb6e 	bl	8012928 <floor>
 801224c:	2200      	movs	r2, #0
 801224e:	ec51 0b10 	vmov	r0, r1, d0
 8012252:	4b7e      	ldr	r3, [pc, #504]	; (801244c <__kernel_rem_pio2+0x32c>)
 8012254:	f7ee f9e8 	bl	8000628 <__aeabi_dmul>
 8012258:	4602      	mov	r2, r0
 801225a:	460b      	mov	r3, r1
 801225c:	4630      	mov	r0, r6
 801225e:	4639      	mov	r1, r7
 8012260:	f7ee f82a 	bl	80002b8 <__aeabi_dsub>
 8012264:	460f      	mov	r7, r1
 8012266:	4606      	mov	r6, r0
 8012268:	f7ee fc8e 	bl	8000b88 <__aeabi_d2iz>
 801226c:	9006      	str	r0, [sp, #24]
 801226e:	f7ee f971 	bl	8000554 <__aeabi_i2d>
 8012272:	4602      	mov	r2, r0
 8012274:	460b      	mov	r3, r1
 8012276:	4630      	mov	r0, r6
 8012278:	4639      	mov	r1, r7
 801227a:	f7ee f81d 	bl	80002b8 <__aeabi_dsub>
 801227e:	f1ba 0f00 	cmp.w	sl, #0
 8012282:	4606      	mov	r6, r0
 8012284:	460f      	mov	r7, r1
 8012286:	dd6c      	ble.n	8012362 <__kernel_rem_pio2+0x242>
 8012288:	1e62      	subs	r2, r4, #1
 801228a:	ab0e      	add	r3, sp, #56	; 0x38
 801228c:	f1ca 0118 	rsb	r1, sl, #24
 8012290:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012294:	9d06      	ldr	r5, [sp, #24]
 8012296:	fa40 f301 	asr.w	r3, r0, r1
 801229a:	441d      	add	r5, r3
 801229c:	408b      	lsls	r3, r1
 801229e:	1ac0      	subs	r0, r0, r3
 80122a0:	ab0e      	add	r3, sp, #56	; 0x38
 80122a2:	9506      	str	r5, [sp, #24]
 80122a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80122a8:	f1ca 0317 	rsb	r3, sl, #23
 80122ac:	fa40 f303 	asr.w	r3, r0, r3
 80122b0:	9302      	str	r3, [sp, #8]
 80122b2:	9b02      	ldr	r3, [sp, #8]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	dd62      	ble.n	801237e <__kernel_rem_pio2+0x25e>
 80122b8:	9b06      	ldr	r3, [sp, #24]
 80122ba:	2200      	movs	r2, #0
 80122bc:	3301      	adds	r3, #1
 80122be:	9306      	str	r3, [sp, #24]
 80122c0:	4615      	mov	r5, r2
 80122c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80122c6:	4294      	cmp	r4, r2
 80122c8:	f300 8095 	bgt.w	80123f6 <__kernel_rem_pio2+0x2d6>
 80122cc:	f1ba 0f00 	cmp.w	sl, #0
 80122d0:	dd07      	ble.n	80122e2 <__kernel_rem_pio2+0x1c2>
 80122d2:	f1ba 0f01 	cmp.w	sl, #1
 80122d6:	f000 80a2 	beq.w	801241e <__kernel_rem_pio2+0x2fe>
 80122da:	f1ba 0f02 	cmp.w	sl, #2
 80122de:	f000 80c1 	beq.w	8012464 <__kernel_rem_pio2+0x344>
 80122e2:	9b02      	ldr	r3, [sp, #8]
 80122e4:	2b02      	cmp	r3, #2
 80122e6:	d14a      	bne.n	801237e <__kernel_rem_pio2+0x25e>
 80122e8:	4632      	mov	r2, r6
 80122ea:	463b      	mov	r3, r7
 80122ec:	2000      	movs	r0, #0
 80122ee:	4958      	ldr	r1, [pc, #352]	; (8012450 <__kernel_rem_pio2+0x330>)
 80122f0:	f7ed ffe2 	bl	80002b8 <__aeabi_dsub>
 80122f4:	4606      	mov	r6, r0
 80122f6:	460f      	mov	r7, r1
 80122f8:	2d00      	cmp	r5, #0
 80122fa:	d040      	beq.n	801237e <__kernel_rem_pio2+0x25e>
 80122fc:	4650      	mov	r0, sl
 80122fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012440 <__kernel_rem_pio2+0x320>
 8012302:	f000 fb99 	bl	8012a38 <scalbn>
 8012306:	4630      	mov	r0, r6
 8012308:	4639      	mov	r1, r7
 801230a:	ec53 2b10 	vmov	r2, r3, d0
 801230e:	f7ed ffd3 	bl	80002b8 <__aeabi_dsub>
 8012312:	4606      	mov	r6, r0
 8012314:	460f      	mov	r7, r1
 8012316:	e032      	b.n	801237e <__kernel_rem_pio2+0x25e>
 8012318:	2200      	movs	r2, #0
 801231a:	4b4e      	ldr	r3, [pc, #312]	; (8012454 <__kernel_rem_pio2+0x334>)
 801231c:	4640      	mov	r0, r8
 801231e:	4649      	mov	r1, r9
 8012320:	f7ee f982 	bl	8000628 <__aeabi_dmul>
 8012324:	f7ee fc30 	bl	8000b88 <__aeabi_d2iz>
 8012328:	f7ee f914 	bl	8000554 <__aeabi_i2d>
 801232c:	2200      	movs	r2, #0
 801232e:	4b4a      	ldr	r3, [pc, #296]	; (8012458 <__kernel_rem_pio2+0x338>)
 8012330:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012334:	f7ee f978 	bl	8000628 <__aeabi_dmul>
 8012338:	4602      	mov	r2, r0
 801233a:	460b      	mov	r3, r1
 801233c:	4640      	mov	r0, r8
 801233e:	4649      	mov	r1, r9
 8012340:	f7ed ffba 	bl	80002b8 <__aeabi_dsub>
 8012344:	f7ee fc20 	bl	8000b88 <__aeabi_d2iz>
 8012348:	ab0e      	add	r3, sp, #56	; 0x38
 801234a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801234e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012356:	f7ed ffb1 	bl	80002bc <__adddf3>
 801235a:	3501      	adds	r5, #1
 801235c:	4680      	mov	r8, r0
 801235e:	4689      	mov	r9, r1
 8012360:	e75e      	b.n	8012220 <__kernel_rem_pio2+0x100>
 8012362:	d105      	bne.n	8012370 <__kernel_rem_pio2+0x250>
 8012364:	1e63      	subs	r3, r4, #1
 8012366:	aa0e      	add	r2, sp, #56	; 0x38
 8012368:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801236c:	15c3      	asrs	r3, r0, #23
 801236e:	e79f      	b.n	80122b0 <__kernel_rem_pio2+0x190>
 8012370:	2200      	movs	r2, #0
 8012372:	4b3a      	ldr	r3, [pc, #232]	; (801245c <__kernel_rem_pio2+0x33c>)
 8012374:	f7ee fbde 	bl	8000b34 <__aeabi_dcmpge>
 8012378:	2800      	cmp	r0, #0
 801237a:	d139      	bne.n	80123f0 <__kernel_rem_pio2+0x2d0>
 801237c:	9002      	str	r0, [sp, #8]
 801237e:	2200      	movs	r2, #0
 8012380:	2300      	movs	r3, #0
 8012382:	4630      	mov	r0, r6
 8012384:	4639      	mov	r1, r7
 8012386:	f7ee fbb7 	bl	8000af8 <__aeabi_dcmpeq>
 801238a:	2800      	cmp	r0, #0
 801238c:	f000 80c7 	beq.w	801251e <__kernel_rem_pio2+0x3fe>
 8012390:	1e65      	subs	r5, r4, #1
 8012392:	462b      	mov	r3, r5
 8012394:	2200      	movs	r2, #0
 8012396:	9904      	ldr	r1, [sp, #16]
 8012398:	428b      	cmp	r3, r1
 801239a:	da6a      	bge.n	8012472 <__kernel_rem_pio2+0x352>
 801239c:	2a00      	cmp	r2, #0
 801239e:	f000 8088 	beq.w	80124b2 <__kernel_rem_pio2+0x392>
 80123a2:	ab0e      	add	r3, sp, #56	; 0x38
 80123a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80123a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	f000 80b4 	beq.w	801251a <__kernel_rem_pio2+0x3fa>
 80123b2:	4650      	mov	r0, sl
 80123b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012440 <__kernel_rem_pio2+0x320>
 80123b8:	f000 fb3e 	bl	8012a38 <scalbn>
 80123bc:	00ec      	lsls	r4, r5, #3
 80123be:	ab72      	add	r3, sp, #456	; 0x1c8
 80123c0:	191e      	adds	r6, r3, r4
 80123c2:	ec59 8b10 	vmov	r8, r9, d0
 80123c6:	f106 0a08 	add.w	sl, r6, #8
 80123ca:	462f      	mov	r7, r5
 80123cc:	2f00      	cmp	r7, #0
 80123ce:	f280 80df 	bge.w	8012590 <__kernel_rem_pio2+0x470>
 80123d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012438 <__kernel_rem_pio2+0x318>
 80123d6:	f04f 0a00 	mov.w	sl, #0
 80123da:	eba5 030a 	sub.w	r3, r5, sl
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f2c0 810a 	blt.w	80125f8 <__kernel_rem_pio2+0x4d8>
 80123e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012460 <__kernel_rem_pio2+0x340>
 80123e8:	ec59 8b18 	vmov	r8, r9, d8
 80123ec:	2700      	movs	r7, #0
 80123ee:	e0f5      	b.n	80125dc <__kernel_rem_pio2+0x4bc>
 80123f0:	2302      	movs	r3, #2
 80123f2:	9302      	str	r3, [sp, #8]
 80123f4:	e760      	b.n	80122b8 <__kernel_rem_pio2+0x198>
 80123f6:	ab0e      	add	r3, sp, #56	; 0x38
 80123f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123fc:	b94d      	cbnz	r5, 8012412 <__kernel_rem_pio2+0x2f2>
 80123fe:	b12b      	cbz	r3, 801240c <__kernel_rem_pio2+0x2ec>
 8012400:	a80e      	add	r0, sp, #56	; 0x38
 8012402:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012406:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801240a:	2301      	movs	r3, #1
 801240c:	3201      	adds	r2, #1
 801240e:	461d      	mov	r5, r3
 8012410:	e759      	b.n	80122c6 <__kernel_rem_pio2+0x1a6>
 8012412:	a80e      	add	r0, sp, #56	; 0x38
 8012414:	1acb      	subs	r3, r1, r3
 8012416:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801241a:	462b      	mov	r3, r5
 801241c:	e7f6      	b.n	801240c <__kernel_rem_pio2+0x2ec>
 801241e:	1e62      	subs	r2, r4, #1
 8012420:	ab0e      	add	r3, sp, #56	; 0x38
 8012422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012426:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801242a:	a90e      	add	r1, sp, #56	; 0x38
 801242c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012430:	e757      	b.n	80122e2 <__kernel_rem_pio2+0x1c2>
 8012432:	bf00      	nop
 8012434:	f3af 8000 	nop.w
	...
 8012444:	3ff00000 	.word	0x3ff00000
 8012448:	08018240 	.word	0x08018240
 801244c:	40200000 	.word	0x40200000
 8012450:	3ff00000 	.word	0x3ff00000
 8012454:	3e700000 	.word	0x3e700000
 8012458:	41700000 	.word	0x41700000
 801245c:	3fe00000 	.word	0x3fe00000
 8012460:	08018200 	.word	0x08018200
 8012464:	1e62      	subs	r2, r4, #1
 8012466:	ab0e      	add	r3, sp, #56	; 0x38
 8012468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801246c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012470:	e7db      	b.n	801242a <__kernel_rem_pio2+0x30a>
 8012472:	a90e      	add	r1, sp, #56	; 0x38
 8012474:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012478:	3b01      	subs	r3, #1
 801247a:	430a      	orrs	r2, r1
 801247c:	e78b      	b.n	8012396 <__kernel_rem_pio2+0x276>
 801247e:	3301      	adds	r3, #1
 8012480:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012484:	2900      	cmp	r1, #0
 8012486:	d0fa      	beq.n	801247e <__kernel_rem_pio2+0x35e>
 8012488:	9a08      	ldr	r2, [sp, #32]
 801248a:	4422      	add	r2, r4
 801248c:	00d2      	lsls	r2, r2, #3
 801248e:	a922      	add	r1, sp, #136	; 0x88
 8012490:	18e3      	adds	r3, r4, r3
 8012492:	9206      	str	r2, [sp, #24]
 8012494:	440a      	add	r2, r1
 8012496:	9302      	str	r3, [sp, #8]
 8012498:	f10b 0108 	add.w	r1, fp, #8
 801249c:	f102 0308 	add.w	r3, r2, #8
 80124a0:	1c66      	adds	r6, r4, #1
 80124a2:	910a      	str	r1, [sp, #40]	; 0x28
 80124a4:	2500      	movs	r5, #0
 80124a6:	930d      	str	r3, [sp, #52]	; 0x34
 80124a8:	9b02      	ldr	r3, [sp, #8]
 80124aa:	42b3      	cmp	r3, r6
 80124ac:	da04      	bge.n	80124b8 <__kernel_rem_pio2+0x398>
 80124ae:	461c      	mov	r4, r3
 80124b0:	e6a6      	b.n	8012200 <__kernel_rem_pio2+0xe0>
 80124b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124b4:	2301      	movs	r3, #1
 80124b6:	e7e3      	b.n	8012480 <__kernel_rem_pio2+0x360>
 80124b8:	9b06      	ldr	r3, [sp, #24]
 80124ba:	18ef      	adds	r7, r5, r3
 80124bc:	ab22      	add	r3, sp, #136	; 0x88
 80124be:	441f      	add	r7, r3
 80124c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80124c6:	f7ee f845 	bl	8000554 <__aeabi_i2d>
 80124ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124cc:	461c      	mov	r4, r3
 80124ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124d0:	e9c7 0100 	strd	r0, r1, [r7]
 80124d4:	eb03 0b05 	add.w	fp, r3, r5
 80124d8:	2700      	movs	r7, #0
 80124da:	f04f 0800 	mov.w	r8, #0
 80124de:	f04f 0900 	mov.w	r9, #0
 80124e2:	9b07      	ldr	r3, [sp, #28]
 80124e4:	429f      	cmp	r7, r3
 80124e6:	dd08      	ble.n	80124fa <__kernel_rem_pio2+0x3da>
 80124e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124ea:	aa72      	add	r2, sp, #456	; 0x1c8
 80124ec:	18eb      	adds	r3, r5, r3
 80124ee:	4413      	add	r3, r2
 80124f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80124f4:	3601      	adds	r6, #1
 80124f6:	3508      	adds	r5, #8
 80124f8:	e7d6      	b.n	80124a8 <__kernel_rem_pio2+0x388>
 80124fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80124fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012502:	f7ee f891 	bl	8000628 <__aeabi_dmul>
 8012506:	4602      	mov	r2, r0
 8012508:	460b      	mov	r3, r1
 801250a:	4640      	mov	r0, r8
 801250c:	4649      	mov	r1, r9
 801250e:	f7ed fed5 	bl	80002bc <__adddf3>
 8012512:	3701      	adds	r7, #1
 8012514:	4680      	mov	r8, r0
 8012516:	4689      	mov	r9, r1
 8012518:	e7e3      	b.n	80124e2 <__kernel_rem_pio2+0x3c2>
 801251a:	3d01      	subs	r5, #1
 801251c:	e741      	b.n	80123a2 <__kernel_rem_pio2+0x282>
 801251e:	f1ca 0000 	rsb	r0, sl, #0
 8012522:	ec47 6b10 	vmov	d0, r6, r7
 8012526:	f000 fa87 	bl	8012a38 <scalbn>
 801252a:	ec57 6b10 	vmov	r6, r7, d0
 801252e:	2200      	movs	r2, #0
 8012530:	4b99      	ldr	r3, [pc, #612]	; (8012798 <__kernel_rem_pio2+0x678>)
 8012532:	ee10 0a10 	vmov	r0, s0
 8012536:	4639      	mov	r1, r7
 8012538:	f7ee fafc 	bl	8000b34 <__aeabi_dcmpge>
 801253c:	b1f8      	cbz	r0, 801257e <__kernel_rem_pio2+0x45e>
 801253e:	2200      	movs	r2, #0
 8012540:	4b96      	ldr	r3, [pc, #600]	; (801279c <__kernel_rem_pio2+0x67c>)
 8012542:	4630      	mov	r0, r6
 8012544:	4639      	mov	r1, r7
 8012546:	f7ee f86f 	bl	8000628 <__aeabi_dmul>
 801254a:	f7ee fb1d 	bl	8000b88 <__aeabi_d2iz>
 801254e:	4680      	mov	r8, r0
 8012550:	f7ee f800 	bl	8000554 <__aeabi_i2d>
 8012554:	2200      	movs	r2, #0
 8012556:	4b90      	ldr	r3, [pc, #576]	; (8012798 <__kernel_rem_pio2+0x678>)
 8012558:	f7ee f866 	bl	8000628 <__aeabi_dmul>
 801255c:	460b      	mov	r3, r1
 801255e:	4602      	mov	r2, r0
 8012560:	4639      	mov	r1, r7
 8012562:	4630      	mov	r0, r6
 8012564:	f7ed fea8 	bl	80002b8 <__aeabi_dsub>
 8012568:	f7ee fb0e 	bl	8000b88 <__aeabi_d2iz>
 801256c:	1c65      	adds	r5, r4, #1
 801256e:	ab0e      	add	r3, sp, #56	; 0x38
 8012570:	f10a 0a18 	add.w	sl, sl, #24
 8012574:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012578:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801257c:	e719      	b.n	80123b2 <__kernel_rem_pio2+0x292>
 801257e:	4630      	mov	r0, r6
 8012580:	4639      	mov	r1, r7
 8012582:	f7ee fb01 	bl	8000b88 <__aeabi_d2iz>
 8012586:	ab0e      	add	r3, sp, #56	; 0x38
 8012588:	4625      	mov	r5, r4
 801258a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801258e:	e710      	b.n	80123b2 <__kernel_rem_pio2+0x292>
 8012590:	ab0e      	add	r3, sp, #56	; 0x38
 8012592:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012596:	f7ed ffdd 	bl	8000554 <__aeabi_i2d>
 801259a:	4642      	mov	r2, r8
 801259c:	464b      	mov	r3, r9
 801259e:	f7ee f843 	bl	8000628 <__aeabi_dmul>
 80125a2:	2200      	movs	r2, #0
 80125a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80125a8:	4b7c      	ldr	r3, [pc, #496]	; (801279c <__kernel_rem_pio2+0x67c>)
 80125aa:	4640      	mov	r0, r8
 80125ac:	4649      	mov	r1, r9
 80125ae:	f7ee f83b 	bl	8000628 <__aeabi_dmul>
 80125b2:	3f01      	subs	r7, #1
 80125b4:	4680      	mov	r8, r0
 80125b6:	4689      	mov	r9, r1
 80125b8:	e708      	b.n	80123cc <__kernel_rem_pio2+0x2ac>
 80125ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80125be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80125c6:	f7ee f82f 	bl	8000628 <__aeabi_dmul>
 80125ca:	4602      	mov	r2, r0
 80125cc:	460b      	mov	r3, r1
 80125ce:	4640      	mov	r0, r8
 80125d0:	4649      	mov	r1, r9
 80125d2:	f7ed fe73 	bl	80002bc <__adddf3>
 80125d6:	3701      	adds	r7, #1
 80125d8:	4680      	mov	r8, r0
 80125da:	4689      	mov	r9, r1
 80125dc:	9b04      	ldr	r3, [sp, #16]
 80125de:	429f      	cmp	r7, r3
 80125e0:	dc01      	bgt.n	80125e6 <__kernel_rem_pio2+0x4c6>
 80125e2:	45ba      	cmp	sl, r7
 80125e4:	dae9      	bge.n	80125ba <__kernel_rem_pio2+0x49a>
 80125e6:	ab4a      	add	r3, sp, #296	; 0x128
 80125e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80125ec:	e9c3 8900 	strd	r8, r9, [r3]
 80125f0:	f10a 0a01 	add.w	sl, sl, #1
 80125f4:	3e08      	subs	r6, #8
 80125f6:	e6f0      	b.n	80123da <__kernel_rem_pio2+0x2ba>
 80125f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80125fa:	2b03      	cmp	r3, #3
 80125fc:	d85b      	bhi.n	80126b6 <__kernel_rem_pio2+0x596>
 80125fe:	e8df f003 	tbb	[pc, r3]
 8012602:	264a      	.short	0x264a
 8012604:	0226      	.short	0x0226
 8012606:	ab9a      	add	r3, sp, #616	; 0x268
 8012608:	441c      	add	r4, r3
 801260a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801260e:	46a2      	mov	sl, r4
 8012610:	46ab      	mov	fp, r5
 8012612:	f1bb 0f00 	cmp.w	fp, #0
 8012616:	dc6c      	bgt.n	80126f2 <__kernel_rem_pio2+0x5d2>
 8012618:	46a2      	mov	sl, r4
 801261a:	46ab      	mov	fp, r5
 801261c:	f1bb 0f01 	cmp.w	fp, #1
 8012620:	f300 8086 	bgt.w	8012730 <__kernel_rem_pio2+0x610>
 8012624:	2000      	movs	r0, #0
 8012626:	2100      	movs	r1, #0
 8012628:	2d01      	cmp	r5, #1
 801262a:	f300 80a0 	bgt.w	801276e <__kernel_rem_pio2+0x64e>
 801262e:	9b02      	ldr	r3, [sp, #8]
 8012630:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012634:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012638:	2b00      	cmp	r3, #0
 801263a:	f040 809e 	bne.w	801277a <__kernel_rem_pio2+0x65a>
 801263e:	9b01      	ldr	r3, [sp, #4]
 8012640:	e9c3 7800 	strd	r7, r8, [r3]
 8012644:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012648:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801264c:	e033      	b.n	80126b6 <__kernel_rem_pio2+0x596>
 801264e:	3408      	adds	r4, #8
 8012650:	ab4a      	add	r3, sp, #296	; 0x128
 8012652:	441c      	add	r4, r3
 8012654:	462e      	mov	r6, r5
 8012656:	2000      	movs	r0, #0
 8012658:	2100      	movs	r1, #0
 801265a:	2e00      	cmp	r6, #0
 801265c:	da3a      	bge.n	80126d4 <__kernel_rem_pio2+0x5b4>
 801265e:	9b02      	ldr	r3, [sp, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d03d      	beq.n	80126e0 <__kernel_rem_pio2+0x5c0>
 8012664:	4602      	mov	r2, r0
 8012666:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801266a:	9c01      	ldr	r4, [sp, #4]
 801266c:	e9c4 2300 	strd	r2, r3, [r4]
 8012670:	4602      	mov	r2, r0
 8012672:	460b      	mov	r3, r1
 8012674:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012678:	f7ed fe1e 	bl	80002b8 <__aeabi_dsub>
 801267c:	ae4c      	add	r6, sp, #304	; 0x130
 801267e:	2401      	movs	r4, #1
 8012680:	42a5      	cmp	r5, r4
 8012682:	da30      	bge.n	80126e6 <__kernel_rem_pio2+0x5c6>
 8012684:	9b02      	ldr	r3, [sp, #8]
 8012686:	b113      	cbz	r3, 801268e <__kernel_rem_pio2+0x56e>
 8012688:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801268c:	4619      	mov	r1, r3
 801268e:	9b01      	ldr	r3, [sp, #4]
 8012690:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012694:	e00f      	b.n	80126b6 <__kernel_rem_pio2+0x596>
 8012696:	ab9a      	add	r3, sp, #616	; 0x268
 8012698:	441c      	add	r4, r3
 801269a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801269e:	2000      	movs	r0, #0
 80126a0:	2100      	movs	r1, #0
 80126a2:	2d00      	cmp	r5, #0
 80126a4:	da10      	bge.n	80126c8 <__kernel_rem_pio2+0x5a8>
 80126a6:	9b02      	ldr	r3, [sp, #8]
 80126a8:	b113      	cbz	r3, 80126b0 <__kernel_rem_pio2+0x590>
 80126aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80126ae:	4619      	mov	r1, r3
 80126b0:	9b01      	ldr	r3, [sp, #4]
 80126b2:	e9c3 0100 	strd	r0, r1, [r3]
 80126b6:	9b06      	ldr	r3, [sp, #24]
 80126b8:	f003 0007 	and.w	r0, r3, #7
 80126bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80126c0:	ecbd 8b02 	vpop	{d8}
 80126c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126cc:	f7ed fdf6 	bl	80002bc <__adddf3>
 80126d0:	3d01      	subs	r5, #1
 80126d2:	e7e6      	b.n	80126a2 <__kernel_rem_pio2+0x582>
 80126d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80126d8:	f7ed fdf0 	bl	80002bc <__adddf3>
 80126dc:	3e01      	subs	r6, #1
 80126de:	e7bc      	b.n	801265a <__kernel_rem_pio2+0x53a>
 80126e0:	4602      	mov	r2, r0
 80126e2:	460b      	mov	r3, r1
 80126e4:	e7c1      	b.n	801266a <__kernel_rem_pio2+0x54a>
 80126e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80126ea:	f7ed fde7 	bl	80002bc <__adddf3>
 80126ee:	3401      	adds	r4, #1
 80126f0:	e7c6      	b.n	8012680 <__kernel_rem_pio2+0x560>
 80126f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80126f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80126fa:	4640      	mov	r0, r8
 80126fc:	ec53 2b17 	vmov	r2, r3, d7
 8012700:	4649      	mov	r1, r9
 8012702:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012706:	f7ed fdd9 	bl	80002bc <__adddf3>
 801270a:	4602      	mov	r2, r0
 801270c:	460b      	mov	r3, r1
 801270e:	4606      	mov	r6, r0
 8012710:	460f      	mov	r7, r1
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	f7ed fdcf 	bl	80002b8 <__aeabi_dsub>
 801271a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801271e:	f7ed fdcd 	bl	80002bc <__adddf3>
 8012722:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012726:	e9ca 0100 	strd	r0, r1, [sl]
 801272a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801272e:	e770      	b.n	8012612 <__kernel_rem_pio2+0x4f2>
 8012730:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012734:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012738:	4630      	mov	r0, r6
 801273a:	ec53 2b17 	vmov	r2, r3, d7
 801273e:	4639      	mov	r1, r7
 8012740:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012744:	f7ed fdba 	bl	80002bc <__adddf3>
 8012748:	4602      	mov	r2, r0
 801274a:	460b      	mov	r3, r1
 801274c:	4680      	mov	r8, r0
 801274e:	4689      	mov	r9, r1
 8012750:	4630      	mov	r0, r6
 8012752:	4639      	mov	r1, r7
 8012754:	f7ed fdb0 	bl	80002b8 <__aeabi_dsub>
 8012758:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801275c:	f7ed fdae 	bl	80002bc <__adddf3>
 8012760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012764:	e9ca 0100 	strd	r0, r1, [sl]
 8012768:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801276c:	e756      	b.n	801261c <__kernel_rem_pio2+0x4fc>
 801276e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012772:	f7ed fda3 	bl	80002bc <__adddf3>
 8012776:	3d01      	subs	r5, #1
 8012778:	e756      	b.n	8012628 <__kernel_rem_pio2+0x508>
 801277a:	9b01      	ldr	r3, [sp, #4]
 801277c:	9a01      	ldr	r2, [sp, #4]
 801277e:	601f      	str	r7, [r3, #0]
 8012780:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012784:	605c      	str	r4, [r3, #4]
 8012786:	609d      	str	r5, [r3, #8]
 8012788:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801278c:	60d3      	str	r3, [r2, #12]
 801278e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012792:	6110      	str	r0, [r2, #16]
 8012794:	6153      	str	r3, [r2, #20]
 8012796:	e78e      	b.n	80126b6 <__kernel_rem_pio2+0x596>
 8012798:	41700000 	.word	0x41700000
 801279c:	3e700000 	.word	0x3e700000

080127a0 <__kernel_sin>:
 80127a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127a4:	ec55 4b10 	vmov	r4, r5, d0
 80127a8:	b085      	sub	sp, #20
 80127aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80127ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80127b2:	ed8d 1b00 	vstr	d1, [sp]
 80127b6:	9002      	str	r0, [sp, #8]
 80127b8:	da06      	bge.n	80127c8 <__kernel_sin+0x28>
 80127ba:	ee10 0a10 	vmov	r0, s0
 80127be:	4629      	mov	r1, r5
 80127c0:	f7ee f9e2 	bl	8000b88 <__aeabi_d2iz>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	d051      	beq.n	801286c <__kernel_sin+0xcc>
 80127c8:	4622      	mov	r2, r4
 80127ca:	462b      	mov	r3, r5
 80127cc:	4620      	mov	r0, r4
 80127ce:	4629      	mov	r1, r5
 80127d0:	f7ed ff2a 	bl	8000628 <__aeabi_dmul>
 80127d4:	4682      	mov	sl, r0
 80127d6:	468b      	mov	fp, r1
 80127d8:	4602      	mov	r2, r0
 80127da:	460b      	mov	r3, r1
 80127dc:	4620      	mov	r0, r4
 80127de:	4629      	mov	r1, r5
 80127e0:	f7ed ff22 	bl	8000628 <__aeabi_dmul>
 80127e4:	a341      	add	r3, pc, #260	; (adr r3, 80128ec <__kernel_sin+0x14c>)
 80127e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ea:	4680      	mov	r8, r0
 80127ec:	4689      	mov	r9, r1
 80127ee:	4650      	mov	r0, sl
 80127f0:	4659      	mov	r1, fp
 80127f2:	f7ed ff19 	bl	8000628 <__aeabi_dmul>
 80127f6:	a33f      	add	r3, pc, #252	; (adr r3, 80128f4 <__kernel_sin+0x154>)
 80127f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fc:	f7ed fd5c 	bl	80002b8 <__aeabi_dsub>
 8012800:	4652      	mov	r2, sl
 8012802:	465b      	mov	r3, fp
 8012804:	f7ed ff10 	bl	8000628 <__aeabi_dmul>
 8012808:	a33c      	add	r3, pc, #240	; (adr r3, 80128fc <__kernel_sin+0x15c>)
 801280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801280e:	f7ed fd55 	bl	80002bc <__adddf3>
 8012812:	4652      	mov	r2, sl
 8012814:	465b      	mov	r3, fp
 8012816:	f7ed ff07 	bl	8000628 <__aeabi_dmul>
 801281a:	a33a      	add	r3, pc, #232	; (adr r3, 8012904 <__kernel_sin+0x164>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	f7ed fd4a 	bl	80002b8 <__aeabi_dsub>
 8012824:	4652      	mov	r2, sl
 8012826:	465b      	mov	r3, fp
 8012828:	f7ed fefe 	bl	8000628 <__aeabi_dmul>
 801282c:	a337      	add	r3, pc, #220	; (adr r3, 801290c <__kernel_sin+0x16c>)
 801282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012832:	f7ed fd43 	bl	80002bc <__adddf3>
 8012836:	9b02      	ldr	r3, [sp, #8]
 8012838:	4606      	mov	r6, r0
 801283a:	460f      	mov	r7, r1
 801283c:	b9db      	cbnz	r3, 8012876 <__kernel_sin+0xd6>
 801283e:	4602      	mov	r2, r0
 8012840:	460b      	mov	r3, r1
 8012842:	4650      	mov	r0, sl
 8012844:	4659      	mov	r1, fp
 8012846:	f7ed feef 	bl	8000628 <__aeabi_dmul>
 801284a:	a325      	add	r3, pc, #148	; (adr r3, 80128e0 <__kernel_sin+0x140>)
 801284c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012850:	f7ed fd32 	bl	80002b8 <__aeabi_dsub>
 8012854:	4642      	mov	r2, r8
 8012856:	464b      	mov	r3, r9
 8012858:	f7ed fee6 	bl	8000628 <__aeabi_dmul>
 801285c:	4602      	mov	r2, r0
 801285e:	460b      	mov	r3, r1
 8012860:	4620      	mov	r0, r4
 8012862:	4629      	mov	r1, r5
 8012864:	f7ed fd2a 	bl	80002bc <__adddf3>
 8012868:	4604      	mov	r4, r0
 801286a:	460d      	mov	r5, r1
 801286c:	ec45 4b10 	vmov	d0, r4, r5
 8012870:	b005      	add	sp, #20
 8012872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012876:	2200      	movs	r2, #0
 8012878:	4b1b      	ldr	r3, [pc, #108]	; (80128e8 <__kernel_sin+0x148>)
 801287a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801287e:	f7ed fed3 	bl	8000628 <__aeabi_dmul>
 8012882:	4632      	mov	r2, r6
 8012884:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012888:	463b      	mov	r3, r7
 801288a:	4640      	mov	r0, r8
 801288c:	4649      	mov	r1, r9
 801288e:	f7ed fecb 	bl	8000628 <__aeabi_dmul>
 8012892:	4602      	mov	r2, r0
 8012894:	460b      	mov	r3, r1
 8012896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801289a:	f7ed fd0d 	bl	80002b8 <__aeabi_dsub>
 801289e:	4652      	mov	r2, sl
 80128a0:	465b      	mov	r3, fp
 80128a2:	f7ed fec1 	bl	8000628 <__aeabi_dmul>
 80128a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128aa:	f7ed fd05 	bl	80002b8 <__aeabi_dsub>
 80128ae:	a30c      	add	r3, pc, #48	; (adr r3, 80128e0 <__kernel_sin+0x140>)
 80128b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128b4:	4606      	mov	r6, r0
 80128b6:	460f      	mov	r7, r1
 80128b8:	4640      	mov	r0, r8
 80128ba:	4649      	mov	r1, r9
 80128bc:	f7ed feb4 	bl	8000628 <__aeabi_dmul>
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	4630      	mov	r0, r6
 80128c6:	4639      	mov	r1, r7
 80128c8:	f7ed fcf8 	bl	80002bc <__adddf3>
 80128cc:	4602      	mov	r2, r0
 80128ce:	460b      	mov	r3, r1
 80128d0:	4620      	mov	r0, r4
 80128d2:	4629      	mov	r1, r5
 80128d4:	f7ed fcf0 	bl	80002b8 <__aeabi_dsub>
 80128d8:	e7c6      	b.n	8012868 <__kernel_sin+0xc8>
 80128da:	bf00      	nop
 80128dc:	f3af 8000 	nop.w
 80128e0:	55555549 	.word	0x55555549
 80128e4:	3fc55555 	.word	0x3fc55555
 80128e8:	3fe00000 	.word	0x3fe00000
 80128ec:	5acfd57c 	.word	0x5acfd57c
 80128f0:	3de5d93a 	.word	0x3de5d93a
 80128f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80128f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80128fc:	57b1fe7d 	.word	0x57b1fe7d
 8012900:	3ec71de3 	.word	0x3ec71de3
 8012904:	19c161d5 	.word	0x19c161d5
 8012908:	3f2a01a0 	.word	0x3f2a01a0
 801290c:	1110f8a6 	.word	0x1110f8a6
 8012910:	3f811111 	.word	0x3f811111

08012914 <fabs>:
 8012914:	ec51 0b10 	vmov	r0, r1, d0
 8012918:	ee10 2a10 	vmov	r2, s0
 801291c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012920:	ec43 2b10 	vmov	d0, r2, r3
 8012924:	4770      	bx	lr
	...

08012928 <floor>:
 8012928:	ec51 0b10 	vmov	r0, r1, d0
 801292c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012930:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012934:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012938:	2e13      	cmp	r6, #19
 801293a:	460c      	mov	r4, r1
 801293c:	ee10 5a10 	vmov	r5, s0
 8012940:	4680      	mov	r8, r0
 8012942:	dc34      	bgt.n	80129ae <floor+0x86>
 8012944:	2e00      	cmp	r6, #0
 8012946:	da16      	bge.n	8012976 <floor+0x4e>
 8012948:	a335      	add	r3, pc, #212	; (adr r3, 8012a20 <floor+0xf8>)
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294e:	f7ed fcb5 	bl	80002bc <__adddf3>
 8012952:	2200      	movs	r2, #0
 8012954:	2300      	movs	r3, #0
 8012956:	f7ee f8f7 	bl	8000b48 <__aeabi_dcmpgt>
 801295a:	b148      	cbz	r0, 8012970 <floor+0x48>
 801295c:	2c00      	cmp	r4, #0
 801295e:	da59      	bge.n	8012a14 <floor+0xec>
 8012960:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012964:	4a30      	ldr	r2, [pc, #192]	; (8012a28 <floor+0x100>)
 8012966:	432b      	orrs	r3, r5
 8012968:	2500      	movs	r5, #0
 801296a:	42ab      	cmp	r3, r5
 801296c:	bf18      	it	ne
 801296e:	4614      	movne	r4, r2
 8012970:	4621      	mov	r1, r4
 8012972:	4628      	mov	r0, r5
 8012974:	e025      	b.n	80129c2 <floor+0x9a>
 8012976:	4f2d      	ldr	r7, [pc, #180]	; (8012a2c <floor+0x104>)
 8012978:	4137      	asrs	r7, r6
 801297a:	ea01 0307 	and.w	r3, r1, r7
 801297e:	4303      	orrs	r3, r0
 8012980:	d01f      	beq.n	80129c2 <floor+0x9a>
 8012982:	a327      	add	r3, pc, #156	; (adr r3, 8012a20 <floor+0xf8>)
 8012984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012988:	f7ed fc98 	bl	80002bc <__adddf3>
 801298c:	2200      	movs	r2, #0
 801298e:	2300      	movs	r3, #0
 8012990:	f7ee f8da 	bl	8000b48 <__aeabi_dcmpgt>
 8012994:	2800      	cmp	r0, #0
 8012996:	d0eb      	beq.n	8012970 <floor+0x48>
 8012998:	2c00      	cmp	r4, #0
 801299a:	bfbe      	ittt	lt
 801299c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80129a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80129a4:	19a4      	addlt	r4, r4, r6
 80129a6:	ea24 0407 	bic.w	r4, r4, r7
 80129aa:	2500      	movs	r5, #0
 80129ac:	e7e0      	b.n	8012970 <floor+0x48>
 80129ae:	2e33      	cmp	r6, #51	; 0x33
 80129b0:	dd0b      	ble.n	80129ca <floor+0xa2>
 80129b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80129b6:	d104      	bne.n	80129c2 <floor+0x9a>
 80129b8:	ee10 2a10 	vmov	r2, s0
 80129bc:	460b      	mov	r3, r1
 80129be:	f7ed fc7d 	bl	80002bc <__adddf3>
 80129c2:	ec41 0b10 	vmov	d0, r0, r1
 80129c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80129ce:	f04f 33ff 	mov.w	r3, #4294967295
 80129d2:	fa23 f707 	lsr.w	r7, r3, r7
 80129d6:	4207      	tst	r7, r0
 80129d8:	d0f3      	beq.n	80129c2 <floor+0x9a>
 80129da:	a311      	add	r3, pc, #68	; (adr r3, 8012a20 <floor+0xf8>)
 80129dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129e0:	f7ed fc6c 	bl	80002bc <__adddf3>
 80129e4:	2200      	movs	r2, #0
 80129e6:	2300      	movs	r3, #0
 80129e8:	f7ee f8ae 	bl	8000b48 <__aeabi_dcmpgt>
 80129ec:	2800      	cmp	r0, #0
 80129ee:	d0bf      	beq.n	8012970 <floor+0x48>
 80129f0:	2c00      	cmp	r4, #0
 80129f2:	da02      	bge.n	80129fa <floor+0xd2>
 80129f4:	2e14      	cmp	r6, #20
 80129f6:	d103      	bne.n	8012a00 <floor+0xd8>
 80129f8:	3401      	adds	r4, #1
 80129fa:	ea25 0507 	bic.w	r5, r5, r7
 80129fe:	e7b7      	b.n	8012970 <floor+0x48>
 8012a00:	2301      	movs	r3, #1
 8012a02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012a06:	fa03 f606 	lsl.w	r6, r3, r6
 8012a0a:	4435      	add	r5, r6
 8012a0c:	4545      	cmp	r5, r8
 8012a0e:	bf38      	it	cc
 8012a10:	18e4      	addcc	r4, r4, r3
 8012a12:	e7f2      	b.n	80129fa <floor+0xd2>
 8012a14:	2500      	movs	r5, #0
 8012a16:	462c      	mov	r4, r5
 8012a18:	e7aa      	b.n	8012970 <floor+0x48>
 8012a1a:	bf00      	nop
 8012a1c:	f3af 8000 	nop.w
 8012a20:	8800759c 	.word	0x8800759c
 8012a24:	7e37e43c 	.word	0x7e37e43c
 8012a28:	bff00000 	.word	0xbff00000
 8012a2c:	000fffff 	.word	0x000fffff

08012a30 <matherr>:
 8012a30:	2000      	movs	r0, #0
 8012a32:	4770      	bx	lr
 8012a34:	0000      	movs	r0, r0
	...

08012a38 <scalbn>:
 8012a38:	b570      	push	{r4, r5, r6, lr}
 8012a3a:	ec55 4b10 	vmov	r4, r5, d0
 8012a3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012a42:	4606      	mov	r6, r0
 8012a44:	462b      	mov	r3, r5
 8012a46:	b9aa      	cbnz	r2, 8012a74 <scalbn+0x3c>
 8012a48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012a4c:	4323      	orrs	r3, r4
 8012a4e:	d03b      	beq.n	8012ac8 <scalbn+0x90>
 8012a50:	4b31      	ldr	r3, [pc, #196]	; (8012b18 <scalbn+0xe0>)
 8012a52:	4629      	mov	r1, r5
 8012a54:	2200      	movs	r2, #0
 8012a56:	ee10 0a10 	vmov	r0, s0
 8012a5a:	f7ed fde5 	bl	8000628 <__aeabi_dmul>
 8012a5e:	4b2f      	ldr	r3, [pc, #188]	; (8012b1c <scalbn+0xe4>)
 8012a60:	429e      	cmp	r6, r3
 8012a62:	4604      	mov	r4, r0
 8012a64:	460d      	mov	r5, r1
 8012a66:	da12      	bge.n	8012a8e <scalbn+0x56>
 8012a68:	a327      	add	r3, pc, #156	; (adr r3, 8012b08 <scalbn+0xd0>)
 8012a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a6e:	f7ed fddb 	bl	8000628 <__aeabi_dmul>
 8012a72:	e009      	b.n	8012a88 <scalbn+0x50>
 8012a74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012a78:	428a      	cmp	r2, r1
 8012a7a:	d10c      	bne.n	8012a96 <scalbn+0x5e>
 8012a7c:	ee10 2a10 	vmov	r2, s0
 8012a80:	4620      	mov	r0, r4
 8012a82:	4629      	mov	r1, r5
 8012a84:	f7ed fc1a 	bl	80002bc <__adddf3>
 8012a88:	4604      	mov	r4, r0
 8012a8a:	460d      	mov	r5, r1
 8012a8c:	e01c      	b.n	8012ac8 <scalbn+0x90>
 8012a8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012a92:	460b      	mov	r3, r1
 8012a94:	3a36      	subs	r2, #54	; 0x36
 8012a96:	4432      	add	r2, r6
 8012a98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012a9c:	428a      	cmp	r2, r1
 8012a9e:	dd0b      	ble.n	8012ab8 <scalbn+0x80>
 8012aa0:	ec45 4b11 	vmov	d1, r4, r5
 8012aa4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012b10 <scalbn+0xd8>
 8012aa8:	f000 f83c 	bl	8012b24 <copysign>
 8012aac:	a318      	add	r3, pc, #96	; (adr r3, 8012b10 <scalbn+0xd8>)
 8012aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab2:	ec51 0b10 	vmov	r0, r1, d0
 8012ab6:	e7da      	b.n	8012a6e <scalbn+0x36>
 8012ab8:	2a00      	cmp	r2, #0
 8012aba:	dd08      	ble.n	8012ace <scalbn+0x96>
 8012abc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012ac0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012ac4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012ac8:	ec45 4b10 	vmov	d0, r4, r5
 8012acc:	bd70      	pop	{r4, r5, r6, pc}
 8012ace:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012ad2:	da0d      	bge.n	8012af0 <scalbn+0xb8>
 8012ad4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012ad8:	429e      	cmp	r6, r3
 8012ada:	ec45 4b11 	vmov	d1, r4, r5
 8012ade:	dce1      	bgt.n	8012aa4 <scalbn+0x6c>
 8012ae0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012b08 <scalbn+0xd0>
 8012ae4:	f000 f81e 	bl	8012b24 <copysign>
 8012ae8:	a307      	add	r3, pc, #28	; (adr r3, 8012b08 <scalbn+0xd0>)
 8012aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aee:	e7e0      	b.n	8012ab2 <scalbn+0x7a>
 8012af0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012af4:	3236      	adds	r2, #54	; 0x36
 8012af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012afa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012afe:	4620      	mov	r0, r4
 8012b00:	4629      	mov	r1, r5
 8012b02:	2200      	movs	r2, #0
 8012b04:	4b06      	ldr	r3, [pc, #24]	; (8012b20 <scalbn+0xe8>)
 8012b06:	e7b2      	b.n	8012a6e <scalbn+0x36>
 8012b08:	c2f8f359 	.word	0xc2f8f359
 8012b0c:	01a56e1f 	.word	0x01a56e1f
 8012b10:	8800759c 	.word	0x8800759c
 8012b14:	7e37e43c 	.word	0x7e37e43c
 8012b18:	43500000 	.word	0x43500000
 8012b1c:	ffff3cb0 	.word	0xffff3cb0
 8012b20:	3c900000 	.word	0x3c900000

08012b24 <copysign>:
 8012b24:	ec51 0b10 	vmov	r0, r1, d0
 8012b28:	ee11 0a90 	vmov	r0, s3
 8012b2c:	ee10 2a10 	vmov	r2, s0
 8012b30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012b34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012b38:	ea41 0300 	orr.w	r3, r1, r0
 8012b3c:	ec43 2b10 	vmov	d0, r2, r3
 8012b40:	4770      	bx	lr
	...

08012b44 <__errno>:
 8012b44:	4b01      	ldr	r3, [pc, #4]	; (8012b4c <__errno+0x8>)
 8012b46:	6818      	ldr	r0, [r3, #0]
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	2000000c 	.word	0x2000000c

08012b50 <__libc_init_array>:
 8012b50:	b570      	push	{r4, r5, r6, lr}
 8012b52:	4e0d      	ldr	r6, [pc, #52]	; (8012b88 <__libc_init_array+0x38>)
 8012b54:	4c0d      	ldr	r4, [pc, #52]	; (8012b8c <__libc_init_array+0x3c>)
 8012b56:	1ba4      	subs	r4, r4, r6
 8012b58:	10a4      	asrs	r4, r4, #2
 8012b5a:	2500      	movs	r5, #0
 8012b5c:	42a5      	cmp	r5, r4
 8012b5e:	d109      	bne.n	8012b74 <__libc_init_array+0x24>
 8012b60:	4e0b      	ldr	r6, [pc, #44]	; (8012b90 <__libc_init_array+0x40>)
 8012b62:	4c0c      	ldr	r4, [pc, #48]	; (8012b94 <__libc_init_array+0x44>)
 8012b64:	f004 ff36 	bl	80179d4 <_init>
 8012b68:	1ba4      	subs	r4, r4, r6
 8012b6a:	10a4      	asrs	r4, r4, #2
 8012b6c:	2500      	movs	r5, #0
 8012b6e:	42a5      	cmp	r5, r4
 8012b70:	d105      	bne.n	8012b7e <__libc_init_array+0x2e>
 8012b72:	bd70      	pop	{r4, r5, r6, pc}
 8012b74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b78:	4798      	blx	r3
 8012b7a:	3501      	adds	r5, #1
 8012b7c:	e7ee      	b.n	8012b5c <__libc_init_array+0xc>
 8012b7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8012b82:	4798      	blx	r3
 8012b84:	3501      	adds	r5, #1
 8012b86:	e7f2      	b.n	8012b6e <__libc_init_array+0x1e>
 8012b88:	08018594 	.word	0x08018594
 8012b8c:	08018594 	.word	0x08018594
 8012b90:	08018594 	.word	0x08018594
 8012b94:	0801859c 	.word	0x0801859c

08012b98 <memset>:
 8012b98:	4402      	add	r2, r0
 8012b9a:	4603      	mov	r3, r0
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d100      	bne.n	8012ba2 <memset+0xa>
 8012ba0:	4770      	bx	lr
 8012ba2:	f803 1b01 	strb.w	r1, [r3], #1
 8012ba6:	e7f9      	b.n	8012b9c <memset+0x4>

08012ba8 <__cvt>:
 8012ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bac:	ec55 4b10 	vmov	r4, r5, d0
 8012bb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012bb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012bb6:	2d00      	cmp	r5, #0
 8012bb8:	460e      	mov	r6, r1
 8012bba:	4691      	mov	r9, r2
 8012bbc:	4619      	mov	r1, r3
 8012bbe:	bfb8      	it	lt
 8012bc0:	4622      	movlt	r2, r4
 8012bc2:	462b      	mov	r3, r5
 8012bc4:	f027 0720 	bic.w	r7, r7, #32
 8012bc8:	bfbb      	ittet	lt
 8012bca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012bce:	461d      	movlt	r5, r3
 8012bd0:	2300      	movge	r3, #0
 8012bd2:	232d      	movlt	r3, #45	; 0x2d
 8012bd4:	bfb8      	it	lt
 8012bd6:	4614      	movlt	r4, r2
 8012bd8:	2f46      	cmp	r7, #70	; 0x46
 8012bda:	700b      	strb	r3, [r1, #0]
 8012bdc:	d004      	beq.n	8012be8 <__cvt+0x40>
 8012bde:	2f45      	cmp	r7, #69	; 0x45
 8012be0:	d100      	bne.n	8012be4 <__cvt+0x3c>
 8012be2:	3601      	adds	r6, #1
 8012be4:	2102      	movs	r1, #2
 8012be6:	e000      	b.n	8012bea <__cvt+0x42>
 8012be8:	2103      	movs	r1, #3
 8012bea:	ab03      	add	r3, sp, #12
 8012bec:	9301      	str	r3, [sp, #4]
 8012bee:	ab02      	add	r3, sp, #8
 8012bf0:	9300      	str	r3, [sp, #0]
 8012bf2:	4632      	mov	r2, r6
 8012bf4:	4653      	mov	r3, sl
 8012bf6:	ec45 4b10 	vmov	d0, r4, r5
 8012bfa:	f001 ffb1 	bl	8014b60 <_dtoa_r>
 8012bfe:	2f47      	cmp	r7, #71	; 0x47
 8012c00:	4680      	mov	r8, r0
 8012c02:	d102      	bne.n	8012c0a <__cvt+0x62>
 8012c04:	f019 0f01 	tst.w	r9, #1
 8012c08:	d026      	beq.n	8012c58 <__cvt+0xb0>
 8012c0a:	2f46      	cmp	r7, #70	; 0x46
 8012c0c:	eb08 0906 	add.w	r9, r8, r6
 8012c10:	d111      	bne.n	8012c36 <__cvt+0x8e>
 8012c12:	f898 3000 	ldrb.w	r3, [r8]
 8012c16:	2b30      	cmp	r3, #48	; 0x30
 8012c18:	d10a      	bne.n	8012c30 <__cvt+0x88>
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4620      	mov	r0, r4
 8012c20:	4629      	mov	r1, r5
 8012c22:	f7ed ff69 	bl	8000af8 <__aeabi_dcmpeq>
 8012c26:	b918      	cbnz	r0, 8012c30 <__cvt+0x88>
 8012c28:	f1c6 0601 	rsb	r6, r6, #1
 8012c2c:	f8ca 6000 	str.w	r6, [sl]
 8012c30:	f8da 3000 	ldr.w	r3, [sl]
 8012c34:	4499      	add	r9, r3
 8012c36:	2200      	movs	r2, #0
 8012c38:	2300      	movs	r3, #0
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	4629      	mov	r1, r5
 8012c3e:	f7ed ff5b 	bl	8000af8 <__aeabi_dcmpeq>
 8012c42:	b938      	cbnz	r0, 8012c54 <__cvt+0xac>
 8012c44:	2230      	movs	r2, #48	; 0x30
 8012c46:	9b03      	ldr	r3, [sp, #12]
 8012c48:	454b      	cmp	r3, r9
 8012c4a:	d205      	bcs.n	8012c58 <__cvt+0xb0>
 8012c4c:	1c59      	adds	r1, r3, #1
 8012c4e:	9103      	str	r1, [sp, #12]
 8012c50:	701a      	strb	r2, [r3, #0]
 8012c52:	e7f8      	b.n	8012c46 <__cvt+0x9e>
 8012c54:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c58:	9b03      	ldr	r3, [sp, #12]
 8012c5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c5c:	eba3 0308 	sub.w	r3, r3, r8
 8012c60:	4640      	mov	r0, r8
 8012c62:	6013      	str	r3, [r2, #0]
 8012c64:	b004      	add	sp, #16
 8012c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012c6a <__exponent>:
 8012c6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c6c:	2900      	cmp	r1, #0
 8012c6e:	4604      	mov	r4, r0
 8012c70:	bfba      	itte	lt
 8012c72:	4249      	neglt	r1, r1
 8012c74:	232d      	movlt	r3, #45	; 0x2d
 8012c76:	232b      	movge	r3, #43	; 0x2b
 8012c78:	2909      	cmp	r1, #9
 8012c7a:	f804 2b02 	strb.w	r2, [r4], #2
 8012c7e:	7043      	strb	r3, [r0, #1]
 8012c80:	dd20      	ble.n	8012cc4 <__exponent+0x5a>
 8012c82:	f10d 0307 	add.w	r3, sp, #7
 8012c86:	461f      	mov	r7, r3
 8012c88:	260a      	movs	r6, #10
 8012c8a:	fb91 f5f6 	sdiv	r5, r1, r6
 8012c8e:	fb06 1115 	mls	r1, r6, r5, r1
 8012c92:	3130      	adds	r1, #48	; 0x30
 8012c94:	2d09      	cmp	r5, #9
 8012c96:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012c9a:	f103 32ff 	add.w	r2, r3, #4294967295
 8012c9e:	4629      	mov	r1, r5
 8012ca0:	dc09      	bgt.n	8012cb6 <__exponent+0x4c>
 8012ca2:	3130      	adds	r1, #48	; 0x30
 8012ca4:	3b02      	subs	r3, #2
 8012ca6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012caa:	42bb      	cmp	r3, r7
 8012cac:	4622      	mov	r2, r4
 8012cae:	d304      	bcc.n	8012cba <__exponent+0x50>
 8012cb0:	1a10      	subs	r0, r2, r0
 8012cb2:	b003      	add	sp, #12
 8012cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cb6:	4613      	mov	r3, r2
 8012cb8:	e7e7      	b.n	8012c8a <__exponent+0x20>
 8012cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012cbe:	f804 2b01 	strb.w	r2, [r4], #1
 8012cc2:	e7f2      	b.n	8012caa <__exponent+0x40>
 8012cc4:	2330      	movs	r3, #48	; 0x30
 8012cc6:	4419      	add	r1, r3
 8012cc8:	7083      	strb	r3, [r0, #2]
 8012cca:	1d02      	adds	r2, r0, #4
 8012ccc:	70c1      	strb	r1, [r0, #3]
 8012cce:	e7ef      	b.n	8012cb0 <__exponent+0x46>

08012cd0 <_printf_float>:
 8012cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd4:	b08d      	sub	sp, #52	; 0x34
 8012cd6:	460c      	mov	r4, r1
 8012cd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012cdc:	4616      	mov	r6, r2
 8012cde:	461f      	mov	r7, r3
 8012ce0:	4605      	mov	r5, r0
 8012ce2:	f003 f9a9 	bl	8016038 <_localeconv_r>
 8012ce6:	6803      	ldr	r3, [r0, #0]
 8012ce8:	9304      	str	r3, [sp, #16]
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7ed fa88 	bl	8000200 <strlen>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8012cf4:	f8d8 3000 	ldr.w	r3, [r8]
 8012cf8:	9005      	str	r0, [sp, #20]
 8012cfa:	3307      	adds	r3, #7
 8012cfc:	f023 0307 	bic.w	r3, r3, #7
 8012d00:	f103 0208 	add.w	r2, r3, #8
 8012d04:	f894 a018 	ldrb.w	sl, [r4, #24]
 8012d08:	f8d4 b000 	ldr.w	fp, [r4]
 8012d0c:	f8c8 2000 	str.w	r2, [r8]
 8012d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d14:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d18:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012d1c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012d20:	9307      	str	r3, [sp, #28]
 8012d22:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d26:	f04f 32ff 	mov.w	r2, #4294967295
 8012d2a:	4ba7      	ldr	r3, [pc, #668]	; (8012fc8 <_printf_float+0x2f8>)
 8012d2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d30:	f7ed ff14 	bl	8000b5c <__aeabi_dcmpun>
 8012d34:	bb70      	cbnz	r0, 8012d94 <_printf_float+0xc4>
 8012d36:	f04f 32ff 	mov.w	r2, #4294967295
 8012d3a:	4ba3      	ldr	r3, [pc, #652]	; (8012fc8 <_printf_float+0x2f8>)
 8012d3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d40:	f7ed feee 	bl	8000b20 <__aeabi_dcmple>
 8012d44:	bb30      	cbnz	r0, 8012d94 <_printf_float+0xc4>
 8012d46:	2200      	movs	r2, #0
 8012d48:	2300      	movs	r3, #0
 8012d4a:	4640      	mov	r0, r8
 8012d4c:	4649      	mov	r1, r9
 8012d4e:	f7ed fedd 	bl	8000b0c <__aeabi_dcmplt>
 8012d52:	b110      	cbz	r0, 8012d5a <_printf_float+0x8a>
 8012d54:	232d      	movs	r3, #45	; 0x2d
 8012d56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d5a:	4a9c      	ldr	r2, [pc, #624]	; (8012fcc <_printf_float+0x2fc>)
 8012d5c:	4b9c      	ldr	r3, [pc, #624]	; (8012fd0 <_printf_float+0x300>)
 8012d5e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012d62:	bf8c      	ite	hi
 8012d64:	4690      	movhi	r8, r2
 8012d66:	4698      	movls	r8, r3
 8012d68:	2303      	movs	r3, #3
 8012d6a:	f02b 0204 	bic.w	r2, fp, #4
 8012d6e:	6123      	str	r3, [r4, #16]
 8012d70:	6022      	str	r2, [r4, #0]
 8012d72:	f04f 0900 	mov.w	r9, #0
 8012d76:	9700      	str	r7, [sp, #0]
 8012d78:	4633      	mov	r3, r6
 8012d7a:	aa0b      	add	r2, sp, #44	; 0x2c
 8012d7c:	4621      	mov	r1, r4
 8012d7e:	4628      	mov	r0, r5
 8012d80:	f000 f9e6 	bl	8013150 <_printf_common>
 8012d84:	3001      	adds	r0, #1
 8012d86:	f040 808d 	bne.w	8012ea4 <_printf_float+0x1d4>
 8012d8a:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8e:	b00d      	add	sp, #52	; 0x34
 8012d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d94:	4642      	mov	r2, r8
 8012d96:	464b      	mov	r3, r9
 8012d98:	4640      	mov	r0, r8
 8012d9a:	4649      	mov	r1, r9
 8012d9c:	f7ed fede 	bl	8000b5c <__aeabi_dcmpun>
 8012da0:	b110      	cbz	r0, 8012da8 <_printf_float+0xd8>
 8012da2:	4a8c      	ldr	r2, [pc, #560]	; (8012fd4 <_printf_float+0x304>)
 8012da4:	4b8c      	ldr	r3, [pc, #560]	; (8012fd8 <_printf_float+0x308>)
 8012da6:	e7da      	b.n	8012d5e <_printf_float+0x8e>
 8012da8:	6861      	ldr	r1, [r4, #4]
 8012daa:	1c4b      	adds	r3, r1, #1
 8012dac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012db0:	a80a      	add	r0, sp, #40	; 0x28
 8012db2:	d13e      	bne.n	8012e32 <_printf_float+0x162>
 8012db4:	2306      	movs	r3, #6
 8012db6:	6063      	str	r3, [r4, #4]
 8012db8:	2300      	movs	r3, #0
 8012dba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012dbe:	ab09      	add	r3, sp, #36	; 0x24
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	ec49 8b10 	vmov	d0, r8, r9
 8012dc6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012dca:	6022      	str	r2, [r4, #0]
 8012dcc:	f8cd a004 	str.w	sl, [sp, #4]
 8012dd0:	6861      	ldr	r1, [r4, #4]
 8012dd2:	4628      	mov	r0, r5
 8012dd4:	f7ff fee8 	bl	8012ba8 <__cvt>
 8012dd8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012ddc:	2b47      	cmp	r3, #71	; 0x47
 8012dde:	4680      	mov	r8, r0
 8012de0:	d109      	bne.n	8012df6 <_printf_float+0x126>
 8012de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012de4:	1cd8      	adds	r0, r3, #3
 8012de6:	db02      	blt.n	8012dee <_printf_float+0x11e>
 8012de8:	6862      	ldr	r2, [r4, #4]
 8012dea:	4293      	cmp	r3, r2
 8012dec:	dd47      	ble.n	8012e7e <_printf_float+0x1ae>
 8012dee:	f1aa 0a02 	sub.w	sl, sl, #2
 8012df2:	fa5f fa8a 	uxtb.w	sl, sl
 8012df6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012dfc:	d824      	bhi.n	8012e48 <_printf_float+0x178>
 8012dfe:	3901      	subs	r1, #1
 8012e00:	4652      	mov	r2, sl
 8012e02:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e06:	9109      	str	r1, [sp, #36]	; 0x24
 8012e08:	f7ff ff2f 	bl	8012c6a <__exponent>
 8012e0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e0e:	1813      	adds	r3, r2, r0
 8012e10:	2a01      	cmp	r2, #1
 8012e12:	4681      	mov	r9, r0
 8012e14:	6123      	str	r3, [r4, #16]
 8012e16:	dc02      	bgt.n	8012e1e <_printf_float+0x14e>
 8012e18:	6822      	ldr	r2, [r4, #0]
 8012e1a:	07d1      	lsls	r1, r2, #31
 8012e1c:	d501      	bpl.n	8012e22 <_printf_float+0x152>
 8012e1e:	3301      	adds	r3, #1
 8012e20:	6123      	str	r3, [r4, #16]
 8012e22:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d0a5      	beq.n	8012d76 <_printf_float+0xa6>
 8012e2a:	232d      	movs	r3, #45	; 0x2d
 8012e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e30:	e7a1      	b.n	8012d76 <_printf_float+0xa6>
 8012e32:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012e36:	f000 8177 	beq.w	8013128 <_printf_float+0x458>
 8012e3a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012e3e:	d1bb      	bne.n	8012db8 <_printf_float+0xe8>
 8012e40:	2900      	cmp	r1, #0
 8012e42:	d1b9      	bne.n	8012db8 <_printf_float+0xe8>
 8012e44:	2301      	movs	r3, #1
 8012e46:	e7b6      	b.n	8012db6 <_printf_float+0xe6>
 8012e48:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8012e4c:	d119      	bne.n	8012e82 <_printf_float+0x1b2>
 8012e4e:	2900      	cmp	r1, #0
 8012e50:	6863      	ldr	r3, [r4, #4]
 8012e52:	dd0c      	ble.n	8012e6e <_printf_float+0x19e>
 8012e54:	6121      	str	r1, [r4, #16]
 8012e56:	b913      	cbnz	r3, 8012e5e <_printf_float+0x18e>
 8012e58:	6822      	ldr	r2, [r4, #0]
 8012e5a:	07d2      	lsls	r2, r2, #31
 8012e5c:	d502      	bpl.n	8012e64 <_printf_float+0x194>
 8012e5e:	3301      	adds	r3, #1
 8012e60:	440b      	add	r3, r1
 8012e62:	6123      	str	r3, [r4, #16]
 8012e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e66:	65a3      	str	r3, [r4, #88]	; 0x58
 8012e68:	f04f 0900 	mov.w	r9, #0
 8012e6c:	e7d9      	b.n	8012e22 <_printf_float+0x152>
 8012e6e:	b913      	cbnz	r3, 8012e76 <_printf_float+0x1a6>
 8012e70:	6822      	ldr	r2, [r4, #0]
 8012e72:	07d0      	lsls	r0, r2, #31
 8012e74:	d501      	bpl.n	8012e7a <_printf_float+0x1aa>
 8012e76:	3302      	adds	r3, #2
 8012e78:	e7f3      	b.n	8012e62 <_printf_float+0x192>
 8012e7a:	2301      	movs	r3, #1
 8012e7c:	e7f1      	b.n	8012e62 <_printf_float+0x192>
 8012e7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012e82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012e86:	4293      	cmp	r3, r2
 8012e88:	db05      	blt.n	8012e96 <_printf_float+0x1c6>
 8012e8a:	6822      	ldr	r2, [r4, #0]
 8012e8c:	6123      	str	r3, [r4, #16]
 8012e8e:	07d1      	lsls	r1, r2, #31
 8012e90:	d5e8      	bpl.n	8012e64 <_printf_float+0x194>
 8012e92:	3301      	adds	r3, #1
 8012e94:	e7e5      	b.n	8012e62 <_printf_float+0x192>
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	bfd4      	ite	le
 8012e9a:	f1c3 0302 	rsble	r3, r3, #2
 8012e9e:	2301      	movgt	r3, #1
 8012ea0:	4413      	add	r3, r2
 8012ea2:	e7de      	b.n	8012e62 <_printf_float+0x192>
 8012ea4:	6823      	ldr	r3, [r4, #0]
 8012ea6:	055a      	lsls	r2, r3, #21
 8012ea8:	d407      	bmi.n	8012eba <_printf_float+0x1ea>
 8012eaa:	6923      	ldr	r3, [r4, #16]
 8012eac:	4642      	mov	r2, r8
 8012eae:	4631      	mov	r1, r6
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	47b8      	blx	r7
 8012eb4:	3001      	adds	r0, #1
 8012eb6:	d12b      	bne.n	8012f10 <_printf_float+0x240>
 8012eb8:	e767      	b.n	8012d8a <_printf_float+0xba>
 8012eba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012ebe:	f240 80dc 	bls.w	801307a <_printf_float+0x3aa>
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012eca:	f7ed fe15 	bl	8000af8 <__aeabi_dcmpeq>
 8012ece:	2800      	cmp	r0, #0
 8012ed0:	d033      	beq.n	8012f3a <_printf_float+0x26a>
 8012ed2:	2301      	movs	r3, #1
 8012ed4:	4a41      	ldr	r2, [pc, #260]	; (8012fdc <_printf_float+0x30c>)
 8012ed6:	4631      	mov	r1, r6
 8012ed8:	4628      	mov	r0, r5
 8012eda:	47b8      	blx	r7
 8012edc:	3001      	adds	r0, #1
 8012ede:	f43f af54 	beq.w	8012d8a <_printf_float+0xba>
 8012ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ee6:	429a      	cmp	r2, r3
 8012ee8:	db02      	blt.n	8012ef0 <_printf_float+0x220>
 8012eea:	6823      	ldr	r3, [r4, #0]
 8012eec:	07d8      	lsls	r0, r3, #31
 8012eee:	d50f      	bpl.n	8012f10 <_printf_float+0x240>
 8012ef0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ef4:	4631      	mov	r1, r6
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	47b8      	blx	r7
 8012efa:	3001      	adds	r0, #1
 8012efc:	f43f af45 	beq.w	8012d8a <_printf_float+0xba>
 8012f00:	f04f 0800 	mov.w	r8, #0
 8012f04:	f104 091a 	add.w	r9, r4, #26
 8012f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f0a:	3b01      	subs	r3, #1
 8012f0c:	4543      	cmp	r3, r8
 8012f0e:	dc09      	bgt.n	8012f24 <_printf_float+0x254>
 8012f10:	6823      	ldr	r3, [r4, #0]
 8012f12:	079b      	lsls	r3, r3, #30
 8012f14:	f100 8103 	bmi.w	801311e <_printf_float+0x44e>
 8012f18:	68e0      	ldr	r0, [r4, #12]
 8012f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f1c:	4298      	cmp	r0, r3
 8012f1e:	bfb8      	it	lt
 8012f20:	4618      	movlt	r0, r3
 8012f22:	e734      	b.n	8012d8e <_printf_float+0xbe>
 8012f24:	2301      	movs	r3, #1
 8012f26:	464a      	mov	r2, r9
 8012f28:	4631      	mov	r1, r6
 8012f2a:	4628      	mov	r0, r5
 8012f2c:	47b8      	blx	r7
 8012f2e:	3001      	adds	r0, #1
 8012f30:	f43f af2b 	beq.w	8012d8a <_printf_float+0xba>
 8012f34:	f108 0801 	add.w	r8, r8, #1
 8012f38:	e7e6      	b.n	8012f08 <_printf_float+0x238>
 8012f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	dc2b      	bgt.n	8012f98 <_printf_float+0x2c8>
 8012f40:	2301      	movs	r3, #1
 8012f42:	4a26      	ldr	r2, [pc, #152]	; (8012fdc <_printf_float+0x30c>)
 8012f44:	4631      	mov	r1, r6
 8012f46:	4628      	mov	r0, r5
 8012f48:	47b8      	blx	r7
 8012f4a:	3001      	adds	r0, #1
 8012f4c:	f43f af1d 	beq.w	8012d8a <_printf_float+0xba>
 8012f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f52:	b923      	cbnz	r3, 8012f5e <_printf_float+0x28e>
 8012f54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f56:	b913      	cbnz	r3, 8012f5e <_printf_float+0x28e>
 8012f58:	6823      	ldr	r3, [r4, #0]
 8012f5a:	07d9      	lsls	r1, r3, #31
 8012f5c:	d5d8      	bpl.n	8012f10 <_printf_float+0x240>
 8012f5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012f62:	4631      	mov	r1, r6
 8012f64:	4628      	mov	r0, r5
 8012f66:	47b8      	blx	r7
 8012f68:	3001      	adds	r0, #1
 8012f6a:	f43f af0e 	beq.w	8012d8a <_printf_float+0xba>
 8012f6e:	f04f 0900 	mov.w	r9, #0
 8012f72:	f104 0a1a 	add.w	sl, r4, #26
 8012f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f78:	425b      	negs	r3, r3
 8012f7a:	454b      	cmp	r3, r9
 8012f7c:	dc01      	bgt.n	8012f82 <_printf_float+0x2b2>
 8012f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f80:	e794      	b.n	8012eac <_printf_float+0x1dc>
 8012f82:	2301      	movs	r3, #1
 8012f84:	4652      	mov	r2, sl
 8012f86:	4631      	mov	r1, r6
 8012f88:	4628      	mov	r0, r5
 8012f8a:	47b8      	blx	r7
 8012f8c:	3001      	adds	r0, #1
 8012f8e:	f43f aefc 	beq.w	8012d8a <_printf_float+0xba>
 8012f92:	f109 0901 	add.w	r9, r9, #1
 8012f96:	e7ee      	b.n	8012f76 <_printf_float+0x2a6>
 8012f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	bfa8      	it	ge
 8012fa0:	461a      	movge	r2, r3
 8012fa2:	2a00      	cmp	r2, #0
 8012fa4:	4691      	mov	r9, r2
 8012fa6:	dd07      	ble.n	8012fb8 <_printf_float+0x2e8>
 8012fa8:	4613      	mov	r3, r2
 8012faa:	4631      	mov	r1, r6
 8012fac:	4642      	mov	r2, r8
 8012fae:	4628      	mov	r0, r5
 8012fb0:	47b8      	blx	r7
 8012fb2:	3001      	adds	r0, #1
 8012fb4:	f43f aee9 	beq.w	8012d8a <_printf_float+0xba>
 8012fb8:	f104 031a 	add.w	r3, r4, #26
 8012fbc:	f04f 0b00 	mov.w	fp, #0
 8012fc0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012fc4:	9306      	str	r3, [sp, #24]
 8012fc6:	e015      	b.n	8012ff4 <_printf_float+0x324>
 8012fc8:	7fefffff 	.word	0x7fefffff
 8012fcc:	08018258 	.word	0x08018258
 8012fd0:	08018254 	.word	0x08018254
 8012fd4:	08018260 	.word	0x08018260
 8012fd8:	0801825c 	.word	0x0801825c
 8012fdc:	08018483 	.word	0x08018483
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	9a06      	ldr	r2, [sp, #24]
 8012fe4:	4631      	mov	r1, r6
 8012fe6:	4628      	mov	r0, r5
 8012fe8:	47b8      	blx	r7
 8012fea:	3001      	adds	r0, #1
 8012fec:	f43f aecd 	beq.w	8012d8a <_printf_float+0xba>
 8012ff0:	f10b 0b01 	add.w	fp, fp, #1
 8012ff4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012ff8:	ebaa 0309 	sub.w	r3, sl, r9
 8012ffc:	455b      	cmp	r3, fp
 8012ffe:	dcef      	bgt.n	8012fe0 <_printf_float+0x310>
 8013000:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013004:	429a      	cmp	r2, r3
 8013006:	44d0      	add	r8, sl
 8013008:	db15      	blt.n	8013036 <_printf_float+0x366>
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	07da      	lsls	r2, r3, #31
 801300e:	d412      	bmi.n	8013036 <_printf_float+0x366>
 8013010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013012:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013014:	eba3 020a 	sub.w	r2, r3, sl
 8013018:	eba3 0a01 	sub.w	sl, r3, r1
 801301c:	4592      	cmp	sl, r2
 801301e:	bfa8      	it	ge
 8013020:	4692      	movge	sl, r2
 8013022:	f1ba 0f00 	cmp.w	sl, #0
 8013026:	dc0e      	bgt.n	8013046 <_printf_float+0x376>
 8013028:	f04f 0800 	mov.w	r8, #0
 801302c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013030:	f104 091a 	add.w	r9, r4, #26
 8013034:	e019      	b.n	801306a <_printf_float+0x39a>
 8013036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801303a:	4631      	mov	r1, r6
 801303c:	4628      	mov	r0, r5
 801303e:	47b8      	blx	r7
 8013040:	3001      	adds	r0, #1
 8013042:	d1e5      	bne.n	8013010 <_printf_float+0x340>
 8013044:	e6a1      	b.n	8012d8a <_printf_float+0xba>
 8013046:	4653      	mov	r3, sl
 8013048:	4642      	mov	r2, r8
 801304a:	4631      	mov	r1, r6
 801304c:	4628      	mov	r0, r5
 801304e:	47b8      	blx	r7
 8013050:	3001      	adds	r0, #1
 8013052:	d1e9      	bne.n	8013028 <_printf_float+0x358>
 8013054:	e699      	b.n	8012d8a <_printf_float+0xba>
 8013056:	2301      	movs	r3, #1
 8013058:	464a      	mov	r2, r9
 801305a:	4631      	mov	r1, r6
 801305c:	4628      	mov	r0, r5
 801305e:	47b8      	blx	r7
 8013060:	3001      	adds	r0, #1
 8013062:	f43f ae92 	beq.w	8012d8a <_printf_float+0xba>
 8013066:	f108 0801 	add.w	r8, r8, #1
 801306a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801306e:	1a9b      	subs	r3, r3, r2
 8013070:	eba3 030a 	sub.w	r3, r3, sl
 8013074:	4543      	cmp	r3, r8
 8013076:	dcee      	bgt.n	8013056 <_printf_float+0x386>
 8013078:	e74a      	b.n	8012f10 <_printf_float+0x240>
 801307a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801307c:	2a01      	cmp	r2, #1
 801307e:	dc01      	bgt.n	8013084 <_printf_float+0x3b4>
 8013080:	07db      	lsls	r3, r3, #31
 8013082:	d53a      	bpl.n	80130fa <_printf_float+0x42a>
 8013084:	2301      	movs	r3, #1
 8013086:	4642      	mov	r2, r8
 8013088:	4631      	mov	r1, r6
 801308a:	4628      	mov	r0, r5
 801308c:	47b8      	blx	r7
 801308e:	3001      	adds	r0, #1
 8013090:	f43f ae7b 	beq.w	8012d8a <_printf_float+0xba>
 8013094:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013098:	4631      	mov	r1, r6
 801309a:	4628      	mov	r0, r5
 801309c:	47b8      	blx	r7
 801309e:	3001      	adds	r0, #1
 80130a0:	f108 0801 	add.w	r8, r8, #1
 80130a4:	f43f ae71 	beq.w	8012d8a <_printf_float+0xba>
 80130a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130aa:	2200      	movs	r2, #0
 80130ac:	f103 3aff 	add.w	sl, r3, #4294967295
 80130b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130b4:	2300      	movs	r3, #0
 80130b6:	f7ed fd1f 	bl	8000af8 <__aeabi_dcmpeq>
 80130ba:	b9c8      	cbnz	r0, 80130f0 <_printf_float+0x420>
 80130bc:	4653      	mov	r3, sl
 80130be:	4642      	mov	r2, r8
 80130c0:	4631      	mov	r1, r6
 80130c2:	4628      	mov	r0, r5
 80130c4:	47b8      	blx	r7
 80130c6:	3001      	adds	r0, #1
 80130c8:	d10e      	bne.n	80130e8 <_printf_float+0x418>
 80130ca:	e65e      	b.n	8012d8a <_printf_float+0xba>
 80130cc:	2301      	movs	r3, #1
 80130ce:	4652      	mov	r2, sl
 80130d0:	4631      	mov	r1, r6
 80130d2:	4628      	mov	r0, r5
 80130d4:	47b8      	blx	r7
 80130d6:	3001      	adds	r0, #1
 80130d8:	f43f ae57 	beq.w	8012d8a <_printf_float+0xba>
 80130dc:	f108 0801 	add.w	r8, r8, #1
 80130e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130e2:	3b01      	subs	r3, #1
 80130e4:	4543      	cmp	r3, r8
 80130e6:	dcf1      	bgt.n	80130cc <_printf_float+0x3fc>
 80130e8:	464b      	mov	r3, r9
 80130ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80130ee:	e6de      	b.n	8012eae <_printf_float+0x1de>
 80130f0:	f04f 0800 	mov.w	r8, #0
 80130f4:	f104 0a1a 	add.w	sl, r4, #26
 80130f8:	e7f2      	b.n	80130e0 <_printf_float+0x410>
 80130fa:	2301      	movs	r3, #1
 80130fc:	e7df      	b.n	80130be <_printf_float+0x3ee>
 80130fe:	2301      	movs	r3, #1
 8013100:	464a      	mov	r2, r9
 8013102:	4631      	mov	r1, r6
 8013104:	4628      	mov	r0, r5
 8013106:	47b8      	blx	r7
 8013108:	3001      	adds	r0, #1
 801310a:	f43f ae3e 	beq.w	8012d8a <_printf_float+0xba>
 801310e:	f108 0801 	add.w	r8, r8, #1
 8013112:	68e3      	ldr	r3, [r4, #12]
 8013114:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013116:	1a9b      	subs	r3, r3, r2
 8013118:	4543      	cmp	r3, r8
 801311a:	dcf0      	bgt.n	80130fe <_printf_float+0x42e>
 801311c:	e6fc      	b.n	8012f18 <_printf_float+0x248>
 801311e:	f04f 0800 	mov.w	r8, #0
 8013122:	f104 0919 	add.w	r9, r4, #25
 8013126:	e7f4      	b.n	8013112 <_printf_float+0x442>
 8013128:	2900      	cmp	r1, #0
 801312a:	f43f ae8b 	beq.w	8012e44 <_printf_float+0x174>
 801312e:	2300      	movs	r3, #0
 8013130:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013134:	ab09      	add	r3, sp, #36	; 0x24
 8013136:	9300      	str	r3, [sp, #0]
 8013138:	ec49 8b10 	vmov	d0, r8, r9
 801313c:	6022      	str	r2, [r4, #0]
 801313e:	f8cd a004 	str.w	sl, [sp, #4]
 8013142:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013146:	4628      	mov	r0, r5
 8013148:	f7ff fd2e 	bl	8012ba8 <__cvt>
 801314c:	4680      	mov	r8, r0
 801314e:	e648      	b.n	8012de2 <_printf_float+0x112>

08013150 <_printf_common>:
 8013150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013154:	4691      	mov	r9, r2
 8013156:	461f      	mov	r7, r3
 8013158:	688a      	ldr	r2, [r1, #8]
 801315a:	690b      	ldr	r3, [r1, #16]
 801315c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013160:	4293      	cmp	r3, r2
 8013162:	bfb8      	it	lt
 8013164:	4613      	movlt	r3, r2
 8013166:	f8c9 3000 	str.w	r3, [r9]
 801316a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801316e:	4606      	mov	r6, r0
 8013170:	460c      	mov	r4, r1
 8013172:	b112      	cbz	r2, 801317a <_printf_common+0x2a>
 8013174:	3301      	adds	r3, #1
 8013176:	f8c9 3000 	str.w	r3, [r9]
 801317a:	6823      	ldr	r3, [r4, #0]
 801317c:	0699      	lsls	r1, r3, #26
 801317e:	bf42      	ittt	mi
 8013180:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013184:	3302      	addmi	r3, #2
 8013186:	f8c9 3000 	strmi.w	r3, [r9]
 801318a:	6825      	ldr	r5, [r4, #0]
 801318c:	f015 0506 	ands.w	r5, r5, #6
 8013190:	d107      	bne.n	80131a2 <_printf_common+0x52>
 8013192:	f104 0a19 	add.w	sl, r4, #25
 8013196:	68e3      	ldr	r3, [r4, #12]
 8013198:	f8d9 2000 	ldr.w	r2, [r9]
 801319c:	1a9b      	subs	r3, r3, r2
 801319e:	42ab      	cmp	r3, r5
 80131a0:	dc28      	bgt.n	80131f4 <_printf_common+0xa4>
 80131a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80131a6:	6822      	ldr	r2, [r4, #0]
 80131a8:	3300      	adds	r3, #0
 80131aa:	bf18      	it	ne
 80131ac:	2301      	movne	r3, #1
 80131ae:	0692      	lsls	r2, r2, #26
 80131b0:	d42d      	bmi.n	801320e <_printf_common+0xbe>
 80131b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80131b6:	4639      	mov	r1, r7
 80131b8:	4630      	mov	r0, r6
 80131ba:	47c0      	blx	r8
 80131bc:	3001      	adds	r0, #1
 80131be:	d020      	beq.n	8013202 <_printf_common+0xb2>
 80131c0:	6823      	ldr	r3, [r4, #0]
 80131c2:	68e5      	ldr	r5, [r4, #12]
 80131c4:	f8d9 2000 	ldr.w	r2, [r9]
 80131c8:	f003 0306 	and.w	r3, r3, #6
 80131cc:	2b04      	cmp	r3, #4
 80131ce:	bf08      	it	eq
 80131d0:	1aad      	subeq	r5, r5, r2
 80131d2:	68a3      	ldr	r3, [r4, #8]
 80131d4:	6922      	ldr	r2, [r4, #16]
 80131d6:	bf0c      	ite	eq
 80131d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131dc:	2500      	movne	r5, #0
 80131de:	4293      	cmp	r3, r2
 80131e0:	bfc4      	itt	gt
 80131e2:	1a9b      	subgt	r3, r3, r2
 80131e4:	18ed      	addgt	r5, r5, r3
 80131e6:	f04f 0900 	mov.w	r9, #0
 80131ea:	341a      	adds	r4, #26
 80131ec:	454d      	cmp	r5, r9
 80131ee:	d11a      	bne.n	8013226 <_printf_common+0xd6>
 80131f0:	2000      	movs	r0, #0
 80131f2:	e008      	b.n	8013206 <_printf_common+0xb6>
 80131f4:	2301      	movs	r3, #1
 80131f6:	4652      	mov	r2, sl
 80131f8:	4639      	mov	r1, r7
 80131fa:	4630      	mov	r0, r6
 80131fc:	47c0      	blx	r8
 80131fe:	3001      	adds	r0, #1
 8013200:	d103      	bne.n	801320a <_printf_common+0xba>
 8013202:	f04f 30ff 	mov.w	r0, #4294967295
 8013206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801320a:	3501      	adds	r5, #1
 801320c:	e7c3      	b.n	8013196 <_printf_common+0x46>
 801320e:	18e1      	adds	r1, r4, r3
 8013210:	1c5a      	adds	r2, r3, #1
 8013212:	2030      	movs	r0, #48	; 0x30
 8013214:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013218:	4422      	add	r2, r4
 801321a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801321e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013222:	3302      	adds	r3, #2
 8013224:	e7c5      	b.n	80131b2 <_printf_common+0x62>
 8013226:	2301      	movs	r3, #1
 8013228:	4622      	mov	r2, r4
 801322a:	4639      	mov	r1, r7
 801322c:	4630      	mov	r0, r6
 801322e:	47c0      	blx	r8
 8013230:	3001      	adds	r0, #1
 8013232:	d0e6      	beq.n	8013202 <_printf_common+0xb2>
 8013234:	f109 0901 	add.w	r9, r9, #1
 8013238:	e7d8      	b.n	80131ec <_printf_common+0x9c>
	...

0801323c <_printf_i>:
 801323c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013240:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013244:	460c      	mov	r4, r1
 8013246:	7e09      	ldrb	r1, [r1, #24]
 8013248:	b085      	sub	sp, #20
 801324a:	296e      	cmp	r1, #110	; 0x6e
 801324c:	4617      	mov	r7, r2
 801324e:	4606      	mov	r6, r0
 8013250:	4698      	mov	r8, r3
 8013252:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013254:	f000 80b3 	beq.w	80133be <_printf_i+0x182>
 8013258:	d822      	bhi.n	80132a0 <_printf_i+0x64>
 801325a:	2963      	cmp	r1, #99	; 0x63
 801325c:	d036      	beq.n	80132cc <_printf_i+0x90>
 801325e:	d80a      	bhi.n	8013276 <_printf_i+0x3a>
 8013260:	2900      	cmp	r1, #0
 8013262:	f000 80b9 	beq.w	80133d8 <_printf_i+0x19c>
 8013266:	2958      	cmp	r1, #88	; 0x58
 8013268:	f000 8083 	beq.w	8013372 <_printf_i+0x136>
 801326c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013270:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013274:	e032      	b.n	80132dc <_printf_i+0xa0>
 8013276:	2964      	cmp	r1, #100	; 0x64
 8013278:	d001      	beq.n	801327e <_printf_i+0x42>
 801327a:	2969      	cmp	r1, #105	; 0x69
 801327c:	d1f6      	bne.n	801326c <_printf_i+0x30>
 801327e:	6820      	ldr	r0, [r4, #0]
 8013280:	6813      	ldr	r3, [r2, #0]
 8013282:	0605      	lsls	r5, r0, #24
 8013284:	f103 0104 	add.w	r1, r3, #4
 8013288:	d52a      	bpl.n	80132e0 <_printf_i+0xa4>
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	6011      	str	r1, [r2, #0]
 801328e:	2b00      	cmp	r3, #0
 8013290:	da03      	bge.n	801329a <_printf_i+0x5e>
 8013292:	222d      	movs	r2, #45	; 0x2d
 8013294:	425b      	negs	r3, r3
 8013296:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801329a:	486f      	ldr	r0, [pc, #444]	; (8013458 <_printf_i+0x21c>)
 801329c:	220a      	movs	r2, #10
 801329e:	e039      	b.n	8013314 <_printf_i+0xd8>
 80132a0:	2973      	cmp	r1, #115	; 0x73
 80132a2:	f000 809d 	beq.w	80133e0 <_printf_i+0x1a4>
 80132a6:	d808      	bhi.n	80132ba <_printf_i+0x7e>
 80132a8:	296f      	cmp	r1, #111	; 0x6f
 80132aa:	d020      	beq.n	80132ee <_printf_i+0xb2>
 80132ac:	2970      	cmp	r1, #112	; 0x70
 80132ae:	d1dd      	bne.n	801326c <_printf_i+0x30>
 80132b0:	6823      	ldr	r3, [r4, #0]
 80132b2:	f043 0320 	orr.w	r3, r3, #32
 80132b6:	6023      	str	r3, [r4, #0]
 80132b8:	e003      	b.n	80132c2 <_printf_i+0x86>
 80132ba:	2975      	cmp	r1, #117	; 0x75
 80132bc:	d017      	beq.n	80132ee <_printf_i+0xb2>
 80132be:	2978      	cmp	r1, #120	; 0x78
 80132c0:	d1d4      	bne.n	801326c <_printf_i+0x30>
 80132c2:	2378      	movs	r3, #120	; 0x78
 80132c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80132c8:	4864      	ldr	r0, [pc, #400]	; (801345c <_printf_i+0x220>)
 80132ca:	e055      	b.n	8013378 <_printf_i+0x13c>
 80132cc:	6813      	ldr	r3, [r2, #0]
 80132ce:	1d19      	adds	r1, r3, #4
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	6011      	str	r1, [r2, #0]
 80132d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80132d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132dc:	2301      	movs	r3, #1
 80132de:	e08c      	b.n	80133fa <_printf_i+0x1be>
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	6011      	str	r1, [r2, #0]
 80132e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80132e8:	bf18      	it	ne
 80132ea:	b21b      	sxthne	r3, r3
 80132ec:	e7cf      	b.n	801328e <_printf_i+0x52>
 80132ee:	6813      	ldr	r3, [r2, #0]
 80132f0:	6825      	ldr	r5, [r4, #0]
 80132f2:	1d18      	adds	r0, r3, #4
 80132f4:	6010      	str	r0, [r2, #0]
 80132f6:	0628      	lsls	r0, r5, #24
 80132f8:	d501      	bpl.n	80132fe <_printf_i+0xc2>
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	e002      	b.n	8013304 <_printf_i+0xc8>
 80132fe:	0668      	lsls	r0, r5, #25
 8013300:	d5fb      	bpl.n	80132fa <_printf_i+0xbe>
 8013302:	881b      	ldrh	r3, [r3, #0]
 8013304:	4854      	ldr	r0, [pc, #336]	; (8013458 <_printf_i+0x21c>)
 8013306:	296f      	cmp	r1, #111	; 0x6f
 8013308:	bf14      	ite	ne
 801330a:	220a      	movne	r2, #10
 801330c:	2208      	moveq	r2, #8
 801330e:	2100      	movs	r1, #0
 8013310:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013314:	6865      	ldr	r5, [r4, #4]
 8013316:	60a5      	str	r5, [r4, #8]
 8013318:	2d00      	cmp	r5, #0
 801331a:	f2c0 8095 	blt.w	8013448 <_printf_i+0x20c>
 801331e:	6821      	ldr	r1, [r4, #0]
 8013320:	f021 0104 	bic.w	r1, r1, #4
 8013324:	6021      	str	r1, [r4, #0]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d13d      	bne.n	80133a6 <_printf_i+0x16a>
 801332a:	2d00      	cmp	r5, #0
 801332c:	f040 808e 	bne.w	801344c <_printf_i+0x210>
 8013330:	4665      	mov	r5, ip
 8013332:	2a08      	cmp	r2, #8
 8013334:	d10b      	bne.n	801334e <_printf_i+0x112>
 8013336:	6823      	ldr	r3, [r4, #0]
 8013338:	07db      	lsls	r3, r3, #31
 801333a:	d508      	bpl.n	801334e <_printf_i+0x112>
 801333c:	6923      	ldr	r3, [r4, #16]
 801333e:	6862      	ldr	r2, [r4, #4]
 8013340:	429a      	cmp	r2, r3
 8013342:	bfde      	ittt	le
 8013344:	2330      	movle	r3, #48	; 0x30
 8013346:	f805 3c01 	strble.w	r3, [r5, #-1]
 801334a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801334e:	ebac 0305 	sub.w	r3, ip, r5
 8013352:	6123      	str	r3, [r4, #16]
 8013354:	f8cd 8000 	str.w	r8, [sp]
 8013358:	463b      	mov	r3, r7
 801335a:	aa03      	add	r2, sp, #12
 801335c:	4621      	mov	r1, r4
 801335e:	4630      	mov	r0, r6
 8013360:	f7ff fef6 	bl	8013150 <_printf_common>
 8013364:	3001      	adds	r0, #1
 8013366:	d14d      	bne.n	8013404 <_printf_i+0x1c8>
 8013368:	f04f 30ff 	mov.w	r0, #4294967295
 801336c:	b005      	add	sp, #20
 801336e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013372:	4839      	ldr	r0, [pc, #228]	; (8013458 <_printf_i+0x21c>)
 8013374:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013378:	6813      	ldr	r3, [r2, #0]
 801337a:	6821      	ldr	r1, [r4, #0]
 801337c:	1d1d      	adds	r5, r3, #4
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	6015      	str	r5, [r2, #0]
 8013382:	060a      	lsls	r2, r1, #24
 8013384:	d50b      	bpl.n	801339e <_printf_i+0x162>
 8013386:	07ca      	lsls	r2, r1, #31
 8013388:	bf44      	itt	mi
 801338a:	f041 0120 	orrmi.w	r1, r1, #32
 801338e:	6021      	strmi	r1, [r4, #0]
 8013390:	b91b      	cbnz	r3, 801339a <_printf_i+0x15e>
 8013392:	6822      	ldr	r2, [r4, #0]
 8013394:	f022 0220 	bic.w	r2, r2, #32
 8013398:	6022      	str	r2, [r4, #0]
 801339a:	2210      	movs	r2, #16
 801339c:	e7b7      	b.n	801330e <_printf_i+0xd2>
 801339e:	064d      	lsls	r5, r1, #25
 80133a0:	bf48      	it	mi
 80133a2:	b29b      	uxthmi	r3, r3
 80133a4:	e7ef      	b.n	8013386 <_printf_i+0x14a>
 80133a6:	4665      	mov	r5, ip
 80133a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80133ac:	fb02 3311 	mls	r3, r2, r1, r3
 80133b0:	5cc3      	ldrb	r3, [r0, r3]
 80133b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80133b6:	460b      	mov	r3, r1
 80133b8:	2900      	cmp	r1, #0
 80133ba:	d1f5      	bne.n	80133a8 <_printf_i+0x16c>
 80133bc:	e7b9      	b.n	8013332 <_printf_i+0xf6>
 80133be:	6813      	ldr	r3, [r2, #0]
 80133c0:	6825      	ldr	r5, [r4, #0]
 80133c2:	6961      	ldr	r1, [r4, #20]
 80133c4:	1d18      	adds	r0, r3, #4
 80133c6:	6010      	str	r0, [r2, #0]
 80133c8:	0628      	lsls	r0, r5, #24
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	d501      	bpl.n	80133d2 <_printf_i+0x196>
 80133ce:	6019      	str	r1, [r3, #0]
 80133d0:	e002      	b.n	80133d8 <_printf_i+0x19c>
 80133d2:	066a      	lsls	r2, r5, #25
 80133d4:	d5fb      	bpl.n	80133ce <_printf_i+0x192>
 80133d6:	8019      	strh	r1, [r3, #0]
 80133d8:	2300      	movs	r3, #0
 80133da:	6123      	str	r3, [r4, #16]
 80133dc:	4665      	mov	r5, ip
 80133de:	e7b9      	b.n	8013354 <_printf_i+0x118>
 80133e0:	6813      	ldr	r3, [r2, #0]
 80133e2:	1d19      	adds	r1, r3, #4
 80133e4:	6011      	str	r1, [r2, #0]
 80133e6:	681d      	ldr	r5, [r3, #0]
 80133e8:	6862      	ldr	r2, [r4, #4]
 80133ea:	2100      	movs	r1, #0
 80133ec:	4628      	mov	r0, r5
 80133ee:	f7ec ff0f 	bl	8000210 <memchr>
 80133f2:	b108      	cbz	r0, 80133f8 <_printf_i+0x1bc>
 80133f4:	1b40      	subs	r0, r0, r5
 80133f6:	6060      	str	r0, [r4, #4]
 80133f8:	6863      	ldr	r3, [r4, #4]
 80133fa:	6123      	str	r3, [r4, #16]
 80133fc:	2300      	movs	r3, #0
 80133fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013402:	e7a7      	b.n	8013354 <_printf_i+0x118>
 8013404:	6923      	ldr	r3, [r4, #16]
 8013406:	462a      	mov	r2, r5
 8013408:	4639      	mov	r1, r7
 801340a:	4630      	mov	r0, r6
 801340c:	47c0      	blx	r8
 801340e:	3001      	adds	r0, #1
 8013410:	d0aa      	beq.n	8013368 <_printf_i+0x12c>
 8013412:	6823      	ldr	r3, [r4, #0]
 8013414:	079b      	lsls	r3, r3, #30
 8013416:	d413      	bmi.n	8013440 <_printf_i+0x204>
 8013418:	68e0      	ldr	r0, [r4, #12]
 801341a:	9b03      	ldr	r3, [sp, #12]
 801341c:	4298      	cmp	r0, r3
 801341e:	bfb8      	it	lt
 8013420:	4618      	movlt	r0, r3
 8013422:	e7a3      	b.n	801336c <_printf_i+0x130>
 8013424:	2301      	movs	r3, #1
 8013426:	464a      	mov	r2, r9
 8013428:	4639      	mov	r1, r7
 801342a:	4630      	mov	r0, r6
 801342c:	47c0      	blx	r8
 801342e:	3001      	adds	r0, #1
 8013430:	d09a      	beq.n	8013368 <_printf_i+0x12c>
 8013432:	3501      	adds	r5, #1
 8013434:	68e3      	ldr	r3, [r4, #12]
 8013436:	9a03      	ldr	r2, [sp, #12]
 8013438:	1a9b      	subs	r3, r3, r2
 801343a:	42ab      	cmp	r3, r5
 801343c:	dcf2      	bgt.n	8013424 <_printf_i+0x1e8>
 801343e:	e7eb      	b.n	8013418 <_printf_i+0x1dc>
 8013440:	2500      	movs	r5, #0
 8013442:	f104 0919 	add.w	r9, r4, #25
 8013446:	e7f5      	b.n	8013434 <_printf_i+0x1f8>
 8013448:	2b00      	cmp	r3, #0
 801344a:	d1ac      	bne.n	80133a6 <_printf_i+0x16a>
 801344c:	7803      	ldrb	r3, [r0, #0]
 801344e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013452:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013456:	e76c      	b.n	8013332 <_printf_i+0xf6>
 8013458:	08018264 	.word	0x08018264
 801345c:	08018275 	.word	0x08018275

08013460 <_scanf_float>:
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	469a      	mov	sl, r3
 8013466:	688b      	ldr	r3, [r1, #8]
 8013468:	4616      	mov	r6, r2
 801346a:	1e5a      	subs	r2, r3, #1
 801346c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013470:	b087      	sub	sp, #28
 8013472:	bf83      	ittte	hi
 8013474:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8013478:	189b      	addhi	r3, r3, r2
 801347a:	9301      	strhi	r3, [sp, #4]
 801347c:	2300      	movls	r3, #0
 801347e:	bf86      	itte	hi
 8013480:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013484:	608b      	strhi	r3, [r1, #8]
 8013486:	9301      	strls	r3, [sp, #4]
 8013488:	680b      	ldr	r3, [r1, #0]
 801348a:	4688      	mov	r8, r1
 801348c:	f04f 0b00 	mov.w	fp, #0
 8013490:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013494:	f848 3b1c 	str.w	r3, [r8], #28
 8013498:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801349c:	4607      	mov	r7, r0
 801349e:	460c      	mov	r4, r1
 80134a0:	4645      	mov	r5, r8
 80134a2:	465a      	mov	r2, fp
 80134a4:	46d9      	mov	r9, fp
 80134a6:	f8cd b008 	str.w	fp, [sp, #8]
 80134aa:	68a1      	ldr	r1, [r4, #8]
 80134ac:	b181      	cbz	r1, 80134d0 <_scanf_float+0x70>
 80134ae:	6833      	ldr	r3, [r6, #0]
 80134b0:	781b      	ldrb	r3, [r3, #0]
 80134b2:	2b49      	cmp	r3, #73	; 0x49
 80134b4:	d071      	beq.n	801359a <_scanf_float+0x13a>
 80134b6:	d84d      	bhi.n	8013554 <_scanf_float+0xf4>
 80134b8:	2b39      	cmp	r3, #57	; 0x39
 80134ba:	d840      	bhi.n	801353e <_scanf_float+0xde>
 80134bc:	2b31      	cmp	r3, #49	; 0x31
 80134be:	f080 8088 	bcs.w	80135d2 <_scanf_float+0x172>
 80134c2:	2b2d      	cmp	r3, #45	; 0x2d
 80134c4:	f000 8090 	beq.w	80135e8 <_scanf_float+0x188>
 80134c8:	d815      	bhi.n	80134f6 <_scanf_float+0x96>
 80134ca:	2b2b      	cmp	r3, #43	; 0x2b
 80134cc:	f000 808c 	beq.w	80135e8 <_scanf_float+0x188>
 80134d0:	f1b9 0f00 	cmp.w	r9, #0
 80134d4:	d003      	beq.n	80134de <_scanf_float+0x7e>
 80134d6:	6823      	ldr	r3, [r4, #0]
 80134d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80134dc:	6023      	str	r3, [r4, #0]
 80134de:	3a01      	subs	r2, #1
 80134e0:	2a01      	cmp	r2, #1
 80134e2:	f200 80ea 	bhi.w	80136ba <_scanf_float+0x25a>
 80134e6:	4545      	cmp	r5, r8
 80134e8:	f200 80dc 	bhi.w	80136a4 <_scanf_float+0x244>
 80134ec:	2601      	movs	r6, #1
 80134ee:	4630      	mov	r0, r6
 80134f0:	b007      	add	sp, #28
 80134f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134f6:	2b2e      	cmp	r3, #46	; 0x2e
 80134f8:	f000 809f 	beq.w	801363a <_scanf_float+0x1da>
 80134fc:	2b30      	cmp	r3, #48	; 0x30
 80134fe:	d1e7      	bne.n	80134d0 <_scanf_float+0x70>
 8013500:	6820      	ldr	r0, [r4, #0]
 8013502:	f410 7f80 	tst.w	r0, #256	; 0x100
 8013506:	d064      	beq.n	80135d2 <_scanf_float+0x172>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801350e:	6020      	str	r0, [r4, #0]
 8013510:	f109 0901 	add.w	r9, r9, #1
 8013514:	b11b      	cbz	r3, 801351e <_scanf_float+0xbe>
 8013516:	3b01      	subs	r3, #1
 8013518:	3101      	adds	r1, #1
 801351a:	9301      	str	r3, [sp, #4]
 801351c:	60a1      	str	r1, [r4, #8]
 801351e:	68a3      	ldr	r3, [r4, #8]
 8013520:	3b01      	subs	r3, #1
 8013522:	60a3      	str	r3, [r4, #8]
 8013524:	6923      	ldr	r3, [r4, #16]
 8013526:	3301      	adds	r3, #1
 8013528:	6123      	str	r3, [r4, #16]
 801352a:	6873      	ldr	r3, [r6, #4]
 801352c:	3b01      	subs	r3, #1
 801352e:	2b00      	cmp	r3, #0
 8013530:	6073      	str	r3, [r6, #4]
 8013532:	f340 80ac 	ble.w	801368e <_scanf_float+0x22e>
 8013536:	6833      	ldr	r3, [r6, #0]
 8013538:	3301      	adds	r3, #1
 801353a:	6033      	str	r3, [r6, #0]
 801353c:	e7b5      	b.n	80134aa <_scanf_float+0x4a>
 801353e:	2b45      	cmp	r3, #69	; 0x45
 8013540:	f000 8085 	beq.w	801364e <_scanf_float+0x1ee>
 8013544:	2b46      	cmp	r3, #70	; 0x46
 8013546:	d06a      	beq.n	801361e <_scanf_float+0x1be>
 8013548:	2b41      	cmp	r3, #65	; 0x41
 801354a:	d1c1      	bne.n	80134d0 <_scanf_float+0x70>
 801354c:	2a01      	cmp	r2, #1
 801354e:	d1bf      	bne.n	80134d0 <_scanf_float+0x70>
 8013550:	2202      	movs	r2, #2
 8013552:	e046      	b.n	80135e2 <_scanf_float+0x182>
 8013554:	2b65      	cmp	r3, #101	; 0x65
 8013556:	d07a      	beq.n	801364e <_scanf_float+0x1ee>
 8013558:	d818      	bhi.n	801358c <_scanf_float+0x12c>
 801355a:	2b54      	cmp	r3, #84	; 0x54
 801355c:	d066      	beq.n	801362c <_scanf_float+0x1cc>
 801355e:	d811      	bhi.n	8013584 <_scanf_float+0x124>
 8013560:	2b4e      	cmp	r3, #78	; 0x4e
 8013562:	d1b5      	bne.n	80134d0 <_scanf_float+0x70>
 8013564:	2a00      	cmp	r2, #0
 8013566:	d146      	bne.n	80135f6 <_scanf_float+0x196>
 8013568:	f1b9 0f00 	cmp.w	r9, #0
 801356c:	d145      	bne.n	80135fa <_scanf_float+0x19a>
 801356e:	6821      	ldr	r1, [r4, #0]
 8013570:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8013574:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8013578:	d13f      	bne.n	80135fa <_scanf_float+0x19a>
 801357a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801357e:	6021      	str	r1, [r4, #0]
 8013580:	2201      	movs	r2, #1
 8013582:	e02e      	b.n	80135e2 <_scanf_float+0x182>
 8013584:	2b59      	cmp	r3, #89	; 0x59
 8013586:	d01e      	beq.n	80135c6 <_scanf_float+0x166>
 8013588:	2b61      	cmp	r3, #97	; 0x61
 801358a:	e7de      	b.n	801354a <_scanf_float+0xea>
 801358c:	2b6e      	cmp	r3, #110	; 0x6e
 801358e:	d0e9      	beq.n	8013564 <_scanf_float+0x104>
 8013590:	d815      	bhi.n	80135be <_scanf_float+0x15e>
 8013592:	2b66      	cmp	r3, #102	; 0x66
 8013594:	d043      	beq.n	801361e <_scanf_float+0x1be>
 8013596:	2b69      	cmp	r3, #105	; 0x69
 8013598:	d19a      	bne.n	80134d0 <_scanf_float+0x70>
 801359a:	f1bb 0f00 	cmp.w	fp, #0
 801359e:	d138      	bne.n	8013612 <_scanf_float+0x1b2>
 80135a0:	f1b9 0f00 	cmp.w	r9, #0
 80135a4:	d197      	bne.n	80134d6 <_scanf_float+0x76>
 80135a6:	6821      	ldr	r1, [r4, #0]
 80135a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80135ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80135b0:	d195      	bne.n	80134de <_scanf_float+0x7e>
 80135b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80135b6:	6021      	str	r1, [r4, #0]
 80135b8:	f04f 0b01 	mov.w	fp, #1
 80135bc:	e011      	b.n	80135e2 <_scanf_float+0x182>
 80135be:	2b74      	cmp	r3, #116	; 0x74
 80135c0:	d034      	beq.n	801362c <_scanf_float+0x1cc>
 80135c2:	2b79      	cmp	r3, #121	; 0x79
 80135c4:	d184      	bne.n	80134d0 <_scanf_float+0x70>
 80135c6:	f1bb 0f07 	cmp.w	fp, #7
 80135ca:	d181      	bne.n	80134d0 <_scanf_float+0x70>
 80135cc:	f04f 0b08 	mov.w	fp, #8
 80135d0:	e007      	b.n	80135e2 <_scanf_float+0x182>
 80135d2:	eb12 0f0b 	cmn.w	r2, fp
 80135d6:	f47f af7b 	bne.w	80134d0 <_scanf_float+0x70>
 80135da:	6821      	ldr	r1, [r4, #0]
 80135dc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80135e0:	6021      	str	r1, [r4, #0]
 80135e2:	702b      	strb	r3, [r5, #0]
 80135e4:	3501      	adds	r5, #1
 80135e6:	e79a      	b.n	801351e <_scanf_float+0xbe>
 80135e8:	6821      	ldr	r1, [r4, #0]
 80135ea:	0608      	lsls	r0, r1, #24
 80135ec:	f57f af70 	bpl.w	80134d0 <_scanf_float+0x70>
 80135f0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80135f4:	e7f4      	b.n	80135e0 <_scanf_float+0x180>
 80135f6:	2a02      	cmp	r2, #2
 80135f8:	d047      	beq.n	801368a <_scanf_float+0x22a>
 80135fa:	f1bb 0f01 	cmp.w	fp, #1
 80135fe:	d003      	beq.n	8013608 <_scanf_float+0x1a8>
 8013600:	f1bb 0f04 	cmp.w	fp, #4
 8013604:	f47f af64 	bne.w	80134d0 <_scanf_float+0x70>
 8013608:	f10b 0b01 	add.w	fp, fp, #1
 801360c:	fa5f fb8b 	uxtb.w	fp, fp
 8013610:	e7e7      	b.n	80135e2 <_scanf_float+0x182>
 8013612:	f1bb 0f03 	cmp.w	fp, #3
 8013616:	d0f7      	beq.n	8013608 <_scanf_float+0x1a8>
 8013618:	f1bb 0f05 	cmp.w	fp, #5
 801361c:	e7f2      	b.n	8013604 <_scanf_float+0x1a4>
 801361e:	f1bb 0f02 	cmp.w	fp, #2
 8013622:	f47f af55 	bne.w	80134d0 <_scanf_float+0x70>
 8013626:	f04f 0b03 	mov.w	fp, #3
 801362a:	e7da      	b.n	80135e2 <_scanf_float+0x182>
 801362c:	f1bb 0f06 	cmp.w	fp, #6
 8013630:	f47f af4e 	bne.w	80134d0 <_scanf_float+0x70>
 8013634:	f04f 0b07 	mov.w	fp, #7
 8013638:	e7d3      	b.n	80135e2 <_scanf_float+0x182>
 801363a:	6821      	ldr	r1, [r4, #0]
 801363c:	0588      	lsls	r0, r1, #22
 801363e:	f57f af47 	bpl.w	80134d0 <_scanf_float+0x70>
 8013642:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8013646:	6021      	str	r1, [r4, #0]
 8013648:	f8cd 9008 	str.w	r9, [sp, #8]
 801364c:	e7c9      	b.n	80135e2 <_scanf_float+0x182>
 801364e:	6821      	ldr	r1, [r4, #0]
 8013650:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8013654:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8013658:	d006      	beq.n	8013668 <_scanf_float+0x208>
 801365a:	0548      	lsls	r0, r1, #21
 801365c:	f57f af38 	bpl.w	80134d0 <_scanf_float+0x70>
 8013660:	f1b9 0f00 	cmp.w	r9, #0
 8013664:	f43f af3b 	beq.w	80134de <_scanf_float+0x7e>
 8013668:	0588      	lsls	r0, r1, #22
 801366a:	bf58      	it	pl
 801366c:	9802      	ldrpl	r0, [sp, #8]
 801366e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8013672:	bf58      	it	pl
 8013674:	eba9 0000 	subpl.w	r0, r9, r0
 8013678:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801367c:	bf58      	it	pl
 801367e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8013682:	6021      	str	r1, [r4, #0]
 8013684:	f04f 0900 	mov.w	r9, #0
 8013688:	e7ab      	b.n	80135e2 <_scanf_float+0x182>
 801368a:	2203      	movs	r2, #3
 801368c:	e7a9      	b.n	80135e2 <_scanf_float+0x182>
 801368e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013692:	9205      	str	r2, [sp, #20]
 8013694:	4631      	mov	r1, r6
 8013696:	4638      	mov	r0, r7
 8013698:	4798      	blx	r3
 801369a:	9a05      	ldr	r2, [sp, #20]
 801369c:	2800      	cmp	r0, #0
 801369e:	f43f af04 	beq.w	80134aa <_scanf_float+0x4a>
 80136a2:	e715      	b.n	80134d0 <_scanf_float+0x70>
 80136a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80136ac:	4632      	mov	r2, r6
 80136ae:	4638      	mov	r0, r7
 80136b0:	4798      	blx	r3
 80136b2:	6923      	ldr	r3, [r4, #16]
 80136b4:	3b01      	subs	r3, #1
 80136b6:	6123      	str	r3, [r4, #16]
 80136b8:	e715      	b.n	80134e6 <_scanf_float+0x86>
 80136ba:	f10b 33ff 	add.w	r3, fp, #4294967295
 80136be:	2b06      	cmp	r3, #6
 80136c0:	d80a      	bhi.n	80136d8 <_scanf_float+0x278>
 80136c2:	f1bb 0f02 	cmp.w	fp, #2
 80136c6:	d968      	bls.n	801379a <_scanf_float+0x33a>
 80136c8:	f1ab 0b03 	sub.w	fp, fp, #3
 80136cc:	fa5f fb8b 	uxtb.w	fp, fp
 80136d0:	eba5 0b0b 	sub.w	fp, r5, fp
 80136d4:	455d      	cmp	r5, fp
 80136d6:	d14b      	bne.n	8013770 <_scanf_float+0x310>
 80136d8:	6823      	ldr	r3, [r4, #0]
 80136da:	05da      	lsls	r2, r3, #23
 80136dc:	d51f      	bpl.n	801371e <_scanf_float+0x2be>
 80136de:	055b      	lsls	r3, r3, #21
 80136e0:	d468      	bmi.n	80137b4 <_scanf_float+0x354>
 80136e2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80136e6:	6923      	ldr	r3, [r4, #16]
 80136e8:	2965      	cmp	r1, #101	; 0x65
 80136ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80136ee:	f105 3bff 	add.w	fp, r5, #4294967295
 80136f2:	6123      	str	r3, [r4, #16]
 80136f4:	d00d      	beq.n	8013712 <_scanf_float+0x2b2>
 80136f6:	2945      	cmp	r1, #69	; 0x45
 80136f8:	d00b      	beq.n	8013712 <_scanf_float+0x2b2>
 80136fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80136fe:	4632      	mov	r2, r6
 8013700:	4638      	mov	r0, r7
 8013702:	4798      	blx	r3
 8013704:	6923      	ldr	r3, [r4, #16]
 8013706:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801370a:	3b01      	subs	r3, #1
 801370c:	f1a5 0b02 	sub.w	fp, r5, #2
 8013710:	6123      	str	r3, [r4, #16]
 8013712:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013716:	4632      	mov	r2, r6
 8013718:	4638      	mov	r0, r7
 801371a:	4798      	blx	r3
 801371c:	465d      	mov	r5, fp
 801371e:	6826      	ldr	r6, [r4, #0]
 8013720:	f016 0610 	ands.w	r6, r6, #16
 8013724:	d17a      	bne.n	801381c <_scanf_float+0x3bc>
 8013726:	702e      	strb	r6, [r5, #0]
 8013728:	6823      	ldr	r3, [r4, #0]
 801372a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801372e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013732:	d142      	bne.n	80137ba <_scanf_float+0x35a>
 8013734:	9b02      	ldr	r3, [sp, #8]
 8013736:	eba9 0303 	sub.w	r3, r9, r3
 801373a:	425a      	negs	r2, r3
 801373c:	2b00      	cmp	r3, #0
 801373e:	d149      	bne.n	80137d4 <_scanf_float+0x374>
 8013740:	2200      	movs	r2, #0
 8013742:	4641      	mov	r1, r8
 8013744:	4638      	mov	r0, r7
 8013746:	f000 ffdf 	bl	8014708 <_strtod_r>
 801374a:	6825      	ldr	r5, [r4, #0]
 801374c:	f8da 3000 	ldr.w	r3, [sl]
 8013750:	f015 0f02 	tst.w	r5, #2
 8013754:	f103 0204 	add.w	r2, r3, #4
 8013758:	ec59 8b10 	vmov	r8, r9, d0
 801375c:	f8ca 2000 	str.w	r2, [sl]
 8013760:	d043      	beq.n	80137ea <_scanf_float+0x38a>
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	e9c3 8900 	strd	r8, r9, [r3]
 8013768:	68e3      	ldr	r3, [r4, #12]
 801376a:	3301      	adds	r3, #1
 801376c:	60e3      	str	r3, [r4, #12]
 801376e:	e6be      	b.n	80134ee <_scanf_float+0x8e>
 8013770:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013774:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8013778:	4632      	mov	r2, r6
 801377a:	4638      	mov	r0, r7
 801377c:	4798      	blx	r3
 801377e:	6923      	ldr	r3, [r4, #16]
 8013780:	3b01      	subs	r3, #1
 8013782:	6123      	str	r3, [r4, #16]
 8013784:	e7a6      	b.n	80136d4 <_scanf_float+0x274>
 8013786:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801378a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801378e:	4632      	mov	r2, r6
 8013790:	4638      	mov	r0, r7
 8013792:	4798      	blx	r3
 8013794:	6923      	ldr	r3, [r4, #16]
 8013796:	3b01      	subs	r3, #1
 8013798:	6123      	str	r3, [r4, #16]
 801379a:	4545      	cmp	r5, r8
 801379c:	d8f3      	bhi.n	8013786 <_scanf_float+0x326>
 801379e:	e6a5      	b.n	80134ec <_scanf_float+0x8c>
 80137a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80137a4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80137a8:	4632      	mov	r2, r6
 80137aa:	4638      	mov	r0, r7
 80137ac:	4798      	blx	r3
 80137ae:	6923      	ldr	r3, [r4, #16]
 80137b0:	3b01      	subs	r3, #1
 80137b2:	6123      	str	r3, [r4, #16]
 80137b4:	4545      	cmp	r5, r8
 80137b6:	d8f3      	bhi.n	80137a0 <_scanf_float+0x340>
 80137b8:	e698      	b.n	80134ec <_scanf_float+0x8c>
 80137ba:	9b03      	ldr	r3, [sp, #12]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d0bf      	beq.n	8013740 <_scanf_float+0x2e0>
 80137c0:	9904      	ldr	r1, [sp, #16]
 80137c2:	230a      	movs	r3, #10
 80137c4:	4632      	mov	r2, r6
 80137c6:	3101      	adds	r1, #1
 80137c8:	4638      	mov	r0, r7
 80137ca:	f001 f829 	bl	8014820 <_strtol_r>
 80137ce:	9b03      	ldr	r3, [sp, #12]
 80137d0:	9d04      	ldr	r5, [sp, #16]
 80137d2:	1ac2      	subs	r2, r0, r3
 80137d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80137d8:	429d      	cmp	r5, r3
 80137da:	bf28      	it	cs
 80137dc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80137e0:	490f      	ldr	r1, [pc, #60]	; (8013820 <_scanf_float+0x3c0>)
 80137e2:	4628      	mov	r0, r5
 80137e4:	f000 f8e8 	bl	80139b8 <siprintf>
 80137e8:	e7aa      	b.n	8013740 <_scanf_float+0x2e0>
 80137ea:	f015 0504 	ands.w	r5, r5, #4
 80137ee:	d1b8      	bne.n	8013762 <_scanf_float+0x302>
 80137f0:	681f      	ldr	r7, [r3, #0]
 80137f2:	ee10 2a10 	vmov	r2, s0
 80137f6:	464b      	mov	r3, r9
 80137f8:	ee10 0a10 	vmov	r0, s0
 80137fc:	4649      	mov	r1, r9
 80137fe:	f7ed f9ad 	bl	8000b5c <__aeabi_dcmpun>
 8013802:	b128      	cbz	r0, 8013810 <_scanf_float+0x3b0>
 8013804:	4628      	mov	r0, r5
 8013806:	f000 f89d 	bl	8013944 <nanf>
 801380a:	ed87 0a00 	vstr	s0, [r7]
 801380e:	e7ab      	b.n	8013768 <_scanf_float+0x308>
 8013810:	4640      	mov	r0, r8
 8013812:	4649      	mov	r1, r9
 8013814:	f7ed fa00 	bl	8000c18 <__aeabi_d2f>
 8013818:	6038      	str	r0, [r7, #0]
 801381a:	e7a5      	b.n	8013768 <_scanf_float+0x308>
 801381c:	2600      	movs	r6, #0
 801381e:	e666      	b.n	80134ee <_scanf_float+0x8e>
 8013820:	08018286 	.word	0x08018286

08013824 <iprintf>:
 8013824:	b40f      	push	{r0, r1, r2, r3}
 8013826:	4b0a      	ldr	r3, [pc, #40]	; (8013850 <iprintf+0x2c>)
 8013828:	b513      	push	{r0, r1, r4, lr}
 801382a:	681c      	ldr	r4, [r3, #0]
 801382c:	b124      	cbz	r4, 8013838 <iprintf+0x14>
 801382e:	69a3      	ldr	r3, [r4, #24]
 8013830:	b913      	cbnz	r3, 8013838 <iprintf+0x14>
 8013832:	4620      	mov	r0, r4
 8013834:	f002 f83c 	bl	80158b0 <__sinit>
 8013838:	ab05      	add	r3, sp, #20
 801383a:	9a04      	ldr	r2, [sp, #16]
 801383c:	68a1      	ldr	r1, [r4, #8]
 801383e:	9301      	str	r3, [sp, #4]
 8013840:	4620      	mov	r0, r4
 8013842:	f003 fc7d 	bl	8017140 <_vfiprintf_r>
 8013846:	b002      	add	sp, #8
 8013848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801384c:	b004      	add	sp, #16
 801384e:	4770      	bx	lr
 8013850:	2000000c 	.word	0x2000000c

08013854 <putchar>:
 8013854:	b538      	push	{r3, r4, r5, lr}
 8013856:	4b08      	ldr	r3, [pc, #32]	; (8013878 <putchar+0x24>)
 8013858:	681c      	ldr	r4, [r3, #0]
 801385a:	4605      	mov	r5, r0
 801385c:	b124      	cbz	r4, 8013868 <putchar+0x14>
 801385e:	69a3      	ldr	r3, [r4, #24]
 8013860:	b913      	cbnz	r3, 8013868 <putchar+0x14>
 8013862:	4620      	mov	r0, r4
 8013864:	f002 f824 	bl	80158b0 <__sinit>
 8013868:	68a2      	ldr	r2, [r4, #8]
 801386a:	4629      	mov	r1, r5
 801386c:	4620      	mov	r0, r4
 801386e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013872:	f003 bed3 	b.w	801761c <_putc_r>
 8013876:	bf00      	nop
 8013878:	2000000c 	.word	0x2000000c

0801387c <_puts_r>:
 801387c:	b570      	push	{r4, r5, r6, lr}
 801387e:	460e      	mov	r6, r1
 8013880:	4605      	mov	r5, r0
 8013882:	b118      	cbz	r0, 801388c <_puts_r+0x10>
 8013884:	6983      	ldr	r3, [r0, #24]
 8013886:	b90b      	cbnz	r3, 801388c <_puts_r+0x10>
 8013888:	f002 f812 	bl	80158b0 <__sinit>
 801388c:	69ab      	ldr	r3, [r5, #24]
 801388e:	68ac      	ldr	r4, [r5, #8]
 8013890:	b913      	cbnz	r3, 8013898 <_puts_r+0x1c>
 8013892:	4628      	mov	r0, r5
 8013894:	f002 f80c 	bl	80158b0 <__sinit>
 8013898:	4b23      	ldr	r3, [pc, #140]	; (8013928 <_puts_r+0xac>)
 801389a:	429c      	cmp	r4, r3
 801389c:	d117      	bne.n	80138ce <_puts_r+0x52>
 801389e:	686c      	ldr	r4, [r5, #4]
 80138a0:	89a3      	ldrh	r3, [r4, #12]
 80138a2:	071b      	lsls	r3, r3, #28
 80138a4:	d51d      	bpl.n	80138e2 <_puts_r+0x66>
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	b1db      	cbz	r3, 80138e2 <_puts_r+0x66>
 80138aa:	3e01      	subs	r6, #1
 80138ac:	68a3      	ldr	r3, [r4, #8]
 80138ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80138b2:	3b01      	subs	r3, #1
 80138b4:	60a3      	str	r3, [r4, #8]
 80138b6:	b9e9      	cbnz	r1, 80138f4 <_puts_r+0x78>
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	da2e      	bge.n	801391a <_puts_r+0x9e>
 80138bc:	4622      	mov	r2, r4
 80138be:	210a      	movs	r1, #10
 80138c0:	4628      	mov	r0, r5
 80138c2:	f000 ffdf 	bl	8014884 <__swbuf_r>
 80138c6:	3001      	adds	r0, #1
 80138c8:	d011      	beq.n	80138ee <_puts_r+0x72>
 80138ca:	200a      	movs	r0, #10
 80138cc:	e011      	b.n	80138f2 <_puts_r+0x76>
 80138ce:	4b17      	ldr	r3, [pc, #92]	; (801392c <_puts_r+0xb0>)
 80138d0:	429c      	cmp	r4, r3
 80138d2:	d101      	bne.n	80138d8 <_puts_r+0x5c>
 80138d4:	68ac      	ldr	r4, [r5, #8]
 80138d6:	e7e3      	b.n	80138a0 <_puts_r+0x24>
 80138d8:	4b15      	ldr	r3, [pc, #84]	; (8013930 <_puts_r+0xb4>)
 80138da:	429c      	cmp	r4, r3
 80138dc:	bf08      	it	eq
 80138de:	68ec      	ldreq	r4, [r5, #12]
 80138e0:	e7de      	b.n	80138a0 <_puts_r+0x24>
 80138e2:	4621      	mov	r1, r4
 80138e4:	4628      	mov	r0, r5
 80138e6:	f001 f831 	bl	801494c <__swsetup_r>
 80138ea:	2800      	cmp	r0, #0
 80138ec:	d0dd      	beq.n	80138aa <_puts_r+0x2e>
 80138ee:	f04f 30ff 	mov.w	r0, #4294967295
 80138f2:	bd70      	pop	{r4, r5, r6, pc}
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	da04      	bge.n	8013902 <_puts_r+0x86>
 80138f8:	69a2      	ldr	r2, [r4, #24]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	dc06      	bgt.n	801390c <_puts_r+0x90>
 80138fe:	290a      	cmp	r1, #10
 8013900:	d004      	beq.n	801390c <_puts_r+0x90>
 8013902:	6823      	ldr	r3, [r4, #0]
 8013904:	1c5a      	adds	r2, r3, #1
 8013906:	6022      	str	r2, [r4, #0]
 8013908:	7019      	strb	r1, [r3, #0]
 801390a:	e7cf      	b.n	80138ac <_puts_r+0x30>
 801390c:	4622      	mov	r2, r4
 801390e:	4628      	mov	r0, r5
 8013910:	f000 ffb8 	bl	8014884 <__swbuf_r>
 8013914:	3001      	adds	r0, #1
 8013916:	d1c9      	bne.n	80138ac <_puts_r+0x30>
 8013918:	e7e9      	b.n	80138ee <_puts_r+0x72>
 801391a:	6823      	ldr	r3, [r4, #0]
 801391c:	200a      	movs	r0, #10
 801391e:	1c5a      	adds	r2, r3, #1
 8013920:	6022      	str	r2, [r4, #0]
 8013922:	7018      	strb	r0, [r3, #0]
 8013924:	e7e5      	b.n	80138f2 <_puts_r+0x76>
 8013926:	bf00      	nop
 8013928:	08018310 	.word	0x08018310
 801392c:	08018330 	.word	0x08018330
 8013930:	080182f0 	.word	0x080182f0

08013934 <puts>:
 8013934:	4b02      	ldr	r3, [pc, #8]	; (8013940 <puts+0xc>)
 8013936:	4601      	mov	r1, r0
 8013938:	6818      	ldr	r0, [r3, #0]
 801393a:	f7ff bf9f 	b.w	801387c <_puts_r>
 801393e:	bf00      	nop
 8013940:	2000000c 	.word	0x2000000c

08013944 <nanf>:
 8013944:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801394c <nanf+0x8>
 8013948:	4770      	bx	lr
 801394a:	bf00      	nop
 801394c:	7fc00000 	.word	0x7fc00000

08013950 <sniprintf>:
 8013950:	b40c      	push	{r2, r3}
 8013952:	b530      	push	{r4, r5, lr}
 8013954:	4b17      	ldr	r3, [pc, #92]	; (80139b4 <sniprintf+0x64>)
 8013956:	1e0c      	subs	r4, r1, #0
 8013958:	b09d      	sub	sp, #116	; 0x74
 801395a:	681d      	ldr	r5, [r3, #0]
 801395c:	da08      	bge.n	8013970 <sniprintf+0x20>
 801395e:	238b      	movs	r3, #139	; 0x8b
 8013960:	602b      	str	r3, [r5, #0]
 8013962:	f04f 30ff 	mov.w	r0, #4294967295
 8013966:	b01d      	add	sp, #116	; 0x74
 8013968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801396c:	b002      	add	sp, #8
 801396e:	4770      	bx	lr
 8013970:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013974:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013978:	bf14      	ite	ne
 801397a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801397e:	4623      	moveq	r3, r4
 8013980:	9304      	str	r3, [sp, #16]
 8013982:	9307      	str	r3, [sp, #28]
 8013984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013988:	9002      	str	r0, [sp, #8]
 801398a:	9006      	str	r0, [sp, #24]
 801398c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013990:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013992:	ab21      	add	r3, sp, #132	; 0x84
 8013994:	a902      	add	r1, sp, #8
 8013996:	4628      	mov	r0, r5
 8013998:	9301      	str	r3, [sp, #4]
 801399a:	f003 f905 	bl	8016ba8 <_svfiprintf_r>
 801399e:	1c43      	adds	r3, r0, #1
 80139a0:	bfbc      	itt	lt
 80139a2:	238b      	movlt	r3, #139	; 0x8b
 80139a4:	602b      	strlt	r3, [r5, #0]
 80139a6:	2c00      	cmp	r4, #0
 80139a8:	d0dd      	beq.n	8013966 <sniprintf+0x16>
 80139aa:	9b02      	ldr	r3, [sp, #8]
 80139ac:	2200      	movs	r2, #0
 80139ae:	701a      	strb	r2, [r3, #0]
 80139b0:	e7d9      	b.n	8013966 <sniprintf+0x16>
 80139b2:	bf00      	nop
 80139b4:	2000000c 	.word	0x2000000c

080139b8 <siprintf>:
 80139b8:	b40e      	push	{r1, r2, r3}
 80139ba:	b500      	push	{lr}
 80139bc:	b09c      	sub	sp, #112	; 0x70
 80139be:	ab1d      	add	r3, sp, #116	; 0x74
 80139c0:	9002      	str	r0, [sp, #8]
 80139c2:	9006      	str	r0, [sp, #24]
 80139c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80139c8:	4809      	ldr	r0, [pc, #36]	; (80139f0 <siprintf+0x38>)
 80139ca:	9107      	str	r1, [sp, #28]
 80139cc:	9104      	str	r1, [sp, #16]
 80139ce:	4909      	ldr	r1, [pc, #36]	; (80139f4 <siprintf+0x3c>)
 80139d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80139d4:	9105      	str	r1, [sp, #20]
 80139d6:	6800      	ldr	r0, [r0, #0]
 80139d8:	9301      	str	r3, [sp, #4]
 80139da:	a902      	add	r1, sp, #8
 80139dc:	f003 f8e4 	bl	8016ba8 <_svfiprintf_r>
 80139e0:	9b02      	ldr	r3, [sp, #8]
 80139e2:	2200      	movs	r2, #0
 80139e4:	701a      	strb	r2, [r3, #0]
 80139e6:	b01c      	add	sp, #112	; 0x70
 80139e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80139ec:	b003      	add	sp, #12
 80139ee:	4770      	bx	lr
 80139f0:	2000000c 	.word	0x2000000c
 80139f4:	ffff0208 	.word	0xffff0208

080139f8 <siscanf>:
 80139f8:	b40e      	push	{r1, r2, r3}
 80139fa:	b530      	push	{r4, r5, lr}
 80139fc:	b09c      	sub	sp, #112	; 0x70
 80139fe:	ac1f      	add	r4, sp, #124	; 0x7c
 8013a00:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013a04:	f854 5b04 	ldr.w	r5, [r4], #4
 8013a08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013a0c:	9002      	str	r0, [sp, #8]
 8013a0e:	9006      	str	r0, [sp, #24]
 8013a10:	f7ec fbf6 	bl	8000200 <strlen>
 8013a14:	4b0b      	ldr	r3, [pc, #44]	; (8013a44 <siscanf+0x4c>)
 8013a16:	9003      	str	r0, [sp, #12]
 8013a18:	9007      	str	r0, [sp, #28]
 8013a1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8013a1c:	480a      	ldr	r0, [pc, #40]	; (8013a48 <siscanf+0x50>)
 8013a1e:	9401      	str	r4, [sp, #4]
 8013a20:	2300      	movs	r3, #0
 8013a22:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a24:	9314      	str	r3, [sp, #80]	; 0x50
 8013a26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013a2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013a2e:	462a      	mov	r2, r5
 8013a30:	4623      	mov	r3, r4
 8013a32:	a902      	add	r1, sp, #8
 8013a34:	6800      	ldr	r0, [r0, #0]
 8013a36:	f003 fa09 	bl	8016e4c <__ssvfiscanf_r>
 8013a3a:	b01c      	add	sp, #112	; 0x70
 8013a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013a40:	b003      	add	sp, #12
 8013a42:	4770      	bx	lr
 8013a44:	08013a6f 	.word	0x08013a6f
 8013a48:	2000000c 	.word	0x2000000c

08013a4c <__sread>:
 8013a4c:	b510      	push	{r4, lr}
 8013a4e:	460c      	mov	r4, r1
 8013a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a54:	f003 fe18 	bl	8017688 <_read_r>
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	bfab      	itete	ge
 8013a5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a5e:	89a3      	ldrhlt	r3, [r4, #12]
 8013a60:	181b      	addge	r3, r3, r0
 8013a62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a66:	bfac      	ite	ge
 8013a68:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a6a:	81a3      	strhlt	r3, [r4, #12]
 8013a6c:	bd10      	pop	{r4, pc}

08013a6e <__seofread>:
 8013a6e:	2000      	movs	r0, #0
 8013a70:	4770      	bx	lr

08013a72 <__swrite>:
 8013a72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a76:	461f      	mov	r7, r3
 8013a78:	898b      	ldrh	r3, [r1, #12]
 8013a7a:	05db      	lsls	r3, r3, #23
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	460c      	mov	r4, r1
 8013a80:	4616      	mov	r6, r2
 8013a82:	d505      	bpl.n	8013a90 <__swrite+0x1e>
 8013a84:	2302      	movs	r3, #2
 8013a86:	2200      	movs	r2, #0
 8013a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a8c:	f002 fae2 	bl	8016054 <_lseek_r>
 8013a90:	89a3      	ldrh	r3, [r4, #12]
 8013a92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a9a:	81a3      	strh	r3, [r4, #12]
 8013a9c:	4632      	mov	r2, r6
 8013a9e:	463b      	mov	r3, r7
 8013aa0:	4628      	mov	r0, r5
 8013aa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa6:	f000 bf3f 	b.w	8014928 <_write_r>

08013aaa <__sseek>:
 8013aaa:	b510      	push	{r4, lr}
 8013aac:	460c      	mov	r4, r1
 8013aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ab2:	f002 facf 	bl	8016054 <_lseek_r>
 8013ab6:	1c43      	adds	r3, r0, #1
 8013ab8:	89a3      	ldrh	r3, [r4, #12]
 8013aba:	bf15      	itete	ne
 8013abc:	6560      	strne	r0, [r4, #84]	; 0x54
 8013abe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013ac2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013ac6:	81a3      	strheq	r3, [r4, #12]
 8013ac8:	bf18      	it	ne
 8013aca:	81a3      	strhne	r3, [r4, #12]
 8013acc:	bd10      	pop	{r4, pc}

08013ace <__sclose>:
 8013ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ad2:	f000 bfa9 	b.w	8014a28 <_close_r>

08013ad6 <strcpy>:
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013adc:	f803 2b01 	strb.w	r2, [r3], #1
 8013ae0:	2a00      	cmp	r2, #0
 8013ae2:	d1f9      	bne.n	8013ad8 <strcpy+0x2>
 8013ae4:	4770      	bx	lr

08013ae6 <sulp>:
 8013ae6:	b570      	push	{r4, r5, r6, lr}
 8013ae8:	4604      	mov	r4, r0
 8013aea:	460d      	mov	r5, r1
 8013aec:	ec45 4b10 	vmov	d0, r4, r5
 8013af0:	4616      	mov	r6, r2
 8013af2:	f002 fe15 	bl	8016720 <__ulp>
 8013af6:	ec51 0b10 	vmov	r0, r1, d0
 8013afa:	b17e      	cbz	r6, 8013b1c <sulp+0x36>
 8013afc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013b00:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	dd09      	ble.n	8013b1c <sulp+0x36>
 8013b08:	051b      	lsls	r3, r3, #20
 8013b0a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013b0e:	2400      	movs	r4, #0
 8013b10:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013b14:	4622      	mov	r2, r4
 8013b16:	462b      	mov	r3, r5
 8013b18:	f7ec fd86 	bl	8000628 <__aeabi_dmul>
 8013b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013b20 <_strtod_l>:
 8013b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b24:	461f      	mov	r7, r3
 8013b26:	b0a1      	sub	sp, #132	; 0x84
 8013b28:	2300      	movs	r3, #0
 8013b2a:	4681      	mov	r9, r0
 8013b2c:	4638      	mov	r0, r7
 8013b2e:	460e      	mov	r6, r1
 8013b30:	9217      	str	r2, [sp, #92]	; 0x5c
 8013b32:	931c      	str	r3, [sp, #112]	; 0x70
 8013b34:	f002 fa7e 	bl	8016034 <__localeconv_l>
 8013b38:	4680      	mov	r8, r0
 8013b3a:	6800      	ldr	r0, [r0, #0]
 8013b3c:	f7ec fb60 	bl	8000200 <strlen>
 8013b40:	f04f 0a00 	mov.w	sl, #0
 8013b44:	4604      	mov	r4, r0
 8013b46:	f04f 0b00 	mov.w	fp, #0
 8013b4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8013b4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013b4e:	781a      	ldrb	r2, [r3, #0]
 8013b50:	2a0d      	cmp	r2, #13
 8013b52:	d832      	bhi.n	8013bba <_strtod_l+0x9a>
 8013b54:	2a09      	cmp	r2, #9
 8013b56:	d236      	bcs.n	8013bc6 <_strtod_l+0xa6>
 8013b58:	2a00      	cmp	r2, #0
 8013b5a:	d03e      	beq.n	8013bda <_strtod_l+0xba>
 8013b5c:	2300      	movs	r3, #0
 8013b5e:	930d      	str	r3, [sp, #52]	; 0x34
 8013b60:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013b62:	782b      	ldrb	r3, [r5, #0]
 8013b64:	2b30      	cmp	r3, #48	; 0x30
 8013b66:	f040 80ac 	bne.w	8013cc2 <_strtod_l+0x1a2>
 8013b6a:	786b      	ldrb	r3, [r5, #1]
 8013b6c:	2b58      	cmp	r3, #88	; 0x58
 8013b6e:	d001      	beq.n	8013b74 <_strtod_l+0x54>
 8013b70:	2b78      	cmp	r3, #120	; 0x78
 8013b72:	d167      	bne.n	8013c44 <_strtod_l+0x124>
 8013b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013b76:	9301      	str	r3, [sp, #4]
 8013b78:	ab1c      	add	r3, sp, #112	; 0x70
 8013b7a:	9300      	str	r3, [sp, #0]
 8013b7c:	9702      	str	r7, [sp, #8]
 8013b7e:	ab1d      	add	r3, sp, #116	; 0x74
 8013b80:	4a88      	ldr	r2, [pc, #544]	; (8013da4 <_strtod_l+0x284>)
 8013b82:	a91b      	add	r1, sp, #108	; 0x6c
 8013b84:	4648      	mov	r0, r9
 8013b86:	f001 ff6c 	bl	8015a62 <__gethex>
 8013b8a:	f010 0407 	ands.w	r4, r0, #7
 8013b8e:	4606      	mov	r6, r0
 8013b90:	d005      	beq.n	8013b9e <_strtod_l+0x7e>
 8013b92:	2c06      	cmp	r4, #6
 8013b94:	d12b      	bne.n	8013bee <_strtod_l+0xce>
 8013b96:	3501      	adds	r5, #1
 8013b98:	2300      	movs	r3, #0
 8013b9a:	951b      	str	r5, [sp, #108]	; 0x6c
 8013b9c:	930d      	str	r3, [sp, #52]	; 0x34
 8013b9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	f040 859a 	bne.w	80146da <_strtod_l+0xbba>
 8013ba6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013ba8:	b1e3      	cbz	r3, 8013be4 <_strtod_l+0xc4>
 8013baa:	4652      	mov	r2, sl
 8013bac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013bb0:	ec43 2b10 	vmov	d0, r2, r3
 8013bb4:	b021      	add	sp, #132	; 0x84
 8013bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bba:	2a2b      	cmp	r2, #43	; 0x2b
 8013bbc:	d015      	beq.n	8013bea <_strtod_l+0xca>
 8013bbe:	2a2d      	cmp	r2, #45	; 0x2d
 8013bc0:	d004      	beq.n	8013bcc <_strtod_l+0xac>
 8013bc2:	2a20      	cmp	r2, #32
 8013bc4:	d1ca      	bne.n	8013b5c <_strtod_l+0x3c>
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	931b      	str	r3, [sp, #108]	; 0x6c
 8013bca:	e7bf      	b.n	8013b4c <_strtod_l+0x2c>
 8013bcc:	2201      	movs	r2, #1
 8013bce:	920d      	str	r2, [sp, #52]	; 0x34
 8013bd0:	1c5a      	adds	r2, r3, #1
 8013bd2:	921b      	str	r2, [sp, #108]	; 0x6c
 8013bd4:	785b      	ldrb	r3, [r3, #1]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d1c2      	bne.n	8013b60 <_strtod_l+0x40>
 8013bda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013bdc:	961b      	str	r6, [sp, #108]	; 0x6c
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	f040 8579 	bne.w	80146d6 <_strtod_l+0xbb6>
 8013be4:	4652      	mov	r2, sl
 8013be6:	465b      	mov	r3, fp
 8013be8:	e7e2      	b.n	8013bb0 <_strtod_l+0x90>
 8013bea:	2200      	movs	r2, #0
 8013bec:	e7ef      	b.n	8013bce <_strtod_l+0xae>
 8013bee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8013bf0:	b13a      	cbz	r2, 8013c02 <_strtod_l+0xe2>
 8013bf2:	2135      	movs	r1, #53	; 0x35
 8013bf4:	a81e      	add	r0, sp, #120	; 0x78
 8013bf6:	f002 fe8b 	bl	8016910 <__copybits>
 8013bfa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013bfc:	4648      	mov	r0, r9
 8013bfe:	f002 faf8 	bl	80161f2 <_Bfree>
 8013c02:	3c01      	subs	r4, #1
 8013c04:	2c04      	cmp	r4, #4
 8013c06:	d806      	bhi.n	8013c16 <_strtod_l+0xf6>
 8013c08:	e8df f004 	tbb	[pc, r4]
 8013c0c:	1714030a 	.word	0x1714030a
 8013c10:	0a          	.byte	0x0a
 8013c11:	00          	.byte	0x00
 8013c12:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8013c16:	0730      	lsls	r0, r6, #28
 8013c18:	d5c1      	bpl.n	8013b9e <_strtod_l+0x7e>
 8013c1a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8013c1e:	e7be      	b.n	8013b9e <_strtod_l+0x7e>
 8013c20:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8013c24:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8013c26:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013c2a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013c2e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013c32:	e7f0      	b.n	8013c16 <_strtod_l+0xf6>
 8013c34:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013da8 <_strtod_l+0x288>
 8013c38:	e7ed      	b.n	8013c16 <_strtod_l+0xf6>
 8013c3a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8013c3e:	f04f 3aff 	mov.w	sl, #4294967295
 8013c42:	e7e8      	b.n	8013c16 <_strtod_l+0xf6>
 8013c44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c46:	1c5a      	adds	r2, r3, #1
 8013c48:	921b      	str	r2, [sp, #108]	; 0x6c
 8013c4a:	785b      	ldrb	r3, [r3, #1]
 8013c4c:	2b30      	cmp	r3, #48	; 0x30
 8013c4e:	d0f9      	beq.n	8013c44 <_strtod_l+0x124>
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d0a4      	beq.n	8013b9e <_strtod_l+0x7e>
 8013c54:	2301      	movs	r3, #1
 8013c56:	2500      	movs	r5, #0
 8013c58:	9306      	str	r3, [sp, #24]
 8013c5a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013c5c:	9308      	str	r3, [sp, #32]
 8013c5e:	9507      	str	r5, [sp, #28]
 8013c60:	9505      	str	r5, [sp, #20]
 8013c62:	220a      	movs	r2, #10
 8013c64:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8013c66:	7807      	ldrb	r7, [r0, #0]
 8013c68:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8013c6c:	b2d9      	uxtb	r1, r3
 8013c6e:	2909      	cmp	r1, #9
 8013c70:	d929      	bls.n	8013cc6 <_strtod_l+0x1a6>
 8013c72:	4622      	mov	r2, r4
 8013c74:	f8d8 1000 	ldr.w	r1, [r8]
 8013c78:	f003 fd5a 	bl	8017730 <strncmp>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d031      	beq.n	8013ce4 <_strtod_l+0x1c4>
 8013c80:	2000      	movs	r0, #0
 8013c82:	9c05      	ldr	r4, [sp, #20]
 8013c84:	9004      	str	r0, [sp, #16]
 8013c86:	463b      	mov	r3, r7
 8013c88:	4602      	mov	r2, r0
 8013c8a:	2b65      	cmp	r3, #101	; 0x65
 8013c8c:	d001      	beq.n	8013c92 <_strtod_l+0x172>
 8013c8e:	2b45      	cmp	r3, #69	; 0x45
 8013c90:	d114      	bne.n	8013cbc <_strtod_l+0x19c>
 8013c92:	b924      	cbnz	r4, 8013c9e <_strtod_l+0x17e>
 8013c94:	b910      	cbnz	r0, 8013c9c <_strtod_l+0x17c>
 8013c96:	9b06      	ldr	r3, [sp, #24]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d09e      	beq.n	8013bda <_strtod_l+0xba>
 8013c9c:	2400      	movs	r4, #0
 8013c9e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8013ca0:	1c73      	adds	r3, r6, #1
 8013ca2:	931b      	str	r3, [sp, #108]	; 0x6c
 8013ca4:	7873      	ldrb	r3, [r6, #1]
 8013ca6:	2b2b      	cmp	r3, #43	; 0x2b
 8013ca8:	d078      	beq.n	8013d9c <_strtod_l+0x27c>
 8013caa:	2b2d      	cmp	r3, #45	; 0x2d
 8013cac:	d070      	beq.n	8013d90 <_strtod_l+0x270>
 8013cae:	f04f 0c00 	mov.w	ip, #0
 8013cb2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8013cb6:	2f09      	cmp	r7, #9
 8013cb8:	d97c      	bls.n	8013db4 <_strtod_l+0x294>
 8013cba:	961b      	str	r6, [sp, #108]	; 0x6c
 8013cbc:	f04f 0e00 	mov.w	lr, #0
 8013cc0:	e09a      	b.n	8013df8 <_strtod_l+0x2d8>
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	e7c7      	b.n	8013c56 <_strtod_l+0x136>
 8013cc6:	9905      	ldr	r1, [sp, #20]
 8013cc8:	2908      	cmp	r1, #8
 8013cca:	bfdd      	ittte	le
 8013ccc:	9907      	ldrle	r1, [sp, #28]
 8013cce:	fb02 3301 	mlale	r3, r2, r1, r3
 8013cd2:	9307      	strle	r3, [sp, #28]
 8013cd4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8013cd8:	9b05      	ldr	r3, [sp, #20]
 8013cda:	3001      	adds	r0, #1
 8013cdc:	3301      	adds	r3, #1
 8013cde:	9305      	str	r3, [sp, #20]
 8013ce0:	901b      	str	r0, [sp, #108]	; 0x6c
 8013ce2:	e7bf      	b.n	8013c64 <_strtod_l+0x144>
 8013ce4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013ce6:	191a      	adds	r2, r3, r4
 8013ce8:	921b      	str	r2, [sp, #108]	; 0x6c
 8013cea:	9a05      	ldr	r2, [sp, #20]
 8013cec:	5d1b      	ldrb	r3, [r3, r4]
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	d037      	beq.n	8013d62 <_strtod_l+0x242>
 8013cf2:	9c05      	ldr	r4, [sp, #20]
 8013cf4:	4602      	mov	r2, r0
 8013cf6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013cfa:	2909      	cmp	r1, #9
 8013cfc:	d913      	bls.n	8013d26 <_strtod_l+0x206>
 8013cfe:	2101      	movs	r1, #1
 8013d00:	9104      	str	r1, [sp, #16]
 8013d02:	e7c2      	b.n	8013c8a <_strtod_l+0x16a>
 8013d04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d06:	1c5a      	adds	r2, r3, #1
 8013d08:	921b      	str	r2, [sp, #108]	; 0x6c
 8013d0a:	785b      	ldrb	r3, [r3, #1]
 8013d0c:	3001      	adds	r0, #1
 8013d0e:	2b30      	cmp	r3, #48	; 0x30
 8013d10:	d0f8      	beq.n	8013d04 <_strtod_l+0x1e4>
 8013d12:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8013d16:	2a08      	cmp	r2, #8
 8013d18:	f200 84e4 	bhi.w	80146e4 <_strtod_l+0xbc4>
 8013d1c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8013d1e:	9208      	str	r2, [sp, #32]
 8013d20:	4602      	mov	r2, r0
 8013d22:	2000      	movs	r0, #0
 8013d24:	4604      	mov	r4, r0
 8013d26:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8013d2a:	f100 0101 	add.w	r1, r0, #1
 8013d2e:	d012      	beq.n	8013d56 <_strtod_l+0x236>
 8013d30:	440a      	add	r2, r1
 8013d32:	eb00 0c04 	add.w	ip, r0, r4
 8013d36:	4621      	mov	r1, r4
 8013d38:	270a      	movs	r7, #10
 8013d3a:	458c      	cmp	ip, r1
 8013d3c:	d113      	bne.n	8013d66 <_strtod_l+0x246>
 8013d3e:	1821      	adds	r1, r4, r0
 8013d40:	2908      	cmp	r1, #8
 8013d42:	f104 0401 	add.w	r4, r4, #1
 8013d46:	4404      	add	r4, r0
 8013d48:	dc19      	bgt.n	8013d7e <_strtod_l+0x25e>
 8013d4a:	9b07      	ldr	r3, [sp, #28]
 8013d4c:	210a      	movs	r1, #10
 8013d4e:	fb01 e303 	mla	r3, r1, r3, lr
 8013d52:	9307      	str	r3, [sp, #28]
 8013d54:	2100      	movs	r1, #0
 8013d56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013d58:	1c58      	adds	r0, r3, #1
 8013d5a:	901b      	str	r0, [sp, #108]	; 0x6c
 8013d5c:	785b      	ldrb	r3, [r3, #1]
 8013d5e:	4608      	mov	r0, r1
 8013d60:	e7c9      	b.n	8013cf6 <_strtod_l+0x1d6>
 8013d62:	9805      	ldr	r0, [sp, #20]
 8013d64:	e7d3      	b.n	8013d0e <_strtod_l+0x1ee>
 8013d66:	2908      	cmp	r1, #8
 8013d68:	f101 0101 	add.w	r1, r1, #1
 8013d6c:	dc03      	bgt.n	8013d76 <_strtod_l+0x256>
 8013d6e:	9b07      	ldr	r3, [sp, #28]
 8013d70:	437b      	muls	r3, r7
 8013d72:	9307      	str	r3, [sp, #28]
 8013d74:	e7e1      	b.n	8013d3a <_strtod_l+0x21a>
 8013d76:	2910      	cmp	r1, #16
 8013d78:	bfd8      	it	le
 8013d7a:	437d      	mulle	r5, r7
 8013d7c:	e7dd      	b.n	8013d3a <_strtod_l+0x21a>
 8013d7e:	2c10      	cmp	r4, #16
 8013d80:	bfdc      	itt	le
 8013d82:	210a      	movle	r1, #10
 8013d84:	fb01 e505 	mlale	r5, r1, r5, lr
 8013d88:	e7e4      	b.n	8013d54 <_strtod_l+0x234>
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	9304      	str	r3, [sp, #16]
 8013d8e:	e781      	b.n	8013c94 <_strtod_l+0x174>
 8013d90:	f04f 0c01 	mov.w	ip, #1
 8013d94:	1cb3      	adds	r3, r6, #2
 8013d96:	931b      	str	r3, [sp, #108]	; 0x6c
 8013d98:	78b3      	ldrb	r3, [r6, #2]
 8013d9a:	e78a      	b.n	8013cb2 <_strtod_l+0x192>
 8013d9c:	f04f 0c00 	mov.w	ip, #0
 8013da0:	e7f8      	b.n	8013d94 <_strtod_l+0x274>
 8013da2:	bf00      	nop
 8013da4:	0801828c 	.word	0x0801828c
 8013da8:	7ff00000 	.word	0x7ff00000
 8013dac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dae:	1c5f      	adds	r7, r3, #1
 8013db0:	971b      	str	r7, [sp, #108]	; 0x6c
 8013db2:	785b      	ldrb	r3, [r3, #1]
 8013db4:	2b30      	cmp	r3, #48	; 0x30
 8013db6:	d0f9      	beq.n	8013dac <_strtod_l+0x28c>
 8013db8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8013dbc:	2f08      	cmp	r7, #8
 8013dbe:	f63f af7d 	bhi.w	8013cbc <_strtod_l+0x19c>
 8013dc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8013dc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dc8:	930a      	str	r3, [sp, #40]	; 0x28
 8013dca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013dcc:	1c5f      	adds	r7, r3, #1
 8013dce:	971b      	str	r7, [sp, #108]	; 0x6c
 8013dd0:	785b      	ldrb	r3, [r3, #1]
 8013dd2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8013dd6:	f1b8 0f09 	cmp.w	r8, #9
 8013dda:	d937      	bls.n	8013e4c <_strtod_l+0x32c>
 8013ddc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8013dde:	1a7f      	subs	r7, r7, r1
 8013de0:	2f08      	cmp	r7, #8
 8013de2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8013de6:	dc37      	bgt.n	8013e58 <_strtod_l+0x338>
 8013de8:	45be      	cmp	lr, r7
 8013dea:	bfa8      	it	ge
 8013dec:	46be      	movge	lr, r7
 8013dee:	f1bc 0f00 	cmp.w	ip, #0
 8013df2:	d001      	beq.n	8013df8 <_strtod_l+0x2d8>
 8013df4:	f1ce 0e00 	rsb	lr, lr, #0
 8013df8:	2c00      	cmp	r4, #0
 8013dfa:	d151      	bne.n	8013ea0 <_strtod_l+0x380>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	f47f aece 	bne.w	8013b9e <_strtod_l+0x7e>
 8013e02:	9a06      	ldr	r2, [sp, #24]
 8013e04:	2a00      	cmp	r2, #0
 8013e06:	f47f aeca 	bne.w	8013b9e <_strtod_l+0x7e>
 8013e0a:	9a04      	ldr	r2, [sp, #16]
 8013e0c:	2a00      	cmp	r2, #0
 8013e0e:	f47f aee4 	bne.w	8013bda <_strtod_l+0xba>
 8013e12:	2b4e      	cmp	r3, #78	; 0x4e
 8013e14:	d027      	beq.n	8013e66 <_strtod_l+0x346>
 8013e16:	dc21      	bgt.n	8013e5c <_strtod_l+0x33c>
 8013e18:	2b49      	cmp	r3, #73	; 0x49
 8013e1a:	f47f aede 	bne.w	8013bda <_strtod_l+0xba>
 8013e1e:	49a0      	ldr	r1, [pc, #640]	; (80140a0 <_strtod_l+0x580>)
 8013e20:	a81b      	add	r0, sp, #108	; 0x6c
 8013e22:	f002 f851 	bl	8015ec8 <__match>
 8013e26:	2800      	cmp	r0, #0
 8013e28:	f43f aed7 	beq.w	8013bda <_strtod_l+0xba>
 8013e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e2e:	499d      	ldr	r1, [pc, #628]	; (80140a4 <_strtod_l+0x584>)
 8013e30:	3b01      	subs	r3, #1
 8013e32:	a81b      	add	r0, sp, #108	; 0x6c
 8013e34:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e36:	f002 f847 	bl	8015ec8 <__match>
 8013e3a:	b910      	cbnz	r0, 8013e42 <_strtod_l+0x322>
 8013e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e3e:	3301      	adds	r3, #1
 8013e40:	931b      	str	r3, [sp, #108]	; 0x6c
 8013e42:	f8df b274 	ldr.w	fp, [pc, #628]	; 80140b8 <_strtod_l+0x598>
 8013e46:	f04f 0a00 	mov.w	sl, #0
 8013e4a:	e6a8      	b.n	8013b9e <_strtod_l+0x7e>
 8013e4c:	210a      	movs	r1, #10
 8013e4e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013e52:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013e56:	e7b8      	b.n	8013dca <_strtod_l+0x2aa>
 8013e58:	46be      	mov	lr, r7
 8013e5a:	e7c8      	b.n	8013dee <_strtod_l+0x2ce>
 8013e5c:	2b69      	cmp	r3, #105	; 0x69
 8013e5e:	d0de      	beq.n	8013e1e <_strtod_l+0x2fe>
 8013e60:	2b6e      	cmp	r3, #110	; 0x6e
 8013e62:	f47f aeba 	bne.w	8013bda <_strtod_l+0xba>
 8013e66:	4990      	ldr	r1, [pc, #576]	; (80140a8 <_strtod_l+0x588>)
 8013e68:	a81b      	add	r0, sp, #108	; 0x6c
 8013e6a:	f002 f82d 	bl	8015ec8 <__match>
 8013e6e:	2800      	cmp	r0, #0
 8013e70:	f43f aeb3 	beq.w	8013bda <_strtod_l+0xba>
 8013e74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	2b28      	cmp	r3, #40	; 0x28
 8013e7a:	d10e      	bne.n	8013e9a <_strtod_l+0x37a>
 8013e7c:	aa1e      	add	r2, sp, #120	; 0x78
 8013e7e:	498b      	ldr	r1, [pc, #556]	; (80140ac <_strtod_l+0x58c>)
 8013e80:	a81b      	add	r0, sp, #108	; 0x6c
 8013e82:	f002 f835 	bl	8015ef0 <__hexnan>
 8013e86:	2805      	cmp	r0, #5
 8013e88:	d107      	bne.n	8013e9a <_strtod_l+0x37a>
 8013e8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8013e8c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013e90:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013e94:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013e98:	e681      	b.n	8013b9e <_strtod_l+0x7e>
 8013e9a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80140c0 <_strtod_l+0x5a0>
 8013e9e:	e7d2      	b.n	8013e46 <_strtod_l+0x326>
 8013ea0:	ebae 0302 	sub.w	r3, lr, r2
 8013ea4:	9306      	str	r3, [sp, #24]
 8013ea6:	9b05      	ldr	r3, [sp, #20]
 8013ea8:	9807      	ldr	r0, [sp, #28]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	bf08      	it	eq
 8013eae:	4623      	moveq	r3, r4
 8013eb0:	2c10      	cmp	r4, #16
 8013eb2:	9305      	str	r3, [sp, #20]
 8013eb4:	46a0      	mov	r8, r4
 8013eb6:	bfa8      	it	ge
 8013eb8:	f04f 0810 	movge.w	r8, #16
 8013ebc:	f7ec fb3a 	bl	8000534 <__aeabi_ui2d>
 8013ec0:	2c09      	cmp	r4, #9
 8013ec2:	4682      	mov	sl, r0
 8013ec4:	468b      	mov	fp, r1
 8013ec6:	dc13      	bgt.n	8013ef0 <_strtod_l+0x3d0>
 8013ec8:	9b06      	ldr	r3, [sp, #24]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	f43f ae67 	beq.w	8013b9e <_strtod_l+0x7e>
 8013ed0:	9b06      	ldr	r3, [sp, #24]
 8013ed2:	dd7a      	ble.n	8013fca <_strtod_l+0x4aa>
 8013ed4:	2b16      	cmp	r3, #22
 8013ed6:	dc61      	bgt.n	8013f9c <_strtod_l+0x47c>
 8013ed8:	4a75      	ldr	r2, [pc, #468]	; (80140b0 <_strtod_l+0x590>)
 8013eda:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8013ede:	e9de 0100 	ldrd	r0, r1, [lr]
 8013ee2:	4652      	mov	r2, sl
 8013ee4:	465b      	mov	r3, fp
 8013ee6:	f7ec fb9f 	bl	8000628 <__aeabi_dmul>
 8013eea:	4682      	mov	sl, r0
 8013eec:	468b      	mov	fp, r1
 8013eee:	e656      	b.n	8013b9e <_strtod_l+0x7e>
 8013ef0:	4b6f      	ldr	r3, [pc, #444]	; (80140b0 <_strtod_l+0x590>)
 8013ef2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013ef6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013efa:	f7ec fb95 	bl	8000628 <__aeabi_dmul>
 8013efe:	4606      	mov	r6, r0
 8013f00:	4628      	mov	r0, r5
 8013f02:	460f      	mov	r7, r1
 8013f04:	f7ec fb16 	bl	8000534 <__aeabi_ui2d>
 8013f08:	4602      	mov	r2, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	4630      	mov	r0, r6
 8013f0e:	4639      	mov	r1, r7
 8013f10:	f7ec f9d4 	bl	80002bc <__adddf3>
 8013f14:	2c0f      	cmp	r4, #15
 8013f16:	4682      	mov	sl, r0
 8013f18:	468b      	mov	fp, r1
 8013f1a:	ddd5      	ble.n	8013ec8 <_strtod_l+0x3a8>
 8013f1c:	9b06      	ldr	r3, [sp, #24]
 8013f1e:	eba4 0808 	sub.w	r8, r4, r8
 8013f22:	4498      	add	r8, r3
 8013f24:	f1b8 0f00 	cmp.w	r8, #0
 8013f28:	f340 8096 	ble.w	8014058 <_strtod_l+0x538>
 8013f2c:	f018 030f 	ands.w	r3, r8, #15
 8013f30:	d00a      	beq.n	8013f48 <_strtod_l+0x428>
 8013f32:	495f      	ldr	r1, [pc, #380]	; (80140b0 <_strtod_l+0x590>)
 8013f34:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013f38:	4652      	mov	r2, sl
 8013f3a:	465b      	mov	r3, fp
 8013f3c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013f40:	f7ec fb72 	bl	8000628 <__aeabi_dmul>
 8013f44:	4682      	mov	sl, r0
 8013f46:	468b      	mov	fp, r1
 8013f48:	f038 080f 	bics.w	r8, r8, #15
 8013f4c:	d073      	beq.n	8014036 <_strtod_l+0x516>
 8013f4e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013f52:	dd47      	ble.n	8013fe4 <_strtod_l+0x4c4>
 8013f54:	2400      	movs	r4, #0
 8013f56:	46a0      	mov	r8, r4
 8013f58:	9407      	str	r4, [sp, #28]
 8013f5a:	9405      	str	r4, [sp, #20]
 8013f5c:	2322      	movs	r3, #34	; 0x22
 8013f5e:	f8df b158 	ldr.w	fp, [pc, #344]	; 80140b8 <_strtod_l+0x598>
 8013f62:	f8c9 3000 	str.w	r3, [r9]
 8013f66:	f04f 0a00 	mov.w	sl, #0
 8013f6a:	9b07      	ldr	r3, [sp, #28]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f43f ae16 	beq.w	8013b9e <_strtod_l+0x7e>
 8013f72:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013f74:	4648      	mov	r0, r9
 8013f76:	f002 f93c 	bl	80161f2 <_Bfree>
 8013f7a:	9905      	ldr	r1, [sp, #20]
 8013f7c:	4648      	mov	r0, r9
 8013f7e:	f002 f938 	bl	80161f2 <_Bfree>
 8013f82:	4641      	mov	r1, r8
 8013f84:	4648      	mov	r0, r9
 8013f86:	f002 f934 	bl	80161f2 <_Bfree>
 8013f8a:	9907      	ldr	r1, [sp, #28]
 8013f8c:	4648      	mov	r0, r9
 8013f8e:	f002 f930 	bl	80161f2 <_Bfree>
 8013f92:	4621      	mov	r1, r4
 8013f94:	4648      	mov	r0, r9
 8013f96:	f002 f92c 	bl	80161f2 <_Bfree>
 8013f9a:	e600      	b.n	8013b9e <_strtod_l+0x7e>
 8013f9c:	9a06      	ldr	r2, [sp, #24]
 8013f9e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013fa2:	4293      	cmp	r3, r2
 8013fa4:	dbba      	blt.n	8013f1c <_strtod_l+0x3fc>
 8013fa6:	4d42      	ldr	r5, [pc, #264]	; (80140b0 <_strtod_l+0x590>)
 8013fa8:	f1c4 040f 	rsb	r4, r4, #15
 8013fac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013fb0:	4652      	mov	r2, sl
 8013fb2:	465b      	mov	r3, fp
 8013fb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fb8:	f7ec fb36 	bl	8000628 <__aeabi_dmul>
 8013fbc:	9b06      	ldr	r3, [sp, #24]
 8013fbe:	1b1c      	subs	r4, r3, r4
 8013fc0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8013fc4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8013fc8:	e78d      	b.n	8013ee6 <_strtod_l+0x3c6>
 8013fca:	f113 0f16 	cmn.w	r3, #22
 8013fce:	dba5      	blt.n	8013f1c <_strtod_l+0x3fc>
 8013fd0:	4a37      	ldr	r2, [pc, #220]	; (80140b0 <_strtod_l+0x590>)
 8013fd2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8013fd6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8013fda:	4650      	mov	r0, sl
 8013fdc:	4659      	mov	r1, fp
 8013fde:	f7ec fc4d 	bl	800087c <__aeabi_ddiv>
 8013fe2:	e782      	b.n	8013eea <_strtod_l+0x3ca>
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	4e33      	ldr	r6, [pc, #204]	; (80140b4 <_strtod_l+0x594>)
 8013fe8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013fec:	4650      	mov	r0, sl
 8013fee:	4659      	mov	r1, fp
 8013ff0:	461d      	mov	r5, r3
 8013ff2:	f1b8 0f01 	cmp.w	r8, #1
 8013ff6:	dc21      	bgt.n	801403c <_strtod_l+0x51c>
 8013ff8:	b10b      	cbz	r3, 8013ffe <_strtod_l+0x4de>
 8013ffa:	4682      	mov	sl, r0
 8013ffc:	468b      	mov	fp, r1
 8013ffe:	4b2d      	ldr	r3, [pc, #180]	; (80140b4 <_strtod_l+0x594>)
 8014000:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8014004:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8014008:	4652      	mov	r2, sl
 801400a:	465b      	mov	r3, fp
 801400c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014010:	f7ec fb0a 	bl	8000628 <__aeabi_dmul>
 8014014:	4b28      	ldr	r3, [pc, #160]	; (80140b8 <_strtod_l+0x598>)
 8014016:	460a      	mov	r2, r1
 8014018:	400b      	ands	r3, r1
 801401a:	4928      	ldr	r1, [pc, #160]	; (80140bc <_strtod_l+0x59c>)
 801401c:	428b      	cmp	r3, r1
 801401e:	4682      	mov	sl, r0
 8014020:	d898      	bhi.n	8013f54 <_strtod_l+0x434>
 8014022:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8014026:	428b      	cmp	r3, r1
 8014028:	bf86      	itte	hi
 801402a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80140c4 <_strtod_l+0x5a4>
 801402e:	f04f 3aff 	movhi.w	sl, #4294967295
 8014032:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8014036:	2300      	movs	r3, #0
 8014038:	9304      	str	r3, [sp, #16]
 801403a:	e077      	b.n	801412c <_strtod_l+0x60c>
 801403c:	f018 0f01 	tst.w	r8, #1
 8014040:	d006      	beq.n	8014050 <_strtod_l+0x530>
 8014042:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8014046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404a:	f7ec faed 	bl	8000628 <__aeabi_dmul>
 801404e:	2301      	movs	r3, #1
 8014050:	3501      	adds	r5, #1
 8014052:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014056:	e7cc      	b.n	8013ff2 <_strtod_l+0x4d2>
 8014058:	d0ed      	beq.n	8014036 <_strtod_l+0x516>
 801405a:	f1c8 0800 	rsb	r8, r8, #0
 801405e:	f018 020f 	ands.w	r2, r8, #15
 8014062:	d00a      	beq.n	801407a <_strtod_l+0x55a>
 8014064:	4b12      	ldr	r3, [pc, #72]	; (80140b0 <_strtod_l+0x590>)
 8014066:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801406a:	4650      	mov	r0, sl
 801406c:	4659      	mov	r1, fp
 801406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014072:	f7ec fc03 	bl	800087c <__aeabi_ddiv>
 8014076:	4682      	mov	sl, r0
 8014078:	468b      	mov	fp, r1
 801407a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801407e:	d0da      	beq.n	8014036 <_strtod_l+0x516>
 8014080:	f1b8 0f1f 	cmp.w	r8, #31
 8014084:	dd20      	ble.n	80140c8 <_strtod_l+0x5a8>
 8014086:	2400      	movs	r4, #0
 8014088:	46a0      	mov	r8, r4
 801408a:	9407      	str	r4, [sp, #28]
 801408c:	9405      	str	r4, [sp, #20]
 801408e:	2322      	movs	r3, #34	; 0x22
 8014090:	f04f 0a00 	mov.w	sl, #0
 8014094:	f04f 0b00 	mov.w	fp, #0
 8014098:	f8c9 3000 	str.w	r3, [r9]
 801409c:	e765      	b.n	8013f6a <_strtod_l+0x44a>
 801409e:	bf00      	nop
 80140a0:	08018259 	.word	0x08018259
 80140a4:	080182e3 	.word	0x080182e3
 80140a8:	08018261 	.word	0x08018261
 80140ac:	080182a0 	.word	0x080182a0
 80140b0:	08018388 	.word	0x08018388
 80140b4:	08018360 	.word	0x08018360
 80140b8:	7ff00000 	.word	0x7ff00000
 80140bc:	7ca00000 	.word	0x7ca00000
 80140c0:	fff80000 	.word	0xfff80000
 80140c4:	7fefffff 	.word	0x7fefffff
 80140c8:	f018 0310 	ands.w	r3, r8, #16
 80140cc:	bf18      	it	ne
 80140ce:	236a      	movne	r3, #106	; 0x6a
 80140d0:	4da0      	ldr	r5, [pc, #640]	; (8014354 <_strtod_l+0x834>)
 80140d2:	9304      	str	r3, [sp, #16]
 80140d4:	4650      	mov	r0, sl
 80140d6:	4659      	mov	r1, fp
 80140d8:	2300      	movs	r3, #0
 80140da:	f1b8 0f00 	cmp.w	r8, #0
 80140de:	f300 810a 	bgt.w	80142f6 <_strtod_l+0x7d6>
 80140e2:	b10b      	cbz	r3, 80140e8 <_strtod_l+0x5c8>
 80140e4:	4682      	mov	sl, r0
 80140e6:	468b      	mov	fp, r1
 80140e8:	9b04      	ldr	r3, [sp, #16]
 80140ea:	b1bb      	cbz	r3, 801411c <_strtod_l+0x5fc>
 80140ec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80140f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	4659      	mov	r1, fp
 80140f8:	dd10      	ble.n	801411c <_strtod_l+0x5fc>
 80140fa:	2b1f      	cmp	r3, #31
 80140fc:	f340 8107 	ble.w	801430e <_strtod_l+0x7ee>
 8014100:	2b34      	cmp	r3, #52	; 0x34
 8014102:	bfde      	ittt	le
 8014104:	3b20      	suble	r3, #32
 8014106:	f04f 32ff 	movle.w	r2, #4294967295
 801410a:	fa02 f303 	lslle.w	r3, r2, r3
 801410e:	f04f 0a00 	mov.w	sl, #0
 8014112:	bfcc      	ite	gt
 8014114:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8014118:	ea03 0b01 	andle.w	fp, r3, r1
 801411c:	2200      	movs	r2, #0
 801411e:	2300      	movs	r3, #0
 8014120:	4650      	mov	r0, sl
 8014122:	4659      	mov	r1, fp
 8014124:	f7ec fce8 	bl	8000af8 <__aeabi_dcmpeq>
 8014128:	2800      	cmp	r0, #0
 801412a:	d1ac      	bne.n	8014086 <_strtod_l+0x566>
 801412c:	9b07      	ldr	r3, [sp, #28]
 801412e:	9300      	str	r3, [sp, #0]
 8014130:	9a05      	ldr	r2, [sp, #20]
 8014132:	9908      	ldr	r1, [sp, #32]
 8014134:	4623      	mov	r3, r4
 8014136:	4648      	mov	r0, r9
 8014138:	f002 f8ad 	bl	8016296 <__s2b>
 801413c:	9007      	str	r0, [sp, #28]
 801413e:	2800      	cmp	r0, #0
 8014140:	f43f af08 	beq.w	8013f54 <_strtod_l+0x434>
 8014144:	9a06      	ldr	r2, [sp, #24]
 8014146:	9b06      	ldr	r3, [sp, #24]
 8014148:	2a00      	cmp	r2, #0
 801414a:	f1c3 0300 	rsb	r3, r3, #0
 801414e:	bfa8      	it	ge
 8014150:	2300      	movge	r3, #0
 8014152:	930e      	str	r3, [sp, #56]	; 0x38
 8014154:	2400      	movs	r4, #0
 8014156:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801415a:	9316      	str	r3, [sp, #88]	; 0x58
 801415c:	46a0      	mov	r8, r4
 801415e:	9b07      	ldr	r3, [sp, #28]
 8014160:	4648      	mov	r0, r9
 8014162:	6859      	ldr	r1, [r3, #4]
 8014164:	f002 f811 	bl	801618a <_Balloc>
 8014168:	9005      	str	r0, [sp, #20]
 801416a:	2800      	cmp	r0, #0
 801416c:	f43f aef6 	beq.w	8013f5c <_strtod_l+0x43c>
 8014170:	9b07      	ldr	r3, [sp, #28]
 8014172:	691a      	ldr	r2, [r3, #16]
 8014174:	3202      	adds	r2, #2
 8014176:	f103 010c 	add.w	r1, r3, #12
 801417a:	0092      	lsls	r2, r2, #2
 801417c:	300c      	adds	r0, #12
 801417e:	f001 fff9 	bl	8016174 <memcpy>
 8014182:	aa1e      	add	r2, sp, #120	; 0x78
 8014184:	a91d      	add	r1, sp, #116	; 0x74
 8014186:	ec4b ab10 	vmov	d0, sl, fp
 801418a:	4648      	mov	r0, r9
 801418c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014190:	f002 fb3c 	bl	801680c <__d2b>
 8014194:	901c      	str	r0, [sp, #112]	; 0x70
 8014196:	2800      	cmp	r0, #0
 8014198:	f43f aee0 	beq.w	8013f5c <_strtod_l+0x43c>
 801419c:	2101      	movs	r1, #1
 801419e:	4648      	mov	r0, r9
 80141a0:	f002 f905 	bl	80163ae <__i2b>
 80141a4:	4680      	mov	r8, r0
 80141a6:	2800      	cmp	r0, #0
 80141a8:	f43f aed8 	beq.w	8013f5c <_strtod_l+0x43c>
 80141ac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80141ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80141b0:	2e00      	cmp	r6, #0
 80141b2:	bfab      	itete	ge
 80141b4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80141b6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80141b8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80141ba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80141bc:	bfac      	ite	ge
 80141be:	18f7      	addge	r7, r6, r3
 80141c0:	1b9d      	sublt	r5, r3, r6
 80141c2:	9b04      	ldr	r3, [sp, #16]
 80141c4:	1af6      	subs	r6, r6, r3
 80141c6:	4416      	add	r6, r2
 80141c8:	4b63      	ldr	r3, [pc, #396]	; (8014358 <_strtod_l+0x838>)
 80141ca:	3e01      	subs	r6, #1
 80141cc:	429e      	cmp	r6, r3
 80141ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80141d2:	f280 80af 	bge.w	8014334 <_strtod_l+0x814>
 80141d6:	1b9b      	subs	r3, r3, r6
 80141d8:	2b1f      	cmp	r3, #31
 80141da:	eba2 0203 	sub.w	r2, r2, r3
 80141de:	f04f 0101 	mov.w	r1, #1
 80141e2:	f300 809b 	bgt.w	801431c <_strtod_l+0x7fc>
 80141e6:	fa01 f303 	lsl.w	r3, r1, r3
 80141ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80141ec:	2300      	movs	r3, #0
 80141ee:	930a      	str	r3, [sp, #40]	; 0x28
 80141f0:	18be      	adds	r6, r7, r2
 80141f2:	9b04      	ldr	r3, [sp, #16]
 80141f4:	42b7      	cmp	r7, r6
 80141f6:	4415      	add	r5, r2
 80141f8:	441d      	add	r5, r3
 80141fa:	463b      	mov	r3, r7
 80141fc:	bfa8      	it	ge
 80141fe:	4633      	movge	r3, r6
 8014200:	42ab      	cmp	r3, r5
 8014202:	bfa8      	it	ge
 8014204:	462b      	movge	r3, r5
 8014206:	2b00      	cmp	r3, #0
 8014208:	bfc2      	ittt	gt
 801420a:	1af6      	subgt	r6, r6, r3
 801420c:	1aed      	subgt	r5, r5, r3
 801420e:	1aff      	subgt	r7, r7, r3
 8014210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014212:	b1bb      	cbz	r3, 8014244 <_strtod_l+0x724>
 8014214:	4641      	mov	r1, r8
 8014216:	461a      	mov	r2, r3
 8014218:	4648      	mov	r0, r9
 801421a:	f002 f967 	bl	80164ec <__pow5mult>
 801421e:	4680      	mov	r8, r0
 8014220:	2800      	cmp	r0, #0
 8014222:	f43f ae9b 	beq.w	8013f5c <_strtod_l+0x43c>
 8014226:	4601      	mov	r1, r0
 8014228:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801422a:	4648      	mov	r0, r9
 801422c:	f002 f8c8 	bl	80163c0 <__multiply>
 8014230:	900c      	str	r0, [sp, #48]	; 0x30
 8014232:	2800      	cmp	r0, #0
 8014234:	f43f ae92 	beq.w	8013f5c <_strtod_l+0x43c>
 8014238:	991c      	ldr	r1, [sp, #112]	; 0x70
 801423a:	4648      	mov	r0, r9
 801423c:	f001 ffd9 	bl	80161f2 <_Bfree>
 8014240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014242:	931c      	str	r3, [sp, #112]	; 0x70
 8014244:	2e00      	cmp	r6, #0
 8014246:	dc7a      	bgt.n	801433e <_strtod_l+0x81e>
 8014248:	9b06      	ldr	r3, [sp, #24]
 801424a:	2b00      	cmp	r3, #0
 801424c:	dd08      	ble.n	8014260 <_strtod_l+0x740>
 801424e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8014250:	9905      	ldr	r1, [sp, #20]
 8014252:	4648      	mov	r0, r9
 8014254:	f002 f94a 	bl	80164ec <__pow5mult>
 8014258:	9005      	str	r0, [sp, #20]
 801425a:	2800      	cmp	r0, #0
 801425c:	f43f ae7e 	beq.w	8013f5c <_strtod_l+0x43c>
 8014260:	2d00      	cmp	r5, #0
 8014262:	dd08      	ble.n	8014276 <_strtod_l+0x756>
 8014264:	462a      	mov	r2, r5
 8014266:	9905      	ldr	r1, [sp, #20]
 8014268:	4648      	mov	r0, r9
 801426a:	f002 f98d 	bl	8016588 <__lshift>
 801426e:	9005      	str	r0, [sp, #20]
 8014270:	2800      	cmp	r0, #0
 8014272:	f43f ae73 	beq.w	8013f5c <_strtod_l+0x43c>
 8014276:	2f00      	cmp	r7, #0
 8014278:	dd08      	ble.n	801428c <_strtod_l+0x76c>
 801427a:	4641      	mov	r1, r8
 801427c:	463a      	mov	r2, r7
 801427e:	4648      	mov	r0, r9
 8014280:	f002 f982 	bl	8016588 <__lshift>
 8014284:	4680      	mov	r8, r0
 8014286:	2800      	cmp	r0, #0
 8014288:	f43f ae68 	beq.w	8013f5c <_strtod_l+0x43c>
 801428c:	9a05      	ldr	r2, [sp, #20]
 801428e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014290:	4648      	mov	r0, r9
 8014292:	f002 f9e7 	bl	8016664 <__mdiff>
 8014296:	4604      	mov	r4, r0
 8014298:	2800      	cmp	r0, #0
 801429a:	f43f ae5f 	beq.w	8013f5c <_strtod_l+0x43c>
 801429e:	68c3      	ldr	r3, [r0, #12]
 80142a0:	930c      	str	r3, [sp, #48]	; 0x30
 80142a2:	2300      	movs	r3, #0
 80142a4:	60c3      	str	r3, [r0, #12]
 80142a6:	4641      	mov	r1, r8
 80142a8:	f002 f9c2 	bl	8016630 <__mcmp>
 80142ac:	2800      	cmp	r0, #0
 80142ae:	da55      	bge.n	801435c <_strtod_l+0x83c>
 80142b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80142b2:	b9e3      	cbnz	r3, 80142ee <_strtod_l+0x7ce>
 80142b4:	f1ba 0f00 	cmp.w	sl, #0
 80142b8:	d119      	bne.n	80142ee <_strtod_l+0x7ce>
 80142ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80142be:	b9b3      	cbnz	r3, 80142ee <_strtod_l+0x7ce>
 80142c0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80142c4:	0d1b      	lsrs	r3, r3, #20
 80142c6:	051b      	lsls	r3, r3, #20
 80142c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80142cc:	d90f      	bls.n	80142ee <_strtod_l+0x7ce>
 80142ce:	6963      	ldr	r3, [r4, #20]
 80142d0:	b913      	cbnz	r3, 80142d8 <_strtod_l+0x7b8>
 80142d2:	6923      	ldr	r3, [r4, #16]
 80142d4:	2b01      	cmp	r3, #1
 80142d6:	dd0a      	ble.n	80142ee <_strtod_l+0x7ce>
 80142d8:	4621      	mov	r1, r4
 80142da:	2201      	movs	r2, #1
 80142dc:	4648      	mov	r0, r9
 80142de:	f002 f953 	bl	8016588 <__lshift>
 80142e2:	4641      	mov	r1, r8
 80142e4:	4604      	mov	r4, r0
 80142e6:	f002 f9a3 	bl	8016630 <__mcmp>
 80142ea:	2800      	cmp	r0, #0
 80142ec:	dc67      	bgt.n	80143be <_strtod_l+0x89e>
 80142ee:	9b04      	ldr	r3, [sp, #16]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d171      	bne.n	80143d8 <_strtod_l+0x8b8>
 80142f4:	e63d      	b.n	8013f72 <_strtod_l+0x452>
 80142f6:	f018 0f01 	tst.w	r8, #1
 80142fa:	d004      	beq.n	8014306 <_strtod_l+0x7e6>
 80142fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014300:	f7ec f992 	bl	8000628 <__aeabi_dmul>
 8014304:	2301      	movs	r3, #1
 8014306:	ea4f 0868 	mov.w	r8, r8, asr #1
 801430a:	3508      	adds	r5, #8
 801430c:	e6e5      	b.n	80140da <_strtod_l+0x5ba>
 801430e:	f04f 32ff 	mov.w	r2, #4294967295
 8014312:	fa02 f303 	lsl.w	r3, r2, r3
 8014316:	ea03 0a0a 	and.w	sl, r3, sl
 801431a:	e6ff      	b.n	801411c <_strtod_l+0x5fc>
 801431c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8014320:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8014324:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8014328:	36e2      	adds	r6, #226	; 0xe2
 801432a:	fa01 f306 	lsl.w	r3, r1, r6
 801432e:	930a      	str	r3, [sp, #40]	; 0x28
 8014330:	910f      	str	r1, [sp, #60]	; 0x3c
 8014332:	e75d      	b.n	80141f0 <_strtod_l+0x6d0>
 8014334:	2300      	movs	r3, #0
 8014336:	930a      	str	r3, [sp, #40]	; 0x28
 8014338:	2301      	movs	r3, #1
 801433a:	930f      	str	r3, [sp, #60]	; 0x3c
 801433c:	e758      	b.n	80141f0 <_strtod_l+0x6d0>
 801433e:	4632      	mov	r2, r6
 8014340:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014342:	4648      	mov	r0, r9
 8014344:	f002 f920 	bl	8016588 <__lshift>
 8014348:	901c      	str	r0, [sp, #112]	; 0x70
 801434a:	2800      	cmp	r0, #0
 801434c:	f47f af7c 	bne.w	8014248 <_strtod_l+0x728>
 8014350:	e604      	b.n	8013f5c <_strtod_l+0x43c>
 8014352:	bf00      	nop
 8014354:	080182b8 	.word	0x080182b8
 8014358:	fffffc02 	.word	0xfffffc02
 801435c:	465d      	mov	r5, fp
 801435e:	f040 8086 	bne.w	801446e <_strtod_l+0x94e>
 8014362:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014368:	b32a      	cbz	r2, 80143b6 <_strtod_l+0x896>
 801436a:	4aaf      	ldr	r2, [pc, #700]	; (8014628 <_strtod_l+0xb08>)
 801436c:	4293      	cmp	r3, r2
 801436e:	d153      	bne.n	8014418 <_strtod_l+0x8f8>
 8014370:	9b04      	ldr	r3, [sp, #16]
 8014372:	4650      	mov	r0, sl
 8014374:	b1d3      	cbz	r3, 80143ac <_strtod_l+0x88c>
 8014376:	4aad      	ldr	r2, [pc, #692]	; (801462c <_strtod_l+0xb0c>)
 8014378:	402a      	ands	r2, r5
 801437a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801437e:	f04f 31ff 	mov.w	r1, #4294967295
 8014382:	d816      	bhi.n	80143b2 <_strtod_l+0x892>
 8014384:	0d12      	lsrs	r2, r2, #20
 8014386:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801438a:	fa01 f303 	lsl.w	r3, r1, r3
 801438e:	4298      	cmp	r0, r3
 8014390:	d142      	bne.n	8014418 <_strtod_l+0x8f8>
 8014392:	4ba7      	ldr	r3, [pc, #668]	; (8014630 <_strtod_l+0xb10>)
 8014394:	429d      	cmp	r5, r3
 8014396:	d102      	bne.n	801439e <_strtod_l+0x87e>
 8014398:	3001      	adds	r0, #1
 801439a:	f43f addf 	beq.w	8013f5c <_strtod_l+0x43c>
 801439e:	4ba3      	ldr	r3, [pc, #652]	; (801462c <_strtod_l+0xb0c>)
 80143a0:	402b      	ands	r3, r5
 80143a2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80143a6:	f04f 0a00 	mov.w	sl, #0
 80143aa:	e7a0      	b.n	80142ee <_strtod_l+0x7ce>
 80143ac:	f04f 33ff 	mov.w	r3, #4294967295
 80143b0:	e7ed      	b.n	801438e <_strtod_l+0x86e>
 80143b2:	460b      	mov	r3, r1
 80143b4:	e7eb      	b.n	801438e <_strtod_l+0x86e>
 80143b6:	bb7b      	cbnz	r3, 8014418 <_strtod_l+0x8f8>
 80143b8:	f1ba 0f00 	cmp.w	sl, #0
 80143bc:	d12c      	bne.n	8014418 <_strtod_l+0x8f8>
 80143be:	9904      	ldr	r1, [sp, #16]
 80143c0:	4a9a      	ldr	r2, [pc, #616]	; (801462c <_strtod_l+0xb0c>)
 80143c2:	465b      	mov	r3, fp
 80143c4:	b1f1      	cbz	r1, 8014404 <_strtod_l+0x8e4>
 80143c6:	ea02 010b 	and.w	r1, r2, fp
 80143ca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80143ce:	dc19      	bgt.n	8014404 <_strtod_l+0x8e4>
 80143d0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80143d4:	f77f ae5b 	ble.w	801408e <_strtod_l+0x56e>
 80143d8:	4a96      	ldr	r2, [pc, #600]	; (8014634 <_strtod_l+0xb14>)
 80143da:	2300      	movs	r3, #0
 80143dc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80143e0:	4650      	mov	r0, sl
 80143e2:	4659      	mov	r1, fp
 80143e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80143e8:	f7ec f91e 	bl	8000628 <__aeabi_dmul>
 80143ec:	4682      	mov	sl, r0
 80143ee:	468b      	mov	fp, r1
 80143f0:	2900      	cmp	r1, #0
 80143f2:	f47f adbe 	bne.w	8013f72 <_strtod_l+0x452>
 80143f6:	2800      	cmp	r0, #0
 80143f8:	f47f adbb 	bne.w	8013f72 <_strtod_l+0x452>
 80143fc:	2322      	movs	r3, #34	; 0x22
 80143fe:	f8c9 3000 	str.w	r3, [r9]
 8014402:	e5b6      	b.n	8013f72 <_strtod_l+0x452>
 8014404:	4013      	ands	r3, r2
 8014406:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801440a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801440e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8014412:	f04f 3aff 	mov.w	sl, #4294967295
 8014416:	e76a      	b.n	80142ee <_strtod_l+0x7ce>
 8014418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801441a:	b193      	cbz	r3, 8014442 <_strtod_l+0x922>
 801441c:	422b      	tst	r3, r5
 801441e:	f43f af66 	beq.w	80142ee <_strtod_l+0x7ce>
 8014422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014424:	9a04      	ldr	r2, [sp, #16]
 8014426:	4650      	mov	r0, sl
 8014428:	4659      	mov	r1, fp
 801442a:	b173      	cbz	r3, 801444a <_strtod_l+0x92a>
 801442c:	f7ff fb5b 	bl	8013ae6 <sulp>
 8014430:	4602      	mov	r2, r0
 8014432:	460b      	mov	r3, r1
 8014434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014438:	f7eb ff40 	bl	80002bc <__adddf3>
 801443c:	4682      	mov	sl, r0
 801443e:	468b      	mov	fp, r1
 8014440:	e755      	b.n	80142ee <_strtod_l+0x7ce>
 8014442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014444:	ea13 0f0a 	tst.w	r3, sl
 8014448:	e7e9      	b.n	801441e <_strtod_l+0x8fe>
 801444a:	f7ff fb4c 	bl	8013ae6 <sulp>
 801444e:	4602      	mov	r2, r0
 8014450:	460b      	mov	r3, r1
 8014452:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014456:	f7eb ff2f 	bl	80002b8 <__aeabi_dsub>
 801445a:	2200      	movs	r2, #0
 801445c:	2300      	movs	r3, #0
 801445e:	4682      	mov	sl, r0
 8014460:	468b      	mov	fp, r1
 8014462:	f7ec fb49 	bl	8000af8 <__aeabi_dcmpeq>
 8014466:	2800      	cmp	r0, #0
 8014468:	f47f ae11 	bne.w	801408e <_strtod_l+0x56e>
 801446c:	e73f      	b.n	80142ee <_strtod_l+0x7ce>
 801446e:	4641      	mov	r1, r8
 8014470:	4620      	mov	r0, r4
 8014472:	f002 fa1a 	bl	80168aa <__ratio>
 8014476:	ec57 6b10 	vmov	r6, r7, d0
 801447a:	2200      	movs	r2, #0
 801447c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014480:	ee10 0a10 	vmov	r0, s0
 8014484:	4639      	mov	r1, r7
 8014486:	f7ec fb4b 	bl	8000b20 <__aeabi_dcmple>
 801448a:	2800      	cmp	r0, #0
 801448c:	d077      	beq.n	801457e <_strtod_l+0xa5e>
 801448e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014490:	2b00      	cmp	r3, #0
 8014492:	d04a      	beq.n	801452a <_strtod_l+0xa0a>
 8014494:	4b68      	ldr	r3, [pc, #416]	; (8014638 <_strtod_l+0xb18>)
 8014496:	2200      	movs	r2, #0
 8014498:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801449c:	4f66      	ldr	r7, [pc, #408]	; (8014638 <_strtod_l+0xb18>)
 801449e:	2600      	movs	r6, #0
 80144a0:	4b62      	ldr	r3, [pc, #392]	; (801462c <_strtod_l+0xb0c>)
 80144a2:	402b      	ands	r3, r5
 80144a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80144a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80144a8:	4b64      	ldr	r3, [pc, #400]	; (801463c <_strtod_l+0xb1c>)
 80144aa:	429a      	cmp	r2, r3
 80144ac:	f040 80ce 	bne.w	801464c <_strtod_l+0xb2c>
 80144b0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80144b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144b8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80144bc:	ec4b ab10 	vmov	d0, sl, fp
 80144c0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80144c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80144c8:	f002 f92a 	bl	8016720 <__ulp>
 80144cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80144d0:	ec53 2b10 	vmov	r2, r3, d0
 80144d4:	f7ec f8a8 	bl	8000628 <__aeabi_dmul>
 80144d8:	4652      	mov	r2, sl
 80144da:	465b      	mov	r3, fp
 80144dc:	f7eb feee 	bl	80002bc <__adddf3>
 80144e0:	460b      	mov	r3, r1
 80144e2:	4952      	ldr	r1, [pc, #328]	; (801462c <_strtod_l+0xb0c>)
 80144e4:	4a56      	ldr	r2, [pc, #344]	; (8014640 <_strtod_l+0xb20>)
 80144e6:	4019      	ands	r1, r3
 80144e8:	4291      	cmp	r1, r2
 80144ea:	4682      	mov	sl, r0
 80144ec:	d95b      	bls.n	80145a6 <_strtod_l+0xa86>
 80144ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144f0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80144f4:	4293      	cmp	r3, r2
 80144f6:	d103      	bne.n	8014500 <_strtod_l+0x9e0>
 80144f8:	9b08      	ldr	r3, [sp, #32]
 80144fa:	3301      	adds	r3, #1
 80144fc:	f43f ad2e 	beq.w	8013f5c <_strtod_l+0x43c>
 8014500:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8014630 <_strtod_l+0xb10>
 8014504:	f04f 3aff 	mov.w	sl, #4294967295
 8014508:	991c      	ldr	r1, [sp, #112]	; 0x70
 801450a:	4648      	mov	r0, r9
 801450c:	f001 fe71 	bl	80161f2 <_Bfree>
 8014510:	9905      	ldr	r1, [sp, #20]
 8014512:	4648      	mov	r0, r9
 8014514:	f001 fe6d 	bl	80161f2 <_Bfree>
 8014518:	4641      	mov	r1, r8
 801451a:	4648      	mov	r0, r9
 801451c:	f001 fe69 	bl	80161f2 <_Bfree>
 8014520:	4621      	mov	r1, r4
 8014522:	4648      	mov	r0, r9
 8014524:	f001 fe65 	bl	80161f2 <_Bfree>
 8014528:	e619      	b.n	801415e <_strtod_l+0x63e>
 801452a:	f1ba 0f00 	cmp.w	sl, #0
 801452e:	d11a      	bne.n	8014566 <_strtod_l+0xa46>
 8014530:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014534:	b9eb      	cbnz	r3, 8014572 <_strtod_l+0xa52>
 8014536:	2200      	movs	r2, #0
 8014538:	4b3f      	ldr	r3, [pc, #252]	; (8014638 <_strtod_l+0xb18>)
 801453a:	4630      	mov	r0, r6
 801453c:	4639      	mov	r1, r7
 801453e:	f7ec fae5 	bl	8000b0c <__aeabi_dcmplt>
 8014542:	b9c8      	cbnz	r0, 8014578 <_strtod_l+0xa58>
 8014544:	4630      	mov	r0, r6
 8014546:	4639      	mov	r1, r7
 8014548:	2200      	movs	r2, #0
 801454a:	4b3e      	ldr	r3, [pc, #248]	; (8014644 <_strtod_l+0xb24>)
 801454c:	f7ec f86c 	bl	8000628 <__aeabi_dmul>
 8014550:	4606      	mov	r6, r0
 8014552:	460f      	mov	r7, r1
 8014554:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8014558:	9618      	str	r6, [sp, #96]	; 0x60
 801455a:	9319      	str	r3, [sp, #100]	; 0x64
 801455c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8014560:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014564:	e79c      	b.n	80144a0 <_strtod_l+0x980>
 8014566:	f1ba 0f01 	cmp.w	sl, #1
 801456a:	d102      	bne.n	8014572 <_strtod_l+0xa52>
 801456c:	2d00      	cmp	r5, #0
 801456e:	f43f ad8e 	beq.w	801408e <_strtod_l+0x56e>
 8014572:	2200      	movs	r2, #0
 8014574:	4b34      	ldr	r3, [pc, #208]	; (8014648 <_strtod_l+0xb28>)
 8014576:	e78f      	b.n	8014498 <_strtod_l+0x978>
 8014578:	2600      	movs	r6, #0
 801457a:	4f32      	ldr	r7, [pc, #200]	; (8014644 <_strtod_l+0xb24>)
 801457c:	e7ea      	b.n	8014554 <_strtod_l+0xa34>
 801457e:	4b31      	ldr	r3, [pc, #196]	; (8014644 <_strtod_l+0xb24>)
 8014580:	4630      	mov	r0, r6
 8014582:	4639      	mov	r1, r7
 8014584:	2200      	movs	r2, #0
 8014586:	f7ec f84f 	bl	8000628 <__aeabi_dmul>
 801458a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801458c:	4606      	mov	r6, r0
 801458e:	460f      	mov	r7, r1
 8014590:	b933      	cbnz	r3, 80145a0 <_strtod_l+0xa80>
 8014592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014596:	9010      	str	r0, [sp, #64]	; 0x40
 8014598:	9311      	str	r3, [sp, #68]	; 0x44
 801459a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801459e:	e7df      	b.n	8014560 <_strtod_l+0xa40>
 80145a0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80145a4:	e7f9      	b.n	801459a <_strtod_l+0xa7a>
 80145a6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80145aa:	9b04      	ldr	r3, [sp, #16]
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d1ab      	bne.n	8014508 <_strtod_l+0x9e8>
 80145b0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80145b4:	0d1b      	lsrs	r3, r3, #20
 80145b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80145b8:	051b      	lsls	r3, r3, #20
 80145ba:	429a      	cmp	r2, r3
 80145bc:	465d      	mov	r5, fp
 80145be:	d1a3      	bne.n	8014508 <_strtod_l+0x9e8>
 80145c0:	4639      	mov	r1, r7
 80145c2:	4630      	mov	r0, r6
 80145c4:	f7ec fae0 	bl	8000b88 <__aeabi_d2iz>
 80145c8:	f7eb ffc4 	bl	8000554 <__aeabi_i2d>
 80145cc:	460b      	mov	r3, r1
 80145ce:	4602      	mov	r2, r0
 80145d0:	4639      	mov	r1, r7
 80145d2:	4630      	mov	r0, r6
 80145d4:	f7eb fe70 	bl	80002b8 <__aeabi_dsub>
 80145d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80145da:	4606      	mov	r6, r0
 80145dc:	460f      	mov	r7, r1
 80145de:	b933      	cbnz	r3, 80145ee <_strtod_l+0xace>
 80145e0:	f1ba 0f00 	cmp.w	sl, #0
 80145e4:	d103      	bne.n	80145ee <_strtod_l+0xace>
 80145e6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80145ea:	2d00      	cmp	r5, #0
 80145ec:	d06d      	beq.n	80146ca <_strtod_l+0xbaa>
 80145ee:	a30a      	add	r3, pc, #40	; (adr r3, 8014618 <_strtod_l+0xaf8>)
 80145f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145f4:	4630      	mov	r0, r6
 80145f6:	4639      	mov	r1, r7
 80145f8:	f7ec fa88 	bl	8000b0c <__aeabi_dcmplt>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	f47f acb8 	bne.w	8013f72 <_strtod_l+0x452>
 8014602:	a307      	add	r3, pc, #28	; (adr r3, 8014620 <_strtod_l+0xb00>)
 8014604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014608:	4630      	mov	r0, r6
 801460a:	4639      	mov	r1, r7
 801460c:	f7ec fa9c 	bl	8000b48 <__aeabi_dcmpgt>
 8014610:	2800      	cmp	r0, #0
 8014612:	f43f af79 	beq.w	8014508 <_strtod_l+0x9e8>
 8014616:	e4ac      	b.n	8013f72 <_strtod_l+0x452>
 8014618:	94a03595 	.word	0x94a03595
 801461c:	3fdfffff 	.word	0x3fdfffff
 8014620:	35afe535 	.word	0x35afe535
 8014624:	3fe00000 	.word	0x3fe00000
 8014628:	000fffff 	.word	0x000fffff
 801462c:	7ff00000 	.word	0x7ff00000
 8014630:	7fefffff 	.word	0x7fefffff
 8014634:	39500000 	.word	0x39500000
 8014638:	3ff00000 	.word	0x3ff00000
 801463c:	7fe00000 	.word	0x7fe00000
 8014640:	7c9fffff 	.word	0x7c9fffff
 8014644:	3fe00000 	.word	0x3fe00000
 8014648:	bff00000 	.word	0xbff00000
 801464c:	9b04      	ldr	r3, [sp, #16]
 801464e:	b333      	cbz	r3, 801469e <_strtod_l+0xb7e>
 8014650:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014652:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8014656:	d822      	bhi.n	801469e <_strtod_l+0xb7e>
 8014658:	a327      	add	r3, pc, #156	; (adr r3, 80146f8 <_strtod_l+0xbd8>)
 801465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465e:	4630      	mov	r0, r6
 8014660:	4639      	mov	r1, r7
 8014662:	f7ec fa5d 	bl	8000b20 <__aeabi_dcmple>
 8014666:	b1a0      	cbz	r0, 8014692 <_strtod_l+0xb72>
 8014668:	4639      	mov	r1, r7
 801466a:	4630      	mov	r0, r6
 801466c:	f7ec fab4 	bl	8000bd8 <__aeabi_d2uiz>
 8014670:	2800      	cmp	r0, #0
 8014672:	bf08      	it	eq
 8014674:	2001      	moveq	r0, #1
 8014676:	f7eb ff5d 	bl	8000534 <__aeabi_ui2d>
 801467a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801467c:	4606      	mov	r6, r0
 801467e:	460f      	mov	r7, r1
 8014680:	bb03      	cbnz	r3, 80146c4 <_strtod_l+0xba4>
 8014682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014686:	9012      	str	r0, [sp, #72]	; 0x48
 8014688:	9313      	str	r3, [sp, #76]	; 0x4c
 801468a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801468e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8014692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014694:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014696:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801469a:	1a9b      	subs	r3, r3, r2
 801469c:	930b      	str	r3, [sp, #44]	; 0x2c
 801469e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80146a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80146a6:	f002 f83b 	bl	8016720 <__ulp>
 80146aa:	4650      	mov	r0, sl
 80146ac:	ec53 2b10 	vmov	r2, r3, d0
 80146b0:	4659      	mov	r1, fp
 80146b2:	f7eb ffb9 	bl	8000628 <__aeabi_dmul>
 80146b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80146ba:	f7eb fdff 	bl	80002bc <__adddf3>
 80146be:	4682      	mov	sl, r0
 80146c0:	468b      	mov	fp, r1
 80146c2:	e772      	b.n	80145aa <_strtod_l+0xa8a>
 80146c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80146c8:	e7df      	b.n	801468a <_strtod_l+0xb6a>
 80146ca:	a30d      	add	r3, pc, #52	; (adr r3, 8014700 <_strtod_l+0xbe0>)
 80146cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d0:	f7ec fa1c 	bl	8000b0c <__aeabi_dcmplt>
 80146d4:	e79c      	b.n	8014610 <_strtod_l+0xaf0>
 80146d6:	2300      	movs	r3, #0
 80146d8:	930d      	str	r3, [sp, #52]	; 0x34
 80146da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80146dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80146de:	6013      	str	r3, [r2, #0]
 80146e0:	f7ff ba61 	b.w	8013ba6 <_strtod_l+0x86>
 80146e4:	2b65      	cmp	r3, #101	; 0x65
 80146e6:	f04f 0200 	mov.w	r2, #0
 80146ea:	f43f ab4e 	beq.w	8013d8a <_strtod_l+0x26a>
 80146ee:	2101      	movs	r1, #1
 80146f0:	4614      	mov	r4, r2
 80146f2:	9104      	str	r1, [sp, #16]
 80146f4:	f7ff bacb 	b.w	8013c8e <_strtod_l+0x16e>
 80146f8:	ffc00000 	.word	0xffc00000
 80146fc:	41dfffff 	.word	0x41dfffff
 8014700:	94a03595 	.word	0x94a03595
 8014704:	3fcfffff 	.word	0x3fcfffff

08014708 <_strtod_r>:
 8014708:	4b05      	ldr	r3, [pc, #20]	; (8014720 <_strtod_r+0x18>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	b410      	push	{r4}
 801470e:	6a1b      	ldr	r3, [r3, #32]
 8014710:	4c04      	ldr	r4, [pc, #16]	; (8014724 <_strtod_r+0x1c>)
 8014712:	2b00      	cmp	r3, #0
 8014714:	bf08      	it	eq
 8014716:	4623      	moveq	r3, r4
 8014718:	f85d 4b04 	ldr.w	r4, [sp], #4
 801471c:	f7ff ba00 	b.w	8013b20 <_strtod_l>
 8014720:	2000000c 	.word	0x2000000c
 8014724:	20000070 	.word	0x20000070

08014728 <_strtol_l.isra.0>:
 8014728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801472c:	4680      	mov	r8, r0
 801472e:	4689      	mov	r9, r1
 8014730:	4692      	mov	sl, r2
 8014732:	461e      	mov	r6, r3
 8014734:	460f      	mov	r7, r1
 8014736:	463d      	mov	r5, r7
 8014738:	9808      	ldr	r0, [sp, #32]
 801473a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801473e:	f001 fc67 	bl	8016010 <__locale_ctype_ptr_l>
 8014742:	4420      	add	r0, r4
 8014744:	7843      	ldrb	r3, [r0, #1]
 8014746:	f013 0308 	ands.w	r3, r3, #8
 801474a:	d132      	bne.n	80147b2 <_strtol_l.isra.0+0x8a>
 801474c:	2c2d      	cmp	r4, #45	; 0x2d
 801474e:	d132      	bne.n	80147b6 <_strtol_l.isra.0+0x8e>
 8014750:	787c      	ldrb	r4, [r7, #1]
 8014752:	1cbd      	adds	r5, r7, #2
 8014754:	2201      	movs	r2, #1
 8014756:	2e00      	cmp	r6, #0
 8014758:	d05d      	beq.n	8014816 <_strtol_l.isra.0+0xee>
 801475a:	2e10      	cmp	r6, #16
 801475c:	d109      	bne.n	8014772 <_strtol_l.isra.0+0x4a>
 801475e:	2c30      	cmp	r4, #48	; 0x30
 8014760:	d107      	bne.n	8014772 <_strtol_l.isra.0+0x4a>
 8014762:	782b      	ldrb	r3, [r5, #0]
 8014764:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014768:	2b58      	cmp	r3, #88	; 0x58
 801476a:	d14f      	bne.n	801480c <_strtol_l.isra.0+0xe4>
 801476c:	786c      	ldrb	r4, [r5, #1]
 801476e:	2610      	movs	r6, #16
 8014770:	3502      	adds	r5, #2
 8014772:	2a00      	cmp	r2, #0
 8014774:	bf14      	ite	ne
 8014776:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801477a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801477e:	2700      	movs	r7, #0
 8014780:	fbb1 fcf6 	udiv	ip, r1, r6
 8014784:	4638      	mov	r0, r7
 8014786:	fb06 1e1c 	mls	lr, r6, ip, r1
 801478a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801478e:	2b09      	cmp	r3, #9
 8014790:	d817      	bhi.n	80147c2 <_strtol_l.isra.0+0x9a>
 8014792:	461c      	mov	r4, r3
 8014794:	42a6      	cmp	r6, r4
 8014796:	dd23      	ble.n	80147e0 <_strtol_l.isra.0+0xb8>
 8014798:	1c7b      	adds	r3, r7, #1
 801479a:	d007      	beq.n	80147ac <_strtol_l.isra.0+0x84>
 801479c:	4584      	cmp	ip, r0
 801479e:	d31c      	bcc.n	80147da <_strtol_l.isra.0+0xb2>
 80147a0:	d101      	bne.n	80147a6 <_strtol_l.isra.0+0x7e>
 80147a2:	45a6      	cmp	lr, r4
 80147a4:	db19      	blt.n	80147da <_strtol_l.isra.0+0xb2>
 80147a6:	fb00 4006 	mla	r0, r0, r6, r4
 80147aa:	2701      	movs	r7, #1
 80147ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147b0:	e7eb      	b.n	801478a <_strtol_l.isra.0+0x62>
 80147b2:	462f      	mov	r7, r5
 80147b4:	e7bf      	b.n	8014736 <_strtol_l.isra.0+0xe>
 80147b6:	2c2b      	cmp	r4, #43	; 0x2b
 80147b8:	bf04      	itt	eq
 80147ba:	1cbd      	addeq	r5, r7, #2
 80147bc:	787c      	ldrbeq	r4, [r7, #1]
 80147be:	461a      	mov	r2, r3
 80147c0:	e7c9      	b.n	8014756 <_strtol_l.isra.0+0x2e>
 80147c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80147c6:	2b19      	cmp	r3, #25
 80147c8:	d801      	bhi.n	80147ce <_strtol_l.isra.0+0xa6>
 80147ca:	3c37      	subs	r4, #55	; 0x37
 80147cc:	e7e2      	b.n	8014794 <_strtol_l.isra.0+0x6c>
 80147ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80147d2:	2b19      	cmp	r3, #25
 80147d4:	d804      	bhi.n	80147e0 <_strtol_l.isra.0+0xb8>
 80147d6:	3c57      	subs	r4, #87	; 0x57
 80147d8:	e7dc      	b.n	8014794 <_strtol_l.isra.0+0x6c>
 80147da:	f04f 37ff 	mov.w	r7, #4294967295
 80147de:	e7e5      	b.n	80147ac <_strtol_l.isra.0+0x84>
 80147e0:	1c7b      	adds	r3, r7, #1
 80147e2:	d108      	bne.n	80147f6 <_strtol_l.isra.0+0xce>
 80147e4:	2322      	movs	r3, #34	; 0x22
 80147e6:	f8c8 3000 	str.w	r3, [r8]
 80147ea:	4608      	mov	r0, r1
 80147ec:	f1ba 0f00 	cmp.w	sl, #0
 80147f0:	d107      	bne.n	8014802 <_strtol_l.isra.0+0xda>
 80147f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147f6:	b102      	cbz	r2, 80147fa <_strtol_l.isra.0+0xd2>
 80147f8:	4240      	negs	r0, r0
 80147fa:	f1ba 0f00 	cmp.w	sl, #0
 80147fe:	d0f8      	beq.n	80147f2 <_strtol_l.isra.0+0xca>
 8014800:	b10f      	cbz	r7, 8014806 <_strtol_l.isra.0+0xde>
 8014802:	f105 39ff 	add.w	r9, r5, #4294967295
 8014806:	f8ca 9000 	str.w	r9, [sl]
 801480a:	e7f2      	b.n	80147f2 <_strtol_l.isra.0+0xca>
 801480c:	2430      	movs	r4, #48	; 0x30
 801480e:	2e00      	cmp	r6, #0
 8014810:	d1af      	bne.n	8014772 <_strtol_l.isra.0+0x4a>
 8014812:	2608      	movs	r6, #8
 8014814:	e7ad      	b.n	8014772 <_strtol_l.isra.0+0x4a>
 8014816:	2c30      	cmp	r4, #48	; 0x30
 8014818:	d0a3      	beq.n	8014762 <_strtol_l.isra.0+0x3a>
 801481a:	260a      	movs	r6, #10
 801481c:	e7a9      	b.n	8014772 <_strtol_l.isra.0+0x4a>
	...

08014820 <_strtol_r>:
 8014820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014822:	4c06      	ldr	r4, [pc, #24]	; (801483c <_strtol_r+0x1c>)
 8014824:	4d06      	ldr	r5, [pc, #24]	; (8014840 <_strtol_r+0x20>)
 8014826:	6824      	ldr	r4, [r4, #0]
 8014828:	6a24      	ldr	r4, [r4, #32]
 801482a:	2c00      	cmp	r4, #0
 801482c:	bf08      	it	eq
 801482e:	462c      	moveq	r4, r5
 8014830:	9400      	str	r4, [sp, #0]
 8014832:	f7ff ff79 	bl	8014728 <_strtol_l.isra.0>
 8014836:	b003      	add	sp, #12
 8014838:	bd30      	pop	{r4, r5, pc}
 801483a:	bf00      	nop
 801483c:	2000000c 	.word	0x2000000c
 8014840:	20000070 	.word	0x20000070

08014844 <_vsiprintf_r>:
 8014844:	b500      	push	{lr}
 8014846:	b09b      	sub	sp, #108	; 0x6c
 8014848:	9100      	str	r1, [sp, #0]
 801484a:	9104      	str	r1, [sp, #16]
 801484c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014850:	9105      	str	r1, [sp, #20]
 8014852:	9102      	str	r1, [sp, #8]
 8014854:	4905      	ldr	r1, [pc, #20]	; (801486c <_vsiprintf_r+0x28>)
 8014856:	9103      	str	r1, [sp, #12]
 8014858:	4669      	mov	r1, sp
 801485a:	f002 f9a5 	bl	8016ba8 <_svfiprintf_r>
 801485e:	9b00      	ldr	r3, [sp, #0]
 8014860:	2200      	movs	r2, #0
 8014862:	701a      	strb	r2, [r3, #0]
 8014864:	b01b      	add	sp, #108	; 0x6c
 8014866:	f85d fb04 	ldr.w	pc, [sp], #4
 801486a:	bf00      	nop
 801486c:	ffff0208 	.word	0xffff0208

08014870 <vsiprintf>:
 8014870:	4613      	mov	r3, r2
 8014872:	460a      	mov	r2, r1
 8014874:	4601      	mov	r1, r0
 8014876:	4802      	ldr	r0, [pc, #8]	; (8014880 <vsiprintf+0x10>)
 8014878:	6800      	ldr	r0, [r0, #0]
 801487a:	f7ff bfe3 	b.w	8014844 <_vsiprintf_r>
 801487e:	bf00      	nop
 8014880:	2000000c 	.word	0x2000000c

08014884 <__swbuf_r>:
 8014884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014886:	460e      	mov	r6, r1
 8014888:	4614      	mov	r4, r2
 801488a:	4605      	mov	r5, r0
 801488c:	b118      	cbz	r0, 8014896 <__swbuf_r+0x12>
 801488e:	6983      	ldr	r3, [r0, #24]
 8014890:	b90b      	cbnz	r3, 8014896 <__swbuf_r+0x12>
 8014892:	f001 f80d 	bl	80158b0 <__sinit>
 8014896:	4b21      	ldr	r3, [pc, #132]	; (801491c <__swbuf_r+0x98>)
 8014898:	429c      	cmp	r4, r3
 801489a:	d12a      	bne.n	80148f2 <__swbuf_r+0x6e>
 801489c:	686c      	ldr	r4, [r5, #4]
 801489e:	69a3      	ldr	r3, [r4, #24]
 80148a0:	60a3      	str	r3, [r4, #8]
 80148a2:	89a3      	ldrh	r3, [r4, #12]
 80148a4:	071a      	lsls	r2, r3, #28
 80148a6:	d52e      	bpl.n	8014906 <__swbuf_r+0x82>
 80148a8:	6923      	ldr	r3, [r4, #16]
 80148aa:	b363      	cbz	r3, 8014906 <__swbuf_r+0x82>
 80148ac:	6923      	ldr	r3, [r4, #16]
 80148ae:	6820      	ldr	r0, [r4, #0]
 80148b0:	1ac0      	subs	r0, r0, r3
 80148b2:	6963      	ldr	r3, [r4, #20]
 80148b4:	b2f6      	uxtb	r6, r6
 80148b6:	4283      	cmp	r3, r0
 80148b8:	4637      	mov	r7, r6
 80148ba:	dc04      	bgt.n	80148c6 <__swbuf_r+0x42>
 80148bc:	4621      	mov	r1, r4
 80148be:	4628      	mov	r0, r5
 80148c0:	f000 ff8c 	bl	80157dc <_fflush_r>
 80148c4:	bb28      	cbnz	r0, 8014912 <__swbuf_r+0x8e>
 80148c6:	68a3      	ldr	r3, [r4, #8]
 80148c8:	3b01      	subs	r3, #1
 80148ca:	60a3      	str	r3, [r4, #8]
 80148cc:	6823      	ldr	r3, [r4, #0]
 80148ce:	1c5a      	adds	r2, r3, #1
 80148d0:	6022      	str	r2, [r4, #0]
 80148d2:	701e      	strb	r6, [r3, #0]
 80148d4:	6963      	ldr	r3, [r4, #20]
 80148d6:	3001      	adds	r0, #1
 80148d8:	4283      	cmp	r3, r0
 80148da:	d004      	beq.n	80148e6 <__swbuf_r+0x62>
 80148dc:	89a3      	ldrh	r3, [r4, #12]
 80148de:	07db      	lsls	r3, r3, #31
 80148e0:	d519      	bpl.n	8014916 <__swbuf_r+0x92>
 80148e2:	2e0a      	cmp	r6, #10
 80148e4:	d117      	bne.n	8014916 <__swbuf_r+0x92>
 80148e6:	4621      	mov	r1, r4
 80148e8:	4628      	mov	r0, r5
 80148ea:	f000 ff77 	bl	80157dc <_fflush_r>
 80148ee:	b190      	cbz	r0, 8014916 <__swbuf_r+0x92>
 80148f0:	e00f      	b.n	8014912 <__swbuf_r+0x8e>
 80148f2:	4b0b      	ldr	r3, [pc, #44]	; (8014920 <__swbuf_r+0x9c>)
 80148f4:	429c      	cmp	r4, r3
 80148f6:	d101      	bne.n	80148fc <__swbuf_r+0x78>
 80148f8:	68ac      	ldr	r4, [r5, #8]
 80148fa:	e7d0      	b.n	801489e <__swbuf_r+0x1a>
 80148fc:	4b09      	ldr	r3, [pc, #36]	; (8014924 <__swbuf_r+0xa0>)
 80148fe:	429c      	cmp	r4, r3
 8014900:	bf08      	it	eq
 8014902:	68ec      	ldreq	r4, [r5, #12]
 8014904:	e7cb      	b.n	801489e <__swbuf_r+0x1a>
 8014906:	4621      	mov	r1, r4
 8014908:	4628      	mov	r0, r5
 801490a:	f000 f81f 	bl	801494c <__swsetup_r>
 801490e:	2800      	cmp	r0, #0
 8014910:	d0cc      	beq.n	80148ac <__swbuf_r+0x28>
 8014912:	f04f 37ff 	mov.w	r7, #4294967295
 8014916:	4638      	mov	r0, r7
 8014918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801491a:	bf00      	nop
 801491c:	08018310 	.word	0x08018310
 8014920:	08018330 	.word	0x08018330
 8014924:	080182f0 	.word	0x080182f0

08014928 <_write_r>:
 8014928:	b538      	push	{r3, r4, r5, lr}
 801492a:	4c07      	ldr	r4, [pc, #28]	; (8014948 <_write_r+0x20>)
 801492c:	4605      	mov	r5, r0
 801492e:	4608      	mov	r0, r1
 8014930:	4611      	mov	r1, r2
 8014932:	2200      	movs	r2, #0
 8014934:	6022      	str	r2, [r4, #0]
 8014936:	461a      	mov	r2, r3
 8014938:	f7ef f83d 	bl	80039b6 <_write>
 801493c:	1c43      	adds	r3, r0, #1
 801493e:	d102      	bne.n	8014946 <_write_r+0x1e>
 8014940:	6823      	ldr	r3, [r4, #0]
 8014942:	b103      	cbz	r3, 8014946 <_write_r+0x1e>
 8014944:	602b      	str	r3, [r5, #0]
 8014946:	bd38      	pop	{r3, r4, r5, pc}
 8014948:	20023ec8 	.word	0x20023ec8

0801494c <__swsetup_r>:
 801494c:	4b32      	ldr	r3, [pc, #200]	; (8014a18 <__swsetup_r+0xcc>)
 801494e:	b570      	push	{r4, r5, r6, lr}
 8014950:	681d      	ldr	r5, [r3, #0]
 8014952:	4606      	mov	r6, r0
 8014954:	460c      	mov	r4, r1
 8014956:	b125      	cbz	r5, 8014962 <__swsetup_r+0x16>
 8014958:	69ab      	ldr	r3, [r5, #24]
 801495a:	b913      	cbnz	r3, 8014962 <__swsetup_r+0x16>
 801495c:	4628      	mov	r0, r5
 801495e:	f000 ffa7 	bl	80158b0 <__sinit>
 8014962:	4b2e      	ldr	r3, [pc, #184]	; (8014a1c <__swsetup_r+0xd0>)
 8014964:	429c      	cmp	r4, r3
 8014966:	d10f      	bne.n	8014988 <__swsetup_r+0x3c>
 8014968:	686c      	ldr	r4, [r5, #4]
 801496a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801496e:	b29a      	uxth	r2, r3
 8014970:	0715      	lsls	r5, r2, #28
 8014972:	d42c      	bmi.n	80149ce <__swsetup_r+0x82>
 8014974:	06d0      	lsls	r0, r2, #27
 8014976:	d411      	bmi.n	801499c <__swsetup_r+0x50>
 8014978:	2209      	movs	r2, #9
 801497a:	6032      	str	r2, [r6, #0]
 801497c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014980:	81a3      	strh	r3, [r4, #12]
 8014982:	f04f 30ff 	mov.w	r0, #4294967295
 8014986:	e03e      	b.n	8014a06 <__swsetup_r+0xba>
 8014988:	4b25      	ldr	r3, [pc, #148]	; (8014a20 <__swsetup_r+0xd4>)
 801498a:	429c      	cmp	r4, r3
 801498c:	d101      	bne.n	8014992 <__swsetup_r+0x46>
 801498e:	68ac      	ldr	r4, [r5, #8]
 8014990:	e7eb      	b.n	801496a <__swsetup_r+0x1e>
 8014992:	4b24      	ldr	r3, [pc, #144]	; (8014a24 <__swsetup_r+0xd8>)
 8014994:	429c      	cmp	r4, r3
 8014996:	bf08      	it	eq
 8014998:	68ec      	ldreq	r4, [r5, #12]
 801499a:	e7e6      	b.n	801496a <__swsetup_r+0x1e>
 801499c:	0751      	lsls	r1, r2, #29
 801499e:	d512      	bpl.n	80149c6 <__swsetup_r+0x7a>
 80149a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80149a2:	b141      	cbz	r1, 80149b6 <__swsetup_r+0x6a>
 80149a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149a8:	4299      	cmp	r1, r3
 80149aa:	d002      	beq.n	80149b2 <__swsetup_r+0x66>
 80149ac:	4630      	mov	r0, r6
 80149ae:	f001 fff9 	bl	80169a4 <_free_r>
 80149b2:	2300      	movs	r3, #0
 80149b4:	6363      	str	r3, [r4, #52]	; 0x34
 80149b6:	89a3      	ldrh	r3, [r4, #12]
 80149b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80149bc:	81a3      	strh	r3, [r4, #12]
 80149be:	2300      	movs	r3, #0
 80149c0:	6063      	str	r3, [r4, #4]
 80149c2:	6923      	ldr	r3, [r4, #16]
 80149c4:	6023      	str	r3, [r4, #0]
 80149c6:	89a3      	ldrh	r3, [r4, #12]
 80149c8:	f043 0308 	orr.w	r3, r3, #8
 80149cc:	81a3      	strh	r3, [r4, #12]
 80149ce:	6923      	ldr	r3, [r4, #16]
 80149d0:	b94b      	cbnz	r3, 80149e6 <__swsetup_r+0x9a>
 80149d2:	89a3      	ldrh	r3, [r4, #12]
 80149d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80149d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149dc:	d003      	beq.n	80149e6 <__swsetup_r+0x9a>
 80149de:	4621      	mov	r1, r4
 80149e0:	4630      	mov	r0, r6
 80149e2:	f001 fb6d 	bl	80160c0 <__smakebuf_r>
 80149e6:	89a2      	ldrh	r2, [r4, #12]
 80149e8:	f012 0301 	ands.w	r3, r2, #1
 80149ec:	d00c      	beq.n	8014a08 <__swsetup_r+0xbc>
 80149ee:	2300      	movs	r3, #0
 80149f0:	60a3      	str	r3, [r4, #8]
 80149f2:	6963      	ldr	r3, [r4, #20]
 80149f4:	425b      	negs	r3, r3
 80149f6:	61a3      	str	r3, [r4, #24]
 80149f8:	6923      	ldr	r3, [r4, #16]
 80149fa:	b953      	cbnz	r3, 8014a12 <__swsetup_r+0xc6>
 80149fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8014a04:	d1ba      	bne.n	801497c <__swsetup_r+0x30>
 8014a06:	bd70      	pop	{r4, r5, r6, pc}
 8014a08:	0792      	lsls	r2, r2, #30
 8014a0a:	bf58      	it	pl
 8014a0c:	6963      	ldrpl	r3, [r4, #20]
 8014a0e:	60a3      	str	r3, [r4, #8]
 8014a10:	e7f2      	b.n	80149f8 <__swsetup_r+0xac>
 8014a12:	2000      	movs	r0, #0
 8014a14:	e7f7      	b.n	8014a06 <__swsetup_r+0xba>
 8014a16:	bf00      	nop
 8014a18:	2000000c 	.word	0x2000000c
 8014a1c:	08018310 	.word	0x08018310
 8014a20:	08018330 	.word	0x08018330
 8014a24:	080182f0 	.word	0x080182f0

08014a28 <_close_r>:
 8014a28:	b538      	push	{r3, r4, r5, lr}
 8014a2a:	4c06      	ldr	r4, [pc, #24]	; (8014a44 <_close_r+0x1c>)
 8014a2c:	2300      	movs	r3, #0
 8014a2e:	4605      	mov	r5, r0
 8014a30:	4608      	mov	r0, r1
 8014a32:	6023      	str	r3, [r4, #0]
 8014a34:	f7f0 feb1 	bl	800579a <_close>
 8014a38:	1c43      	adds	r3, r0, #1
 8014a3a:	d102      	bne.n	8014a42 <_close_r+0x1a>
 8014a3c:	6823      	ldr	r3, [r4, #0]
 8014a3e:	b103      	cbz	r3, 8014a42 <_close_r+0x1a>
 8014a40:	602b      	str	r3, [r5, #0]
 8014a42:	bd38      	pop	{r3, r4, r5, pc}
 8014a44:	20023ec8 	.word	0x20023ec8

08014a48 <quorem>:
 8014a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a4c:	6903      	ldr	r3, [r0, #16]
 8014a4e:	690c      	ldr	r4, [r1, #16]
 8014a50:	42a3      	cmp	r3, r4
 8014a52:	4680      	mov	r8, r0
 8014a54:	f2c0 8082 	blt.w	8014b5c <quorem+0x114>
 8014a58:	3c01      	subs	r4, #1
 8014a5a:	f101 0714 	add.w	r7, r1, #20
 8014a5e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014a62:	f100 0614 	add.w	r6, r0, #20
 8014a66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014a6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014a6e:	eb06 030c 	add.w	r3, r6, ip
 8014a72:	3501      	adds	r5, #1
 8014a74:	eb07 090c 	add.w	r9, r7, ip
 8014a78:	9301      	str	r3, [sp, #4]
 8014a7a:	fbb0 f5f5 	udiv	r5, r0, r5
 8014a7e:	b395      	cbz	r5, 8014ae6 <quorem+0x9e>
 8014a80:	f04f 0a00 	mov.w	sl, #0
 8014a84:	4638      	mov	r0, r7
 8014a86:	46b6      	mov	lr, r6
 8014a88:	46d3      	mov	fp, sl
 8014a8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8014a8e:	b293      	uxth	r3, r2
 8014a90:	fb05 a303 	mla	r3, r5, r3, sl
 8014a94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	ebab 0303 	sub.w	r3, fp, r3
 8014a9e:	0c12      	lsrs	r2, r2, #16
 8014aa0:	f8de b000 	ldr.w	fp, [lr]
 8014aa4:	fb05 a202 	mla	r2, r5, r2, sl
 8014aa8:	fa13 f38b 	uxtah	r3, r3, fp
 8014aac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014ab0:	fa1f fb82 	uxth.w	fp, r2
 8014ab4:	f8de 2000 	ldr.w	r2, [lr]
 8014ab8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014ac0:	b29b      	uxth	r3, r3
 8014ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ac6:	4581      	cmp	r9, r0
 8014ac8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014acc:	f84e 3b04 	str.w	r3, [lr], #4
 8014ad0:	d2db      	bcs.n	8014a8a <quorem+0x42>
 8014ad2:	f856 300c 	ldr.w	r3, [r6, ip]
 8014ad6:	b933      	cbnz	r3, 8014ae6 <quorem+0x9e>
 8014ad8:	9b01      	ldr	r3, [sp, #4]
 8014ada:	3b04      	subs	r3, #4
 8014adc:	429e      	cmp	r6, r3
 8014ade:	461a      	mov	r2, r3
 8014ae0:	d330      	bcc.n	8014b44 <quorem+0xfc>
 8014ae2:	f8c8 4010 	str.w	r4, [r8, #16]
 8014ae6:	4640      	mov	r0, r8
 8014ae8:	f001 fda2 	bl	8016630 <__mcmp>
 8014aec:	2800      	cmp	r0, #0
 8014aee:	db25      	blt.n	8014b3c <quorem+0xf4>
 8014af0:	3501      	adds	r5, #1
 8014af2:	4630      	mov	r0, r6
 8014af4:	f04f 0c00 	mov.w	ip, #0
 8014af8:	f857 2b04 	ldr.w	r2, [r7], #4
 8014afc:	f8d0 e000 	ldr.w	lr, [r0]
 8014b00:	b293      	uxth	r3, r2
 8014b02:	ebac 0303 	sub.w	r3, ip, r3
 8014b06:	0c12      	lsrs	r2, r2, #16
 8014b08:	fa13 f38e 	uxtah	r3, r3, lr
 8014b0c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014b10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014b14:	b29b      	uxth	r3, r3
 8014b16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014b1a:	45b9      	cmp	r9, r7
 8014b1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014b20:	f840 3b04 	str.w	r3, [r0], #4
 8014b24:	d2e8      	bcs.n	8014af8 <quorem+0xb0>
 8014b26:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014b2a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014b2e:	b92a      	cbnz	r2, 8014b3c <quorem+0xf4>
 8014b30:	3b04      	subs	r3, #4
 8014b32:	429e      	cmp	r6, r3
 8014b34:	461a      	mov	r2, r3
 8014b36:	d30b      	bcc.n	8014b50 <quorem+0x108>
 8014b38:	f8c8 4010 	str.w	r4, [r8, #16]
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	b003      	add	sp, #12
 8014b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b44:	6812      	ldr	r2, [r2, #0]
 8014b46:	3b04      	subs	r3, #4
 8014b48:	2a00      	cmp	r2, #0
 8014b4a:	d1ca      	bne.n	8014ae2 <quorem+0x9a>
 8014b4c:	3c01      	subs	r4, #1
 8014b4e:	e7c5      	b.n	8014adc <quorem+0x94>
 8014b50:	6812      	ldr	r2, [r2, #0]
 8014b52:	3b04      	subs	r3, #4
 8014b54:	2a00      	cmp	r2, #0
 8014b56:	d1ef      	bne.n	8014b38 <quorem+0xf0>
 8014b58:	3c01      	subs	r4, #1
 8014b5a:	e7ea      	b.n	8014b32 <quorem+0xea>
 8014b5c:	2000      	movs	r0, #0
 8014b5e:	e7ee      	b.n	8014b3e <quorem+0xf6>

08014b60 <_dtoa_r>:
 8014b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b64:	ec57 6b10 	vmov	r6, r7, d0
 8014b68:	b097      	sub	sp, #92	; 0x5c
 8014b6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014b6c:	9106      	str	r1, [sp, #24]
 8014b6e:	4604      	mov	r4, r0
 8014b70:	920b      	str	r2, [sp, #44]	; 0x2c
 8014b72:	9312      	str	r3, [sp, #72]	; 0x48
 8014b74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014b78:	e9cd 6700 	strd	r6, r7, [sp]
 8014b7c:	b93d      	cbnz	r5, 8014b8e <_dtoa_r+0x2e>
 8014b7e:	2010      	movs	r0, #16
 8014b80:	f001 fade 	bl	8016140 <malloc>
 8014b84:	6260      	str	r0, [r4, #36]	; 0x24
 8014b86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014b8a:	6005      	str	r5, [r0, #0]
 8014b8c:	60c5      	str	r5, [r0, #12]
 8014b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b90:	6819      	ldr	r1, [r3, #0]
 8014b92:	b151      	cbz	r1, 8014baa <_dtoa_r+0x4a>
 8014b94:	685a      	ldr	r2, [r3, #4]
 8014b96:	604a      	str	r2, [r1, #4]
 8014b98:	2301      	movs	r3, #1
 8014b9a:	4093      	lsls	r3, r2
 8014b9c:	608b      	str	r3, [r1, #8]
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f001 fb27 	bl	80161f2 <_Bfree>
 8014ba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	601a      	str	r2, [r3, #0]
 8014baa:	1e3b      	subs	r3, r7, #0
 8014bac:	bfbb      	ittet	lt
 8014bae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014bb2:	9301      	strlt	r3, [sp, #4]
 8014bb4:	2300      	movge	r3, #0
 8014bb6:	2201      	movlt	r2, #1
 8014bb8:	bfac      	ite	ge
 8014bba:	f8c8 3000 	strge.w	r3, [r8]
 8014bbe:	f8c8 2000 	strlt.w	r2, [r8]
 8014bc2:	4baf      	ldr	r3, [pc, #700]	; (8014e80 <_dtoa_r+0x320>)
 8014bc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014bc8:	ea33 0308 	bics.w	r3, r3, r8
 8014bcc:	d114      	bne.n	8014bf8 <_dtoa_r+0x98>
 8014bce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8014bd4:	6013      	str	r3, [r2, #0]
 8014bd6:	9b00      	ldr	r3, [sp, #0]
 8014bd8:	b923      	cbnz	r3, 8014be4 <_dtoa_r+0x84>
 8014bda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014bde:	2800      	cmp	r0, #0
 8014be0:	f000 8542 	beq.w	8015668 <_dtoa_r+0xb08>
 8014be4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014be6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014e94 <_dtoa_r+0x334>
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	f000 8544 	beq.w	8015678 <_dtoa_r+0xb18>
 8014bf0:	f10b 0303 	add.w	r3, fp, #3
 8014bf4:	f000 bd3e 	b.w	8015674 <_dtoa_r+0xb14>
 8014bf8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	2300      	movs	r3, #0
 8014c00:	4630      	mov	r0, r6
 8014c02:	4639      	mov	r1, r7
 8014c04:	f7eb ff78 	bl	8000af8 <__aeabi_dcmpeq>
 8014c08:	4681      	mov	r9, r0
 8014c0a:	b168      	cbz	r0, 8014c28 <_dtoa_r+0xc8>
 8014c0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014c0e:	2301      	movs	r3, #1
 8014c10:	6013      	str	r3, [r2, #0]
 8014c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f000 8524 	beq.w	8015662 <_dtoa_r+0xb02>
 8014c1a:	4b9a      	ldr	r3, [pc, #616]	; (8014e84 <_dtoa_r+0x324>)
 8014c1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014c1e:	f103 3bff 	add.w	fp, r3, #4294967295
 8014c22:	6013      	str	r3, [r2, #0]
 8014c24:	f000 bd28 	b.w	8015678 <_dtoa_r+0xb18>
 8014c28:	aa14      	add	r2, sp, #80	; 0x50
 8014c2a:	a915      	add	r1, sp, #84	; 0x54
 8014c2c:	ec47 6b10 	vmov	d0, r6, r7
 8014c30:	4620      	mov	r0, r4
 8014c32:	f001 fdeb 	bl	801680c <__d2b>
 8014c36:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014c3a:	9004      	str	r0, [sp, #16]
 8014c3c:	2d00      	cmp	r5, #0
 8014c3e:	d07c      	beq.n	8014d3a <_dtoa_r+0x1da>
 8014c40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014c44:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014c48:	46b2      	mov	sl, r6
 8014c4a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014c4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014c52:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014c56:	2200      	movs	r2, #0
 8014c58:	4b8b      	ldr	r3, [pc, #556]	; (8014e88 <_dtoa_r+0x328>)
 8014c5a:	4650      	mov	r0, sl
 8014c5c:	4659      	mov	r1, fp
 8014c5e:	f7eb fb2b 	bl	80002b8 <__aeabi_dsub>
 8014c62:	a381      	add	r3, pc, #516	; (adr r3, 8014e68 <_dtoa_r+0x308>)
 8014c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c68:	f7eb fcde 	bl	8000628 <__aeabi_dmul>
 8014c6c:	a380      	add	r3, pc, #512	; (adr r3, 8014e70 <_dtoa_r+0x310>)
 8014c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c72:	f7eb fb23 	bl	80002bc <__adddf3>
 8014c76:	4606      	mov	r6, r0
 8014c78:	4628      	mov	r0, r5
 8014c7a:	460f      	mov	r7, r1
 8014c7c:	f7eb fc6a 	bl	8000554 <__aeabi_i2d>
 8014c80:	a37d      	add	r3, pc, #500	; (adr r3, 8014e78 <_dtoa_r+0x318>)
 8014c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c86:	f7eb fccf 	bl	8000628 <__aeabi_dmul>
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	460b      	mov	r3, r1
 8014c8e:	4630      	mov	r0, r6
 8014c90:	4639      	mov	r1, r7
 8014c92:	f7eb fb13 	bl	80002bc <__adddf3>
 8014c96:	4606      	mov	r6, r0
 8014c98:	460f      	mov	r7, r1
 8014c9a:	f7eb ff75 	bl	8000b88 <__aeabi_d2iz>
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	4682      	mov	sl, r0
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	4630      	mov	r0, r6
 8014ca6:	4639      	mov	r1, r7
 8014ca8:	f7eb ff30 	bl	8000b0c <__aeabi_dcmplt>
 8014cac:	b148      	cbz	r0, 8014cc2 <_dtoa_r+0x162>
 8014cae:	4650      	mov	r0, sl
 8014cb0:	f7eb fc50 	bl	8000554 <__aeabi_i2d>
 8014cb4:	4632      	mov	r2, r6
 8014cb6:	463b      	mov	r3, r7
 8014cb8:	f7eb ff1e 	bl	8000af8 <__aeabi_dcmpeq>
 8014cbc:	b908      	cbnz	r0, 8014cc2 <_dtoa_r+0x162>
 8014cbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014cc2:	f1ba 0f16 	cmp.w	sl, #22
 8014cc6:	d859      	bhi.n	8014d7c <_dtoa_r+0x21c>
 8014cc8:	4970      	ldr	r1, [pc, #448]	; (8014e8c <_dtoa_r+0x32c>)
 8014cca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014cd6:	f7eb ff37 	bl	8000b48 <__aeabi_dcmpgt>
 8014cda:	2800      	cmp	r0, #0
 8014cdc:	d050      	beq.n	8014d80 <_dtoa_r+0x220>
 8014cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ce6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ce8:	1b5d      	subs	r5, r3, r5
 8014cea:	f1b5 0801 	subs.w	r8, r5, #1
 8014cee:	bf49      	itett	mi
 8014cf0:	f1c5 0301 	rsbmi	r3, r5, #1
 8014cf4:	2300      	movpl	r3, #0
 8014cf6:	9305      	strmi	r3, [sp, #20]
 8014cf8:	f04f 0800 	movmi.w	r8, #0
 8014cfc:	bf58      	it	pl
 8014cfe:	9305      	strpl	r3, [sp, #20]
 8014d00:	f1ba 0f00 	cmp.w	sl, #0
 8014d04:	db3e      	blt.n	8014d84 <_dtoa_r+0x224>
 8014d06:	2300      	movs	r3, #0
 8014d08:	44d0      	add	r8, sl
 8014d0a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014d0e:	9307      	str	r3, [sp, #28]
 8014d10:	9b06      	ldr	r3, [sp, #24]
 8014d12:	2b09      	cmp	r3, #9
 8014d14:	f200 8090 	bhi.w	8014e38 <_dtoa_r+0x2d8>
 8014d18:	2b05      	cmp	r3, #5
 8014d1a:	bfc4      	itt	gt
 8014d1c:	3b04      	subgt	r3, #4
 8014d1e:	9306      	strgt	r3, [sp, #24]
 8014d20:	9b06      	ldr	r3, [sp, #24]
 8014d22:	f1a3 0302 	sub.w	r3, r3, #2
 8014d26:	bfcc      	ite	gt
 8014d28:	2500      	movgt	r5, #0
 8014d2a:	2501      	movle	r5, #1
 8014d2c:	2b03      	cmp	r3, #3
 8014d2e:	f200 808f 	bhi.w	8014e50 <_dtoa_r+0x2f0>
 8014d32:	e8df f003 	tbb	[pc, r3]
 8014d36:	7f7d      	.short	0x7f7d
 8014d38:	7131      	.short	0x7131
 8014d3a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014d3e:	441d      	add	r5, r3
 8014d40:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014d44:	2820      	cmp	r0, #32
 8014d46:	dd13      	ble.n	8014d70 <_dtoa_r+0x210>
 8014d48:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014d4c:	9b00      	ldr	r3, [sp, #0]
 8014d4e:	fa08 f800 	lsl.w	r8, r8, r0
 8014d52:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014d56:	fa23 f000 	lsr.w	r0, r3, r0
 8014d5a:	ea48 0000 	orr.w	r0, r8, r0
 8014d5e:	f7eb fbe9 	bl	8000534 <__aeabi_ui2d>
 8014d62:	2301      	movs	r3, #1
 8014d64:	4682      	mov	sl, r0
 8014d66:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014d6a:	3d01      	subs	r5, #1
 8014d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d6e:	e772      	b.n	8014c56 <_dtoa_r+0xf6>
 8014d70:	9b00      	ldr	r3, [sp, #0]
 8014d72:	f1c0 0020 	rsb	r0, r0, #32
 8014d76:	fa03 f000 	lsl.w	r0, r3, r0
 8014d7a:	e7f0      	b.n	8014d5e <_dtoa_r+0x1fe>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	e7b1      	b.n	8014ce4 <_dtoa_r+0x184>
 8014d80:	900f      	str	r0, [sp, #60]	; 0x3c
 8014d82:	e7b0      	b.n	8014ce6 <_dtoa_r+0x186>
 8014d84:	9b05      	ldr	r3, [sp, #20]
 8014d86:	eba3 030a 	sub.w	r3, r3, sl
 8014d8a:	9305      	str	r3, [sp, #20]
 8014d8c:	f1ca 0300 	rsb	r3, sl, #0
 8014d90:	9307      	str	r3, [sp, #28]
 8014d92:	2300      	movs	r3, #0
 8014d94:	930e      	str	r3, [sp, #56]	; 0x38
 8014d96:	e7bb      	b.n	8014d10 <_dtoa_r+0x1b0>
 8014d98:	2301      	movs	r3, #1
 8014d9a:	930a      	str	r3, [sp, #40]	; 0x28
 8014d9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	dd59      	ble.n	8014e56 <_dtoa_r+0x2f6>
 8014da2:	9302      	str	r3, [sp, #8]
 8014da4:	4699      	mov	r9, r3
 8014da6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014da8:	2200      	movs	r2, #0
 8014daa:	6072      	str	r2, [r6, #4]
 8014dac:	2204      	movs	r2, #4
 8014dae:	f102 0014 	add.w	r0, r2, #20
 8014db2:	4298      	cmp	r0, r3
 8014db4:	6871      	ldr	r1, [r6, #4]
 8014db6:	d953      	bls.n	8014e60 <_dtoa_r+0x300>
 8014db8:	4620      	mov	r0, r4
 8014dba:	f001 f9e6 	bl	801618a <_Balloc>
 8014dbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014dc0:	6030      	str	r0, [r6, #0]
 8014dc2:	f1b9 0f0e 	cmp.w	r9, #14
 8014dc6:	f8d3 b000 	ldr.w	fp, [r3]
 8014dca:	f200 80e6 	bhi.w	8014f9a <_dtoa_r+0x43a>
 8014dce:	2d00      	cmp	r5, #0
 8014dd0:	f000 80e3 	beq.w	8014f9a <_dtoa_r+0x43a>
 8014dd4:	ed9d 7b00 	vldr	d7, [sp]
 8014dd8:	f1ba 0f00 	cmp.w	sl, #0
 8014ddc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014de0:	dd74      	ble.n	8014ecc <_dtoa_r+0x36c>
 8014de2:	4a2a      	ldr	r2, [pc, #168]	; (8014e8c <_dtoa_r+0x32c>)
 8014de4:	f00a 030f 	and.w	r3, sl, #15
 8014de8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014dec:	ed93 7b00 	vldr	d7, [r3]
 8014df0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014df4:	06f0      	lsls	r0, r6, #27
 8014df6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014dfa:	d565      	bpl.n	8014ec8 <_dtoa_r+0x368>
 8014dfc:	4b24      	ldr	r3, [pc, #144]	; (8014e90 <_dtoa_r+0x330>)
 8014dfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e02:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014e06:	f7eb fd39 	bl	800087c <__aeabi_ddiv>
 8014e0a:	e9cd 0100 	strd	r0, r1, [sp]
 8014e0e:	f006 060f 	and.w	r6, r6, #15
 8014e12:	2503      	movs	r5, #3
 8014e14:	4f1e      	ldr	r7, [pc, #120]	; (8014e90 <_dtoa_r+0x330>)
 8014e16:	e04c      	b.n	8014eb2 <_dtoa_r+0x352>
 8014e18:	2301      	movs	r3, #1
 8014e1a:	930a      	str	r3, [sp, #40]	; 0x28
 8014e1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014e1e:	4453      	add	r3, sl
 8014e20:	f103 0901 	add.w	r9, r3, #1
 8014e24:	9302      	str	r3, [sp, #8]
 8014e26:	464b      	mov	r3, r9
 8014e28:	2b01      	cmp	r3, #1
 8014e2a:	bfb8      	it	lt
 8014e2c:	2301      	movlt	r3, #1
 8014e2e:	e7ba      	b.n	8014da6 <_dtoa_r+0x246>
 8014e30:	2300      	movs	r3, #0
 8014e32:	e7b2      	b.n	8014d9a <_dtoa_r+0x23a>
 8014e34:	2300      	movs	r3, #0
 8014e36:	e7f0      	b.n	8014e1a <_dtoa_r+0x2ba>
 8014e38:	2501      	movs	r5, #1
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	9306      	str	r3, [sp, #24]
 8014e3e:	950a      	str	r5, [sp, #40]	; 0x28
 8014e40:	f04f 33ff 	mov.w	r3, #4294967295
 8014e44:	9302      	str	r3, [sp, #8]
 8014e46:	4699      	mov	r9, r3
 8014e48:	2200      	movs	r2, #0
 8014e4a:	2312      	movs	r3, #18
 8014e4c:	920b      	str	r2, [sp, #44]	; 0x2c
 8014e4e:	e7aa      	b.n	8014da6 <_dtoa_r+0x246>
 8014e50:	2301      	movs	r3, #1
 8014e52:	930a      	str	r3, [sp, #40]	; 0x28
 8014e54:	e7f4      	b.n	8014e40 <_dtoa_r+0x2e0>
 8014e56:	2301      	movs	r3, #1
 8014e58:	9302      	str	r3, [sp, #8]
 8014e5a:	4699      	mov	r9, r3
 8014e5c:	461a      	mov	r2, r3
 8014e5e:	e7f5      	b.n	8014e4c <_dtoa_r+0x2ec>
 8014e60:	3101      	adds	r1, #1
 8014e62:	6071      	str	r1, [r6, #4]
 8014e64:	0052      	lsls	r2, r2, #1
 8014e66:	e7a2      	b.n	8014dae <_dtoa_r+0x24e>
 8014e68:	636f4361 	.word	0x636f4361
 8014e6c:	3fd287a7 	.word	0x3fd287a7
 8014e70:	8b60c8b3 	.word	0x8b60c8b3
 8014e74:	3fc68a28 	.word	0x3fc68a28
 8014e78:	509f79fb 	.word	0x509f79fb
 8014e7c:	3fd34413 	.word	0x3fd34413
 8014e80:	7ff00000 	.word	0x7ff00000
 8014e84:	08018484 	.word	0x08018484
 8014e88:	3ff80000 	.word	0x3ff80000
 8014e8c:	08018388 	.word	0x08018388
 8014e90:	08018360 	.word	0x08018360
 8014e94:	080182e9 	.word	0x080182e9
 8014e98:	07f1      	lsls	r1, r6, #31
 8014e9a:	d508      	bpl.n	8014eae <_dtoa_r+0x34e>
 8014e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014ea4:	f7eb fbc0 	bl	8000628 <__aeabi_dmul>
 8014ea8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014eac:	3501      	adds	r5, #1
 8014eae:	1076      	asrs	r6, r6, #1
 8014eb0:	3708      	adds	r7, #8
 8014eb2:	2e00      	cmp	r6, #0
 8014eb4:	d1f0      	bne.n	8014e98 <_dtoa_r+0x338>
 8014eb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014eba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ebe:	f7eb fcdd 	bl	800087c <__aeabi_ddiv>
 8014ec2:	e9cd 0100 	strd	r0, r1, [sp]
 8014ec6:	e01a      	b.n	8014efe <_dtoa_r+0x39e>
 8014ec8:	2502      	movs	r5, #2
 8014eca:	e7a3      	b.n	8014e14 <_dtoa_r+0x2b4>
 8014ecc:	f000 80a0 	beq.w	8015010 <_dtoa_r+0x4b0>
 8014ed0:	f1ca 0600 	rsb	r6, sl, #0
 8014ed4:	4b9f      	ldr	r3, [pc, #636]	; (8015154 <_dtoa_r+0x5f4>)
 8014ed6:	4fa0      	ldr	r7, [pc, #640]	; (8015158 <_dtoa_r+0x5f8>)
 8014ed8:	f006 020f 	and.w	r2, r6, #15
 8014edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ee4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014ee8:	f7eb fb9e 	bl	8000628 <__aeabi_dmul>
 8014eec:	e9cd 0100 	strd	r0, r1, [sp]
 8014ef0:	1136      	asrs	r6, r6, #4
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	2502      	movs	r5, #2
 8014ef6:	2e00      	cmp	r6, #0
 8014ef8:	d17f      	bne.n	8014ffa <_dtoa_r+0x49a>
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d1e1      	bne.n	8014ec2 <_dtoa_r+0x362>
 8014efe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	f000 8087 	beq.w	8015014 <_dtoa_r+0x4b4>
 8014f06:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	4b93      	ldr	r3, [pc, #588]	; (801515c <_dtoa_r+0x5fc>)
 8014f0e:	4630      	mov	r0, r6
 8014f10:	4639      	mov	r1, r7
 8014f12:	f7eb fdfb 	bl	8000b0c <__aeabi_dcmplt>
 8014f16:	2800      	cmp	r0, #0
 8014f18:	d07c      	beq.n	8015014 <_dtoa_r+0x4b4>
 8014f1a:	f1b9 0f00 	cmp.w	r9, #0
 8014f1e:	d079      	beq.n	8015014 <_dtoa_r+0x4b4>
 8014f20:	9b02      	ldr	r3, [sp, #8]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	dd35      	ble.n	8014f92 <_dtoa_r+0x432>
 8014f26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014f2a:	9308      	str	r3, [sp, #32]
 8014f2c:	4639      	mov	r1, r7
 8014f2e:	2200      	movs	r2, #0
 8014f30:	4b8b      	ldr	r3, [pc, #556]	; (8015160 <_dtoa_r+0x600>)
 8014f32:	4630      	mov	r0, r6
 8014f34:	f7eb fb78 	bl	8000628 <__aeabi_dmul>
 8014f38:	e9cd 0100 	strd	r0, r1, [sp]
 8014f3c:	9f02      	ldr	r7, [sp, #8]
 8014f3e:	3501      	adds	r5, #1
 8014f40:	4628      	mov	r0, r5
 8014f42:	f7eb fb07 	bl	8000554 <__aeabi_i2d>
 8014f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f4a:	f7eb fb6d 	bl	8000628 <__aeabi_dmul>
 8014f4e:	2200      	movs	r2, #0
 8014f50:	4b84      	ldr	r3, [pc, #528]	; (8015164 <_dtoa_r+0x604>)
 8014f52:	f7eb f9b3 	bl	80002bc <__adddf3>
 8014f56:	4605      	mov	r5, r0
 8014f58:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014f5c:	2f00      	cmp	r7, #0
 8014f5e:	d15d      	bne.n	801501c <_dtoa_r+0x4bc>
 8014f60:	2200      	movs	r2, #0
 8014f62:	4b81      	ldr	r3, [pc, #516]	; (8015168 <_dtoa_r+0x608>)
 8014f64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f68:	f7eb f9a6 	bl	80002b8 <__aeabi_dsub>
 8014f6c:	462a      	mov	r2, r5
 8014f6e:	4633      	mov	r3, r6
 8014f70:	e9cd 0100 	strd	r0, r1, [sp]
 8014f74:	f7eb fde8 	bl	8000b48 <__aeabi_dcmpgt>
 8014f78:	2800      	cmp	r0, #0
 8014f7a:	f040 8288 	bne.w	801548e <_dtoa_r+0x92e>
 8014f7e:	462a      	mov	r2, r5
 8014f80:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f88:	f7eb fdc0 	bl	8000b0c <__aeabi_dcmplt>
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	f040 827c 	bne.w	801548a <_dtoa_r+0x92a>
 8014f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014f96:	e9cd 2300 	strd	r2, r3, [sp]
 8014f9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f2c0 8150 	blt.w	8015242 <_dtoa_r+0x6e2>
 8014fa2:	f1ba 0f0e 	cmp.w	sl, #14
 8014fa6:	f300 814c 	bgt.w	8015242 <_dtoa_r+0x6e2>
 8014faa:	4b6a      	ldr	r3, [pc, #424]	; (8015154 <_dtoa_r+0x5f4>)
 8014fac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014fb0:	ed93 7b00 	vldr	d7, [r3]
 8014fb4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014fbc:	f280 80d8 	bge.w	8015170 <_dtoa_r+0x610>
 8014fc0:	f1b9 0f00 	cmp.w	r9, #0
 8014fc4:	f300 80d4 	bgt.w	8015170 <_dtoa_r+0x610>
 8014fc8:	f040 825e 	bne.w	8015488 <_dtoa_r+0x928>
 8014fcc:	2200      	movs	r2, #0
 8014fce:	4b66      	ldr	r3, [pc, #408]	; (8015168 <_dtoa_r+0x608>)
 8014fd0:	ec51 0b17 	vmov	r0, r1, d7
 8014fd4:	f7eb fb28 	bl	8000628 <__aeabi_dmul>
 8014fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fdc:	f7eb fdaa 	bl	8000b34 <__aeabi_dcmpge>
 8014fe0:	464f      	mov	r7, r9
 8014fe2:	464e      	mov	r6, r9
 8014fe4:	2800      	cmp	r0, #0
 8014fe6:	f040 8234 	bne.w	8015452 <_dtoa_r+0x8f2>
 8014fea:	2331      	movs	r3, #49	; 0x31
 8014fec:	f10b 0501 	add.w	r5, fp, #1
 8014ff0:	f88b 3000 	strb.w	r3, [fp]
 8014ff4:	f10a 0a01 	add.w	sl, sl, #1
 8014ff8:	e22f      	b.n	801545a <_dtoa_r+0x8fa>
 8014ffa:	07f2      	lsls	r2, r6, #31
 8014ffc:	d505      	bpl.n	801500a <_dtoa_r+0x4aa>
 8014ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015002:	f7eb fb11 	bl	8000628 <__aeabi_dmul>
 8015006:	3501      	adds	r5, #1
 8015008:	2301      	movs	r3, #1
 801500a:	1076      	asrs	r6, r6, #1
 801500c:	3708      	adds	r7, #8
 801500e:	e772      	b.n	8014ef6 <_dtoa_r+0x396>
 8015010:	2502      	movs	r5, #2
 8015012:	e774      	b.n	8014efe <_dtoa_r+0x39e>
 8015014:	f8cd a020 	str.w	sl, [sp, #32]
 8015018:	464f      	mov	r7, r9
 801501a:	e791      	b.n	8014f40 <_dtoa_r+0x3e0>
 801501c:	4b4d      	ldr	r3, [pc, #308]	; (8015154 <_dtoa_r+0x5f4>)
 801501e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015022:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015028:	2b00      	cmp	r3, #0
 801502a:	d047      	beq.n	80150bc <_dtoa_r+0x55c>
 801502c:	4602      	mov	r2, r0
 801502e:	460b      	mov	r3, r1
 8015030:	2000      	movs	r0, #0
 8015032:	494e      	ldr	r1, [pc, #312]	; (801516c <_dtoa_r+0x60c>)
 8015034:	f7eb fc22 	bl	800087c <__aeabi_ddiv>
 8015038:	462a      	mov	r2, r5
 801503a:	4633      	mov	r3, r6
 801503c:	f7eb f93c 	bl	80002b8 <__aeabi_dsub>
 8015040:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015044:	465d      	mov	r5, fp
 8015046:	e9dd 0100 	ldrd	r0, r1, [sp]
 801504a:	f7eb fd9d 	bl	8000b88 <__aeabi_d2iz>
 801504e:	4606      	mov	r6, r0
 8015050:	f7eb fa80 	bl	8000554 <__aeabi_i2d>
 8015054:	4602      	mov	r2, r0
 8015056:	460b      	mov	r3, r1
 8015058:	e9dd 0100 	ldrd	r0, r1, [sp]
 801505c:	f7eb f92c 	bl	80002b8 <__aeabi_dsub>
 8015060:	3630      	adds	r6, #48	; 0x30
 8015062:	f805 6b01 	strb.w	r6, [r5], #1
 8015066:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801506a:	e9cd 0100 	strd	r0, r1, [sp]
 801506e:	f7eb fd4d 	bl	8000b0c <__aeabi_dcmplt>
 8015072:	2800      	cmp	r0, #0
 8015074:	d163      	bne.n	801513e <_dtoa_r+0x5de>
 8015076:	e9dd 2300 	ldrd	r2, r3, [sp]
 801507a:	2000      	movs	r0, #0
 801507c:	4937      	ldr	r1, [pc, #220]	; (801515c <_dtoa_r+0x5fc>)
 801507e:	f7eb f91b 	bl	80002b8 <__aeabi_dsub>
 8015082:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015086:	f7eb fd41 	bl	8000b0c <__aeabi_dcmplt>
 801508a:	2800      	cmp	r0, #0
 801508c:	f040 80b7 	bne.w	80151fe <_dtoa_r+0x69e>
 8015090:	eba5 030b 	sub.w	r3, r5, fp
 8015094:	429f      	cmp	r7, r3
 8015096:	f77f af7c 	ble.w	8014f92 <_dtoa_r+0x432>
 801509a:	2200      	movs	r2, #0
 801509c:	4b30      	ldr	r3, [pc, #192]	; (8015160 <_dtoa_r+0x600>)
 801509e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80150a2:	f7eb fac1 	bl	8000628 <__aeabi_dmul>
 80150a6:	2200      	movs	r2, #0
 80150a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150ac:	4b2c      	ldr	r3, [pc, #176]	; (8015160 <_dtoa_r+0x600>)
 80150ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150b2:	f7eb fab9 	bl	8000628 <__aeabi_dmul>
 80150b6:	e9cd 0100 	strd	r0, r1, [sp]
 80150ba:	e7c4      	b.n	8015046 <_dtoa_r+0x4e6>
 80150bc:	462a      	mov	r2, r5
 80150be:	4633      	mov	r3, r6
 80150c0:	f7eb fab2 	bl	8000628 <__aeabi_dmul>
 80150c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80150c8:	eb0b 0507 	add.w	r5, fp, r7
 80150cc:	465e      	mov	r6, fp
 80150ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150d2:	f7eb fd59 	bl	8000b88 <__aeabi_d2iz>
 80150d6:	4607      	mov	r7, r0
 80150d8:	f7eb fa3c 	bl	8000554 <__aeabi_i2d>
 80150dc:	3730      	adds	r7, #48	; 0x30
 80150de:	4602      	mov	r2, r0
 80150e0:	460b      	mov	r3, r1
 80150e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150e6:	f7eb f8e7 	bl	80002b8 <__aeabi_dsub>
 80150ea:	f806 7b01 	strb.w	r7, [r6], #1
 80150ee:	42ae      	cmp	r6, r5
 80150f0:	e9cd 0100 	strd	r0, r1, [sp]
 80150f4:	f04f 0200 	mov.w	r2, #0
 80150f8:	d126      	bne.n	8015148 <_dtoa_r+0x5e8>
 80150fa:	4b1c      	ldr	r3, [pc, #112]	; (801516c <_dtoa_r+0x60c>)
 80150fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015100:	f7eb f8dc 	bl	80002bc <__adddf3>
 8015104:	4602      	mov	r2, r0
 8015106:	460b      	mov	r3, r1
 8015108:	e9dd 0100 	ldrd	r0, r1, [sp]
 801510c:	f7eb fd1c 	bl	8000b48 <__aeabi_dcmpgt>
 8015110:	2800      	cmp	r0, #0
 8015112:	d174      	bne.n	80151fe <_dtoa_r+0x69e>
 8015114:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015118:	2000      	movs	r0, #0
 801511a:	4914      	ldr	r1, [pc, #80]	; (801516c <_dtoa_r+0x60c>)
 801511c:	f7eb f8cc 	bl	80002b8 <__aeabi_dsub>
 8015120:	4602      	mov	r2, r0
 8015122:	460b      	mov	r3, r1
 8015124:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015128:	f7eb fcf0 	bl	8000b0c <__aeabi_dcmplt>
 801512c:	2800      	cmp	r0, #0
 801512e:	f43f af30 	beq.w	8014f92 <_dtoa_r+0x432>
 8015132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015136:	2b30      	cmp	r3, #48	; 0x30
 8015138:	f105 32ff 	add.w	r2, r5, #4294967295
 801513c:	d002      	beq.n	8015144 <_dtoa_r+0x5e4>
 801513e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015142:	e04a      	b.n	80151da <_dtoa_r+0x67a>
 8015144:	4615      	mov	r5, r2
 8015146:	e7f4      	b.n	8015132 <_dtoa_r+0x5d2>
 8015148:	4b05      	ldr	r3, [pc, #20]	; (8015160 <_dtoa_r+0x600>)
 801514a:	f7eb fa6d 	bl	8000628 <__aeabi_dmul>
 801514e:	e9cd 0100 	strd	r0, r1, [sp]
 8015152:	e7bc      	b.n	80150ce <_dtoa_r+0x56e>
 8015154:	08018388 	.word	0x08018388
 8015158:	08018360 	.word	0x08018360
 801515c:	3ff00000 	.word	0x3ff00000
 8015160:	40240000 	.word	0x40240000
 8015164:	401c0000 	.word	0x401c0000
 8015168:	40140000 	.word	0x40140000
 801516c:	3fe00000 	.word	0x3fe00000
 8015170:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015174:	465d      	mov	r5, fp
 8015176:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801517a:	4630      	mov	r0, r6
 801517c:	4639      	mov	r1, r7
 801517e:	f7eb fb7d 	bl	800087c <__aeabi_ddiv>
 8015182:	f7eb fd01 	bl	8000b88 <__aeabi_d2iz>
 8015186:	4680      	mov	r8, r0
 8015188:	f7eb f9e4 	bl	8000554 <__aeabi_i2d>
 801518c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015190:	f7eb fa4a 	bl	8000628 <__aeabi_dmul>
 8015194:	4602      	mov	r2, r0
 8015196:	460b      	mov	r3, r1
 8015198:	4630      	mov	r0, r6
 801519a:	4639      	mov	r1, r7
 801519c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80151a0:	f7eb f88a 	bl	80002b8 <__aeabi_dsub>
 80151a4:	f805 6b01 	strb.w	r6, [r5], #1
 80151a8:	eba5 060b 	sub.w	r6, r5, fp
 80151ac:	45b1      	cmp	r9, r6
 80151ae:	4602      	mov	r2, r0
 80151b0:	460b      	mov	r3, r1
 80151b2:	d139      	bne.n	8015228 <_dtoa_r+0x6c8>
 80151b4:	f7eb f882 	bl	80002bc <__adddf3>
 80151b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151bc:	4606      	mov	r6, r0
 80151be:	460f      	mov	r7, r1
 80151c0:	f7eb fcc2 	bl	8000b48 <__aeabi_dcmpgt>
 80151c4:	b9c8      	cbnz	r0, 80151fa <_dtoa_r+0x69a>
 80151c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80151ca:	4630      	mov	r0, r6
 80151cc:	4639      	mov	r1, r7
 80151ce:	f7eb fc93 	bl	8000af8 <__aeabi_dcmpeq>
 80151d2:	b110      	cbz	r0, 80151da <_dtoa_r+0x67a>
 80151d4:	f018 0f01 	tst.w	r8, #1
 80151d8:	d10f      	bne.n	80151fa <_dtoa_r+0x69a>
 80151da:	9904      	ldr	r1, [sp, #16]
 80151dc:	4620      	mov	r0, r4
 80151de:	f001 f808 	bl	80161f2 <_Bfree>
 80151e2:	2300      	movs	r3, #0
 80151e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80151e6:	702b      	strb	r3, [r5, #0]
 80151e8:	f10a 0301 	add.w	r3, sl, #1
 80151ec:	6013      	str	r3, [r2, #0]
 80151ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	f000 8241 	beq.w	8015678 <_dtoa_r+0xb18>
 80151f6:	601d      	str	r5, [r3, #0]
 80151f8:	e23e      	b.n	8015678 <_dtoa_r+0xb18>
 80151fa:	f8cd a020 	str.w	sl, [sp, #32]
 80151fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015202:	2a39      	cmp	r2, #57	; 0x39
 8015204:	f105 33ff 	add.w	r3, r5, #4294967295
 8015208:	d108      	bne.n	801521c <_dtoa_r+0x6bc>
 801520a:	459b      	cmp	fp, r3
 801520c:	d10a      	bne.n	8015224 <_dtoa_r+0x6c4>
 801520e:	9b08      	ldr	r3, [sp, #32]
 8015210:	3301      	adds	r3, #1
 8015212:	9308      	str	r3, [sp, #32]
 8015214:	2330      	movs	r3, #48	; 0x30
 8015216:	f88b 3000 	strb.w	r3, [fp]
 801521a:	465b      	mov	r3, fp
 801521c:	781a      	ldrb	r2, [r3, #0]
 801521e:	3201      	adds	r2, #1
 8015220:	701a      	strb	r2, [r3, #0]
 8015222:	e78c      	b.n	801513e <_dtoa_r+0x5de>
 8015224:	461d      	mov	r5, r3
 8015226:	e7ea      	b.n	80151fe <_dtoa_r+0x69e>
 8015228:	2200      	movs	r2, #0
 801522a:	4b9b      	ldr	r3, [pc, #620]	; (8015498 <_dtoa_r+0x938>)
 801522c:	f7eb f9fc 	bl	8000628 <__aeabi_dmul>
 8015230:	2200      	movs	r2, #0
 8015232:	2300      	movs	r3, #0
 8015234:	4606      	mov	r6, r0
 8015236:	460f      	mov	r7, r1
 8015238:	f7eb fc5e 	bl	8000af8 <__aeabi_dcmpeq>
 801523c:	2800      	cmp	r0, #0
 801523e:	d09a      	beq.n	8015176 <_dtoa_r+0x616>
 8015240:	e7cb      	b.n	80151da <_dtoa_r+0x67a>
 8015242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015244:	2a00      	cmp	r2, #0
 8015246:	f000 808b 	beq.w	8015360 <_dtoa_r+0x800>
 801524a:	9a06      	ldr	r2, [sp, #24]
 801524c:	2a01      	cmp	r2, #1
 801524e:	dc6e      	bgt.n	801532e <_dtoa_r+0x7ce>
 8015250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015252:	2a00      	cmp	r2, #0
 8015254:	d067      	beq.n	8015326 <_dtoa_r+0x7c6>
 8015256:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801525a:	9f07      	ldr	r7, [sp, #28]
 801525c:	9d05      	ldr	r5, [sp, #20]
 801525e:	9a05      	ldr	r2, [sp, #20]
 8015260:	2101      	movs	r1, #1
 8015262:	441a      	add	r2, r3
 8015264:	4620      	mov	r0, r4
 8015266:	9205      	str	r2, [sp, #20]
 8015268:	4498      	add	r8, r3
 801526a:	f001 f8a0 	bl	80163ae <__i2b>
 801526e:	4606      	mov	r6, r0
 8015270:	2d00      	cmp	r5, #0
 8015272:	dd0c      	ble.n	801528e <_dtoa_r+0x72e>
 8015274:	f1b8 0f00 	cmp.w	r8, #0
 8015278:	dd09      	ble.n	801528e <_dtoa_r+0x72e>
 801527a:	4545      	cmp	r5, r8
 801527c:	9a05      	ldr	r2, [sp, #20]
 801527e:	462b      	mov	r3, r5
 8015280:	bfa8      	it	ge
 8015282:	4643      	movge	r3, r8
 8015284:	1ad2      	subs	r2, r2, r3
 8015286:	9205      	str	r2, [sp, #20]
 8015288:	1aed      	subs	r5, r5, r3
 801528a:	eba8 0803 	sub.w	r8, r8, r3
 801528e:	9b07      	ldr	r3, [sp, #28]
 8015290:	b1eb      	cbz	r3, 80152ce <_dtoa_r+0x76e>
 8015292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015294:	2b00      	cmp	r3, #0
 8015296:	d067      	beq.n	8015368 <_dtoa_r+0x808>
 8015298:	b18f      	cbz	r7, 80152be <_dtoa_r+0x75e>
 801529a:	4631      	mov	r1, r6
 801529c:	463a      	mov	r2, r7
 801529e:	4620      	mov	r0, r4
 80152a0:	f001 f924 	bl	80164ec <__pow5mult>
 80152a4:	9a04      	ldr	r2, [sp, #16]
 80152a6:	4601      	mov	r1, r0
 80152a8:	4606      	mov	r6, r0
 80152aa:	4620      	mov	r0, r4
 80152ac:	f001 f888 	bl	80163c0 <__multiply>
 80152b0:	9904      	ldr	r1, [sp, #16]
 80152b2:	9008      	str	r0, [sp, #32]
 80152b4:	4620      	mov	r0, r4
 80152b6:	f000 ff9c 	bl	80161f2 <_Bfree>
 80152ba:	9b08      	ldr	r3, [sp, #32]
 80152bc:	9304      	str	r3, [sp, #16]
 80152be:	9b07      	ldr	r3, [sp, #28]
 80152c0:	1bda      	subs	r2, r3, r7
 80152c2:	d004      	beq.n	80152ce <_dtoa_r+0x76e>
 80152c4:	9904      	ldr	r1, [sp, #16]
 80152c6:	4620      	mov	r0, r4
 80152c8:	f001 f910 	bl	80164ec <__pow5mult>
 80152cc:	9004      	str	r0, [sp, #16]
 80152ce:	2101      	movs	r1, #1
 80152d0:	4620      	mov	r0, r4
 80152d2:	f001 f86c 	bl	80163ae <__i2b>
 80152d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152d8:	4607      	mov	r7, r0
 80152da:	2b00      	cmp	r3, #0
 80152dc:	f000 81d0 	beq.w	8015680 <_dtoa_r+0xb20>
 80152e0:	461a      	mov	r2, r3
 80152e2:	4601      	mov	r1, r0
 80152e4:	4620      	mov	r0, r4
 80152e6:	f001 f901 	bl	80164ec <__pow5mult>
 80152ea:	9b06      	ldr	r3, [sp, #24]
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	4607      	mov	r7, r0
 80152f0:	dc40      	bgt.n	8015374 <_dtoa_r+0x814>
 80152f2:	9b00      	ldr	r3, [sp, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	d139      	bne.n	801536c <_dtoa_r+0x80c>
 80152f8:	9b01      	ldr	r3, [sp, #4]
 80152fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d136      	bne.n	8015370 <_dtoa_r+0x810>
 8015302:	9b01      	ldr	r3, [sp, #4]
 8015304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015308:	0d1b      	lsrs	r3, r3, #20
 801530a:	051b      	lsls	r3, r3, #20
 801530c:	b12b      	cbz	r3, 801531a <_dtoa_r+0x7ba>
 801530e:	9b05      	ldr	r3, [sp, #20]
 8015310:	3301      	adds	r3, #1
 8015312:	9305      	str	r3, [sp, #20]
 8015314:	f108 0801 	add.w	r8, r8, #1
 8015318:	2301      	movs	r3, #1
 801531a:	9307      	str	r3, [sp, #28]
 801531c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801531e:	2b00      	cmp	r3, #0
 8015320:	d12a      	bne.n	8015378 <_dtoa_r+0x818>
 8015322:	2001      	movs	r0, #1
 8015324:	e030      	b.n	8015388 <_dtoa_r+0x828>
 8015326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015328:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801532c:	e795      	b.n	801525a <_dtoa_r+0x6fa>
 801532e:	9b07      	ldr	r3, [sp, #28]
 8015330:	f109 37ff 	add.w	r7, r9, #4294967295
 8015334:	42bb      	cmp	r3, r7
 8015336:	bfbf      	itttt	lt
 8015338:	9b07      	ldrlt	r3, [sp, #28]
 801533a:	9707      	strlt	r7, [sp, #28]
 801533c:	1afa      	sublt	r2, r7, r3
 801533e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015340:	bfbb      	ittet	lt
 8015342:	189b      	addlt	r3, r3, r2
 8015344:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015346:	1bdf      	subge	r7, r3, r7
 8015348:	2700      	movlt	r7, #0
 801534a:	f1b9 0f00 	cmp.w	r9, #0
 801534e:	bfb5      	itete	lt
 8015350:	9b05      	ldrlt	r3, [sp, #20]
 8015352:	9d05      	ldrge	r5, [sp, #20]
 8015354:	eba3 0509 	sublt.w	r5, r3, r9
 8015358:	464b      	movge	r3, r9
 801535a:	bfb8      	it	lt
 801535c:	2300      	movlt	r3, #0
 801535e:	e77e      	b.n	801525e <_dtoa_r+0x6fe>
 8015360:	9f07      	ldr	r7, [sp, #28]
 8015362:	9d05      	ldr	r5, [sp, #20]
 8015364:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015366:	e783      	b.n	8015270 <_dtoa_r+0x710>
 8015368:	9a07      	ldr	r2, [sp, #28]
 801536a:	e7ab      	b.n	80152c4 <_dtoa_r+0x764>
 801536c:	2300      	movs	r3, #0
 801536e:	e7d4      	b.n	801531a <_dtoa_r+0x7ba>
 8015370:	9b00      	ldr	r3, [sp, #0]
 8015372:	e7d2      	b.n	801531a <_dtoa_r+0x7ba>
 8015374:	2300      	movs	r3, #0
 8015376:	9307      	str	r3, [sp, #28]
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801537e:	6918      	ldr	r0, [r3, #16]
 8015380:	f000 ffc7 	bl	8016312 <__hi0bits>
 8015384:	f1c0 0020 	rsb	r0, r0, #32
 8015388:	4440      	add	r0, r8
 801538a:	f010 001f 	ands.w	r0, r0, #31
 801538e:	d047      	beq.n	8015420 <_dtoa_r+0x8c0>
 8015390:	f1c0 0320 	rsb	r3, r0, #32
 8015394:	2b04      	cmp	r3, #4
 8015396:	dd3b      	ble.n	8015410 <_dtoa_r+0x8b0>
 8015398:	9b05      	ldr	r3, [sp, #20]
 801539a:	f1c0 001c 	rsb	r0, r0, #28
 801539e:	4403      	add	r3, r0
 80153a0:	9305      	str	r3, [sp, #20]
 80153a2:	4405      	add	r5, r0
 80153a4:	4480      	add	r8, r0
 80153a6:	9b05      	ldr	r3, [sp, #20]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	dd05      	ble.n	80153b8 <_dtoa_r+0x858>
 80153ac:	461a      	mov	r2, r3
 80153ae:	9904      	ldr	r1, [sp, #16]
 80153b0:	4620      	mov	r0, r4
 80153b2:	f001 f8e9 	bl	8016588 <__lshift>
 80153b6:	9004      	str	r0, [sp, #16]
 80153b8:	f1b8 0f00 	cmp.w	r8, #0
 80153bc:	dd05      	ble.n	80153ca <_dtoa_r+0x86a>
 80153be:	4639      	mov	r1, r7
 80153c0:	4642      	mov	r2, r8
 80153c2:	4620      	mov	r0, r4
 80153c4:	f001 f8e0 	bl	8016588 <__lshift>
 80153c8:	4607      	mov	r7, r0
 80153ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80153cc:	b353      	cbz	r3, 8015424 <_dtoa_r+0x8c4>
 80153ce:	4639      	mov	r1, r7
 80153d0:	9804      	ldr	r0, [sp, #16]
 80153d2:	f001 f92d 	bl	8016630 <__mcmp>
 80153d6:	2800      	cmp	r0, #0
 80153d8:	da24      	bge.n	8015424 <_dtoa_r+0x8c4>
 80153da:	2300      	movs	r3, #0
 80153dc:	220a      	movs	r2, #10
 80153de:	9904      	ldr	r1, [sp, #16]
 80153e0:	4620      	mov	r0, r4
 80153e2:	f000 ff1d 	bl	8016220 <__multadd>
 80153e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153e8:	9004      	str	r0, [sp, #16]
 80153ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f000 814d 	beq.w	801568e <_dtoa_r+0xb2e>
 80153f4:	2300      	movs	r3, #0
 80153f6:	4631      	mov	r1, r6
 80153f8:	220a      	movs	r2, #10
 80153fa:	4620      	mov	r0, r4
 80153fc:	f000 ff10 	bl	8016220 <__multadd>
 8015400:	9b02      	ldr	r3, [sp, #8]
 8015402:	2b00      	cmp	r3, #0
 8015404:	4606      	mov	r6, r0
 8015406:	dc4f      	bgt.n	80154a8 <_dtoa_r+0x948>
 8015408:	9b06      	ldr	r3, [sp, #24]
 801540a:	2b02      	cmp	r3, #2
 801540c:	dd4c      	ble.n	80154a8 <_dtoa_r+0x948>
 801540e:	e011      	b.n	8015434 <_dtoa_r+0x8d4>
 8015410:	d0c9      	beq.n	80153a6 <_dtoa_r+0x846>
 8015412:	9a05      	ldr	r2, [sp, #20]
 8015414:	331c      	adds	r3, #28
 8015416:	441a      	add	r2, r3
 8015418:	9205      	str	r2, [sp, #20]
 801541a:	441d      	add	r5, r3
 801541c:	4498      	add	r8, r3
 801541e:	e7c2      	b.n	80153a6 <_dtoa_r+0x846>
 8015420:	4603      	mov	r3, r0
 8015422:	e7f6      	b.n	8015412 <_dtoa_r+0x8b2>
 8015424:	f1b9 0f00 	cmp.w	r9, #0
 8015428:	dc38      	bgt.n	801549c <_dtoa_r+0x93c>
 801542a:	9b06      	ldr	r3, [sp, #24]
 801542c:	2b02      	cmp	r3, #2
 801542e:	dd35      	ble.n	801549c <_dtoa_r+0x93c>
 8015430:	f8cd 9008 	str.w	r9, [sp, #8]
 8015434:	9b02      	ldr	r3, [sp, #8]
 8015436:	b963      	cbnz	r3, 8015452 <_dtoa_r+0x8f2>
 8015438:	4639      	mov	r1, r7
 801543a:	2205      	movs	r2, #5
 801543c:	4620      	mov	r0, r4
 801543e:	f000 feef 	bl	8016220 <__multadd>
 8015442:	4601      	mov	r1, r0
 8015444:	4607      	mov	r7, r0
 8015446:	9804      	ldr	r0, [sp, #16]
 8015448:	f001 f8f2 	bl	8016630 <__mcmp>
 801544c:	2800      	cmp	r0, #0
 801544e:	f73f adcc 	bgt.w	8014fea <_dtoa_r+0x48a>
 8015452:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015454:	465d      	mov	r5, fp
 8015456:	ea6f 0a03 	mvn.w	sl, r3
 801545a:	f04f 0900 	mov.w	r9, #0
 801545e:	4639      	mov	r1, r7
 8015460:	4620      	mov	r0, r4
 8015462:	f000 fec6 	bl	80161f2 <_Bfree>
 8015466:	2e00      	cmp	r6, #0
 8015468:	f43f aeb7 	beq.w	80151da <_dtoa_r+0x67a>
 801546c:	f1b9 0f00 	cmp.w	r9, #0
 8015470:	d005      	beq.n	801547e <_dtoa_r+0x91e>
 8015472:	45b1      	cmp	r9, r6
 8015474:	d003      	beq.n	801547e <_dtoa_r+0x91e>
 8015476:	4649      	mov	r1, r9
 8015478:	4620      	mov	r0, r4
 801547a:	f000 feba 	bl	80161f2 <_Bfree>
 801547e:	4631      	mov	r1, r6
 8015480:	4620      	mov	r0, r4
 8015482:	f000 feb6 	bl	80161f2 <_Bfree>
 8015486:	e6a8      	b.n	80151da <_dtoa_r+0x67a>
 8015488:	2700      	movs	r7, #0
 801548a:	463e      	mov	r6, r7
 801548c:	e7e1      	b.n	8015452 <_dtoa_r+0x8f2>
 801548e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015492:	463e      	mov	r6, r7
 8015494:	e5a9      	b.n	8014fea <_dtoa_r+0x48a>
 8015496:	bf00      	nop
 8015498:	40240000 	.word	0x40240000
 801549c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801549e:	f8cd 9008 	str.w	r9, [sp, #8]
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	f000 80fa 	beq.w	801569c <_dtoa_r+0xb3c>
 80154a8:	2d00      	cmp	r5, #0
 80154aa:	dd05      	ble.n	80154b8 <_dtoa_r+0x958>
 80154ac:	4631      	mov	r1, r6
 80154ae:	462a      	mov	r2, r5
 80154b0:	4620      	mov	r0, r4
 80154b2:	f001 f869 	bl	8016588 <__lshift>
 80154b6:	4606      	mov	r6, r0
 80154b8:	9b07      	ldr	r3, [sp, #28]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d04c      	beq.n	8015558 <_dtoa_r+0x9f8>
 80154be:	6871      	ldr	r1, [r6, #4]
 80154c0:	4620      	mov	r0, r4
 80154c2:	f000 fe62 	bl	801618a <_Balloc>
 80154c6:	6932      	ldr	r2, [r6, #16]
 80154c8:	3202      	adds	r2, #2
 80154ca:	4605      	mov	r5, r0
 80154cc:	0092      	lsls	r2, r2, #2
 80154ce:	f106 010c 	add.w	r1, r6, #12
 80154d2:	300c      	adds	r0, #12
 80154d4:	f000 fe4e 	bl	8016174 <memcpy>
 80154d8:	2201      	movs	r2, #1
 80154da:	4629      	mov	r1, r5
 80154dc:	4620      	mov	r0, r4
 80154de:	f001 f853 	bl	8016588 <__lshift>
 80154e2:	9b00      	ldr	r3, [sp, #0]
 80154e4:	f8cd b014 	str.w	fp, [sp, #20]
 80154e8:	f003 0301 	and.w	r3, r3, #1
 80154ec:	46b1      	mov	r9, r6
 80154ee:	9307      	str	r3, [sp, #28]
 80154f0:	4606      	mov	r6, r0
 80154f2:	4639      	mov	r1, r7
 80154f4:	9804      	ldr	r0, [sp, #16]
 80154f6:	f7ff faa7 	bl	8014a48 <quorem>
 80154fa:	4649      	mov	r1, r9
 80154fc:	4605      	mov	r5, r0
 80154fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015502:	9804      	ldr	r0, [sp, #16]
 8015504:	f001 f894 	bl	8016630 <__mcmp>
 8015508:	4632      	mov	r2, r6
 801550a:	9000      	str	r0, [sp, #0]
 801550c:	4639      	mov	r1, r7
 801550e:	4620      	mov	r0, r4
 8015510:	f001 f8a8 	bl	8016664 <__mdiff>
 8015514:	68c3      	ldr	r3, [r0, #12]
 8015516:	4602      	mov	r2, r0
 8015518:	bb03      	cbnz	r3, 801555c <_dtoa_r+0x9fc>
 801551a:	4601      	mov	r1, r0
 801551c:	9008      	str	r0, [sp, #32]
 801551e:	9804      	ldr	r0, [sp, #16]
 8015520:	f001 f886 	bl	8016630 <__mcmp>
 8015524:	9a08      	ldr	r2, [sp, #32]
 8015526:	4603      	mov	r3, r0
 8015528:	4611      	mov	r1, r2
 801552a:	4620      	mov	r0, r4
 801552c:	9308      	str	r3, [sp, #32]
 801552e:	f000 fe60 	bl	80161f2 <_Bfree>
 8015532:	9b08      	ldr	r3, [sp, #32]
 8015534:	b9a3      	cbnz	r3, 8015560 <_dtoa_r+0xa00>
 8015536:	9a06      	ldr	r2, [sp, #24]
 8015538:	b992      	cbnz	r2, 8015560 <_dtoa_r+0xa00>
 801553a:	9a07      	ldr	r2, [sp, #28]
 801553c:	b982      	cbnz	r2, 8015560 <_dtoa_r+0xa00>
 801553e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015542:	d029      	beq.n	8015598 <_dtoa_r+0xa38>
 8015544:	9b00      	ldr	r3, [sp, #0]
 8015546:	2b00      	cmp	r3, #0
 8015548:	dd01      	ble.n	801554e <_dtoa_r+0x9ee>
 801554a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801554e:	9b05      	ldr	r3, [sp, #20]
 8015550:	1c5d      	adds	r5, r3, #1
 8015552:	f883 8000 	strb.w	r8, [r3]
 8015556:	e782      	b.n	801545e <_dtoa_r+0x8fe>
 8015558:	4630      	mov	r0, r6
 801555a:	e7c2      	b.n	80154e2 <_dtoa_r+0x982>
 801555c:	2301      	movs	r3, #1
 801555e:	e7e3      	b.n	8015528 <_dtoa_r+0x9c8>
 8015560:	9a00      	ldr	r2, [sp, #0]
 8015562:	2a00      	cmp	r2, #0
 8015564:	db04      	blt.n	8015570 <_dtoa_r+0xa10>
 8015566:	d125      	bne.n	80155b4 <_dtoa_r+0xa54>
 8015568:	9a06      	ldr	r2, [sp, #24]
 801556a:	bb1a      	cbnz	r2, 80155b4 <_dtoa_r+0xa54>
 801556c:	9a07      	ldr	r2, [sp, #28]
 801556e:	bb0a      	cbnz	r2, 80155b4 <_dtoa_r+0xa54>
 8015570:	2b00      	cmp	r3, #0
 8015572:	ddec      	ble.n	801554e <_dtoa_r+0x9ee>
 8015574:	2201      	movs	r2, #1
 8015576:	9904      	ldr	r1, [sp, #16]
 8015578:	4620      	mov	r0, r4
 801557a:	f001 f805 	bl	8016588 <__lshift>
 801557e:	4639      	mov	r1, r7
 8015580:	9004      	str	r0, [sp, #16]
 8015582:	f001 f855 	bl	8016630 <__mcmp>
 8015586:	2800      	cmp	r0, #0
 8015588:	dc03      	bgt.n	8015592 <_dtoa_r+0xa32>
 801558a:	d1e0      	bne.n	801554e <_dtoa_r+0x9ee>
 801558c:	f018 0f01 	tst.w	r8, #1
 8015590:	d0dd      	beq.n	801554e <_dtoa_r+0x9ee>
 8015592:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8015596:	d1d8      	bne.n	801554a <_dtoa_r+0x9ea>
 8015598:	9b05      	ldr	r3, [sp, #20]
 801559a:	9a05      	ldr	r2, [sp, #20]
 801559c:	1c5d      	adds	r5, r3, #1
 801559e:	2339      	movs	r3, #57	; 0x39
 80155a0:	7013      	strb	r3, [r2, #0]
 80155a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80155a6:	2b39      	cmp	r3, #57	; 0x39
 80155a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80155ac:	d04f      	beq.n	801564e <_dtoa_r+0xaee>
 80155ae:	3301      	adds	r3, #1
 80155b0:	7013      	strb	r3, [r2, #0]
 80155b2:	e754      	b.n	801545e <_dtoa_r+0x8fe>
 80155b4:	9a05      	ldr	r2, [sp, #20]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	f102 0501 	add.w	r5, r2, #1
 80155bc:	dd06      	ble.n	80155cc <_dtoa_r+0xa6c>
 80155be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80155c2:	d0e9      	beq.n	8015598 <_dtoa_r+0xa38>
 80155c4:	f108 0801 	add.w	r8, r8, #1
 80155c8:	9b05      	ldr	r3, [sp, #20]
 80155ca:	e7c2      	b.n	8015552 <_dtoa_r+0x9f2>
 80155cc:	9a02      	ldr	r2, [sp, #8]
 80155ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80155d2:	eba5 030b 	sub.w	r3, r5, fp
 80155d6:	4293      	cmp	r3, r2
 80155d8:	d021      	beq.n	801561e <_dtoa_r+0xabe>
 80155da:	2300      	movs	r3, #0
 80155dc:	220a      	movs	r2, #10
 80155de:	9904      	ldr	r1, [sp, #16]
 80155e0:	4620      	mov	r0, r4
 80155e2:	f000 fe1d 	bl	8016220 <__multadd>
 80155e6:	45b1      	cmp	r9, r6
 80155e8:	9004      	str	r0, [sp, #16]
 80155ea:	f04f 0300 	mov.w	r3, #0
 80155ee:	f04f 020a 	mov.w	r2, #10
 80155f2:	4649      	mov	r1, r9
 80155f4:	4620      	mov	r0, r4
 80155f6:	d105      	bne.n	8015604 <_dtoa_r+0xaa4>
 80155f8:	f000 fe12 	bl	8016220 <__multadd>
 80155fc:	4681      	mov	r9, r0
 80155fe:	4606      	mov	r6, r0
 8015600:	9505      	str	r5, [sp, #20]
 8015602:	e776      	b.n	80154f2 <_dtoa_r+0x992>
 8015604:	f000 fe0c 	bl	8016220 <__multadd>
 8015608:	4631      	mov	r1, r6
 801560a:	4681      	mov	r9, r0
 801560c:	2300      	movs	r3, #0
 801560e:	220a      	movs	r2, #10
 8015610:	4620      	mov	r0, r4
 8015612:	f000 fe05 	bl	8016220 <__multadd>
 8015616:	4606      	mov	r6, r0
 8015618:	e7f2      	b.n	8015600 <_dtoa_r+0xaa0>
 801561a:	f04f 0900 	mov.w	r9, #0
 801561e:	2201      	movs	r2, #1
 8015620:	9904      	ldr	r1, [sp, #16]
 8015622:	4620      	mov	r0, r4
 8015624:	f000 ffb0 	bl	8016588 <__lshift>
 8015628:	4639      	mov	r1, r7
 801562a:	9004      	str	r0, [sp, #16]
 801562c:	f001 f800 	bl	8016630 <__mcmp>
 8015630:	2800      	cmp	r0, #0
 8015632:	dcb6      	bgt.n	80155a2 <_dtoa_r+0xa42>
 8015634:	d102      	bne.n	801563c <_dtoa_r+0xadc>
 8015636:	f018 0f01 	tst.w	r8, #1
 801563a:	d1b2      	bne.n	80155a2 <_dtoa_r+0xa42>
 801563c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015640:	2b30      	cmp	r3, #48	; 0x30
 8015642:	f105 32ff 	add.w	r2, r5, #4294967295
 8015646:	f47f af0a 	bne.w	801545e <_dtoa_r+0x8fe>
 801564a:	4615      	mov	r5, r2
 801564c:	e7f6      	b.n	801563c <_dtoa_r+0xadc>
 801564e:	4593      	cmp	fp, r2
 8015650:	d105      	bne.n	801565e <_dtoa_r+0xafe>
 8015652:	2331      	movs	r3, #49	; 0x31
 8015654:	f10a 0a01 	add.w	sl, sl, #1
 8015658:	f88b 3000 	strb.w	r3, [fp]
 801565c:	e6ff      	b.n	801545e <_dtoa_r+0x8fe>
 801565e:	4615      	mov	r5, r2
 8015660:	e79f      	b.n	80155a2 <_dtoa_r+0xa42>
 8015662:	f8df b064 	ldr.w	fp, [pc, #100]	; 80156c8 <_dtoa_r+0xb68>
 8015666:	e007      	b.n	8015678 <_dtoa_r+0xb18>
 8015668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801566a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80156cc <_dtoa_r+0xb6c>
 801566e:	b11b      	cbz	r3, 8015678 <_dtoa_r+0xb18>
 8015670:	f10b 0308 	add.w	r3, fp, #8
 8015674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015676:	6013      	str	r3, [r2, #0]
 8015678:	4658      	mov	r0, fp
 801567a:	b017      	add	sp, #92	; 0x5c
 801567c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015680:	9b06      	ldr	r3, [sp, #24]
 8015682:	2b01      	cmp	r3, #1
 8015684:	f77f ae35 	ble.w	80152f2 <_dtoa_r+0x792>
 8015688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801568a:	9307      	str	r3, [sp, #28]
 801568c:	e649      	b.n	8015322 <_dtoa_r+0x7c2>
 801568e:	9b02      	ldr	r3, [sp, #8]
 8015690:	2b00      	cmp	r3, #0
 8015692:	dc03      	bgt.n	801569c <_dtoa_r+0xb3c>
 8015694:	9b06      	ldr	r3, [sp, #24]
 8015696:	2b02      	cmp	r3, #2
 8015698:	f73f aecc 	bgt.w	8015434 <_dtoa_r+0x8d4>
 801569c:	465d      	mov	r5, fp
 801569e:	4639      	mov	r1, r7
 80156a0:	9804      	ldr	r0, [sp, #16]
 80156a2:	f7ff f9d1 	bl	8014a48 <quorem>
 80156a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80156aa:	f805 8b01 	strb.w	r8, [r5], #1
 80156ae:	9a02      	ldr	r2, [sp, #8]
 80156b0:	eba5 030b 	sub.w	r3, r5, fp
 80156b4:	429a      	cmp	r2, r3
 80156b6:	ddb0      	ble.n	801561a <_dtoa_r+0xaba>
 80156b8:	2300      	movs	r3, #0
 80156ba:	220a      	movs	r2, #10
 80156bc:	9904      	ldr	r1, [sp, #16]
 80156be:	4620      	mov	r0, r4
 80156c0:	f000 fdae 	bl	8016220 <__multadd>
 80156c4:	9004      	str	r0, [sp, #16]
 80156c6:	e7ea      	b.n	801569e <_dtoa_r+0xb3e>
 80156c8:	08018483 	.word	0x08018483
 80156cc:	080182e0 	.word	0x080182e0

080156d0 <__sflush_r>:
 80156d0:	898a      	ldrh	r2, [r1, #12]
 80156d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156d6:	4605      	mov	r5, r0
 80156d8:	0710      	lsls	r0, r2, #28
 80156da:	460c      	mov	r4, r1
 80156dc:	d458      	bmi.n	8015790 <__sflush_r+0xc0>
 80156de:	684b      	ldr	r3, [r1, #4]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	dc05      	bgt.n	80156f0 <__sflush_r+0x20>
 80156e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	dc02      	bgt.n	80156f0 <__sflush_r+0x20>
 80156ea:	2000      	movs	r0, #0
 80156ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156f2:	2e00      	cmp	r6, #0
 80156f4:	d0f9      	beq.n	80156ea <__sflush_r+0x1a>
 80156f6:	2300      	movs	r3, #0
 80156f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80156fc:	682f      	ldr	r7, [r5, #0]
 80156fe:	6a21      	ldr	r1, [r4, #32]
 8015700:	602b      	str	r3, [r5, #0]
 8015702:	d032      	beq.n	801576a <__sflush_r+0x9a>
 8015704:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015706:	89a3      	ldrh	r3, [r4, #12]
 8015708:	075a      	lsls	r2, r3, #29
 801570a:	d505      	bpl.n	8015718 <__sflush_r+0x48>
 801570c:	6863      	ldr	r3, [r4, #4]
 801570e:	1ac0      	subs	r0, r0, r3
 8015710:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015712:	b10b      	cbz	r3, 8015718 <__sflush_r+0x48>
 8015714:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015716:	1ac0      	subs	r0, r0, r3
 8015718:	2300      	movs	r3, #0
 801571a:	4602      	mov	r2, r0
 801571c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801571e:	6a21      	ldr	r1, [r4, #32]
 8015720:	4628      	mov	r0, r5
 8015722:	47b0      	blx	r6
 8015724:	1c43      	adds	r3, r0, #1
 8015726:	89a3      	ldrh	r3, [r4, #12]
 8015728:	d106      	bne.n	8015738 <__sflush_r+0x68>
 801572a:	6829      	ldr	r1, [r5, #0]
 801572c:	291d      	cmp	r1, #29
 801572e:	d848      	bhi.n	80157c2 <__sflush_r+0xf2>
 8015730:	4a29      	ldr	r2, [pc, #164]	; (80157d8 <__sflush_r+0x108>)
 8015732:	40ca      	lsrs	r2, r1
 8015734:	07d6      	lsls	r6, r2, #31
 8015736:	d544      	bpl.n	80157c2 <__sflush_r+0xf2>
 8015738:	2200      	movs	r2, #0
 801573a:	6062      	str	r2, [r4, #4]
 801573c:	04d9      	lsls	r1, r3, #19
 801573e:	6922      	ldr	r2, [r4, #16]
 8015740:	6022      	str	r2, [r4, #0]
 8015742:	d504      	bpl.n	801574e <__sflush_r+0x7e>
 8015744:	1c42      	adds	r2, r0, #1
 8015746:	d101      	bne.n	801574c <__sflush_r+0x7c>
 8015748:	682b      	ldr	r3, [r5, #0]
 801574a:	b903      	cbnz	r3, 801574e <__sflush_r+0x7e>
 801574c:	6560      	str	r0, [r4, #84]	; 0x54
 801574e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015750:	602f      	str	r7, [r5, #0]
 8015752:	2900      	cmp	r1, #0
 8015754:	d0c9      	beq.n	80156ea <__sflush_r+0x1a>
 8015756:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801575a:	4299      	cmp	r1, r3
 801575c:	d002      	beq.n	8015764 <__sflush_r+0x94>
 801575e:	4628      	mov	r0, r5
 8015760:	f001 f920 	bl	80169a4 <_free_r>
 8015764:	2000      	movs	r0, #0
 8015766:	6360      	str	r0, [r4, #52]	; 0x34
 8015768:	e7c0      	b.n	80156ec <__sflush_r+0x1c>
 801576a:	2301      	movs	r3, #1
 801576c:	4628      	mov	r0, r5
 801576e:	47b0      	blx	r6
 8015770:	1c41      	adds	r1, r0, #1
 8015772:	d1c8      	bne.n	8015706 <__sflush_r+0x36>
 8015774:	682b      	ldr	r3, [r5, #0]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d0c5      	beq.n	8015706 <__sflush_r+0x36>
 801577a:	2b1d      	cmp	r3, #29
 801577c:	d001      	beq.n	8015782 <__sflush_r+0xb2>
 801577e:	2b16      	cmp	r3, #22
 8015780:	d101      	bne.n	8015786 <__sflush_r+0xb6>
 8015782:	602f      	str	r7, [r5, #0]
 8015784:	e7b1      	b.n	80156ea <__sflush_r+0x1a>
 8015786:	89a3      	ldrh	r3, [r4, #12]
 8015788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801578c:	81a3      	strh	r3, [r4, #12]
 801578e:	e7ad      	b.n	80156ec <__sflush_r+0x1c>
 8015790:	690f      	ldr	r7, [r1, #16]
 8015792:	2f00      	cmp	r7, #0
 8015794:	d0a9      	beq.n	80156ea <__sflush_r+0x1a>
 8015796:	0793      	lsls	r3, r2, #30
 8015798:	680e      	ldr	r6, [r1, #0]
 801579a:	bf08      	it	eq
 801579c:	694b      	ldreq	r3, [r1, #20]
 801579e:	600f      	str	r7, [r1, #0]
 80157a0:	bf18      	it	ne
 80157a2:	2300      	movne	r3, #0
 80157a4:	eba6 0807 	sub.w	r8, r6, r7
 80157a8:	608b      	str	r3, [r1, #8]
 80157aa:	f1b8 0f00 	cmp.w	r8, #0
 80157ae:	dd9c      	ble.n	80156ea <__sflush_r+0x1a>
 80157b0:	4643      	mov	r3, r8
 80157b2:	463a      	mov	r2, r7
 80157b4:	6a21      	ldr	r1, [r4, #32]
 80157b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80157b8:	4628      	mov	r0, r5
 80157ba:	47b0      	blx	r6
 80157bc:	2800      	cmp	r0, #0
 80157be:	dc06      	bgt.n	80157ce <__sflush_r+0xfe>
 80157c0:	89a3      	ldrh	r3, [r4, #12]
 80157c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80157c6:	81a3      	strh	r3, [r4, #12]
 80157c8:	f04f 30ff 	mov.w	r0, #4294967295
 80157cc:	e78e      	b.n	80156ec <__sflush_r+0x1c>
 80157ce:	4407      	add	r7, r0
 80157d0:	eba8 0800 	sub.w	r8, r8, r0
 80157d4:	e7e9      	b.n	80157aa <__sflush_r+0xda>
 80157d6:	bf00      	nop
 80157d8:	20400001 	.word	0x20400001

080157dc <_fflush_r>:
 80157dc:	b538      	push	{r3, r4, r5, lr}
 80157de:	690b      	ldr	r3, [r1, #16]
 80157e0:	4605      	mov	r5, r0
 80157e2:	460c      	mov	r4, r1
 80157e4:	b1db      	cbz	r3, 801581e <_fflush_r+0x42>
 80157e6:	b118      	cbz	r0, 80157f0 <_fflush_r+0x14>
 80157e8:	6983      	ldr	r3, [r0, #24]
 80157ea:	b90b      	cbnz	r3, 80157f0 <_fflush_r+0x14>
 80157ec:	f000 f860 	bl	80158b0 <__sinit>
 80157f0:	4b0c      	ldr	r3, [pc, #48]	; (8015824 <_fflush_r+0x48>)
 80157f2:	429c      	cmp	r4, r3
 80157f4:	d109      	bne.n	801580a <_fflush_r+0x2e>
 80157f6:	686c      	ldr	r4, [r5, #4]
 80157f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157fc:	b17b      	cbz	r3, 801581e <_fflush_r+0x42>
 80157fe:	4621      	mov	r1, r4
 8015800:	4628      	mov	r0, r5
 8015802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015806:	f7ff bf63 	b.w	80156d0 <__sflush_r>
 801580a:	4b07      	ldr	r3, [pc, #28]	; (8015828 <_fflush_r+0x4c>)
 801580c:	429c      	cmp	r4, r3
 801580e:	d101      	bne.n	8015814 <_fflush_r+0x38>
 8015810:	68ac      	ldr	r4, [r5, #8]
 8015812:	e7f1      	b.n	80157f8 <_fflush_r+0x1c>
 8015814:	4b05      	ldr	r3, [pc, #20]	; (801582c <_fflush_r+0x50>)
 8015816:	429c      	cmp	r4, r3
 8015818:	bf08      	it	eq
 801581a:	68ec      	ldreq	r4, [r5, #12]
 801581c:	e7ec      	b.n	80157f8 <_fflush_r+0x1c>
 801581e:	2000      	movs	r0, #0
 8015820:	bd38      	pop	{r3, r4, r5, pc}
 8015822:	bf00      	nop
 8015824:	08018310 	.word	0x08018310
 8015828:	08018330 	.word	0x08018330
 801582c:	080182f0 	.word	0x080182f0

08015830 <std>:
 8015830:	2300      	movs	r3, #0
 8015832:	b510      	push	{r4, lr}
 8015834:	4604      	mov	r4, r0
 8015836:	e9c0 3300 	strd	r3, r3, [r0]
 801583a:	6083      	str	r3, [r0, #8]
 801583c:	8181      	strh	r1, [r0, #12]
 801583e:	6643      	str	r3, [r0, #100]	; 0x64
 8015840:	81c2      	strh	r2, [r0, #14]
 8015842:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015846:	6183      	str	r3, [r0, #24]
 8015848:	4619      	mov	r1, r3
 801584a:	2208      	movs	r2, #8
 801584c:	305c      	adds	r0, #92	; 0x5c
 801584e:	f7fd f9a3 	bl	8012b98 <memset>
 8015852:	4b05      	ldr	r3, [pc, #20]	; (8015868 <std+0x38>)
 8015854:	6263      	str	r3, [r4, #36]	; 0x24
 8015856:	4b05      	ldr	r3, [pc, #20]	; (801586c <std+0x3c>)
 8015858:	62a3      	str	r3, [r4, #40]	; 0x28
 801585a:	4b05      	ldr	r3, [pc, #20]	; (8015870 <std+0x40>)
 801585c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801585e:	4b05      	ldr	r3, [pc, #20]	; (8015874 <std+0x44>)
 8015860:	6224      	str	r4, [r4, #32]
 8015862:	6323      	str	r3, [r4, #48]	; 0x30
 8015864:	bd10      	pop	{r4, pc}
 8015866:	bf00      	nop
 8015868:	08013a4d 	.word	0x08013a4d
 801586c:	08013a73 	.word	0x08013a73
 8015870:	08013aab 	.word	0x08013aab
 8015874:	08013acf 	.word	0x08013acf

08015878 <_cleanup_r>:
 8015878:	4901      	ldr	r1, [pc, #4]	; (8015880 <_cleanup_r+0x8>)
 801587a:	f000 b885 	b.w	8015988 <_fwalk_reent>
 801587e:	bf00      	nop
 8015880:	080157dd 	.word	0x080157dd

08015884 <__sfmoreglue>:
 8015884:	b570      	push	{r4, r5, r6, lr}
 8015886:	1e4a      	subs	r2, r1, #1
 8015888:	2568      	movs	r5, #104	; 0x68
 801588a:	4355      	muls	r5, r2
 801588c:	460e      	mov	r6, r1
 801588e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015892:	f001 f8d5 	bl	8016a40 <_malloc_r>
 8015896:	4604      	mov	r4, r0
 8015898:	b140      	cbz	r0, 80158ac <__sfmoreglue+0x28>
 801589a:	2100      	movs	r1, #0
 801589c:	e9c0 1600 	strd	r1, r6, [r0]
 80158a0:	300c      	adds	r0, #12
 80158a2:	60a0      	str	r0, [r4, #8]
 80158a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80158a8:	f7fd f976 	bl	8012b98 <memset>
 80158ac:	4620      	mov	r0, r4
 80158ae:	bd70      	pop	{r4, r5, r6, pc}

080158b0 <__sinit>:
 80158b0:	6983      	ldr	r3, [r0, #24]
 80158b2:	b510      	push	{r4, lr}
 80158b4:	4604      	mov	r4, r0
 80158b6:	bb33      	cbnz	r3, 8015906 <__sinit+0x56>
 80158b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80158bc:	6503      	str	r3, [r0, #80]	; 0x50
 80158be:	4b12      	ldr	r3, [pc, #72]	; (8015908 <__sinit+0x58>)
 80158c0:	4a12      	ldr	r2, [pc, #72]	; (801590c <__sinit+0x5c>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	6282      	str	r2, [r0, #40]	; 0x28
 80158c6:	4298      	cmp	r0, r3
 80158c8:	bf04      	itt	eq
 80158ca:	2301      	moveq	r3, #1
 80158cc:	6183      	streq	r3, [r0, #24]
 80158ce:	f000 f81f 	bl	8015910 <__sfp>
 80158d2:	6060      	str	r0, [r4, #4]
 80158d4:	4620      	mov	r0, r4
 80158d6:	f000 f81b 	bl	8015910 <__sfp>
 80158da:	60a0      	str	r0, [r4, #8]
 80158dc:	4620      	mov	r0, r4
 80158de:	f000 f817 	bl	8015910 <__sfp>
 80158e2:	2200      	movs	r2, #0
 80158e4:	60e0      	str	r0, [r4, #12]
 80158e6:	2104      	movs	r1, #4
 80158e8:	6860      	ldr	r0, [r4, #4]
 80158ea:	f7ff ffa1 	bl	8015830 <std>
 80158ee:	2201      	movs	r2, #1
 80158f0:	2109      	movs	r1, #9
 80158f2:	68a0      	ldr	r0, [r4, #8]
 80158f4:	f7ff ff9c 	bl	8015830 <std>
 80158f8:	2202      	movs	r2, #2
 80158fa:	2112      	movs	r1, #18
 80158fc:	68e0      	ldr	r0, [r4, #12]
 80158fe:	f7ff ff97 	bl	8015830 <std>
 8015902:	2301      	movs	r3, #1
 8015904:	61a3      	str	r3, [r4, #24]
 8015906:	bd10      	pop	{r4, pc}
 8015908:	08018250 	.word	0x08018250
 801590c:	08015879 	.word	0x08015879

08015910 <__sfp>:
 8015910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015912:	4b1b      	ldr	r3, [pc, #108]	; (8015980 <__sfp+0x70>)
 8015914:	681e      	ldr	r6, [r3, #0]
 8015916:	69b3      	ldr	r3, [r6, #24]
 8015918:	4607      	mov	r7, r0
 801591a:	b913      	cbnz	r3, 8015922 <__sfp+0x12>
 801591c:	4630      	mov	r0, r6
 801591e:	f7ff ffc7 	bl	80158b0 <__sinit>
 8015922:	3648      	adds	r6, #72	; 0x48
 8015924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8015928:	3b01      	subs	r3, #1
 801592a:	d503      	bpl.n	8015934 <__sfp+0x24>
 801592c:	6833      	ldr	r3, [r6, #0]
 801592e:	b133      	cbz	r3, 801593e <__sfp+0x2e>
 8015930:	6836      	ldr	r6, [r6, #0]
 8015932:	e7f7      	b.n	8015924 <__sfp+0x14>
 8015934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015938:	b16d      	cbz	r5, 8015956 <__sfp+0x46>
 801593a:	3468      	adds	r4, #104	; 0x68
 801593c:	e7f4      	b.n	8015928 <__sfp+0x18>
 801593e:	2104      	movs	r1, #4
 8015940:	4638      	mov	r0, r7
 8015942:	f7ff ff9f 	bl	8015884 <__sfmoreglue>
 8015946:	6030      	str	r0, [r6, #0]
 8015948:	2800      	cmp	r0, #0
 801594a:	d1f1      	bne.n	8015930 <__sfp+0x20>
 801594c:	230c      	movs	r3, #12
 801594e:	603b      	str	r3, [r7, #0]
 8015950:	4604      	mov	r4, r0
 8015952:	4620      	mov	r0, r4
 8015954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015956:	4b0b      	ldr	r3, [pc, #44]	; (8015984 <__sfp+0x74>)
 8015958:	6665      	str	r5, [r4, #100]	; 0x64
 801595a:	e9c4 5500 	strd	r5, r5, [r4]
 801595e:	60a5      	str	r5, [r4, #8]
 8015960:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8015964:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015968:	2208      	movs	r2, #8
 801596a:	4629      	mov	r1, r5
 801596c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015970:	f7fd f912 	bl	8012b98 <memset>
 8015974:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015978:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801597c:	e7e9      	b.n	8015952 <__sfp+0x42>
 801597e:	bf00      	nop
 8015980:	08018250 	.word	0x08018250
 8015984:	ffff0001 	.word	0xffff0001

08015988 <_fwalk_reent>:
 8015988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801598c:	4680      	mov	r8, r0
 801598e:	4689      	mov	r9, r1
 8015990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015994:	2600      	movs	r6, #0
 8015996:	b914      	cbnz	r4, 801599e <_fwalk_reent+0x16>
 8015998:	4630      	mov	r0, r6
 801599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801599e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80159a2:	3f01      	subs	r7, #1
 80159a4:	d501      	bpl.n	80159aa <_fwalk_reent+0x22>
 80159a6:	6824      	ldr	r4, [r4, #0]
 80159a8:	e7f5      	b.n	8015996 <_fwalk_reent+0xe>
 80159aa:	89ab      	ldrh	r3, [r5, #12]
 80159ac:	2b01      	cmp	r3, #1
 80159ae:	d907      	bls.n	80159c0 <_fwalk_reent+0x38>
 80159b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159b4:	3301      	adds	r3, #1
 80159b6:	d003      	beq.n	80159c0 <_fwalk_reent+0x38>
 80159b8:	4629      	mov	r1, r5
 80159ba:	4640      	mov	r0, r8
 80159bc:	47c8      	blx	r9
 80159be:	4306      	orrs	r6, r0
 80159c0:	3568      	adds	r5, #104	; 0x68
 80159c2:	e7ee      	b.n	80159a2 <_fwalk_reent+0x1a>

080159c4 <rshift>:
 80159c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159c6:	6906      	ldr	r6, [r0, #16]
 80159c8:	114b      	asrs	r3, r1, #5
 80159ca:	429e      	cmp	r6, r3
 80159cc:	f100 0414 	add.w	r4, r0, #20
 80159d0:	dd30      	ble.n	8015a34 <rshift+0x70>
 80159d2:	f011 011f 	ands.w	r1, r1, #31
 80159d6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80159da:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80159de:	d108      	bne.n	80159f2 <rshift+0x2e>
 80159e0:	4621      	mov	r1, r4
 80159e2:	42b2      	cmp	r2, r6
 80159e4:	460b      	mov	r3, r1
 80159e6:	d211      	bcs.n	8015a0c <rshift+0x48>
 80159e8:	f852 3b04 	ldr.w	r3, [r2], #4
 80159ec:	f841 3b04 	str.w	r3, [r1], #4
 80159f0:	e7f7      	b.n	80159e2 <rshift+0x1e>
 80159f2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80159f6:	f1c1 0c20 	rsb	ip, r1, #32
 80159fa:	40cd      	lsrs	r5, r1
 80159fc:	3204      	adds	r2, #4
 80159fe:	4623      	mov	r3, r4
 8015a00:	42b2      	cmp	r2, r6
 8015a02:	4617      	mov	r7, r2
 8015a04:	d30c      	bcc.n	8015a20 <rshift+0x5c>
 8015a06:	601d      	str	r5, [r3, #0]
 8015a08:	b105      	cbz	r5, 8015a0c <rshift+0x48>
 8015a0a:	3304      	adds	r3, #4
 8015a0c:	1b1a      	subs	r2, r3, r4
 8015a0e:	42a3      	cmp	r3, r4
 8015a10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015a14:	bf08      	it	eq
 8015a16:	2300      	moveq	r3, #0
 8015a18:	6102      	str	r2, [r0, #16]
 8015a1a:	bf08      	it	eq
 8015a1c:	6143      	streq	r3, [r0, #20]
 8015a1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a20:	683f      	ldr	r7, [r7, #0]
 8015a22:	fa07 f70c 	lsl.w	r7, r7, ip
 8015a26:	433d      	orrs	r5, r7
 8015a28:	f843 5b04 	str.w	r5, [r3], #4
 8015a2c:	f852 5b04 	ldr.w	r5, [r2], #4
 8015a30:	40cd      	lsrs	r5, r1
 8015a32:	e7e5      	b.n	8015a00 <rshift+0x3c>
 8015a34:	4623      	mov	r3, r4
 8015a36:	e7e9      	b.n	8015a0c <rshift+0x48>

08015a38 <__hexdig_fun>:
 8015a38:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015a3c:	2b09      	cmp	r3, #9
 8015a3e:	d802      	bhi.n	8015a46 <__hexdig_fun+0xe>
 8015a40:	3820      	subs	r0, #32
 8015a42:	b2c0      	uxtb	r0, r0
 8015a44:	4770      	bx	lr
 8015a46:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015a4a:	2b05      	cmp	r3, #5
 8015a4c:	d801      	bhi.n	8015a52 <__hexdig_fun+0x1a>
 8015a4e:	3847      	subs	r0, #71	; 0x47
 8015a50:	e7f7      	b.n	8015a42 <__hexdig_fun+0xa>
 8015a52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015a56:	2b05      	cmp	r3, #5
 8015a58:	d801      	bhi.n	8015a5e <__hexdig_fun+0x26>
 8015a5a:	3827      	subs	r0, #39	; 0x27
 8015a5c:	e7f1      	b.n	8015a42 <__hexdig_fun+0xa>
 8015a5e:	2000      	movs	r0, #0
 8015a60:	4770      	bx	lr

08015a62 <__gethex>:
 8015a62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a66:	b08b      	sub	sp, #44	; 0x2c
 8015a68:	468a      	mov	sl, r1
 8015a6a:	9002      	str	r0, [sp, #8]
 8015a6c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8015a6e:	9306      	str	r3, [sp, #24]
 8015a70:	4690      	mov	r8, r2
 8015a72:	f000 fadf 	bl	8016034 <__localeconv_l>
 8015a76:	6803      	ldr	r3, [r0, #0]
 8015a78:	9303      	str	r3, [sp, #12]
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7ea fbc0 	bl	8000200 <strlen>
 8015a80:	9b03      	ldr	r3, [sp, #12]
 8015a82:	9001      	str	r0, [sp, #4]
 8015a84:	4403      	add	r3, r0
 8015a86:	f04f 0b00 	mov.w	fp, #0
 8015a8a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015a8e:	9307      	str	r3, [sp, #28]
 8015a90:	f8da 3000 	ldr.w	r3, [sl]
 8015a94:	3302      	adds	r3, #2
 8015a96:	461f      	mov	r7, r3
 8015a98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015a9c:	2830      	cmp	r0, #48	; 0x30
 8015a9e:	d06c      	beq.n	8015b7a <__gethex+0x118>
 8015aa0:	f7ff ffca 	bl	8015a38 <__hexdig_fun>
 8015aa4:	4604      	mov	r4, r0
 8015aa6:	2800      	cmp	r0, #0
 8015aa8:	d16a      	bne.n	8015b80 <__gethex+0x11e>
 8015aaa:	9a01      	ldr	r2, [sp, #4]
 8015aac:	9903      	ldr	r1, [sp, #12]
 8015aae:	4638      	mov	r0, r7
 8015ab0:	f001 fe3e 	bl	8017730 <strncmp>
 8015ab4:	2800      	cmp	r0, #0
 8015ab6:	d166      	bne.n	8015b86 <__gethex+0x124>
 8015ab8:	9b01      	ldr	r3, [sp, #4]
 8015aba:	5cf8      	ldrb	r0, [r7, r3]
 8015abc:	18fe      	adds	r6, r7, r3
 8015abe:	f7ff ffbb 	bl	8015a38 <__hexdig_fun>
 8015ac2:	2800      	cmp	r0, #0
 8015ac4:	d062      	beq.n	8015b8c <__gethex+0x12a>
 8015ac6:	4633      	mov	r3, r6
 8015ac8:	7818      	ldrb	r0, [r3, #0]
 8015aca:	2830      	cmp	r0, #48	; 0x30
 8015acc:	461f      	mov	r7, r3
 8015ace:	f103 0301 	add.w	r3, r3, #1
 8015ad2:	d0f9      	beq.n	8015ac8 <__gethex+0x66>
 8015ad4:	f7ff ffb0 	bl	8015a38 <__hexdig_fun>
 8015ad8:	fab0 f580 	clz	r5, r0
 8015adc:	096d      	lsrs	r5, r5, #5
 8015ade:	4634      	mov	r4, r6
 8015ae0:	f04f 0b01 	mov.w	fp, #1
 8015ae4:	463a      	mov	r2, r7
 8015ae6:	4616      	mov	r6, r2
 8015ae8:	3201      	adds	r2, #1
 8015aea:	7830      	ldrb	r0, [r6, #0]
 8015aec:	f7ff ffa4 	bl	8015a38 <__hexdig_fun>
 8015af0:	2800      	cmp	r0, #0
 8015af2:	d1f8      	bne.n	8015ae6 <__gethex+0x84>
 8015af4:	9a01      	ldr	r2, [sp, #4]
 8015af6:	9903      	ldr	r1, [sp, #12]
 8015af8:	4630      	mov	r0, r6
 8015afa:	f001 fe19 	bl	8017730 <strncmp>
 8015afe:	b950      	cbnz	r0, 8015b16 <__gethex+0xb4>
 8015b00:	b954      	cbnz	r4, 8015b18 <__gethex+0xb6>
 8015b02:	9b01      	ldr	r3, [sp, #4]
 8015b04:	18f4      	adds	r4, r6, r3
 8015b06:	4622      	mov	r2, r4
 8015b08:	4616      	mov	r6, r2
 8015b0a:	3201      	adds	r2, #1
 8015b0c:	7830      	ldrb	r0, [r6, #0]
 8015b0e:	f7ff ff93 	bl	8015a38 <__hexdig_fun>
 8015b12:	2800      	cmp	r0, #0
 8015b14:	d1f8      	bne.n	8015b08 <__gethex+0xa6>
 8015b16:	b10c      	cbz	r4, 8015b1c <__gethex+0xba>
 8015b18:	1ba4      	subs	r4, r4, r6
 8015b1a:	00a4      	lsls	r4, r4, #2
 8015b1c:	7833      	ldrb	r3, [r6, #0]
 8015b1e:	2b50      	cmp	r3, #80	; 0x50
 8015b20:	d001      	beq.n	8015b26 <__gethex+0xc4>
 8015b22:	2b70      	cmp	r3, #112	; 0x70
 8015b24:	d140      	bne.n	8015ba8 <__gethex+0x146>
 8015b26:	7873      	ldrb	r3, [r6, #1]
 8015b28:	2b2b      	cmp	r3, #43	; 0x2b
 8015b2a:	d031      	beq.n	8015b90 <__gethex+0x12e>
 8015b2c:	2b2d      	cmp	r3, #45	; 0x2d
 8015b2e:	d033      	beq.n	8015b98 <__gethex+0x136>
 8015b30:	1c71      	adds	r1, r6, #1
 8015b32:	f04f 0900 	mov.w	r9, #0
 8015b36:	7808      	ldrb	r0, [r1, #0]
 8015b38:	f7ff ff7e 	bl	8015a38 <__hexdig_fun>
 8015b3c:	1e43      	subs	r3, r0, #1
 8015b3e:	b2db      	uxtb	r3, r3
 8015b40:	2b18      	cmp	r3, #24
 8015b42:	d831      	bhi.n	8015ba8 <__gethex+0x146>
 8015b44:	f1a0 0210 	sub.w	r2, r0, #16
 8015b48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015b4c:	f7ff ff74 	bl	8015a38 <__hexdig_fun>
 8015b50:	1e43      	subs	r3, r0, #1
 8015b52:	b2db      	uxtb	r3, r3
 8015b54:	2b18      	cmp	r3, #24
 8015b56:	d922      	bls.n	8015b9e <__gethex+0x13c>
 8015b58:	f1b9 0f00 	cmp.w	r9, #0
 8015b5c:	d000      	beq.n	8015b60 <__gethex+0xfe>
 8015b5e:	4252      	negs	r2, r2
 8015b60:	4414      	add	r4, r2
 8015b62:	f8ca 1000 	str.w	r1, [sl]
 8015b66:	b30d      	cbz	r5, 8015bac <__gethex+0x14a>
 8015b68:	f1bb 0f00 	cmp.w	fp, #0
 8015b6c:	bf0c      	ite	eq
 8015b6e:	2706      	moveq	r7, #6
 8015b70:	2700      	movne	r7, #0
 8015b72:	4638      	mov	r0, r7
 8015b74:	b00b      	add	sp, #44	; 0x2c
 8015b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b7a:	f10b 0b01 	add.w	fp, fp, #1
 8015b7e:	e78a      	b.n	8015a96 <__gethex+0x34>
 8015b80:	2500      	movs	r5, #0
 8015b82:	462c      	mov	r4, r5
 8015b84:	e7ae      	b.n	8015ae4 <__gethex+0x82>
 8015b86:	463e      	mov	r6, r7
 8015b88:	2501      	movs	r5, #1
 8015b8a:	e7c7      	b.n	8015b1c <__gethex+0xba>
 8015b8c:	4604      	mov	r4, r0
 8015b8e:	e7fb      	b.n	8015b88 <__gethex+0x126>
 8015b90:	f04f 0900 	mov.w	r9, #0
 8015b94:	1cb1      	adds	r1, r6, #2
 8015b96:	e7ce      	b.n	8015b36 <__gethex+0xd4>
 8015b98:	f04f 0901 	mov.w	r9, #1
 8015b9c:	e7fa      	b.n	8015b94 <__gethex+0x132>
 8015b9e:	230a      	movs	r3, #10
 8015ba0:	fb03 0202 	mla	r2, r3, r2, r0
 8015ba4:	3a10      	subs	r2, #16
 8015ba6:	e7cf      	b.n	8015b48 <__gethex+0xe6>
 8015ba8:	4631      	mov	r1, r6
 8015baa:	e7da      	b.n	8015b62 <__gethex+0x100>
 8015bac:	1bf3      	subs	r3, r6, r7
 8015bae:	3b01      	subs	r3, #1
 8015bb0:	4629      	mov	r1, r5
 8015bb2:	2b07      	cmp	r3, #7
 8015bb4:	dc49      	bgt.n	8015c4a <__gethex+0x1e8>
 8015bb6:	9802      	ldr	r0, [sp, #8]
 8015bb8:	f000 fae7 	bl	801618a <_Balloc>
 8015bbc:	9b01      	ldr	r3, [sp, #4]
 8015bbe:	f100 0914 	add.w	r9, r0, #20
 8015bc2:	f04f 0b00 	mov.w	fp, #0
 8015bc6:	f1c3 0301 	rsb	r3, r3, #1
 8015bca:	4605      	mov	r5, r0
 8015bcc:	f8cd 9010 	str.w	r9, [sp, #16]
 8015bd0:	46da      	mov	sl, fp
 8015bd2:	9308      	str	r3, [sp, #32]
 8015bd4:	42b7      	cmp	r7, r6
 8015bd6:	d33b      	bcc.n	8015c50 <__gethex+0x1ee>
 8015bd8:	9804      	ldr	r0, [sp, #16]
 8015bda:	f840 ab04 	str.w	sl, [r0], #4
 8015bde:	eba0 0009 	sub.w	r0, r0, r9
 8015be2:	1080      	asrs	r0, r0, #2
 8015be4:	6128      	str	r0, [r5, #16]
 8015be6:	0147      	lsls	r7, r0, #5
 8015be8:	4650      	mov	r0, sl
 8015bea:	f000 fb92 	bl	8016312 <__hi0bits>
 8015bee:	f8d8 6000 	ldr.w	r6, [r8]
 8015bf2:	1a3f      	subs	r7, r7, r0
 8015bf4:	42b7      	cmp	r7, r6
 8015bf6:	dd64      	ble.n	8015cc2 <__gethex+0x260>
 8015bf8:	1bbf      	subs	r7, r7, r6
 8015bfa:	4639      	mov	r1, r7
 8015bfc:	4628      	mov	r0, r5
 8015bfe:	f000 fea1 	bl	8016944 <__any_on>
 8015c02:	4682      	mov	sl, r0
 8015c04:	b178      	cbz	r0, 8015c26 <__gethex+0x1c4>
 8015c06:	1e7b      	subs	r3, r7, #1
 8015c08:	1159      	asrs	r1, r3, #5
 8015c0a:	f003 021f 	and.w	r2, r3, #31
 8015c0e:	f04f 0a01 	mov.w	sl, #1
 8015c12:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015c16:	fa0a f202 	lsl.w	r2, sl, r2
 8015c1a:	420a      	tst	r2, r1
 8015c1c:	d003      	beq.n	8015c26 <__gethex+0x1c4>
 8015c1e:	4553      	cmp	r3, sl
 8015c20:	dc46      	bgt.n	8015cb0 <__gethex+0x24e>
 8015c22:	f04f 0a02 	mov.w	sl, #2
 8015c26:	4639      	mov	r1, r7
 8015c28:	4628      	mov	r0, r5
 8015c2a:	f7ff fecb 	bl	80159c4 <rshift>
 8015c2e:	443c      	add	r4, r7
 8015c30:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c34:	42a3      	cmp	r3, r4
 8015c36:	da52      	bge.n	8015cde <__gethex+0x27c>
 8015c38:	4629      	mov	r1, r5
 8015c3a:	9802      	ldr	r0, [sp, #8]
 8015c3c:	f000 fad9 	bl	80161f2 <_Bfree>
 8015c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015c42:	2300      	movs	r3, #0
 8015c44:	6013      	str	r3, [r2, #0]
 8015c46:	27a3      	movs	r7, #163	; 0xa3
 8015c48:	e793      	b.n	8015b72 <__gethex+0x110>
 8015c4a:	3101      	adds	r1, #1
 8015c4c:	105b      	asrs	r3, r3, #1
 8015c4e:	e7b0      	b.n	8015bb2 <__gethex+0x150>
 8015c50:	1e73      	subs	r3, r6, #1
 8015c52:	9305      	str	r3, [sp, #20]
 8015c54:	9a07      	ldr	r2, [sp, #28]
 8015c56:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015c5a:	4293      	cmp	r3, r2
 8015c5c:	d018      	beq.n	8015c90 <__gethex+0x22e>
 8015c5e:	f1bb 0f20 	cmp.w	fp, #32
 8015c62:	d107      	bne.n	8015c74 <__gethex+0x212>
 8015c64:	9b04      	ldr	r3, [sp, #16]
 8015c66:	f8c3 a000 	str.w	sl, [r3]
 8015c6a:	3304      	adds	r3, #4
 8015c6c:	f04f 0a00 	mov.w	sl, #0
 8015c70:	9304      	str	r3, [sp, #16]
 8015c72:	46d3      	mov	fp, sl
 8015c74:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015c78:	f7ff fede 	bl	8015a38 <__hexdig_fun>
 8015c7c:	f000 000f 	and.w	r0, r0, #15
 8015c80:	fa00 f00b 	lsl.w	r0, r0, fp
 8015c84:	ea4a 0a00 	orr.w	sl, sl, r0
 8015c88:	f10b 0b04 	add.w	fp, fp, #4
 8015c8c:	9b05      	ldr	r3, [sp, #20]
 8015c8e:	e00d      	b.n	8015cac <__gethex+0x24a>
 8015c90:	9b05      	ldr	r3, [sp, #20]
 8015c92:	9a08      	ldr	r2, [sp, #32]
 8015c94:	4413      	add	r3, r2
 8015c96:	42bb      	cmp	r3, r7
 8015c98:	d3e1      	bcc.n	8015c5e <__gethex+0x1fc>
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	9a01      	ldr	r2, [sp, #4]
 8015c9e:	9903      	ldr	r1, [sp, #12]
 8015ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8015ca2:	f001 fd45 	bl	8017730 <strncmp>
 8015ca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d1d8      	bne.n	8015c5e <__gethex+0x1fc>
 8015cac:	461e      	mov	r6, r3
 8015cae:	e791      	b.n	8015bd4 <__gethex+0x172>
 8015cb0:	1eb9      	subs	r1, r7, #2
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	f000 fe46 	bl	8016944 <__any_on>
 8015cb8:	2800      	cmp	r0, #0
 8015cba:	d0b2      	beq.n	8015c22 <__gethex+0x1c0>
 8015cbc:	f04f 0a03 	mov.w	sl, #3
 8015cc0:	e7b1      	b.n	8015c26 <__gethex+0x1c4>
 8015cc2:	da09      	bge.n	8015cd8 <__gethex+0x276>
 8015cc4:	1bf7      	subs	r7, r6, r7
 8015cc6:	4629      	mov	r1, r5
 8015cc8:	463a      	mov	r2, r7
 8015cca:	9802      	ldr	r0, [sp, #8]
 8015ccc:	f000 fc5c 	bl	8016588 <__lshift>
 8015cd0:	1be4      	subs	r4, r4, r7
 8015cd2:	4605      	mov	r5, r0
 8015cd4:	f100 0914 	add.w	r9, r0, #20
 8015cd8:	f04f 0a00 	mov.w	sl, #0
 8015cdc:	e7a8      	b.n	8015c30 <__gethex+0x1ce>
 8015cde:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015ce2:	42a0      	cmp	r0, r4
 8015ce4:	dd6a      	ble.n	8015dbc <__gethex+0x35a>
 8015ce6:	1b04      	subs	r4, r0, r4
 8015ce8:	42a6      	cmp	r6, r4
 8015cea:	dc2e      	bgt.n	8015d4a <__gethex+0x2e8>
 8015cec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015cf0:	2b02      	cmp	r3, #2
 8015cf2:	d022      	beq.n	8015d3a <__gethex+0x2d8>
 8015cf4:	2b03      	cmp	r3, #3
 8015cf6:	d024      	beq.n	8015d42 <__gethex+0x2e0>
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d115      	bne.n	8015d28 <__gethex+0x2c6>
 8015cfc:	42a6      	cmp	r6, r4
 8015cfe:	d113      	bne.n	8015d28 <__gethex+0x2c6>
 8015d00:	2e01      	cmp	r6, #1
 8015d02:	dc0b      	bgt.n	8015d1c <__gethex+0x2ba>
 8015d04:	9a06      	ldr	r2, [sp, #24]
 8015d06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015d0a:	6013      	str	r3, [r2, #0]
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	612b      	str	r3, [r5, #16]
 8015d10:	f8c9 3000 	str.w	r3, [r9]
 8015d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015d16:	2762      	movs	r7, #98	; 0x62
 8015d18:	601d      	str	r5, [r3, #0]
 8015d1a:	e72a      	b.n	8015b72 <__gethex+0x110>
 8015d1c:	1e71      	subs	r1, r6, #1
 8015d1e:	4628      	mov	r0, r5
 8015d20:	f000 fe10 	bl	8016944 <__any_on>
 8015d24:	2800      	cmp	r0, #0
 8015d26:	d1ed      	bne.n	8015d04 <__gethex+0x2a2>
 8015d28:	4629      	mov	r1, r5
 8015d2a:	9802      	ldr	r0, [sp, #8]
 8015d2c:	f000 fa61 	bl	80161f2 <_Bfree>
 8015d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015d32:	2300      	movs	r3, #0
 8015d34:	6013      	str	r3, [r2, #0]
 8015d36:	2750      	movs	r7, #80	; 0x50
 8015d38:	e71b      	b.n	8015b72 <__gethex+0x110>
 8015d3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d0e1      	beq.n	8015d04 <__gethex+0x2a2>
 8015d40:	e7f2      	b.n	8015d28 <__gethex+0x2c6>
 8015d42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d1dd      	bne.n	8015d04 <__gethex+0x2a2>
 8015d48:	e7ee      	b.n	8015d28 <__gethex+0x2c6>
 8015d4a:	1e67      	subs	r7, r4, #1
 8015d4c:	f1ba 0f00 	cmp.w	sl, #0
 8015d50:	d131      	bne.n	8015db6 <__gethex+0x354>
 8015d52:	b127      	cbz	r7, 8015d5e <__gethex+0x2fc>
 8015d54:	4639      	mov	r1, r7
 8015d56:	4628      	mov	r0, r5
 8015d58:	f000 fdf4 	bl	8016944 <__any_on>
 8015d5c:	4682      	mov	sl, r0
 8015d5e:	117a      	asrs	r2, r7, #5
 8015d60:	2301      	movs	r3, #1
 8015d62:	f007 071f 	and.w	r7, r7, #31
 8015d66:	fa03 f707 	lsl.w	r7, r3, r7
 8015d6a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8015d6e:	4621      	mov	r1, r4
 8015d70:	421f      	tst	r7, r3
 8015d72:	4628      	mov	r0, r5
 8015d74:	bf18      	it	ne
 8015d76:	f04a 0a02 	orrne.w	sl, sl, #2
 8015d7a:	1b36      	subs	r6, r6, r4
 8015d7c:	f7ff fe22 	bl	80159c4 <rshift>
 8015d80:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015d84:	2702      	movs	r7, #2
 8015d86:	f1ba 0f00 	cmp.w	sl, #0
 8015d8a:	d048      	beq.n	8015e1e <__gethex+0x3bc>
 8015d8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015d90:	2b02      	cmp	r3, #2
 8015d92:	d015      	beq.n	8015dc0 <__gethex+0x35e>
 8015d94:	2b03      	cmp	r3, #3
 8015d96:	d017      	beq.n	8015dc8 <__gethex+0x366>
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d109      	bne.n	8015db0 <__gethex+0x34e>
 8015d9c:	f01a 0f02 	tst.w	sl, #2
 8015da0:	d006      	beq.n	8015db0 <__gethex+0x34e>
 8015da2:	f8d9 3000 	ldr.w	r3, [r9]
 8015da6:	ea4a 0a03 	orr.w	sl, sl, r3
 8015daa:	f01a 0f01 	tst.w	sl, #1
 8015dae:	d10e      	bne.n	8015dce <__gethex+0x36c>
 8015db0:	f047 0710 	orr.w	r7, r7, #16
 8015db4:	e033      	b.n	8015e1e <__gethex+0x3bc>
 8015db6:	f04f 0a01 	mov.w	sl, #1
 8015dba:	e7d0      	b.n	8015d5e <__gethex+0x2fc>
 8015dbc:	2701      	movs	r7, #1
 8015dbe:	e7e2      	b.n	8015d86 <__gethex+0x324>
 8015dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dc2:	f1c3 0301 	rsb	r3, r3, #1
 8015dc6:	9315      	str	r3, [sp, #84]	; 0x54
 8015dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d0f0      	beq.n	8015db0 <__gethex+0x34e>
 8015dce:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8015dd2:	f105 0314 	add.w	r3, r5, #20
 8015dd6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8015dda:	eb03 010a 	add.w	r1, r3, sl
 8015dde:	f04f 0c00 	mov.w	ip, #0
 8015de2:	4618      	mov	r0, r3
 8015de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015de8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015dec:	d01c      	beq.n	8015e28 <__gethex+0x3c6>
 8015dee:	3201      	adds	r2, #1
 8015df0:	6002      	str	r2, [r0, #0]
 8015df2:	2f02      	cmp	r7, #2
 8015df4:	f105 0314 	add.w	r3, r5, #20
 8015df8:	d138      	bne.n	8015e6c <__gethex+0x40a>
 8015dfa:	f8d8 2000 	ldr.w	r2, [r8]
 8015dfe:	3a01      	subs	r2, #1
 8015e00:	42b2      	cmp	r2, r6
 8015e02:	d10a      	bne.n	8015e1a <__gethex+0x3b8>
 8015e04:	1171      	asrs	r1, r6, #5
 8015e06:	2201      	movs	r2, #1
 8015e08:	f006 061f 	and.w	r6, r6, #31
 8015e0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015e10:	fa02 f606 	lsl.w	r6, r2, r6
 8015e14:	421e      	tst	r6, r3
 8015e16:	bf18      	it	ne
 8015e18:	4617      	movne	r7, r2
 8015e1a:	f047 0720 	orr.w	r7, r7, #32
 8015e1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015e20:	601d      	str	r5, [r3, #0]
 8015e22:	9b06      	ldr	r3, [sp, #24]
 8015e24:	601c      	str	r4, [r3, #0]
 8015e26:	e6a4      	b.n	8015b72 <__gethex+0x110>
 8015e28:	4299      	cmp	r1, r3
 8015e2a:	f843 cc04 	str.w	ip, [r3, #-4]
 8015e2e:	d8d8      	bhi.n	8015de2 <__gethex+0x380>
 8015e30:	68ab      	ldr	r3, [r5, #8]
 8015e32:	4599      	cmp	r9, r3
 8015e34:	db12      	blt.n	8015e5c <__gethex+0x3fa>
 8015e36:	6869      	ldr	r1, [r5, #4]
 8015e38:	9802      	ldr	r0, [sp, #8]
 8015e3a:	3101      	adds	r1, #1
 8015e3c:	f000 f9a5 	bl	801618a <_Balloc>
 8015e40:	692a      	ldr	r2, [r5, #16]
 8015e42:	3202      	adds	r2, #2
 8015e44:	f105 010c 	add.w	r1, r5, #12
 8015e48:	4683      	mov	fp, r0
 8015e4a:	0092      	lsls	r2, r2, #2
 8015e4c:	300c      	adds	r0, #12
 8015e4e:	f000 f991 	bl	8016174 <memcpy>
 8015e52:	4629      	mov	r1, r5
 8015e54:	9802      	ldr	r0, [sp, #8]
 8015e56:	f000 f9cc 	bl	80161f2 <_Bfree>
 8015e5a:	465d      	mov	r5, fp
 8015e5c:	692b      	ldr	r3, [r5, #16]
 8015e5e:	1c5a      	adds	r2, r3, #1
 8015e60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015e64:	612a      	str	r2, [r5, #16]
 8015e66:	2201      	movs	r2, #1
 8015e68:	615a      	str	r2, [r3, #20]
 8015e6a:	e7c2      	b.n	8015df2 <__gethex+0x390>
 8015e6c:	692a      	ldr	r2, [r5, #16]
 8015e6e:	454a      	cmp	r2, r9
 8015e70:	dd0b      	ble.n	8015e8a <__gethex+0x428>
 8015e72:	2101      	movs	r1, #1
 8015e74:	4628      	mov	r0, r5
 8015e76:	f7ff fda5 	bl	80159c4 <rshift>
 8015e7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015e7e:	3401      	adds	r4, #1
 8015e80:	42a3      	cmp	r3, r4
 8015e82:	f6ff aed9 	blt.w	8015c38 <__gethex+0x1d6>
 8015e86:	2701      	movs	r7, #1
 8015e88:	e7c7      	b.n	8015e1a <__gethex+0x3b8>
 8015e8a:	f016 061f 	ands.w	r6, r6, #31
 8015e8e:	d0fa      	beq.n	8015e86 <__gethex+0x424>
 8015e90:	449a      	add	sl, r3
 8015e92:	f1c6 0620 	rsb	r6, r6, #32
 8015e96:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8015e9a:	f000 fa3a 	bl	8016312 <__hi0bits>
 8015e9e:	42b0      	cmp	r0, r6
 8015ea0:	dbe7      	blt.n	8015e72 <__gethex+0x410>
 8015ea2:	e7f0      	b.n	8015e86 <__gethex+0x424>

08015ea4 <L_shift>:
 8015ea4:	f1c2 0208 	rsb	r2, r2, #8
 8015ea8:	0092      	lsls	r2, r2, #2
 8015eaa:	b570      	push	{r4, r5, r6, lr}
 8015eac:	f1c2 0620 	rsb	r6, r2, #32
 8015eb0:	6843      	ldr	r3, [r0, #4]
 8015eb2:	6804      	ldr	r4, [r0, #0]
 8015eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8015eb8:	432c      	orrs	r4, r5
 8015eba:	40d3      	lsrs	r3, r2
 8015ebc:	6004      	str	r4, [r0, #0]
 8015ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8015ec2:	4288      	cmp	r0, r1
 8015ec4:	d3f4      	bcc.n	8015eb0 <L_shift+0xc>
 8015ec6:	bd70      	pop	{r4, r5, r6, pc}

08015ec8 <__match>:
 8015ec8:	b530      	push	{r4, r5, lr}
 8015eca:	6803      	ldr	r3, [r0, #0]
 8015ecc:	3301      	adds	r3, #1
 8015ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ed2:	b914      	cbnz	r4, 8015eda <__match+0x12>
 8015ed4:	6003      	str	r3, [r0, #0]
 8015ed6:	2001      	movs	r0, #1
 8015ed8:	bd30      	pop	{r4, r5, pc}
 8015eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015ee2:	2d19      	cmp	r5, #25
 8015ee4:	bf98      	it	ls
 8015ee6:	3220      	addls	r2, #32
 8015ee8:	42a2      	cmp	r2, r4
 8015eea:	d0f0      	beq.n	8015ece <__match+0x6>
 8015eec:	2000      	movs	r0, #0
 8015eee:	e7f3      	b.n	8015ed8 <__match+0x10>

08015ef0 <__hexnan>:
 8015ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef4:	680b      	ldr	r3, [r1, #0]
 8015ef6:	6801      	ldr	r1, [r0, #0]
 8015ef8:	115f      	asrs	r7, r3, #5
 8015efa:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8015efe:	f013 031f 	ands.w	r3, r3, #31
 8015f02:	b087      	sub	sp, #28
 8015f04:	bf18      	it	ne
 8015f06:	3704      	addne	r7, #4
 8015f08:	2500      	movs	r5, #0
 8015f0a:	1f3e      	subs	r6, r7, #4
 8015f0c:	4682      	mov	sl, r0
 8015f0e:	4690      	mov	r8, r2
 8015f10:	9301      	str	r3, [sp, #4]
 8015f12:	f847 5c04 	str.w	r5, [r7, #-4]
 8015f16:	46b1      	mov	r9, r6
 8015f18:	4634      	mov	r4, r6
 8015f1a:	9502      	str	r5, [sp, #8]
 8015f1c:	46ab      	mov	fp, r5
 8015f1e:	784a      	ldrb	r2, [r1, #1]
 8015f20:	1c4b      	adds	r3, r1, #1
 8015f22:	9303      	str	r3, [sp, #12]
 8015f24:	b342      	cbz	r2, 8015f78 <__hexnan+0x88>
 8015f26:	4610      	mov	r0, r2
 8015f28:	9105      	str	r1, [sp, #20]
 8015f2a:	9204      	str	r2, [sp, #16]
 8015f2c:	f7ff fd84 	bl	8015a38 <__hexdig_fun>
 8015f30:	2800      	cmp	r0, #0
 8015f32:	d143      	bne.n	8015fbc <__hexnan+0xcc>
 8015f34:	9a04      	ldr	r2, [sp, #16]
 8015f36:	9905      	ldr	r1, [sp, #20]
 8015f38:	2a20      	cmp	r2, #32
 8015f3a:	d818      	bhi.n	8015f6e <__hexnan+0x7e>
 8015f3c:	9b02      	ldr	r3, [sp, #8]
 8015f3e:	459b      	cmp	fp, r3
 8015f40:	dd13      	ble.n	8015f6a <__hexnan+0x7a>
 8015f42:	454c      	cmp	r4, r9
 8015f44:	d206      	bcs.n	8015f54 <__hexnan+0x64>
 8015f46:	2d07      	cmp	r5, #7
 8015f48:	dc04      	bgt.n	8015f54 <__hexnan+0x64>
 8015f4a:	462a      	mov	r2, r5
 8015f4c:	4649      	mov	r1, r9
 8015f4e:	4620      	mov	r0, r4
 8015f50:	f7ff ffa8 	bl	8015ea4 <L_shift>
 8015f54:	4544      	cmp	r4, r8
 8015f56:	d944      	bls.n	8015fe2 <__hexnan+0xf2>
 8015f58:	2300      	movs	r3, #0
 8015f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8015f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015f62:	f8cd b008 	str.w	fp, [sp, #8]
 8015f66:	464c      	mov	r4, r9
 8015f68:	461d      	mov	r5, r3
 8015f6a:	9903      	ldr	r1, [sp, #12]
 8015f6c:	e7d7      	b.n	8015f1e <__hexnan+0x2e>
 8015f6e:	2a29      	cmp	r2, #41	; 0x29
 8015f70:	d14a      	bne.n	8016008 <__hexnan+0x118>
 8015f72:	3102      	adds	r1, #2
 8015f74:	f8ca 1000 	str.w	r1, [sl]
 8015f78:	f1bb 0f00 	cmp.w	fp, #0
 8015f7c:	d044      	beq.n	8016008 <__hexnan+0x118>
 8015f7e:	454c      	cmp	r4, r9
 8015f80:	d206      	bcs.n	8015f90 <__hexnan+0xa0>
 8015f82:	2d07      	cmp	r5, #7
 8015f84:	dc04      	bgt.n	8015f90 <__hexnan+0xa0>
 8015f86:	462a      	mov	r2, r5
 8015f88:	4649      	mov	r1, r9
 8015f8a:	4620      	mov	r0, r4
 8015f8c:	f7ff ff8a 	bl	8015ea4 <L_shift>
 8015f90:	4544      	cmp	r4, r8
 8015f92:	d928      	bls.n	8015fe6 <__hexnan+0xf6>
 8015f94:	4643      	mov	r3, r8
 8015f96:	f854 2b04 	ldr.w	r2, [r4], #4
 8015f9a:	f843 2b04 	str.w	r2, [r3], #4
 8015f9e:	42a6      	cmp	r6, r4
 8015fa0:	d2f9      	bcs.n	8015f96 <__hexnan+0xa6>
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	f843 2b04 	str.w	r2, [r3], #4
 8015fa8:	429e      	cmp	r6, r3
 8015faa:	d2fb      	bcs.n	8015fa4 <__hexnan+0xb4>
 8015fac:	6833      	ldr	r3, [r6, #0]
 8015fae:	b91b      	cbnz	r3, 8015fb8 <__hexnan+0xc8>
 8015fb0:	4546      	cmp	r6, r8
 8015fb2:	d127      	bne.n	8016004 <__hexnan+0x114>
 8015fb4:	2301      	movs	r3, #1
 8015fb6:	6033      	str	r3, [r6, #0]
 8015fb8:	2005      	movs	r0, #5
 8015fba:	e026      	b.n	801600a <__hexnan+0x11a>
 8015fbc:	3501      	adds	r5, #1
 8015fbe:	2d08      	cmp	r5, #8
 8015fc0:	f10b 0b01 	add.w	fp, fp, #1
 8015fc4:	dd06      	ble.n	8015fd4 <__hexnan+0xe4>
 8015fc6:	4544      	cmp	r4, r8
 8015fc8:	d9cf      	bls.n	8015f6a <__hexnan+0x7a>
 8015fca:	2300      	movs	r3, #0
 8015fcc:	f844 3c04 	str.w	r3, [r4, #-4]
 8015fd0:	2501      	movs	r5, #1
 8015fd2:	3c04      	subs	r4, #4
 8015fd4:	6822      	ldr	r2, [r4, #0]
 8015fd6:	f000 000f 	and.w	r0, r0, #15
 8015fda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8015fde:	6020      	str	r0, [r4, #0]
 8015fe0:	e7c3      	b.n	8015f6a <__hexnan+0x7a>
 8015fe2:	2508      	movs	r5, #8
 8015fe4:	e7c1      	b.n	8015f6a <__hexnan+0x7a>
 8015fe6:	9b01      	ldr	r3, [sp, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d0df      	beq.n	8015fac <__hexnan+0xbc>
 8015fec:	f04f 32ff 	mov.w	r2, #4294967295
 8015ff0:	f1c3 0320 	rsb	r3, r3, #32
 8015ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8015ff8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8015ffc:	401a      	ands	r2, r3
 8015ffe:	f847 2c04 	str.w	r2, [r7, #-4]
 8016002:	e7d3      	b.n	8015fac <__hexnan+0xbc>
 8016004:	3e04      	subs	r6, #4
 8016006:	e7d1      	b.n	8015fac <__hexnan+0xbc>
 8016008:	2004      	movs	r0, #4
 801600a:	b007      	add	sp, #28
 801600c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016010 <__locale_ctype_ptr_l>:
 8016010:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016014:	4770      	bx	lr
	...

08016018 <__locale_ctype_ptr>:
 8016018:	4b04      	ldr	r3, [pc, #16]	; (801602c <__locale_ctype_ptr+0x14>)
 801601a:	4a05      	ldr	r2, [pc, #20]	; (8016030 <__locale_ctype_ptr+0x18>)
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	6a1b      	ldr	r3, [r3, #32]
 8016020:	2b00      	cmp	r3, #0
 8016022:	bf08      	it	eq
 8016024:	4613      	moveq	r3, r2
 8016026:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801602a:	4770      	bx	lr
 801602c:	2000000c 	.word	0x2000000c
 8016030:	20000070 	.word	0x20000070

08016034 <__localeconv_l>:
 8016034:	30f0      	adds	r0, #240	; 0xf0
 8016036:	4770      	bx	lr

08016038 <_localeconv_r>:
 8016038:	4b04      	ldr	r3, [pc, #16]	; (801604c <_localeconv_r+0x14>)
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	6a18      	ldr	r0, [r3, #32]
 801603e:	4b04      	ldr	r3, [pc, #16]	; (8016050 <_localeconv_r+0x18>)
 8016040:	2800      	cmp	r0, #0
 8016042:	bf08      	it	eq
 8016044:	4618      	moveq	r0, r3
 8016046:	30f0      	adds	r0, #240	; 0xf0
 8016048:	4770      	bx	lr
 801604a:	bf00      	nop
 801604c:	2000000c 	.word	0x2000000c
 8016050:	20000070 	.word	0x20000070

08016054 <_lseek_r>:
 8016054:	b538      	push	{r3, r4, r5, lr}
 8016056:	4c07      	ldr	r4, [pc, #28]	; (8016074 <_lseek_r+0x20>)
 8016058:	4605      	mov	r5, r0
 801605a:	4608      	mov	r0, r1
 801605c:	4611      	mov	r1, r2
 801605e:	2200      	movs	r2, #0
 8016060:	6022      	str	r2, [r4, #0]
 8016062:	461a      	mov	r2, r3
 8016064:	f7ef fbc0 	bl	80057e8 <_lseek>
 8016068:	1c43      	adds	r3, r0, #1
 801606a:	d102      	bne.n	8016072 <_lseek_r+0x1e>
 801606c:	6823      	ldr	r3, [r4, #0]
 801606e:	b103      	cbz	r3, 8016072 <_lseek_r+0x1e>
 8016070:	602b      	str	r3, [r5, #0]
 8016072:	bd38      	pop	{r3, r4, r5, pc}
 8016074:	20023ec8 	.word	0x20023ec8

08016078 <__swhatbuf_r>:
 8016078:	b570      	push	{r4, r5, r6, lr}
 801607a:	460e      	mov	r6, r1
 801607c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016080:	2900      	cmp	r1, #0
 8016082:	b096      	sub	sp, #88	; 0x58
 8016084:	4614      	mov	r4, r2
 8016086:	461d      	mov	r5, r3
 8016088:	da07      	bge.n	801609a <__swhatbuf_r+0x22>
 801608a:	2300      	movs	r3, #0
 801608c:	602b      	str	r3, [r5, #0]
 801608e:	89b3      	ldrh	r3, [r6, #12]
 8016090:	061a      	lsls	r2, r3, #24
 8016092:	d410      	bmi.n	80160b6 <__swhatbuf_r+0x3e>
 8016094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016098:	e00e      	b.n	80160b8 <__swhatbuf_r+0x40>
 801609a:	466a      	mov	r2, sp
 801609c:	f001 fc2e 	bl	80178fc <_fstat_r>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	dbf2      	blt.n	801608a <__swhatbuf_r+0x12>
 80160a4:	9a01      	ldr	r2, [sp, #4]
 80160a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80160aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80160ae:	425a      	negs	r2, r3
 80160b0:	415a      	adcs	r2, r3
 80160b2:	602a      	str	r2, [r5, #0]
 80160b4:	e7ee      	b.n	8016094 <__swhatbuf_r+0x1c>
 80160b6:	2340      	movs	r3, #64	; 0x40
 80160b8:	2000      	movs	r0, #0
 80160ba:	6023      	str	r3, [r4, #0]
 80160bc:	b016      	add	sp, #88	; 0x58
 80160be:	bd70      	pop	{r4, r5, r6, pc}

080160c0 <__smakebuf_r>:
 80160c0:	898b      	ldrh	r3, [r1, #12]
 80160c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80160c4:	079d      	lsls	r5, r3, #30
 80160c6:	4606      	mov	r6, r0
 80160c8:	460c      	mov	r4, r1
 80160ca:	d507      	bpl.n	80160dc <__smakebuf_r+0x1c>
 80160cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80160d0:	6023      	str	r3, [r4, #0]
 80160d2:	6123      	str	r3, [r4, #16]
 80160d4:	2301      	movs	r3, #1
 80160d6:	6163      	str	r3, [r4, #20]
 80160d8:	b002      	add	sp, #8
 80160da:	bd70      	pop	{r4, r5, r6, pc}
 80160dc:	ab01      	add	r3, sp, #4
 80160de:	466a      	mov	r2, sp
 80160e0:	f7ff ffca 	bl	8016078 <__swhatbuf_r>
 80160e4:	9900      	ldr	r1, [sp, #0]
 80160e6:	4605      	mov	r5, r0
 80160e8:	4630      	mov	r0, r6
 80160ea:	f000 fca9 	bl	8016a40 <_malloc_r>
 80160ee:	b948      	cbnz	r0, 8016104 <__smakebuf_r+0x44>
 80160f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80160f4:	059a      	lsls	r2, r3, #22
 80160f6:	d4ef      	bmi.n	80160d8 <__smakebuf_r+0x18>
 80160f8:	f023 0303 	bic.w	r3, r3, #3
 80160fc:	f043 0302 	orr.w	r3, r3, #2
 8016100:	81a3      	strh	r3, [r4, #12]
 8016102:	e7e3      	b.n	80160cc <__smakebuf_r+0xc>
 8016104:	4b0d      	ldr	r3, [pc, #52]	; (801613c <__smakebuf_r+0x7c>)
 8016106:	62b3      	str	r3, [r6, #40]	; 0x28
 8016108:	89a3      	ldrh	r3, [r4, #12]
 801610a:	6020      	str	r0, [r4, #0]
 801610c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016110:	81a3      	strh	r3, [r4, #12]
 8016112:	9b00      	ldr	r3, [sp, #0]
 8016114:	6163      	str	r3, [r4, #20]
 8016116:	9b01      	ldr	r3, [sp, #4]
 8016118:	6120      	str	r0, [r4, #16]
 801611a:	b15b      	cbz	r3, 8016134 <__smakebuf_r+0x74>
 801611c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016120:	4630      	mov	r0, r6
 8016122:	f001 fbfd 	bl	8017920 <_isatty_r>
 8016126:	b128      	cbz	r0, 8016134 <__smakebuf_r+0x74>
 8016128:	89a3      	ldrh	r3, [r4, #12]
 801612a:	f023 0303 	bic.w	r3, r3, #3
 801612e:	f043 0301 	orr.w	r3, r3, #1
 8016132:	81a3      	strh	r3, [r4, #12]
 8016134:	89a3      	ldrh	r3, [r4, #12]
 8016136:	431d      	orrs	r5, r3
 8016138:	81a5      	strh	r5, [r4, #12]
 801613a:	e7cd      	b.n	80160d8 <__smakebuf_r+0x18>
 801613c:	08015879 	.word	0x08015879

08016140 <malloc>:
 8016140:	4b02      	ldr	r3, [pc, #8]	; (801614c <malloc+0xc>)
 8016142:	4601      	mov	r1, r0
 8016144:	6818      	ldr	r0, [r3, #0]
 8016146:	f000 bc7b 	b.w	8016a40 <_malloc_r>
 801614a:	bf00      	nop
 801614c:	2000000c 	.word	0x2000000c

08016150 <__ascii_mbtowc>:
 8016150:	b082      	sub	sp, #8
 8016152:	b901      	cbnz	r1, 8016156 <__ascii_mbtowc+0x6>
 8016154:	a901      	add	r1, sp, #4
 8016156:	b142      	cbz	r2, 801616a <__ascii_mbtowc+0x1a>
 8016158:	b14b      	cbz	r3, 801616e <__ascii_mbtowc+0x1e>
 801615a:	7813      	ldrb	r3, [r2, #0]
 801615c:	600b      	str	r3, [r1, #0]
 801615e:	7812      	ldrb	r2, [r2, #0]
 8016160:	1c10      	adds	r0, r2, #0
 8016162:	bf18      	it	ne
 8016164:	2001      	movne	r0, #1
 8016166:	b002      	add	sp, #8
 8016168:	4770      	bx	lr
 801616a:	4610      	mov	r0, r2
 801616c:	e7fb      	b.n	8016166 <__ascii_mbtowc+0x16>
 801616e:	f06f 0001 	mvn.w	r0, #1
 8016172:	e7f8      	b.n	8016166 <__ascii_mbtowc+0x16>

08016174 <memcpy>:
 8016174:	b510      	push	{r4, lr}
 8016176:	1e43      	subs	r3, r0, #1
 8016178:	440a      	add	r2, r1
 801617a:	4291      	cmp	r1, r2
 801617c:	d100      	bne.n	8016180 <memcpy+0xc>
 801617e:	bd10      	pop	{r4, pc}
 8016180:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016184:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016188:	e7f7      	b.n	801617a <memcpy+0x6>

0801618a <_Balloc>:
 801618a:	b570      	push	{r4, r5, r6, lr}
 801618c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801618e:	4604      	mov	r4, r0
 8016190:	460e      	mov	r6, r1
 8016192:	b93d      	cbnz	r5, 80161a4 <_Balloc+0x1a>
 8016194:	2010      	movs	r0, #16
 8016196:	f7ff ffd3 	bl	8016140 <malloc>
 801619a:	6260      	str	r0, [r4, #36]	; 0x24
 801619c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80161a0:	6005      	str	r5, [r0, #0]
 80161a2:	60c5      	str	r5, [r0, #12]
 80161a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80161a6:	68eb      	ldr	r3, [r5, #12]
 80161a8:	b183      	cbz	r3, 80161cc <_Balloc+0x42>
 80161aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161ac:	68db      	ldr	r3, [r3, #12]
 80161ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80161b2:	b9b8      	cbnz	r0, 80161e4 <_Balloc+0x5a>
 80161b4:	2101      	movs	r1, #1
 80161b6:	fa01 f506 	lsl.w	r5, r1, r6
 80161ba:	1d6a      	adds	r2, r5, #5
 80161bc:	0092      	lsls	r2, r2, #2
 80161be:	4620      	mov	r0, r4
 80161c0:	f000 fbe1 	bl	8016986 <_calloc_r>
 80161c4:	b160      	cbz	r0, 80161e0 <_Balloc+0x56>
 80161c6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80161ca:	e00e      	b.n	80161ea <_Balloc+0x60>
 80161cc:	2221      	movs	r2, #33	; 0x21
 80161ce:	2104      	movs	r1, #4
 80161d0:	4620      	mov	r0, r4
 80161d2:	f000 fbd8 	bl	8016986 <_calloc_r>
 80161d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80161d8:	60e8      	str	r0, [r5, #12]
 80161da:	68db      	ldr	r3, [r3, #12]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d1e4      	bne.n	80161aa <_Balloc+0x20>
 80161e0:	2000      	movs	r0, #0
 80161e2:	bd70      	pop	{r4, r5, r6, pc}
 80161e4:	6802      	ldr	r2, [r0, #0]
 80161e6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80161ea:	2300      	movs	r3, #0
 80161ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80161f0:	e7f7      	b.n	80161e2 <_Balloc+0x58>

080161f2 <_Bfree>:
 80161f2:	b570      	push	{r4, r5, r6, lr}
 80161f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80161f6:	4606      	mov	r6, r0
 80161f8:	460d      	mov	r5, r1
 80161fa:	b93c      	cbnz	r4, 801620c <_Bfree+0x1a>
 80161fc:	2010      	movs	r0, #16
 80161fe:	f7ff ff9f 	bl	8016140 <malloc>
 8016202:	6270      	str	r0, [r6, #36]	; 0x24
 8016204:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016208:	6004      	str	r4, [r0, #0]
 801620a:	60c4      	str	r4, [r0, #12]
 801620c:	b13d      	cbz	r5, 801621e <_Bfree+0x2c>
 801620e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016210:	686a      	ldr	r2, [r5, #4]
 8016212:	68db      	ldr	r3, [r3, #12]
 8016214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016218:	6029      	str	r1, [r5, #0]
 801621a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801621e:	bd70      	pop	{r4, r5, r6, pc}

08016220 <__multadd>:
 8016220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016224:	690d      	ldr	r5, [r1, #16]
 8016226:	461f      	mov	r7, r3
 8016228:	4606      	mov	r6, r0
 801622a:	460c      	mov	r4, r1
 801622c:	f101 0c14 	add.w	ip, r1, #20
 8016230:	2300      	movs	r3, #0
 8016232:	f8dc 0000 	ldr.w	r0, [ip]
 8016236:	b281      	uxth	r1, r0
 8016238:	fb02 7101 	mla	r1, r2, r1, r7
 801623c:	0c0f      	lsrs	r7, r1, #16
 801623e:	0c00      	lsrs	r0, r0, #16
 8016240:	fb02 7000 	mla	r0, r2, r0, r7
 8016244:	b289      	uxth	r1, r1
 8016246:	3301      	adds	r3, #1
 8016248:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801624c:	429d      	cmp	r5, r3
 801624e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016252:	f84c 1b04 	str.w	r1, [ip], #4
 8016256:	dcec      	bgt.n	8016232 <__multadd+0x12>
 8016258:	b1d7      	cbz	r7, 8016290 <__multadd+0x70>
 801625a:	68a3      	ldr	r3, [r4, #8]
 801625c:	42ab      	cmp	r3, r5
 801625e:	dc12      	bgt.n	8016286 <__multadd+0x66>
 8016260:	6861      	ldr	r1, [r4, #4]
 8016262:	4630      	mov	r0, r6
 8016264:	3101      	adds	r1, #1
 8016266:	f7ff ff90 	bl	801618a <_Balloc>
 801626a:	6922      	ldr	r2, [r4, #16]
 801626c:	3202      	adds	r2, #2
 801626e:	f104 010c 	add.w	r1, r4, #12
 8016272:	4680      	mov	r8, r0
 8016274:	0092      	lsls	r2, r2, #2
 8016276:	300c      	adds	r0, #12
 8016278:	f7ff ff7c 	bl	8016174 <memcpy>
 801627c:	4621      	mov	r1, r4
 801627e:	4630      	mov	r0, r6
 8016280:	f7ff ffb7 	bl	80161f2 <_Bfree>
 8016284:	4644      	mov	r4, r8
 8016286:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801628a:	3501      	adds	r5, #1
 801628c:	615f      	str	r7, [r3, #20]
 801628e:	6125      	str	r5, [r4, #16]
 8016290:	4620      	mov	r0, r4
 8016292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016296 <__s2b>:
 8016296:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801629a:	460c      	mov	r4, r1
 801629c:	4615      	mov	r5, r2
 801629e:	461f      	mov	r7, r3
 80162a0:	2209      	movs	r2, #9
 80162a2:	3308      	adds	r3, #8
 80162a4:	4606      	mov	r6, r0
 80162a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80162aa:	2100      	movs	r1, #0
 80162ac:	2201      	movs	r2, #1
 80162ae:	429a      	cmp	r2, r3
 80162b0:	db20      	blt.n	80162f4 <__s2b+0x5e>
 80162b2:	4630      	mov	r0, r6
 80162b4:	f7ff ff69 	bl	801618a <_Balloc>
 80162b8:	9b08      	ldr	r3, [sp, #32]
 80162ba:	6143      	str	r3, [r0, #20]
 80162bc:	2d09      	cmp	r5, #9
 80162be:	f04f 0301 	mov.w	r3, #1
 80162c2:	6103      	str	r3, [r0, #16]
 80162c4:	dd19      	ble.n	80162fa <__s2b+0x64>
 80162c6:	f104 0809 	add.w	r8, r4, #9
 80162ca:	46c1      	mov	r9, r8
 80162cc:	442c      	add	r4, r5
 80162ce:	f819 3b01 	ldrb.w	r3, [r9], #1
 80162d2:	4601      	mov	r1, r0
 80162d4:	3b30      	subs	r3, #48	; 0x30
 80162d6:	220a      	movs	r2, #10
 80162d8:	4630      	mov	r0, r6
 80162da:	f7ff ffa1 	bl	8016220 <__multadd>
 80162de:	45a1      	cmp	r9, r4
 80162e0:	d1f5      	bne.n	80162ce <__s2b+0x38>
 80162e2:	eb08 0405 	add.w	r4, r8, r5
 80162e6:	3c08      	subs	r4, #8
 80162e8:	1b2d      	subs	r5, r5, r4
 80162ea:	1963      	adds	r3, r4, r5
 80162ec:	42bb      	cmp	r3, r7
 80162ee:	db07      	blt.n	8016300 <__s2b+0x6a>
 80162f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162f4:	0052      	lsls	r2, r2, #1
 80162f6:	3101      	adds	r1, #1
 80162f8:	e7d9      	b.n	80162ae <__s2b+0x18>
 80162fa:	340a      	adds	r4, #10
 80162fc:	2509      	movs	r5, #9
 80162fe:	e7f3      	b.n	80162e8 <__s2b+0x52>
 8016300:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016304:	4601      	mov	r1, r0
 8016306:	3b30      	subs	r3, #48	; 0x30
 8016308:	220a      	movs	r2, #10
 801630a:	4630      	mov	r0, r6
 801630c:	f7ff ff88 	bl	8016220 <__multadd>
 8016310:	e7eb      	b.n	80162ea <__s2b+0x54>

08016312 <__hi0bits>:
 8016312:	0c02      	lsrs	r2, r0, #16
 8016314:	0412      	lsls	r2, r2, #16
 8016316:	4603      	mov	r3, r0
 8016318:	b9b2      	cbnz	r2, 8016348 <__hi0bits+0x36>
 801631a:	0403      	lsls	r3, r0, #16
 801631c:	2010      	movs	r0, #16
 801631e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016322:	bf04      	itt	eq
 8016324:	021b      	lsleq	r3, r3, #8
 8016326:	3008      	addeq	r0, #8
 8016328:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801632c:	bf04      	itt	eq
 801632e:	011b      	lsleq	r3, r3, #4
 8016330:	3004      	addeq	r0, #4
 8016332:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016336:	bf04      	itt	eq
 8016338:	009b      	lsleq	r3, r3, #2
 801633a:	3002      	addeq	r0, #2
 801633c:	2b00      	cmp	r3, #0
 801633e:	db06      	blt.n	801634e <__hi0bits+0x3c>
 8016340:	005b      	lsls	r3, r3, #1
 8016342:	d503      	bpl.n	801634c <__hi0bits+0x3a>
 8016344:	3001      	adds	r0, #1
 8016346:	4770      	bx	lr
 8016348:	2000      	movs	r0, #0
 801634a:	e7e8      	b.n	801631e <__hi0bits+0xc>
 801634c:	2020      	movs	r0, #32
 801634e:	4770      	bx	lr

08016350 <__lo0bits>:
 8016350:	6803      	ldr	r3, [r0, #0]
 8016352:	f013 0207 	ands.w	r2, r3, #7
 8016356:	4601      	mov	r1, r0
 8016358:	d00b      	beq.n	8016372 <__lo0bits+0x22>
 801635a:	07da      	lsls	r2, r3, #31
 801635c:	d423      	bmi.n	80163a6 <__lo0bits+0x56>
 801635e:	0798      	lsls	r0, r3, #30
 8016360:	bf49      	itett	mi
 8016362:	085b      	lsrmi	r3, r3, #1
 8016364:	089b      	lsrpl	r3, r3, #2
 8016366:	2001      	movmi	r0, #1
 8016368:	600b      	strmi	r3, [r1, #0]
 801636a:	bf5c      	itt	pl
 801636c:	600b      	strpl	r3, [r1, #0]
 801636e:	2002      	movpl	r0, #2
 8016370:	4770      	bx	lr
 8016372:	b298      	uxth	r0, r3
 8016374:	b9a8      	cbnz	r0, 80163a2 <__lo0bits+0x52>
 8016376:	0c1b      	lsrs	r3, r3, #16
 8016378:	2010      	movs	r0, #16
 801637a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801637e:	bf04      	itt	eq
 8016380:	0a1b      	lsreq	r3, r3, #8
 8016382:	3008      	addeq	r0, #8
 8016384:	071a      	lsls	r2, r3, #28
 8016386:	bf04      	itt	eq
 8016388:	091b      	lsreq	r3, r3, #4
 801638a:	3004      	addeq	r0, #4
 801638c:	079a      	lsls	r2, r3, #30
 801638e:	bf04      	itt	eq
 8016390:	089b      	lsreq	r3, r3, #2
 8016392:	3002      	addeq	r0, #2
 8016394:	07da      	lsls	r2, r3, #31
 8016396:	d402      	bmi.n	801639e <__lo0bits+0x4e>
 8016398:	085b      	lsrs	r3, r3, #1
 801639a:	d006      	beq.n	80163aa <__lo0bits+0x5a>
 801639c:	3001      	adds	r0, #1
 801639e:	600b      	str	r3, [r1, #0]
 80163a0:	4770      	bx	lr
 80163a2:	4610      	mov	r0, r2
 80163a4:	e7e9      	b.n	801637a <__lo0bits+0x2a>
 80163a6:	2000      	movs	r0, #0
 80163a8:	4770      	bx	lr
 80163aa:	2020      	movs	r0, #32
 80163ac:	4770      	bx	lr

080163ae <__i2b>:
 80163ae:	b510      	push	{r4, lr}
 80163b0:	460c      	mov	r4, r1
 80163b2:	2101      	movs	r1, #1
 80163b4:	f7ff fee9 	bl	801618a <_Balloc>
 80163b8:	2201      	movs	r2, #1
 80163ba:	6144      	str	r4, [r0, #20]
 80163bc:	6102      	str	r2, [r0, #16]
 80163be:	bd10      	pop	{r4, pc}

080163c0 <__multiply>:
 80163c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c4:	4614      	mov	r4, r2
 80163c6:	690a      	ldr	r2, [r1, #16]
 80163c8:	6923      	ldr	r3, [r4, #16]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	bfb8      	it	lt
 80163ce:	460b      	movlt	r3, r1
 80163d0:	4688      	mov	r8, r1
 80163d2:	bfbc      	itt	lt
 80163d4:	46a0      	movlt	r8, r4
 80163d6:	461c      	movlt	r4, r3
 80163d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80163dc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80163e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80163e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80163e8:	eb07 0609 	add.w	r6, r7, r9
 80163ec:	42b3      	cmp	r3, r6
 80163ee:	bfb8      	it	lt
 80163f0:	3101      	addlt	r1, #1
 80163f2:	f7ff feca 	bl	801618a <_Balloc>
 80163f6:	f100 0514 	add.w	r5, r0, #20
 80163fa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80163fe:	462b      	mov	r3, r5
 8016400:	2200      	movs	r2, #0
 8016402:	4573      	cmp	r3, lr
 8016404:	d316      	bcc.n	8016434 <__multiply+0x74>
 8016406:	f104 0214 	add.w	r2, r4, #20
 801640a:	f108 0114 	add.w	r1, r8, #20
 801640e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016412:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016416:	9300      	str	r3, [sp, #0]
 8016418:	9b00      	ldr	r3, [sp, #0]
 801641a:	9201      	str	r2, [sp, #4]
 801641c:	4293      	cmp	r3, r2
 801641e:	d80c      	bhi.n	801643a <__multiply+0x7a>
 8016420:	2e00      	cmp	r6, #0
 8016422:	dd03      	ble.n	801642c <__multiply+0x6c>
 8016424:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016428:	2b00      	cmp	r3, #0
 801642a:	d05d      	beq.n	80164e8 <__multiply+0x128>
 801642c:	6106      	str	r6, [r0, #16]
 801642e:	b003      	add	sp, #12
 8016430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016434:	f843 2b04 	str.w	r2, [r3], #4
 8016438:	e7e3      	b.n	8016402 <__multiply+0x42>
 801643a:	f8b2 b000 	ldrh.w	fp, [r2]
 801643e:	f1bb 0f00 	cmp.w	fp, #0
 8016442:	d023      	beq.n	801648c <__multiply+0xcc>
 8016444:	4689      	mov	r9, r1
 8016446:	46ac      	mov	ip, r5
 8016448:	f04f 0800 	mov.w	r8, #0
 801644c:	f859 4b04 	ldr.w	r4, [r9], #4
 8016450:	f8dc a000 	ldr.w	sl, [ip]
 8016454:	b2a3      	uxth	r3, r4
 8016456:	fa1f fa8a 	uxth.w	sl, sl
 801645a:	fb0b a303 	mla	r3, fp, r3, sl
 801645e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016462:	f8dc 4000 	ldr.w	r4, [ip]
 8016466:	4443      	add	r3, r8
 8016468:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801646c:	fb0b 840a 	mla	r4, fp, sl, r8
 8016470:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016474:	46e2      	mov	sl, ip
 8016476:	b29b      	uxth	r3, r3
 8016478:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801647c:	454f      	cmp	r7, r9
 801647e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016482:	f84a 3b04 	str.w	r3, [sl], #4
 8016486:	d82b      	bhi.n	80164e0 <__multiply+0x120>
 8016488:	f8cc 8004 	str.w	r8, [ip, #4]
 801648c:	9b01      	ldr	r3, [sp, #4]
 801648e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016492:	3204      	adds	r2, #4
 8016494:	f1ba 0f00 	cmp.w	sl, #0
 8016498:	d020      	beq.n	80164dc <__multiply+0x11c>
 801649a:	682b      	ldr	r3, [r5, #0]
 801649c:	4689      	mov	r9, r1
 801649e:	46a8      	mov	r8, r5
 80164a0:	f04f 0b00 	mov.w	fp, #0
 80164a4:	f8b9 c000 	ldrh.w	ip, [r9]
 80164a8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80164ac:	fb0a 440c 	mla	r4, sl, ip, r4
 80164b0:	445c      	add	r4, fp
 80164b2:	46c4      	mov	ip, r8
 80164b4:	b29b      	uxth	r3, r3
 80164b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80164ba:	f84c 3b04 	str.w	r3, [ip], #4
 80164be:	f859 3b04 	ldr.w	r3, [r9], #4
 80164c2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80164c6:	0c1b      	lsrs	r3, r3, #16
 80164c8:	fb0a b303 	mla	r3, sl, r3, fp
 80164cc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80164d0:	454f      	cmp	r7, r9
 80164d2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80164d6:	d805      	bhi.n	80164e4 <__multiply+0x124>
 80164d8:	f8c8 3004 	str.w	r3, [r8, #4]
 80164dc:	3504      	adds	r5, #4
 80164de:	e79b      	b.n	8016418 <__multiply+0x58>
 80164e0:	46d4      	mov	ip, sl
 80164e2:	e7b3      	b.n	801644c <__multiply+0x8c>
 80164e4:	46e0      	mov	r8, ip
 80164e6:	e7dd      	b.n	80164a4 <__multiply+0xe4>
 80164e8:	3e01      	subs	r6, #1
 80164ea:	e799      	b.n	8016420 <__multiply+0x60>

080164ec <__pow5mult>:
 80164ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164f0:	4615      	mov	r5, r2
 80164f2:	f012 0203 	ands.w	r2, r2, #3
 80164f6:	4606      	mov	r6, r0
 80164f8:	460f      	mov	r7, r1
 80164fa:	d007      	beq.n	801650c <__pow5mult+0x20>
 80164fc:	3a01      	subs	r2, #1
 80164fe:	4c21      	ldr	r4, [pc, #132]	; (8016584 <__pow5mult+0x98>)
 8016500:	2300      	movs	r3, #0
 8016502:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016506:	f7ff fe8b 	bl	8016220 <__multadd>
 801650a:	4607      	mov	r7, r0
 801650c:	10ad      	asrs	r5, r5, #2
 801650e:	d035      	beq.n	801657c <__pow5mult+0x90>
 8016510:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8016512:	b93c      	cbnz	r4, 8016524 <__pow5mult+0x38>
 8016514:	2010      	movs	r0, #16
 8016516:	f7ff fe13 	bl	8016140 <malloc>
 801651a:	6270      	str	r0, [r6, #36]	; 0x24
 801651c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016520:	6004      	str	r4, [r0, #0]
 8016522:	60c4      	str	r4, [r0, #12]
 8016524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801652c:	b94c      	cbnz	r4, 8016542 <__pow5mult+0x56>
 801652e:	f240 2171 	movw	r1, #625	; 0x271
 8016532:	4630      	mov	r0, r6
 8016534:	f7ff ff3b 	bl	80163ae <__i2b>
 8016538:	2300      	movs	r3, #0
 801653a:	f8c8 0008 	str.w	r0, [r8, #8]
 801653e:	4604      	mov	r4, r0
 8016540:	6003      	str	r3, [r0, #0]
 8016542:	f04f 0800 	mov.w	r8, #0
 8016546:	07eb      	lsls	r3, r5, #31
 8016548:	d50a      	bpl.n	8016560 <__pow5mult+0x74>
 801654a:	4639      	mov	r1, r7
 801654c:	4622      	mov	r2, r4
 801654e:	4630      	mov	r0, r6
 8016550:	f7ff ff36 	bl	80163c0 <__multiply>
 8016554:	4639      	mov	r1, r7
 8016556:	4681      	mov	r9, r0
 8016558:	4630      	mov	r0, r6
 801655a:	f7ff fe4a 	bl	80161f2 <_Bfree>
 801655e:	464f      	mov	r7, r9
 8016560:	106d      	asrs	r5, r5, #1
 8016562:	d00b      	beq.n	801657c <__pow5mult+0x90>
 8016564:	6820      	ldr	r0, [r4, #0]
 8016566:	b938      	cbnz	r0, 8016578 <__pow5mult+0x8c>
 8016568:	4622      	mov	r2, r4
 801656a:	4621      	mov	r1, r4
 801656c:	4630      	mov	r0, r6
 801656e:	f7ff ff27 	bl	80163c0 <__multiply>
 8016572:	6020      	str	r0, [r4, #0]
 8016574:	f8c0 8000 	str.w	r8, [r0]
 8016578:	4604      	mov	r4, r0
 801657a:	e7e4      	b.n	8016546 <__pow5mult+0x5a>
 801657c:	4638      	mov	r0, r7
 801657e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016582:	bf00      	nop
 8016584:	08018450 	.word	0x08018450

08016588 <__lshift>:
 8016588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801658c:	460c      	mov	r4, r1
 801658e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016592:	6923      	ldr	r3, [r4, #16]
 8016594:	6849      	ldr	r1, [r1, #4]
 8016596:	eb0a 0903 	add.w	r9, sl, r3
 801659a:	68a3      	ldr	r3, [r4, #8]
 801659c:	4607      	mov	r7, r0
 801659e:	4616      	mov	r6, r2
 80165a0:	f109 0501 	add.w	r5, r9, #1
 80165a4:	42ab      	cmp	r3, r5
 80165a6:	db32      	blt.n	801660e <__lshift+0x86>
 80165a8:	4638      	mov	r0, r7
 80165aa:	f7ff fdee 	bl	801618a <_Balloc>
 80165ae:	2300      	movs	r3, #0
 80165b0:	4680      	mov	r8, r0
 80165b2:	f100 0114 	add.w	r1, r0, #20
 80165b6:	461a      	mov	r2, r3
 80165b8:	4553      	cmp	r3, sl
 80165ba:	db2b      	blt.n	8016614 <__lshift+0x8c>
 80165bc:	6920      	ldr	r0, [r4, #16]
 80165be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80165c2:	f104 0314 	add.w	r3, r4, #20
 80165c6:	f016 021f 	ands.w	r2, r6, #31
 80165ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80165ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80165d2:	d025      	beq.n	8016620 <__lshift+0x98>
 80165d4:	f1c2 0e20 	rsb	lr, r2, #32
 80165d8:	2000      	movs	r0, #0
 80165da:	681e      	ldr	r6, [r3, #0]
 80165dc:	468a      	mov	sl, r1
 80165de:	4096      	lsls	r6, r2
 80165e0:	4330      	orrs	r0, r6
 80165e2:	f84a 0b04 	str.w	r0, [sl], #4
 80165e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80165ea:	459c      	cmp	ip, r3
 80165ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80165f0:	d814      	bhi.n	801661c <__lshift+0x94>
 80165f2:	6048      	str	r0, [r1, #4]
 80165f4:	b108      	cbz	r0, 80165fa <__lshift+0x72>
 80165f6:	f109 0502 	add.w	r5, r9, #2
 80165fa:	3d01      	subs	r5, #1
 80165fc:	4638      	mov	r0, r7
 80165fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8016602:	4621      	mov	r1, r4
 8016604:	f7ff fdf5 	bl	80161f2 <_Bfree>
 8016608:	4640      	mov	r0, r8
 801660a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801660e:	3101      	adds	r1, #1
 8016610:	005b      	lsls	r3, r3, #1
 8016612:	e7c7      	b.n	80165a4 <__lshift+0x1c>
 8016614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016618:	3301      	adds	r3, #1
 801661a:	e7cd      	b.n	80165b8 <__lshift+0x30>
 801661c:	4651      	mov	r1, sl
 801661e:	e7dc      	b.n	80165da <__lshift+0x52>
 8016620:	3904      	subs	r1, #4
 8016622:	f853 2b04 	ldr.w	r2, [r3], #4
 8016626:	f841 2f04 	str.w	r2, [r1, #4]!
 801662a:	459c      	cmp	ip, r3
 801662c:	d8f9      	bhi.n	8016622 <__lshift+0x9a>
 801662e:	e7e4      	b.n	80165fa <__lshift+0x72>

08016630 <__mcmp>:
 8016630:	6903      	ldr	r3, [r0, #16]
 8016632:	690a      	ldr	r2, [r1, #16]
 8016634:	1a9b      	subs	r3, r3, r2
 8016636:	b530      	push	{r4, r5, lr}
 8016638:	d10c      	bne.n	8016654 <__mcmp+0x24>
 801663a:	0092      	lsls	r2, r2, #2
 801663c:	3014      	adds	r0, #20
 801663e:	3114      	adds	r1, #20
 8016640:	1884      	adds	r4, r0, r2
 8016642:	4411      	add	r1, r2
 8016644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801664c:	4295      	cmp	r5, r2
 801664e:	d003      	beq.n	8016658 <__mcmp+0x28>
 8016650:	d305      	bcc.n	801665e <__mcmp+0x2e>
 8016652:	2301      	movs	r3, #1
 8016654:	4618      	mov	r0, r3
 8016656:	bd30      	pop	{r4, r5, pc}
 8016658:	42a0      	cmp	r0, r4
 801665a:	d3f3      	bcc.n	8016644 <__mcmp+0x14>
 801665c:	e7fa      	b.n	8016654 <__mcmp+0x24>
 801665e:	f04f 33ff 	mov.w	r3, #4294967295
 8016662:	e7f7      	b.n	8016654 <__mcmp+0x24>

08016664 <__mdiff>:
 8016664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016668:	460d      	mov	r5, r1
 801666a:	4607      	mov	r7, r0
 801666c:	4611      	mov	r1, r2
 801666e:	4628      	mov	r0, r5
 8016670:	4614      	mov	r4, r2
 8016672:	f7ff ffdd 	bl	8016630 <__mcmp>
 8016676:	1e06      	subs	r6, r0, #0
 8016678:	d108      	bne.n	801668c <__mdiff+0x28>
 801667a:	4631      	mov	r1, r6
 801667c:	4638      	mov	r0, r7
 801667e:	f7ff fd84 	bl	801618a <_Balloc>
 8016682:	2301      	movs	r3, #1
 8016684:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801668c:	bfa4      	itt	ge
 801668e:	4623      	movge	r3, r4
 8016690:	462c      	movge	r4, r5
 8016692:	4638      	mov	r0, r7
 8016694:	6861      	ldr	r1, [r4, #4]
 8016696:	bfa6      	itte	ge
 8016698:	461d      	movge	r5, r3
 801669a:	2600      	movge	r6, #0
 801669c:	2601      	movlt	r6, #1
 801669e:	f7ff fd74 	bl	801618a <_Balloc>
 80166a2:	692b      	ldr	r3, [r5, #16]
 80166a4:	60c6      	str	r6, [r0, #12]
 80166a6:	6926      	ldr	r6, [r4, #16]
 80166a8:	f105 0914 	add.w	r9, r5, #20
 80166ac:	f104 0214 	add.w	r2, r4, #20
 80166b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80166b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80166b8:	f100 0514 	add.w	r5, r0, #20
 80166bc:	f04f 0e00 	mov.w	lr, #0
 80166c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80166c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80166c8:	fa1e f18a 	uxtah	r1, lr, sl
 80166cc:	b2a3      	uxth	r3, r4
 80166ce:	1ac9      	subs	r1, r1, r3
 80166d0:	0c23      	lsrs	r3, r4, #16
 80166d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80166d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80166da:	b289      	uxth	r1, r1
 80166dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80166e0:	45c8      	cmp	r8, r9
 80166e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80166e6:	4694      	mov	ip, r2
 80166e8:	f845 3b04 	str.w	r3, [r5], #4
 80166ec:	d8e8      	bhi.n	80166c0 <__mdiff+0x5c>
 80166ee:	45bc      	cmp	ip, r7
 80166f0:	d304      	bcc.n	80166fc <__mdiff+0x98>
 80166f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80166f6:	b183      	cbz	r3, 801671a <__mdiff+0xb6>
 80166f8:	6106      	str	r6, [r0, #16]
 80166fa:	e7c5      	b.n	8016688 <__mdiff+0x24>
 80166fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016700:	fa1e f381 	uxtah	r3, lr, r1
 8016704:	141a      	asrs	r2, r3, #16
 8016706:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801670a:	b29b      	uxth	r3, r3
 801670c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016710:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016714:	f845 3b04 	str.w	r3, [r5], #4
 8016718:	e7e9      	b.n	80166ee <__mdiff+0x8a>
 801671a:	3e01      	subs	r6, #1
 801671c:	e7e9      	b.n	80166f2 <__mdiff+0x8e>
	...

08016720 <__ulp>:
 8016720:	4b12      	ldr	r3, [pc, #72]	; (801676c <__ulp+0x4c>)
 8016722:	ee10 2a90 	vmov	r2, s1
 8016726:	401a      	ands	r2, r3
 8016728:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 801672c:	2b00      	cmp	r3, #0
 801672e:	dd04      	ble.n	801673a <__ulp+0x1a>
 8016730:	2000      	movs	r0, #0
 8016732:	4619      	mov	r1, r3
 8016734:	ec41 0b10 	vmov	d0, r0, r1
 8016738:	4770      	bx	lr
 801673a:	425b      	negs	r3, r3
 801673c:	151b      	asrs	r3, r3, #20
 801673e:	2b13      	cmp	r3, #19
 8016740:	f04f 0000 	mov.w	r0, #0
 8016744:	f04f 0100 	mov.w	r1, #0
 8016748:	dc04      	bgt.n	8016754 <__ulp+0x34>
 801674a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801674e:	fa42 f103 	asr.w	r1, r2, r3
 8016752:	e7ef      	b.n	8016734 <__ulp+0x14>
 8016754:	3b14      	subs	r3, #20
 8016756:	2b1e      	cmp	r3, #30
 8016758:	f04f 0201 	mov.w	r2, #1
 801675c:	bfda      	itte	le
 801675e:	f1c3 031f 	rsble	r3, r3, #31
 8016762:	fa02 f303 	lslle.w	r3, r2, r3
 8016766:	4613      	movgt	r3, r2
 8016768:	4618      	mov	r0, r3
 801676a:	e7e3      	b.n	8016734 <__ulp+0x14>
 801676c:	7ff00000 	.word	0x7ff00000

08016770 <__b2d>:
 8016770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016772:	6905      	ldr	r5, [r0, #16]
 8016774:	f100 0714 	add.w	r7, r0, #20
 8016778:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801677c:	1f2e      	subs	r6, r5, #4
 801677e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016782:	4620      	mov	r0, r4
 8016784:	f7ff fdc5 	bl	8016312 <__hi0bits>
 8016788:	f1c0 0320 	rsb	r3, r0, #32
 801678c:	280a      	cmp	r0, #10
 801678e:	600b      	str	r3, [r1, #0]
 8016790:	f8df c074 	ldr.w	ip, [pc, #116]	; 8016808 <__b2d+0x98>
 8016794:	dc14      	bgt.n	80167c0 <__b2d+0x50>
 8016796:	f1c0 0e0b 	rsb	lr, r0, #11
 801679a:	fa24 f10e 	lsr.w	r1, r4, lr
 801679e:	42b7      	cmp	r7, r6
 80167a0:	ea41 030c 	orr.w	r3, r1, ip
 80167a4:	bf34      	ite	cc
 80167a6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167aa:	2100      	movcs	r1, #0
 80167ac:	3015      	adds	r0, #21
 80167ae:	fa04 f000 	lsl.w	r0, r4, r0
 80167b2:	fa21 f10e 	lsr.w	r1, r1, lr
 80167b6:	ea40 0201 	orr.w	r2, r0, r1
 80167ba:	ec43 2b10 	vmov	d0, r2, r3
 80167be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167c0:	42b7      	cmp	r7, r6
 80167c2:	bf3a      	itte	cc
 80167c4:	f1a5 0608 	subcc.w	r6, r5, #8
 80167c8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80167cc:	2100      	movcs	r1, #0
 80167ce:	380b      	subs	r0, #11
 80167d0:	d015      	beq.n	80167fe <__b2d+0x8e>
 80167d2:	4084      	lsls	r4, r0
 80167d4:	f1c0 0520 	rsb	r5, r0, #32
 80167d8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80167dc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80167e0:	42be      	cmp	r6, r7
 80167e2:	fa21 fc05 	lsr.w	ip, r1, r5
 80167e6:	ea44 030c 	orr.w	r3, r4, ip
 80167ea:	bf8c      	ite	hi
 80167ec:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80167f0:	2400      	movls	r4, #0
 80167f2:	fa01 f000 	lsl.w	r0, r1, r0
 80167f6:	40ec      	lsrs	r4, r5
 80167f8:	ea40 0204 	orr.w	r2, r0, r4
 80167fc:	e7dd      	b.n	80167ba <__b2d+0x4a>
 80167fe:	ea44 030c 	orr.w	r3, r4, ip
 8016802:	460a      	mov	r2, r1
 8016804:	e7d9      	b.n	80167ba <__b2d+0x4a>
 8016806:	bf00      	nop
 8016808:	3ff00000 	.word	0x3ff00000

0801680c <__d2b>:
 801680c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016810:	460e      	mov	r6, r1
 8016812:	2101      	movs	r1, #1
 8016814:	ec59 8b10 	vmov	r8, r9, d0
 8016818:	4615      	mov	r5, r2
 801681a:	f7ff fcb6 	bl	801618a <_Balloc>
 801681e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016822:	4607      	mov	r7, r0
 8016824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016828:	bb34      	cbnz	r4, 8016878 <__d2b+0x6c>
 801682a:	9301      	str	r3, [sp, #4]
 801682c:	f1b8 0300 	subs.w	r3, r8, #0
 8016830:	d027      	beq.n	8016882 <__d2b+0x76>
 8016832:	a802      	add	r0, sp, #8
 8016834:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016838:	f7ff fd8a 	bl	8016350 <__lo0bits>
 801683c:	9900      	ldr	r1, [sp, #0]
 801683e:	b1f0      	cbz	r0, 801687e <__d2b+0x72>
 8016840:	9a01      	ldr	r2, [sp, #4]
 8016842:	f1c0 0320 	rsb	r3, r0, #32
 8016846:	fa02 f303 	lsl.w	r3, r2, r3
 801684a:	430b      	orrs	r3, r1
 801684c:	40c2      	lsrs	r2, r0
 801684e:	617b      	str	r3, [r7, #20]
 8016850:	9201      	str	r2, [sp, #4]
 8016852:	9b01      	ldr	r3, [sp, #4]
 8016854:	61bb      	str	r3, [r7, #24]
 8016856:	2b00      	cmp	r3, #0
 8016858:	bf14      	ite	ne
 801685a:	2102      	movne	r1, #2
 801685c:	2101      	moveq	r1, #1
 801685e:	6139      	str	r1, [r7, #16]
 8016860:	b1c4      	cbz	r4, 8016894 <__d2b+0x88>
 8016862:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016866:	4404      	add	r4, r0
 8016868:	6034      	str	r4, [r6, #0]
 801686a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801686e:	6028      	str	r0, [r5, #0]
 8016870:	4638      	mov	r0, r7
 8016872:	b003      	add	sp, #12
 8016874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801687c:	e7d5      	b.n	801682a <__d2b+0x1e>
 801687e:	6179      	str	r1, [r7, #20]
 8016880:	e7e7      	b.n	8016852 <__d2b+0x46>
 8016882:	a801      	add	r0, sp, #4
 8016884:	f7ff fd64 	bl	8016350 <__lo0bits>
 8016888:	9b01      	ldr	r3, [sp, #4]
 801688a:	617b      	str	r3, [r7, #20]
 801688c:	2101      	movs	r1, #1
 801688e:	6139      	str	r1, [r7, #16]
 8016890:	3020      	adds	r0, #32
 8016892:	e7e5      	b.n	8016860 <__d2b+0x54>
 8016894:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801689c:	6030      	str	r0, [r6, #0]
 801689e:	6918      	ldr	r0, [r3, #16]
 80168a0:	f7ff fd37 	bl	8016312 <__hi0bits>
 80168a4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80168a8:	e7e1      	b.n	801686e <__d2b+0x62>

080168aa <__ratio>:
 80168aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ae:	4688      	mov	r8, r1
 80168b0:	4669      	mov	r1, sp
 80168b2:	4681      	mov	r9, r0
 80168b4:	f7ff ff5c 	bl	8016770 <__b2d>
 80168b8:	a901      	add	r1, sp, #4
 80168ba:	4640      	mov	r0, r8
 80168bc:	ec57 6b10 	vmov	r6, r7, d0
 80168c0:	f7ff ff56 	bl	8016770 <__b2d>
 80168c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80168c8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80168cc:	eba3 0c02 	sub.w	ip, r3, r2
 80168d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80168d4:	1a9b      	subs	r3, r3, r2
 80168d6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80168da:	ec5b ab10 	vmov	sl, fp, d0
 80168de:	2b00      	cmp	r3, #0
 80168e0:	bfce      	itee	gt
 80168e2:	463a      	movgt	r2, r7
 80168e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80168e8:	465a      	movle	r2, fp
 80168ea:	4659      	mov	r1, fp
 80168ec:	463d      	mov	r5, r7
 80168ee:	bfd4      	ite	le
 80168f0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80168f4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80168f8:	4630      	mov	r0, r6
 80168fa:	ee10 2a10 	vmov	r2, s0
 80168fe:	460b      	mov	r3, r1
 8016900:	4629      	mov	r1, r5
 8016902:	f7e9 ffbb 	bl	800087c <__aeabi_ddiv>
 8016906:	ec41 0b10 	vmov	d0, r0, r1
 801690a:	b003      	add	sp, #12
 801690c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016910 <__copybits>:
 8016910:	3901      	subs	r1, #1
 8016912:	b510      	push	{r4, lr}
 8016914:	1149      	asrs	r1, r1, #5
 8016916:	6914      	ldr	r4, [r2, #16]
 8016918:	3101      	adds	r1, #1
 801691a:	f102 0314 	add.w	r3, r2, #20
 801691e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016922:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016926:	42a3      	cmp	r3, r4
 8016928:	4602      	mov	r2, r0
 801692a:	d303      	bcc.n	8016934 <__copybits+0x24>
 801692c:	2300      	movs	r3, #0
 801692e:	428a      	cmp	r2, r1
 8016930:	d305      	bcc.n	801693e <__copybits+0x2e>
 8016932:	bd10      	pop	{r4, pc}
 8016934:	f853 2b04 	ldr.w	r2, [r3], #4
 8016938:	f840 2b04 	str.w	r2, [r0], #4
 801693c:	e7f3      	b.n	8016926 <__copybits+0x16>
 801693e:	f842 3b04 	str.w	r3, [r2], #4
 8016942:	e7f4      	b.n	801692e <__copybits+0x1e>

08016944 <__any_on>:
 8016944:	f100 0214 	add.w	r2, r0, #20
 8016948:	6900      	ldr	r0, [r0, #16]
 801694a:	114b      	asrs	r3, r1, #5
 801694c:	4298      	cmp	r0, r3
 801694e:	b510      	push	{r4, lr}
 8016950:	db11      	blt.n	8016976 <__any_on+0x32>
 8016952:	dd0a      	ble.n	801696a <__any_on+0x26>
 8016954:	f011 011f 	ands.w	r1, r1, #31
 8016958:	d007      	beq.n	801696a <__any_on+0x26>
 801695a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801695e:	fa24 f001 	lsr.w	r0, r4, r1
 8016962:	fa00 f101 	lsl.w	r1, r0, r1
 8016966:	428c      	cmp	r4, r1
 8016968:	d10b      	bne.n	8016982 <__any_on+0x3e>
 801696a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801696e:	4293      	cmp	r3, r2
 8016970:	d803      	bhi.n	801697a <__any_on+0x36>
 8016972:	2000      	movs	r0, #0
 8016974:	bd10      	pop	{r4, pc}
 8016976:	4603      	mov	r3, r0
 8016978:	e7f7      	b.n	801696a <__any_on+0x26>
 801697a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801697e:	2900      	cmp	r1, #0
 8016980:	d0f5      	beq.n	801696e <__any_on+0x2a>
 8016982:	2001      	movs	r0, #1
 8016984:	e7f6      	b.n	8016974 <__any_on+0x30>

08016986 <_calloc_r>:
 8016986:	b538      	push	{r3, r4, r5, lr}
 8016988:	fb02 f401 	mul.w	r4, r2, r1
 801698c:	4621      	mov	r1, r4
 801698e:	f000 f857 	bl	8016a40 <_malloc_r>
 8016992:	4605      	mov	r5, r0
 8016994:	b118      	cbz	r0, 801699e <_calloc_r+0x18>
 8016996:	4622      	mov	r2, r4
 8016998:	2100      	movs	r1, #0
 801699a:	f7fc f8fd 	bl	8012b98 <memset>
 801699e:	4628      	mov	r0, r5
 80169a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080169a4 <_free_r>:
 80169a4:	b538      	push	{r3, r4, r5, lr}
 80169a6:	4605      	mov	r5, r0
 80169a8:	2900      	cmp	r1, #0
 80169aa:	d045      	beq.n	8016a38 <_free_r+0x94>
 80169ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80169b0:	1f0c      	subs	r4, r1, #4
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	bfb8      	it	lt
 80169b6:	18e4      	addlt	r4, r4, r3
 80169b8:	f000 ffdb 	bl	8017972 <__malloc_lock>
 80169bc:	4a1f      	ldr	r2, [pc, #124]	; (8016a3c <_free_r+0x98>)
 80169be:	6813      	ldr	r3, [r2, #0]
 80169c0:	4610      	mov	r0, r2
 80169c2:	b933      	cbnz	r3, 80169d2 <_free_r+0x2e>
 80169c4:	6063      	str	r3, [r4, #4]
 80169c6:	6014      	str	r4, [r2, #0]
 80169c8:	4628      	mov	r0, r5
 80169ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169ce:	f000 bfd1 	b.w	8017974 <__malloc_unlock>
 80169d2:	42a3      	cmp	r3, r4
 80169d4:	d90c      	bls.n	80169f0 <_free_r+0x4c>
 80169d6:	6821      	ldr	r1, [r4, #0]
 80169d8:	1862      	adds	r2, r4, r1
 80169da:	4293      	cmp	r3, r2
 80169dc:	bf04      	itt	eq
 80169de:	681a      	ldreq	r2, [r3, #0]
 80169e0:	685b      	ldreq	r3, [r3, #4]
 80169e2:	6063      	str	r3, [r4, #4]
 80169e4:	bf04      	itt	eq
 80169e6:	1852      	addeq	r2, r2, r1
 80169e8:	6022      	streq	r2, [r4, #0]
 80169ea:	6004      	str	r4, [r0, #0]
 80169ec:	e7ec      	b.n	80169c8 <_free_r+0x24>
 80169ee:	4613      	mov	r3, r2
 80169f0:	685a      	ldr	r2, [r3, #4]
 80169f2:	b10a      	cbz	r2, 80169f8 <_free_r+0x54>
 80169f4:	42a2      	cmp	r2, r4
 80169f6:	d9fa      	bls.n	80169ee <_free_r+0x4a>
 80169f8:	6819      	ldr	r1, [r3, #0]
 80169fa:	1858      	adds	r0, r3, r1
 80169fc:	42a0      	cmp	r0, r4
 80169fe:	d10b      	bne.n	8016a18 <_free_r+0x74>
 8016a00:	6820      	ldr	r0, [r4, #0]
 8016a02:	4401      	add	r1, r0
 8016a04:	1858      	adds	r0, r3, r1
 8016a06:	4282      	cmp	r2, r0
 8016a08:	6019      	str	r1, [r3, #0]
 8016a0a:	d1dd      	bne.n	80169c8 <_free_r+0x24>
 8016a0c:	6810      	ldr	r0, [r2, #0]
 8016a0e:	6852      	ldr	r2, [r2, #4]
 8016a10:	605a      	str	r2, [r3, #4]
 8016a12:	4401      	add	r1, r0
 8016a14:	6019      	str	r1, [r3, #0]
 8016a16:	e7d7      	b.n	80169c8 <_free_r+0x24>
 8016a18:	d902      	bls.n	8016a20 <_free_r+0x7c>
 8016a1a:	230c      	movs	r3, #12
 8016a1c:	602b      	str	r3, [r5, #0]
 8016a1e:	e7d3      	b.n	80169c8 <_free_r+0x24>
 8016a20:	6820      	ldr	r0, [r4, #0]
 8016a22:	1821      	adds	r1, r4, r0
 8016a24:	428a      	cmp	r2, r1
 8016a26:	bf04      	itt	eq
 8016a28:	6811      	ldreq	r1, [r2, #0]
 8016a2a:	6852      	ldreq	r2, [r2, #4]
 8016a2c:	6062      	str	r2, [r4, #4]
 8016a2e:	bf04      	itt	eq
 8016a30:	1809      	addeq	r1, r1, r0
 8016a32:	6021      	streq	r1, [r4, #0]
 8016a34:	605c      	str	r4, [r3, #4]
 8016a36:	e7c7      	b.n	80169c8 <_free_r+0x24>
 8016a38:	bd38      	pop	{r3, r4, r5, pc}
 8016a3a:	bf00      	nop
 8016a3c:	2001f524 	.word	0x2001f524

08016a40 <_malloc_r>:
 8016a40:	b570      	push	{r4, r5, r6, lr}
 8016a42:	1ccd      	adds	r5, r1, #3
 8016a44:	f025 0503 	bic.w	r5, r5, #3
 8016a48:	3508      	adds	r5, #8
 8016a4a:	2d0c      	cmp	r5, #12
 8016a4c:	bf38      	it	cc
 8016a4e:	250c      	movcc	r5, #12
 8016a50:	2d00      	cmp	r5, #0
 8016a52:	4606      	mov	r6, r0
 8016a54:	db01      	blt.n	8016a5a <_malloc_r+0x1a>
 8016a56:	42a9      	cmp	r1, r5
 8016a58:	d903      	bls.n	8016a62 <_malloc_r+0x22>
 8016a5a:	230c      	movs	r3, #12
 8016a5c:	6033      	str	r3, [r6, #0]
 8016a5e:	2000      	movs	r0, #0
 8016a60:	bd70      	pop	{r4, r5, r6, pc}
 8016a62:	f000 ff86 	bl	8017972 <__malloc_lock>
 8016a66:	4a21      	ldr	r2, [pc, #132]	; (8016aec <_malloc_r+0xac>)
 8016a68:	6814      	ldr	r4, [r2, #0]
 8016a6a:	4621      	mov	r1, r4
 8016a6c:	b991      	cbnz	r1, 8016a94 <_malloc_r+0x54>
 8016a6e:	4c20      	ldr	r4, [pc, #128]	; (8016af0 <_malloc_r+0xb0>)
 8016a70:	6823      	ldr	r3, [r4, #0]
 8016a72:	b91b      	cbnz	r3, 8016a7c <_malloc_r+0x3c>
 8016a74:	4630      	mov	r0, r6
 8016a76:	f000 fe19 	bl	80176ac <_sbrk_r>
 8016a7a:	6020      	str	r0, [r4, #0]
 8016a7c:	4629      	mov	r1, r5
 8016a7e:	4630      	mov	r0, r6
 8016a80:	f000 fe14 	bl	80176ac <_sbrk_r>
 8016a84:	1c43      	adds	r3, r0, #1
 8016a86:	d124      	bne.n	8016ad2 <_malloc_r+0x92>
 8016a88:	230c      	movs	r3, #12
 8016a8a:	6033      	str	r3, [r6, #0]
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f000 ff71 	bl	8017974 <__malloc_unlock>
 8016a92:	e7e4      	b.n	8016a5e <_malloc_r+0x1e>
 8016a94:	680b      	ldr	r3, [r1, #0]
 8016a96:	1b5b      	subs	r3, r3, r5
 8016a98:	d418      	bmi.n	8016acc <_malloc_r+0x8c>
 8016a9a:	2b0b      	cmp	r3, #11
 8016a9c:	d90f      	bls.n	8016abe <_malloc_r+0x7e>
 8016a9e:	600b      	str	r3, [r1, #0]
 8016aa0:	50cd      	str	r5, [r1, r3]
 8016aa2:	18cc      	adds	r4, r1, r3
 8016aa4:	4630      	mov	r0, r6
 8016aa6:	f000 ff65 	bl	8017974 <__malloc_unlock>
 8016aaa:	f104 000b 	add.w	r0, r4, #11
 8016aae:	1d23      	adds	r3, r4, #4
 8016ab0:	f020 0007 	bic.w	r0, r0, #7
 8016ab4:	1ac3      	subs	r3, r0, r3
 8016ab6:	d0d3      	beq.n	8016a60 <_malloc_r+0x20>
 8016ab8:	425a      	negs	r2, r3
 8016aba:	50e2      	str	r2, [r4, r3]
 8016abc:	e7d0      	b.n	8016a60 <_malloc_r+0x20>
 8016abe:	428c      	cmp	r4, r1
 8016ac0:	684b      	ldr	r3, [r1, #4]
 8016ac2:	bf16      	itet	ne
 8016ac4:	6063      	strne	r3, [r4, #4]
 8016ac6:	6013      	streq	r3, [r2, #0]
 8016ac8:	460c      	movne	r4, r1
 8016aca:	e7eb      	b.n	8016aa4 <_malloc_r+0x64>
 8016acc:	460c      	mov	r4, r1
 8016ace:	6849      	ldr	r1, [r1, #4]
 8016ad0:	e7cc      	b.n	8016a6c <_malloc_r+0x2c>
 8016ad2:	1cc4      	adds	r4, r0, #3
 8016ad4:	f024 0403 	bic.w	r4, r4, #3
 8016ad8:	42a0      	cmp	r0, r4
 8016ada:	d005      	beq.n	8016ae8 <_malloc_r+0xa8>
 8016adc:	1a21      	subs	r1, r4, r0
 8016ade:	4630      	mov	r0, r6
 8016ae0:	f000 fde4 	bl	80176ac <_sbrk_r>
 8016ae4:	3001      	adds	r0, #1
 8016ae6:	d0cf      	beq.n	8016a88 <_malloc_r+0x48>
 8016ae8:	6025      	str	r5, [r4, #0]
 8016aea:	e7db      	b.n	8016aa4 <_malloc_r+0x64>
 8016aec:	2001f524 	.word	0x2001f524
 8016af0:	2001f528 	.word	0x2001f528

08016af4 <__ssputs_r>:
 8016af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016af8:	688e      	ldr	r6, [r1, #8]
 8016afa:	429e      	cmp	r6, r3
 8016afc:	4682      	mov	sl, r0
 8016afe:	460c      	mov	r4, r1
 8016b00:	4690      	mov	r8, r2
 8016b02:	4699      	mov	r9, r3
 8016b04:	d837      	bhi.n	8016b76 <__ssputs_r+0x82>
 8016b06:	898a      	ldrh	r2, [r1, #12]
 8016b08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016b0c:	d031      	beq.n	8016b72 <__ssputs_r+0x7e>
 8016b0e:	6825      	ldr	r5, [r4, #0]
 8016b10:	6909      	ldr	r1, [r1, #16]
 8016b12:	1a6f      	subs	r7, r5, r1
 8016b14:	6965      	ldr	r5, [r4, #20]
 8016b16:	2302      	movs	r3, #2
 8016b18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016b1c:	fb95 f5f3 	sdiv	r5, r5, r3
 8016b20:	f109 0301 	add.w	r3, r9, #1
 8016b24:	443b      	add	r3, r7
 8016b26:	429d      	cmp	r5, r3
 8016b28:	bf38      	it	cc
 8016b2a:	461d      	movcc	r5, r3
 8016b2c:	0553      	lsls	r3, r2, #21
 8016b2e:	d530      	bpl.n	8016b92 <__ssputs_r+0x9e>
 8016b30:	4629      	mov	r1, r5
 8016b32:	f7ff ff85 	bl	8016a40 <_malloc_r>
 8016b36:	4606      	mov	r6, r0
 8016b38:	b950      	cbnz	r0, 8016b50 <__ssputs_r+0x5c>
 8016b3a:	230c      	movs	r3, #12
 8016b3c:	f8ca 3000 	str.w	r3, [sl]
 8016b40:	89a3      	ldrh	r3, [r4, #12]
 8016b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b46:	81a3      	strh	r3, [r4, #12]
 8016b48:	f04f 30ff 	mov.w	r0, #4294967295
 8016b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b50:	463a      	mov	r2, r7
 8016b52:	6921      	ldr	r1, [r4, #16]
 8016b54:	f7ff fb0e 	bl	8016174 <memcpy>
 8016b58:	89a3      	ldrh	r3, [r4, #12]
 8016b5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016b5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b62:	81a3      	strh	r3, [r4, #12]
 8016b64:	6126      	str	r6, [r4, #16]
 8016b66:	6165      	str	r5, [r4, #20]
 8016b68:	443e      	add	r6, r7
 8016b6a:	1bed      	subs	r5, r5, r7
 8016b6c:	6026      	str	r6, [r4, #0]
 8016b6e:	60a5      	str	r5, [r4, #8]
 8016b70:	464e      	mov	r6, r9
 8016b72:	454e      	cmp	r6, r9
 8016b74:	d900      	bls.n	8016b78 <__ssputs_r+0x84>
 8016b76:	464e      	mov	r6, r9
 8016b78:	4632      	mov	r2, r6
 8016b7a:	4641      	mov	r1, r8
 8016b7c:	6820      	ldr	r0, [r4, #0]
 8016b7e:	f000 fedf 	bl	8017940 <memmove>
 8016b82:	68a3      	ldr	r3, [r4, #8]
 8016b84:	1b9b      	subs	r3, r3, r6
 8016b86:	60a3      	str	r3, [r4, #8]
 8016b88:	6823      	ldr	r3, [r4, #0]
 8016b8a:	441e      	add	r6, r3
 8016b8c:	6026      	str	r6, [r4, #0]
 8016b8e:	2000      	movs	r0, #0
 8016b90:	e7dc      	b.n	8016b4c <__ssputs_r+0x58>
 8016b92:	462a      	mov	r2, r5
 8016b94:	f000 feef 	bl	8017976 <_realloc_r>
 8016b98:	4606      	mov	r6, r0
 8016b9a:	2800      	cmp	r0, #0
 8016b9c:	d1e2      	bne.n	8016b64 <__ssputs_r+0x70>
 8016b9e:	6921      	ldr	r1, [r4, #16]
 8016ba0:	4650      	mov	r0, sl
 8016ba2:	f7ff feff 	bl	80169a4 <_free_r>
 8016ba6:	e7c8      	b.n	8016b3a <__ssputs_r+0x46>

08016ba8 <_svfiprintf_r>:
 8016ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bac:	461d      	mov	r5, r3
 8016bae:	898b      	ldrh	r3, [r1, #12]
 8016bb0:	061f      	lsls	r7, r3, #24
 8016bb2:	b09d      	sub	sp, #116	; 0x74
 8016bb4:	4680      	mov	r8, r0
 8016bb6:	460c      	mov	r4, r1
 8016bb8:	4616      	mov	r6, r2
 8016bba:	d50f      	bpl.n	8016bdc <_svfiprintf_r+0x34>
 8016bbc:	690b      	ldr	r3, [r1, #16]
 8016bbe:	b96b      	cbnz	r3, 8016bdc <_svfiprintf_r+0x34>
 8016bc0:	2140      	movs	r1, #64	; 0x40
 8016bc2:	f7ff ff3d 	bl	8016a40 <_malloc_r>
 8016bc6:	6020      	str	r0, [r4, #0]
 8016bc8:	6120      	str	r0, [r4, #16]
 8016bca:	b928      	cbnz	r0, 8016bd8 <_svfiprintf_r+0x30>
 8016bcc:	230c      	movs	r3, #12
 8016bce:	f8c8 3000 	str.w	r3, [r8]
 8016bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8016bd6:	e0c8      	b.n	8016d6a <_svfiprintf_r+0x1c2>
 8016bd8:	2340      	movs	r3, #64	; 0x40
 8016bda:	6163      	str	r3, [r4, #20]
 8016bdc:	2300      	movs	r3, #0
 8016bde:	9309      	str	r3, [sp, #36]	; 0x24
 8016be0:	2320      	movs	r3, #32
 8016be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016be6:	2330      	movs	r3, #48	; 0x30
 8016be8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016bec:	9503      	str	r5, [sp, #12]
 8016bee:	f04f 0b01 	mov.w	fp, #1
 8016bf2:	4637      	mov	r7, r6
 8016bf4:	463d      	mov	r5, r7
 8016bf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016bfa:	b10b      	cbz	r3, 8016c00 <_svfiprintf_r+0x58>
 8016bfc:	2b25      	cmp	r3, #37	; 0x25
 8016bfe:	d13e      	bne.n	8016c7e <_svfiprintf_r+0xd6>
 8016c00:	ebb7 0a06 	subs.w	sl, r7, r6
 8016c04:	d00b      	beq.n	8016c1e <_svfiprintf_r+0x76>
 8016c06:	4653      	mov	r3, sl
 8016c08:	4632      	mov	r2, r6
 8016c0a:	4621      	mov	r1, r4
 8016c0c:	4640      	mov	r0, r8
 8016c0e:	f7ff ff71 	bl	8016af4 <__ssputs_r>
 8016c12:	3001      	adds	r0, #1
 8016c14:	f000 80a4 	beq.w	8016d60 <_svfiprintf_r+0x1b8>
 8016c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c1a:	4453      	add	r3, sl
 8016c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016c1e:	783b      	ldrb	r3, [r7, #0]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	f000 809d 	beq.w	8016d60 <_svfiprintf_r+0x1b8>
 8016c26:	2300      	movs	r3, #0
 8016c28:	f04f 32ff 	mov.w	r2, #4294967295
 8016c2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016c30:	9304      	str	r3, [sp, #16]
 8016c32:	9307      	str	r3, [sp, #28]
 8016c34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016c38:	931a      	str	r3, [sp, #104]	; 0x68
 8016c3a:	462f      	mov	r7, r5
 8016c3c:	2205      	movs	r2, #5
 8016c3e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016c42:	4850      	ldr	r0, [pc, #320]	; (8016d84 <_svfiprintf_r+0x1dc>)
 8016c44:	f7e9 fae4 	bl	8000210 <memchr>
 8016c48:	9b04      	ldr	r3, [sp, #16]
 8016c4a:	b9d0      	cbnz	r0, 8016c82 <_svfiprintf_r+0xda>
 8016c4c:	06d9      	lsls	r1, r3, #27
 8016c4e:	bf44      	itt	mi
 8016c50:	2220      	movmi	r2, #32
 8016c52:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c56:	071a      	lsls	r2, r3, #28
 8016c58:	bf44      	itt	mi
 8016c5a:	222b      	movmi	r2, #43	; 0x2b
 8016c5c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016c60:	782a      	ldrb	r2, [r5, #0]
 8016c62:	2a2a      	cmp	r2, #42	; 0x2a
 8016c64:	d015      	beq.n	8016c92 <_svfiprintf_r+0xea>
 8016c66:	9a07      	ldr	r2, [sp, #28]
 8016c68:	462f      	mov	r7, r5
 8016c6a:	2000      	movs	r0, #0
 8016c6c:	250a      	movs	r5, #10
 8016c6e:	4639      	mov	r1, r7
 8016c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016c74:	3b30      	subs	r3, #48	; 0x30
 8016c76:	2b09      	cmp	r3, #9
 8016c78:	d94d      	bls.n	8016d16 <_svfiprintf_r+0x16e>
 8016c7a:	b1b8      	cbz	r0, 8016cac <_svfiprintf_r+0x104>
 8016c7c:	e00f      	b.n	8016c9e <_svfiprintf_r+0xf6>
 8016c7e:	462f      	mov	r7, r5
 8016c80:	e7b8      	b.n	8016bf4 <_svfiprintf_r+0x4c>
 8016c82:	4a40      	ldr	r2, [pc, #256]	; (8016d84 <_svfiprintf_r+0x1dc>)
 8016c84:	1a80      	subs	r0, r0, r2
 8016c86:	fa0b f000 	lsl.w	r0, fp, r0
 8016c8a:	4318      	orrs	r0, r3
 8016c8c:	9004      	str	r0, [sp, #16]
 8016c8e:	463d      	mov	r5, r7
 8016c90:	e7d3      	b.n	8016c3a <_svfiprintf_r+0x92>
 8016c92:	9a03      	ldr	r2, [sp, #12]
 8016c94:	1d11      	adds	r1, r2, #4
 8016c96:	6812      	ldr	r2, [r2, #0]
 8016c98:	9103      	str	r1, [sp, #12]
 8016c9a:	2a00      	cmp	r2, #0
 8016c9c:	db01      	blt.n	8016ca2 <_svfiprintf_r+0xfa>
 8016c9e:	9207      	str	r2, [sp, #28]
 8016ca0:	e004      	b.n	8016cac <_svfiprintf_r+0x104>
 8016ca2:	4252      	negs	r2, r2
 8016ca4:	f043 0302 	orr.w	r3, r3, #2
 8016ca8:	9207      	str	r2, [sp, #28]
 8016caa:	9304      	str	r3, [sp, #16]
 8016cac:	783b      	ldrb	r3, [r7, #0]
 8016cae:	2b2e      	cmp	r3, #46	; 0x2e
 8016cb0:	d10c      	bne.n	8016ccc <_svfiprintf_r+0x124>
 8016cb2:	787b      	ldrb	r3, [r7, #1]
 8016cb4:	2b2a      	cmp	r3, #42	; 0x2a
 8016cb6:	d133      	bne.n	8016d20 <_svfiprintf_r+0x178>
 8016cb8:	9b03      	ldr	r3, [sp, #12]
 8016cba:	1d1a      	adds	r2, r3, #4
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	9203      	str	r2, [sp, #12]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	bfb8      	it	lt
 8016cc4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016cc8:	3702      	adds	r7, #2
 8016cca:	9305      	str	r3, [sp, #20]
 8016ccc:	4d2e      	ldr	r5, [pc, #184]	; (8016d88 <_svfiprintf_r+0x1e0>)
 8016cce:	7839      	ldrb	r1, [r7, #0]
 8016cd0:	2203      	movs	r2, #3
 8016cd2:	4628      	mov	r0, r5
 8016cd4:	f7e9 fa9c 	bl	8000210 <memchr>
 8016cd8:	b138      	cbz	r0, 8016cea <_svfiprintf_r+0x142>
 8016cda:	2340      	movs	r3, #64	; 0x40
 8016cdc:	1b40      	subs	r0, r0, r5
 8016cde:	fa03 f000 	lsl.w	r0, r3, r0
 8016ce2:	9b04      	ldr	r3, [sp, #16]
 8016ce4:	4303      	orrs	r3, r0
 8016ce6:	3701      	adds	r7, #1
 8016ce8:	9304      	str	r3, [sp, #16]
 8016cea:	7839      	ldrb	r1, [r7, #0]
 8016cec:	4827      	ldr	r0, [pc, #156]	; (8016d8c <_svfiprintf_r+0x1e4>)
 8016cee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016cf2:	2206      	movs	r2, #6
 8016cf4:	1c7e      	adds	r6, r7, #1
 8016cf6:	f7e9 fa8b 	bl	8000210 <memchr>
 8016cfa:	2800      	cmp	r0, #0
 8016cfc:	d038      	beq.n	8016d70 <_svfiprintf_r+0x1c8>
 8016cfe:	4b24      	ldr	r3, [pc, #144]	; (8016d90 <_svfiprintf_r+0x1e8>)
 8016d00:	bb13      	cbnz	r3, 8016d48 <_svfiprintf_r+0x1a0>
 8016d02:	9b03      	ldr	r3, [sp, #12]
 8016d04:	3307      	adds	r3, #7
 8016d06:	f023 0307 	bic.w	r3, r3, #7
 8016d0a:	3308      	adds	r3, #8
 8016d0c:	9303      	str	r3, [sp, #12]
 8016d0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016d10:	444b      	add	r3, r9
 8016d12:	9309      	str	r3, [sp, #36]	; 0x24
 8016d14:	e76d      	b.n	8016bf2 <_svfiprintf_r+0x4a>
 8016d16:	fb05 3202 	mla	r2, r5, r2, r3
 8016d1a:	2001      	movs	r0, #1
 8016d1c:	460f      	mov	r7, r1
 8016d1e:	e7a6      	b.n	8016c6e <_svfiprintf_r+0xc6>
 8016d20:	2300      	movs	r3, #0
 8016d22:	3701      	adds	r7, #1
 8016d24:	9305      	str	r3, [sp, #20]
 8016d26:	4619      	mov	r1, r3
 8016d28:	250a      	movs	r5, #10
 8016d2a:	4638      	mov	r0, r7
 8016d2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016d30:	3a30      	subs	r2, #48	; 0x30
 8016d32:	2a09      	cmp	r2, #9
 8016d34:	d903      	bls.n	8016d3e <_svfiprintf_r+0x196>
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d0c8      	beq.n	8016ccc <_svfiprintf_r+0x124>
 8016d3a:	9105      	str	r1, [sp, #20]
 8016d3c:	e7c6      	b.n	8016ccc <_svfiprintf_r+0x124>
 8016d3e:	fb05 2101 	mla	r1, r5, r1, r2
 8016d42:	2301      	movs	r3, #1
 8016d44:	4607      	mov	r7, r0
 8016d46:	e7f0      	b.n	8016d2a <_svfiprintf_r+0x182>
 8016d48:	ab03      	add	r3, sp, #12
 8016d4a:	9300      	str	r3, [sp, #0]
 8016d4c:	4622      	mov	r2, r4
 8016d4e:	4b11      	ldr	r3, [pc, #68]	; (8016d94 <_svfiprintf_r+0x1ec>)
 8016d50:	a904      	add	r1, sp, #16
 8016d52:	4640      	mov	r0, r8
 8016d54:	f7fb ffbc 	bl	8012cd0 <_printf_float>
 8016d58:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016d5c:	4681      	mov	r9, r0
 8016d5e:	d1d6      	bne.n	8016d0e <_svfiprintf_r+0x166>
 8016d60:	89a3      	ldrh	r3, [r4, #12]
 8016d62:	065b      	lsls	r3, r3, #25
 8016d64:	f53f af35 	bmi.w	8016bd2 <_svfiprintf_r+0x2a>
 8016d68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016d6a:	b01d      	add	sp, #116	; 0x74
 8016d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d70:	ab03      	add	r3, sp, #12
 8016d72:	9300      	str	r3, [sp, #0]
 8016d74:	4622      	mov	r2, r4
 8016d76:	4b07      	ldr	r3, [pc, #28]	; (8016d94 <_svfiprintf_r+0x1ec>)
 8016d78:	a904      	add	r1, sp, #16
 8016d7a:	4640      	mov	r0, r8
 8016d7c:	f7fc fa5e 	bl	801323c <_printf_i>
 8016d80:	e7ea      	b.n	8016d58 <_svfiprintf_r+0x1b0>
 8016d82:	bf00      	nop
 8016d84:	0801845c 	.word	0x0801845c
 8016d88:	08018462 	.word	0x08018462
 8016d8c:	08018466 	.word	0x08018466
 8016d90:	08012cd1 	.word	0x08012cd1
 8016d94:	08016af5 	.word	0x08016af5

08016d98 <_sungetc_r>:
 8016d98:	b538      	push	{r3, r4, r5, lr}
 8016d9a:	1c4b      	adds	r3, r1, #1
 8016d9c:	4614      	mov	r4, r2
 8016d9e:	d103      	bne.n	8016da8 <_sungetc_r+0x10>
 8016da0:	f04f 35ff 	mov.w	r5, #4294967295
 8016da4:	4628      	mov	r0, r5
 8016da6:	bd38      	pop	{r3, r4, r5, pc}
 8016da8:	8993      	ldrh	r3, [r2, #12]
 8016daa:	f023 0320 	bic.w	r3, r3, #32
 8016dae:	8193      	strh	r3, [r2, #12]
 8016db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016db2:	6852      	ldr	r2, [r2, #4]
 8016db4:	b2cd      	uxtb	r5, r1
 8016db6:	b18b      	cbz	r3, 8016ddc <_sungetc_r+0x44>
 8016db8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016dba:	4293      	cmp	r3, r2
 8016dbc:	dd08      	ble.n	8016dd0 <_sungetc_r+0x38>
 8016dbe:	6823      	ldr	r3, [r4, #0]
 8016dc0:	1e5a      	subs	r2, r3, #1
 8016dc2:	6022      	str	r2, [r4, #0]
 8016dc4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8016dc8:	6863      	ldr	r3, [r4, #4]
 8016dca:	3301      	adds	r3, #1
 8016dcc:	6063      	str	r3, [r4, #4]
 8016dce:	e7e9      	b.n	8016da4 <_sungetc_r+0xc>
 8016dd0:	4621      	mov	r1, r4
 8016dd2:	f000 fd4b 	bl	801786c <__submore>
 8016dd6:	2800      	cmp	r0, #0
 8016dd8:	d0f1      	beq.n	8016dbe <_sungetc_r+0x26>
 8016dda:	e7e1      	b.n	8016da0 <_sungetc_r+0x8>
 8016ddc:	6921      	ldr	r1, [r4, #16]
 8016dde:	6823      	ldr	r3, [r4, #0]
 8016de0:	b151      	cbz	r1, 8016df8 <_sungetc_r+0x60>
 8016de2:	4299      	cmp	r1, r3
 8016de4:	d208      	bcs.n	8016df8 <_sungetc_r+0x60>
 8016de6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8016dea:	42a9      	cmp	r1, r5
 8016dec:	d104      	bne.n	8016df8 <_sungetc_r+0x60>
 8016dee:	3b01      	subs	r3, #1
 8016df0:	3201      	adds	r2, #1
 8016df2:	6023      	str	r3, [r4, #0]
 8016df4:	6062      	str	r2, [r4, #4]
 8016df6:	e7d5      	b.n	8016da4 <_sungetc_r+0xc>
 8016df8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8016dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e00:	6363      	str	r3, [r4, #52]	; 0x34
 8016e02:	2303      	movs	r3, #3
 8016e04:	63a3      	str	r3, [r4, #56]	; 0x38
 8016e06:	4623      	mov	r3, r4
 8016e08:	f803 5f46 	strb.w	r5, [r3, #70]!
 8016e0c:	6023      	str	r3, [r4, #0]
 8016e0e:	2301      	movs	r3, #1
 8016e10:	e7dc      	b.n	8016dcc <_sungetc_r+0x34>

08016e12 <__ssrefill_r>:
 8016e12:	b510      	push	{r4, lr}
 8016e14:	460c      	mov	r4, r1
 8016e16:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016e18:	b169      	cbz	r1, 8016e36 <__ssrefill_r+0x24>
 8016e1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e1e:	4299      	cmp	r1, r3
 8016e20:	d001      	beq.n	8016e26 <__ssrefill_r+0x14>
 8016e22:	f7ff fdbf 	bl	80169a4 <_free_r>
 8016e26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e28:	6063      	str	r3, [r4, #4]
 8016e2a:	2000      	movs	r0, #0
 8016e2c:	6360      	str	r0, [r4, #52]	; 0x34
 8016e2e:	b113      	cbz	r3, 8016e36 <__ssrefill_r+0x24>
 8016e30:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016e32:	6023      	str	r3, [r4, #0]
 8016e34:	bd10      	pop	{r4, pc}
 8016e36:	6923      	ldr	r3, [r4, #16]
 8016e38:	6023      	str	r3, [r4, #0]
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	6063      	str	r3, [r4, #4]
 8016e3e:	89a3      	ldrh	r3, [r4, #12]
 8016e40:	f043 0320 	orr.w	r3, r3, #32
 8016e44:	81a3      	strh	r3, [r4, #12]
 8016e46:	f04f 30ff 	mov.w	r0, #4294967295
 8016e4a:	e7f3      	b.n	8016e34 <__ssrefill_r+0x22>

08016e4c <__ssvfiscanf_r>:
 8016e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e50:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016e54:	460c      	mov	r4, r1
 8016e56:	2100      	movs	r1, #0
 8016e58:	9144      	str	r1, [sp, #272]	; 0x110
 8016e5a:	9145      	str	r1, [sp, #276]	; 0x114
 8016e5c:	499f      	ldr	r1, [pc, #636]	; (80170dc <__ssvfiscanf_r+0x290>)
 8016e5e:	91a0      	str	r1, [sp, #640]	; 0x280
 8016e60:	f10d 0804 	add.w	r8, sp, #4
 8016e64:	499e      	ldr	r1, [pc, #632]	; (80170e0 <__ssvfiscanf_r+0x294>)
 8016e66:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80170e4 <__ssvfiscanf_r+0x298>
 8016e6a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8016e6e:	4606      	mov	r6, r0
 8016e70:	4692      	mov	sl, r2
 8016e72:	91a1      	str	r1, [sp, #644]	; 0x284
 8016e74:	9300      	str	r3, [sp, #0]
 8016e76:	270a      	movs	r7, #10
 8016e78:	f89a 3000 	ldrb.w	r3, [sl]
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	f000 812a 	beq.w	80170d6 <__ssvfiscanf_r+0x28a>
 8016e82:	4655      	mov	r5, sl
 8016e84:	f7ff f8c8 	bl	8016018 <__locale_ctype_ptr>
 8016e88:	f815 bb01 	ldrb.w	fp, [r5], #1
 8016e8c:	4458      	add	r0, fp
 8016e8e:	7843      	ldrb	r3, [r0, #1]
 8016e90:	f013 0308 	ands.w	r3, r3, #8
 8016e94:	d01c      	beq.n	8016ed0 <__ssvfiscanf_r+0x84>
 8016e96:	6863      	ldr	r3, [r4, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	dd12      	ble.n	8016ec2 <__ssvfiscanf_r+0x76>
 8016e9c:	f7ff f8bc 	bl	8016018 <__locale_ctype_ptr>
 8016ea0:	6823      	ldr	r3, [r4, #0]
 8016ea2:	781a      	ldrb	r2, [r3, #0]
 8016ea4:	4410      	add	r0, r2
 8016ea6:	7842      	ldrb	r2, [r0, #1]
 8016ea8:	0712      	lsls	r2, r2, #28
 8016eaa:	d401      	bmi.n	8016eb0 <__ssvfiscanf_r+0x64>
 8016eac:	46aa      	mov	sl, r5
 8016eae:	e7e3      	b.n	8016e78 <__ssvfiscanf_r+0x2c>
 8016eb0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016eb2:	3201      	adds	r2, #1
 8016eb4:	9245      	str	r2, [sp, #276]	; 0x114
 8016eb6:	6862      	ldr	r2, [r4, #4]
 8016eb8:	3301      	adds	r3, #1
 8016eba:	3a01      	subs	r2, #1
 8016ebc:	6062      	str	r2, [r4, #4]
 8016ebe:	6023      	str	r3, [r4, #0]
 8016ec0:	e7e9      	b.n	8016e96 <__ssvfiscanf_r+0x4a>
 8016ec2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ec4:	4621      	mov	r1, r4
 8016ec6:	4630      	mov	r0, r6
 8016ec8:	4798      	blx	r3
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	d0e6      	beq.n	8016e9c <__ssvfiscanf_r+0x50>
 8016ece:	e7ed      	b.n	8016eac <__ssvfiscanf_r+0x60>
 8016ed0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8016ed4:	f040 8082 	bne.w	8016fdc <__ssvfiscanf_r+0x190>
 8016ed8:	9343      	str	r3, [sp, #268]	; 0x10c
 8016eda:	9341      	str	r3, [sp, #260]	; 0x104
 8016edc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8016ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8016ee2:	d103      	bne.n	8016eec <__ssvfiscanf_r+0xa0>
 8016ee4:	2310      	movs	r3, #16
 8016ee6:	9341      	str	r3, [sp, #260]	; 0x104
 8016ee8:	f10a 0502 	add.w	r5, sl, #2
 8016eec:	46aa      	mov	sl, r5
 8016eee:	f815 1b01 	ldrb.w	r1, [r5], #1
 8016ef2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8016ef6:	2a09      	cmp	r2, #9
 8016ef8:	d922      	bls.n	8016f40 <__ssvfiscanf_r+0xf4>
 8016efa:	2203      	movs	r2, #3
 8016efc:	4879      	ldr	r0, [pc, #484]	; (80170e4 <__ssvfiscanf_r+0x298>)
 8016efe:	f7e9 f987 	bl	8000210 <memchr>
 8016f02:	b138      	cbz	r0, 8016f14 <__ssvfiscanf_r+0xc8>
 8016f04:	eba0 0309 	sub.w	r3, r0, r9
 8016f08:	2001      	movs	r0, #1
 8016f0a:	4098      	lsls	r0, r3
 8016f0c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f0e:	4318      	orrs	r0, r3
 8016f10:	9041      	str	r0, [sp, #260]	; 0x104
 8016f12:	46aa      	mov	sl, r5
 8016f14:	f89a 3000 	ldrb.w	r3, [sl]
 8016f18:	2b67      	cmp	r3, #103	; 0x67
 8016f1a:	f10a 0501 	add.w	r5, sl, #1
 8016f1e:	d82b      	bhi.n	8016f78 <__ssvfiscanf_r+0x12c>
 8016f20:	2b65      	cmp	r3, #101	; 0x65
 8016f22:	f080 809f 	bcs.w	8017064 <__ssvfiscanf_r+0x218>
 8016f26:	2b47      	cmp	r3, #71	; 0x47
 8016f28:	d810      	bhi.n	8016f4c <__ssvfiscanf_r+0x100>
 8016f2a:	2b45      	cmp	r3, #69	; 0x45
 8016f2c:	f080 809a 	bcs.w	8017064 <__ssvfiscanf_r+0x218>
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d06c      	beq.n	801700e <__ssvfiscanf_r+0x1c2>
 8016f34:	2b25      	cmp	r3, #37	; 0x25
 8016f36:	d051      	beq.n	8016fdc <__ssvfiscanf_r+0x190>
 8016f38:	2303      	movs	r3, #3
 8016f3a:	9347      	str	r3, [sp, #284]	; 0x11c
 8016f3c:	9742      	str	r7, [sp, #264]	; 0x108
 8016f3e:	e027      	b.n	8016f90 <__ssvfiscanf_r+0x144>
 8016f40:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016f42:	fb07 1303 	mla	r3, r7, r3, r1
 8016f46:	3b30      	subs	r3, #48	; 0x30
 8016f48:	9343      	str	r3, [sp, #268]	; 0x10c
 8016f4a:	e7cf      	b.n	8016eec <__ssvfiscanf_r+0xa0>
 8016f4c:	2b5b      	cmp	r3, #91	; 0x5b
 8016f4e:	d06a      	beq.n	8017026 <__ssvfiscanf_r+0x1da>
 8016f50:	d80c      	bhi.n	8016f6c <__ssvfiscanf_r+0x120>
 8016f52:	2b58      	cmp	r3, #88	; 0x58
 8016f54:	d1f0      	bne.n	8016f38 <__ssvfiscanf_r+0xec>
 8016f56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016f58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016f5c:	9241      	str	r2, [sp, #260]	; 0x104
 8016f5e:	2210      	movs	r2, #16
 8016f60:	9242      	str	r2, [sp, #264]	; 0x108
 8016f62:	2b6e      	cmp	r3, #110	; 0x6e
 8016f64:	bf8c      	ite	hi
 8016f66:	2304      	movhi	r3, #4
 8016f68:	2303      	movls	r3, #3
 8016f6a:	e010      	b.n	8016f8e <__ssvfiscanf_r+0x142>
 8016f6c:	2b63      	cmp	r3, #99	; 0x63
 8016f6e:	d065      	beq.n	801703c <__ssvfiscanf_r+0x1f0>
 8016f70:	2b64      	cmp	r3, #100	; 0x64
 8016f72:	d1e1      	bne.n	8016f38 <__ssvfiscanf_r+0xec>
 8016f74:	9742      	str	r7, [sp, #264]	; 0x108
 8016f76:	e7f4      	b.n	8016f62 <__ssvfiscanf_r+0x116>
 8016f78:	2b70      	cmp	r3, #112	; 0x70
 8016f7a:	d04b      	beq.n	8017014 <__ssvfiscanf_r+0x1c8>
 8016f7c:	d826      	bhi.n	8016fcc <__ssvfiscanf_r+0x180>
 8016f7e:	2b6e      	cmp	r3, #110	; 0x6e
 8016f80:	d062      	beq.n	8017048 <__ssvfiscanf_r+0x1fc>
 8016f82:	d84c      	bhi.n	801701e <__ssvfiscanf_r+0x1d2>
 8016f84:	2b69      	cmp	r3, #105	; 0x69
 8016f86:	d1d7      	bne.n	8016f38 <__ssvfiscanf_r+0xec>
 8016f88:	2300      	movs	r3, #0
 8016f8a:	9342      	str	r3, [sp, #264]	; 0x108
 8016f8c:	2303      	movs	r3, #3
 8016f8e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016f90:	6863      	ldr	r3, [r4, #4]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	dd68      	ble.n	8017068 <__ssvfiscanf_r+0x21c>
 8016f96:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016f98:	0659      	lsls	r1, r3, #25
 8016f9a:	d407      	bmi.n	8016fac <__ssvfiscanf_r+0x160>
 8016f9c:	f7ff f83c 	bl	8016018 <__locale_ctype_ptr>
 8016fa0:	6823      	ldr	r3, [r4, #0]
 8016fa2:	781a      	ldrb	r2, [r3, #0]
 8016fa4:	4410      	add	r0, r2
 8016fa6:	7842      	ldrb	r2, [r0, #1]
 8016fa8:	0712      	lsls	r2, r2, #28
 8016faa:	d464      	bmi.n	8017076 <__ssvfiscanf_r+0x22a>
 8016fac:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8016fae:	2b02      	cmp	r3, #2
 8016fb0:	dc73      	bgt.n	801709a <__ssvfiscanf_r+0x24e>
 8016fb2:	466b      	mov	r3, sp
 8016fb4:	4622      	mov	r2, r4
 8016fb6:	a941      	add	r1, sp, #260	; 0x104
 8016fb8:	4630      	mov	r0, r6
 8016fba:	f000 f9d7 	bl	801736c <_scanf_chars>
 8016fbe:	2801      	cmp	r0, #1
 8016fc0:	f000 8089 	beq.w	80170d6 <__ssvfiscanf_r+0x28a>
 8016fc4:	2802      	cmp	r0, #2
 8016fc6:	f47f af71 	bne.w	8016eac <__ssvfiscanf_r+0x60>
 8016fca:	e01d      	b.n	8017008 <__ssvfiscanf_r+0x1bc>
 8016fcc:	2b75      	cmp	r3, #117	; 0x75
 8016fce:	d0d1      	beq.n	8016f74 <__ssvfiscanf_r+0x128>
 8016fd0:	2b78      	cmp	r3, #120	; 0x78
 8016fd2:	d0c0      	beq.n	8016f56 <__ssvfiscanf_r+0x10a>
 8016fd4:	2b73      	cmp	r3, #115	; 0x73
 8016fd6:	d1af      	bne.n	8016f38 <__ssvfiscanf_r+0xec>
 8016fd8:	2302      	movs	r3, #2
 8016fda:	e7d8      	b.n	8016f8e <__ssvfiscanf_r+0x142>
 8016fdc:	6863      	ldr	r3, [r4, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	dd0c      	ble.n	8016ffc <__ssvfiscanf_r+0x1b0>
 8016fe2:	6823      	ldr	r3, [r4, #0]
 8016fe4:	781a      	ldrb	r2, [r3, #0]
 8016fe6:	455a      	cmp	r2, fp
 8016fe8:	d175      	bne.n	80170d6 <__ssvfiscanf_r+0x28a>
 8016fea:	3301      	adds	r3, #1
 8016fec:	6862      	ldr	r2, [r4, #4]
 8016fee:	6023      	str	r3, [r4, #0]
 8016ff0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8016ff2:	3a01      	subs	r2, #1
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	6062      	str	r2, [r4, #4]
 8016ff8:	9345      	str	r3, [sp, #276]	; 0x114
 8016ffa:	e757      	b.n	8016eac <__ssvfiscanf_r+0x60>
 8016ffc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8016ffe:	4621      	mov	r1, r4
 8017000:	4630      	mov	r0, r6
 8017002:	4798      	blx	r3
 8017004:	2800      	cmp	r0, #0
 8017006:	d0ec      	beq.n	8016fe2 <__ssvfiscanf_r+0x196>
 8017008:	9844      	ldr	r0, [sp, #272]	; 0x110
 801700a:	2800      	cmp	r0, #0
 801700c:	d159      	bne.n	80170c2 <__ssvfiscanf_r+0x276>
 801700e:	f04f 30ff 	mov.w	r0, #4294967295
 8017012:	e05c      	b.n	80170ce <__ssvfiscanf_r+0x282>
 8017014:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017016:	f042 0220 	orr.w	r2, r2, #32
 801701a:	9241      	str	r2, [sp, #260]	; 0x104
 801701c:	e79b      	b.n	8016f56 <__ssvfiscanf_r+0x10a>
 801701e:	2308      	movs	r3, #8
 8017020:	9342      	str	r3, [sp, #264]	; 0x108
 8017022:	2304      	movs	r3, #4
 8017024:	e7b3      	b.n	8016f8e <__ssvfiscanf_r+0x142>
 8017026:	4629      	mov	r1, r5
 8017028:	4640      	mov	r0, r8
 801702a:	f000 fb4f 	bl	80176cc <__sccl>
 801702e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017034:	9341      	str	r3, [sp, #260]	; 0x104
 8017036:	4605      	mov	r5, r0
 8017038:	2301      	movs	r3, #1
 801703a:	e7a8      	b.n	8016f8e <__ssvfiscanf_r+0x142>
 801703c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801703e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017042:	9341      	str	r3, [sp, #260]	; 0x104
 8017044:	2300      	movs	r3, #0
 8017046:	e7a2      	b.n	8016f8e <__ssvfiscanf_r+0x142>
 8017048:	9841      	ldr	r0, [sp, #260]	; 0x104
 801704a:	06c3      	lsls	r3, r0, #27
 801704c:	f53f af2e 	bmi.w	8016eac <__ssvfiscanf_r+0x60>
 8017050:	9b00      	ldr	r3, [sp, #0]
 8017052:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017054:	1d19      	adds	r1, r3, #4
 8017056:	9100      	str	r1, [sp, #0]
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	07c0      	lsls	r0, r0, #31
 801705c:	bf4c      	ite	mi
 801705e:	801a      	strhmi	r2, [r3, #0]
 8017060:	601a      	strpl	r2, [r3, #0]
 8017062:	e723      	b.n	8016eac <__ssvfiscanf_r+0x60>
 8017064:	2305      	movs	r3, #5
 8017066:	e792      	b.n	8016f8e <__ssvfiscanf_r+0x142>
 8017068:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801706a:	4621      	mov	r1, r4
 801706c:	4630      	mov	r0, r6
 801706e:	4798      	blx	r3
 8017070:	2800      	cmp	r0, #0
 8017072:	d090      	beq.n	8016f96 <__ssvfiscanf_r+0x14a>
 8017074:	e7c8      	b.n	8017008 <__ssvfiscanf_r+0x1bc>
 8017076:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017078:	3201      	adds	r2, #1
 801707a:	9245      	str	r2, [sp, #276]	; 0x114
 801707c:	6862      	ldr	r2, [r4, #4]
 801707e:	3a01      	subs	r2, #1
 8017080:	2a00      	cmp	r2, #0
 8017082:	6062      	str	r2, [r4, #4]
 8017084:	dd02      	ble.n	801708c <__ssvfiscanf_r+0x240>
 8017086:	3301      	adds	r3, #1
 8017088:	6023      	str	r3, [r4, #0]
 801708a:	e787      	b.n	8016f9c <__ssvfiscanf_r+0x150>
 801708c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801708e:	4621      	mov	r1, r4
 8017090:	4630      	mov	r0, r6
 8017092:	4798      	blx	r3
 8017094:	2800      	cmp	r0, #0
 8017096:	d081      	beq.n	8016f9c <__ssvfiscanf_r+0x150>
 8017098:	e7b6      	b.n	8017008 <__ssvfiscanf_r+0x1bc>
 801709a:	2b04      	cmp	r3, #4
 801709c:	dc06      	bgt.n	80170ac <__ssvfiscanf_r+0x260>
 801709e:	466b      	mov	r3, sp
 80170a0:	4622      	mov	r2, r4
 80170a2:	a941      	add	r1, sp, #260	; 0x104
 80170a4:	4630      	mov	r0, r6
 80170a6:	f000 f9c5 	bl	8017434 <_scanf_i>
 80170aa:	e788      	b.n	8016fbe <__ssvfiscanf_r+0x172>
 80170ac:	4b0e      	ldr	r3, [pc, #56]	; (80170e8 <__ssvfiscanf_r+0x29c>)
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	f43f aefc 	beq.w	8016eac <__ssvfiscanf_r+0x60>
 80170b4:	466b      	mov	r3, sp
 80170b6:	4622      	mov	r2, r4
 80170b8:	a941      	add	r1, sp, #260	; 0x104
 80170ba:	4630      	mov	r0, r6
 80170bc:	f7fc f9d0 	bl	8013460 <_scanf_float>
 80170c0:	e77d      	b.n	8016fbe <__ssvfiscanf_r+0x172>
 80170c2:	89a3      	ldrh	r3, [r4, #12]
 80170c4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80170c8:	bf18      	it	ne
 80170ca:	f04f 30ff 	movne.w	r0, #4294967295
 80170ce:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80170d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80170d6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80170d8:	e7f9      	b.n	80170ce <__ssvfiscanf_r+0x282>
 80170da:	bf00      	nop
 80170dc:	08016d99 	.word	0x08016d99
 80170e0:	08016e13 	.word	0x08016e13
 80170e4:	08018462 	.word	0x08018462
 80170e8:	08013461 	.word	0x08013461

080170ec <__sfputc_r>:
 80170ec:	6893      	ldr	r3, [r2, #8]
 80170ee:	3b01      	subs	r3, #1
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	b410      	push	{r4}
 80170f4:	6093      	str	r3, [r2, #8]
 80170f6:	da08      	bge.n	801710a <__sfputc_r+0x1e>
 80170f8:	6994      	ldr	r4, [r2, #24]
 80170fa:	42a3      	cmp	r3, r4
 80170fc:	db01      	blt.n	8017102 <__sfputc_r+0x16>
 80170fe:	290a      	cmp	r1, #10
 8017100:	d103      	bne.n	801710a <__sfputc_r+0x1e>
 8017102:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017106:	f7fd bbbd 	b.w	8014884 <__swbuf_r>
 801710a:	6813      	ldr	r3, [r2, #0]
 801710c:	1c58      	adds	r0, r3, #1
 801710e:	6010      	str	r0, [r2, #0]
 8017110:	7019      	strb	r1, [r3, #0]
 8017112:	4608      	mov	r0, r1
 8017114:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017118:	4770      	bx	lr

0801711a <__sfputs_r>:
 801711a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801711c:	4606      	mov	r6, r0
 801711e:	460f      	mov	r7, r1
 8017120:	4614      	mov	r4, r2
 8017122:	18d5      	adds	r5, r2, r3
 8017124:	42ac      	cmp	r4, r5
 8017126:	d101      	bne.n	801712c <__sfputs_r+0x12>
 8017128:	2000      	movs	r0, #0
 801712a:	e007      	b.n	801713c <__sfputs_r+0x22>
 801712c:	463a      	mov	r2, r7
 801712e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017132:	4630      	mov	r0, r6
 8017134:	f7ff ffda 	bl	80170ec <__sfputc_r>
 8017138:	1c43      	adds	r3, r0, #1
 801713a:	d1f3      	bne.n	8017124 <__sfputs_r+0xa>
 801713c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017140 <_vfiprintf_r>:
 8017140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017144:	460c      	mov	r4, r1
 8017146:	b09d      	sub	sp, #116	; 0x74
 8017148:	4617      	mov	r7, r2
 801714a:	461d      	mov	r5, r3
 801714c:	4606      	mov	r6, r0
 801714e:	b118      	cbz	r0, 8017158 <_vfiprintf_r+0x18>
 8017150:	6983      	ldr	r3, [r0, #24]
 8017152:	b90b      	cbnz	r3, 8017158 <_vfiprintf_r+0x18>
 8017154:	f7fe fbac 	bl	80158b0 <__sinit>
 8017158:	4b7c      	ldr	r3, [pc, #496]	; (801734c <_vfiprintf_r+0x20c>)
 801715a:	429c      	cmp	r4, r3
 801715c:	d158      	bne.n	8017210 <_vfiprintf_r+0xd0>
 801715e:	6874      	ldr	r4, [r6, #4]
 8017160:	89a3      	ldrh	r3, [r4, #12]
 8017162:	0718      	lsls	r0, r3, #28
 8017164:	d55e      	bpl.n	8017224 <_vfiprintf_r+0xe4>
 8017166:	6923      	ldr	r3, [r4, #16]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d05b      	beq.n	8017224 <_vfiprintf_r+0xe4>
 801716c:	2300      	movs	r3, #0
 801716e:	9309      	str	r3, [sp, #36]	; 0x24
 8017170:	2320      	movs	r3, #32
 8017172:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017176:	2330      	movs	r3, #48	; 0x30
 8017178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801717c:	9503      	str	r5, [sp, #12]
 801717e:	f04f 0b01 	mov.w	fp, #1
 8017182:	46b8      	mov	r8, r7
 8017184:	4645      	mov	r5, r8
 8017186:	f815 3b01 	ldrb.w	r3, [r5], #1
 801718a:	b10b      	cbz	r3, 8017190 <_vfiprintf_r+0x50>
 801718c:	2b25      	cmp	r3, #37	; 0x25
 801718e:	d154      	bne.n	801723a <_vfiprintf_r+0xfa>
 8017190:	ebb8 0a07 	subs.w	sl, r8, r7
 8017194:	d00b      	beq.n	80171ae <_vfiprintf_r+0x6e>
 8017196:	4653      	mov	r3, sl
 8017198:	463a      	mov	r2, r7
 801719a:	4621      	mov	r1, r4
 801719c:	4630      	mov	r0, r6
 801719e:	f7ff ffbc 	bl	801711a <__sfputs_r>
 80171a2:	3001      	adds	r0, #1
 80171a4:	f000 80c2 	beq.w	801732c <_vfiprintf_r+0x1ec>
 80171a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171aa:	4453      	add	r3, sl
 80171ac:	9309      	str	r3, [sp, #36]	; 0x24
 80171ae:	f898 3000 	ldrb.w	r3, [r8]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	f000 80ba 	beq.w	801732c <_vfiprintf_r+0x1ec>
 80171b8:	2300      	movs	r3, #0
 80171ba:	f04f 32ff 	mov.w	r2, #4294967295
 80171be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80171c2:	9304      	str	r3, [sp, #16]
 80171c4:	9307      	str	r3, [sp, #28]
 80171c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80171ca:	931a      	str	r3, [sp, #104]	; 0x68
 80171cc:	46a8      	mov	r8, r5
 80171ce:	2205      	movs	r2, #5
 80171d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80171d4:	485e      	ldr	r0, [pc, #376]	; (8017350 <_vfiprintf_r+0x210>)
 80171d6:	f7e9 f81b 	bl	8000210 <memchr>
 80171da:	9b04      	ldr	r3, [sp, #16]
 80171dc:	bb78      	cbnz	r0, 801723e <_vfiprintf_r+0xfe>
 80171de:	06d9      	lsls	r1, r3, #27
 80171e0:	bf44      	itt	mi
 80171e2:	2220      	movmi	r2, #32
 80171e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171e8:	071a      	lsls	r2, r3, #28
 80171ea:	bf44      	itt	mi
 80171ec:	222b      	movmi	r2, #43	; 0x2b
 80171ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80171f2:	782a      	ldrb	r2, [r5, #0]
 80171f4:	2a2a      	cmp	r2, #42	; 0x2a
 80171f6:	d02a      	beq.n	801724e <_vfiprintf_r+0x10e>
 80171f8:	9a07      	ldr	r2, [sp, #28]
 80171fa:	46a8      	mov	r8, r5
 80171fc:	2000      	movs	r0, #0
 80171fe:	250a      	movs	r5, #10
 8017200:	4641      	mov	r1, r8
 8017202:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017206:	3b30      	subs	r3, #48	; 0x30
 8017208:	2b09      	cmp	r3, #9
 801720a:	d969      	bls.n	80172e0 <_vfiprintf_r+0x1a0>
 801720c:	b360      	cbz	r0, 8017268 <_vfiprintf_r+0x128>
 801720e:	e024      	b.n	801725a <_vfiprintf_r+0x11a>
 8017210:	4b50      	ldr	r3, [pc, #320]	; (8017354 <_vfiprintf_r+0x214>)
 8017212:	429c      	cmp	r4, r3
 8017214:	d101      	bne.n	801721a <_vfiprintf_r+0xda>
 8017216:	68b4      	ldr	r4, [r6, #8]
 8017218:	e7a2      	b.n	8017160 <_vfiprintf_r+0x20>
 801721a:	4b4f      	ldr	r3, [pc, #316]	; (8017358 <_vfiprintf_r+0x218>)
 801721c:	429c      	cmp	r4, r3
 801721e:	bf08      	it	eq
 8017220:	68f4      	ldreq	r4, [r6, #12]
 8017222:	e79d      	b.n	8017160 <_vfiprintf_r+0x20>
 8017224:	4621      	mov	r1, r4
 8017226:	4630      	mov	r0, r6
 8017228:	f7fd fb90 	bl	801494c <__swsetup_r>
 801722c:	2800      	cmp	r0, #0
 801722e:	d09d      	beq.n	801716c <_vfiprintf_r+0x2c>
 8017230:	f04f 30ff 	mov.w	r0, #4294967295
 8017234:	b01d      	add	sp, #116	; 0x74
 8017236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723a:	46a8      	mov	r8, r5
 801723c:	e7a2      	b.n	8017184 <_vfiprintf_r+0x44>
 801723e:	4a44      	ldr	r2, [pc, #272]	; (8017350 <_vfiprintf_r+0x210>)
 8017240:	1a80      	subs	r0, r0, r2
 8017242:	fa0b f000 	lsl.w	r0, fp, r0
 8017246:	4318      	orrs	r0, r3
 8017248:	9004      	str	r0, [sp, #16]
 801724a:	4645      	mov	r5, r8
 801724c:	e7be      	b.n	80171cc <_vfiprintf_r+0x8c>
 801724e:	9a03      	ldr	r2, [sp, #12]
 8017250:	1d11      	adds	r1, r2, #4
 8017252:	6812      	ldr	r2, [r2, #0]
 8017254:	9103      	str	r1, [sp, #12]
 8017256:	2a00      	cmp	r2, #0
 8017258:	db01      	blt.n	801725e <_vfiprintf_r+0x11e>
 801725a:	9207      	str	r2, [sp, #28]
 801725c:	e004      	b.n	8017268 <_vfiprintf_r+0x128>
 801725e:	4252      	negs	r2, r2
 8017260:	f043 0302 	orr.w	r3, r3, #2
 8017264:	9207      	str	r2, [sp, #28]
 8017266:	9304      	str	r3, [sp, #16]
 8017268:	f898 3000 	ldrb.w	r3, [r8]
 801726c:	2b2e      	cmp	r3, #46	; 0x2e
 801726e:	d10e      	bne.n	801728e <_vfiprintf_r+0x14e>
 8017270:	f898 3001 	ldrb.w	r3, [r8, #1]
 8017274:	2b2a      	cmp	r3, #42	; 0x2a
 8017276:	d138      	bne.n	80172ea <_vfiprintf_r+0x1aa>
 8017278:	9b03      	ldr	r3, [sp, #12]
 801727a:	1d1a      	adds	r2, r3, #4
 801727c:	681b      	ldr	r3, [r3, #0]
 801727e:	9203      	str	r2, [sp, #12]
 8017280:	2b00      	cmp	r3, #0
 8017282:	bfb8      	it	lt
 8017284:	f04f 33ff 	movlt.w	r3, #4294967295
 8017288:	f108 0802 	add.w	r8, r8, #2
 801728c:	9305      	str	r3, [sp, #20]
 801728e:	4d33      	ldr	r5, [pc, #204]	; (801735c <_vfiprintf_r+0x21c>)
 8017290:	f898 1000 	ldrb.w	r1, [r8]
 8017294:	2203      	movs	r2, #3
 8017296:	4628      	mov	r0, r5
 8017298:	f7e8 ffba 	bl	8000210 <memchr>
 801729c:	b140      	cbz	r0, 80172b0 <_vfiprintf_r+0x170>
 801729e:	2340      	movs	r3, #64	; 0x40
 80172a0:	1b40      	subs	r0, r0, r5
 80172a2:	fa03 f000 	lsl.w	r0, r3, r0
 80172a6:	9b04      	ldr	r3, [sp, #16]
 80172a8:	4303      	orrs	r3, r0
 80172aa:	f108 0801 	add.w	r8, r8, #1
 80172ae:	9304      	str	r3, [sp, #16]
 80172b0:	f898 1000 	ldrb.w	r1, [r8]
 80172b4:	482a      	ldr	r0, [pc, #168]	; (8017360 <_vfiprintf_r+0x220>)
 80172b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80172ba:	2206      	movs	r2, #6
 80172bc:	f108 0701 	add.w	r7, r8, #1
 80172c0:	f7e8 ffa6 	bl	8000210 <memchr>
 80172c4:	2800      	cmp	r0, #0
 80172c6:	d037      	beq.n	8017338 <_vfiprintf_r+0x1f8>
 80172c8:	4b26      	ldr	r3, [pc, #152]	; (8017364 <_vfiprintf_r+0x224>)
 80172ca:	bb1b      	cbnz	r3, 8017314 <_vfiprintf_r+0x1d4>
 80172cc:	9b03      	ldr	r3, [sp, #12]
 80172ce:	3307      	adds	r3, #7
 80172d0:	f023 0307 	bic.w	r3, r3, #7
 80172d4:	3308      	adds	r3, #8
 80172d6:	9303      	str	r3, [sp, #12]
 80172d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80172da:	444b      	add	r3, r9
 80172dc:	9309      	str	r3, [sp, #36]	; 0x24
 80172de:	e750      	b.n	8017182 <_vfiprintf_r+0x42>
 80172e0:	fb05 3202 	mla	r2, r5, r2, r3
 80172e4:	2001      	movs	r0, #1
 80172e6:	4688      	mov	r8, r1
 80172e8:	e78a      	b.n	8017200 <_vfiprintf_r+0xc0>
 80172ea:	2300      	movs	r3, #0
 80172ec:	f108 0801 	add.w	r8, r8, #1
 80172f0:	9305      	str	r3, [sp, #20]
 80172f2:	4619      	mov	r1, r3
 80172f4:	250a      	movs	r5, #10
 80172f6:	4640      	mov	r0, r8
 80172f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80172fc:	3a30      	subs	r2, #48	; 0x30
 80172fe:	2a09      	cmp	r2, #9
 8017300:	d903      	bls.n	801730a <_vfiprintf_r+0x1ca>
 8017302:	2b00      	cmp	r3, #0
 8017304:	d0c3      	beq.n	801728e <_vfiprintf_r+0x14e>
 8017306:	9105      	str	r1, [sp, #20]
 8017308:	e7c1      	b.n	801728e <_vfiprintf_r+0x14e>
 801730a:	fb05 2101 	mla	r1, r5, r1, r2
 801730e:	2301      	movs	r3, #1
 8017310:	4680      	mov	r8, r0
 8017312:	e7f0      	b.n	80172f6 <_vfiprintf_r+0x1b6>
 8017314:	ab03      	add	r3, sp, #12
 8017316:	9300      	str	r3, [sp, #0]
 8017318:	4622      	mov	r2, r4
 801731a:	4b13      	ldr	r3, [pc, #76]	; (8017368 <_vfiprintf_r+0x228>)
 801731c:	a904      	add	r1, sp, #16
 801731e:	4630      	mov	r0, r6
 8017320:	f7fb fcd6 	bl	8012cd0 <_printf_float>
 8017324:	f1b0 3fff 	cmp.w	r0, #4294967295
 8017328:	4681      	mov	r9, r0
 801732a:	d1d5      	bne.n	80172d8 <_vfiprintf_r+0x198>
 801732c:	89a3      	ldrh	r3, [r4, #12]
 801732e:	065b      	lsls	r3, r3, #25
 8017330:	f53f af7e 	bmi.w	8017230 <_vfiprintf_r+0xf0>
 8017334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017336:	e77d      	b.n	8017234 <_vfiprintf_r+0xf4>
 8017338:	ab03      	add	r3, sp, #12
 801733a:	9300      	str	r3, [sp, #0]
 801733c:	4622      	mov	r2, r4
 801733e:	4b0a      	ldr	r3, [pc, #40]	; (8017368 <_vfiprintf_r+0x228>)
 8017340:	a904      	add	r1, sp, #16
 8017342:	4630      	mov	r0, r6
 8017344:	f7fb ff7a 	bl	801323c <_printf_i>
 8017348:	e7ec      	b.n	8017324 <_vfiprintf_r+0x1e4>
 801734a:	bf00      	nop
 801734c:	08018310 	.word	0x08018310
 8017350:	0801845c 	.word	0x0801845c
 8017354:	08018330 	.word	0x08018330
 8017358:	080182f0 	.word	0x080182f0
 801735c:	08018462 	.word	0x08018462
 8017360:	08018466 	.word	0x08018466
 8017364:	08012cd1 	.word	0x08012cd1
 8017368:	0801711b 	.word	0x0801711b

0801736c <_scanf_chars>:
 801736c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017370:	4615      	mov	r5, r2
 8017372:	688a      	ldr	r2, [r1, #8]
 8017374:	4680      	mov	r8, r0
 8017376:	460c      	mov	r4, r1
 8017378:	b932      	cbnz	r2, 8017388 <_scanf_chars+0x1c>
 801737a:	698a      	ldr	r2, [r1, #24]
 801737c:	2a00      	cmp	r2, #0
 801737e:	bf14      	ite	ne
 8017380:	f04f 32ff 	movne.w	r2, #4294967295
 8017384:	2201      	moveq	r2, #1
 8017386:	608a      	str	r2, [r1, #8]
 8017388:	6822      	ldr	r2, [r4, #0]
 801738a:	06d1      	lsls	r1, r2, #27
 801738c:	bf5f      	itttt	pl
 801738e:	681a      	ldrpl	r2, [r3, #0]
 8017390:	1d11      	addpl	r1, r2, #4
 8017392:	6019      	strpl	r1, [r3, #0]
 8017394:	6817      	ldrpl	r7, [r2, #0]
 8017396:	2600      	movs	r6, #0
 8017398:	69a3      	ldr	r3, [r4, #24]
 801739a:	b1db      	cbz	r3, 80173d4 <_scanf_chars+0x68>
 801739c:	2b01      	cmp	r3, #1
 801739e:	d107      	bne.n	80173b0 <_scanf_chars+0x44>
 80173a0:	682b      	ldr	r3, [r5, #0]
 80173a2:	6962      	ldr	r2, [r4, #20]
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	5cd3      	ldrb	r3, [r2, r3]
 80173a8:	b9a3      	cbnz	r3, 80173d4 <_scanf_chars+0x68>
 80173aa:	2e00      	cmp	r6, #0
 80173ac:	d132      	bne.n	8017414 <_scanf_chars+0xa8>
 80173ae:	e006      	b.n	80173be <_scanf_chars+0x52>
 80173b0:	2b02      	cmp	r3, #2
 80173b2:	d007      	beq.n	80173c4 <_scanf_chars+0x58>
 80173b4:	2e00      	cmp	r6, #0
 80173b6:	d12d      	bne.n	8017414 <_scanf_chars+0xa8>
 80173b8:	69a3      	ldr	r3, [r4, #24]
 80173ba:	2b01      	cmp	r3, #1
 80173bc:	d12a      	bne.n	8017414 <_scanf_chars+0xa8>
 80173be:	2001      	movs	r0, #1
 80173c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173c4:	f7fe fe28 	bl	8016018 <__locale_ctype_ptr>
 80173c8:	682b      	ldr	r3, [r5, #0]
 80173ca:	781b      	ldrb	r3, [r3, #0]
 80173cc:	4418      	add	r0, r3
 80173ce:	7843      	ldrb	r3, [r0, #1]
 80173d0:	071b      	lsls	r3, r3, #28
 80173d2:	d4ef      	bmi.n	80173b4 <_scanf_chars+0x48>
 80173d4:	6823      	ldr	r3, [r4, #0]
 80173d6:	06da      	lsls	r2, r3, #27
 80173d8:	bf5e      	ittt	pl
 80173da:	682b      	ldrpl	r3, [r5, #0]
 80173dc:	781b      	ldrbpl	r3, [r3, #0]
 80173de:	703b      	strbpl	r3, [r7, #0]
 80173e0:	682a      	ldr	r2, [r5, #0]
 80173e2:	686b      	ldr	r3, [r5, #4]
 80173e4:	f102 0201 	add.w	r2, r2, #1
 80173e8:	602a      	str	r2, [r5, #0]
 80173ea:	68a2      	ldr	r2, [r4, #8]
 80173ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80173f0:	f102 32ff 	add.w	r2, r2, #4294967295
 80173f4:	606b      	str	r3, [r5, #4]
 80173f6:	f106 0601 	add.w	r6, r6, #1
 80173fa:	bf58      	it	pl
 80173fc:	3701      	addpl	r7, #1
 80173fe:	60a2      	str	r2, [r4, #8]
 8017400:	b142      	cbz	r2, 8017414 <_scanf_chars+0xa8>
 8017402:	2b00      	cmp	r3, #0
 8017404:	dcc8      	bgt.n	8017398 <_scanf_chars+0x2c>
 8017406:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801740a:	4629      	mov	r1, r5
 801740c:	4640      	mov	r0, r8
 801740e:	4798      	blx	r3
 8017410:	2800      	cmp	r0, #0
 8017412:	d0c1      	beq.n	8017398 <_scanf_chars+0x2c>
 8017414:	6823      	ldr	r3, [r4, #0]
 8017416:	f013 0310 	ands.w	r3, r3, #16
 801741a:	d105      	bne.n	8017428 <_scanf_chars+0xbc>
 801741c:	68e2      	ldr	r2, [r4, #12]
 801741e:	3201      	adds	r2, #1
 8017420:	60e2      	str	r2, [r4, #12]
 8017422:	69a2      	ldr	r2, [r4, #24]
 8017424:	b102      	cbz	r2, 8017428 <_scanf_chars+0xbc>
 8017426:	703b      	strb	r3, [r7, #0]
 8017428:	6923      	ldr	r3, [r4, #16]
 801742a:	441e      	add	r6, r3
 801742c:	6126      	str	r6, [r4, #16]
 801742e:	2000      	movs	r0, #0
 8017430:	e7c6      	b.n	80173c0 <_scanf_chars+0x54>
	...

08017434 <_scanf_i>:
 8017434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	469a      	mov	sl, r3
 801743a:	4b74      	ldr	r3, [pc, #464]	; (801760c <_scanf_i+0x1d8>)
 801743c:	460c      	mov	r4, r1
 801743e:	4683      	mov	fp, r0
 8017440:	4616      	mov	r6, r2
 8017442:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017446:	b087      	sub	sp, #28
 8017448:	ab03      	add	r3, sp, #12
 801744a:	68a7      	ldr	r7, [r4, #8]
 801744c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017450:	4b6f      	ldr	r3, [pc, #444]	; (8017610 <_scanf_i+0x1dc>)
 8017452:	69a1      	ldr	r1, [r4, #24]
 8017454:	4a6f      	ldr	r2, [pc, #444]	; (8017614 <_scanf_i+0x1e0>)
 8017456:	2903      	cmp	r1, #3
 8017458:	bf08      	it	eq
 801745a:	461a      	moveq	r2, r3
 801745c:	1e7b      	subs	r3, r7, #1
 801745e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017462:	bf84      	itt	hi
 8017464:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017468:	60a3      	strhi	r3, [r4, #8]
 801746a:	6823      	ldr	r3, [r4, #0]
 801746c:	9200      	str	r2, [sp, #0]
 801746e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017472:	bf88      	it	hi
 8017474:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017478:	f104 091c 	add.w	r9, r4, #28
 801747c:	6023      	str	r3, [r4, #0]
 801747e:	bf8c      	ite	hi
 8017480:	197f      	addhi	r7, r7, r5
 8017482:	2700      	movls	r7, #0
 8017484:	464b      	mov	r3, r9
 8017486:	f04f 0800 	mov.w	r8, #0
 801748a:	9301      	str	r3, [sp, #4]
 801748c:	6831      	ldr	r1, [r6, #0]
 801748e:	ab03      	add	r3, sp, #12
 8017490:	2202      	movs	r2, #2
 8017492:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017496:	7809      	ldrb	r1, [r1, #0]
 8017498:	f7e8 feba 	bl	8000210 <memchr>
 801749c:	9b01      	ldr	r3, [sp, #4]
 801749e:	b330      	cbz	r0, 80174ee <_scanf_i+0xba>
 80174a0:	f1b8 0f01 	cmp.w	r8, #1
 80174a4:	d15a      	bne.n	801755c <_scanf_i+0x128>
 80174a6:	6862      	ldr	r2, [r4, #4]
 80174a8:	b92a      	cbnz	r2, 80174b6 <_scanf_i+0x82>
 80174aa:	6822      	ldr	r2, [r4, #0]
 80174ac:	2108      	movs	r1, #8
 80174ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80174b2:	6061      	str	r1, [r4, #4]
 80174b4:	6022      	str	r2, [r4, #0]
 80174b6:	6822      	ldr	r2, [r4, #0]
 80174b8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80174bc:	6022      	str	r2, [r4, #0]
 80174be:	68a2      	ldr	r2, [r4, #8]
 80174c0:	1e51      	subs	r1, r2, #1
 80174c2:	60a1      	str	r1, [r4, #8]
 80174c4:	b19a      	cbz	r2, 80174ee <_scanf_i+0xba>
 80174c6:	6832      	ldr	r2, [r6, #0]
 80174c8:	1c51      	adds	r1, r2, #1
 80174ca:	6031      	str	r1, [r6, #0]
 80174cc:	7812      	ldrb	r2, [r2, #0]
 80174ce:	701a      	strb	r2, [r3, #0]
 80174d0:	1c5d      	adds	r5, r3, #1
 80174d2:	6873      	ldr	r3, [r6, #4]
 80174d4:	3b01      	subs	r3, #1
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	6073      	str	r3, [r6, #4]
 80174da:	dc07      	bgt.n	80174ec <_scanf_i+0xb8>
 80174dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80174e0:	4631      	mov	r1, r6
 80174e2:	4658      	mov	r0, fp
 80174e4:	4798      	blx	r3
 80174e6:	2800      	cmp	r0, #0
 80174e8:	f040 8086 	bne.w	80175f8 <_scanf_i+0x1c4>
 80174ec:	462b      	mov	r3, r5
 80174ee:	f108 0801 	add.w	r8, r8, #1
 80174f2:	f1b8 0f03 	cmp.w	r8, #3
 80174f6:	d1c8      	bne.n	801748a <_scanf_i+0x56>
 80174f8:	6862      	ldr	r2, [r4, #4]
 80174fa:	b90a      	cbnz	r2, 8017500 <_scanf_i+0xcc>
 80174fc:	220a      	movs	r2, #10
 80174fe:	6062      	str	r2, [r4, #4]
 8017500:	6862      	ldr	r2, [r4, #4]
 8017502:	4945      	ldr	r1, [pc, #276]	; (8017618 <_scanf_i+0x1e4>)
 8017504:	6960      	ldr	r0, [r4, #20]
 8017506:	9301      	str	r3, [sp, #4]
 8017508:	1a89      	subs	r1, r1, r2
 801750a:	f000 f8df 	bl	80176cc <__sccl>
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	f04f 0800 	mov.w	r8, #0
 8017514:	461d      	mov	r5, r3
 8017516:	68a3      	ldr	r3, [r4, #8]
 8017518:	6822      	ldr	r2, [r4, #0]
 801751a:	2b00      	cmp	r3, #0
 801751c:	d03a      	beq.n	8017594 <_scanf_i+0x160>
 801751e:	6831      	ldr	r1, [r6, #0]
 8017520:	6960      	ldr	r0, [r4, #20]
 8017522:	f891 c000 	ldrb.w	ip, [r1]
 8017526:	f810 000c 	ldrb.w	r0, [r0, ip]
 801752a:	2800      	cmp	r0, #0
 801752c:	d032      	beq.n	8017594 <_scanf_i+0x160>
 801752e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017532:	d121      	bne.n	8017578 <_scanf_i+0x144>
 8017534:	0510      	lsls	r0, r2, #20
 8017536:	d51f      	bpl.n	8017578 <_scanf_i+0x144>
 8017538:	f108 0801 	add.w	r8, r8, #1
 801753c:	b117      	cbz	r7, 8017544 <_scanf_i+0x110>
 801753e:	3301      	adds	r3, #1
 8017540:	3f01      	subs	r7, #1
 8017542:	60a3      	str	r3, [r4, #8]
 8017544:	6873      	ldr	r3, [r6, #4]
 8017546:	3b01      	subs	r3, #1
 8017548:	2b00      	cmp	r3, #0
 801754a:	6073      	str	r3, [r6, #4]
 801754c:	dd1b      	ble.n	8017586 <_scanf_i+0x152>
 801754e:	6833      	ldr	r3, [r6, #0]
 8017550:	3301      	adds	r3, #1
 8017552:	6033      	str	r3, [r6, #0]
 8017554:	68a3      	ldr	r3, [r4, #8]
 8017556:	3b01      	subs	r3, #1
 8017558:	60a3      	str	r3, [r4, #8]
 801755a:	e7dc      	b.n	8017516 <_scanf_i+0xe2>
 801755c:	f1b8 0f02 	cmp.w	r8, #2
 8017560:	d1ad      	bne.n	80174be <_scanf_i+0x8a>
 8017562:	6822      	ldr	r2, [r4, #0]
 8017564:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017568:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801756c:	d1bf      	bne.n	80174ee <_scanf_i+0xba>
 801756e:	2110      	movs	r1, #16
 8017570:	6061      	str	r1, [r4, #4]
 8017572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017576:	e7a1      	b.n	80174bc <_scanf_i+0x88>
 8017578:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801757c:	6022      	str	r2, [r4, #0]
 801757e:	780b      	ldrb	r3, [r1, #0]
 8017580:	702b      	strb	r3, [r5, #0]
 8017582:	3501      	adds	r5, #1
 8017584:	e7de      	b.n	8017544 <_scanf_i+0x110>
 8017586:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801758a:	4631      	mov	r1, r6
 801758c:	4658      	mov	r0, fp
 801758e:	4798      	blx	r3
 8017590:	2800      	cmp	r0, #0
 8017592:	d0df      	beq.n	8017554 <_scanf_i+0x120>
 8017594:	6823      	ldr	r3, [r4, #0]
 8017596:	05d9      	lsls	r1, r3, #23
 8017598:	d50c      	bpl.n	80175b4 <_scanf_i+0x180>
 801759a:	454d      	cmp	r5, r9
 801759c:	d908      	bls.n	80175b0 <_scanf_i+0x17c>
 801759e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80175a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80175a6:	4632      	mov	r2, r6
 80175a8:	4658      	mov	r0, fp
 80175aa:	4798      	blx	r3
 80175ac:	1e6f      	subs	r7, r5, #1
 80175ae:	463d      	mov	r5, r7
 80175b0:	454d      	cmp	r5, r9
 80175b2:	d029      	beq.n	8017608 <_scanf_i+0x1d4>
 80175b4:	6822      	ldr	r2, [r4, #0]
 80175b6:	f012 0210 	ands.w	r2, r2, #16
 80175ba:	d113      	bne.n	80175e4 <_scanf_i+0x1b0>
 80175bc:	702a      	strb	r2, [r5, #0]
 80175be:	6863      	ldr	r3, [r4, #4]
 80175c0:	9e00      	ldr	r6, [sp, #0]
 80175c2:	4649      	mov	r1, r9
 80175c4:	4658      	mov	r0, fp
 80175c6:	47b0      	blx	r6
 80175c8:	f8da 3000 	ldr.w	r3, [sl]
 80175cc:	6821      	ldr	r1, [r4, #0]
 80175ce:	1d1a      	adds	r2, r3, #4
 80175d0:	f8ca 2000 	str.w	r2, [sl]
 80175d4:	f011 0f20 	tst.w	r1, #32
 80175d8:	681b      	ldr	r3, [r3, #0]
 80175da:	d010      	beq.n	80175fe <_scanf_i+0x1ca>
 80175dc:	6018      	str	r0, [r3, #0]
 80175de:	68e3      	ldr	r3, [r4, #12]
 80175e0:	3301      	adds	r3, #1
 80175e2:	60e3      	str	r3, [r4, #12]
 80175e4:	eba5 0509 	sub.w	r5, r5, r9
 80175e8:	44a8      	add	r8, r5
 80175ea:	6925      	ldr	r5, [r4, #16]
 80175ec:	4445      	add	r5, r8
 80175ee:	6125      	str	r5, [r4, #16]
 80175f0:	2000      	movs	r0, #0
 80175f2:	b007      	add	sp, #28
 80175f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175f8:	f04f 0800 	mov.w	r8, #0
 80175fc:	e7ca      	b.n	8017594 <_scanf_i+0x160>
 80175fe:	07ca      	lsls	r2, r1, #31
 8017600:	bf4c      	ite	mi
 8017602:	8018      	strhmi	r0, [r3, #0]
 8017604:	6018      	strpl	r0, [r3, #0]
 8017606:	e7ea      	b.n	80175de <_scanf_i+0x1aa>
 8017608:	2001      	movs	r0, #1
 801760a:	e7f2      	b.n	80175f2 <_scanf_i+0x1be>
 801760c:	08017bec 	.word	0x08017bec
 8017610:	08014821 	.word	0x08014821
 8017614:	08017849 	.word	0x08017849
 8017618:	0801847d 	.word	0x0801847d

0801761c <_putc_r>:
 801761c:	b570      	push	{r4, r5, r6, lr}
 801761e:	460d      	mov	r5, r1
 8017620:	4614      	mov	r4, r2
 8017622:	4606      	mov	r6, r0
 8017624:	b118      	cbz	r0, 801762e <_putc_r+0x12>
 8017626:	6983      	ldr	r3, [r0, #24]
 8017628:	b90b      	cbnz	r3, 801762e <_putc_r+0x12>
 801762a:	f7fe f941 	bl	80158b0 <__sinit>
 801762e:	4b13      	ldr	r3, [pc, #76]	; (801767c <_putc_r+0x60>)
 8017630:	429c      	cmp	r4, r3
 8017632:	d112      	bne.n	801765a <_putc_r+0x3e>
 8017634:	6874      	ldr	r4, [r6, #4]
 8017636:	68a3      	ldr	r3, [r4, #8]
 8017638:	3b01      	subs	r3, #1
 801763a:	2b00      	cmp	r3, #0
 801763c:	60a3      	str	r3, [r4, #8]
 801763e:	da16      	bge.n	801766e <_putc_r+0x52>
 8017640:	69a2      	ldr	r2, [r4, #24]
 8017642:	4293      	cmp	r3, r2
 8017644:	db02      	blt.n	801764c <_putc_r+0x30>
 8017646:	b2eb      	uxtb	r3, r5
 8017648:	2b0a      	cmp	r3, #10
 801764a:	d110      	bne.n	801766e <_putc_r+0x52>
 801764c:	4622      	mov	r2, r4
 801764e:	4629      	mov	r1, r5
 8017650:	4630      	mov	r0, r6
 8017652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017656:	f7fd b915 	b.w	8014884 <__swbuf_r>
 801765a:	4b09      	ldr	r3, [pc, #36]	; (8017680 <_putc_r+0x64>)
 801765c:	429c      	cmp	r4, r3
 801765e:	d101      	bne.n	8017664 <_putc_r+0x48>
 8017660:	68b4      	ldr	r4, [r6, #8]
 8017662:	e7e8      	b.n	8017636 <_putc_r+0x1a>
 8017664:	4b07      	ldr	r3, [pc, #28]	; (8017684 <_putc_r+0x68>)
 8017666:	429c      	cmp	r4, r3
 8017668:	bf08      	it	eq
 801766a:	68f4      	ldreq	r4, [r6, #12]
 801766c:	e7e3      	b.n	8017636 <_putc_r+0x1a>
 801766e:	6823      	ldr	r3, [r4, #0]
 8017670:	1c5a      	adds	r2, r3, #1
 8017672:	6022      	str	r2, [r4, #0]
 8017674:	701d      	strb	r5, [r3, #0]
 8017676:	b2e8      	uxtb	r0, r5
 8017678:	bd70      	pop	{r4, r5, r6, pc}
 801767a:	bf00      	nop
 801767c:	08018310 	.word	0x08018310
 8017680:	08018330 	.word	0x08018330
 8017684:	080182f0 	.word	0x080182f0

08017688 <_read_r>:
 8017688:	b538      	push	{r3, r4, r5, lr}
 801768a:	4c07      	ldr	r4, [pc, #28]	; (80176a8 <_read_r+0x20>)
 801768c:	4605      	mov	r5, r0
 801768e:	4608      	mov	r0, r1
 8017690:	4611      	mov	r1, r2
 8017692:	2200      	movs	r2, #0
 8017694:	6022      	str	r2, [r4, #0]
 8017696:	461a      	mov	r2, r3
 8017698:	f7ee f862 	bl	8005760 <_read>
 801769c:	1c43      	adds	r3, r0, #1
 801769e:	d102      	bne.n	80176a6 <_read_r+0x1e>
 80176a0:	6823      	ldr	r3, [r4, #0]
 80176a2:	b103      	cbz	r3, 80176a6 <_read_r+0x1e>
 80176a4:	602b      	str	r3, [r5, #0]
 80176a6:	bd38      	pop	{r3, r4, r5, pc}
 80176a8:	20023ec8 	.word	0x20023ec8

080176ac <_sbrk_r>:
 80176ac:	b538      	push	{r3, r4, r5, lr}
 80176ae:	4c06      	ldr	r4, [pc, #24]	; (80176c8 <_sbrk_r+0x1c>)
 80176b0:	2300      	movs	r3, #0
 80176b2:	4605      	mov	r5, r0
 80176b4:	4608      	mov	r0, r1
 80176b6:	6023      	str	r3, [r4, #0]
 80176b8:	f7ee f8a4 	bl	8005804 <_sbrk>
 80176bc:	1c43      	adds	r3, r0, #1
 80176be:	d102      	bne.n	80176c6 <_sbrk_r+0x1a>
 80176c0:	6823      	ldr	r3, [r4, #0]
 80176c2:	b103      	cbz	r3, 80176c6 <_sbrk_r+0x1a>
 80176c4:	602b      	str	r3, [r5, #0]
 80176c6:	bd38      	pop	{r3, r4, r5, pc}
 80176c8:	20023ec8 	.word	0x20023ec8

080176cc <__sccl>:
 80176cc:	b570      	push	{r4, r5, r6, lr}
 80176ce:	780b      	ldrb	r3, [r1, #0]
 80176d0:	2b5e      	cmp	r3, #94	; 0x5e
 80176d2:	bf13      	iteet	ne
 80176d4:	1c4a      	addne	r2, r1, #1
 80176d6:	1c8a      	addeq	r2, r1, #2
 80176d8:	784b      	ldrbeq	r3, [r1, #1]
 80176da:	2100      	movne	r1, #0
 80176dc:	bf08      	it	eq
 80176de:	2101      	moveq	r1, #1
 80176e0:	1e44      	subs	r4, r0, #1
 80176e2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80176e6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80176ea:	42ac      	cmp	r4, r5
 80176ec:	d1fb      	bne.n	80176e6 <__sccl+0x1a>
 80176ee:	b913      	cbnz	r3, 80176f6 <__sccl+0x2a>
 80176f0:	3a01      	subs	r2, #1
 80176f2:	4610      	mov	r0, r2
 80176f4:	bd70      	pop	{r4, r5, r6, pc}
 80176f6:	f081 0401 	eor.w	r4, r1, #1
 80176fa:	54c4      	strb	r4, [r0, r3]
 80176fc:	1c51      	adds	r1, r2, #1
 80176fe:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017702:	2d2d      	cmp	r5, #45	; 0x2d
 8017704:	f101 36ff 	add.w	r6, r1, #4294967295
 8017708:	460a      	mov	r2, r1
 801770a:	d006      	beq.n	801771a <__sccl+0x4e>
 801770c:	2d5d      	cmp	r5, #93	; 0x5d
 801770e:	d0f0      	beq.n	80176f2 <__sccl+0x26>
 8017710:	b90d      	cbnz	r5, 8017716 <__sccl+0x4a>
 8017712:	4632      	mov	r2, r6
 8017714:	e7ed      	b.n	80176f2 <__sccl+0x26>
 8017716:	462b      	mov	r3, r5
 8017718:	e7ef      	b.n	80176fa <__sccl+0x2e>
 801771a:	780e      	ldrb	r6, [r1, #0]
 801771c:	2e5d      	cmp	r6, #93	; 0x5d
 801771e:	d0fa      	beq.n	8017716 <__sccl+0x4a>
 8017720:	42b3      	cmp	r3, r6
 8017722:	dcf8      	bgt.n	8017716 <__sccl+0x4a>
 8017724:	3301      	adds	r3, #1
 8017726:	429e      	cmp	r6, r3
 8017728:	54c4      	strb	r4, [r0, r3]
 801772a:	dcfb      	bgt.n	8017724 <__sccl+0x58>
 801772c:	3102      	adds	r1, #2
 801772e:	e7e6      	b.n	80176fe <__sccl+0x32>

08017730 <strncmp>:
 8017730:	b510      	push	{r4, lr}
 8017732:	b16a      	cbz	r2, 8017750 <strncmp+0x20>
 8017734:	3901      	subs	r1, #1
 8017736:	1884      	adds	r4, r0, r2
 8017738:	f810 3b01 	ldrb.w	r3, [r0], #1
 801773c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017740:	4293      	cmp	r3, r2
 8017742:	d103      	bne.n	801774c <strncmp+0x1c>
 8017744:	42a0      	cmp	r0, r4
 8017746:	d001      	beq.n	801774c <strncmp+0x1c>
 8017748:	2b00      	cmp	r3, #0
 801774a:	d1f5      	bne.n	8017738 <strncmp+0x8>
 801774c:	1a98      	subs	r0, r3, r2
 801774e:	bd10      	pop	{r4, pc}
 8017750:	4610      	mov	r0, r2
 8017752:	e7fc      	b.n	801774e <strncmp+0x1e>

08017754 <_strtoul_l.isra.0>:
 8017754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017758:	4680      	mov	r8, r0
 801775a:	4689      	mov	r9, r1
 801775c:	4692      	mov	sl, r2
 801775e:	461e      	mov	r6, r3
 8017760:	460f      	mov	r7, r1
 8017762:	463d      	mov	r5, r7
 8017764:	9808      	ldr	r0, [sp, #32]
 8017766:	f815 4b01 	ldrb.w	r4, [r5], #1
 801776a:	f7fe fc51 	bl	8016010 <__locale_ctype_ptr_l>
 801776e:	4420      	add	r0, r4
 8017770:	7843      	ldrb	r3, [r0, #1]
 8017772:	f013 0308 	ands.w	r3, r3, #8
 8017776:	d130      	bne.n	80177da <_strtoul_l.isra.0+0x86>
 8017778:	2c2d      	cmp	r4, #45	; 0x2d
 801777a:	d130      	bne.n	80177de <_strtoul_l.isra.0+0x8a>
 801777c:	787c      	ldrb	r4, [r7, #1]
 801777e:	1cbd      	adds	r5, r7, #2
 8017780:	2101      	movs	r1, #1
 8017782:	2e00      	cmp	r6, #0
 8017784:	d05c      	beq.n	8017840 <_strtoul_l.isra.0+0xec>
 8017786:	2e10      	cmp	r6, #16
 8017788:	d109      	bne.n	801779e <_strtoul_l.isra.0+0x4a>
 801778a:	2c30      	cmp	r4, #48	; 0x30
 801778c:	d107      	bne.n	801779e <_strtoul_l.isra.0+0x4a>
 801778e:	782b      	ldrb	r3, [r5, #0]
 8017790:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017794:	2b58      	cmp	r3, #88	; 0x58
 8017796:	d14e      	bne.n	8017836 <_strtoul_l.isra.0+0xe2>
 8017798:	786c      	ldrb	r4, [r5, #1]
 801779a:	2610      	movs	r6, #16
 801779c:	3502      	adds	r5, #2
 801779e:	f04f 32ff 	mov.w	r2, #4294967295
 80177a2:	2300      	movs	r3, #0
 80177a4:	fbb2 f2f6 	udiv	r2, r2, r6
 80177a8:	fb06 fc02 	mul.w	ip, r6, r2
 80177ac:	ea6f 0c0c 	mvn.w	ip, ip
 80177b0:	4618      	mov	r0, r3
 80177b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80177b6:	2f09      	cmp	r7, #9
 80177b8:	d817      	bhi.n	80177ea <_strtoul_l.isra.0+0x96>
 80177ba:	463c      	mov	r4, r7
 80177bc:	42a6      	cmp	r6, r4
 80177be:	dd23      	ble.n	8017808 <_strtoul_l.isra.0+0xb4>
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	db1e      	blt.n	8017802 <_strtoul_l.isra.0+0xae>
 80177c4:	4282      	cmp	r2, r0
 80177c6:	d31c      	bcc.n	8017802 <_strtoul_l.isra.0+0xae>
 80177c8:	d101      	bne.n	80177ce <_strtoul_l.isra.0+0x7a>
 80177ca:	45a4      	cmp	ip, r4
 80177cc:	db19      	blt.n	8017802 <_strtoul_l.isra.0+0xae>
 80177ce:	fb00 4006 	mla	r0, r0, r6, r4
 80177d2:	2301      	movs	r3, #1
 80177d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177d8:	e7eb      	b.n	80177b2 <_strtoul_l.isra.0+0x5e>
 80177da:	462f      	mov	r7, r5
 80177dc:	e7c1      	b.n	8017762 <_strtoul_l.isra.0+0xe>
 80177de:	2c2b      	cmp	r4, #43	; 0x2b
 80177e0:	bf04      	itt	eq
 80177e2:	1cbd      	addeq	r5, r7, #2
 80177e4:	787c      	ldrbeq	r4, [r7, #1]
 80177e6:	4619      	mov	r1, r3
 80177e8:	e7cb      	b.n	8017782 <_strtoul_l.isra.0+0x2e>
 80177ea:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80177ee:	2f19      	cmp	r7, #25
 80177f0:	d801      	bhi.n	80177f6 <_strtoul_l.isra.0+0xa2>
 80177f2:	3c37      	subs	r4, #55	; 0x37
 80177f4:	e7e2      	b.n	80177bc <_strtoul_l.isra.0+0x68>
 80177f6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80177fa:	2f19      	cmp	r7, #25
 80177fc:	d804      	bhi.n	8017808 <_strtoul_l.isra.0+0xb4>
 80177fe:	3c57      	subs	r4, #87	; 0x57
 8017800:	e7dc      	b.n	80177bc <_strtoul_l.isra.0+0x68>
 8017802:	f04f 33ff 	mov.w	r3, #4294967295
 8017806:	e7e5      	b.n	80177d4 <_strtoul_l.isra.0+0x80>
 8017808:	2b00      	cmp	r3, #0
 801780a:	da09      	bge.n	8017820 <_strtoul_l.isra.0+0xcc>
 801780c:	2322      	movs	r3, #34	; 0x22
 801780e:	f8c8 3000 	str.w	r3, [r8]
 8017812:	f04f 30ff 	mov.w	r0, #4294967295
 8017816:	f1ba 0f00 	cmp.w	sl, #0
 801781a:	d107      	bne.n	801782c <_strtoul_l.isra.0+0xd8>
 801781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017820:	b101      	cbz	r1, 8017824 <_strtoul_l.isra.0+0xd0>
 8017822:	4240      	negs	r0, r0
 8017824:	f1ba 0f00 	cmp.w	sl, #0
 8017828:	d0f8      	beq.n	801781c <_strtoul_l.isra.0+0xc8>
 801782a:	b10b      	cbz	r3, 8017830 <_strtoul_l.isra.0+0xdc>
 801782c:	f105 39ff 	add.w	r9, r5, #4294967295
 8017830:	f8ca 9000 	str.w	r9, [sl]
 8017834:	e7f2      	b.n	801781c <_strtoul_l.isra.0+0xc8>
 8017836:	2430      	movs	r4, #48	; 0x30
 8017838:	2e00      	cmp	r6, #0
 801783a:	d1b0      	bne.n	801779e <_strtoul_l.isra.0+0x4a>
 801783c:	2608      	movs	r6, #8
 801783e:	e7ae      	b.n	801779e <_strtoul_l.isra.0+0x4a>
 8017840:	2c30      	cmp	r4, #48	; 0x30
 8017842:	d0a4      	beq.n	801778e <_strtoul_l.isra.0+0x3a>
 8017844:	260a      	movs	r6, #10
 8017846:	e7aa      	b.n	801779e <_strtoul_l.isra.0+0x4a>

08017848 <_strtoul_r>:
 8017848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801784a:	4c06      	ldr	r4, [pc, #24]	; (8017864 <_strtoul_r+0x1c>)
 801784c:	4d06      	ldr	r5, [pc, #24]	; (8017868 <_strtoul_r+0x20>)
 801784e:	6824      	ldr	r4, [r4, #0]
 8017850:	6a24      	ldr	r4, [r4, #32]
 8017852:	2c00      	cmp	r4, #0
 8017854:	bf08      	it	eq
 8017856:	462c      	moveq	r4, r5
 8017858:	9400      	str	r4, [sp, #0]
 801785a:	f7ff ff7b 	bl	8017754 <_strtoul_l.isra.0>
 801785e:	b003      	add	sp, #12
 8017860:	bd30      	pop	{r4, r5, pc}
 8017862:	bf00      	nop
 8017864:	2000000c 	.word	0x2000000c
 8017868:	20000070 	.word	0x20000070

0801786c <__submore>:
 801786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017870:	460c      	mov	r4, r1
 8017872:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017878:	4299      	cmp	r1, r3
 801787a:	d11d      	bne.n	80178b8 <__submore+0x4c>
 801787c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017880:	f7ff f8de 	bl	8016a40 <_malloc_r>
 8017884:	b918      	cbnz	r0, 801788e <__submore+0x22>
 8017886:	f04f 30ff 	mov.w	r0, #4294967295
 801788a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801788e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017892:	63a3      	str	r3, [r4, #56]	; 0x38
 8017894:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8017898:	6360      	str	r0, [r4, #52]	; 0x34
 801789a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801789e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80178a2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80178a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80178aa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80178ae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80178b2:	6020      	str	r0, [r4, #0]
 80178b4:	2000      	movs	r0, #0
 80178b6:	e7e8      	b.n	801788a <__submore+0x1e>
 80178b8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80178ba:	0077      	lsls	r7, r6, #1
 80178bc:	463a      	mov	r2, r7
 80178be:	f000 f85a 	bl	8017976 <_realloc_r>
 80178c2:	4605      	mov	r5, r0
 80178c4:	2800      	cmp	r0, #0
 80178c6:	d0de      	beq.n	8017886 <__submore+0x1a>
 80178c8:	eb00 0806 	add.w	r8, r0, r6
 80178cc:	4601      	mov	r1, r0
 80178ce:	4632      	mov	r2, r6
 80178d0:	4640      	mov	r0, r8
 80178d2:	f7fe fc4f 	bl	8016174 <memcpy>
 80178d6:	f8c4 8000 	str.w	r8, [r4]
 80178da:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80178de:	e7e9      	b.n	80178b4 <__submore+0x48>

080178e0 <__ascii_wctomb>:
 80178e0:	b149      	cbz	r1, 80178f6 <__ascii_wctomb+0x16>
 80178e2:	2aff      	cmp	r2, #255	; 0xff
 80178e4:	bf85      	ittet	hi
 80178e6:	238a      	movhi	r3, #138	; 0x8a
 80178e8:	6003      	strhi	r3, [r0, #0]
 80178ea:	700a      	strbls	r2, [r1, #0]
 80178ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80178f0:	bf98      	it	ls
 80178f2:	2001      	movls	r0, #1
 80178f4:	4770      	bx	lr
 80178f6:	4608      	mov	r0, r1
 80178f8:	4770      	bx	lr
	...

080178fc <_fstat_r>:
 80178fc:	b538      	push	{r3, r4, r5, lr}
 80178fe:	4c07      	ldr	r4, [pc, #28]	; (801791c <_fstat_r+0x20>)
 8017900:	2300      	movs	r3, #0
 8017902:	4605      	mov	r5, r0
 8017904:	4608      	mov	r0, r1
 8017906:	4611      	mov	r1, r2
 8017908:	6023      	str	r3, [r4, #0]
 801790a:	f7ed ff52 	bl	80057b2 <_fstat>
 801790e:	1c43      	adds	r3, r0, #1
 8017910:	d102      	bne.n	8017918 <_fstat_r+0x1c>
 8017912:	6823      	ldr	r3, [r4, #0]
 8017914:	b103      	cbz	r3, 8017918 <_fstat_r+0x1c>
 8017916:	602b      	str	r3, [r5, #0]
 8017918:	bd38      	pop	{r3, r4, r5, pc}
 801791a:	bf00      	nop
 801791c:	20023ec8 	.word	0x20023ec8

08017920 <_isatty_r>:
 8017920:	b538      	push	{r3, r4, r5, lr}
 8017922:	4c06      	ldr	r4, [pc, #24]	; (801793c <_isatty_r+0x1c>)
 8017924:	2300      	movs	r3, #0
 8017926:	4605      	mov	r5, r0
 8017928:	4608      	mov	r0, r1
 801792a:	6023      	str	r3, [r4, #0]
 801792c:	f7ed ff51 	bl	80057d2 <_isatty>
 8017930:	1c43      	adds	r3, r0, #1
 8017932:	d102      	bne.n	801793a <_isatty_r+0x1a>
 8017934:	6823      	ldr	r3, [r4, #0]
 8017936:	b103      	cbz	r3, 801793a <_isatty_r+0x1a>
 8017938:	602b      	str	r3, [r5, #0]
 801793a:	bd38      	pop	{r3, r4, r5, pc}
 801793c:	20023ec8 	.word	0x20023ec8

08017940 <memmove>:
 8017940:	4288      	cmp	r0, r1
 8017942:	b510      	push	{r4, lr}
 8017944:	eb01 0302 	add.w	r3, r1, r2
 8017948:	d807      	bhi.n	801795a <memmove+0x1a>
 801794a:	1e42      	subs	r2, r0, #1
 801794c:	4299      	cmp	r1, r3
 801794e:	d00a      	beq.n	8017966 <memmove+0x26>
 8017950:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017954:	f802 4f01 	strb.w	r4, [r2, #1]!
 8017958:	e7f8      	b.n	801794c <memmove+0xc>
 801795a:	4283      	cmp	r3, r0
 801795c:	d9f5      	bls.n	801794a <memmove+0xa>
 801795e:	1881      	adds	r1, r0, r2
 8017960:	1ad2      	subs	r2, r2, r3
 8017962:	42d3      	cmn	r3, r2
 8017964:	d100      	bne.n	8017968 <memmove+0x28>
 8017966:	bd10      	pop	{r4, pc}
 8017968:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801796c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8017970:	e7f7      	b.n	8017962 <memmove+0x22>

08017972 <__malloc_lock>:
 8017972:	4770      	bx	lr

08017974 <__malloc_unlock>:
 8017974:	4770      	bx	lr

08017976 <_realloc_r>:
 8017976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017978:	4607      	mov	r7, r0
 801797a:	4614      	mov	r4, r2
 801797c:	460e      	mov	r6, r1
 801797e:	b921      	cbnz	r1, 801798a <_realloc_r+0x14>
 8017980:	4611      	mov	r1, r2
 8017982:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017986:	f7ff b85b 	b.w	8016a40 <_malloc_r>
 801798a:	b922      	cbnz	r2, 8017996 <_realloc_r+0x20>
 801798c:	f7ff f80a 	bl	80169a4 <_free_r>
 8017990:	4625      	mov	r5, r4
 8017992:	4628      	mov	r0, r5
 8017994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017996:	f000 f814 	bl	80179c2 <_malloc_usable_size_r>
 801799a:	42a0      	cmp	r0, r4
 801799c:	d20f      	bcs.n	80179be <_realloc_r+0x48>
 801799e:	4621      	mov	r1, r4
 80179a0:	4638      	mov	r0, r7
 80179a2:	f7ff f84d 	bl	8016a40 <_malloc_r>
 80179a6:	4605      	mov	r5, r0
 80179a8:	2800      	cmp	r0, #0
 80179aa:	d0f2      	beq.n	8017992 <_realloc_r+0x1c>
 80179ac:	4631      	mov	r1, r6
 80179ae:	4622      	mov	r2, r4
 80179b0:	f7fe fbe0 	bl	8016174 <memcpy>
 80179b4:	4631      	mov	r1, r6
 80179b6:	4638      	mov	r0, r7
 80179b8:	f7fe fff4 	bl	80169a4 <_free_r>
 80179bc:	e7e9      	b.n	8017992 <_realloc_r+0x1c>
 80179be:	4635      	mov	r5, r6
 80179c0:	e7e7      	b.n	8017992 <_realloc_r+0x1c>

080179c2 <_malloc_usable_size_r>:
 80179c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80179c6:	1f18      	subs	r0, r3, #4
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	bfbc      	itt	lt
 80179cc:	580b      	ldrlt	r3, [r1, r0]
 80179ce:	18c0      	addlt	r0, r0, r3
 80179d0:	4770      	bx	lr
	...

080179d4 <_init>:
 80179d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179d6:	bf00      	nop
 80179d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179da:	bc08      	pop	{r3}
 80179dc:	469e      	mov	lr, r3
 80179de:	4770      	bx	lr

080179e0 <_fini>:
 80179e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179e2:	bf00      	nop
 80179e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80179e6:	bc08      	pop	{r3}
 80179e8:	469e      	mov	lr, r3
 80179ea:	4770      	bx	lr
