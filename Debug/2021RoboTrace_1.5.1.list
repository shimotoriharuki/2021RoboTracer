
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019b14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a0c  08019cd8  08019cd8  00029cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6e4  0801a6e4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6e4  0801a6e4  0002a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a6ec  0801a6ec  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a6ec  0801a6ec  0002a6ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a6f4  0801a6f4  0002a6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a6f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046c40  200001e0  0801a8d4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046e20  0801a8d4  00036e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b1e2  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00073020  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  00075360  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354b4  00000000  00000000  000773d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265fe  00000000  00000000  000ac884  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001110dc  00000000  00000000  000d2e82  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3f5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a764  00000000  00000000  001e3fdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019cbc 	.word	0x08019cbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019cbc 	.word	0x08019cbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fb16 	bl	800b608 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044918 	.word	0x20044918

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fafe 	bl	800b608 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044918 	.word	0x20044918

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f99f 	bl	800b364 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 ff06 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 ff00 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fefa 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fef4 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 feee 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fee8 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fee2 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fedc 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fed6 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fed0 	bl	8009e38 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fec4 	bl	8009e38 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 febe 	bl	8009e38 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f991 	bl	8017450 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ffce 	bl	800f198 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ffca 	bl	800f198 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ffc6 	bl	800f198 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ffc2 	bl	800f198 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044a04 	.word	0x20044a04
 8001248:	2004496c 	.word	0x2004496c
 800124c:	20044a8c 	.word	0x20044a8c

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044a04 	.word	0x20044a04
 800137c:	20044a8c 	.word	0x20044a8c
 8001380:	2004496c 	.word	0x2004496c

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044a04 	.word	0x20044a04
 80013c4:	2004496c 	.word	0x2004496c
 80013c8:	20044a8c 	.word	0x20044a8c

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d ff82 	bl	800f338 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d ff7e 	bl	800f338 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044b6c 	.word	0x20044b6c
 8001458:	20044850 	.word	0x20044850
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f978 	bl	8001a98 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f98c 	bl	8001ac4 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f012 fb12 	bl	8013dec <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	2004375c 	.word	0x2004375c

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fed1 	bl	80165b8 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f012 fb56 	bl	8013ed4 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f012 fb51 	bl	8013ed4 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f012 f8bf 	bl	80139c2 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f958 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019cd8 	.word	0x08019cd8
 8001870:	200436cc 	.word	0x200436cc
 8001874:	2004375c 	.word	0x2004375c
 8001878:	2004374c 	.word	0x2004374c

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f900 	bl	8001a98 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f012 facd 	bl	8013e40 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 fd38 	bl	801431c <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f012 fac7 	bl	8013e40 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f907 	bl	8001ac4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fe6c 	bl	80165b8 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f012 faf4 	bl	8013ed4 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f012 f862 	bl	80139c2 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f8fb 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f012 fa66 	bl	8013dec <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	200435cc 	.word	0x200435cc
 8001930:	2004248c 	.word	0x2004248c
 8001934:	08019cf4 	.word	0x08019cf4
 8001938:	08019cd8 	.word	0x08019cd8
 800193c:	200436cc 	.word	0x200436cc
 8001940:	2004375c 	.word	0x2004375c
 8001944:	2004374c 	.word	0x2004374c

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f898 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f8ac 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fe6f 	bl	8016660 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fe96 	bl	80146d8 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f8a1 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f012 fa18 	bl	8013dec <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019ce4 	.word	0x08019ce4
 80019cc:	200436cc 	.word	0x200436cc
 80019d0:	2004375c 	.word	0x2004375c

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f852 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f866 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fe29 	bl	8016660 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 fe50 	bl	80146d8 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f85b 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f012 f9d2 	bl	8013dec <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019cf0 	.word	0x08019cf0
 8001a58:	200436cc 	.word	0x200436cc
 8001a5c:	2004375c 	.word	0x2004375c

08001a60 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <sd_mount+0x30>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <sd_mount+0x34>)
 8001a70:	f011 fc34 	bl	80132dc <f_mount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <sd_mount+0x20>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <sd_mount+0x24>
	else ret = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08019d00 	.word	0x08019d00
 8001a94:	2004258c 	.word	0x2004258c

08001a98 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <create_path+0x24>)
 8001aa6:	f014 fe07 	bl	80166b8 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <create_path+0x28>)
 8001aae:	f014 fe03 	bl	80166b8 <strcpy>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	200435cc 	.word	0x200435cc
 8001ac0:	2004248c 	.word	0x2004248c

08001ac4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001aca:	f012 fce9 	bl	80144a0 <f_mkdir>

	f_chdir(dirpath);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001ad0:	f012 f9b6 	bl	8013e40 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	4905      	ldr	r1, [pc, #20]	; (8001aec <fopen_folder_and_file+0x28>)
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fopen_folder_and_file+0x2c>)
 8001ada:	f011 fc45 	bl	8013368 <f_open>

	f_chdir("..");
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <fopen_folder_and_file+0x30>)
 8001ae0:	f012 f9ae 	bl	8013e40 <f_chdir>


}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	200435cc 	.word	0x200435cc
 8001aec:	2004248c 	.word	0x2004248c
 8001af0:	2004375c 	.word	0x2004375c
 8001af4:	08019cf4 	.word	0x08019cf4

08001af8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <bufclear+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	ddf4      	ble.n	8001b04 <bufclear+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	200436cc 	.word	0x200436cc

08001b2c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <read_byte+0x54>)
 8001b48:	f009 fc0c 	bl	800b364 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b4c:	f107 010f 	add.w	r1, r7, #15
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <read_byte+0x58>)
 8001b56:	f00c fdb5 	bl	800e6c4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b5a:	f107 010e 	add.w	r1, r7, #14
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <read_byte+0x58>)
 8001b64:	f00c fee2 	bl	800e92c <HAL_SPI_Receive>
	CS_SET;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <read_byte+0x54>)
 8001b70:	f009 fbf8 	bl	800b364 <HAL_GPIO_WritePin>

	return val;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400
 8001b84:	200447f8 	.word	0x200447f8

08001b88 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <write_byte+0x54>)
 8001baa:	f009 fbdb 	bl	800b364 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bae:	f107 010f 	add.w	r1, r7, #15
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <write_byte+0x58>)
 8001bb8:	f00c fd84 	bl	800e6c4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <write_byte+0x58>)
 8001bc4:	f00c fd7e 	bl	800e6c4 <HAL_SPI_Transmit>
	CS_SET;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <write_byte+0x54>)
 8001bd0:	f009 fbc8 	bl	800b364 <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	200447f8 	.word	0x200447f8

08001be4 <IMU_init>:

uint16_t IMU_init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9c 	bl	8001b2c <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	2be0      	cmp	r3, #224	; 0xe0
 8001bfc:	d119      	bne.n	8001c32 <IMU_init+0x4e>
		ret = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c02:	2101      	movs	r1, #1
 8001c04:	2006      	movs	r0, #6
 8001c06:	f7ff ffbf 	bl	8001b88 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff ffbb 	bl	8001b88 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c12:	2120      	movs	r1, #32
 8001c14:	207f      	movs	r0, #127	; 0x7f
 8001c16:	f7ff ffb7 	bl	8001b88 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffb3 	bl	8001b88 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c22:	2106      	movs	r1, #6
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffaf 	bl	8001b88 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f7ff ffab 	bl	8001b88 <write_byte>
	}
	return ret;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <read_gyro_data>:

void read_gyro_data() {
 8001c3c:	b598      	push	{r3, r4, r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c40:	2033      	movs	r0, #51	; 0x33
 8001c42:	f7ff ff73 	bl	8001b2c <read_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21c      	sxth	r4, r3
 8001c4c:	2034      	movs	r0, #52	; 0x34
 8001c4e:	f7ff ff6d 	bl	8001b2c <read_byte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4323      	orrs	r3, r4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <read_gyro_data+0x64>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c5e:	2035      	movs	r0, #53	; 0x35
 8001c60:	f7ff ff64 	bl	8001b2c <read_byte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f7ff ff5e 	bl	8001b2c <read_byte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4323      	orrs	r3, r4
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <read_gyro_data+0x68>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c7c:	2037      	movs	r0, #55	; 0x37
 8001c7e:	f7ff ff55 	bl	8001b2c <read_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21c      	sxth	r4, r3
 8001c88:	2038      	movs	r0, #56	; 0x38
 8001c8a:	f7ff ff4f 	bl	8001b2c <read_byte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4323      	orrs	r3, r4
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <read_gyro_data+0x6c>)
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd98      	pop	{r3, r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20044794 	.word	0x20044794
 8001ca4:	20044792 	.word	0x20044792
 8001ca8:	2004478c 	.word	0x2004478c

08001cac <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	80da      	strh	r2, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	811a      	strh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	815a      	strh	r2, [r3, #10]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
{

}
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cf8:	f7ff ff74 	bl	8001be4 <IMU_init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d00:	f7ff f9ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f9da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <_ZN3IMU4initEv+0x44>)
 8001d0e:	f7ff fa01 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f9d3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <_ZN3IMU4initEv+0x48>)
 8001d20:	f7ff f9f8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f008 f886 	bl	8009e38 <HAL_Delay>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	08019d04 	.word	0x08019d04
 8001d38:	08019d10 	.word	0x08019d10
 8001d3c:	00000000 	.word	0x00000000

08001d40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d48:	f7ff ff78 	bl	8001c3c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d4c:	4b2a      	ldr	r3, [pc, #168]	; (8001df8 <_ZN3IMU12updateValuesEv+0xb8>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <_ZN3IMU12updateValuesEv+0xbc>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d60:	4b27      	ldr	r3, [pc, #156]	; (8001e00 <_ZN3IMU12updateValuesEv+0xc0>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	a31c      	add	r3, pc, #112	; (adr r3, 8001de8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	4b1e      	ldr	r3, [pc, #120]	; (8001e04 <_ZN3IMU12updateValuesEv+0xc4>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe0 	bl	8000554 <__aeabi_i2d>
 8001d94:	a316      	add	r3, pc, #88	; (adr r3, 8001df0 <_ZN3IMU12updateValuesEv+0xb0>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc45 	bl	8000628 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa89 	bl	80002bc <__adddf3>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fee9 	bl	8000b88 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <_ZN3IMU12updateValuesEv+0xc4>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	mon_zg= zg_;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <_ZN3IMU12updateValuesEv+0xc8>)
 8001dd8:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdb0      	pop	{r4, r5, r7, pc}
 8001de4:	f3af 8000 	nop.w
 8001de8:	eb851eb8 	.word	0xeb851eb8
 8001dec:	3f9eb851 	.word	0x3f9eb851
 8001df0:	70a3d70a 	.word	0x70a3d70a
 8001df4:	3fef0a3d 	.word	0x3fef0a3d
 8001df8:	20044794 	.word	0x20044794
 8001dfc:	20044792 	.word	0x20044792
 8001e00:	2004478c 	.word	0x2004478c
 8001e04:	20000214 	.word	0x20000214
 8001e08:	20000210 	.word	0x20000210
 8001e0c:	00000000 	.word	0x00000000

08001e10 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001e10:	b5b0      	push	{r4, r5, r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e1e:	ee07 3a90 	vmov	s15, r3
 8001e22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e30:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7fe fb9f 	bl	8000578 <__aeabi_f2d>
 8001e3a:	a316      	add	r3, pc, #88	; (adr r3, 8001e94 <_ZN3IMU8getOmegaEv+0x84>)
 8001e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e40:	f7fe fd1c 	bl	800087c <__aeabi_ddiv>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4614      	mov	r4, r2
 8001e4a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e4e:	a313      	add	r3, pc, #76	; (adr r3, 8001e9c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e54:	4620      	mov	r0, r4
 8001e56:	4629      	mov	r1, r5
 8001e58:	f7fe fbe6 	bl	8000628 <__aeabi_dmul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	460c      	mov	r4, r1
 8001e60:	4618      	mov	r0, r3
 8001e62:	4621      	mov	r1, r4
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <_ZN3IMU8getOmegaEv+0x80>)
 8001e6a:	f7fe fd07 	bl	800087c <__aeabi_ddiv>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	460c      	mov	r4, r1
 8001e72:	4618      	mov	r0, r3
 8001e74:	4621      	mov	r1, r4
 8001e76:	f7fe fecf 	bl	8000c18 <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	60bb      	str	r3, [r7, #8]

	return omega;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	ee07 3a90 	vmov	s15, r3
}
 8001e84:	eeb0 0a67 	vmov.f32	s0, s15
 8001e88:	3710      	adds	r7, #16
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40668000 	.word	0x40668000
 8001e94:	66666666 	.word	0x66666666
 8001e98:	40306666 	.word	0x40306666
 8001e9c:	54411744 	.word	0x54411744
 8001ea0:	400921fb 	.word	0x400921fb

08001ea4 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	b08b      	sub	sp, #44	; 0x2c
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001eac:	466b      	mov	r3, sp
 8001eae:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb4:	f007 ffc0 	bl	8009e38 <HAL_Delay>
	lcd_clear();
 8001eb8:	f7ff f8f2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f8fe 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ec4:	4840      	ldr	r0, [pc, #256]	; (8001fc8 <_ZN3IMU11calibrationEv+0x124>)
 8001ec6:	f7ff f925 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2000      	movs	r0, #0
 8001ece:	f7ff f8f7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001ed2:	483e      	ldr	r0, [pc, #248]	; (8001fcc <_ZN3IMU11calibrationEv+0x128>)
 8001ed4:	f7ff f91e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001ed8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001edc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001ede:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ee2:	1e5d      	subs	r5, r3, #1
 8001ee4:	61bd      	str	r5, [r7, #24]
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	3301      	adds	r3, #1
 8001eea:	4619      	mov	r1, r3
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f04f 0400 	mov.w	r4, #0
 8001ef8:	0154      	lsls	r4, r2, #5
 8001efa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001efe:	014b      	lsls	r3, r1, #5
 8001f00:	462b      	mov	r3, r5
 8001f02:	3301      	adds	r3, #1
 8001f04:	4619      	mov	r1, r3
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	f04f 0400 	mov.w	r4, #0
 8001f12:	0154      	lsls	r4, r2, #5
 8001f14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f18:	014b      	lsls	r3, r1, #5
 8001f1a:	462b      	mov	r3, r5
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3303      	adds	r3, #3
 8001f22:	3307      	adds	r3, #7
 8001f24:	08db      	lsrs	r3, r3, #3
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	ebad 0d03 	sub.w	sp, sp, r3
 8001f2c:	466b      	mov	r3, sp
 8001f2e:	3303      	adds	r3, #3
 8001f30:	089b      	lsrs	r3, r3, #2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f36:	2300      	movs	r3, #0
 8001f38:	83fb      	strh	r3, [r7, #30]
 8001f3a:	8bfa      	ldrh	r2, [r7, #30]
 8001f3c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	da13      	bge.n	8001f6c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f4a:	8bfb      	ldrh	r3, [r7, #30]
 8001f4c:	ee07 2a90 	vmov	s15, r2
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f5e:	2002      	movs	r0, #2
 8001f60:	f007 ff6a 	bl	8009e38 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f64:	8bfb      	ldrh	r3, [r7, #30]
 8001f66:	3301      	adds	r3, #1
 8001f68:	83fb      	strh	r3, [r7, #30]
 8001f6a:	e7e6      	b.n	8001f3a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	697a      	ldr	r2, [r7, #20]
 8001f72:	462b      	mov	r3, r5
 8001f74:	3301      	adds	r3, #1
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d00e      	beq.n	8001fa2 <_ZN3IMU11calibrationEv+0xfe>
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f96:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	e7ec      	b.n	8001f7c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001fa2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa6:	ee07 3a90 	vmov	s15, r3
 8001faa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fae:	edd7 6a08 	vldr	s13, [r7, #32]
 8001fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fbc:	46b5      	mov	sp, r6
}
 8001fbe:	bf00      	nop
 8001fc0:	372c      	adds	r7, #44	; 0x2c
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	08019d14 	.word	0x08019d14
 8001fcc:	08019d20 	.word	0x08019d20

08001fd0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	460a      	mov	r2, r1
 8001fda:	71fb      	strb	r3, [r7, #7]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fe0:	79bb      	ldrb	r3, [r7, #6]
 8001fe2:	b299      	uxth	r1, r3
 8001fe4:	1dfa      	adds	r2, r7, #7
 8001fe6:	2364      	movs	r3, #100	; 0x64
 8001fe8:	9300      	str	r3, [sp, #0]
 8001fea:	2301      	movs	r3, #1
 8001fec:	480c      	ldr	r0, [pc, #48]	; (8002020 <INA260_read+0x50>)
 8001fee:	f009 fb0b 	bl	800b608 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	b299      	uxth	r1, r3
 8001ff6:	f107 020c 	add.w	r2, r7, #12
 8001ffa:	2364      	movs	r3, #100	; 0x64
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2302      	movs	r3, #2
 8002000:	4807      	ldr	r0, [pc, #28]	; (8002020 <INA260_read+0x50>)
 8002002:	f009 fbff 	bl	800b804 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	b21a      	sxth	r2, r3
 800200c:	7b7b      	ldrb	r3, [r7, #13]
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	81fb      	strh	r3, [r7, #14]
	return val;
 8002016:	89fb      	ldrh	r3, [r7, #14]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200449ac 	.word	0x200449ac

08002024 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8002024:	b590      	push	{r4, r7, lr}
 8002026:	b087      	sub	sp, #28
 8002028:	af02      	add	r7, sp, #8
 800202a:	4604      	mov	r4, r0
 800202c:	4608      	mov	r0, r1
 800202e:	4611      	mov	r1, r2
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	71fb      	strb	r3, [r7, #7]
 8002036:	4603      	mov	r3, r0
 8002038:	71bb      	strb	r3, [r7, #6]
 800203a:	460b      	mov	r3, r1
 800203c:	717b      	strb	r3, [r7, #5]
 800203e:	4613      	mov	r3, r2
 8002040:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002042:	79fb      	ldrb	r3, [r7, #7]
 8002044:	733b      	strb	r3, [r7, #12]
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	737b      	strb	r3, [r7, #13]
 800204a:	797b      	ldrb	r3, [r7, #5]
 800204c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800204e:	793b      	ldrb	r3, [r7, #4]
 8002050:	b299      	uxth	r1, r3
 8002052:	f107 020c 	add.w	r2, r7, #12
 8002056:	2364      	movs	r3, #100	; 0x64
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	2303      	movs	r3, #3
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <INA260_write+0x48>)
 800205e:	f009 fad3 	bl	800b608 <HAL_I2C_Master_Transmit>
}
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bd90      	pop	{r4, r7, pc}
 800206a:	bf00      	nop
 800206c:	200449ac 	.word	0x200449ac

08002070 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
 800207a:	460b      	mov	r3, r1
 800207c:	71bb      	strb	r3, [r7, #6]
 800207e:	4613      	mov	r3, r2
 8002080:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002082:	797b      	ldrb	r3, [r7, #5]
 8002084:	79ba      	ldrb	r2, [r7, #6]
 8002086:	79f9      	ldrb	r1, [r7, #7]
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff ffcb 	bl	8002024 <INA260_write>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	461a      	mov	r2, r3
 80020a4:	21df      	movs	r1, #223	; 0xdf
 80020a6:	2000      	movs	r0, #0
 80020a8:	f7ff ffe2 	bl	8002070 <setConfig>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
{

}
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80020d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020dc:	482a      	ldr	r0, [pc, #168]	; (8002188 <_ZN8JoyStick8getValueEv+0xbc>)
 80020de:	f009 f929 	bl	800b334 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ZN8JoyStick8getValueEv+0x2e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020fa:	2101      	movs	r1, #1
 80020fc:	4823      	ldr	r0, [pc, #140]	; (800218c <_ZN8JoyStick8getValueEv+0xc0>)
 80020fe:	f009 f919 	bl	800b334 <HAL_GPIO_ReadPin>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <_ZN8JoyStick8getValueEv+0x4e>
 8002112:	89fb      	ldrh	r3, [r7, #14]
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 800211a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <_ZN8JoyStick8getValueEv+0xbc>)
 8002120:	f009 f908 	bl	800b334 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0x70>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0304 	orr.w	r3, r3, #4
 800213a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800213c:	2104      	movs	r1, #4
 800213e:	4814      	ldr	r0, [pc, #80]	; (8002190 <_ZN8JoyStick8getValueEv+0xc4>)
 8002140:	f009 f8f8 	bl	800b334 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN8JoyStick8getValueEv+0x90>
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f043 0308 	orr.w	r3, r3, #8
 800215a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	480a      	ldr	r0, [pc, #40]	; (8002188 <_ZN8JoyStick8getValueEv+0xbc>)
 8002160:	f009 f8e8 	bl	800b334 <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	bf0c      	ite	eq
 800216a:	2301      	moveq	r3, #1
 800216c:	2300      	movne	r3, #0
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <_ZN8JoyStick8getValueEv+0xb0>
 8002174:	89fb      	ldrh	r3, [r7, #14]
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800217c:	89fb      	ldrh	r3, [r7, #14]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40021000 	.word	0x40021000
 800218c:	40020c00 	.word	0x40020c00
 8002190:	40020400 	.word	0x40020400

08002194 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	2b52      	cmp	r3, #82	; 0x52
 80021a4:	d112      	bne.n	80021cc <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ac:	4856      	ldr	r0, [pc, #344]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021ae:	f009 f8d9 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021b8:	4853      	ldr	r0, [pc, #332]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f009 f8d3 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c4:	4850      	ldr	r0, [pc, #320]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f009 f8cd 	bl	800b364 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021ca:	e098      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	2b47      	cmp	r3, #71	; 0x47
 80021d0:	d112      	bne.n	80021f8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d8:	484b      	ldr	r0, [pc, #300]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021da:	f009 f8c3 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021de:	2200      	movs	r2, #0
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4848      	ldr	r0, [pc, #288]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f009 f8bd 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f0:	4845      	ldr	r0, [pc, #276]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f009 f8b7 	bl	800b364 <HAL_GPIO_WritePin>
}
 80021f6:	e082      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	2b42      	cmp	r3, #66	; 0x42
 80021fc:	d112      	bne.n	8002224 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021fe:	2201      	movs	r2, #1
 8002200:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002204:	4840      	ldr	r0, [pc, #256]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002206:	f009 f8ad 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002210:	483d      	ldr	r0, [pc, #244]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002212:	f009 f8a7 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221c:	483a      	ldr	r0, [pc, #232]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f009 f8a1 	bl	800b364 <HAL_GPIO_WritePin>
}
 8002222:	e06c      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b43      	cmp	r3, #67	; 0x43
 8002228:	d112      	bne.n	8002250 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800222a:	2201      	movs	r2, #1
 800222c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002230:	4835      	ldr	r0, [pc, #212]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002232:	f009 f897 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223c:	4832      	ldr	r0, [pc, #200]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800223e:	f009 f891 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002242:	2200      	movs	r2, #0
 8002244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002248:	482f      	ldr	r0, [pc, #188]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f009 f88b 	bl	800b364 <HAL_GPIO_WritePin>
}
 800224e:	e056      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b4d      	cmp	r3, #77	; 0x4d
 8002254:	d112      	bne.n	800227c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	482a      	ldr	r0, [pc, #168]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800225e:	f009 f881 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002262:	2201      	movs	r2, #1
 8002264:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002268:	4827      	ldr	r0, [pc, #156]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800226a:	f009 f87b 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002274:	4824      	ldr	r0, [pc, #144]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f009 f875 	bl	800b364 <HAL_GPIO_WritePin>
}
 800227a:	e040      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b59      	cmp	r3, #89	; 0x59
 8002280:	d112      	bne.n	80022a8 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002282:	2200      	movs	r2, #0
 8002284:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002288:	481f      	ldr	r0, [pc, #124]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 800228a:	f009 f86b 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002294:	481c      	ldr	r0, [pc, #112]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 8002296:	f009 f865 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a0:	4819      	ldr	r0, [pc, #100]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f009 f85f 	bl	800b364 <HAL_GPIO_WritePin>
}
 80022a6:	e02a      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	2b57      	cmp	r3, #87	; 0x57
 80022ac:	d112      	bne.n	80022d4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022ae:	2200      	movs	r2, #0
 80022b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b4:	4814      	ldr	r0, [pc, #80]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022b6:	f009 f855 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022ba:	2200      	movs	r2, #0
 80022bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c0:	4811      	ldr	r0, [pc, #68]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022c2:	f009 f84f 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022cc:	480e      	ldr	r0, [pc, #56]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022ce:	f009 f849 	bl	800b364 <HAL_GPIO_WritePin>
}
 80022d2:	e014      	b.n	80022fe <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	2b7e      	cmp	r3, #126	; 0x7e
 80022d8:	d111      	bne.n	80022fe <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022da:	2201      	movs	r2, #1
 80022dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e0:	4809      	ldr	r0, [pc, #36]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022e2:	f009 f83f 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022e6:	2201      	movs	r2, #1
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	4806      	ldr	r0, [pc, #24]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022ee:	f009 f839 	bl	800b364 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022f2:	2201      	movs	r2, #1
 80022f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f8:	4803      	ldr	r0, [pc, #12]	; (8002308 <_ZN3LED9fullColorEc+0x174>)
 80022fa:	f009 f833 	bl	800b364 <HAL_GPIO_WritePin>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40020000 	.word	0x40020000

0800230c <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
 8002318:	4613      	mov	r3, r2
 800231a:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 800231c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d106      	bne.n	8002332 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002324:	2201      	movs	r2, #1
 8002326:	f44f 7180 	mov.w	r1, #256	; 0x100
 800232a:	4813      	ldr	r0, [pc, #76]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 800232c:	f009 f81a 	bl	800b364 <HAL_GPIO_WritePin>
 8002330:	e009      	b.n	8002346 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d105      	bne.n	8002346 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800233a:	2200      	movs	r2, #0
 800233c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002340:	480d      	ldr	r0, [pc, #52]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 8002342:	f009 f80f 	bl	800b364 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002346:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d106      	bne.n	800235c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800234e:	2201      	movs	r2, #1
 8002350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002354:	4808      	ldr	r0, [pc, #32]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 8002356:	f009 f805 	bl	800b364 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800235a:	e009      	b.n	8002370 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800235c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002364:	2200      	movs	r2, #0
 8002366:	f44f 7100 	mov.w	r1, #512	; 0x200
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <_ZN3LED2LREaa+0x6c>)
 800236c:	f008 fffa 	bl	800b364 <HAL_GPIO_WritePin>
}
 8002370:	bf00      	nop
 8002372:	3708      	adds	r7, #8
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000

0800237c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800237c:	b580      	push	{r7, lr}
 800237e:	b092      	sub	sp, #72	; 0x48
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe92 	bl	80020b4 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	637b      	str	r3, [r7, #52]	; 0x34
 8002394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
 8002398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239a:	331c      	adds	r3, #28
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
 800239e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d008      	beq.n	80023b8 <_ZN10LineSensorC1Ev+0x3c>
 80023a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80023aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023ac:	2200      	movs	r2, #0
 80023ae:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80023b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023b2:	3302      	adds	r3, #2
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
 80023b6:	e7f2      	b.n	800239e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80023be:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c6:	3338      	adds	r3, #56	; 0x38
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d009      	beq.n	80023e6 <_ZN10LineSensorC1Ev+0x6a>
 80023d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023d4:	623b      	str	r3, [r7, #32]
		s = 0;
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80023de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023e0:	3304      	adds	r3, #4
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
 80023e4:	e7f1      	b.n	80023ca <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023ec:	61fb      	str	r3, [r7, #28]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3338      	adds	r3, #56	; 0x38
 80023f6:	61bb      	str	r3, [r7, #24]
 80023f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d009      	beq.n	8002414 <_ZN10LineSensorC1Ev+0x98>
 8002400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002402:	617b      	str	r3, [r7, #20]
		m = 0;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f04f 0200 	mov.w	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 800240c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240e:	3304      	adds	r3, #4
 8002410:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002412:	e7f1      	b.n	80023f8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	429a      	cmp	r2, r3
 800242c:	d009      	beq.n	8002442 <_ZN10LineSensorC1Ev+0xc6>
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002438:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800243a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800243c:	3304      	adds	r3, #4
 800243e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002440:	e7f1      	b.n	8002426 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4618      	mov	r0, r3
 8002446:	3748      	adds	r7, #72	; 0x48
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	220e      	movs	r2, #14
 8002458:	4619      	mov	r1, r3
 800245a:	4803      	ldr	r0, [pc, #12]	; (8002468 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800245c:	f007 fd52 	bl	8009f04 <HAL_ADC_Start_DMA>
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200448d0 	.word	0x200448d0

0800246c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2b0d      	cmp	r3, #13
 800247c:	dc2f      	bgt.n	80024de <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	3392      	adds	r3, #146	; 0x92
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	ed93 7a00 	vldr	s14, [r3]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	33a0      	adds	r3, #160	; 0xa0
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	3304      	adds	r3, #4
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024b2:	4b14      	ldr	r3, [pc, #80]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	4619      	mov	r1, r3
 80024b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	00db      	lsls	r3, r3, #3
 80024c2:	1a5b      	subs	r3, r3, r1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	68f9      	ldr	r1, [r7, #12]
 80024c8:	440b      	add	r3, r1
 80024ca:	3306      	adds	r3, #6
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3301      	adds	r3, #1
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	e7cc      	b.n	8002478 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024e8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d902      	bls.n	80024f8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]


}
 80024f8:	bf00      	nop
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	20000254 	.word	0x20000254

08002508 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002508:	b490      	push	{r4, r7}
 800250a:	b08e      	sub	sp, #56	; 0x38
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002516:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800251a:	2b0d      	cmp	r3, #13
 800251c:	f200 8087 	bhi.w	800262e <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002520:	2300      	movs	r3, #0
 8002522:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002526:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800252a:	2b09      	cmp	r3, #9
 800252c:	d81c      	bhi.n	8002568 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800252e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002532:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002536:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4423      	add	r3, r4
 8002546:	3306      	adds	r3, #6
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4403      	add	r3, r0
 800254c:	3304      	adds	r3, #4
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	008b      	lsls	r3, r1, #2
 8002552:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002556:	440b      	add	r3, r1
 8002558:	3b30      	subs	r3, #48	; 0x30
 800255a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800255c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002560:	3301      	adds	r3, #1
 8002562:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002566:	e7de      	b.n	8002526 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800256e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002572:	2b09      	cmp	r3, #9
 8002574:	d84d      	bhi.n	8002612 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002576:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800257a:	3301      	adds	r3, #1
 800257c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002580:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002584:	2b09      	cmp	r3, #9
 8002586:	d83e      	bhi.n	8002606 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002588:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002592:	4413      	add	r3, r2
 8002594:	3b30      	subs	r3, #48	; 0x30
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a4:	4413      	add	r3, r2
 80025a6:	3b30      	subs	r3, #48	; 0x30
 80025a8:	edd3 7a00 	vldr	s15, [r3]
 80025ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d521      	bpl.n	80025fa <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80025b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025c0:	4413      	add	r3, r2
 80025c2:	3b30      	subs	r3, #48	; 0x30
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025c8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025d6:	440a      	add	r2, r1
 80025d8:	3a30      	subs	r2, #48	; 0x30
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025e2:	440b      	add	r3, r1
 80025e4:	3b30      	subs	r3, #48	; 0x30
 80025e6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025f2:	4413      	add	r3, r2
 80025f4:	3b30      	subs	r3, #48	; 0x30
 80025f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025fa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025fe:	3301      	adds	r3, #1
 8002600:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002604:	e7bc      	b.n	8002580 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002606:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800260a:	3301      	adds	r3, #1
 800260c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002610:	e7ad      	b.n	800256e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 8002612:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	33b0      	adds	r3, #176	; 0xb0
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002626:	3301      	adds	r3, #1
 8002628:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800262c:	e773      	b.n	8002516 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002634:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 8002636:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002640:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002648:	4a23      	ldr	r2, [pc, #140]	; (80026d8 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 800264a:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 8002654:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 800265e:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002666:	4a1f      	ldr	r2, [pc, #124]	; (80026e4 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002668:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002670:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 8002672:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800267a:	4a1c      	ldr	r2, [pc, #112]	; (80026ec <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 800267c:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002684:	4a1a      	ldr	r2, [pc, #104]	; (80026f0 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 8002686:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800268e:	4a19      	ldr	r2, [pc, #100]	; (80026f4 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002690:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002698:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 800269a:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80026a2:	4a16      	ldr	r2, [pc, #88]	; (80026fc <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 80026a4:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 80026ae:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80026b6:	4a13      	ldr	r2, [pc, #76]	; (8002704 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 80026b8:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80026c0:	4a11      	ldr	r2, [pc, #68]	; (8002708 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	3738      	adds	r7, #56	; 0x38
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc90      	pop	{r4, r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000218 	.word	0x20000218
 80026d4:	2000021c 	.word	0x2000021c
 80026d8:	20000220 	.word	0x20000220
 80026dc:	20000224 	.word	0x20000224
 80026e0:	20000228 	.word	0x20000228
 80026e4:	2000022c 	.word	0x2000022c
 80026e8:	20000230 	.word	0x20000230
 80026ec:	20000234 	.word	0x20000234
 80026f0:	20000238 	.word	0x20000238
 80026f4:	2000023c 	.word	0x2000023c
 80026f8:	20000240 	.word	0x20000240
 80026fc:	20000244 	.word	0x20000244
 8002700:	20000248 	.word	0x20000248
 8002704:	2000024c 	.word	0x2000024c
 8002708:	20000250 	.word	0x20000250

0800270c <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b0a0      	sub	sp, #128	; 0x80
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 8002714:	2064      	movs	r0, #100	; 0x64
 8002716:	f007 fb8f 	bl	8009e38 <HAL_Delay>

	lcd_clear();
 800271a:	f7fe fcc1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800271e:	2100      	movs	r1, #0
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fccd 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 8002726:	4886      	ldr	r0, [pc, #536]	; (8002940 <_ZN10LineSensor11calibrationEv+0x234>)
 8002728:	f7fe fcf4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800272c:	2101      	movs	r1, #1
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe fcc6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8002734:	4883      	ldr	r0, [pc, #524]	; (8002944 <_ZN10LineSensor11calibrationEv+0x238>)
 8002736:	f7fe fced 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800273a:	2300      	movs	r3, #0
 800273c:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002740:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002744:	2b0d      	cmp	r3, #13
 8002746:	d823      	bhi.n	8002790 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002748:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800274c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	32b0      	adds	r2, #176	; 0xb0
 8002754:	0092      	lsls	r2, r2, #2
 8002756:	440a      	add	r2, r1
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002760:	440b      	add	r3, r1
 8002762:	3b40      	subs	r3, #64	; 0x40
 8002764:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002766:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800276a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	32b0      	adds	r2, #176	; 0xb0
 8002772:	0092      	lsls	r2, r2, #2
 8002774:	440a      	add	r2, r1
 8002776:	6812      	ldr	r2, [r2, #0]
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800277e:	440b      	add	r3, r1
 8002780:	3b78      	subs	r3, #120	; 0x78
 8002782:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002784:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002788:	3301      	adds	r3, #1
 800278a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800278e:	e7d7      	b.n	8002740 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fc98 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800279c:	4603      	mov	r3, r0
 800279e:	2b02      	cmp	r3, #2
 80027a0:	bf14      	ite	ne
 80027a2:	2301      	movne	r3, #1
 80027a4:	2300      	moveq	r3, #0
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d079      	beq.n	80028a0 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027b2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027b6:	2b0d      	cmp	r3, #13
 80027b8:	d850      	bhi.n	800285c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80027ba:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027c4:	4413      	add	r3, r2
 80027c6:	3b40      	subs	r3, #64	; 0x40
 80027c8:	ed93 7a00 	vldr	s14, [r3]
 80027cc:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	33b0      	adds	r3, #176	; 0xb0
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	edd3 7a00 	vldr	s15, [r3]
 80027dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e4:	d50f      	bpl.n	8002806 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 80027e6:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80027ea:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	32b0      	adds	r2, #176	; 0xb0
 80027f2:	0092      	lsls	r2, r2, #2
 80027f4:	440a      	add	r2, r1
 80027f6:	6812      	ldr	r2, [r2, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027fe:	440b      	add	r3, r1
 8002800:	3b40      	subs	r3, #64	; 0x40
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e024      	b.n	8002850 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 8002806:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002810:	4413      	add	r3, r2
 8002812:	3b78      	subs	r3, #120	; 0x78
 8002814:	ed93 7a00 	vldr	s14, [r3]
 8002818:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	33b0      	adds	r3, #176	; 0xb0
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	edd3 7a00 	vldr	s15, [r3]
 8002828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800282c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002830:	dd0e      	ble.n	8002850 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 8002832:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002836:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	32b0      	adds	r2, #176	; 0xb0
 800283e:	0092      	lsls	r2, r2, #2
 8002840:	440a      	add	r2, r1
 8002842:	6812      	ldr	r2, [r2, #0]
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800284a:	440b      	add	r3, r1
 800284c:	3b78      	subs	r3, #120	; 0x78
 800284e:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002850:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002854:	3301      	adds	r3, #1
 8002856:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800285a:	e7aa      	b.n	80027b2 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002862:	4618      	mov	r0, r3
 8002864:	f002 fe2a 	bl	80054bc <_ZN12RotarySwitch8getValueEv>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	bf0c      	ite	eq
 800286e:	2301      	moveq	r3, #1
 8002870:	2300      	movne	r3, #0
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d009      	beq.n	800288c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800287e:	2201      	movs	r2, #1
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	4618      	mov	r0, r3
 8002886:	f7ff fd41 	bl	800230c <_ZN3LED2LREaa>
 800288a:	e781      	b.n	8002790 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002892:	2200      	movs	r2, #0
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fd37 	bl	800230c <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800289e:	e777      	b.n	8002790 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028a0:	2300      	movs	r3, #0
 80028a2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028a6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028aa:	2b0d      	cmp	r3, #13
 80028ac:	d826      	bhi.n	80028fc <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80028ae:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028b8:	4413      	add	r3, r2
 80028ba:	3b40      	subs	r3, #64	; 0x40
 80028bc:	ed93 7a00 	vldr	s14, [r3]
 80028c0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028ca:	4413      	add	r3, r2
 80028cc:	3b78      	subs	r3, #120	; 0x78
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028da:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002948 <_ZN10LineSensor11calibrationEv+0x23c>
 80028de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	3392      	adds	r3, #146	; 0x92
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028f0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028f4:	3301      	adds	r3, #1
 80028f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028fa:	e7d4      	b.n	80028a6 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028fc:	2300      	movs	r3, #0
 80028fe:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002902:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002906:	2b0d      	cmp	r3, #13
 8002908:	d815      	bhi.n	8002936 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 800290a:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 800290e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002912:	0092      	lsls	r2, r2, #2
 8002914:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002918:	440a      	add	r2, r1
 800291a:	3a78      	subs	r2, #120	; 0x78
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	33a0      	adds	r3, #160	; 0xa0
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	3304      	adds	r3, #4
 8002928:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800292a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800292e:	3301      	adds	r3, #1
 8002930:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002934:	e7e5      	b.n	8002902 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 8002936:	bf00      	nop
 8002938:	3780      	adds	r7, #128	; 0x80
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	08019d2c 	.word	0x08019d2c
 8002944:	08019d38 	.word	0x08019d38
 8002948:	447a0000 	.word	0x447a0000

0800294c <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002954:	2300      	movs	r3, #0
 8002956:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002958:	2303      	movs	r3, #3
 800295a:	81bb      	strh	r3, [r7, #12]
 800295c:	89bb      	ldrh	r3, [r7, #12]
 800295e:	2b0a      	cmp	r3, #10
 8002960:	d814      	bhi.n	800298c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002962:	89bb      	ldrh	r3, [r7, #12]
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	33b0      	adds	r3, #176	; 0xb0
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	edd3 7a00 	vldr	s15, [r3]
 8002970:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80029e0 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800297c:	db02      	blt.n	8002984 <_ZN10LineSensor13emergencyStopEv+0x38>
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	3301      	adds	r3, #1
 8002982:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	3301      	adds	r3, #1
 8002988:	81bb      	strh	r3, [r7, #12]
 800298a:	e7e7      	b.n	800295c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	2b07      	cmp	r3, #7
 8002990:	d906      	bls.n	80029a0 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002992:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002994:	881b      	ldrh	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 800299c:	801a      	strh	r2, [r3, #0]
 800299e:	e002      	b.n	80029a6 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80029a0:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	2b63      	cmp	r3, #99	; 0x63
 80029ac:	d903      	bls.n	80029b6 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80029ae:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e002      	b.n	80029bc <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80029b6:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029be:	881b      	ldrh	r3, [r3, #0]
 80029c0:	f242 720f 	movw	r2, #9999	; 0x270f
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d903      	bls.n	80029d0 <_ZN10LineSensor13emergencyStopEv+0x84>
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80029ce:	801a      	strh	r2, [r3, #0]

	return flag;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029d2:	781b      	ldrb	r3, [r3, #0]

}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	44098000 	.word	0x44098000
 80029e4:	20000256 	.word	0x20000256
 80029e8:	20000258 	.word	0x20000258

080029ec <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80029f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029fa:	eef0 7ae7 	vabs.f32	s15, s15
 80029fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a0c:	b480      	push	{r7}
 8002a0e:	b089      	sub	sp, #36	; 0x24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), sideline_idx2_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0),
				store_check_cnt_(0), all_sideline_flag_(false)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	629a      	str	r2, [r3, #40]	; 0x28
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002a8a:	330c      	adds	r3, #12
 8002a8c:	f04f 0200 	mov.w	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a98:	3350      	adds	r3, #80	; 0x50
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002aa4:	3352      	adds	r3, #82	; 0x52
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	801a      	strh	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ab0:	3354      	adds	r3, #84	; 0x54
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	801a      	strh	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002abc:	3318      	adds	r3, #24
 8002abe:	2200      	movs	r2, #0
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ac8:	331c      	adds	r3, #28
 8002aca:	2200      	movs	r2, #0
 8002acc:	801a      	strh	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ad4:	331e      	adds	r3, #30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	801a      	strh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002ae0:	3320      	adds	r3, #32
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002aec:	3322      	adds	r3, #34	; 0x22
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002af8:	3323      	adds	r3, #35	; 0x23
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b04:	3324      	adds	r3, #36	; 0x24
 8002b06:	2200      	movs	r2, #0
 8002b08:	701a      	strb	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b10:	3328      	adds	r3, #40	; 0x28
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b1e:	332c      	adds	r3, #44	; 0x2c
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b2c:	3330      	adds	r3, #48	; 0x30
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b3a:	3334      	adds	r3, #52	; 0x34
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b48:	3338      	adds	r3, #56	; 0x38
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	801a      	strh	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b54:	333a      	adds	r3, #58	; 0x3a
 8002b56:	2200      	movs	r2, #0
 8002b58:	801a      	strh	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002b60:	333c      	adds	r3, #60	; 0x3c
 8002b62:	2200      	movs	r2, #0
 8002b64:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b82:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b8e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b94:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	83fb      	strh	r3, [r7, #30]
 8002ba0:	8bfb      	ldrh	r3, [r7, #30]
 8002ba2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d80d      	bhi.n	8002bc6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1ba>
		velocity_table_[i] = 0;
 8002baa:	8bfb      	ldrh	r3, [r7, #30]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002bb2:	3304      	adds	r3, #4
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bbe:	8bfb      	ldrh	r3, [r7, #30]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	83fb      	strh	r3, [r7, #30]
 8002bc4:	e7ec      	b.n	8002ba0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x194>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	83bb      	strh	r3, [r7, #28]
 8002bca:	8bbb      	ldrh	r3, [r7, #28]
 8002bcc:	2b63      	cmp	r3, #99	; 0x63
 8002bce:	d80d      	bhi.n	8002bec <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e0>
		crossline_distance_[i] = 0;
 8002bd0:	8bbb      	ldrh	r3, [r7, #28]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002bd8:	3316      	adds	r3, #22
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002be4:	8bbb      	ldrh	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	83bb      	strh	r3, [r7, #28]
 8002bea:	e7ee      	b.n	8002bca <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1be>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bec:	2300      	movs	r3, #0
 8002bee:	837b      	strh	r3, [r7, #26]
 8002bf0:	8b7b      	ldrh	r3, [r7, #26]
 8002bf2:	2b63      	cmp	r3, #99	; 0x63
 8002bf4:	d80d      	bhi.n	8002c12 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x206>
		crossline_distance2_[i] = 0;
 8002bf6:	8b7b      	ldrh	r3, [r7, #26]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002bfe:	333a      	adds	r3, #58	; 0x3a
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c0a:	8b7b      	ldrh	r3, [r7, #26]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	837b      	strh	r3, [r7, #26]
 8002c10:	e7ee      	b.n	8002bf0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1e4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c12:	2300      	movs	r3, #0
 8002c14:	833b      	strh	r3, [r7, #24]
 8002c16:	8b3b      	ldrh	r3, [r7, #24]
 8002c18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c1c:	d20d      	bcs.n	8002c3a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x22e>
		sideline_distance_[i] = 0;
 8002c1e:	8b3b      	ldrh	r3, [r7, #24]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8002c26:	331e      	adds	r3, #30
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c32:	8b3b      	ldrh	r3, [r7, #24]
 8002c34:	3301      	adds	r3, #1
 8002c36:	833b      	strh	r3, [r7, #24]
 8002c38:	e7ed      	b.n	8002c16 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x20a>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	82fb      	strh	r3, [r7, #22]
 8002c3e:	8afb      	ldrh	r3, [r7, #22]
 8002c40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c44:	d20d      	bcs.n	8002c62 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x256>
		sideline_distance2_[i] = 0;
 8002c46:	8afb      	ldrh	r3, [r7, #22]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	f503 5347 	add.w	r3, r3, #12736	; 0x31c0
 8002c4e:	3312      	adds	r3, #18
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	f04f 0200 	mov.w	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c5a:	8afb      	ldrh	r3, [r7, #22]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	82fb      	strh	r3, [r7, #22]
 8002c60:	e7ed      	b.n	8002c3e <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x232>
	/*
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
		all_sideline_distance_[i] = 0;
	}
	*/
}
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	4618      	mov	r0, r3
 8002c66:	3724      	adds	r7, #36	; 0x24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002c94:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002ca8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002cb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cbc:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002cc0:	4a06      	ldr	r2, [pc, #24]	; (8002cdc <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	ee07 3a90 	vmov	s15, r3

}
 8002ccc:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd0:	3714      	adds	r7, #20
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	2000025c 	.word	0x2000025c

08002ce0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff ffc1 	bl	8002c70 <_ZN9LineTrace9calcErrorEv>
 8002cee:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d007      	beq.n	8002d0c <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002cfc:	4b66      	ldr	r3, [pc, #408]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cfe:	f04f 0200 	mov.w	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d12:	3354      	adds	r3, #84	; 0x54
 8002d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d14c      	bne.n	8002db6 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d22:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d2a:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002d34:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d36:	edd3 7a00 	vldr	s15, [r3]
 8002d3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d46:	ee17 0a90 	vmov	r0, s15
 8002d4a:	f7fd fc15 	bl	8000578 <__aeabi_f2d>
 8002d4e:	a350      	add	r3, pc, #320	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d54:	f7fd fd92 	bl	800087c <__aeabi_ddiv>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	4621      	mov	r1, r4
 8002d60:	f7fd ff5a 	bl	8000c18 <__aeabi_d2f>
 8002d64:	4603      	mov	r3, r0
 8002d66:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fc03 	bl	8000578 <__aeabi_f2d>
 8002d72:	4604      	mov	r4, r0
 8002d74:	460d      	mov	r5, r1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d84:	ee17 0a90 	vmov	r0, s15
 8002d88:	f7fd fbf6 	bl	8000578 <__aeabi_f2d>
 8002d8c:	a340      	add	r3, pc, #256	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f7fd fc49 	bl	8000628 <__aeabi_dmul>
 8002d96:	4602      	mov	r2, r0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f7fd fa8d 	bl	80002bc <__adddf3>
 8002da2:	4603      	mov	r3, r0
 8002da4:	460c      	mov	r4, r1
 8002da6:	4618      	mov	r0, r3
 8002da8:	4621      	mov	r1, r4
 8002daa:	f7fd ff35 	bl	8000c18 <__aeabi_d2f>
 8002dae:	4602      	mov	r2, r0
 8002db0:	4b39      	ldr	r3, [pc, #228]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e04b      	b.n	8002e4e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dbc:	ed97 7a03 	vldr	s14, [r7, #12]
 8002dc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dc4:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dd8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002ddc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de0:	ee17 0a90 	vmov	r0, s15
 8002de4:	f7fd fbc8 	bl	8000578 <__aeabi_f2d>
 8002de8:	a329      	add	r3, pc, #164	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dee:	f7fd fd45 	bl	800087c <__aeabi_ddiv>
 8002df2:	4603      	mov	r3, r0
 8002df4:	460c      	mov	r4, r1
 8002df6:	4618      	mov	r0, r3
 8002df8:	4621      	mov	r1, r4
 8002dfa:	f7fd ff0d 	bl	8000c18 <__aeabi_d2f>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7fd fbb6 	bl	8000578 <__aeabi_f2d>
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	460d      	mov	r5, r1
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	ee17 0a90 	vmov	r0, s15
 8002e22:	f7fd fba9 	bl	8000578 <__aeabi_f2d>
 8002e26:	a31a      	add	r3, pc, #104	; (adr r3, 8002e90 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd fbfc 	bl	8000628 <__aeabi_dmul>
 8002e30:	4602      	mov	r2, r0
 8002e32:	460b      	mov	r3, r1
 8002e34:	4620      	mov	r0, r4
 8002e36:	4629      	mov	r1, r5
 8002e38:	f7fd fa40 	bl	80002bc <__adddf3>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4618      	mov	r0, r3
 8002e42:	4621      	mov	r1, r4
 8002e44:	f7fd fee8 	bl	8000c18 <__aeabi_d2f>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e4c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002e4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e5a:	4b0f      	ldr	r3, [pc, #60]	; (8002e98 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e64:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002e72:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e76:	eeb0 0a67 	vmov.f32	s0, s15
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f002 fff8 	bl	8005e70 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6013      	str	r3, [r2, #0]

}
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e94:	3f50624d 	.word	0x3f50624d
 8002e98:	20000270 	.word	0x20000270
 8002e9c:	2000026c 	.word	0x2000026c

08002ea0 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fe fc37 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f002 f9c2 	bl	8005240 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f001 fedc 	bl	8004c7e <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f001 ff55 	bl	8004d92 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695a      	ldr	r2, [r3, #20]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	881b      	ldrh	r3, [r3, #0]
 8002f0e:	461c      	mov	r4, r3
 8002f10:	4610      	mov	r0, r2
 8002f12:	f7fe fbe7 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f16:	eef0 7a40 	vmov.f32	s15, s0
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f20:	3316      	adds	r3, #22
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f30:	3318      	adds	r3, #24
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f3e:	3318      	adds	r3, #24
 8002f40:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f48:	3318      	adds	r3, #24
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	2b63      	cmp	r3, #99	; 0x63
 8002f4e:	d905      	bls.n	8002f5c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f56:	3318      	adds	r3, #24
 8002f58:	2263      	movs	r2, #99	; 0x63
 8002f5a:	801a      	strh	r2, [r3, #0]
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd90      	pop	{r4, r7, pc}

08002f64 <_ZN9LineTrace23storeCrossLineDistance2Ev>:

void LineTrace::storeCrossLineDistance2()
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
	crossline_distance2_[crossline_idx2_] = encoder_->getTotalDistance();
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695a      	ldr	r2, [r3, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f76:	331a      	adds	r3, #26
 8002f78:	881b      	ldrh	r3, [r3, #0]
 8002f7a:	461c      	mov	r4, r3
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	f7fe fbb1 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f82:	eef0 7a40 	vmov.f32	s15, s0
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f8c:	333a      	adds	r3, #58	; 0x3a
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx2_++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002f9c:	331a      	adds	r3, #26
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002faa:	331a      	adds	r3, #26
 8002fac:	801a      	strh	r2, [r3, #0]

	if(crossline_idx2_ >= CROSSLINE_SIZE) crossline_idx2_ = CROSSLINE_SIZE - 1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fb4:	331a      	adds	r3, #26
 8002fb6:	881b      	ldrh	r3, [r3, #0]
 8002fb8:	2b63      	cmp	r3, #99	; 0x63
 8002fba:	d905      	bls.n	8002fc8 <_ZN9LineTrace23storeCrossLineDistance2Ev+0x64>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fc2:	331a      	adds	r3, #26
 8002fc4:	2263      	movs	r2, #99	; 0x63
 8002fc6:	801a      	strh	r2, [r3, #0]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd90      	pop	{r4, r7, pc}

08002fd0 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002fd0:	b590      	push	{r4, r7, lr}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8002fe2:	331c      	adds	r3, #28
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f7fe fb7b 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fee:	eef0 7a40 	vmov.f32	s15, s0
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	f504 533f 	add.w	r3, r4, #12224	; 0x2fc0
 8002ff8:	331e      	adds	r3, #30
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	4413      	add	r3, r2
 8002ffe:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003008:	331c      	adds	r3, #28
 800300a:	881b      	ldrh	r3, [r3, #0]
 800300c:	3301      	adds	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003016:	331c      	adds	r3, #28
 8003018:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003020:	331c      	adds	r3, #28
 8003022:	881b      	ldrh	r3, [r3, #0]
 8003024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003028:	d306      	bcc.n	8003038 <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003030:	331c      	adds	r3, #28
 8003032:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003036:	801a      	strh	r2, [r3, #0]
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <_ZN9LineTrace22storeSideLineDistance2Ev>:

void LineTrace::storeSideLineDistance2()
{
 8003040:	b590      	push	{r4, r7, lr}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	sideline_distance2_[sideline_idx2_] = encoder_->getTotalDistance();
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695a      	ldr	r2, [r3, #20]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003052:	331e      	adds	r3, #30
 8003054:	881b      	ldrh	r3, [r3, #0]
 8003056:	461c      	mov	r4, r3
 8003058:	4610      	mov	r0, r2
 800305a:	f7fe fb43 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800305e:	eef0 7a40 	vmov.f32	s15, s0
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	f504 5347 	add.w	r3, r4, #12736	; 0x31c0
 8003068:	3312      	adds	r3, #18
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	4413      	add	r3, r2
 800306e:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx2_++;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003078:	331e      	adds	r3, #30
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	3301      	adds	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003086:	331e      	adds	r3, #30
 8003088:	801a      	strh	r2, [r3, #0]

	if(sideline_idx2_ >= SIDELINE_SIZE) sideline_idx2_ = SIDELINE_SIZE - 1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003090:	331e      	adds	r3, #30
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003098:	d306      	bcc.n	80030a8 <_ZN9LineTrace22storeSideLineDistance2Ev+0x68>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80030a0:	331e      	adds	r3, #30
 80030a2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80030a6:	801a      	strh	r2, [r3, #0]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd90      	pop	{r4, r7, pc}

080030b0 <_ZN9LineTrace9storeLogsEv>:
	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}
*/

void LineTrace::storeLogs()
{
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	ed2d 8b02 	vpush	{d8}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d046      	beq.n	8003154 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80030cc:	3354      	adds	r3, #84	; 0x54
 80030ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d11c      	bne.n	8003110 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69dc      	ldr	r4, [r3, #28]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe faf1 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80030e4:	eeb0 8a40 	vmov.f32	s16, s0
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f002 f896 	bl	800521e <_ZN8Odometry8getThetaEv>
 80030f2:	ec53 2b10 	vmov	r2, r3, d0
 80030f6:	4610      	mov	r0, r2
 80030f8:	4619      	mov	r1, r3
 80030fa:	f7fd fd8d 	bl	8000c18 <__aeabi_d2f>
 80030fe:	4603      	mov	r3, r0
 8003100:	ee00 3a90 	vmov	s1, r3
 8003104:	eeb0 0a48 	vmov.f32	s0, s16
 8003108:	4620      	mov	r0, r4
 800310a:	f001 fc85 	bl	8004a18 <_ZN6Logger21storeDistanceAndThetaEff>
 800310e:	e01b      	b.n	8003148 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69dc      	ldr	r4, [r3, #28]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	4618      	mov	r0, r3
 800311a:	f7fe fae3 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800311e:	eeb0 8a40 	vmov.f32	s16, s0
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	4618      	mov	r0, r3
 8003128:	f002 f879 	bl	800521e <_ZN8Odometry8getThetaEv>
 800312c:	ec53 2b10 	vmov	r2, r3, d0
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	f7fd fd70 	bl	8000c18 <__aeabi_d2f>
 8003138:	4603      	mov	r3, r0
 800313a:	ee00 3a90 	vmov	s1, r3
 800313e:	eeb0 0a48 	vmov.f32	s0, s16
 8003142:	4620      	mov	r0, r4
 8003144:	f001 fcab 	bl	8004a9e <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());

		mon_store_cnt++;
 8003148:	4b05      	ldr	r3, [pc, #20]	; (8003160 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b03      	ldr	r3, [pc, #12]	; (8003160 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003152:	801a      	strh	r2, [r3, #0]
	}
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	ecbd 8b02 	vpop	{d8}
 800315e:	bd90      	pop	{r4, r7, pc}
 8003160:	20000260 	.word	0x20000260

08003164 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	/*
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_] / DISTANCE_CORRECTION_CONST);
	crossline_idx_++;
	correction_check_cnt_ = 0;
	*/
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 800316c:	2300      	movs	r3, #0
 800316e:	82fb      	strh	r3, [r7, #22]
 8003170:	8afb      	ldrh	r3, [r7, #22]
 8003172:	2b63      	cmp	r3, #99	; 0x63
 8003174:	d83d      	bhi.n	80031f2 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8e>
		float temp_crossline_distance = crossline_distance_[i];
 8003176:	8afb      	ldrh	r3, [r7, #22]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800317e:	3316      	adds	r3, #22
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_crossline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fe faa9 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003192:	eeb0 7a40 	vmov.f32	s14, s0
 8003196:	edd7 7a04 	vldr	s15, [r7, #16]
 800319a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	f7ff fc23 	bl	80029ec <_ZSt3absf>
 80031a6:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 100){
 80031aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80031ae:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003214 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xb0>
 80031b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ba:	d816      	bhi.n	80031ea <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x86>
			correction_check_cnt_ = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031c2:	3338      	adds	r3, #56	; 0x38
 80031c4:	2200      	movs	r2, #0
 80031c6:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(crossline_distance_[i] / DISTANCE_CORRECTION_CONST);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6959      	ldr	r1, [r3, #20]
 80031cc:	8afb      	ldrh	r3, [r7, #22]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80031d4:	3316      	adds	r3, #22
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	edd3 7a00 	vldr	s15, [r3]
 80031de:	eeb0 0a67 	vmov.f32	s0, s15
 80031e2:	4608      	mov	r0, r1
 80031e4:	f7fe fa8d 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80031e8:	e003      	b.n	80031f2 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x8e>
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80031ea:	8afb      	ldrh	r3, [r7, #22]
 80031ec:	3301      	adds	r3, #1
 80031ee:	82fb      	strh	r3, [r7, #22]
 80031f0:	e7be      	b.n	8003170 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xc>
		}
		crossline_idx_++;
	}
	*/

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80031f8:	3318      	adds	r3, #24
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	2b63      	cmp	r3, #99	; 0x63
 80031fe:	d905      	bls.n	800320c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0xa8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003206:	3318      	adds	r3, #24
 8003208:	2263      	movs	r2, #99	; 0x63
 800320a:	801a      	strh	r2, [r3, #0]

}
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	42c80000 	.word	0x42c80000

08003218 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]

	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003220:	2300      	movs	r3, #0
 8003222:	82fb      	strh	r3, [r7, #22]
 8003224:	8afb      	ldrh	r3, [r7, #22]
 8003226:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800322a:	d23d      	bcs.n	80032a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
		float temp_sideline_distance = sideline_distance_[i];
 800322c:	8afb      	ldrh	r3, [r7, #22]
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 8003234:	331e      	adds	r3, #30
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - (encoder_->getTotalDistance() / DISTANCE_CORRECTION_CONST));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fa4e 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8003248:	eeb0 7a40 	vmov.f32	s14, s0
 800324c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003250:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f7ff fbc8 	bl	80029ec <_ZSt3absf>
 800325c:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 230){
 8003260:	edd7 7a03 	vldr	s15, [r7, #12]
 8003264:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80032d0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb8>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d816      	bhi.n	80032a0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
			correction_check_cnt_ = 0;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003278:	3338      	adds	r3, #56	; 0x38
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
			encoder_->setTotalDistance(sideline_distance_[i] / DISTANCE_CORRECTION_CONST);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6959      	ldr	r1, [r3, #20]
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	f503 533f 	add.w	r3, r3, #12224	; 0x2fc0
 800328a:	331e      	adds	r3, #30
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	edd3 7a00 	vldr	s15, [r3]
 8003294:	eeb0 0a67 	vmov.f32	s0, s15
 8003298:	4608      	mov	r0, r1
 800329a:	f7fe fa32 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 800329e:	e003      	b.n	80032a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x90>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80032a0:	8afb      	ldrh	r3, [r7, #22]
 80032a2:	3301      	adds	r3, #1
 80032a4:	82fb      	strh	r3, [r7, #22]
 80032a6:	e7bd      	b.n	8003224 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
		sideline_idx_++;
	}
	*/

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032ae:	331c      	adds	r3, #28
 80032b0:	881b      	ldrh	r3, [r3, #0]
 80032b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80032b6:	d306      	bcc.n	80032c6 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xae>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80032be:	331c      	adds	r3, #28
 80032c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032c4:	801a      	strh	r2, [r3, #0]

}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	43660000 	.word	0x43660000

080032d4 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032e6:	3354      	adds	r3, #84	; 0x54
 80032e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d12b      	bne.n	8003348 <_ZN9LineTrace15radius2VelocityEf+0x74>
		if(radius < 400) velocity = min_velocity_;
 80032f0:	edd7 7a00 	vldr	s15, [r7]
 80032f4:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80033e0 <_ZN9LineTrace15radius2VelocityEf+0x10c>
 80032f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	d504      	bpl.n	800330c <_ZN9LineTrace15radius2VelocityEf+0x38>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	e05e      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 800) velocity = 1.7;
 800330c:	edd7 7a00 	vldr	s15, [r7]
 8003310:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80033e4 <_ZN9LineTrace15radius2VelocityEf+0x110>
 8003314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800331c:	d502      	bpl.n	8003324 <_ZN9LineTrace15radius2VelocityEf+0x50>
 800331e:	4b32      	ldr	r3, [pc, #200]	; (80033e8 <_ZN9LineTrace15radius2VelocityEf+0x114>)
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	e052      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1400) velocity = 2.0;
 8003324:	edd7 7a00 	vldr	s15, [r7]
 8003328:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80033ec <_ZN9LineTrace15radius2VelocityEf+0x118>
 800332c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003334:	d503      	bpl.n	800333e <_ZN9LineTrace15radius2VelocityEf+0x6a>
 8003336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	e045      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity_;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	e040      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800334e:	3354      	adds	r3, #84	; 0x54
 8003350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003354:	2b02      	cmp	r3, #2
 8003356:	d136      	bne.n	80033c6 <_ZN9LineTrace15radius2VelocityEf+0xf2>
		if(radius < 300) velocity = min_velocity2_;
 8003358:	edd7 7a00 	vldr	s15, [r7]
 800335c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80033f0 <_ZN9LineTrace15radius2VelocityEf+0x11c>
 8003360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003368:	d504      	bpl.n	8003374 <_ZN9LineTrace15radius2VelocityEf+0xa0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003370:	60fb      	str	r3, [r7, #12]
 8003372:	e02a      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 1500) velocity = 2.1;
 8003374:	edd7 7a00 	vldr	s15, [r7]
 8003378:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80033f4 <_ZN9LineTrace15radius2VelocityEf+0x120>
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d502      	bpl.n	800338c <_ZN9LineTrace15radius2VelocityEf+0xb8>
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <_ZN9LineTrace15radius2VelocityEf+0x124>)
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	e01e      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2000) velocity = 2.5;
 800338c:	edd7 7a00 	vldr	s15, [r7]
 8003390:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80033fc <_ZN9LineTrace15radius2VelocityEf+0x128>
 8003394:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339c:	d502      	bpl.n	80033a4 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <_ZN9LineTrace15radius2VelocityEf+0x12c>)
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	e012      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else if(radius < 2500) velocity = 3.0;
 80033a4:	edd7 7a00 	vldr	s15, [r7]
 80033a8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003404 <_ZN9LineTrace15radius2VelocityEf+0x130>
 80033ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b4:	d502      	bpl.n	80033bc <_ZN9LineTrace15radius2VelocityEf+0xe8>
 80033b6:	4b14      	ldr	r3, [pc, #80]	; (8003408 <_ZN9LineTrace15radius2VelocityEf+0x134>)
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e006      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
		else velocity = max_velocity2_;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	e001      	b.n	80033ca <_ZN9LineTrace15radius2VelocityEf+0xf6>
	}
	else velocity = 1.3;
 80033c6:	4b11      	ldr	r3, [pc, #68]	; (800340c <_ZN9LineTrace15radius2VelocityEf+0x138>)
 80033c8:	60fb      	str	r3, [r7, #12]

	return velocity;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	ee07 3a90 	vmov	s15, r3
}
 80033d0:	eeb0 0a67 	vmov.f32	s0, s15
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	43c80000 	.word	0x43c80000
 80033e4:	44480000 	.word	0x44480000
 80033e8:	3fd9999a 	.word	0x3fd9999a
 80033ec:	44af0000 	.word	0x44af0000
 80033f0:	43960000 	.word	0x43960000
 80033f4:	44bb8000 	.word	0x44bb8000
 80033f8:	40066666 	.word	0x40066666
 80033fc:	44fa0000 	.word	0x44fa0000
 8003400:	40200000 	.word	0x40200000
 8003404:	451c4000 	.word	0x451c4000
 8003408:	40400000 	.word	0x40400000
 800340c:	3fa66666 	.word	0x3fa66666

08003410 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003410:	b5b0      	push	{r4, r5, r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	ed87 0a02 	vstr	s0, [r7, #8]
 800341c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800341e:	f241 736f 	movw	r3, #5999	; 0x176f
 8003422:	83fb      	strh	r3, [r7, #30]
 8003424:	8bfb      	ldrh	r3, [r7, #30]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 808d 	beq.w	8003546 <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 800342c:	8bfb      	ldrh	r3, [r7, #30]
 800342e:	3b01      	subs	r3, #1
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003436:	3304      	adds	r3, #4
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	ed93 7a00 	vldr	s14, [r3]
 8003440:	8bfb      	ldrh	r3, [r7, #30]
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003448:	3304      	adds	r3, #4
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	edd3 7a00 	vldr	s15, [r3]
 8003452:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003456:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800345a:	edd7 7a06 	vldr	s15, [r7, #24]
 800345e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	dd6a      	ble.n	800353e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003468:	8bfb      	ldrh	r3, [r7, #30]
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	4413      	add	r3, r2
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd f880 	bl	8000578 <__aeabi_f2d>
 8003478:	a335      	add	r3, pc, #212	; (adr r3, 8003550 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800347a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347e:	f7fd f8d3 	bl	8000628 <__aeabi_dmul>
 8003482:	4603      	mov	r3, r0
 8003484:	460c      	mov	r4, r1
 8003486:	4625      	mov	r5, r4
 8003488:	461c      	mov	r4, r3
 800348a:	69b8      	ldr	r0, [r7, #24]
 800348c:	f7fd f874 	bl	8000578 <__aeabi_f2d>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	4620      	mov	r0, r4
 8003496:	4629      	mov	r1, r5
 8003498:	f7fd f9f0 	bl	800087c <__aeabi_ddiv>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	4618      	mov	r0, r3
 80034a2:	4621      	mov	r1, r4
 80034a4:	f7fd fbb8 	bl	8000c18 <__aeabi_d2f>
 80034a8:	4603      	mov	r3, r0
 80034aa:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80034ac:	edd7 6a06 	vldr	s13, [r7, #24]
 80034b0:	ed97 7a05 	vldr	s14, [r7, #20]
 80034b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034b8:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80034bc:	ed97 7a04 	vldr	s14, [r7, #16]
 80034c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034cc:	dd37      	ble.n	800353e <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034ce:	8bfb      	ldrh	r3, [r7, #30]
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034d6:	3304      	adds	r3, #4
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	4413      	add	r3, r2
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fd f84a 	bl	8000578 <__aeabi_f2d>
 80034e4:	4604      	mov	r4, r0
 80034e6:	460d      	mov	r5, r1
 80034e8:	8bfb      	ldrh	r3, [r7, #30]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	4413      	add	r3, r2
 80034f0:	ed93 7a00 	vldr	s14, [r3]
 80034f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fc:	ee17 0a90 	vmov	r0, s15
 8003500:	f7fd f83a 	bl	8000578 <__aeabi_f2d>
 8003504:	a312      	add	r3, pc, #72	; (adr r3, 8003550 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fd f88d 	bl	8000628 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4620      	mov	r0, r4
 8003514:	4629      	mov	r1, r5
 8003516:	f7fc fed1 	bl	80002bc <__adddf3>
 800351a:	4603      	mov	r3, r0
 800351c:	460c      	mov	r4, r1
 800351e:	4619      	mov	r1, r3
 8003520:	4622      	mov	r2, r4
 8003522:	8bfb      	ldrh	r3, [r7, #30]
 8003524:	1e5c      	subs	r4, r3, #1
 8003526:	4608      	mov	r0, r1
 8003528:	4611      	mov	r1, r2
 800352a:	f7fd fb75 	bl	8000c18 <__aeabi_d2f>
 800352e:	4601      	mov	r1, r0
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003536:	3304      	adds	r3, #4
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 800353e:	8bfb      	ldrh	r3, [r7, #30]
 8003540:	3b01      	subs	r3, #1
 8003542:	83fb      	strh	r3, [r7, #30]
 8003544:	e76e      	b.n	8003424 <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 8003546:	bf00      	nop
 8003548:	3720      	adds	r7, #32
 800354a:	46bd      	mov	sp, r7
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	bf00      	nop
 8003550:	d2f1a9fc 	.word	0xd2f1a9fc
 8003554:	3f50624d 	.word	0x3f50624d

08003558 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003558:	b5b0      	push	{r4, r5, r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	ed87 0a02 	vstr	s0, [r7, #8]
 8003564:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003566:	2300      	movs	r3, #0
 8003568:	83fb      	strh	r3, [r7, #30]
 800356a:	8bfb      	ldrh	r3, [r7, #30]
 800356c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003570:	4293      	cmp	r3, r2
 8003572:	f200 808d 	bhi.w	8003690 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 8003576:	8bfb      	ldrh	r3, [r7, #30]
 8003578:	3301      	adds	r3, #1
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003580:	3304      	adds	r3, #4
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	ed93 7a00 	vldr	s14, [r3]
 800358a:	8bfb      	ldrh	r3, [r7, #30]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003592:	3304      	adds	r3, #4
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	edd3 7a00 	vldr	s15, [r3]
 800359c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035a0:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80035a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80035a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035b0:	dd6a      	ble.n	8003688 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80035b2:	8bfb      	ldrh	r3, [r7, #30]
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fc ffdb 	bl	8000578 <__aeabi_f2d>
 80035c2:	a335      	add	r3, pc, #212	; (adr r3, 8003698 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80035c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c8:	f7fd f82e 	bl	8000628 <__aeabi_dmul>
 80035cc:	4603      	mov	r3, r0
 80035ce:	460c      	mov	r4, r1
 80035d0:	4625      	mov	r5, r4
 80035d2:	461c      	mov	r4, r3
 80035d4:	69b8      	ldr	r0, [r7, #24]
 80035d6:	f7fc ffcf 	bl	8000578 <__aeabi_f2d>
 80035da:	4602      	mov	r2, r0
 80035dc:	460b      	mov	r3, r1
 80035de:	4620      	mov	r0, r4
 80035e0:	4629      	mov	r1, r5
 80035e2:	f7fd f94b 	bl	800087c <__aeabi_ddiv>
 80035e6:	4603      	mov	r3, r0
 80035e8:	460c      	mov	r4, r1
 80035ea:	4618      	mov	r0, r3
 80035ec:	4621      	mov	r1, r4
 80035ee:	f7fd fb13 	bl	8000c18 <__aeabi_d2f>
 80035f2:	4603      	mov	r3, r0
 80035f4:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80035f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80035fa:	ed97 7a05 	vldr	s14, [r7, #20]
 80035fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003602:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003606:	ed97 7a04 	vldr	s14, [r7, #16]
 800360a:	edd7 7a02 	vldr	s15, [r7, #8]
 800360e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003616:	dd37      	ble.n	8003688 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003618:	8bfb      	ldrh	r3, [r7, #30]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003620:	3304      	adds	r3, #4
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fc ffa5 	bl	8000578 <__aeabi_f2d>
 800362e:	4604      	mov	r4, r0
 8003630:	460d      	mov	r5, r1
 8003632:	8bfb      	ldrh	r3, [r7, #30]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	4413      	add	r3, r2
 800363a:	ed93 7a00 	vldr	s14, [r3]
 800363e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003646:	ee17 0a90 	vmov	r0, s15
 800364a:	f7fc ff95 	bl	8000578 <__aeabi_f2d>
 800364e:	a312      	add	r3, pc, #72	; (adr r3, 8003698 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003654:	f7fc ffe8 	bl	8000628 <__aeabi_dmul>
 8003658:	4602      	mov	r2, r0
 800365a:	460b      	mov	r3, r1
 800365c:	4620      	mov	r0, r4
 800365e:	4629      	mov	r1, r5
 8003660:	f7fc fe2c 	bl	80002bc <__adddf3>
 8003664:	4603      	mov	r3, r0
 8003666:	460c      	mov	r4, r1
 8003668:	4619      	mov	r1, r3
 800366a:	4622      	mov	r2, r4
 800366c:	8bfb      	ldrh	r3, [r7, #30]
 800366e:	1c5c      	adds	r4, r3, #1
 8003670:	4608      	mov	r0, r1
 8003672:	4611      	mov	r1, r2
 8003674:	f7fd fad0 	bl	8000c18 <__aeabi_d2f>
 8003678:	4601      	mov	r1, r0
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003680:	3304      	adds	r3, #4
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003688:	8bfb      	ldrh	r3, [r7, #30]
 800368a:	3301      	adds	r3, #1
 800368c:	83fb      	strh	r3, [r7, #30]
 800368e:	e76c      	b.n	800356a <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003690:	bf00      	nop
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bdb0      	pop	{r4, r5, r7, pc}
 8003698:	d2f1a9fc 	.word	0xd2f1a9fc
 800369c:	3f50624d 	.word	0x3f50624d

080036a0 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b082      	sub	sp, #8
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	695b      	ldr	r3, [r3, #20]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fe f845 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b8:	3350      	adds	r3, #80	; 0x50
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036c4:	3352      	adds	r3, #82	; 0x52
 80036c6:	2200      	movs	r2, #0
 80036c8:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036d0:	330c      	adds	r3, #12
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ee:	3350      	adds	r3, #80	; 0x50
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036fa:	3352      	adds	r3, #82	; 0x52
 80036fc:	2200      	movs	r2, #0
 80036fe:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003706:	330c      	adds	r3, #12
 8003708:	f04f 0200 	mov.w	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 800371a:	b580      	push	{r7, lr}
 800371c:	b082      	sub	sp, #8
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003728:	3350      	adds	r3, #80	; 0x50
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d05e      	beq.n	80037ee <_ZN9LineTrace20updateTargetVelocityEv+0xd4>
		while(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
			velocity_table_idx_++;
		}
		*/
		if(encoder_->getTotalDistance() * DISTANCE_CORRECTION_CONST >= ref_distance_){
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	695b      	ldr	r3, [r3, #20]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fd ffd5 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800373a:	eeb0 7a40 	vmov.f32	s14, s0
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003744:	330c      	adds	r3, #12
 8003746:	edd3 7a00 	vldr	s15, [r3]
 800374a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800374e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003752:	bfac      	ite	ge
 8003754:	2301      	movge	r3, #1
 8003756:	2300      	movlt	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d025      	beq.n	80037aa <_ZN9LineTrace20updateTargetVelocityEv+0x90>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003764:	330c      	adds	r3, #12
 8003766:	ed93 7a00 	vldr	s14, [r3]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003770:	3352      	adds	r3, #82	; 0x52
 8003772:	881b      	ldrh	r3, [r3, #0]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	3332      	adds	r3, #50	; 0x32
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	3304      	adds	r3, #4
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800378c:	330c      	adds	r3, #12
 800378e:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003798:	3352      	adds	r3, #82	; 0x52
 800379a:	881b      	ldrh	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	b29a      	uxth	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037a6:	3352      	adds	r3, #82	; 0x52
 80037a8:	801a      	strh	r2, [r3, #0]
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037b0:	3352      	adds	r3, #82	; 0x52
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	f241 726f 	movw	r2, #5999	; 0x176f
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d906      	bls.n	80037ca <_ZN9LineTrace20updateTargetVelocityEv+0xb0>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037c2:	3352      	adds	r3, #82	; 0x52
 80037c4:	f241 726f 	movw	r2, #5999	; 0x176f
 80037c8:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037d0:	3352      	adds	r3, #82	; 0x52
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80037da:	3304      	adds	r3, #4
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	edd3 7a00 	vldr	s15, [r3]
 80037e4:	eeb0 0a67 	vmov.f32	s0, s15
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 fade 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
		mon_vel_idx = velocity_table_idx_;
		mon_tar_vel = velocity_table_[velocity_table_idx_];
		*/

	}
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003802:	2300      	movs	r3, #0
 8003804:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd ff5b 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003810:	eeb0 7a40 	vmov.f32	s14, s0
 8003814:	edd7 7a00 	vldr	s15, [r7]
 8003818:	eef4 7ac7 	vcmpe.f32	s15, s14
 800381c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003820:	bf94      	ite	ls
 8003822:	2301      	movls	r3, #1
 8003824:	2300      	movhi	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003830:	7bfb      	ldrb	r3, [r7, #15]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[3] + line_sensor_->sensor[4]) / 2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8003854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003858:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800385c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003860:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[9] + line_sensor_->sensor[10]) / 2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	ed93 7ab9 	vldr	s14, [r3, #740]	; 0x2e4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8003874:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003878:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800387c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003880:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003884:	4a44      	ldr	r2, [pc, #272]	; (8003998 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 800388a:	4a44      	ldr	r2, [pc, #272]	; (800399c <_ZN9LineTrace11isCrossLineEv+0x160>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8003890:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	f083 0301 	eor.w	r3, r3, #1
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d04d      	beq.n	800393a <_ZN9LineTrace11isCrossLineEv+0xfe>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800389e:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80039a4 <_ZN9LineTrace11isCrossLineEv+0x168>
 80038a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	d50f      	bpl.n	80038d0 <_ZN9LineTrace11isCrossLineEv+0x94>
 80038b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80038b4:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80039a4 <_ZN9LineTrace11isCrossLineEv+0x168>
 80038b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c0:	d506      	bpl.n	80038d0 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	4b37      	ldr	r3, [pc, #220]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038cc:	801a      	strh	r2, [r3, #0]
 80038ce:	e002      	b.n	80038d6 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 80038d0:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 1){
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d056      	beq.n	800398c <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = true;
 80038de:	4b33      	ldr	r3, [pc, #204]	; (80039ac <_ZN9LineTrace11isCrossLineEv+0x170>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80038e4:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 80038e6:	2201      	movs	r2, #1
 80038e8:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80038ea:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80038f6:	3324      	adds	r3, #36	; 0x24
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003902:	3354      	adds	r3, #84	; 0x54
 8003904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d109      	bne.n	8003920 <_ZN9LineTrace11isCrossLineEv+0xe4>
				store_check_cnt_ = 0;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003912:	333a      	adds	r3, #58	; 0x3a
 8003914:	2200      	movs	r2, #0
 8003916:	801a      	strh	r2, [r3, #0]
				storeCrossLineDistance();
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff faed 	bl	8002ef8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 800391e:	e035      	b.n	800398c <_ZN9LineTrace11isCrossLineEv+0x150>
			}
			else{
				store_check_cnt_ = 0;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003926:	333a      	adds	r3, #58	; 0x3a
 8003928:	2200      	movs	r2, #0
 800392a:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff fc19 	bl	8003164 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				storeCrossLineDistance2(); //for correction check
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fb16 	bl	8002f64 <_ZN9LineTrace23storeCrossLineDistance2Ev>
 8003938:	e028      	b.n	800398c <_ZN9LineTrace11isCrossLineEv+0x150>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 800393a:	edd7 7a03 	vldr	s15, [r7, #12]
 800393e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80039b0 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003942:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394a:	dd0f      	ble.n	800396c <_ZN9LineTrace11isCrossLineEv+0x130>
 800394c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003950:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80039b0 <_ZN9LineTrace11isCrossLineEv+0x174>
 8003954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	dd06      	ble.n	800396c <_ZN9LineTrace11isCrossLineEv+0x130>
			cnt++;
 800395e:	4b12      	ldr	r3, [pc, #72]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003968:	801a      	strh	r2, [r3, #0]
 800396a:	e002      	b.n	8003972 <_ZN9LineTrace11isCrossLineEv+0x136>
		}
		else{
			cnt = 0;
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800396e:	2200      	movs	r2, #0
 8003970:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8003972:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	2b09      	cmp	r3, #9
 8003978:	d908      	bls.n	800398c <_ZN9LineTrace11isCrossLineEv+0x150>
			flag = false;
 800397a:	4b0c      	ldr	r3, [pc, #48]	; (80039ac <_ZN9LineTrace11isCrossLineEv+0x170>)
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8003980:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003982:	2200      	movs	r2, #0
 8003984:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003988:	2200      	movs	r2, #0
 800398a:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <_ZN9LineTrace11isCrossLineEv+0x170>)
 800398e:	781b      	ldrb	r3, [r3, #0]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000264 	.word	0x20000264
 800399c:	20000268 	.word	0x20000268
 80039a0:	20000277 	.word	0x20000277
 80039a4:	44160000 	.word	0x44160000
 80039a8:	20000274 	.word	0x20000274
 80039ac:	20000276 	.word	0x20000276
 80039b0:	43fa0000 	.word	0x43fa0000

080039b4 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80039b4:	b590      	push	{r4, r7, lr}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80039bc:	2300      	movs	r3, #0
 80039be:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fe7e 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80039ca:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	4618      	mov	r0, r3
 80039d4:	f001 fc23 	bl	800521e <_ZN8Odometry8getThetaEv>
 80039d8:	ec54 3b10 	vmov	r3, r4, d0
 80039dc:	4618      	mov	r0, r3
 80039de:	4621      	mov	r1, r4
 80039e0:	f7fd f91a 	bl	8000c18 <__aeabi_d2f>
 80039e4:	4603      	mov	r3, r0
 80039e6:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80039e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80039ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d101      	bne.n	80039fa <_ZN9LineTrace8isStableEv+0x46>
 80039f6:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <_ZN9LineTrace8isStableEv+0xd0>)
 80039f8:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80039fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80039fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a02:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a06:	eeb0 0a66 	vmov.f32	s0, s13
 8003a0a:	f7fe ffef 	bl	80029ec <_ZSt3absf>
 8003a0e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a88 <_ZN9LineTrace8isStableEv+0xd4>
 8003a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	db01      	blt.n	8003a28 <_ZN9LineTrace8isStableEv+0x74>
 8003a24:	4b19      	ldr	r3, [pc, #100]	; (8003a8c <_ZN9LineTrace8isStableEv+0xd8>)
 8003a26:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a2e:	3324      	adds	r3, #36	; 0x24
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d008      	beq.n	8003a48 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003a36:	4b16      	ldr	r3, [pc, #88]	; (8003a90 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003a42:	3324      	adds	r3, #36	; 0x24
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a4c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003a94 <_ZN9LineTrace8isStableEv+0xe0>
 8003a50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a58:	db06      	blt.n	8003a68 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003a5a:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	3301      	adds	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e002      	b.n	8003a6e <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <_ZN9LineTrace8isStableEv+0xdc>)
 8003a70:	881b      	ldrh	r3, [r3, #0]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d901      	bls.n	8003a7a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003a76:	2301      	movs	r3, #1
 8003a78:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	371c      	adds	r7, #28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd90      	pop	{r4, r7, pc}
 8003a84:	3727c5ac 	.word	0x3727c5ac
 8003a88:	459c4000 	.word	0x459c4000
 8003a8c:	459c4000 	.word	0x459c4000
 8003a90:	20000278 	.word	0x20000278
 8003a94:	44fa0000 	.word	0x44fa0000

08003a98 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b092      	sub	sp, #72	; 0x48
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003aa0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	4963      	ldr	r1, [pc, #396]	; (8003c34 <_ZN9LineTrace4initEv+0x19c>)
 8003aa8:	4863      	ldr	r0, [pc, #396]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003aaa:	f7fd ff4d 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4961      	ldr	r1, [pc, #388]	; (8003c3c <_ZN9LineTrace4initEv+0x1a4>)
 8003ab6:	4860      	ldr	r0, [pc, #384]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003ab8:	f7fd ff46 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003abc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	495f      	ldr	r1, [pc, #380]	; (8003c40 <_ZN9LineTrace4initEv+0x1a8>)
 8003ac4:	485c      	ldr	r0, [pc, #368]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003ac6:	f7fd ff3f 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003aca:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ace:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003ad2:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8003ad6:	eeb0 1a66 	vmov.f32	s2, s13
 8003ada:	eef0 0a47 	vmov.f32	s1, s14
 8003ade:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8c6 	bl	8003c74 <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003ae8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003aec:	2201      	movs	r2, #1
 8003aee:	4955      	ldr	r1, [pc, #340]	; (8003c44 <_ZN9LineTrace4initEv+0x1ac>)
 8003af0:	4851      	ldr	r0, [pc, #324]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003af2:	f7fd ff29 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 8003af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003afa:	2201      	movs	r2, #1
 8003afc:	4952      	ldr	r1, [pc, #328]	; (8003c48 <_ZN9LineTrace4initEv+0x1b0>)
 8003afe:	484e      	ldr	r0, [pc, #312]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b00:	f7fd ff22 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 8003b04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4950      	ldr	r1, [pc, #320]	; (8003c4c <_ZN9LineTrace4initEv+0x1b4>)
 8003b0c:	484a      	ldr	r0, [pc, #296]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b0e:	f7fd ff1b 	bl	8001948 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 8003b12:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003b16:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003b1a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003b1e:	eeb0 1a66 	vmov.f32	s2, s13
 8003b22:	eef0 0a47 	vmov.f32	s1, s14
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f8e8 	bl	8003d00 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003b30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b34:	2201      	movs	r2, #1
 8003b36:	4946      	ldr	r1, [pc, #280]	; (8003c50 <_ZN9LineTrace4initEv+0x1b8>)
 8003b38:	483f      	ldr	r0, [pc, #252]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b3a:	f7fd ff05 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003b3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b42:	2201      	movs	r2, #1
 8003b44:	4943      	ldr	r1, [pc, #268]	; (8003c54 <_ZN9LineTrace4initEv+0x1bc>)
 8003b46:	483c      	ldr	r0, [pc, #240]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b48:	f7fd fefe 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b50:	2201      	movs	r2, #1
 8003b52:	4941      	ldr	r1, [pc, #260]	; (8003c58 <_ZN9LineTrace4initEv+0x1c0>)
 8003b54:	4838      	ldr	r0, [pc, #224]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b56:	f7fd fef7 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003b5a:	f107 0320 	add.w	r3, r7, #32
 8003b5e:	2201      	movs	r2, #1
 8003b60:	493e      	ldr	r1, [pc, #248]	; (8003c5c <_ZN9LineTrace4initEv+0x1c4>)
 8003b62:	4835      	ldr	r0, [pc, #212]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b64:	f7fd fef0 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003b68:	f107 031c 	add.w	r3, r7, #28
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	493c      	ldr	r1, [pc, #240]	; (8003c60 <_ZN9LineTrace4initEv+0x1c8>)
 8003b70:	4831      	ldr	r0, [pc, #196]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003b72:	f7fd fee9 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003b76:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f913 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003b84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b88:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f91c 	bl	8003dca <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003b92:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003b96:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f925 	bl	8003dea <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ba0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f92e 	bl	8003e0a <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003bae:	edd7 7a07 	vldr	s15, [r7, #28]
 8003bb2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f937 	bl	8003e2a <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003bbc:	f107 0318 	add.w	r3, r7, #24
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4928      	ldr	r1, [pc, #160]	; (8003c64 <_ZN9LineTrace4initEv+0x1cc>)
 8003bc4:	481c      	ldr	r0, [pc, #112]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003bc6:	f7fd febf 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003bca:	f107 0314 	add.w	r3, r7, #20
 8003bce:	2201      	movs	r2, #1
 8003bd0:	4925      	ldr	r1, [pc, #148]	; (8003c68 <_ZN9LineTrace4initEv+0x1d0>)
 8003bd2:	4819      	ldr	r0, [pc, #100]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003bd4:	f7fd feb8 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003bd8:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bdc:	ed97 7a05 	vldr	s14, [r7, #20]
 8003be0:	eef0 0a47 	vmov.f32	s1, s14
 8003be4:	eeb0 0a67 	vmov.f32	s0, s15
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 f97e 	bl	8003eea <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	f04f 0300 	mov.w	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003bfa:	f107 0310 	add.w	r3, r7, #16
 8003bfe:	2201      	movs	r2, #1
 8003c00:	491a      	ldr	r1, [pc, #104]	; (8003c6c <_ZN9LineTrace4initEv+0x1d4>)
 8003c02:	480d      	ldr	r0, [pc, #52]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003c04:	f7fd fea0 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003c08:	f107 030c 	add.w	r3, r7, #12
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	4918      	ldr	r1, [pc, #96]	; (8003c70 <_ZN9LineTrace4initEv+0x1d8>)
 8003c10:	4809      	ldr	r0, [pc, #36]	; (8003c38 <_ZN9LineTrace4initEv+0x1a0>)
 8003c12:	f7fd fe99 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c1e:	eef0 0a47 	vmov.f32	s1, s14
 8003c22:	eeb0 0a67 	vmov.f32	s0, s15
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f979 	bl	8003f1e <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003c2c:	bf00      	nop
 8003c2e:	3748      	adds	r7, #72	; 0x48
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08019d78 	.word	0x08019d78
 8003c38:	08019d80 	.word	0x08019d80
 8003c3c:	08019d88 	.word	0x08019d88
 8003c40:	08019d90 	.word	0x08019d90
 8003c44:	08019d98 	.word	0x08019d98
 8003c48:	08019da4 	.word	0x08019da4
 8003c4c:	08019db0 	.word	0x08019db0
 8003c50:	08019dbc 	.word	0x08019dbc
 8003c54:	08019dc8 	.word	0x08019dc8
 8003c58:	08019dd4 	.word	0x08019dd4
 8003c5c:	08019de0 	.word	0x08019de0
 8003c60:	08019dec 	.word	0x08019dec
 8003c64:	08019df8 	.word	0x08019df8
 8003c68:	08019e00 	.word	0x08019e00
 8003c6c:	08019e08 	.word	0x08019e08
 8003c70:	08019e14 	.word	0x08019e14

08003c74 <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c80:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c84:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return kp_;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	ee07 3a90 	vmov	s15, r3
}
 8003cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	return ki_;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	ee07 3a90 	vmov	s15, r3
}
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
	return kd_;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	ee07 3a90 	vmov	s15, r3
}
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d0c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d10:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	683a      	ldr	r2, [r7, #0]
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003d32:	b480      	push	{r7}
 8003d34:	b083      	sub	sp, #12
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3e:	ee07 3a90 	vmov	s15, r3
}
 8003d42:	eeb0 0a67 	vmov.f32	s0, s15
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5c:	ee07 3a90 	vmov	s15, r3
}
 8003d60:	eeb0 0a67 	vmov.f32	s0, s15
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	ee07 3a90 	vmov	s15, r3
}
 8003d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b083      	sub	sp, #12
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr

08003dea <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003dea:	b480      	push	{r7}
 8003dec:	b083      	sub	sp, #12
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003dfe:	bf00      	nop
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b083      	sub	sp, #12
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e58:	ee07 3a90 	vmov	s15, r3
}
 8003e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e78:	ee07 3a90 	vmov	s15, r3
}
 8003e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003e98:	ee07 3a90 	vmov	s15, r3
}
 8003e9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b083      	sub	sp, #12
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003eb8:	ee07 3a90 	vmov	s15, r3
}
 8003ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003ed8:	ee07 3a90 	vmov	s15, r3
}
 8003edc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b085      	sub	sp, #20
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ef6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f00:	3328      	adds	r3, #40	; 0x28
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f0c:	332c      	adds	r3, #44	; 0x2c
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f2a:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f34:	3330      	adds	r3, #48	; 0x30
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f40:	3334      	adds	r3, #52	; 0x34
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	601a      	str	r2, [r3, #0]
}
 8003f46:	bf00      	nop
 8003f48:	3714      	adds	r7, #20
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f60:	3328      	adds	r3, #40	; 0x28
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	ee07 3a90 	vmov	s15, r3
}
 8003f68:	eeb0 0a67 	vmov.f32	s0, s15
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003f84:	3334      	adds	r3, #52	; 0x34
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	ee07 3a90 	vmov	s15, r3
}
 8003f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fa8:	3330      	adds	r3, #48	; 0x30
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	ee07 3a90 	vmov	s15, r3
}
 8003fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8003fcc:	332c      	adds	r3, #44	; 0x2c
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	ee07 3a90 	vmov	s15, r3
}
 8003fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8120 	beq.w	8004238 <_ZN9LineTrace4flipEv+0x254>
		// ---- line following processing -----//
		pidTrace();
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fe fe71 	bl	8002ce0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7ff fb8b 	bl	800371a <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8004004:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 8004240 <_ZN9LineTrace4flipEv+0x25c>
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fbf4 	bl	80037f6 <_ZN9LineTrace16isTargetDistanceEf>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d028      	beq.n	8004066 <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff f84b 	bl	80030b0 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fcca 	bl	80039b4 <_ZN9LineTrace8isStableEv>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <_ZN9LineTrace4flipEv+0x5c>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	4618      	mov	r0, r3
 800402c:	f001 fbc2 	bl	80057b4 <_ZN10SideSensor10getStatusLEv>
 8004030:	4603      	mov	r3, r0
 8004032:	f083 0301 	eor.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <_ZN9LineTrace4flipEv+0x5c>
 800403c:	2301      	movs	r3, #1
 800403e:	e000      	b.n	8004042 <_ZN9LineTrace4flipEv+0x5e>
 8004040:	2300      	movs	r3, #0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800404c:	3323      	adds	r3, #35	; 0x23
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	695b      	ldr	r3, [r3, #20]
 8004056:	4618      	mov	r0, r3
 8004058:	f7fd fb62 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	4618      	mov	r0, r3
 8004062:	f001 f8ed 	bl	8005240 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800406c:	3323      	adds	r3, #35	; 0x23
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d009      	beq.n	8004088 <_ZN9LineTrace4flipEv+0xa4>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	4618      	mov	r0, r3
 800407a:	f001 fb9b 	bl	80057b4 <_ZN10SideSensor10getStatusLEv>
 800407e:	4603      	mov	r3, r0
 8004080:	2b00      	cmp	r3, #0
 8004082:	d001      	beq.n	8004088 <_ZN9LineTrace4flipEv+0xa4>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <_ZN9LineTrace4flipEv+0xa6>
 8004088:	2300      	movs	r3, #0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d029      	beq.n	80040e2 <_ZN9LineTrace4flipEv+0xfe>
			//correction_check_cnt_ = 0;

			if(mode_selector_ == FIRST_RUNNING){
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004094:	3354      	adds	r3, #84	; 0x54
 8004096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <_ZN9LineTrace4flipEv+0xce>
				store_check_cnt_ = 0;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040a4:	333a      	adds	r3, #58	; 0x3a
 80040a6:	2200      	movs	r2, #0
 80040a8:	801a      	strh	r2, [r3, #0]
				storeSideLineDistance();
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f7fe ff90 	bl	8002fd0 <_ZN9LineTrace21storeSideLineDistanceEv>
 80040b0:	e00b      	b.n	80040ca <_ZN9LineTrace4flipEv+0xe6>
			}
			else{
				store_check_cnt_ = 0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040b8:	333a      	adds	r3, #58	; 0x3a
 80040ba:	2200      	movs	r2, #0
 80040bc:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromSideMarker();
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff f8aa 	bl	8003218 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				storeSideLineDistance2(); //for correction check
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f7fe ffbb 	bl	8003040 <_ZN9LineTrace22storeSideLineDistance2Ev>
			}

			stable_flag_ = false;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040d0:	3323      	adds	r3, #35	; 0x23
 80040d2:	2200      	movs	r2, #0
 80040d4:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80040dc:	3324      	adds	r3, #36	; 0x24
 80040de:	2201      	movs	r2, #1
 80040e0:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7ff fbaa 	bl	800383c <_ZN9LineTrace11isCrossLineEv>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <_ZN9LineTrace4flipEv+0x11e>
			side_sensor_->enableIgnore();
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f001 fb86 	bl	8005804 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7fd fb3a 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
			//led_.LR(1, -1);
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	4618      	mov	r0, r3
 8004108:	f001 fb96 	bl	8005838 <_ZN10SideSensor13getIgnoreFlagEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00f      	beq.n	8004132 <_ZN9LineTrace4flipEv+0x14e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd fb1e 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 800411c:	eeb0 7a40 	vmov.f32	s14, s0
 8004120:	eddf 7a48 	vldr	s15, [pc, #288]	; 8004244 <_ZN9LineTrace4flipEv+0x260>
 8004124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	db01      	blt.n	8004132 <_ZN9LineTrace4flipEv+0x14e>
 800412e:	2301      	movs	r3, #1
 8004130:	e000      	b.n	8004134 <_ZN9LineTrace4flipEv+0x150>
 8004132:	2300      	movs	r3, #0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d004      	beq.n	8004142 <_ZN9LineTrace4flipEv+0x15e>
			side_sensor_->disableIgnore();
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4618      	mov	r0, r3
 800413e:	f001 fb6e 	bl	800581e <_ZN10SideSensor13disableIgnoreEv>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fc00 	bl	800294c <_ZN10LineSensor13emergencyStopEv>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00d      	beq.n	800416e <_ZN9LineTrace4flipEv+0x18a>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8004248 <_ZN9LineTrace4flipEv+0x264>
 800415a:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8004248 <_ZN9LineTrace4flipEv+0x264>
 800415e:	4618      	mov	r0, r3
 8004160:	f001 fe86 	bl	8005e70 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	4618      	mov	r0, r3
 800416a:	f7fd f90b 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004174:	3338      	adds	r3, #56	; 0x38
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	3301      	adds	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004182:	3338      	adds	r3, #56	; 0x38
 8004184:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800418c:	3338      	adds	r3, #56	; 0x38
 800418e:	881b      	ldrh	r3, [r3, #0]
 8004190:	f242 720f 	movw	r2, #9999	; 0x270f
 8004194:	4293      	cmp	r3, r2
 8004196:	d906      	bls.n	80041a6 <_ZN9LineTrace4flipEv+0x1c2>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800419e:	3338      	adds	r3, #56	; 0x38
 80041a0:	f242 7210 	movw	r2, #10000	; 0x2710
 80041a4:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 300) led_.fullColor('R');
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ac:	3338      	adds	r3, #56	; 0x38
 80041ae:	881b      	ldrh	r3, [r3, #0]
 80041b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80041b4:	d806      	bhi.n	80041c4 <_ZN9LineTrace4flipEv+0x1e0>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	330c      	adds	r3, #12
 80041ba:	2152      	movs	r1, #82	; 0x52
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd ffe9 	bl	8002194 <_ZN3LED9fullColorEc>
 80041c2:	e005      	b.n	80041d0 <_ZN9LineTrace4flipEv+0x1ec>
		else led_.fullColor('B');
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	330c      	adds	r3, #12
 80041c8:	2142      	movs	r1, #66	; 0x42
 80041ca:	4618      	mov	r0, r3
 80041cc:	f7fd ffe2 	bl	8002194 <_ZN3LED9fullColorEc>

		store_check_cnt_++;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041d6:	333a      	adds	r3, #58	; 0x3a
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	3301      	adds	r3, #1
 80041dc:	b29a      	uxth	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041e4:	333a      	adds	r3, #58	; 0x3a
 80041e6:	801a      	strh	r2, [r3, #0]
		if(store_check_cnt_>= 10000) store_check_cnt_ = 10000;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80041ee:	333a      	adds	r3, #58	; 0x3a
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d906      	bls.n	8004208 <_ZN9LineTrace4flipEv+0x224>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004200:	333a      	adds	r3, #58	; 0x3a
 8004202:	f242 7210 	movw	r2, #10000	; 0x2710
 8004206:	801a      	strh	r2, [r3, #0]

		if(store_check_cnt_ <= 200) led_.LR(1, -1);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800420e:	333a      	adds	r3, #58	; 0x3a
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	2bc8      	cmp	r3, #200	; 0xc8
 8004214:	d808      	bhi.n	8004228 <_ZN9LineTrace4flipEv+0x244>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	330c      	adds	r3, #12
 800421a:	f04f 32ff 	mov.w	r2, #4294967295
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe f873 	bl	800230c <_ZN3LED2LREaa>
		else led_.LR(0, -1);
	}
}
 8004226:	e007      	b.n	8004238 <_ZN9LineTrace4flipEv+0x254>
		else led_.LR(0, -1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	330c      	adds	r3, #12
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	2100      	movs	r1, #0
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe f86a 	bl	800230c <_ZN3LED2LREaa>
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	42480000 	.word	0x42480000
 8004244:	428c0000 	.word	0x428c0000
 8004248:	00000000 	.word	0x00000000

0800424c <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800425e:	3354      	adds	r3, #84	; 0x54
 8004260:	887a      	ldrh	r2, [r7, #2]
 8004262:	801a      	strh	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	4618      	mov	r0, r3
 800428e:	f001 fe48 	bl	8005f22 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4618      	mov	r0, r3
 8004298:	f001 faa4 	bl	80057e4 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042a2:	3318      	adds	r3, #24
 80042a4:	2200      	movs	r2, #0
 80042a6:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042ae:	331c      	adds	r3, #28
 80042b0:	2200      	movs	r2, #0
 80042b2:	801a      	strh	r2, [r3, #0]
	sideline_idx2_ = 0;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042ba:	331e      	adds	r3, #30
 80042bc:	2200      	movs	r2, #0
 80042be:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80042c6:	3320      	adds	r3, #32
 80042c8:	2200      	movs	r2, #0
 80042ca:	801a      	strh	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3708      	adds	r7, #8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80042dc:	2300      	movs	r3, #0
 80042de:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80042e0:	2300      	movs	r3, #0
 80042e2:	737b      	strb	r3, [r7, #13]
	start();
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ffc3 	bl	8004270 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80042ea:	7b7b      	ldrb	r3, [r7, #13]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d161      	bne.n	80043b4 <_ZN9LineTrace7runningEv+0xe0>
		switch(stage){
 80042f0:	89fb      	ldrh	r3, [r7, #14]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <_ZN9LineTrace7runningEv+0x28>
 80042f6:	2b0a      	cmp	r3, #10
 80042f8:	d030      	beq.n	800435c <_ZN9LineTrace7runningEv+0x88>
 80042fa:	e05a      	b.n	80043b2 <_ZN9LineTrace7runningEv+0xde>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	4618      	mov	r0, r3
 8004302:	f001 fa63 	bl	80057cc <_ZN10SideSensor16getWhiteLineCntREv>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	bf0c      	ite	eq
 800430c:	2301      	moveq	r3, #1
 800430e:	2300      	movne	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	d04a      	beq.n	80043ac <_ZN9LineTrace7runningEv+0xd8>
				loggerStart();
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7fe fdc2 	bl	8002ea0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004322:	3354      	adds	r3, #84	; 0x54
 8004324:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7ff f9b7 	bl	80036a0 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4618      	mov	r0, r3
 8004338:	f7fd fa1d 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	4618      	mov	r0, r3
 8004342:	f7fd f9fb 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	330c      	adds	r3, #12
 800434a:	f04f 32ff 	mov.w	r2, #4294967295
 800434e:	2100      	movs	r1, #0
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd ffdb 	bl	800230c <_ZN3LED2LREaa>
				stage = 10;
 8004356:	230a      	movs	r3, #10
 8004358:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800435a:	e027      	b.n	80043ac <_ZN9LineTrace7runningEv+0xd8>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	4618      	mov	r0, r3
 8004362:	f001 fa33 	bl	80057cc <_ZN10SideSensor16getWhiteLineCntREv>
 8004366:	4603      	mov	r3, r0
 8004368:	2b02      	cmp	r3, #2
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01c      	beq.n	80043b0 <_ZN9LineTrace7runningEv+0xdc>
				led_.fullColor('M');
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	330c      	adds	r3, #12
 800437a:	214d      	movs	r1, #77	; 0x4d
 800437c:	4618      	mov	r0, r3
 800437e:	f7fd ff09 	bl	8002194 <_ZN3LED9fullColorEc>
				loggerStop();
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fe fda7 	bl	8002ed6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7ff f9a9 	bl	80036e0 <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800438e:	2064      	movs	r0, #100	; 0x64
 8004390:	f005 fd52 	bl	8009e38 <HAL_Delay>

				setTargetVelocity(0);
 8004394:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80043c4 <_ZN9LineTrace7runningEv+0xf0>
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff fd06 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800439e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80043a2:	f005 fd49 	bl	8009e38 <HAL_Delay>

				goal_flag = true;
 80043a6:	2301      	movs	r3, #1
 80043a8:	737b      	strb	r3, [r7, #13]

			}

			break;
 80043aa:	e001      	b.n	80043b0 <_ZN9LineTrace7runningEv+0xdc>
			break;
 80043ac:	bf00      	nop
 80043ae:	e79c      	b.n	80042ea <_ZN9LineTrace7runningEv+0x16>
			break;
 80043b0:	bf00      	nop
	while(goal_flag == false){
 80043b2:	e79a      	b.n	80042ea <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f807 	bl	80043c8 <_ZN9LineTrace4stopEv>
}
 80043ba:	bf00      	nop
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	00000000 	.word	0x00000000

080043c8 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	4618      	mov	r0, r3
 80043de:	f001 fdb3 	bl	8005f48 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	330c      	adds	r3, #12
 80043e6:	2201      	movs	r2, #1
 80043e8:	f04f 31ff 	mov.w	r1, #4294967295
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fd ff8d 	bl	800230c <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043f8:	3354      	adds	r3, #84	; 0x54
 80043fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d11e      	bne.n	8004440 <_ZN9LineTrace4stopEv+0x78>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	69d8      	ldr	r0, [r3, #28]
 8004406:	4b28      	ldr	r3, [pc, #160]	; (80044a8 <_ZN9LineTrace4stopEv+0xe0>)
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <_ZN9LineTrace4stopEv+0xe4>)
 800440a:	4929      	ldr	r1, [pc, #164]	; (80044b0 <_ZN9LineTrace4stopEv+0xe8>)
 800440c:	f000 fbd0 	bl	8004bb0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004416:	3358      	adds	r3, #88	; 0x58
 8004418:	2200      	movs	r2, #0
 800441a:	9200      	str	r2, [sp, #0]
 800441c:	2264      	movs	r2, #100	; 0x64
 800441e:	4925      	ldr	r1, [pc, #148]	; (80044b4 <_ZN9LineTrace4stopEv+0xec>)
 8004420:	4823      	ldr	r0, [pc, #140]	; (80044b0 <_ZN9LineTrace4stopEv+0xe8>)
 8004422:	f7fd fa2b 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 800442c:	3378      	adds	r3, #120	; 0x78
 800442e:	2200      	movs	r2, #0
 8004430:	9200      	str	r2, [sp, #0]
 8004432:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004436:	4920      	ldr	r1, [pc, #128]	; (80044b8 <_ZN9LineTrace4stopEv+0xf0>)
 8004438:	481d      	ldr	r0, [pc, #116]	; (80044b0 <_ZN9LineTrace4stopEv+0xe8>)
 800443a:	f7fd fa1f 	bl	800187c <sd_write_array_float>
 800443e:	e01d      	b.n	800447c <_ZN9LineTrace4stopEv+0xb4>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	69d8      	ldr	r0, [r3, #28]
 8004444:	4b1d      	ldr	r3, [pc, #116]	; (80044bc <_ZN9LineTrace4stopEv+0xf4>)
 8004446:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <_ZN9LineTrace4stopEv+0xf8>)
 8004448:	4919      	ldr	r1, [pc, #100]	; (80044b0 <_ZN9LineTrace4stopEv+0xe8>)
 800444a:	f000 fbd4 	bl	8004bf6 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
		sd_write_array_float("COURSLOG", "CROSSDI2.TXT", CROSSLINE_SIZE, crossline_distance2_, OVER_WRITE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004454:	33e8      	adds	r3, #232	; 0xe8
 8004456:	2200      	movs	r2, #0
 8004458:	9200      	str	r2, [sp, #0]
 800445a:	2264      	movs	r2, #100	; 0x64
 800445c:	4919      	ldr	r1, [pc, #100]	; (80044c4 <_ZN9LineTrace4stopEv+0xfc>)
 800445e:	4814      	ldr	r0, [pc, #80]	; (80044b0 <_ZN9LineTrace4stopEv+0xe8>)
 8004460:	f7fd fa0c 	bl	800187c <sd_write_array_float>
		sd_write_array_float("COURSLOG", "SIDEDIS2.TXT", SIDELINE_SIZE, sideline_distance2_, OVER_WRITE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f503 4347 	add.w	r3, r3, #50944	; 0xc700
 800446a:	3348      	adds	r3, #72	; 0x48
 800446c:	2200      	movs	r2, #0
 800446e:	9200      	str	r2, [sp, #0]
 8004470:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004474:	4914      	ldr	r1, [pc, #80]	; (80044c8 <_ZN9LineTrace4stopEv+0x100>)
 8004476:	480e      	ldr	r0, [pc, #56]	; (80044b0 <_ZN9LineTrace4stopEv+0xe8>)
 8004478:	f7fd fa00 	bl	800187c <sd_write_array_float>
	}
	//sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);

	led_.LR(-1, 0);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	330c      	adds	r3, #12
 8004480:	2200      	movs	r2, #0
 8004482:	f04f 31ff 	mov.w	r1, #4294967295
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd ff40 	bl	800230c <_ZN3LED2LREaa>

	logger_->resetIdx();
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4618      	mov	r0, r3
 8004492:	f000 fc46 	bl	8004d22 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fbef 	bl	8004c7e <_ZN6Logger10resetLogs2Ev>
}
 80044a0:	bf00      	nop
 80044a2:	3708      	adds	r7, #8
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	08019e20 	.word	0x08019e20
 80044ac:	08019e2c 	.word	0x08019e2c
 80044b0:	08019e3c 	.word	0x08019e3c
 80044b4:	08019e48 	.word	0x08019e48
 80044b8:	08019e58 	.word	0x08019e58
 80044bc:	08019e64 	.word	0x08019e64
 80044c0:	08019e70 	.word	0x08019e70
 80044c4:	08019e80 	.word	0x08019e80
 80044c8:	08019e90 	.word	0x08019e90

080044cc <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 80044cc:	b590      	push	{r4, r7, lr}
 80044ce:	b08b      	sub	sp, #44	; 0x2c
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 fb23 	bl	8004b24 <_ZN6Logger23getDistanceArrayPointerEv>
 80044de:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f000 fb2b 	bl	8004b40 <_ZN6Logger20getThetaArrayPointerEv>
 80044ea:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80044ec:	2300      	movs	r3, #0
 80044ee:	837b      	strh	r3, [r7, #26]
 80044f0:	8b7b      	ldrh	r3, [r7, #26]
 80044f2:	f241 726f 	movw	r2, #5999	; 0x176f
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d84b      	bhi.n	8004592 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80044fa:	8b7b      	ldrh	r3, [r7, #26]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4413      	add	r3, r2
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004506:	8b7b      	ldrh	r3, [r7, #26]
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004512:	edd7 7a07 	vldr	s15, [r7, #28]
 8004516:	eef5 7a40 	vcmp.f32	s15, #0.0
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	d101      	bne.n	8004524 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004520:	4b4c      	ldr	r3, [pc, #304]	; (8004654 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004522:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004524:	ed97 7a02 	vldr	s14, [r7, #8]
 8004528:	edd7 7a07 	vldr	s15, [r7, #28]
 800452c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004530:	eeb0 0a66 	vmov.f32	s0, s13
 8004534:	f7fe fa5a 	bl	80029ec <_ZSt3absf>
 8004538:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 800453c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004540:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004658 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	db01      	blt.n	8004552 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800454e:	4b43      	ldr	r3, [pc, #268]	; (800465c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004550:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004552:	8b7c      	ldrh	r4, [r7, #26]
 8004554:	ed97 0a05 	vldr	s0, [r7, #20]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7fe febb 	bl	80032d4 <_ZN9LineTrace15radius2VelocityEf>
 800455e:	eef0 7a40 	vmov.f32	s15, s0
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004568:	3304      	adds	r3, #4
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	4413      	add	r3, r2
 800456e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004572:	8b7b      	ldrh	r3, [r7, #26]
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	441a      	add	r2, r3
 800457a:	8b7b      	ldrh	r3, [r7, #26]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	6879      	ldr	r1, [r7, #4]
 8004580:	3332      	adds	r3, #50	; 0x32
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	440b      	add	r3, r1
 8004586:	3304      	adds	r3, #4
 8004588:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800458a:	8b7b      	ldrh	r3, [r7, #26]
 800458c:	3301      	adds	r3, #1
 800458e:	837b      	strh	r3, [r7, #26]
 8004590:	e7ae      	b.n	80044f0 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004598:	3354      	adds	r3, #84	; 0x54
 800459a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d120      	bne.n	80045e4 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045ae:	3310      	adds	r3, #16
 80045b0:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045b8:	332c      	adds	r3, #44	; 0x2c
 80045ba:	edd3 7a00 	vldr	s15, [r3]
 80045be:	6939      	ldr	r1, [r7, #16]
 80045c0:	eeb0 0a67 	vmov.f32	s0, s15
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fe ff23 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80045d0:	3328      	adds	r3, #40	; 0x28
 80045d2:	edd3 7a00 	vldr	s15, [r3]
 80045d6:	6939      	ldr	r1, [r7, #16]
 80045d8:	eeb0 0a67 	vmov.f32	s0, s15
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fe ffbb 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80045e2:	e027      	b.n	8004634 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045ea:	3354      	adds	r3, #84	; 0x54
 80045ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d11f      	bne.n	8004634 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004600:	3310      	adds	r3, #16
 8004602:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 800460a:	3334      	adds	r3, #52	; 0x34
 800460c:	edd3 7a00 	vldr	s15, [r3]
 8004610:	6939      	ldr	r1, [r7, #16]
 8004612:	eeb0 0a67 	vmov.f32	s0, s15
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f7fe fefa 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004622:	3330      	adds	r3, #48	; 0x30
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	6939      	ldr	r1, [r7, #16]
 800462a:	eeb0 0a67 	vmov.f32	s0, s15
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe ff92 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800463a:	3310      	adds	r3, #16
 800463c:	2200      	movs	r2, #0
 800463e:	9200      	str	r2, [sp, #0]
 8004640:	f241 7270 	movw	r2, #6000	; 0x1770
 8004644:	4906      	ldr	r1, [pc, #24]	; (8004660 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004646:	4807      	ldr	r0, [pc, #28]	; (8004664 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004648:	f7fd f918 	bl	800187c <sd_write_array_float>

}
 800464c:	bf00      	nop
 800464e:	3724      	adds	r7, #36	; 0x24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd90      	pop	{r4, r7, pc}
 8004654:	3727c5ac 	.word	0x3727c5ac
 8004658:	459c4000 	.word	0x459c4000
 800465c:	459c4000 	.word	0x459c4000
 8004660:	08019ea0 	.word	0x08019ea0
 8004664:	08019e3c 	.word	0x08019e3c

08004668 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004668:	b590      	push	{r4, r7, lr}
 800466a:	b08b      	sub	sp, #44	; 0x2c
 800466c:	af02      	add	r7, sp, #8
 800466e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	69d8      	ldr	r0, [r3, #28]
 8004674:	4b6b      	ldr	r3, [pc, #428]	; (8004824 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004676:	4a6c      	ldr	r2, [pc, #432]	; (8004828 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004678:	496c      	ldr	r1, [pc, #432]	; (800482c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800467a:	f000 fae1 	bl	8004c40 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004684:	3358      	adds	r3, #88	; 0x58
 8004686:	2264      	movs	r2, #100	; 0x64
 8004688:	4969      	ldr	r1, [pc, #420]	; (8004830 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800468a:	4868      	ldr	r0, [pc, #416]	; (800482c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800468c:	f7fd f95c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 433f 	add.w	r3, r3, #48896	; 0xbf00
 8004696:	3378      	adds	r3, #120	; 0x78
 8004698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800469c:	4965      	ldr	r1, [pc, #404]	; (8004834 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800469e:	4863      	ldr	r0, [pc, #396]	; (800482c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80046a0:	f7fd f952 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69db      	ldr	r3, [r3, #28]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 fa3b 	bl	8004b24 <_ZN6Logger23getDistanceArrayPointerEv>
 80046ae:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fa43 	bl	8004b40 <_ZN6Logger20getThetaArrayPointerEv>
 80046ba:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80046bc:	2300      	movs	r3, #0
 80046be:	837b      	strh	r3, [r7, #26]
 80046c0:	8b7b      	ldrh	r3, [r7, #26]
 80046c2:	f241 726f 	movw	r2, #5999	; 0x176f
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d84b      	bhi.n	8004762 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 80046ca:	8b7b      	ldrh	r3, [r7, #26]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	4413      	add	r3, r2
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80046d6:	8b7b      	ldrh	r3, [r7, #26]
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80046e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80046e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	d101      	bne.n	80046f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80046f0:	4b51      	ldr	r3, [pc, #324]	; (8004838 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80046f2:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80046f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80046f8:	edd7 7a07 	vldr	s15, [r7, #28]
 80046fc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004700:	eeb0 0a66 	vmov.f32	s0, s13
 8004704:	f7fe f972 	bl	80029ec <_ZSt3absf>
 8004708:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 800470c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004710:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800483c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004714:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471c:	db01      	blt.n	8004722 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 800471e:	4b48      	ldr	r3, [pc, #288]	; (8004840 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004720:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004722:	8b7c      	ldrh	r4, [r7, #26]
 8004724:	ed97 0a05 	vldr	s0, [r7, #20]
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7fe fdd3 	bl	80032d4 <_ZN9LineTrace15radius2VelocityEf>
 800472e:	eef0 7a40 	vmov.f32	s15, s0
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004738:	3304      	adds	r3, #4
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004742:	8b7b      	ldrh	r3, [r7, #26]
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	693a      	ldr	r2, [r7, #16]
 8004748:	441a      	add	r2, r3
 800474a:	8b7b      	ldrh	r3, [r7, #26]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	6879      	ldr	r1, [r7, #4]
 8004750:	3332      	adds	r3, #50	; 0x32
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	3304      	adds	r3, #4
 8004758:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800475a:	8b7b      	ldrh	r3, [r7, #26]
 800475c:	3301      	adds	r3, #1
 800475e:	837b      	strh	r3, [r7, #26]
 8004760:	e7ae      	b.n	80046c0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004768:	3354      	adds	r3, #84	; 0x54
 800476a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d120      	bne.n	80047b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800477e:	3310      	adds	r3, #16
 8004780:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 8004788:	332c      	adds	r3, #44	; 0x2c
 800478a:	edd3 7a00 	vldr	s15, [r3]
 800478e:	6939      	ldr	r1, [r7, #16]
 8004790:	eeb0 0a67 	vmov.f32	s0, s15
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f7fe fe3b 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047a0:	3328      	adds	r3, #40	; 0x28
 80047a2:	edd3 7a00 	vldr	s15, [r3]
 80047a6:	6939      	ldr	r1, [r7, #16]
 80047a8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7fe fed3 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80047b2:	e027      	b.n	8004804 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80047ba:	3354      	adds	r3, #84	; 0x54
 80047bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d11f      	bne.n	8004804 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80047d0:	3310      	adds	r3, #16
 80047d2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047da:	3334      	adds	r3, #52	; 0x34
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	6939      	ldr	r1, [r7, #16]
 80047e2:	eeb0 0a67 	vmov.f32	s0, s15
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7fe fe12 	bl	8003410 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 434f 	add.w	r3, r3, #52992	; 0xcf00
 80047f2:	3330      	adds	r3, #48	; 0x30
 80047f4:	edd3 7a00 	vldr	s15, [r3]
 80047f8:	6939      	ldr	r1, [r7, #16]
 80047fa:	eeb0 0a67 	vmov.f32	s0, s15
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fe feaa 	bl	8003558 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800480a:	3310      	adds	r3, #16
 800480c:	2200      	movs	r2, #0
 800480e:	9200      	str	r2, [sp, #0]
 8004810:	f241 7270 	movw	r2, #6000	; 0x1770
 8004814:	490b      	ldr	r1, [pc, #44]	; (8004844 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004816:	4805      	ldr	r0, [pc, #20]	; (800482c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004818:	f7fd f830 	bl	800187c <sd_write_array_float>

}
 800481c:	bf00      	nop
 800481e:	3724      	adds	r7, #36	; 0x24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd90      	pop	{r4, r7, pc}
 8004824:	08019e20 	.word	0x08019e20
 8004828:	08019e2c 	.word	0x08019e2c
 800482c:	08019e3c 	.word	0x08019e3c
 8004830:	08019e48 	.word	0x08019e48
 8004834:	08019e58 	.word	0x08019e58
 8004838:	3727c5ac 	.word	0x3727c5ac
 800483c:	459c4000 	.word	0x459c4000
 8004840:	459c4000 	.word	0x459c4000
 8004844:	08019ea0 	.word	0x08019ea0

08004848 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004856:	33c0      	adds	r3, #192	; 0xc0
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004862:	33c2      	adds	r3, #194	; 0xc2
 8004864:	2200      	movs	r2, #0
 8004866:	801a      	strh	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800486e:	33c4      	adds	r3, #196	; 0xc4
 8004870:	2200      	movs	r2, #0
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800487a:	33c6      	adds	r3, #198	; 0xc6
 800487c:	2200      	movs	r2, #0
 800487e:	801a      	strh	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004886:	33c8      	adds	r3, #200	; 0xc8
 8004888:	2200      	movs	r2, #0
 800488a:	801a      	strh	r2, [r3, #0]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004892:	33ca      	adds	r3, #202	; 0xca
 8004894:	2200      	movs	r2, #0
 8004896:	801a      	strh	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80048b0:	2300      	movs	r3, #0
 80048b2:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 80048b4:	f7fd f8d4 	bl	8001a60 <sd_mount>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d016      	beq.n	80048f6 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 80048c8:	f7fc fbea 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80048cc:	2100      	movs	r1, #0
 80048ce:	2000      	movs	r0, #0
 80048d0:	f7fc fbf6 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80048d4:	4815      	ldr	r0, [pc, #84]	; (800492c <_ZN6Logger10sdCardInitEv+0x84>)
 80048d6:	f7fc fc1d 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80048da:	2101      	movs	r1, #1
 80048dc:	2000      	movs	r0, #0
 80048de:	f7fc fbef 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80048e2:	4813      	ldr	r0, [pc, #76]	; (8004930 <_ZN6Logger10sdCardInitEv+0x88>)
 80048e4:	f7fc fc16 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80048e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048ec:	f005 faa4 	bl	8009e38 <HAL_Delay>

	  ret = true;
 80048f0:	2301      	movs	r3, #1
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e015      	b.n	8004922 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80048f6:	f7fc fbd3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80048fa:	2100      	movs	r1, #0
 80048fc:	2000      	movs	r0, #0
 80048fe:	f7fc fbdf 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004902:	480a      	ldr	r0, [pc, #40]	; (800492c <_ZN6Logger10sdCardInitEv+0x84>)
 8004904:	f7fc fc06 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004908:	2101      	movs	r1, #1
 800490a:	2000      	movs	r0, #0
 800490c:	f7fc fbd8 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004910:	4808      	ldr	r0, [pc, #32]	; (8004934 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004912:	f7fc fbff 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8004916:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800491a:	f005 fa8d 	bl	8009e38 <HAL_Delay>

	  ret = false;
 800491e:	2300      	movs	r3, #0
 8004920:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	08019eb0 	.word	0x08019eb0
 8004930:	08019ebc 	.word	0x08019ebc
 8004934:	08019ec4 	.word	0x08019ec4

08004938 <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800494a:	33c0      	adds	r3, #192	; 0xc0
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d023      	beq.n	800499a <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004958:	33c2      	adds	r3, #194	; 0xc2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800496c:	33c2      	adds	r3, #194	; 0xc2
 800496e:	881b      	ldrh	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800497a:	33c2      	adds	r3, #194	; 0xc2
 800497c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004984:	33c2      	adds	r3, #194	; 0xc2
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800498c:	d305      	bcc.n	800499a <_ZN6Logger8storeLogEf+0x62>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004994:	33c2      	adds	r3, #194	; 0xc2
 8004996:	2200      	movs	r2, #0
 8004998:	801a      	strh	r2, [r3, #0]
	}
}
 800499a:	bf00      	nop
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
 80049ae:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049b8:	33c0      	adds	r3, #192	; 0xc0
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d025      	beq.n	8004a0c <_ZN6Logger9storeLog2Ef+0x66>
		store_data_float2_[log_index_tim2_] = data;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049c6:	33c4      	adds	r3, #196	; 0xc4
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049de:	33c4      	adds	r3, #196	; 0xc4
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	3301      	adds	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ec:	33c4      	adds	r3, #196	; 0xc4
 80049ee:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049f6:	33c4      	adds	r3, #196	; 0xc4
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80049fe:	d305      	bcc.n	8004a0c <_ZN6Logger9storeLog2Ef+0x66>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a06:	33c4      	adds	r3, #196	; 0xc4
 8004a08:	2200      	movs	r2, #0
 8004a0a:	801a      	strh	r2, [r3, #0]
	}
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <_ZN6Logger21storeDistanceAndThetaEff>:
	}

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a24:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a2e:	33ca      	adds	r3, #202	; 0xca
 8004a30:	881b      	ldrh	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004a38:	3310      	adds	r3, #16
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a48:	33ca      	adds	r3, #202	; 0xca
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004a52:	3320      	adds	r3, #32
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a62:	33ca      	adds	r3, #202	; 0xca
 8004a64:	881b      	ldrh	r3, [r3, #0]
 8004a66:	3301      	adds	r3, #1
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a70:	33ca      	adds	r3, #202	; 0xca
 8004a72:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a7a:	33ca      	adds	r3, #202	; 0xca
 8004a7c:	881b      	ldrh	r3, [r3, #0]
 8004a7e:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d905      	bls.n	8004a92 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a8c:	33ca      	adds	r3, #202	; 0xca
 8004a8e:	2200      	movs	r2, #0
 8004a90:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	ed87 0a02 	vstr	s0, [r7, #8]
 8004aaa:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ab4:	33ca      	adds	r3, #202	; 0xca
 8004ab6:	881b      	ldrh	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004abe:	3350      	adds	r3, #80	; 0x50
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ace:	33ca      	adds	r3, #202	; 0xca
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ad8:	3340      	adds	r3, #64	; 0x40
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ae8:	33ca      	adds	r3, #202	; 0xca
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	3301      	adds	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004af6:	33ca      	adds	r3, #202	; 0xca
 8004af8:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b00:	33ca      	adds	r3, #202	; 0xca
 8004b02:	881b      	ldrh	r3, [r3, #0]
 8004b04:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d905      	bls.n	8004b18 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b12:	33ca      	adds	r3, #202	; 0xca
 8004b14:	2200      	movs	r2, #0
 8004b16:	801a      	strh	r2, [r3, #0]
	//}
}
 8004b18:	bf00      	nop
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b32:	3340      	adds	r3, #64	; 0x40
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b4e:	3380      	adds	r3, #128	; 0x80
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	68b8      	ldr	r0, [r7, #8]
 8004b78:	f7fc fe80 	bl	800187c <sd_write_array_float>
}
 8004b7c:	bf00      	nop
 8004b7e:	3710      	adds	r7, #16
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	68b8      	ldr	r0, [r7, #8]
 8004ba4:	f7fc fe6a 	bl	800187c <sd_write_array_float>
}
 8004ba8:	bf00      	nop
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
}
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af02      	add	r7, sp, #8
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004bc4:	3340      	adds	r3, #64	; 0x40
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	9200      	str	r2, [sp, #0]
 8004bca:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	68b8      	ldr	r0, [r7, #8]
 8004bd2:	f7fc fe53 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004bdc:	3380      	adds	r3, #128	; 0x80
 8004bde:	2200      	movs	r2, #0
 8004be0:	9200      	str	r2, [sp, #0]
 8004be2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004be6:	6839      	ldr	r1, [r7, #0]
 8004be8:	68b8      	ldr	r0, [r7, #8]
 8004bea:	f7fc fe47 	bl	800187c <sd_write_array_float>
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}

08004bf6 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b086      	sub	sp, #24
 8004bfa:	af02      	add	r7, sp, #8
 8004bfc:	60f8      	str	r0, [r7, #12]
 8004bfe:	60b9      	str	r1, [r7, #8]
 8004c00:	607a      	str	r2, [r7, #4]
 8004c02:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c0a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c0e:	2200      	movs	r2, #0
 8004c10:	9200      	str	r2, [sp, #0]
 8004c12:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	68b8      	ldr	r0, [r7, #8]
 8004c1a:	f7fc fe2f 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c24:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c28:	2200      	movs	r2, #0
 8004c2a:	9200      	str	r2, [sp, #0]
 8004c2c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c30:	6839      	ldr	r1, [r7, #0]
 8004c32:	68b8      	ldr	r0, [r7, #8]
 8004c34:	f7fc fe22 	bl	800187c <sd_write_array_float>
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c54:	3340      	adds	r3, #64	; 0x40
 8004c56:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c5a:	6879      	ldr	r1, [r7, #4]
 8004c5c:	68b8      	ldr	r0, [r7, #8]
 8004c5e:	f7fc fe73 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004c68:	3380      	adds	r3, #128	; 0x80
 8004c6a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	68b8      	ldr	r0, [r7, #8]
 8004c72:	f7fc fe69 	bl	8001948 <sd_read_array_float>
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <_ZN6Logger10resetLogs2Ev>:
	log_index_tim2_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b08b      	sub	sp, #44	; 0x2c
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c90:	61fb      	str	r3, [r7, #28]
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	627b      	str	r3, [r7, #36]	; 0x24
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c9c:	3340      	adds	r3, #64	; 0x40
 8004c9e:	61bb      	str	r3, [r7, #24]
 8004ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d009      	beq.n	8004cbc <_ZN6Logger10resetLogs2Ev+0x3e>
 8004ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004caa:	617b      	str	r3, [r7, #20]
		log = 0;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e7f1      	b.n	8004ca0 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004cc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	623b      	str	r3, [r7, #32]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004cd2:	3340      	adds	r3, #64	; 0x40
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	6a3a      	ldr	r2, [r7, #32]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d009      	beq.n	8004cf2 <_ZN6Logger10resetLogs2Ev+0x74>
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	3304      	adds	r3, #4
 8004cee:	623b      	str	r3, [r7, #32]
 8004cf0:	e7f1      	b.n	8004cd6 <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cf8:	33c2      	adds	r3, #194	; 0xc2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d04:	33c4      	adds	r3, #196	; 0xc4
 8004d06:	2200      	movs	r2, #0
 8004d08:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d10:	33ca      	adds	r3, #202	; 0xca
 8004d12:	2200      	movs	r2, #0
 8004d14:	801a      	strh	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	372c      	adds	r7, #44	; 0x2c
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d30:	33c2      	adds	r3, #194	; 0xc2
 8004d32:	2200      	movs	r2, #0
 8004d34:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d3c:	33c4      	adds	r3, #196	; 0xc4
 8004d3e:	2200      	movs	r2, #0
 8004d40:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d48:	33ca      	adds	r3, #202	; 0xca
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	801a      	strh	r2, [r3, #0]
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <_ZN6Logger5startEv>:

void Logger::start()
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d68:	33c2      	adds	r3, #194	; 0xc2
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	801a      	strh	r2, [r3, #0]
	log_index_tim2_ = 0;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d74:	33c4      	adds	r3, #196	; 0xc4
 8004d76:	2200      	movs	r2, #0
 8004d78:	801a      	strh	r2, [r3, #0]
	recording_flag_ = true;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d80:	33c0      	adds	r3, #192	; 0xc0
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
}
 8004d86:	bf00      	nop
 8004d88:	370c      	adds	r7, #12
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d90:	4770      	bx	lr

08004d92 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004d92:	b480      	push	{r7}
 8004d94:	b083      	sub	sp, #12
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004da0:	33c0      	adds	r3, #192	; 0xc0
 8004da2:	2200      	movs	r2, #0
 8004da4:	701a      	strb	r2, [r3, #0]
}
 8004da6:	bf00      	nop
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	801a      	strh	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	805a      	strh	r2, [r3, #2]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004ddc:	2108      	movs	r1, #8
 8004dde:	4805      	ldr	r0, [pc, #20]	; (8004df4 <_ZN5Motor4initEv+0x20>)
 8004de0:	f00a f9da 	bl	800f198 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004de4:	210c      	movs	r1, #12
 8004de6:	4803      	ldr	r0, [pc, #12]	; (8004df4 <_ZN5Motor4initEv+0x20>)
 8004de8:	f00a f9d6 	bl	800f198 <HAL_TIM_PWM_Start>

}
 8004dec:	bf00      	nop
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20044890 	.word	0x20044890

08004df8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da0d      	bge.n	8004e26 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e10:	481f      	ldr	r0, [pc, #124]	; (8004e90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e12:	f006 faa7 	bl	800b364 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	425b      	negs	r3, r3
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	81fb      	strh	r3, [r7, #14]
 8004e24:	e00a      	b.n	8004e3c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004e26:	2201      	movs	r2, #1
 8004e28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e2c:	4818      	ldr	r0, [pc, #96]	; (8004e90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e2e:	f006 fa99 	bl	800b364 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	da0d      	bge.n	8004e62 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004e46:	2201      	movs	r2, #1
 8004e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e4c:	4810      	ldr	r0, [pc, #64]	; (8004e90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e4e:	f006 fa89 	bl	800b364 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	425b      	negs	r3, r3
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	81bb      	strh	r3, [r7, #12]
 8004e60:	e00a      	b.n	8004e78 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004e62:	2200      	movs	r2, #0
 8004e64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e68:	4809      	ldr	r0, [pc, #36]	; (8004e90 <_ZN5Motor9motorCtrlEv+0x98>)
 8004e6a:	f006 fa7b 	bl	800b364 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004e78:	89fa      	ldrh	r2, [r7, #14]
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004e80:	89ba      	ldrh	r2, [r7, #12]
 8004e82:	4b04      	ldr	r3, [pc, #16]	; (8004e94 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	40020c00 	.word	0x40020c00
 8004e94:	20044890 	.word	0x20044890

08004e98 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6178      	str	r0, [r7, #20]
 8004ea0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004ea4:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	4b30      	ldr	r3, [pc, #192]	; (8004f70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004eb2:	f7fb fe49 	bl	8000b48 <__aeabi_dcmpgt>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <_ZN5Motor8setRatioEdd+0x30>
 8004ebc:	f04f 0300 	mov.w	r3, #0
 8004ec0:	4c2b      	ldr	r4, [pc, #172]	; (8004f70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ec2:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004ec6:	e00e      	b.n	8004ee6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	4b29      	ldr	r3, [pc, #164]	; (8004f74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ed2:	f7fb fe1b 	bl	8000b0c <__aeabi_dcmplt>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d004      	beq.n	8004ee6 <_ZN5Motor8setRatioEdd+0x4e>
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	4c24      	ldr	r4, [pc, #144]	; (8004f74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ee2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	4b21      	ldr	r3, [pc, #132]	; (8004f70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ef0:	f7fb fe2a 	bl	8000b48 <__aeabi_dcmpgt>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d005      	beq.n	8004f06 <_ZN5Motor8setRatioEdd+0x6e>
 8004efa:	f04f 0300 	mov.w	r3, #0
 8004efe:	4c1c      	ldr	r4, [pc, #112]	; (8004f70 <_ZN5Motor8setRatioEdd+0xd8>)
 8004f00:	e9c7 3400 	strd	r3, r4, [r7]
 8004f04:	e00e      	b.n	8004f24 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	4b1a      	ldr	r3, [pc, #104]	; (8004f74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f10:	f7fb fdfc 	bl	8000b0c <__aeabi_dcmplt>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d004      	beq.n	8004f24 <_ZN5Motor8setRatioEdd+0x8c>
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	4c15      	ldr	r4, [pc, #84]	; (8004f74 <_ZN5Motor8setRatioEdd+0xdc>)
 8004f20:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f2e:	f7fb fb7b 	bl	8000628 <__aeabi_dmul>
 8004f32:	4603      	mov	r3, r0
 8004f34:	460c      	mov	r4, r1
 8004f36:	4618      	mov	r0, r3
 8004f38:	4621      	mov	r1, r4
 8004f3a:	f7fb fe25 	bl	8000b88 <__aeabi_d2iz>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	b21a      	sxth	r2, r3
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004f46:	f04f 0200 	mov.w	r2, #0
 8004f4a:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <_ZN5Motor8setRatioEdd+0xe0>)
 8004f4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004f50:	f7fb fb6a 	bl	8000628 <__aeabi_dmul>
 8004f54:	4603      	mov	r3, r0
 8004f56:	460c      	mov	r4, r1
 8004f58:	4618      	mov	r0, r3
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	f7fb fe14 	bl	8000b88 <__aeabi_d2iz>
 8004f60:	4603      	mov	r3, r0
 8004f62:	b21a      	sxth	r2, r3
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	805a      	strh	r2, [r3, #2]

}
 8004f68:	bf00      	nop
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd90      	pop	{r4, r7, pc}
 8004f70:	3ff00000 	.word	0x3ff00000
 8004f74:	bff00000 	.word	0xbff00000
 8004f78:	409c2000 	.word	0x409c2000

08004f7c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004f7c:	b490      	push	{r4, r7}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	603b      	str	r3, [r7, #0]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	f04f 0300 	mov.w	r3, #0
 8004f90:	f04f 0400 	mov.w	r4, #0
 8004f94:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	f04f 0400 	mov.w	r4, #0
 8004fa2:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	f04f 0400 	mov.w	r4, #0
 8004fbe:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	f04f 0400 	mov.w	r4, #0
 8004fcc:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	609a      	str	r2, [r3, #8]
}
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bc90      	pop	{r4, r7}
 8004fec:	4770      	bx	lr
	...

08004ff0 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fc ff06 	bl	8001e10 <_ZN3IMU8getOmegaEv>
 8005004:	ee10 3a10 	vmov	r3, s0
 8005008:	4618      	mov	r0, r3
 800500a:	f7fb fab5 	bl	8000578 <__aeabi_f2d>
 800500e:	4603      	mov	r3, r0
 8005010:	460c      	mov	r4, r1
 8005012:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4618      	mov	r0, r3
 800501c:	f7fc fb44 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8005020:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8005024:	a376      	add	r3, pc, #472	; (adr r3, 8005200 <_ZN8Odometry12calcPotitionEv+0x210>)
 8005026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800502e:	f7fb fafb 	bl	8000628 <__aeabi_dmul>
 8005032:	4603      	mov	r3, r0
 8005034:	460c      	mov	r4, r1
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7fb fa98 	bl	8000578 <__aeabi_f2d>
 8005048:	4682      	mov	sl, r0
 800504a:	468b      	mov	fp, r1
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005060:	f7fb fc0c 	bl	800087c <__aeabi_ddiv>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4640      	mov	r0, r8
 800506a:	4649      	mov	r1, r9
 800506c:	f7fb f926 	bl	80002bc <__adddf3>
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	ec43 2b17 	vmov	d7, r2, r3
 8005078:	eeb0 0a47 	vmov.f32	s0, s14
 800507c:	eef0 0a67 	vmov.f32	s1, s15
 8005080:	f00f fbce 	bl	8014820 <cos>
 8005084:	ec53 2b10 	vmov	r2, r3, d0
 8005088:	4650      	mov	r0, sl
 800508a:	4659      	mov	r1, fp
 800508c:	f7fb facc 	bl	8000628 <__aeabi_dmul>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb f910 	bl	80002bc <__adddf3>
 800509c:	4603      	mov	r3, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f7fb fa63 	bl	8000578 <__aeabi_f2d>
 80050b2:	4682      	mov	sl, r0
 80050b4:	468b      	mov	fp, r1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050ca:	f7fb fbd7 	bl	800087c <__aeabi_ddiv>
 80050ce:	4602      	mov	r2, r0
 80050d0:	460b      	mov	r3, r1
 80050d2:	4640      	mov	r0, r8
 80050d4:	4649      	mov	r1, r9
 80050d6:	f7fb f8f1 	bl	80002bc <__adddf3>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	ec43 2b17 	vmov	d7, r2, r3
 80050e2:	eeb0 0a47 	vmov.f32	s0, s14
 80050e6:	eef0 0a67 	vmov.f32	s1, s15
 80050ea:	f00f fbdd 	bl	80148a8 <sin>
 80050ee:	ec53 2b10 	vmov	r2, r3, d0
 80050f2:	4650      	mov	r0, sl
 80050f4:	4659      	mov	r1, fp
 80050f6:	f7fb fa97 	bl	8000628 <__aeabi_dmul>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb f8db 	bl	80002bc <__adddf3>
 8005106:	4603      	mov	r3, r0
 8005108:	460c      	mov	r4, r1
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 800511c:	461a      	mov	r2, r3
 800511e:	4623      	mov	r3, r4
 8005120:	f7fb f8cc 	bl	80002bc <__adddf3>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	ed93 7b08 	vldr	d7, [r3, #32]
 800513a:	eeb0 0a47 	vmov.f32	s0, s14
 800513e:	eef0 0a67 	vmov.f32	s1, s15
 8005142:	f00f fb6d 	bl	8014820 <cos>
 8005146:	ec51 0b10 	vmov	r0, r1, d0
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	4b28      	ldr	r3, [pc, #160]	; (80051f0 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005150:	f7fb fa6a 	bl	8000628 <__aeabi_dmul>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4620      	mov	r0, r4
 800515a:	4629      	mov	r1, r5
 800515c:	f7fb f8ae 	bl	80002bc <__adddf3>
 8005160:	4603      	mov	r3, r0
 8005162:	460c      	mov	r4, r1
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	ed93 7b08 	vldr	d7, [r3, #32]
 8005176:	eeb0 0a47 	vmov.f32	s0, s14
 800517a:	eef0 0a67 	vmov.f32	s1, s15
 800517e:	f00f fb93 	bl	80148a8 <sin>
 8005182:	ec51 0b10 	vmov	r0, r1, d0
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <_ZN8Odometry12calcPotitionEv+0x200>)
 800518c:	f7fb fa4c 	bl	8000628 <__aeabi_dmul>
 8005190:	4602      	mov	r2, r0
 8005192:	460b      	mov	r3, r1
 8005194:	4620      	mov	r0, r4
 8005196:	4629      	mov	r1, r5
 8005198:	f7fb f890 	bl	80002bc <__adddf3>
 800519c:	4603      	mov	r3, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80051ac:	4618      	mov	r0, r3
 80051ae:	4621      	mov	r1, r4
 80051b0:	f7fb fd32 	bl	8000c18 <__aeabi_d2f>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <_ZN8Odometry12calcPotitionEv+0x204>)
 80051b8:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80051c0:	4618      	mov	r0, r3
 80051c2:	4621      	mov	r1, r4
 80051c4:	f7fb fd28 	bl	8000c18 <__aeabi_d2f>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <_ZN8Odometry12calcPotitionEv+0x208>)
 80051cc:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80051d4:	4618      	mov	r0, r3
 80051d6:	4621      	mov	r1, r4
 80051d8:	f7fb fd1e 	bl	8000c18 <__aeabi_d2f>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <_ZN8Odometry12calcPotitionEv+0x20c>)
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3718      	adds	r7, #24
 80051e6:	46bd      	mov	sp, r7
 80051e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ec:	f3af 8000 	nop.w
 80051f0:	405b8000 	.word	0x405b8000
 80051f4:	2000027c 	.word	0x2000027c
 80051f8:	20000280 	.word	0x20000280
 80051fc:	20000284 	.word	0x20000284
 8005200:	d2f1a9fc 	.word	0xd2f1a9fc
 8005204:	3f50624d 	.word	0x3f50624d

08005208 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f7ff feed 	bl	8004ff0 <_ZN8Odometry12calcPotitionEv>
}
 8005216:	bf00      	nop
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 800521e:	b490      	push	{r4, r7}
 8005220:	b082      	sub	sp, #8
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
	return theta_;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800522c:	ec44 3b17 	vmov	d7, r3, r4
}
 8005230:	eeb0 0a47 	vmov.f32	s0, s14
 8005234:	eef0 0a67 	vmov.f32	s1, s15
 8005238:	3708      	adds	r7, #8
 800523a:	46bd      	mov	sp, r7
 800523c:	bc90      	pop	{r4, r7}
 800523e:	4770      	bx	lr

08005240 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005240:	b490      	push	{r4, r7}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	f04f 0300 	mov.w	r3, #0
 800524e:	f04f 0400 	mov.w	r4, #0
 8005252:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	f04f 0400 	mov.w	r4, #0
 8005260:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	f04f 0300 	mov.w	r3, #0
 800526a:	f04f 0400 	mov.w	r4, #0
 800526e:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 8005272:	bf00      	nop
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bc90      	pop	{r4, r7}
 800527a:	4770      	bx	lr

0800527c <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 800527c:	b490      	push	{r4, r7}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	f04f 0400 	mov.w	r4, #0
 8005294:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	f04f 0300 	mov.w	r3, #0
 800529e:	f04f 0400 	mov.w	r4, #0
 80052a2:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	f04f 0400 	mov.w	r4, #0
 80052b0:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80052ba:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80052be:	2200      	movs	r2, #0
 80052c0:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80052c2:	4a29      	ldr	r2, [pc, #164]	; (8005368 <_ZN13PathFollowingC1Ev+0xec>)
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	f04f 0400 	mov.w	r4, #0
 80052cc:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80052d0:	4a25      	ldr	r2, [pc, #148]	; (8005368 <_ZN13PathFollowingC1Ev+0xec>)
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	f04f 0400 	mov.w	r4, #0
 80052da:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80052de:	4a22      	ldr	r2, [pc, #136]	; (8005368 <_ZN13PathFollowingC1Ev+0xec>)
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	f04f 0400 	mov.w	r4, #0
 80052e8:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80052ec:	4a1f      	ldr	r2, [pc, #124]	; (800536c <_ZN13PathFollowingC1Ev+0xf0>)
 80052ee:	f04f 0300 	mov.w	r3, #0
 80052f2:	f04f 0400 	mov.w	r4, #0
 80052f6:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80052fa:	4a1c      	ldr	r2, [pc, #112]	; (800536c <_ZN13PathFollowingC1Ev+0xf0>)
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	f04f 0400 	mov.w	r4, #0
 8005304:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005308:	4a18      	ldr	r2, [pc, #96]	; (800536c <_ZN13PathFollowingC1Ev+0xf0>)
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	f04f 0400 	mov.w	r4, #0
 8005312:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 8005316:	4a15      	ldr	r2, [pc, #84]	; (800536c <_ZN13PathFollowingC1Ev+0xf0>)
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	f04f 0400 	mov.w	r4, #0
 8005320:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <_ZN13PathFollowingC1Ev+0xf0>)
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	f04f 0400 	mov.w	r4, #0
 800532e:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 8005332:	4a0e      	ldr	r2, [pc, #56]	; (800536c <_ZN13PathFollowingC1Ev+0xf0>)
 8005334:	f04f 0300 	mov.w	r3, #0
 8005338:	f04f 0400 	mov.w	r4, #0
 800533c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005340:	4a0b      	ldr	r2, [pc, #44]	; (8005370 <_ZN13PathFollowingC1Ev+0xf4>)
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 800534e:	4a08      	ldr	r2, [pc, #32]	; (8005370 <_ZN13PathFollowingC1Ev+0xf4>)
 8005350:	f04f 0300 	mov.w	r3, #0
 8005354:	f04f 0400 	mov.w	r4, #0
 8005358:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bc90      	pop	{r4, r7}
 8005366:	4770      	bx	lr
 8005368:	20044d90 	.word	0x20044d90
 800536c:	20044d20 	.word	0x20044d20
 8005370:	20044d80 	.word	0x20044d80

08005374 <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b088      	sub	sp, #32
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 800537c:	f001 fd8a 	bl	8006e94 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005380:	f107 0318 	add.w	r3, r7, #24
 8005384:	2201      	movs	r2, #1
 8005386:	4915      	ldr	r1, [pc, #84]	; (80053dc <_ZN13PathFollowing4initEv+0x68>)
 8005388:	4815      	ldr	r0, [pc, #84]	; (80053e0 <_ZN13PathFollowing4initEv+0x6c>)
 800538a:	f7fc fb23 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 800538e:	f107 0310 	add.w	r3, r7, #16
 8005392:	2201      	movs	r2, #1
 8005394:	4913      	ldr	r1, [pc, #76]	; (80053e4 <_ZN13PathFollowing4initEv+0x70>)
 8005396:	4812      	ldr	r0, [pc, #72]	; (80053e0 <_ZN13PathFollowing4initEv+0x6c>)
 8005398:	f7fc fb1c 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	2201      	movs	r2, #1
 80053a2:	4911      	ldr	r1, [pc, #68]	; (80053e8 <_ZN13PathFollowing4initEv+0x74>)
 80053a4:	480e      	ldr	r0, [pc, #56]	; (80053e0 <_ZN13PathFollowing4initEv+0x6c>)
 80053a6:	f7fc fb15 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80053aa:	ed97 7b06 	vldr	d7, [r7, #24]
 80053ae:	ed97 6b04 	vldr	d6, [r7, #16]
 80053b2:	ed97 5b02 	vldr	d5, [r7, #8]
 80053b6:	eeb0 2a45 	vmov.f32	s4, s10
 80053ba:	eef0 2a65 	vmov.f32	s5, s11
 80053be:	eeb0 1a46 	vmov.f32	s2, s12
 80053c2:	eef0 1a66 	vmov.f32	s3, s13
 80053c6:	eeb0 0a47 	vmov.f32	s0, s14
 80053ca:	eef0 0a67 	vmov.f32	s1, s15
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f80c 	bl	80053ec <_ZN13PathFollowing7setGainEddd>
}
 80053d4:	bf00      	nop
 80053d6:	3720      	adds	r7, #32
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	08019ecc 	.word	0x08019ecc
 80053e0:	08019ed4 	.word	0x08019ed4
 80053e4:	08019edc 	.word	0x08019edc
 80053e8:	08019ee4 	.word	0x08019ee4

080053ec <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80053ec:	b490      	push	{r4, r7}
 80053ee:	b088      	sub	sp, #32
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	61f8      	str	r0, [r7, #28]
 80053f4:	ed87 0b04 	vstr	d0, [r7, #16]
 80053f8:	ed87 1b02 	vstr	d1, [r7, #8]
 80053fc:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005400:	4a09      	ldr	r2, [pc, #36]	; (8005428 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005402:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005406:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 800540a:	4a07      	ldr	r2, [pc, #28]	; (8005428 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800540c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005410:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 8005414:	4a04      	ldr	r2, [pc, #16]	; (8005428 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005416:	e9d7 3400 	ldrd	r3, r4, [r7]
 800541a:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 800541e:	bf00      	nop
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bc90      	pop	{r4, r7}
 8005426:	4770      	bx	lr
 8005428:	20044d90 	.word	0x20044d90

0800542c <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8005434:	2088      	movs	r0, #136	; 0x88
 8005436:	f7fc fe2e 	bl	8002096 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 800543a:	2080      	movs	r0, #128	; 0x80
 800543c:	f7fc fe2b 	bl	8002096 <INA260_init>
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005448:	b590      	push	{r4, r7, lr}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005450:	2188      	movs	r1, #136	; 0x88
 8005452:	2002      	movs	r0, #2
 8005454:	f7fc fdbc 	bl	8001fd0 <INA260_read>
 8005458:	4603      	mov	r3, r0
 800545a:	4618      	mov	r0, r3
 800545c:	f7fb f87a 	bl	8000554 <__aeabi_i2d>
 8005460:	a30c      	add	r3, pc, #48	; (adr r3, 8005494 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8005462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005466:	f7fb f8df 	bl	8000628 <__aeabi_dmul>
 800546a:	4603      	mov	r3, r0
 800546c:	460c      	mov	r4, r1
 800546e:	4618      	mov	r0, r3
 8005470:	4621      	mov	r1, r4
 8005472:	f7fb fbd1 	bl	8000c18 <__aeabi_d2f>
 8005476:	4602      	mov	r2, r0
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4a03      	ldr	r2, [pc, #12]	; (8005490 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	f3af 8000 	nop.w
 8005490:	20000288 	.word	0x20000288
 8005494:	47ae147b 	.word	0x47ae147b
 8005498:	3f547ae1 	.word	0x3f547ae1

0800549c <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	ee07 3a90 	vmov	s15, r3

}
 80054ac:	eeb0 0a67 	vmov.f32	s0, s15
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr
	...

080054bc <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80054c4:	2300      	movs	r3, #0
 80054c6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80054c8:	2102      	movs	r1, #2
 80054ca:	4822      	ldr	r0, [pc, #136]	; (8005554 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054cc:	f005 ff32 	bl	800b334 <HAL_GPIO_ReadPin>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <_ZN12RotarySwitch8getValueEv+0x2c>
 80054e0:	89fb      	ldrh	r3, [r7, #14]
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80054e8:	2108      	movs	r1, #8
 80054ea:	481a      	ldr	r0, [pc, #104]	; (8005554 <_ZN12RotarySwitch8getValueEv+0x98>)
 80054ec:	f005 ff22 	bl	800b334 <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bf0c      	ite	eq
 80054f6:	2301      	moveq	r3, #1
 80054f8:	2300      	movne	r3, #0
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	f043 0302 	orr.w	r3, r3, #2
 8005506:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005508:	2110      	movs	r1, #16
 800550a:	4812      	ldr	r0, [pc, #72]	; (8005554 <_ZN12RotarySwitch8getValueEv+0x98>)
 800550c:	f005 ff12 	bl	800b334 <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	bf0c      	ite	eq
 8005516:	2301      	moveq	r3, #1
 8005518:	2300      	movne	r3, #0
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005520:	89fb      	ldrh	r3, [r7, #14]
 8005522:	f043 0304 	orr.w	r3, r3, #4
 8005526:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005528:	2180      	movs	r1, #128	; 0x80
 800552a:	480a      	ldr	r0, [pc, #40]	; (8005554 <_ZN12RotarySwitch8getValueEv+0x98>)
 800552c:	f005 ff02 	bl	800b334 <HAL_GPIO_ReadPin>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf0c      	ite	eq
 8005536:	2301      	moveq	r3, #1
 8005538:	2300      	movne	r3, #0
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005540:	89fb      	ldrh	r3, [r7, #14]
 8005542:	f043 0308 	orr.w	r3, r3, #8
 8005546:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005548:	89fb      	ldrh	r3, [r7, #14]

}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40020c00 	.word	0x40020c00

08005558 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	801a      	strh	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	709a      	strb	r2, [r3, #2]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	70da      	strb	r2, [r3, #3]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	809a      	strh	r2, [r3, #4]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	80da      	strh	r2, [r3, #6]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	721a      	strb	r2, [r3, #8]
{

}
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4618      	mov	r0, r3
 8005588:	370c      	adds	r7, #12
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	7a1b      	ldrb	r3, [r3, #8]
 80055a0:	f083 0301 	eor.w	r3, r3, #1
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 80ea 	beq.w	8005780 <_ZN10SideSensor12updateStatusEv+0x1ec>
		if(white_flag1 == false){
 80055ac:	4b76      	ldr	r3, [pc, #472]	; (8005788 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f083 0301 	eor.w	r3, r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d032      	beq.n	8005620 <_ZN10SideSensor12updateStatusEv+0x8c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2) && HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) ){ // Right is white and Left is black
 80055ba:	2104      	movs	r1, #4
 80055bc:	4873      	ldr	r0, [pc, #460]	; (800578c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80055be:	f005 feb9 	bl	800b334 <HAL_GPIO_ReadPin>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d109      	bne.n	80055dc <_ZN10SideSensor12updateStatusEv+0x48>
 80055c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055cc:	4870      	ldr	r0, [pc, #448]	; (8005790 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80055ce:	f005 feb1 	bl	800b334 <HAL_GPIO_ReadPin>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <_ZN10SideSensor12updateStatusEv+0x48>
 80055d8:	2301      	movs	r3, #1
 80055da:	e000      	b.n	80055de <_ZN10SideSensor12updateStatusEv+0x4a>
 80055dc:	2300      	movs	r3, #0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <_ZN10SideSensor12updateStatusEv+0x5c>
				cnt_r++;
 80055e2:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055e4:	881b      	ldrh	r3, [r3, #0]
 80055e6:	3301      	adds	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	4b6a      	ldr	r3, [pc, #424]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055ec:	801a      	strh	r2, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_ZN10SideSensor12updateStatusEv+0x62>
			}
			else{
				cnt_r = 0;
 80055f0:	4b68      	ldr	r3, [pc, #416]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80055f6:	4b67      	ldr	r3, [pc, #412]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	2b04      	cmp	r3, #4
 80055fc:	d945      	bls.n	800568a <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ |= 0x01;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f043 0301 	orr.w	r3, r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 8005612:	4b5d      	ldr	r3, [pc, #372]	; (8005788 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005614:	2201      	movs	r2, #1
 8005616:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005618:	4b5e      	ldr	r3, [pc, #376]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 800561a:	2200      	movs	r2, #0
 800561c:	801a      	strh	r2, [r3, #0]
 800561e:	e034      	b.n	800568a <_ZN10SideSensor12updateStatusEv+0xf6>
			}

		}
		else if(white_flag1 == true){
 8005620:	4b59      	ldr	r3, [pc, #356]	; (8005788 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d030      	beq.n	800568a <_ZN10SideSensor12updateStatusEv+0xf6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ // Right is black
 8005628:	2104      	movs	r1, #4
 800562a:	4858      	ldr	r0, [pc, #352]	; (800578c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 800562c:	f005 fe82 	bl	800b334 <HAL_GPIO_ReadPin>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	bf14      	ite	ne
 8005636:	2301      	movne	r3, #1
 8005638:	2300      	moveq	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <_ZN10SideSensor12updateStatusEv+0xba>
				cnt_r++;
 8005640:	4b54      	ldr	r3, [pc, #336]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	b29a      	uxth	r2, r3
 8005648:	4b52      	ldr	r3, [pc, #328]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 800564a:	801a      	strh	r2, [r3, #0]
 800564c:	e002      	b.n	8005654 <_ZN10SideSensor12updateStatusEv+0xc0>
			}
			else{
				cnt_r = 0;
 800564e:	4b51      	ldr	r3, [pc, #324]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005650:	2200      	movs	r2, #0
 8005652:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005654:	4b4f      	ldr	r3, [pc, #316]	; (8005794 <_ZN10SideSensor12updateStatusEv+0x200>)
 8005656:	881b      	ldrh	r3, [r3, #0]
 8005658:	2b04      	cmp	r3, #4
 800565a:	d916      	bls.n	800568a <_ZN10SideSensor12updateStatusEv+0xf6>
				status_ ^= 0x01;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	881b      	ldrh	r3, [r3, #0]
 8005660:	f083 0301 	eor.w	r3, r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005670:	4b45      	ldr	r3, [pc, #276]	; (8005788 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005672:	2200      	movs	r2, #0
 8005674:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	88db      	ldrh	r3, [r3, #6]
 800567a:	3301      	adds	r3, #1
 800567c:	b29a      	uxth	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	88da      	ldrh	r2, [r3, #6]
 8005686:	4b44      	ldr	r3, [pc, #272]	; (8005798 <_ZN10SideSensor12updateStatusEv+0x204>)
 8005688:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800568a:	4b44      	ldr	r3, [pc, #272]	; (800579c <_ZN10SideSensor12updateStatusEv+0x208>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f083 0301 	eor.w	r3, r3, #1
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d031      	beq.n	80056fc <_ZN10SideSensor12updateStatusEv+0x168>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8) && HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){ //Left is white and Right is black
 8005698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800569c:	483c      	ldr	r0, [pc, #240]	; (8005790 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800569e:	f005 fe49 	bl	800b334 <HAL_GPIO_ReadPin>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d108      	bne.n	80056ba <_ZN10SideSensor12updateStatusEv+0x126>
 80056a8:	2104      	movs	r1, #4
 80056aa:	4838      	ldr	r0, [pc, #224]	; (800578c <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80056ac:	f005 fe42 	bl	800b334 <HAL_GPIO_ReadPin>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <_ZN10SideSensor12updateStatusEv+0x126>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <_ZN10SideSensor12updateStatusEv+0x128>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d006      	beq.n	80056ce <_ZN10SideSensor12updateStatusEv+0x13a>
				cnt_l++;
 80056c0:	4b37      	ldr	r3, [pc, #220]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056c2:	881b      	ldrh	r3, [r3, #0]
 80056c4:	3301      	adds	r3, #1
 80056c6:	b29a      	uxth	r2, r3
 80056c8:	4b35      	ldr	r3, [pc, #212]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e002      	b.n	80056d4 <_ZN10SideSensor12updateStatusEv+0x140>
			}
			else{
				cnt_l = 0;
 80056ce:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80056d4:	4b32      	ldr	r3, [pc, #200]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	2b04      	cmp	r3, #4
 80056da:	d90f      	bls.n	80056fc <_ZN10SideSensor12updateStatusEv+0x168>
				status_ |= 0x02;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	881b      	ldrh	r3, [r3, #0]
 80056e0:	f043 0302 	orr.w	r3, r3, #2
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 80056f0:	4b2a      	ldr	r3, [pc, #168]	; (800579c <_ZN10SideSensor12updateStatusEv+0x208>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80056f6:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <_ZN10SideSensor12updateStatusEv+0x208>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d031      	beq.n	8005768 <_ZN10SideSensor12updateStatusEv+0x1d4>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){ //Left is black
 8005704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005708:	4821      	ldr	r0, [pc, #132]	; (8005790 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 800570a:	f005 fe13 	bl	800b334 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d006      	beq.n	800572c <_ZN10SideSensor12updateStatusEv+0x198>
				cnt_l++;
 800571e:	4b20      	ldr	r3, [pc, #128]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005720:	881b      	ldrh	r3, [r3, #0]
 8005722:	3301      	adds	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	e002      	b.n	8005732 <_ZN10SideSensor12updateStatusEv+0x19e>
			}
			else{
				cnt_l = 0;
 800572c:	4b1c      	ldr	r3, [pc, #112]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005732:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <_ZN10SideSensor12updateStatusEv+0x20c>)
 8005734:	881b      	ldrh	r3, [r3, #0]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d916      	bls.n	8005768 <_ZN10SideSensor12updateStatusEv+0x1d4>
				status_ ^= 0x02;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	881b      	ldrh	r3, [r3, #0]
 800573e:	f083 0302 	eor.w	r3, r3, #2
 8005742:	b29a      	uxth	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 800574e:	4b13      	ldr	r3, [pc, #76]	; (800579c <_ZN10SideSensor12updateStatusEv+0x208>)
 8005750:	2200      	movs	r2, #0
 8005752:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	889b      	ldrh	r3, [r3, #4]
 8005758:	3301      	adds	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	889a      	ldrh	r2, [r3, #4]
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <_ZN10SideSensor12updateStatusEv+0x210>)
 8005766:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <_ZN10SideSensor12updateStatusEv+0x214>)
 800576e:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	789a      	ldrb	r2, [r3, #2]
 8005774:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <_ZN10SideSensor12updateStatusEv+0x218>)
 8005776:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	78da      	ldrb	r2, [r3, #3]
 800577c:	4b0c      	ldr	r3, [pc, #48]	; (80057b0 <_ZN10SideSensor12updateStatusEv+0x21c>)
 800577e:	701a      	strb	r2, [r3, #0]
	}

}
 8005780:	bf00      	nop
 8005782:	3708      	adds	r7, #8
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000294 	.word	0x20000294
 800578c:	40021000 	.word	0x40021000
 8005790:	40020c00 	.word	0x40020c00
 8005794:	20000298 	.word	0x20000298
 8005798:	20000292 	.word	0x20000292
 800579c:	20000295 	.word	0x20000295
 80057a0:	20000296 	.word	0x20000296
 80057a4:	20000290 	.word	0x20000290
 80057a8:	2000028c 	.word	0x2000028c
 80057ac:	2000028e 	.word	0x2000028e
 80057b0:	2000028f 	.word	0x2000028f

080057b4 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	return status_L_;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	789b      	ldrb	r3, [r3, #2]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	88db      	ldrh	r3, [r3, #6]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	80da      	strh	r2, [r3, #6]
}
 80057f8:	bf00      	nop
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	721a      	strb	r2, [r3, #8]
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	721a      	strb	r2, [r3, #8]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	7a1b      	ldrb	r3, [r3, #8]
}
 8005844:	4618      	mov	r0, r3
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	3308      	adds	r3, #8
 8005860:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005864:	2100      	movs	r1, #0
 8005866:	4618      	mov	r0, r3
 8005868:	f010 f85a 	bl	8015920 <memset>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005872:	811a      	strh	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587a:	815a      	strh	r2, [r3, #10]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005882:	819a      	strh	r2, [r3, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800588a:	81da      	strh	r2, [r3, #14]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005892:	821a      	strh	r2, [r3, #16]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589a:	825a      	strh	r2, [r3, #18]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	829a      	strh	r2, [r3, #20]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	82da      	strh	r2, [r3, #22]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	831a      	strh	r2, [r3, #24]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	835a      	strh	r2, [r3, #26]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2201      	movs	r2, #1
 80058b8:	839a      	strh	r2, [r3, #28]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	83da      	strh	r2, [r3, #30]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	841a      	strh	r2, [r3, #32]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058cc:	845a      	strh	r2, [r3, #34]	; 0x22
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2201      	movs	r2, #1
 80058d2:	849a      	strh	r2, [r3, #36]	; 0x24
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058da:	84da      	strh	r2, [r3, #38]	; 0x26
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	851a      	strh	r2, [r3, #40]	; 0x28
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2201      	movs	r2, #1
 80058ee:	859a      	strh	r2, [r3, #44]	; 0x2c
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f6:	85da      	strh	r2, [r3, #46]	; 0x2e
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058fe:	861a      	strh	r2, [r3, #48]	; 0x30
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2201      	movs	r2, #1
 8005904:	865a      	strh	r2, [r3, #50]	; 0x32
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2201      	movs	r2, #1
 800590a:	869a      	strh	r2, [r3, #52]	; 0x34
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005912:	86da      	strh	r2, [r3, #54]	; 0x36
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800591a:	871a      	strh	r2, [r3, #56]	; 0x38
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2201      	movs	r2, #1
 800592c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2201      	movs	r2, #1
 800594c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005956:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2201      	movs	r2, #1
 800595e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005968:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005972:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2201      	movs	r2, #1
 800597a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005984:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2201      	movs	r2, #1
 800598c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2201      	movs	r2, #1
 8005994:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800599e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f6:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2201      	movs	r2, #1
 8005a06:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a10:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a22:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a3c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a56:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a60:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a72:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a7c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a8e:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a98:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005aa2:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ac4:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ace:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ad8:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ae2:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005af4:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b26:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b30:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b42:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b54:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b76:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b80:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b9a:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bac:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
 8005bec:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	605a      	str	r2, [r3, #4]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	60da      	str	r2, [r3, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	611a      	str	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f04f 0200 	mov.w	r2, #0
 8005c1c:	615a      	str	r2, [r3, #20]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f04f 0200 	mov.w	r2, #0
 8005c24:	619a      	str	r2, [r3, #24]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f04f 0200 	mov.w	r2, #0
 8005c2c:	61da      	str	r2, [r3, #28]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	621a      	str	r2, [r3, #32]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr
	...

08005c78 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005c78:	b590      	push	{r4, r7, lr}
 8005c7a:	b087      	sub	sp, #28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c84:	f107 020c 	add.w	r2, r7, #12
 8005c88:	f107 0110 	add.w	r1, r7, #16
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fb fcf7 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005c92:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c96:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c9e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ca6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005caa:	6978      	ldr	r0, [r7, #20]
 8005cac:	f7fa fc64 	bl	8000578 <__aeabi_f2d>
 8005cb0:	a30e      	add	r3, pc, #56	; (adr r3, 8005cec <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fcb7 	bl	8000628 <__aeabi_dmul>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	460c      	mov	r4, r1
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	f7fa ffa9 	bl	8000c18 <__aeabi_d2f>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	4a05      	ldr	r2, [pc, #20]	; (8005ce8 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005cd2:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	ee07 3a90 	vmov	s15, r3
}
 8005cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd90      	pop	{r4, r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2000029c 	.word	0x2000029c
 8005cec:	1ab1d998 	.word	0x1ab1d998
 8005cf0:	3f7830b5 	.word	0x3f7830b5
 8005cf4:	00000000 	.word	0x00000000

08005cf8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	ed93 7a00 	vldr	s14, [r3]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	edd3 7a02 	vldr	s15, [r3, #8]
 8005d0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d10:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005d1e:	4b48      	ldr	r3, [pc, #288]	; (8005e40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d34:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005d40:	4b3f      	ldr	r3, [pc, #252]	; (8005e40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fa fc17 	bl	8000578 <__aeabi_f2d>
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	460d      	mov	r5, r1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	ed93 7a06 	vldr	s14, [r3, #24]
 8005d54:	edd7 7a05 	vldr	s15, [r7, #20]
 8005d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5c:	ee17 0a90 	vmov	r0, s15
 8005d60:	f7fa fc0a 	bl	8000578 <__aeabi_f2d>
 8005d64:	a334      	add	r3, pc, #208	; (adr r3, 8005e38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6a:	f7fa fc5d 	bl	8000628 <__aeabi_dmul>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	4620      	mov	r0, r4
 8005d74:	4629      	mov	r1, r5
 8005d76:	f7fa faa1 	bl	80002bc <__adddf3>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	460c      	mov	r4, r1
 8005d7e:	4618      	mov	r0, r3
 8005d80:	4621      	mov	r1, r4
 8005d82:	f7fa ff49 	bl	8000c18 <__aeabi_d2f>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b2d      	ldr	r3, [pc, #180]	; (8005e40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005d8a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005d92:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005d94:	edd3 7a00 	vldr	s15, [r3]
 8005d98:	edd7 6a05 	vldr	s13, [r7, #20]
 8005d9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da4:	ee17 0a90 	vmov	r0, s15
 8005da8:	f7fa fbe6 	bl	8000578 <__aeabi_f2d>
 8005dac:	a322      	add	r3, pc, #136	; (adr r3, 8005e38 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa fd63 	bl	800087c <__aeabi_ddiv>
 8005db6:	4603      	mov	r3, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	4618      	mov	r0, r3
 8005dbc:	4621      	mov	r1, r4
 8005dbe:	f7fa ff2b 	bl	8000c18 <__aeabi_d2f>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005dc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005dce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005dd2:	4b1b      	ldr	r3, [pc, #108]	; (8005e40 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005dd4:	edd3 7a00 	vldr	s15, [r3]
 8005dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ddc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8005dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df2:	ee17 0a90 	vmov	r0, s15
 8005df6:	f7fa fbbf 	bl	8000578 <__aeabi_f2d>
 8005dfa:	4605      	mov	r5, r0
 8005dfc:	460e      	mov	r6, r1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e04:	ed97 7a02 	vldr	s14, [r7, #8]
 8005e08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e0c:	ee17 0a90 	vmov	r0, s15
 8005e10:	f7fa fbb2 	bl	8000578 <__aeabi_f2d>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	ec43 2b11 	vmov	d1, r2, r3
 8005e1c:	ec46 5b10 	vmov	d0, r5, r6
 8005e20:	4620      	mov	r0, r4
 8005e22:	f7ff f839 	bl	8004e98 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005e26:	4a07      	ldr	r2, [pc, #28]	; (8005e44 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	6013      	str	r3, [r2, #0]
}
 8005e2c:	bf00      	nop
 8005e2e:	371c      	adds	r7, #28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e34:	f3af 8000 	nop.w
 8005e38:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e3c:	3f50624d 	.word	0x3f50624d
 8005e40:	200002a4 	.word	0x200002a4
 8005e44:	200002a0 	.word	0x200002a0

08005e48 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e54:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68ba      	ldr	r2, [r7, #8]
 8005e5c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	605a      	str	r2, [r3, #4]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	ed87 0a02 	vstr	s0, [r7, #8]
 8005e7c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ea4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005ea8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	615a      	str	r2, [r3, #20]
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b085      	sub	sp, #20
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ed6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005eda:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68ba      	ldr	r2, [r7, #8]
 8005ee2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	621a      	str	r2, [r3, #32]
}
 8005ef0:	bf00      	nop
 8005ef2:	3714      	adds	r7, #20
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f7ff feb7 	bl	8005c78 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff feef 	bl	8005cf8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}

08005f22 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005f3a:	bf00      	nop
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
	...

08005f48 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005f78 <_ZN12VelocityCtrl4stopEv+0x30>
 8005f60:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005f78 <_ZN12VelocityCtrl4stopEv+0x30>
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe ff97 	bl	8004e98 <_ZN5Motor8setRatioEdd>

}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	f3af 8000 	nop.w
	...

08005f80 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	ee07 3a90 	vmov	s15, r3
}
 8005f90:	eeb0 0a67 	vmov.f32	s0, s15
 8005f94:	370c      	adds	r7, #12
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
	...

08005fa0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1e      	ldr	r2, [pc, #120]	; (8006028 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d10e      	bne.n	8005fd0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005fb2:	f001 fe0f 	bl	8007bd4 <cppFlip100ns>

		tim7_timer++;
 8005fb6:	4b1d      	ldr	r3, [pc, #116]	; (800602c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fbe:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005fc0:	4b1a      	ldr	r3, [pc, #104]	; (800602c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1a      	ldr	r2, [pc, #104]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d902      	bls.n	8005fd0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005fca:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a17      	ldr	r2, [pc, #92]	; (8006034 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005fda:	f001 fdcb 	bl	8007b74 <cppFlip1ms>

		tim6_timer++;
 8005fde:	4b16      	ldr	r3, [pc, #88]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	4a14      	ldr	r2, [pc, #80]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005fe6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005fe8:	4b13      	ldr	r3, [pc, #76]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a10      	ldr	r2, [pc, #64]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d902      	bls.n	8005ff8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005ff2:	4b11      	ldr	r3, [pc, #68]	; (8006038 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a0f      	ldr	r2, [pc, #60]	; (800603c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d10e      	bne.n	8006020 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8006002:	f001 fdf1 	bl	8007be8 <cppFlip10ms>

		tim13_timer++;
 8006006:	4b0e      	ldr	r3, [pc, #56]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	4a0c      	ldr	r2, [pc, #48]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800600e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8006010:	4b0b      	ldr	r3, [pc, #44]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a06      	ldr	r2, [pc, #24]	; (8006030 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d902      	bls.n	8006020 <HAL_TIM_PeriodElapsedCallback+0x80>
 800601a:	4b09      	ldr	r3, [pc, #36]	; (8006040 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
	}

}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40001400 	.word	0x40001400
 800602c:	20044a44 	.word	0x20044a44
 8006030:	0001869f 	.word	0x0001869f
 8006034:	40001000 	.word	0x40001000
 8006038:	20044a00 	.word	0x20044a00
 800603c:	40001c00 	.word	0x40001c00
 8006040:	20044a48 	.word	0x20044a48

08006044 <init>:

void init()
{
 8006044:	b580      	push	{r7, lr}
 8006046:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8006048:	2201      	movs	r2, #1
 800604a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800604e:	4808      	ldr	r0, [pc, #32]	; (8006070 <init+0x2c>)
 8006050:	f005 f988 	bl	800b364 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8006054:	4807      	ldr	r0, [pc, #28]	; (8006074 <init+0x30>)
 8006056:	f009 f850 	bl	800f0fa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 800605a:	4807      	ldr	r0, [pc, #28]	; (8006078 <init+0x34>)
 800605c:	f009 f84d 	bl	800f0fa <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8006060:	4806      	ldr	r0, [pc, #24]	; (800607c <init+0x38>)
 8006062:	f009 f84a 	bl	800f0fa <HAL_TIM_Base_Start_IT>

	cppInit();
 8006066:	f001 fce3 	bl	8007a30 <cppInit>

	//path_following_initialize();

}
 800606a:	bf00      	nop
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40021000 	.word	0x40021000
 8006074:	20044b2c 	.word	0x20044b2c
 8006078:	20044cd0 	.word	0x20044cd0
 800607c:	20044a4c 	.word	0x20044a4c

08006080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006084:	f003 fe66 	bl	8009d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006088:	f000 f82a 	bl	80060e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800608c:	f000 fdbc 	bl	8006c08 <MX_GPIO_Init>
  MX_DMA_Init();
 8006090:	f000 fd8a 	bl	8006ba8 <MX_DMA_Init>
  MX_I2C2_Init();
 8006094:	f000 f9e8 	bl	8006468 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8006098:	f000 fa14 	bl	80064c4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 800609c:	f000 fa32 	bl	8006504 <MX_SPI2_Init>
  MX_TIM1_Init();
 80060a0:	f000 fa66 	bl	8006570 <MX_TIM1_Init>
  MX_TIM4_Init();
 80060a4:	f000 fb70 	bl	8006788 <MX_TIM4_Init>
  MX_TIM8_Init();
 80060a8:	f000 fc3c 	bl	8006924 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80060ac:	f000 fd52 	bl	8006b54 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80060b0:	f00a fff6 	bl	80110a0 <MX_FATFS_Init>
  MX_TIM6_Init();
 80060b4:	f000 fbcc 	bl	8006850 <MX_TIM6_Init>
  MX_I2C1_Init();
 80060b8:	f000 f9a8 	bl	800640c <MX_I2C1_Init>
  MX_TIM3_Init();
 80060bc:	f000 fb00 	bl	80066c0 <MX_TIM3_Init>
  MX_TIM10_Init();
 80060c0:	f000 fc88 	bl	80069d4 <MX_TIM10_Init>
  MX_TIM11_Init();
 80060c4:	f000 fcd4 	bl	8006a70 <MX_TIM11_Init>
  MX_ADC2_Init();
 80060c8:	f000 f898 	bl	80061fc <MX_ADC2_Init>
  MX_TIM7_Init();
 80060cc:	f000 fbf6 	bl	80068bc <MX_TIM7_Init>
  MX_TIM13_Init();
 80060d0:	f000 fd1c 	bl	8006b0c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80060d4:	f7ff ffb6 	bl	8006044 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80060d8:	f001 fda6 	bl	8007c28 <cppLoop>
 80060dc:	e7fc      	b.n	80060d8 <main+0x58>
	...

080060e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b0a4      	sub	sp, #144	; 0x90
 80060e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80060ea:	2234      	movs	r2, #52	; 0x34
 80060ec:	2100      	movs	r1, #0
 80060ee:	4618      	mov	r0, r3
 80060f0:	f00f fc16 	bl	8015920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80060f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80060f8:	2200      	movs	r2, #0
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	609a      	str	r2, [r3, #8]
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006104:	f107 030c 	add.w	r3, r7, #12
 8006108:	223c      	movs	r2, #60	; 0x3c
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f00f fc07 	bl	8015920 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	2300      	movs	r3, #0
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	4b37      	ldr	r3, [pc, #220]	; (80061f4 <SystemClock_Config+0x114>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	4a36      	ldr	r2, [pc, #216]	; (80061f4 <SystemClock_Config+0x114>)
 800611c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006120:	6413      	str	r3, [r2, #64]	; 0x40
 8006122:	4b34      	ldr	r3, [pc, #208]	; (80061f4 <SystemClock_Config+0x114>)
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612a:	60bb      	str	r3, [r7, #8]
 800612c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800612e:	2300      	movs	r3, #0
 8006130:	607b      	str	r3, [r7, #4]
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <SystemClock_Config+0x118>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a30      	ldr	r2, [pc, #192]	; (80061f8 <SystemClock_Config+0x118>)
 8006138:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <SystemClock_Config+0x118>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006146:	607b      	str	r3, [r7, #4]
 8006148:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800614a:	2301      	movs	r3, #1
 800614c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800614e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006152:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006154:	2302      	movs	r3, #2
 8006156:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006158:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800615c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 800615e:	2308      	movs	r3, #8
 8006160:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8006162:	23b4      	movs	r3, #180	; 0xb4
 8006164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006168:	2302      	movs	r3, #2
 800616a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800616e:	2308      	movs	r3, #8
 8006170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006174:	2302      	movs	r3, #2
 8006176:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800617a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800617e:	4618      	mov	r0, r3
 8006180:	f006 fd12 	bl	800cba8 <HAL_RCC_OscConfig>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800618a:	f000 fe7f 	bl	8006e8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800618e:	f006 f88d 	bl	800c2ac <HAL_PWREx_EnableOverDrive>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8006198:	f000 fe78 	bl	8006e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800619c:	230f      	movs	r3, #15
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80061a0:	2302      	movs	r3, #2
 80061a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061a4:	2300      	movs	r3, #0
 80061a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80061a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80061ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80061ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061b2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80061b4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80061b8:	2105      	movs	r1, #5
 80061ba:	4618      	mov	r0, r3
 80061bc:	f006 f8c6 	bl	800c34c <HAL_RCC_ClockConfig>
 80061c0:	4603      	mov	r3, r0
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d001      	beq.n	80061ca <SystemClock_Config+0xea>
  {
    Error_Handler();
 80061c6:	f000 fe61 	bl	8006e8c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80061ca:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80061ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80061d0:	2300      	movs	r3, #0
 80061d2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80061d4:	2300      	movs	r3, #0
 80061d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061d8:	f107 030c 	add.w	r3, r7, #12
 80061dc:	4618      	mov	r0, r3
 80061de:	f006 faa5 	bl	800c72c <HAL_RCCEx_PeriphCLKConfig>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80061e8:	f000 fe50 	bl	8006e8c <Error_Handler>
  }
}
 80061ec:	bf00      	nop
 80061ee:	3790      	adds	r7, #144	; 0x90
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	40023800 	.word	0x40023800
 80061f8:	40007000 	.word	0x40007000

080061fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006202:	463b      	mov	r3, r7
 8006204:	2200      	movs	r2, #0
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	609a      	str	r2, [r3, #8]
 800620c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800620e:	4b7c      	ldr	r3, [pc, #496]	; (8006400 <MX_ADC2_Init+0x204>)
 8006210:	4a7c      	ldr	r2, [pc, #496]	; (8006404 <MX_ADC2_Init+0x208>)
 8006212:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006214:	4b7a      	ldr	r3, [pc, #488]	; (8006400 <MX_ADC2_Init+0x204>)
 8006216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800621a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800621c:	4b78      	ldr	r3, [pc, #480]	; (8006400 <MX_ADC2_Init+0x204>)
 800621e:	2200      	movs	r2, #0
 8006220:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006222:	4b77      	ldr	r3, [pc, #476]	; (8006400 <MX_ADC2_Init+0x204>)
 8006224:	2201      	movs	r2, #1
 8006226:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006228:	4b75      	ldr	r3, [pc, #468]	; (8006400 <MX_ADC2_Init+0x204>)
 800622a:	2201      	movs	r2, #1
 800622c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800622e:	4b74      	ldr	r3, [pc, #464]	; (8006400 <MX_ADC2_Init+0x204>)
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006236:	4b72      	ldr	r3, [pc, #456]	; (8006400 <MX_ADC2_Init+0x204>)
 8006238:	2200      	movs	r2, #0
 800623a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800623c:	4b70      	ldr	r3, [pc, #448]	; (8006400 <MX_ADC2_Init+0x204>)
 800623e:	4a72      	ldr	r2, [pc, #456]	; (8006408 <MX_ADC2_Init+0x20c>)
 8006240:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006242:	4b6f      	ldr	r3, [pc, #444]	; (8006400 <MX_ADC2_Init+0x204>)
 8006244:	2200      	movs	r2, #0
 8006246:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8006248:	4b6d      	ldr	r3, [pc, #436]	; (8006400 <MX_ADC2_Init+0x204>)
 800624a:	220e      	movs	r2, #14
 800624c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800624e:	4b6c      	ldr	r3, [pc, #432]	; (8006400 <MX_ADC2_Init+0x204>)
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006256:	4b6a      	ldr	r3, [pc, #424]	; (8006400 <MX_ADC2_Init+0x204>)
 8006258:	2201      	movs	r2, #1
 800625a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800625c:	4868      	ldr	r0, [pc, #416]	; (8006400 <MX_ADC2_Init+0x204>)
 800625e:	f003 fe0d 	bl	8009e7c <HAL_ADC_Init>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d001      	beq.n	800626c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006268:	f000 fe10 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800626c:	230a      	movs	r3, #10
 800626e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006270:	2301      	movs	r3, #1
 8006272:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8006274:	2306      	movs	r3, #6
 8006276:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006278:	463b      	mov	r3, r7
 800627a:	4619      	mov	r1, r3
 800627c:	4860      	ldr	r0, [pc, #384]	; (8006400 <MX_ADC2_Init+0x204>)
 800627e:	f003 ff51 	bl	800a124 <HAL_ADC_ConfigChannel>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006288:	f000 fe00 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800628c:	230b      	movs	r3, #11
 800628e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006290:	2302      	movs	r3, #2
 8006292:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006294:	463b      	mov	r3, r7
 8006296:	4619      	mov	r1, r3
 8006298:	4859      	ldr	r0, [pc, #356]	; (8006400 <MX_ADC2_Init+0x204>)
 800629a:	f003 ff43 	bl	800a124 <HAL_ADC_ConfigChannel>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80062a4:	f000 fdf2 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80062a8:	230c      	movs	r3, #12
 80062aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80062ac:	2303      	movs	r3, #3
 80062ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062b0:	463b      	mov	r3, r7
 80062b2:	4619      	mov	r1, r3
 80062b4:	4852      	ldr	r0, [pc, #328]	; (8006400 <MX_ADC2_Init+0x204>)
 80062b6:	f003 ff35 	bl	800a124 <HAL_ADC_ConfigChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d001      	beq.n	80062c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80062c0:	f000 fde4 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80062c4:	230d      	movs	r3, #13
 80062c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80062c8:	2304      	movs	r3, #4
 80062ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062cc:	463b      	mov	r3, r7
 80062ce:	4619      	mov	r1, r3
 80062d0:	484b      	ldr	r0, [pc, #300]	; (8006400 <MX_ADC2_Init+0x204>)
 80062d2:	f003 ff27 	bl	800a124 <HAL_ADC_ConfigChannel>
 80062d6:	4603      	mov	r3, r0
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80062dc:	f000 fdd6 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80062e4:	2305      	movs	r3, #5
 80062e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80062e8:	463b      	mov	r3, r7
 80062ea:	4619      	mov	r1, r3
 80062ec:	4844      	ldr	r0, [pc, #272]	; (8006400 <MX_ADC2_Init+0x204>)
 80062ee:	f003 ff19 	bl	800a124 <HAL_ADC_ConfigChannel>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80062f8:	f000 fdc8 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80062fc:	2301      	movs	r3, #1
 80062fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006300:	2306      	movs	r3, #6
 8006302:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006304:	463b      	mov	r3, r7
 8006306:	4619      	mov	r1, r3
 8006308:	483d      	ldr	r0, [pc, #244]	; (8006400 <MX_ADC2_Init+0x204>)
 800630a:	f003 ff0b 	bl	800a124 <HAL_ADC_ConfigChannel>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006314:	f000 fdba 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006318:	2302      	movs	r3, #2
 800631a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800631c:	2307      	movs	r3, #7
 800631e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006320:	463b      	mov	r3, r7
 8006322:	4619      	mov	r1, r3
 8006324:	4836      	ldr	r0, [pc, #216]	; (8006400 <MX_ADC2_Init+0x204>)
 8006326:	f003 fefd 	bl	800a124 <HAL_ADC_ConfigChannel>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d001      	beq.n	8006334 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006330:	f000 fdac 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006334:	2303      	movs	r3, #3
 8006336:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006338:	2308      	movs	r3, #8
 800633a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800633c:	463b      	mov	r3, r7
 800633e:	4619      	mov	r1, r3
 8006340:	482f      	ldr	r0, [pc, #188]	; (8006400 <MX_ADC2_Init+0x204>)
 8006342:	f003 feef 	bl	800a124 <HAL_ADC_ConfigChannel>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800634c:	f000 fd9e 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006350:	2304      	movs	r3, #4
 8006352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006354:	2309      	movs	r3, #9
 8006356:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006358:	463b      	mov	r3, r7
 800635a:	4619      	mov	r1, r3
 800635c:	4828      	ldr	r0, [pc, #160]	; (8006400 <MX_ADC2_Init+0x204>)
 800635e:	f003 fee1 	bl	800a124 <HAL_ADC_ConfigChannel>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d001      	beq.n	800636c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006368:	f000 fd90 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800636c:	2305      	movs	r3, #5
 800636e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006370:	230a      	movs	r3, #10
 8006372:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006374:	463b      	mov	r3, r7
 8006376:	4619      	mov	r1, r3
 8006378:	4821      	ldr	r0, [pc, #132]	; (8006400 <MX_ADC2_Init+0x204>)
 800637a:	f003 fed3 	bl	800a124 <HAL_ADC_ConfigChannel>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8006384:	f000 fd82 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006388:	2306      	movs	r3, #6
 800638a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800638c:	230b      	movs	r3, #11
 800638e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006390:	463b      	mov	r3, r7
 8006392:	4619      	mov	r1, r3
 8006394:	481a      	ldr	r0, [pc, #104]	; (8006400 <MX_ADC2_Init+0x204>)
 8006396:	f003 fec5 	bl	800a124 <HAL_ADC_ConfigChannel>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d001      	beq.n	80063a4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80063a0:	f000 fd74 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80063a4:	2307      	movs	r3, #7
 80063a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80063a8:	230c      	movs	r3, #12
 80063aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063ac:	463b      	mov	r3, r7
 80063ae:	4619      	mov	r1, r3
 80063b0:	4813      	ldr	r0, [pc, #76]	; (8006400 <MX_ADC2_Init+0x204>)
 80063b2:	f003 feb7 	bl	800a124 <HAL_ADC_ConfigChannel>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80063bc:	f000 fd66 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80063c0:	2308      	movs	r3, #8
 80063c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80063c4:	230d      	movs	r3, #13
 80063c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063c8:	463b      	mov	r3, r7
 80063ca:	4619      	mov	r1, r3
 80063cc:	480c      	ldr	r0, [pc, #48]	; (8006400 <MX_ADC2_Init+0x204>)
 80063ce:	f003 fea9 	bl	800a124 <HAL_ADC_ConfigChannel>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80063d8:	f000 fd58 	bl	8006e8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80063dc:	2309      	movs	r3, #9
 80063de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80063e0:	230e      	movs	r3, #14
 80063e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80063e4:	463b      	mov	r3, r7
 80063e6:	4619      	mov	r1, r3
 80063e8:	4805      	ldr	r0, [pc, #20]	; (8006400 <MX_ADC2_Init+0x204>)
 80063ea:	f003 fe9b 	bl	800a124 <HAL_ADC_ConfigChannel>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80063f4:	f000 fd4a 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80063f8:	bf00      	nop
 80063fa:	3710      	adds	r7, #16
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	200448d0 	.word	0x200448d0
 8006404:	40012100 	.word	0x40012100
 8006408:	0f000001 	.word	0x0f000001

0800640c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <MX_I2C1_Init+0x50>)
 8006412:	4a13      	ldr	r2, [pc, #76]	; (8006460 <MX_I2C1_Init+0x54>)
 8006414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006416:	4b11      	ldr	r3, [pc, #68]	; (800645c <MX_I2C1_Init+0x50>)
 8006418:	4a12      	ldr	r2, [pc, #72]	; (8006464 <MX_I2C1_Init+0x58>)
 800641a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <MX_I2C1_Init+0x50>)
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006422:	4b0e      	ldr	r3, [pc, #56]	; (800645c <MX_I2C1_Init+0x50>)
 8006424:	2200      	movs	r2, #0
 8006426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <MX_I2C1_Init+0x50>)
 800642a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800642e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006430:	4b0a      	ldr	r3, [pc, #40]	; (800645c <MX_I2C1_Init+0x50>)
 8006432:	2200      	movs	r2, #0
 8006434:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006436:	4b09      	ldr	r3, [pc, #36]	; (800645c <MX_I2C1_Init+0x50>)
 8006438:	2200      	movs	r2, #0
 800643a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800643c:	4b07      	ldr	r3, [pc, #28]	; (800645c <MX_I2C1_Init+0x50>)
 800643e:	2200      	movs	r2, #0
 8006440:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006442:	4b06      	ldr	r3, [pc, #24]	; (800645c <MX_I2C1_Init+0x50>)
 8006444:	2280      	movs	r2, #128	; 0x80
 8006446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006448:	4804      	ldr	r0, [pc, #16]	; (800645c <MX_I2C1_Init+0x50>)
 800644a:	f004 ffa5 	bl	800b398 <HAL_I2C_Init>
 800644e:	4603      	mov	r3, r0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d001      	beq.n	8006458 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006454:	f000 fd1a 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006458:	bf00      	nop
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20044918 	.word	0x20044918
 8006460:	40005400 	.word	0x40005400
 8006464:	000186a0 	.word	0x000186a0

08006468 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800646c:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <MX_I2C2_Init+0x50>)
 800646e:	4a13      	ldr	r2, [pc, #76]	; (80064bc <MX_I2C2_Init+0x54>)
 8006470:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006472:	4b11      	ldr	r3, [pc, #68]	; (80064b8 <MX_I2C2_Init+0x50>)
 8006474:	4a12      	ldr	r2, [pc, #72]	; (80064c0 <MX_I2C2_Init+0x58>)
 8006476:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <MX_I2C2_Init+0x50>)
 800647a:	2200      	movs	r2, #0
 800647c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800647e:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <MX_I2C2_Init+0x50>)
 8006480:	2200      	movs	r2, #0
 8006482:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006484:	4b0c      	ldr	r3, [pc, #48]	; (80064b8 <MX_I2C2_Init+0x50>)
 8006486:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800648a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <MX_I2C2_Init+0x50>)
 800648e:	2200      	movs	r2, #0
 8006490:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <MX_I2C2_Init+0x50>)
 8006494:	2200      	movs	r2, #0
 8006496:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006498:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <MX_I2C2_Init+0x50>)
 800649a:	2200      	movs	r2, #0
 800649c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <MX_I2C2_Init+0x50>)
 80064a0:	2280      	movs	r2, #128	; 0x80
 80064a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80064a4:	4804      	ldr	r0, [pc, #16]	; (80064b8 <MX_I2C2_Init+0x50>)
 80064a6:	f004 ff77 	bl	800b398 <HAL_I2C_Init>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d001      	beq.n	80064b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80064b0:	f000 fcec 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80064b4:	bf00      	nop
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	200449ac 	.word	0x200449ac
 80064bc:	40005800 	.word	0x40005800
 80064c0:	000186a0 	.word	0x000186a0

080064c4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80064c8:	4b0c      	ldr	r3, [pc, #48]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064ca:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <MX_SDIO_SD_Init+0x3c>)
 80064cc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80064ce:	4b0b      	ldr	r3, [pc, #44]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80064d4:	4b09      	ldr	r3, [pc, #36]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80064da:	4b08      	ldr	r3, [pc, #32]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064dc:	2200      	movs	r2, #0
 80064de:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80064e0:	4b06      	ldr	r3, [pc, #24]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80064e6:	4b05      	ldr	r3, [pc, #20]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80064ec:	4b03      	ldr	r3, [pc, #12]	; (80064fc <MX_SDIO_SD_Init+0x38>)
 80064ee:	2202      	movs	r2, #2
 80064f0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80064f2:	bf00      	nop
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20044bac 	.word	0x20044bac
 8006500:	40012c00 	.word	0x40012c00

08006504 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006508:	4b17      	ldr	r3, [pc, #92]	; (8006568 <MX_SPI2_Init+0x64>)
 800650a:	4a18      	ldr	r2, [pc, #96]	; (800656c <MX_SPI2_Init+0x68>)
 800650c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800650e:	4b16      	ldr	r3, [pc, #88]	; (8006568 <MX_SPI2_Init+0x64>)
 8006510:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006514:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006516:	4b14      	ldr	r3, [pc, #80]	; (8006568 <MX_SPI2_Init+0x64>)
 8006518:	2200      	movs	r2, #0
 800651a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800651c:	4b12      	ldr	r3, [pc, #72]	; (8006568 <MX_SPI2_Init+0x64>)
 800651e:	2200      	movs	r2, #0
 8006520:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006522:	4b11      	ldr	r3, [pc, #68]	; (8006568 <MX_SPI2_Init+0x64>)
 8006524:	2202      	movs	r2, #2
 8006526:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006528:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <MX_SPI2_Init+0x64>)
 800652a:	2201      	movs	r2, #1
 800652c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800652e:	4b0e      	ldr	r3, [pc, #56]	; (8006568 <MX_SPI2_Init+0x64>)
 8006530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006534:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006536:	4b0c      	ldr	r3, [pc, #48]	; (8006568 <MX_SPI2_Init+0x64>)
 8006538:	2228      	movs	r2, #40	; 0x28
 800653a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800653c:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <MX_SPI2_Init+0x64>)
 800653e:	2200      	movs	r2, #0
 8006540:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <MX_SPI2_Init+0x64>)
 8006544:	2200      	movs	r2, #0
 8006546:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <MX_SPI2_Init+0x64>)
 800654a:	2200      	movs	r2, #0
 800654c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <MX_SPI2_Init+0x64>)
 8006550:	220a      	movs	r2, #10
 8006552:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006554:	4804      	ldr	r0, [pc, #16]	; (8006568 <MX_SPI2_Init+0x64>)
 8006556:	f008 f851 	bl	800e5fc <HAL_SPI_Init>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006560:	f000 fc94 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006564:	bf00      	nop
 8006566:	bd80      	pop	{r7, pc}
 8006568:	200447f8 	.word	0x200447f8
 800656c:	40003800 	.word	0x40003800

08006570 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b09a      	sub	sp, #104	; 0x68
 8006574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006576:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800657a:	2224      	movs	r2, #36	; 0x24
 800657c:	2100      	movs	r1, #0
 800657e:	4618      	mov	r0, r3
 8006580:	f00f f9ce 	bl	8015920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006584:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006588:	2200      	movs	r2, #0
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800658e:	f107 0320 	add.w	r3, r7, #32
 8006592:	2200      	movs	r2, #0
 8006594:	601a      	str	r2, [r3, #0]
 8006596:	605a      	str	r2, [r3, #4]
 8006598:	609a      	str	r2, [r3, #8]
 800659a:	60da      	str	r2, [r3, #12]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	615a      	str	r2, [r3, #20]
 80065a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80065a2:	463b      	mov	r3, r7
 80065a4:	2220      	movs	r2, #32
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f00f f9b9 	bl	8015920 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80065ae:	4b42      	ldr	r3, [pc, #264]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065b0:	4a42      	ldr	r2, [pc, #264]	; (80066bc <MX_TIM1_Init+0x14c>)
 80065b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80065b4:	4b40      	ldr	r3, [pc, #256]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065ba:	4b3f      	ldr	r3, [pc, #252]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065bc:	2200      	movs	r2, #0
 80065be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80065c0:	4b3d      	ldr	r3, [pc, #244]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80065c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80065c8:	4b3b      	ldr	r3, [pc, #236]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065ca:	2200      	movs	r2, #0
 80065cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80065ce:	4b3a      	ldr	r3, [pc, #232]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065d0:	2200      	movs	r2, #0
 80065d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80065d4:	4b38      	ldr	r3, [pc, #224]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80065da:	4837      	ldr	r0, [pc, #220]	; (80066b8 <MX_TIM1_Init+0x148>)
 80065dc:	f008 fdb1 	bl	800f142 <HAL_TIM_PWM_Init>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80065e6:	f000 fc51 	bl	8006e8c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80065ea:	2303      	movs	r3, #3
 80065ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80065ee:	2300      	movs	r3, #0
 80065f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80065f2:	2301      	movs	r3, #1
 80065f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80065f6:	2300      	movs	r3, #0
 80065f8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80065fa:	2300      	movs	r3, #0
 80065fc:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80065fe:	2300      	movs	r3, #0
 8006600:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006602:	2301      	movs	r3, #1
 8006604:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006606:	2300      	movs	r3, #0
 8006608:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800660e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006612:	4619      	mov	r1, r3
 8006614:	4828      	ldr	r0, [pc, #160]	; (80066b8 <MX_TIM1_Init+0x148>)
 8006616:	f008 fdfd 	bl	800f214 <HAL_TIM_Encoder_Init>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006620:	f000 fc34 	bl	8006e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006624:	2300      	movs	r3, #0
 8006626:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006628:	2300      	movs	r3, #0
 800662a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800662c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006630:	4619      	mov	r1, r3
 8006632:	4821      	ldr	r0, [pc, #132]	; (80066b8 <MX_TIM1_Init+0x148>)
 8006634:	f009 fb24 	bl	800fc80 <HAL_TIMEx_MasterConfigSynchronization>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d001      	beq.n	8006642 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800663e:	f000 fc25 	bl	8006e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006642:	2360      	movs	r3, #96	; 0x60
 8006644:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006646:	2300      	movs	r3, #0
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800664a:	2300      	movs	r3, #0
 800664c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800664e:	2300      	movs	r3, #0
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006652:	2300      	movs	r3, #0
 8006654:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006656:	2300      	movs	r3, #0
 8006658:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800665a:	2300      	movs	r3, #0
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800665e:	f107 0320 	add.w	r3, r7, #32
 8006662:	2208      	movs	r2, #8
 8006664:	4619      	mov	r1, r3
 8006666:	4814      	ldr	r0, [pc, #80]	; (80066b8 <MX_TIM1_Init+0x148>)
 8006668:	f008 ffa6 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006672:	f000 fc0b 	bl	8006e8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006676:	2300      	movs	r3, #0
 8006678:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800667a:	2300      	movs	r3, #0
 800667c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800667e:	2300      	movs	r3, #0
 8006680:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006682:	2300      	movs	r3, #0
 8006684:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006686:	2300      	movs	r3, #0
 8006688:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800668a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800668e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006690:	2300      	movs	r3, #0
 8006692:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006694:	463b      	mov	r3, r7
 8006696:	4619      	mov	r1, r3
 8006698:	4807      	ldr	r0, [pc, #28]	; (80066b8 <MX_TIM1_Init+0x148>)
 800669a:	f009 fb6d 	bl	800fd78 <HAL_TIMEx_ConfigBreakDeadTime>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80066a4:	f000 fbf2 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80066a8:	4803      	ldr	r0, [pc, #12]	; (80066b8 <MX_TIM1_Init+0x148>)
 80066aa:	f000 ffdf 	bl	800766c <HAL_TIM_MspPostInit>

}
 80066ae:	bf00      	nop
 80066b0:	3768      	adds	r7, #104	; 0x68
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20044b6c 	.word	0x20044b6c
 80066bc:	40010000 	.word	0x40010000

080066c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08a      	sub	sp, #40	; 0x28
 80066c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066c6:	f107 0320 	add.w	r3, r7, #32
 80066ca:	2200      	movs	r2, #0
 80066cc:	601a      	str	r2, [r3, #0]
 80066ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066d0:	1d3b      	adds	r3, r7, #4
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	605a      	str	r2, [r3, #4]
 80066d8:	609a      	str	r2, [r3, #8]
 80066da:	60da      	str	r2, [r3, #12]
 80066dc:	611a      	str	r2, [r3, #16]
 80066de:	615a      	str	r2, [r3, #20]
 80066e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80066e2:	4b27      	ldr	r3, [pc, #156]	; (8006780 <MX_TIM3_Init+0xc0>)
 80066e4:	4a27      	ldr	r2, [pc, #156]	; (8006784 <MX_TIM3_Init+0xc4>)
 80066e6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80066e8:	4b25      	ldr	r3, [pc, #148]	; (8006780 <MX_TIM3_Init+0xc0>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ee:	4b24      	ldr	r3, [pc, #144]	; (8006780 <MX_TIM3_Init+0xc0>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80066f4:	4b22      	ldr	r3, [pc, #136]	; (8006780 <MX_TIM3_Init+0xc0>)
 80066f6:	f241 1293 	movw	r2, #4499	; 0x1193
 80066fa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <MX_TIM3_Init+0xc0>)
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006702:	4b1f      	ldr	r3, [pc, #124]	; (8006780 <MX_TIM3_Init+0xc0>)
 8006704:	2200      	movs	r2, #0
 8006706:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006708:	481d      	ldr	r0, [pc, #116]	; (8006780 <MX_TIM3_Init+0xc0>)
 800670a:	f008 fd1a 	bl	800f142 <HAL_TIM_PWM_Init>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d001      	beq.n	8006718 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006714:	f000 fbba 	bl	8006e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006718:	2300      	movs	r3, #0
 800671a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800671c:	2300      	movs	r3, #0
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006720:	f107 0320 	add.w	r3, r7, #32
 8006724:	4619      	mov	r1, r3
 8006726:	4816      	ldr	r0, [pc, #88]	; (8006780 <MX_TIM3_Init+0xc0>)
 8006728:	f009 faaa 	bl	800fc80 <HAL_TIMEx_MasterConfigSynchronization>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006732:	f000 fbab 	bl	8006e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006736:	2360      	movs	r3, #96	; 0x60
 8006738:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800673a:	2300      	movs	r3, #0
 800673c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800673e:	2300      	movs	r3, #0
 8006740:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006746:	1d3b      	adds	r3, r7, #4
 8006748:	2200      	movs	r2, #0
 800674a:	4619      	mov	r1, r3
 800674c:	480c      	ldr	r0, [pc, #48]	; (8006780 <MX_TIM3_Init+0xc0>)
 800674e:	f008 ff33 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006758:	f000 fb98 	bl	8006e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	2204      	movs	r2, #4
 8006760:	4619      	mov	r1, r3
 8006762:	4807      	ldr	r0, [pc, #28]	; (8006780 <MX_TIM3_Init+0xc0>)
 8006764:	f008 ff28 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800676e:	f000 fb8d 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006772:	4803      	ldr	r0, [pc, #12]	; (8006780 <MX_TIM3_Init+0xc0>)
 8006774:	f000 ff7a 	bl	800766c <HAL_TIM_MspPostInit>

}
 8006778:	bf00      	nop
 800677a:	3728      	adds	r7, #40	; 0x28
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	20044a04 	.word	0x20044a04
 8006784:	40000400 	.word	0x40000400

08006788 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b08a      	sub	sp, #40	; 0x28
 800678c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800678e:	f107 0320 	add.w	r3, r7, #32
 8006792:	2200      	movs	r2, #0
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	605a      	str	r2, [r3, #4]
 80067a0:	609a      	str	r2, [r3, #8]
 80067a2:	60da      	str	r2, [r3, #12]
 80067a4:	611a      	str	r2, [r3, #16]
 80067a6:	615a      	str	r2, [r3, #20]
 80067a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80067aa:	4b27      	ldr	r3, [pc, #156]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067ac:	4a27      	ldr	r2, [pc, #156]	; (800684c <MX_TIM4_Init+0xc4>)
 80067ae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80067b0:	4b25      	ldr	r3, [pc, #148]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80067bc:	4b22      	ldr	r3, [pc, #136]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067be:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80067c2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067c4:	4b20      	ldr	r3, [pc, #128]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067ca:	4b1f      	ldr	r3, [pc, #124]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80067d0:	481d      	ldr	r0, [pc, #116]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067d2:	f008 fcb6 	bl	800f142 <HAL_TIM_PWM_Init>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80067dc:	f000 fb56 	bl	8006e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80067e0:	2300      	movs	r3, #0
 80067e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80067e8:	f107 0320 	add.w	r3, r7, #32
 80067ec:	4619      	mov	r1, r3
 80067ee:	4816      	ldr	r0, [pc, #88]	; (8006848 <MX_TIM4_Init+0xc0>)
 80067f0:	f009 fa46 	bl	800fc80 <HAL_TIMEx_MasterConfigSynchronization>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80067fa:	f000 fb47 	bl	8006e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067fe:	2360      	movs	r3, #96	; 0x60
 8006800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006806:	2300      	movs	r3, #0
 8006808:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	2208      	movs	r2, #8
 8006812:	4619      	mov	r1, r3
 8006814:	480c      	ldr	r0, [pc, #48]	; (8006848 <MX_TIM4_Init+0xc0>)
 8006816:	f008 fecf 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006820:	f000 fb34 	bl	8006e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006824:	1d3b      	adds	r3, r7, #4
 8006826:	220c      	movs	r2, #12
 8006828:	4619      	mov	r1, r3
 800682a:	4807      	ldr	r0, [pc, #28]	; (8006848 <MX_TIM4_Init+0xc0>)
 800682c:	f008 fec4 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006836:	f000 fb29 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800683a:	4803      	ldr	r0, [pc, #12]	; (8006848 <MX_TIM4_Init+0xc0>)
 800683c:	f000 ff16 	bl	800766c <HAL_TIM_MspPostInit>

}
 8006840:	bf00      	nop
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	20044890 	.word	0x20044890
 800684c:	40000800 	.word	0x40000800

08006850 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006856:	463b      	mov	r3, r7
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800685e:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <MX_TIM6_Init+0x64>)
 8006860:	4a15      	ldr	r2, [pc, #84]	; (80068b8 <MX_TIM6_Init+0x68>)
 8006862:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006864:	4b13      	ldr	r3, [pc, #76]	; (80068b4 <MX_TIM6_Init+0x64>)
 8006866:	2259      	movs	r2, #89	; 0x59
 8006868:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <MX_TIM6_Init+0x64>)
 800686c:	2200      	movs	r2, #0
 800686e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006870:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <MX_TIM6_Init+0x64>)
 8006872:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006876:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006878:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <MX_TIM6_Init+0x64>)
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800687e:	480d      	ldr	r0, [pc, #52]	; (80068b4 <MX_TIM6_Init+0x64>)
 8006880:	f008 fc10 	bl	800f0a4 <HAL_TIM_Base_Init>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800688a:	f000 faff 	bl	8006e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800688e:	2300      	movs	r3, #0
 8006890:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006892:	2300      	movs	r3, #0
 8006894:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006896:	463b      	mov	r3, r7
 8006898:	4619      	mov	r1, r3
 800689a:	4806      	ldr	r0, [pc, #24]	; (80068b4 <MX_TIM6_Init+0x64>)
 800689c:	f009 f9f0 	bl	800fc80 <HAL_TIMEx_MasterConfigSynchronization>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80068a6:	f000 faf1 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80068aa:	bf00      	nop
 80068ac:	3708      	adds	r7, #8
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20044b2c 	.word	0x20044b2c
 80068b8:	40001000 	.word	0x40001000

080068bc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80068c2:	463b      	mov	r3, r7
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80068ca:	4b14      	ldr	r3, [pc, #80]	; (800691c <MX_TIM7_Init+0x60>)
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <MX_TIM7_Init+0x64>)
 80068ce:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80068d0:	4b12      	ldr	r3, [pc, #72]	; (800691c <MX_TIM7_Init+0x60>)
 80068d2:	22b3      	movs	r2, #179	; 0xb3
 80068d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068d6:	4b11      	ldr	r3, [pc, #68]	; (800691c <MX_TIM7_Init+0x60>)
 80068d8:	2200      	movs	r2, #0
 80068da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <MX_TIM7_Init+0x60>)
 80068de:	2231      	movs	r2, #49	; 0x31
 80068e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80068e2:	4b0e      	ldr	r3, [pc, #56]	; (800691c <MX_TIM7_Init+0x60>)
 80068e4:	2280      	movs	r2, #128	; 0x80
 80068e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80068e8:	480c      	ldr	r0, [pc, #48]	; (800691c <MX_TIM7_Init+0x60>)
 80068ea:	f008 fbdb 	bl	800f0a4 <HAL_TIM_Base_Init>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d001      	beq.n	80068f8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80068f4:	f000 faca 	bl	8006e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068f8:	2300      	movs	r3, #0
 80068fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068fc:	2300      	movs	r3, #0
 80068fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006900:	463b      	mov	r3, r7
 8006902:	4619      	mov	r1, r3
 8006904:	4805      	ldr	r0, [pc, #20]	; (800691c <MX_TIM7_Init+0x60>)
 8006906:	f009 f9bb 	bl	800fc80 <HAL_TIMEx_MasterConfigSynchronization>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006910:	f000 fabc 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006914:	bf00      	nop
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20044cd0 	.word	0x20044cd0
 8006920:	40001400 	.word	0x40001400

08006924 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800692a:	f107 030c 	add.w	r3, r7, #12
 800692e:	2224      	movs	r2, #36	; 0x24
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f00e fff4 	bl	8015920 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006938:	1d3b      	adds	r3, r7, #4
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
 800693e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006940:	4b22      	ldr	r3, [pc, #136]	; (80069cc <MX_TIM8_Init+0xa8>)
 8006942:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <MX_TIM8_Init+0xac>)
 8006944:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006946:	4b21      	ldr	r3, [pc, #132]	; (80069cc <MX_TIM8_Init+0xa8>)
 8006948:	2200      	movs	r2, #0
 800694a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800694c:	4b1f      	ldr	r3, [pc, #124]	; (80069cc <MX_TIM8_Init+0xa8>)
 800694e:	2210      	movs	r2, #16
 8006950:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006952:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <MX_TIM8_Init+0xa8>)
 8006954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006958:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800695a:	4b1c      	ldr	r3, [pc, #112]	; (80069cc <MX_TIM8_Init+0xa8>)
 800695c:	2200      	movs	r2, #0
 800695e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006960:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <MX_TIM8_Init+0xa8>)
 8006962:	2200      	movs	r2, #0
 8006964:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006966:	4b19      	ldr	r3, [pc, #100]	; (80069cc <MX_TIM8_Init+0xa8>)
 8006968:	2200      	movs	r2, #0
 800696a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800696c:	2303      	movs	r3, #3
 800696e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006974:	2301      	movs	r3, #1
 8006976:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006978:	2300      	movs	r3, #0
 800697a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800697c:	2300      	movs	r3, #0
 800697e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006980:	2300      	movs	r3, #0
 8006982:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006984:	2301      	movs	r3, #1
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006988:	2300      	movs	r3, #0
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800698c:	2300      	movs	r3, #0
 800698e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4619      	mov	r1, r3
 8006996:	480d      	ldr	r0, [pc, #52]	; (80069cc <MX_TIM8_Init+0xa8>)
 8006998:	f008 fc3c 	bl	800f214 <HAL_TIM_Encoder_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80069a2:	f000 fa73 	bl	8006e8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80069a6:	2300      	movs	r3, #0
 80069a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80069aa:	2300      	movs	r3, #0
 80069ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80069ae:	1d3b      	adds	r3, r7, #4
 80069b0:	4619      	mov	r1, r3
 80069b2:	4806      	ldr	r0, [pc, #24]	; (80069cc <MX_TIM8_Init+0xa8>)
 80069b4:	f009 f964 	bl	800fc80 <HAL_TIMEx_MasterConfigSynchronization>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80069be:	f000 fa65 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80069c2:	bf00      	nop
 80069c4:	3730      	adds	r7, #48	; 0x30
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20044850 	.word	0x20044850
 80069d0:	40010400 	.word	0x40010400

080069d4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b088      	sub	sp, #32
 80069d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80069da:	1d3b      	adds	r3, r7, #4
 80069dc:	2200      	movs	r2, #0
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	605a      	str	r2, [r3, #4]
 80069e2:	609a      	str	r2, [r3, #8]
 80069e4:	60da      	str	r2, [r3, #12]
 80069e6:	611a      	str	r2, [r3, #16]
 80069e8:	615a      	str	r2, [r3, #20]
 80069ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <MX_TIM10_Init+0x94>)
 80069ee:	4a1f      	ldr	r2, [pc, #124]	; (8006a6c <MX_TIM10_Init+0x98>)
 80069f0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80069f2:	4b1d      	ldr	r3, [pc, #116]	; (8006a68 <MX_TIM10_Init+0x94>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80069f8:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <MX_TIM10_Init+0x94>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80069fe:	4b1a      	ldr	r3, [pc, #104]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a00:	f242 3227 	movw	r2, #8999	; 0x2327
 8006a04:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006a06:	4b18      	ldr	r3, [pc, #96]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a0e:	2200      	movs	r2, #0
 8006a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006a12:	4815      	ldr	r0, [pc, #84]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a14:	f008 fb46 	bl	800f0a4 <HAL_TIM_Base_Init>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d001      	beq.n	8006a22 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8006a1e:	f000 fa35 	bl	8006e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006a22:	4811      	ldr	r0, [pc, #68]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a24:	f008 fb8d 	bl	800f142 <HAL_TIM_PWM_Init>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8006a2e:	f000 fa2d 	bl	8006e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006a32:	2360      	movs	r3, #96	; 0x60
 8006a34:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006a42:	1d3b      	adds	r3, r7, #4
 8006a44:	2200      	movs	r2, #0
 8006a46:	4619      	mov	r1, r3
 8006a48:	4807      	ldr	r0, [pc, #28]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a4a:	f008 fdb5 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006a54:	f000 fa1a 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006a58:	4803      	ldr	r0, [pc, #12]	; (8006a68 <MX_TIM10_Init+0x94>)
 8006a5a:	f000 fe07 	bl	800766c <HAL_TIM_MspPostInit>

}
 8006a5e:	bf00      	nop
 8006a60:	3720      	adds	r7, #32
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	2004496c 	.word	0x2004496c
 8006a6c:	40014400 	.word	0x40014400

08006a70 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006a76:	1d3b      	adds	r3, r7, #4
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	605a      	str	r2, [r3, #4]
 8006a7e:	609a      	str	r2, [r3, #8]
 8006a80:	60da      	str	r2, [r3, #12]
 8006a82:	611a      	str	r2, [r3, #16]
 8006a84:	615a      	str	r2, [r3, #20]
 8006a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006a88:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006a8a:	4a1f      	ldr	r2, [pc, #124]	; (8006b08 <MX_TIM11_Init+0x98>)
 8006a8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 8006a9a:	4b1a      	ldr	r3, [pc, #104]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006a9c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006aa0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006aa2:	4b18      	ldr	r3, [pc, #96]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006aa8:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8006aae:	4815      	ldr	r0, [pc, #84]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006ab0:	f008 faf8 	bl	800f0a4 <HAL_TIM_Base_Init>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8006aba:	f000 f9e7 	bl	8006e8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8006abe:	4811      	ldr	r0, [pc, #68]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006ac0:	f008 fb3f 	bl	800f142 <HAL_TIM_PWM_Init>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d001      	beq.n	8006ace <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8006aca:	f000 f9df 	bl	8006e8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006ace:	2360      	movs	r3, #96	; 0x60
 8006ad0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006ade:	1d3b      	adds	r3, r7, #4
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4807      	ldr	r0, [pc, #28]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006ae6:	f008 fd67 	bl	800f5b8 <HAL_TIM_PWM_ConfigChannel>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006af0:	f000 f9cc 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006af4:	4803      	ldr	r0, [pc, #12]	; (8006b04 <MX_TIM11_Init+0x94>)
 8006af6:	f000 fdb9 	bl	800766c <HAL_TIM_MspPostInit>

}
 8006afa:	bf00      	nop
 8006afc:	3720      	adds	r7, #32
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20044a8c 	.word	0x20044a8c
 8006b08:	40014800 	.word	0x40014800

08006b0c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006b10:	4b0e      	ldr	r3, [pc, #56]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b12:	4a0f      	ldr	r2, [pc, #60]	; (8006b50 <MX_TIM13_Init+0x44>)
 8006b14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006b16:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b18:	2259      	movs	r2, #89	; 0x59
 8006b1a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b1c:	4b0b      	ldr	r3, [pc, #44]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006b22:	4b0a      	ldr	r3, [pc, #40]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b24:	f242 720f 	movw	r2, #9999	; 0x270f
 8006b28:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b2a:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006b30:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b32:	2280      	movs	r2, #128	; 0x80
 8006b34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006b36:	4805      	ldr	r0, [pc, #20]	; (8006b4c <MX_TIM13_Init+0x40>)
 8006b38:	f008 fab4 	bl	800f0a4 <HAL_TIM_Base_Init>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d001      	beq.n	8006b46 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006b42:	f000 f9a3 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006b46:	bf00      	nop
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20044a4c 	.word	0x20044a4c
 8006b50:	40001c00 	.word	0x40001c00

08006b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b5a:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <MX_USART2_UART_Init+0x50>)
 8006b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006b66:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006b6c:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b6e:	2200      	movs	r2, #0
 8006b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006b78:	4b09      	ldr	r3, [pc, #36]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b7a:	220c      	movs	r2, #12
 8006b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b84:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006b8a:	4805      	ldr	r0, [pc, #20]	; (8006ba0 <MX_USART2_UART_Init+0x4c>)
 8006b8c:	f009 f95a 	bl	800fe44 <HAL_UART_Init>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006b96:	f000 f979 	bl	8006e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006b9a:	bf00      	nop
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20044c30 	.word	0x20044c30
 8006ba4:	40004400 	.word	0x40004400

08006ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006bae:	2300      	movs	r3, #0
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <MX_DMA_Init+0x5c>)
 8006bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb6:	4a13      	ldr	r2, [pc, #76]	; (8006c04 <MX_DMA_Init+0x5c>)
 8006bb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bbe:	4b11      	ldr	r3, [pc, #68]	; (8006c04 <MX_DMA_Init+0x5c>)
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bc6:	607b      	str	r3, [r7, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	203a      	movs	r0, #58	; 0x3a
 8006bd0:	f003 fe33 	bl	800a83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006bd4:	203a      	movs	r0, #58	; 0x3a
 8006bd6:	f003 fe4c 	bl	800a872 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006bda:	2200      	movs	r2, #0
 8006bdc:	2100      	movs	r1, #0
 8006bde:	203b      	movs	r0, #59	; 0x3b
 8006be0:	f003 fe2b 	bl	800a83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006be4:	203b      	movs	r0, #59	; 0x3b
 8006be6:	f003 fe44 	bl	800a872 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006bea:	2200      	movs	r2, #0
 8006bec:	2100      	movs	r1, #0
 8006bee:	2045      	movs	r0, #69	; 0x45
 8006bf0:	f003 fe23 	bl	800a83a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006bf4:	2045      	movs	r0, #69	; 0x45
 8006bf6:	f003 fe3c 	bl	800a872 <HAL_NVIC_EnableIRQ>

}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	40023800 	.word	0x40023800

08006c08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08c      	sub	sp, #48	; 0x30
 8006c0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c0e:	f107 031c 	add.w	r3, r7, #28
 8006c12:	2200      	movs	r2, #0
 8006c14:	601a      	str	r2, [r3, #0]
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	609a      	str	r2, [r3, #8]
 8006c1a:	60da      	str	r2, [r3, #12]
 8006c1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61bb      	str	r3, [r7, #24]
 8006c22:	4b94      	ldr	r3, [pc, #592]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	4a93      	ldr	r2, [pc, #588]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c28:	f043 0310 	orr.w	r3, r3, #16
 8006c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c2e:	4b91      	ldr	r3, [pc, #580]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	617b      	str	r3, [r7, #20]
 8006c3e:	4b8d      	ldr	r3, [pc, #564]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	4a8c      	ldr	r2, [pc, #560]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c48:	6313      	str	r3, [r2, #48]	; 0x30
 8006c4a:	4b8a      	ldr	r3, [pc, #552]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c56:	2300      	movs	r3, #0
 8006c58:	613b      	str	r3, [r7, #16]
 8006c5a:	4b86      	ldr	r3, [pc, #536]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4a85      	ldr	r2, [pc, #532]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c60:	f043 0304 	orr.w	r3, r3, #4
 8006c64:	6313      	str	r3, [r2, #48]	; 0x30
 8006c66:	4b83      	ldr	r3, [pc, #524]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f003 0304 	and.w	r3, r3, #4
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c72:	2300      	movs	r3, #0
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	4b7f      	ldr	r3, [pc, #508]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c7a:	4a7e      	ldr	r2, [pc, #504]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c7c:	f043 0301 	orr.w	r3, r3, #1
 8006c80:	6313      	str	r3, [r2, #48]	; 0x30
 8006c82:	4b7c      	ldr	r3, [pc, #496]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c86:	f003 0301 	and.w	r3, r3, #1
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	4b78      	ldr	r3, [pc, #480]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	4a77      	ldr	r2, [pc, #476]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006c98:	f043 0302 	orr.w	r3, r3, #2
 8006c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c9e:	4b75      	ldr	r3, [pc, #468]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	f003 0302 	and.w	r3, r3, #2
 8006ca6:	60bb      	str	r3, [r7, #8]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006caa:	2300      	movs	r3, #0
 8006cac:	607b      	str	r3, [r7, #4]
 8006cae:	4b71      	ldr	r3, [pc, #452]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	4a70      	ldr	r2, [pc, #448]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006cb4:	f043 0308 	orr.w	r3, r3, #8
 8006cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cba:	4b6e      	ldr	r3, [pc, #440]	; (8006e74 <MX_GPIO_Init+0x26c>)
 8006cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cbe:	f003 0308 	and.w	r3, r3, #8
 8006cc2:	607b      	str	r3, [r7, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ccc:	486a      	ldr	r0, [pc, #424]	; (8006e78 <MX_GPIO_Init+0x270>)
 8006cce:	f004 fb49 	bl	800b364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006cd8:	4868      	ldr	r0, [pc, #416]	; (8006e7c <MX_GPIO_Init+0x274>)
 8006cda:	f004 fb43 	bl	800b364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ce4:	4866      	ldr	r0, [pc, #408]	; (8006e80 <MX_GPIO_Init+0x278>)
 8006ce6:	f004 fb3d 	bl	800b364 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006cea:	2200      	movs	r2, #0
 8006cec:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006cf0:	4864      	ldr	r0, [pc, #400]	; (8006e84 <MX_GPIO_Init+0x27c>)
 8006cf2:	f004 fb37 	bl	800b364 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006cf6:	2304      	movs	r3, #4
 8006cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d02:	f107 031c 	add.w	r3, r7, #28
 8006d06:	4619      	mov	r1, r3
 8006d08:	485b      	ldr	r0, [pc, #364]	; (8006e78 <MX_GPIO_Init+0x270>)
 8006d0a:	f004 f969 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006d0e:	230f      	movs	r3, #15
 8006d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d12:	2303      	movs	r3, #3
 8006d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d1a:	f107 031c 	add.w	r3, r7, #28
 8006d1e:	4619      	mov	r1, r3
 8006d20:	4859      	ldr	r0, [pc, #356]	; (8006e88 <MX_GPIO_Init+0x280>)
 8006d22:	f004 f95d 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006d26:	23e1      	movs	r3, #225	; 0xe1
 8006d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d32:	f107 031c 	add.w	r3, r7, #28
 8006d36:	4619      	mov	r1, r3
 8006d38:	4852      	ldr	r0, [pc, #328]	; (8006e84 <MX_GPIO_Init+0x27c>)
 8006d3a:	f004 f951 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006d3e:	2303      	movs	r3, #3
 8006d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d42:	2303      	movs	r3, #3
 8006d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d4a:	f107 031c 	add.w	r3, r7, #28
 8006d4e:	4619      	mov	r1, r3
 8006d50:	484a      	ldr	r0, [pc, #296]	; (8006e7c <MX_GPIO_Init+0x274>)
 8006d52:	f004 f945 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006d56:	2304      	movs	r3, #4
 8006d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d62:	f107 031c 	add.w	r3, r7, #28
 8006d66:	4619      	mov	r1, r3
 8006d68:	4844      	ldr	r0, [pc, #272]	; (8006e7c <MX_GPIO_Init+0x274>)
 8006d6a:	f004 f939 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006d6e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006d74:	2300      	movs	r3, #0
 8006d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d7c:	f107 031c 	add.w	r3, r7, #28
 8006d80:	4619      	mov	r1, r3
 8006d82:	483d      	ldr	r0, [pc, #244]	; (8006e78 <MX_GPIO_Init+0x270>)
 8006d84:	f004 f92c 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006d88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d96:	2300      	movs	r3, #0
 8006d98:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006d9a:	f107 031c 	add.w	r3, r7, #28
 8006d9e:	4619      	mov	r1, r3
 8006da0:	4835      	ldr	r0, [pc, #212]	; (8006e78 <MX_GPIO_Init+0x270>)
 8006da2:	f004 f91d 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006dac:	2301      	movs	r3, #1
 8006dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006db0:	2300      	movs	r3, #0
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006db4:	2300      	movs	r3, #0
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006db8:	f107 031c 	add.w	r3, r7, #28
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	482f      	ldr	r0, [pc, #188]	; (8006e7c <MX_GPIO_Init+0x274>)
 8006dc0:	f004 f90e 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006dd2:	f107 031c 	add.w	r3, r7, #28
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4829      	ldr	r0, [pc, #164]	; (8006e80 <MX_GPIO_Init+0x278>)
 8006dda:	f004 f901 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006de4:	2301      	movs	r3, #1
 8006de6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006dec:	2300      	movs	r3, #0
 8006dee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006df0:	f107 031c 	add.w	r3, r7, #28
 8006df4:	4619      	mov	r1, r3
 8006df6:	4822      	ldr	r0, [pc, #136]	; (8006e80 <MX_GPIO_Init+0x278>)
 8006df8:	f004 f8f2 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006dfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e02:	2301      	movs	r3, #1
 8006e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e06:	2301      	movs	r3, #1
 8006e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e0e:	f107 031c 	add.w	r3, r7, #28
 8006e12:	4619      	mov	r1, r3
 8006e14:	481a      	ldr	r0, [pc, #104]	; (8006e80 <MX_GPIO_Init+0x278>)
 8006e16:	f004 f8e3 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006e1a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006e1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e20:	2301      	movs	r3, #1
 8006e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e24:	2300      	movs	r3, #0
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e2c:	f107 031c 	add.w	r3, r7, #28
 8006e30:	4619      	mov	r1, r3
 8006e32:	4814      	ldr	r0, [pc, #80]	; (8006e84 <MX_GPIO_Init+0x27c>)
 8006e34:	f004 f8d4 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006e38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e46:	f107 031c 	add.w	r3, r7, #28
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	480d      	ldr	r0, [pc, #52]	; (8006e84 <MX_GPIO_Init+0x27c>)
 8006e4e:	f004 f8c7 	bl	800afe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006e52:	239b      	movs	r3, #155	; 0x9b
 8006e54:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006e56:	2300      	movs	r3, #0
 8006e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006e5e:	f107 031c 	add.w	r3, r7, #28
 8006e62:	4619      	mov	r1, r3
 8006e64:	4806      	ldr	r0, [pc, #24]	; (8006e80 <MX_GPIO_Init+0x278>)
 8006e66:	f004 f8bb 	bl	800afe0 <HAL_GPIO_Init>

}
 8006e6a:	bf00      	nop
 8006e6c:	3730      	adds	r7, #48	; 0x30
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	40023800 	.word	0x40023800
 8006e78:	40021000 	.word	0x40021000
 8006e7c:	40020400 	.word	0x40020400
 8006e80:	40020c00 	.word	0x40020c00
 8006e84:	40020000 	.word	0x40020000
 8006e88:	40020800 	.word	0x40020800

08006e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006e90:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006e92:	e7fe      	b.n	8006e92 <Error_Handler+0x6>

08006e94 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006e98:	bf00      	nop
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea0:	4770      	bx	lr
	...

08006ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eaa:	2300      	movs	r3, #0
 8006eac:	607b      	str	r3, [r7, #4]
 8006eae:	4b10      	ldr	r3, [pc, #64]	; (8006ef0 <HAL_MspInit+0x4c>)
 8006eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eb2:	4a0f      	ldr	r2, [pc, #60]	; (8006ef0 <HAL_MspInit+0x4c>)
 8006eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8006eba:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <HAL_MspInit+0x4c>)
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ec2:	607b      	str	r3, [r7, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	603b      	str	r3, [r7, #0]
 8006eca:	4b09      	ldr	r3, [pc, #36]	; (8006ef0 <HAL_MspInit+0x4c>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	4a08      	ldr	r2, [pc, #32]	; (8006ef0 <HAL_MspInit+0x4c>)
 8006ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ed6:	4b06      	ldr	r3, [pc, #24]	; (8006ef0 <HAL_MspInit+0x4c>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ede:	603b      	str	r3, [r7, #0]
 8006ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ee2:	bf00      	nop
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40023800 	.word	0x40023800

08006ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efc:	f107 031c 	add.w	r3, r7, #28
 8006f00:	2200      	movs	r2, #0
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	605a      	str	r2, [r3, #4]
 8006f06:	609a      	str	r2, [r3, #8]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a4a      	ldr	r2, [pc, #296]	; (800703c <HAL_ADC_MspInit+0x148>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	f040 808e 	bne.w	8007034 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	4b48      	ldr	r3, [pc, #288]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f20:	4a47      	ldr	r2, [pc, #284]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f26:	6453      	str	r3, [r2, #68]	; 0x44
 8006f28:	4b45      	ldr	r3, [pc, #276]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f34:	2300      	movs	r3, #0
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	4b41      	ldr	r3, [pc, #260]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	4a40      	ldr	r2, [pc, #256]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f3e:	f043 0304 	orr.w	r3, r3, #4
 8006f42:	6313      	str	r3, [r2, #48]	; 0x30
 8006f44:	4b3e      	ldr	r3, [pc, #248]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	617b      	str	r3, [r7, #20]
 8006f4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f50:	2300      	movs	r3, #0
 8006f52:	613b      	str	r3, [r7, #16]
 8006f54:	4b3a      	ldr	r3, [pc, #232]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f58:	4a39      	ldr	r2, [pc, #228]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f5a:	f043 0301 	orr.w	r3, r3, #1
 8006f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f60:	4b37      	ldr	r3, [pc, #220]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	4b33      	ldr	r3, [pc, #204]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	4a32      	ldr	r2, [pc, #200]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f76:	f043 0302 	orr.w	r3, r3, #2
 8006f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f7c:	4b30      	ldr	r3, [pc, #192]	; (8007040 <HAL_ADC_MspInit+0x14c>)
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	60fb      	str	r3, [r7, #12]
 8006f86:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006f88:	230f      	movs	r3, #15
 8006f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f90:	2300      	movs	r3, #0
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f94:	f107 031c 	add.w	r3, r7, #28
 8006f98:	4619      	mov	r1, r3
 8006f9a:	482a      	ldr	r0, [pc, #168]	; (8007044 <HAL_ADC_MspInit+0x150>)
 8006f9c:	f004 f820 	bl	800afe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006fa0:	23ff      	movs	r3, #255	; 0xff
 8006fa2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fac:	f107 031c 	add.w	r3, r7, #28
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4825      	ldr	r0, [pc, #148]	; (8007048 <HAL_ADC_MspInit+0x154>)
 8006fb4:	f004 f814 	bl	800afe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006fb8:	2303      	movs	r3, #3
 8006fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006fbc:	2303      	movs	r3, #3
 8006fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006fc4:	f107 031c 	add.w	r3, r7, #28
 8006fc8:	4619      	mov	r1, r3
 8006fca:	4820      	ldr	r0, [pc, #128]	; (800704c <HAL_ADC_MspInit+0x158>)
 8006fcc:	f004 f808 	bl	800afe0 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006fd0:	4b1f      	ldr	r3, [pc, #124]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006fd2:	4a20      	ldr	r2, [pc, #128]	; (8007054 <HAL_ADC_MspInit+0x160>)
 8006fd4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006fd6:	4b1e      	ldr	r3, [pc, #120]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006fd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fdc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006fde:	4b1c      	ldr	r3, [pc, #112]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fe4:	4b1a      	ldr	r3, [pc, #104]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006fea:	4b19      	ldr	r3, [pc, #100]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ff0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ff2:	4b17      	ldr	r3, [pc, #92]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006ff4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ff8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006ffa:	4b15      	ldr	r3, [pc, #84]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8006ffc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007000:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007002:	4b13      	ldr	r3, [pc, #76]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8007004:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007008:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800700a:	4b11      	ldr	r3, [pc, #68]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 800700c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007010:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007012:	4b0f      	ldr	r3, [pc, #60]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8007014:	2200      	movs	r2, #0
 8007016:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007018:	480d      	ldr	r0, [pc, #52]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 800701a:	f003 fc45 	bl	800a8a8 <HAL_DMA_Init>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8007024:	f7ff ff32 	bl	8006e8c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 800702c:	639a      	str	r2, [r3, #56]	; 0x38
 800702e:	4a08      	ldr	r2, [pc, #32]	; (8007050 <HAL_ADC_MspInit+0x15c>)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007034:	bf00      	nop
 8007036:	3730      	adds	r7, #48	; 0x30
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	40012100 	.word	0x40012100
 8007040:	40023800 	.word	0x40023800
 8007044:	40020800 	.word	0x40020800
 8007048:	40020000 	.word	0x40020000
 800704c:	40020400 	.word	0x40020400
 8007050:	20044c70 	.word	0x20044c70
 8007054:	40026440 	.word	0x40026440

08007058 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08c      	sub	sp, #48	; 0x30
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007060:	f107 031c 	add.w	r3, r7, #28
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]
 8007068:	605a      	str	r2, [r3, #4]
 800706a:	609a      	str	r2, [r3, #8]
 800706c:	60da      	str	r2, [r3, #12]
 800706e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a32      	ldr	r2, [pc, #200]	; (8007140 <HAL_I2C_MspInit+0xe8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d12c      	bne.n	80070d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800707a:	2300      	movs	r3, #0
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	4b31      	ldr	r3, [pc, #196]	; (8007144 <HAL_I2C_MspInit+0xec>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	4a30      	ldr	r2, [pc, #192]	; (8007144 <HAL_I2C_MspInit+0xec>)
 8007084:	f043 0302 	orr.w	r3, r3, #2
 8007088:	6313      	str	r3, [r2, #48]	; 0x30
 800708a:	4b2e      	ldr	r3, [pc, #184]	; (8007144 <HAL_I2C_MspInit+0xec>)
 800708c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800708e:	f003 0302 	and.w	r3, r3, #2
 8007092:	61bb      	str	r3, [r7, #24]
 8007094:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007096:	23c0      	movs	r3, #192	; 0xc0
 8007098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800709a:	2312      	movs	r3, #18
 800709c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800709e:	2301      	movs	r3, #1
 80070a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070a2:	2303      	movs	r3, #3
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80070a6:	2304      	movs	r3, #4
 80070a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070aa:	f107 031c 	add.w	r3, r7, #28
 80070ae:	4619      	mov	r1, r3
 80070b0:	4825      	ldr	r0, [pc, #148]	; (8007148 <HAL_I2C_MspInit+0xf0>)
 80070b2:	f003 ff95 	bl	800afe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	4b22      	ldr	r3, [pc, #136]	; (8007144 <HAL_I2C_MspInit+0xec>)
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	4a21      	ldr	r2, [pc, #132]	; (8007144 <HAL_I2C_MspInit+0xec>)
 80070c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80070c4:	6413      	str	r3, [r2, #64]	; 0x40
 80070c6:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <HAL_I2C_MspInit+0xec>)
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80070d2:	e031      	b.n	8007138 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1c      	ldr	r2, [pc, #112]	; (800714c <HAL_I2C_MspInit+0xf4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d12c      	bne.n	8007138 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	4b18      	ldr	r3, [pc, #96]	; (8007144 <HAL_I2C_MspInit+0xec>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	4a17      	ldr	r2, [pc, #92]	; (8007144 <HAL_I2C_MspInit+0xec>)
 80070e8:	f043 0302 	orr.w	r3, r3, #2
 80070ec:	6313      	str	r3, [r2, #48]	; 0x30
 80070ee:	4b15      	ldr	r3, [pc, #84]	; (8007144 <HAL_I2C_MspInit+0xec>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80070fa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80070fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007100:	2312      	movs	r3, #18
 8007102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007104:	2301      	movs	r3, #1
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007108:	2303      	movs	r3, #3
 800710a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800710c:	2304      	movs	r3, #4
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007110:	f107 031c 	add.w	r3, r7, #28
 8007114:	4619      	mov	r1, r3
 8007116:	480c      	ldr	r0, [pc, #48]	; (8007148 <HAL_I2C_MspInit+0xf0>)
 8007118:	f003 ff62 	bl	800afe0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	4b08      	ldr	r3, [pc, #32]	; (8007144 <HAL_I2C_MspInit+0xec>)
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	4a07      	ldr	r2, [pc, #28]	; (8007144 <HAL_I2C_MspInit+0xec>)
 8007126:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800712a:	6413      	str	r3, [r2, #64]	; 0x40
 800712c:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_I2C_MspInit+0xec>)
 800712e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007134:	60fb      	str	r3, [r7, #12]
 8007136:	68fb      	ldr	r3, [r7, #12]
}
 8007138:	bf00      	nop
 800713a:	3730      	adds	r7, #48	; 0x30
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	40005400 	.word	0x40005400
 8007144:	40023800 	.word	0x40023800
 8007148:	40020400 	.word	0x40020400
 800714c:	40005800 	.word	0x40005800

08007150 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007158:	f107 0314 	add.w	r3, r7, #20
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	609a      	str	r2, [r3, #8]
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a69      	ldr	r2, [pc, #420]	; (8007314 <HAL_SD_MspInit+0x1c4>)
 800716e:	4293      	cmp	r3, r2
 8007170:	f040 80cb 	bne.w	800730a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8007174:	2300      	movs	r3, #0
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	4b67      	ldr	r3, [pc, #412]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 800717a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800717c:	4a66      	ldr	r2, [pc, #408]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 800717e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007182:	6453      	str	r3, [r2, #68]	; 0x44
 8007184:	4b64      	ldr	r3, [pc, #400]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 8007186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800718c:	613b      	str	r3, [r7, #16]
 800718e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	4b60      	ldr	r3, [pc, #384]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	4a5f      	ldr	r2, [pc, #380]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 800719a:	f043 0304 	orr.w	r3, r3, #4
 800719e:	6313      	str	r3, [r2, #48]	; 0x30
 80071a0:	4b5d      	ldr	r3, [pc, #372]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 80071a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80071ac:	2300      	movs	r3, #0
 80071ae:	60bb      	str	r3, [r7, #8]
 80071b0:	4b59      	ldr	r3, [pc, #356]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	4a58      	ldr	r2, [pc, #352]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 80071b6:	f043 0308 	orr.w	r3, r3, #8
 80071ba:	6313      	str	r3, [r2, #48]	; 0x30
 80071bc:	4b56      	ldr	r3, [pc, #344]	; (8007318 <HAL_SD_MspInit+0x1c8>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	f003 0308 	and.w	r3, r3, #8
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80071c8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80071cc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ce:	2302      	movs	r3, #2
 80071d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d6:	2303      	movs	r3, #3
 80071d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80071da:	230c      	movs	r3, #12
 80071dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071de:	f107 0314 	add.w	r3, r7, #20
 80071e2:	4619      	mov	r1, r3
 80071e4:	484d      	ldr	r0, [pc, #308]	; (800731c <HAL_SD_MspInit+0x1cc>)
 80071e6:	f003 fefb 	bl	800afe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80071ea:	2304      	movs	r3, #4
 80071ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ee:	2302      	movs	r3, #2
 80071f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f6:	2303      	movs	r3, #3
 80071f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80071fa:	230c      	movs	r3, #12
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80071fe:	f107 0314 	add.w	r3, r7, #20
 8007202:	4619      	mov	r1, r3
 8007204:	4846      	ldr	r0, [pc, #280]	; (8007320 <HAL_SD_MspInit+0x1d0>)
 8007206:	f003 feeb 	bl	800afe0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800720a:	4b46      	ldr	r3, [pc, #280]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800720c:	4a46      	ldr	r2, [pc, #280]	; (8007328 <HAL_SD_MspInit+0x1d8>)
 800720e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007210:	4b44      	ldr	r3, [pc, #272]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007216:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007218:	4b42      	ldr	r3, [pc, #264]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800721a:	2200      	movs	r2, #0
 800721c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800721e:	4b41      	ldr	r3, [pc, #260]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007220:	2200      	movs	r2, #0
 8007222:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007224:	4b3f      	ldr	r3, [pc, #252]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800722a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800722c:	4b3d      	ldr	r3, [pc, #244]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800722e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007232:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007234:	4b3b      	ldr	r3, [pc, #236]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800723a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800723c:	4b39      	ldr	r3, [pc, #228]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800723e:	2220      	movs	r2, #32
 8007240:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8007242:	4b38      	ldr	r3, [pc, #224]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007244:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007248:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800724a:	4b36      	ldr	r3, [pc, #216]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800724c:	2204      	movs	r2, #4
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007250:	4b34      	ldr	r3, [pc, #208]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007252:	2203      	movs	r2, #3
 8007254:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8007256:	4b33      	ldr	r3, [pc, #204]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007258:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800725c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800725e:	4b31      	ldr	r3, [pc, #196]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8007266:	482f      	ldr	r0, [pc, #188]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 8007268:	f003 fb1e 	bl	800a8a8 <HAL_DMA_Init>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8007272:	f7ff fe0b 	bl	8006e8c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a2a      	ldr	r2, [pc, #168]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800727a:	641a      	str	r2, [r3, #64]	; 0x40
 800727c:	4a29      	ldr	r2, [pc, #164]	; (8007324 <HAL_SD_MspInit+0x1d4>)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8007282:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_SD_MspInit+0x1dc>)
 8007284:	4a2a      	ldr	r2, [pc, #168]	; (8007330 <HAL_SD_MspInit+0x1e0>)
 8007286:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8007288:	4b28      	ldr	r3, [pc, #160]	; (800732c <HAL_SD_MspInit+0x1dc>)
 800728a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800728e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007290:	4b26      	ldr	r3, [pc, #152]	; (800732c <HAL_SD_MspInit+0x1dc>)
 8007292:	2240      	movs	r2, #64	; 0x40
 8007294:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007296:	4b25      	ldr	r3, [pc, #148]	; (800732c <HAL_SD_MspInit+0x1dc>)
 8007298:	2200      	movs	r2, #0
 800729a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800729c:	4b23      	ldr	r3, [pc, #140]	; (800732c <HAL_SD_MspInit+0x1dc>)
 800729e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072a2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80072a4:	4b21      	ldr	r3, [pc, #132]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072aa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80072ac:	4b1f      	ldr	r3, [pc, #124]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80072b2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80072b4:	4b1d      	ldr	r3, [pc, #116]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072b6:	2220      	movs	r2, #32
 80072b8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80072ba:	4b1c      	ldr	r3, [pc, #112]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80072c0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80072c2:	4b1a      	ldr	r3, [pc, #104]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072c4:	2204      	movs	r2, #4
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80072c8:	4b18      	ldr	r3, [pc, #96]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072ca:	2203      	movs	r2, #3
 80072cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80072ce:	4b17      	ldr	r3, [pc, #92]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80072d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80072dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80072de:	4813      	ldr	r0, [pc, #76]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072e0:	f003 fae2 	bl	800a8a8 <HAL_DMA_Init>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80072ea:	f7ff fdcf 	bl	8006e8c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	4a0e      	ldr	r2, [pc, #56]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80072f4:	4a0d      	ldr	r2, [pc, #52]	; (800732c <HAL_SD_MspInit+0x1dc>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80072fa:	2200      	movs	r2, #0
 80072fc:	2100      	movs	r1, #0
 80072fe:	2031      	movs	r0, #49	; 0x31
 8007300:	f003 fa9b 	bl	800a83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007304:	2031      	movs	r0, #49	; 0x31
 8007306:	f003 fab4 	bl	800a872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800730a:	bf00      	nop
 800730c:	3728      	adds	r7, #40	; 0x28
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	40012c00 	.word	0x40012c00
 8007318:	40023800 	.word	0x40023800
 800731c:	40020800 	.word	0x40020800
 8007320:	40020c00 	.word	0x40020c00
 8007324:	20044798 	.word	0x20044798
 8007328:	40026458 	.word	0x40026458
 800732c:	20044acc 	.word	0x20044acc
 8007330:	400264a0 	.word	0x400264a0

08007334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b08a      	sub	sp, #40	; 0x28
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800733c:	f107 0314 	add.w	r3, r7, #20
 8007340:	2200      	movs	r2, #0
 8007342:	601a      	str	r2, [r3, #0]
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	609a      	str	r2, [r3, #8]
 8007348:	60da      	str	r2, [r3, #12]
 800734a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a19      	ldr	r2, [pc, #100]	; (80073b8 <HAL_SPI_MspInit+0x84>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d12c      	bne.n	80073b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007356:	2300      	movs	r3, #0
 8007358:	613b      	str	r3, [r7, #16]
 800735a:	4b18      	ldr	r3, [pc, #96]	; (80073bc <HAL_SPI_MspInit+0x88>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <HAL_SPI_MspInit+0x88>)
 8007360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007364:	6413      	str	r3, [r2, #64]	; 0x40
 8007366:	4b15      	ldr	r3, [pc, #84]	; (80073bc <HAL_SPI_MspInit+0x88>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800736e:	613b      	str	r3, [r7, #16]
 8007370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	4b11      	ldr	r3, [pc, #68]	; (80073bc <HAL_SPI_MspInit+0x88>)
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	4a10      	ldr	r2, [pc, #64]	; (80073bc <HAL_SPI_MspInit+0x88>)
 800737c:	f043 0302 	orr.w	r3, r3, #2
 8007380:	6313      	str	r3, [r2, #48]	; 0x30
 8007382:	4b0e      	ldr	r3, [pc, #56]	; (80073bc <HAL_SPI_MspInit+0x88>)
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	60fb      	str	r3, [r7, #12]
 800738c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800738e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007394:	2302      	movs	r3, #2
 8007396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800739c:	2303      	movs	r3, #3
 800739e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80073a0:	2305      	movs	r3, #5
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073a4:	f107 0314 	add.w	r3, r7, #20
 80073a8:	4619      	mov	r1, r3
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <HAL_SPI_MspInit+0x8c>)
 80073ac:	f003 fe18 	bl	800afe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80073b0:	bf00      	nop
 80073b2:	3728      	adds	r7, #40	; 0x28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	40003800 	.word	0x40003800
 80073bc:	40023800 	.word	0x40023800
 80073c0:	40020400 	.word	0x40020400

080073c4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08c      	sub	sp, #48	; 0x30
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073cc:	f107 031c 	add.w	r3, r7, #28
 80073d0:	2200      	movs	r2, #0
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	605a      	str	r2, [r3, #4]
 80073d6:	609a      	str	r2, [r3, #8]
 80073d8:	60da      	str	r2, [r3, #12]
 80073da:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a2d      	ldr	r2, [pc, #180]	; (8007498 <HAL_TIM_PWM_MspInit+0xd4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d12d      	bne.n	8007442 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80073e6:	2300      	movs	r3, #0
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	4b2c      	ldr	r3, [pc, #176]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 80073ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ee:	4a2b      	ldr	r2, [pc, #172]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 80073f0:	f043 0301 	orr.w	r3, r3, #1
 80073f4:	6453      	str	r3, [r2, #68]	; 0x44
 80073f6:	4b29      	ldr	r3, [pc, #164]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 80073f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	61bb      	str	r3, [r7, #24]
 8007400:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	4b25      	ldr	r3, [pc, #148]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	4a24      	ldr	r2, [pc, #144]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 800740c:	f043 0310 	orr.w	r3, r3, #16
 8007410:	6313      	str	r3, [r2, #48]	; 0x30
 8007412:	4b22      	ldr	r3, [pc, #136]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	f003 0310 	and.w	r3, r3, #16
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800741e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007424:	2302      	movs	r3, #2
 8007426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007428:	2300      	movs	r3, #0
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800742c:	2300      	movs	r3, #0
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007430:	2301      	movs	r3, #1
 8007432:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007434:	f107 031c 	add.w	r3, r7, #28
 8007438:	4619      	mov	r1, r3
 800743a:	4819      	ldr	r0, [pc, #100]	; (80074a0 <HAL_TIM_PWM_MspInit+0xdc>)
 800743c:	f003 fdd0 	bl	800afe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007440:	e026      	b.n	8007490 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a17      	ldr	r2, [pc, #92]	; (80074a4 <HAL_TIM_PWM_MspInit+0xe0>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d10e      	bne.n	800746a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800744c:	2300      	movs	r3, #0
 800744e:	613b      	str	r3, [r7, #16]
 8007450:	4b12      	ldr	r3, [pc, #72]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	4a11      	ldr	r2, [pc, #68]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 8007456:	f043 0302 	orr.w	r3, r3, #2
 800745a:	6413      	str	r3, [r2, #64]	; 0x40
 800745c:	4b0f      	ldr	r3, [pc, #60]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 800745e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	693b      	ldr	r3, [r7, #16]
}
 8007468:	e012      	b.n	8007490 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a0e      	ldr	r2, [pc, #56]	; (80074a8 <HAL_TIM_PWM_MspInit+0xe4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d10d      	bne.n	8007490 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007474:	2300      	movs	r3, #0
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	4b08      	ldr	r3, [pc, #32]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 800747a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800747c:	4a07      	ldr	r2, [pc, #28]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 800747e:	f043 0304 	orr.w	r3, r3, #4
 8007482:	6413      	str	r3, [r2, #64]	; 0x40
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <HAL_TIM_PWM_MspInit+0xd8>)
 8007486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	68fb      	ldr	r3, [r7, #12]
}
 8007490:	bf00      	nop
 8007492:	3730      	adds	r7, #48	; 0x30
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40010000 	.word	0x40010000
 800749c:	40023800 	.word	0x40023800
 80074a0:	40021000 	.word	0x40021000
 80074a4:	40000400 	.word	0x40000400
 80074a8:	40000800 	.word	0x40000800

080074ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a3e      	ldr	r2, [pc, #248]	; (80075b4 <HAL_TIM_Base_MspInit+0x108>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d116      	bne.n	80074ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
 80074c2:	4b3d      	ldr	r3, [pc, #244]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 80074c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074c6:	4a3c      	ldr	r2, [pc, #240]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 80074c8:	f043 0310 	orr.w	r3, r3, #16
 80074cc:	6413      	str	r3, [r2, #64]	; 0x40
 80074ce:	4b3a      	ldr	r3, [pc, #232]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 80074d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d2:	f003 0310 	and.w	r3, r3, #16
 80074d6:	61fb      	str	r3, [r7, #28]
 80074d8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80074da:	2200      	movs	r2, #0
 80074dc:	2101      	movs	r1, #1
 80074de:	2036      	movs	r0, #54	; 0x36
 80074e0:	f003 f9ab 	bl	800a83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80074e4:	2036      	movs	r0, #54	; 0x36
 80074e6:	f003 f9c4 	bl	800a872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80074ea:	e05e      	b.n	80075aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a32      	ldr	r2, [pc, #200]	; (80075bc <HAL_TIM_Base_MspInit+0x110>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d116      	bne.n	8007524 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80074f6:	2300      	movs	r3, #0
 80074f8:	61bb      	str	r3, [r7, #24]
 80074fa:	4b2f      	ldr	r3, [pc, #188]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	4a2e      	ldr	r2, [pc, #184]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007500:	f043 0320 	orr.w	r3, r3, #32
 8007504:	6413      	str	r3, [r2, #64]	; 0x40
 8007506:	4b2c      	ldr	r3, [pc, #176]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	f003 0320 	and.w	r3, r3, #32
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	2037      	movs	r0, #55	; 0x37
 8007518:	f003 f98f 	bl	800a83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800751c:	2037      	movs	r0, #55	; 0x37
 800751e:	f003 f9a8 	bl	800a872 <HAL_NVIC_EnableIRQ>
}
 8007522:	e042      	b.n	80075aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <HAL_TIM_Base_MspInit+0x114>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d10e      	bne.n	800754c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800752e:	2300      	movs	r3, #0
 8007530:	617b      	str	r3, [r7, #20]
 8007532:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007536:	4a20      	ldr	r2, [pc, #128]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800753c:	6453      	str	r3, [r2, #68]	; 0x44
 800753e:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	697b      	ldr	r3, [r7, #20]
}
 800754a:	e02e      	b.n	80075aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1c      	ldr	r2, [pc, #112]	; (80075c4 <HAL_TIM_Base_MspInit+0x118>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d10e      	bne.n	8007574 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	613b      	str	r3, [r7, #16]
 800755a:	4b17      	ldr	r3, [pc, #92]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007564:	6453      	str	r3, [r2, #68]	; 0x44
 8007566:	4b14      	ldr	r3, [pc, #80]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	693b      	ldr	r3, [r7, #16]
}
 8007572:	e01a      	b.n	80075aa <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a13      	ldr	r2, [pc, #76]	; (80075c8 <HAL_TIM_Base_MspInit+0x11c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d115      	bne.n	80075aa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	4b0d      	ldr	r3, [pc, #52]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007586:	4a0c      	ldr	r2, [pc, #48]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800758c:	6413      	str	r3, [r2, #64]	; 0x40
 800758e:	4b0a      	ldr	r3, [pc, #40]	; (80075b8 <HAL_TIM_Base_MspInit+0x10c>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	202c      	movs	r0, #44	; 0x2c
 80075a0:	f003 f94b 	bl	800a83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80075a4:	202c      	movs	r0, #44	; 0x2c
 80075a6:	f003 f964 	bl	800a872 <HAL_NVIC_EnableIRQ>
}
 80075aa:	bf00      	nop
 80075ac:	3720      	adds	r7, #32
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40001000 	.word	0x40001000
 80075b8:	40023800 	.word	0x40023800
 80075bc:	40001400 	.word	0x40001400
 80075c0:	40014400 	.word	0x40014400
 80075c4:	40014800 	.word	0x40014800
 80075c8:	40001c00 	.word	0x40001c00

080075cc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	; 0x28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	2200      	movs	r2, #0
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	605a      	str	r2, [r3, #4]
 80075de:	609a      	str	r2, [r3, #8]
 80075e0:	60da      	str	r2, [r3, #12]
 80075e2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1d      	ldr	r2, [pc, #116]	; (8007660 <HAL_TIM_Encoder_MspInit+0x94>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d133      	bne.n	8007656 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80075ee:	2300      	movs	r3, #0
 80075f0:	613b      	str	r3, [r7, #16]
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <HAL_TIM_Encoder_MspInit+0x98>)
 80075f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f6:	4a1b      	ldr	r2, [pc, #108]	; (8007664 <HAL_TIM_Encoder_MspInit+0x98>)
 80075f8:	f043 0302 	orr.w	r3, r3, #2
 80075fc:	6453      	str	r3, [r2, #68]	; 0x44
 80075fe:	4b19      	ldr	r3, [pc, #100]	; (8007664 <HAL_TIM_Encoder_MspInit+0x98>)
 8007600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	613b      	str	r3, [r7, #16]
 8007608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800760a:	2300      	movs	r3, #0
 800760c:	60fb      	str	r3, [r7, #12]
 800760e:	4b15      	ldr	r3, [pc, #84]	; (8007664 <HAL_TIM_Encoder_MspInit+0x98>)
 8007610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007612:	4a14      	ldr	r2, [pc, #80]	; (8007664 <HAL_TIM_Encoder_MspInit+0x98>)
 8007614:	f043 0304 	orr.w	r3, r3, #4
 8007618:	6313      	str	r3, [r2, #48]	; 0x30
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <HAL_TIM_Encoder_MspInit+0x98>)
 800761c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761e:	f003 0304 	and.w	r3, r3, #4
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007626:	23c0      	movs	r3, #192	; 0xc0
 8007628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800762a:	2302      	movs	r3, #2
 800762c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800762e:	2300      	movs	r3, #0
 8007630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007632:	2300      	movs	r3, #0
 8007634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007636:	2303      	movs	r3, #3
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800763a:	f107 0314 	add.w	r3, r7, #20
 800763e:	4619      	mov	r1, r3
 8007640:	4809      	ldr	r0, [pc, #36]	; (8007668 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007642:	f003 fccd 	bl	800afe0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007646:	2200      	movs	r2, #0
 8007648:	2100      	movs	r1, #0
 800764a:	202c      	movs	r0, #44	; 0x2c
 800764c:	f003 f8f5 	bl	800a83a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007650:	202c      	movs	r0, #44	; 0x2c
 8007652:	f003 f90e 	bl	800a872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007656:	bf00      	nop
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40010400 	.word	0x40010400
 8007664:	40023800 	.word	0x40023800
 8007668:	40020800 	.word	0x40020800

0800766c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08c      	sub	sp, #48	; 0x30
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007674:	f107 031c 	add.w	r3, r7, #28
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	60da      	str	r2, [r3, #12]
 8007682:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a5c      	ldr	r2, [pc, #368]	; (80077fc <HAL_TIM_MspPostInit+0x190>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d11f      	bne.n	80076ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800768e:	2300      	movs	r3, #0
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	4b5b      	ldr	r3, [pc, #364]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 8007694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007696:	4a5a      	ldr	r2, [pc, #360]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 8007698:	f043 0310 	orr.w	r3, r3, #16
 800769c:	6313      	str	r3, [r2, #48]	; 0x30
 800769e:	4b58      	ldr	r3, [pc, #352]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	f003 0310 	and.w	r3, r3, #16
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80076aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b0:	2302      	movs	r3, #2
 80076b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076b8:	2300      	movs	r3, #0
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80076bc:	2301      	movs	r3, #1
 80076be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80076c0:	f107 031c 	add.w	r3, r7, #28
 80076c4:	4619      	mov	r1, r3
 80076c6:	484f      	ldr	r0, [pc, #316]	; (8007804 <HAL_TIM_MspPostInit+0x198>)
 80076c8:	f003 fc8a 	bl	800afe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80076cc:	e091      	b.n	80077f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a4d      	ldr	r2, [pc, #308]	; (8007808 <HAL_TIM_MspPostInit+0x19c>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d11e      	bne.n	8007716 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80076d8:	2300      	movs	r3, #0
 80076da:	617b      	str	r3, [r7, #20]
 80076dc:	4b48      	ldr	r3, [pc, #288]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80076de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e0:	4a47      	ldr	r2, [pc, #284]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80076e2:	f043 0302 	orr.w	r3, r3, #2
 80076e6:	6313      	str	r3, [r2, #48]	; 0x30
 80076e8:	4b45      	ldr	r3, [pc, #276]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80076ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ec:	f003 0302 	and.w	r3, r3, #2
 80076f0:	617b      	str	r3, [r7, #20]
 80076f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80076f4:	2330      	movs	r3, #48	; 0x30
 80076f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076f8:	2302      	movs	r3, #2
 80076fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076fc:	2300      	movs	r3, #0
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007700:	2300      	movs	r3, #0
 8007702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007704:	2302      	movs	r3, #2
 8007706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007708:	f107 031c 	add.w	r3, r7, #28
 800770c:	4619      	mov	r1, r3
 800770e:	483f      	ldr	r0, [pc, #252]	; (800780c <HAL_TIM_MspPostInit+0x1a0>)
 8007710:	f003 fc66 	bl	800afe0 <HAL_GPIO_Init>
}
 8007714:	e06d      	b.n	80077f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a3d      	ldr	r2, [pc, #244]	; (8007810 <HAL_TIM_MspPostInit+0x1a4>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d11f      	bne.n	8007760 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007720:	2300      	movs	r3, #0
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	4b36      	ldr	r3, [pc, #216]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 8007726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007728:	4a35      	ldr	r2, [pc, #212]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 800772a:	f043 0308 	orr.w	r3, r3, #8
 800772e:	6313      	str	r3, [r2, #48]	; 0x30
 8007730:	4b33      	ldr	r3, [pc, #204]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 8007732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007734:	f003 0308 	and.w	r3, r3, #8
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800773c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007742:	2302      	movs	r3, #2
 8007744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007746:	2300      	movs	r3, #0
 8007748:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800774a:	2300      	movs	r3, #0
 800774c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800774e:	2302      	movs	r3, #2
 8007750:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007752:	f107 031c 	add.w	r3, r7, #28
 8007756:	4619      	mov	r1, r3
 8007758:	482e      	ldr	r0, [pc, #184]	; (8007814 <HAL_TIM_MspPostInit+0x1a8>)
 800775a:	f003 fc41 	bl	800afe0 <HAL_GPIO_Init>
}
 800775e:	e048      	b.n	80077f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2c      	ldr	r2, [pc, #176]	; (8007818 <HAL_TIM_MspPostInit+0x1ac>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d11f      	bne.n	80077aa <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	4b24      	ldr	r3, [pc, #144]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	4a23      	ldr	r2, [pc, #140]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 8007774:	f043 0302 	orr.w	r3, r3, #2
 8007778:	6313      	str	r3, [r2, #48]	; 0x30
 800777a:	4b21      	ldr	r3, [pc, #132]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f003 0302 	and.w	r3, r3, #2
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800778a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800778c:	2302      	movs	r3, #2
 800778e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007790:	2300      	movs	r3, #0
 8007792:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007794:	2300      	movs	r3, #0
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007798:	2303      	movs	r3, #3
 800779a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800779c:	f107 031c 	add.w	r3, r7, #28
 80077a0:	4619      	mov	r1, r3
 80077a2:	481a      	ldr	r0, [pc, #104]	; (800780c <HAL_TIM_MspPostInit+0x1a0>)
 80077a4:	f003 fc1c 	bl	800afe0 <HAL_GPIO_Init>
}
 80077a8:	e023      	b.n	80077f2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1b      	ldr	r2, [pc, #108]	; (800781c <HAL_TIM_MspPostInit+0x1b0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d11e      	bne.n	80077f2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077b4:	2300      	movs	r3, #0
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	4b11      	ldr	r3, [pc, #68]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	4a10      	ldr	r2, [pc, #64]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80077be:	f043 0302 	orr.w	r3, r3, #2
 80077c2:	6313      	str	r3, [r2, #48]	; 0x30
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <HAL_TIM_MspPostInit+0x194>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	60bb      	str	r3, [r7, #8]
 80077ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80077d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d6:	2302      	movs	r3, #2
 80077d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077de:	2300      	movs	r3, #0
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80077e2:	2303      	movs	r3, #3
 80077e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077e6:	f107 031c 	add.w	r3, r7, #28
 80077ea:	4619      	mov	r1, r3
 80077ec:	4807      	ldr	r0, [pc, #28]	; (800780c <HAL_TIM_MspPostInit+0x1a0>)
 80077ee:	f003 fbf7 	bl	800afe0 <HAL_GPIO_Init>
}
 80077f2:	bf00      	nop
 80077f4:	3730      	adds	r7, #48	; 0x30
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
 80077fa:	bf00      	nop
 80077fc:	40010000 	.word	0x40010000
 8007800:	40023800 	.word	0x40023800
 8007804:	40021000 	.word	0x40021000
 8007808:	40000400 	.word	0x40000400
 800780c:	40020400 	.word	0x40020400
 8007810:	40000800 	.word	0x40000800
 8007814:	40020c00 	.word	0x40020c00
 8007818:	40014400 	.word	0x40014400
 800781c:	40014800 	.word	0x40014800

08007820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007828:	f107 0314 	add.w	r3, r7, #20
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a19      	ldr	r2, [pc, #100]	; (80078a4 <HAL_UART_MspInit+0x84>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d12b      	bne.n	800789a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <HAL_UART_MspInit+0x88>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <HAL_UART_MspInit+0x88>)
 800784c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007850:	6413      	str	r3, [r2, #64]	; 0x40
 8007852:	4b15      	ldr	r3, [pc, #84]	; (80078a8 <HAL_UART_MspInit+0x88>)
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
 8007862:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <HAL_UART_MspInit+0x88>)
 8007864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007866:	4a10      	ldr	r2, [pc, #64]	; (80078a8 <HAL_UART_MspInit+0x88>)
 8007868:	f043 0308 	orr.w	r3, r3, #8
 800786c:	6313      	str	r3, [r2, #48]	; 0x30
 800786e:	4b0e      	ldr	r3, [pc, #56]	; (80078a8 <HAL_UART_MspInit+0x88>)
 8007870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007872:	f003 0308 	and.w	r3, r3, #8
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800787a:	2360      	movs	r3, #96	; 0x60
 800787c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800787e:	2302      	movs	r3, #2
 8007880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007886:	2303      	movs	r3, #3
 8007888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800788a:	2307      	movs	r3, #7
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	4619      	mov	r1, r3
 8007894:	4805      	ldr	r0, [pc, #20]	; (80078ac <HAL_UART_MspInit+0x8c>)
 8007896:	f003 fba3 	bl	800afe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800789a:	bf00      	nop
 800789c:	3728      	adds	r7, #40	; 0x28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	40004400 	.word	0x40004400
 80078a8:	40023800 	.word	0x40023800
 80078ac:	40020c00 	.word	0x40020c00

080078b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80078b4:	e7fe      	b.n	80078b4 <NMI_Handler+0x4>

080078b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80078b6:	b480      	push	{r7}
 80078b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80078ba:	e7fe      	b.n	80078ba <HardFault_Handler+0x4>

080078bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80078c0:	e7fe      	b.n	80078c0 <MemManage_Handler+0x4>

080078c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80078c2:	b480      	push	{r7}
 80078c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80078c6:	e7fe      	b.n	80078c6 <BusFault_Handler+0x4>

080078c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80078cc:	e7fe      	b.n	80078cc <UsageFault_Handler+0x4>

080078ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80078ce:	b480      	push	{r7}
 80078d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80078d2:	bf00      	nop
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80078dc:	b480      	push	{r7}
 80078de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80078e0:	bf00      	nop
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078ea:	b480      	push	{r7}
 80078ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078ee:	bf00      	nop
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078fc:	f002 fa7c 	bl	8009df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007900:	bf00      	nop
 8007902:	bd80      	pop	{r7, pc}

08007904 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007908:	4803      	ldr	r0, [pc, #12]	; (8007918 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800790a:	f007 fd4c 	bl	800f3a6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800790e:	4803      	ldr	r0, [pc, #12]	; (800791c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007910:	f007 fd49 	bl	800f3a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007914:	bf00      	nop
 8007916:	bd80      	pop	{r7, pc}
 8007918:	20044850 	.word	0x20044850
 800791c:	20044a4c 	.word	0x20044a4c

08007920 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007924:	4802      	ldr	r0, [pc, #8]	; (8007930 <SDIO_IRQHandler+0x10>)
 8007926:	f005 fde5 	bl	800d4f4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800792a:	bf00      	nop
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	20044bac 	.word	0x20044bac

08007934 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007938:	4802      	ldr	r0, [pc, #8]	; (8007944 <TIM6_DAC_IRQHandler+0x10>)
 800793a:	f007 fd34 	bl	800f3a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800793e:	bf00      	nop
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20044b2c 	.word	0x20044b2c

08007948 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800794c:	4802      	ldr	r0, [pc, #8]	; (8007958 <TIM7_IRQHandler+0x10>)
 800794e:	f007 fd2a 	bl	800f3a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007952:	bf00      	nop
 8007954:	bd80      	pop	{r7, pc}
 8007956:	bf00      	nop
 8007958:	20044cd0 	.word	0x20044cd0

0800795c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007960:	4802      	ldr	r0, [pc, #8]	; (800796c <DMA2_Stream2_IRQHandler+0x10>)
 8007962:	f003 f8c9 	bl	800aaf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007966:	bf00      	nop
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20044c70 	.word	0x20044c70

08007970 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007974:	4802      	ldr	r0, [pc, #8]	; (8007980 <DMA2_Stream3_IRQHandler+0x10>)
 8007976:	f003 f8bf 	bl	800aaf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800797a:	bf00      	nop
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20044798 	.word	0x20044798

08007984 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007988:	4802      	ldr	r0, [pc, #8]	; (8007994 <DMA2_Stream6_IRQHandler+0x10>)
 800798a:	f003 f8b5 	bl	800aaf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800798e:	bf00      	nop
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20044acc 	.word	0x20044acc

08007998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079a0:	4a14      	ldr	r2, [pc, #80]	; (80079f4 <_sbrk+0x5c>)
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <_sbrk+0x60>)
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079ac:	4b13      	ldr	r3, [pc, #76]	; (80079fc <_sbrk+0x64>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d102      	bne.n	80079ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079b4:	4b11      	ldr	r3, [pc, #68]	; (80079fc <_sbrk+0x64>)
 80079b6:	4a12      	ldr	r2, [pc, #72]	; (8007a00 <_sbrk+0x68>)
 80079b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079ba:	4b10      	ldr	r3, [pc, #64]	; (80079fc <_sbrk+0x64>)
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	693a      	ldr	r2, [r7, #16]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d207      	bcs.n	80079d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079c8:	f00d ff80 	bl	80158cc <__errno>
 80079cc:	4602      	mov	r2, r0
 80079ce:	230c      	movs	r3, #12
 80079d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80079d2:	f04f 33ff 	mov.w	r3, #4294967295
 80079d6:	e009      	b.n	80079ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079d8:	4b08      	ldr	r3, [pc, #32]	; (80079fc <_sbrk+0x64>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80079de:	4b07      	ldr	r3, [pc, #28]	; (80079fc <_sbrk+0x64>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	4a05      	ldr	r2, [pc, #20]	; (80079fc <_sbrk+0x64>)
 80079e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80079ea:	68fb      	ldr	r3, [r7, #12]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}
 80079f4:	20050000 	.word	0x20050000
 80079f8:	00000800 	.word	0x00000800
 80079fc:	200002a8 	.word	0x200002a8
 8007a00:	20046e20 	.word	0x20046e20

08007a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007a08:	4b08      	ldr	r3, [pc, #32]	; (8007a2c <SystemInit+0x28>)
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0e:	4a07      	ldr	r2, [pc, #28]	; (8007a2c <SystemInit+0x28>)
 8007a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007a18:	4b04      	ldr	r3, [pc, #16]	; (8007a2c <SystemInit+0x28>)
 8007a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a1e:	609a      	str	r2, [r3, #8]
#endif
}
 8007a20:	bf00      	nop
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	e000ed00 	.word	0xe000ed00

08007a30 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007a30:	b598      	push	{r3, r4, r7, lr}
 8007a32:	af00      	add	r7, sp, #0
	lcd_init();
 8007a34:	f7f9 faf0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007a38:	483b      	ldr	r0, [pc, #236]	; (8007b28 <cppInit+0xf8>)
 8007a3a:	f7fd fcf7 	bl	800542c <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8007a3e:	2064      	movs	r0, #100	; 0x64
 8007a40:	f002 f9fa 	bl	8009e38 <HAL_Delay>
	power_sensor.updateValues();
 8007a44:	4838      	ldr	r0, [pc, #224]	; (8007b28 <cppInit+0xf8>)
 8007a46:	f7fd fcff 	bl	8005448 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8007a4a:	f7f9 fb29 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8007a4e:	2100      	movs	r1, #0
 8007a50:	2000      	movs	r0, #0
 8007a52:	f7f9 fb35 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007a56:	4835      	ldr	r0, [pc, #212]	; (8007b2c <cppInit+0xfc>)
 8007a58:	f7f9 fb5c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8007a5c:	2101      	movs	r1, #1
 8007a5e:	2000      	movs	r0, #0
 8007a60:	f7f9 fb2e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007a64:	4830      	ldr	r0, [pc, #192]	; (8007b28 <cppInit+0xf8>)
 8007a66:	f7fd fd19 	bl	800549c <_ZN11PowerSensor17getButteryVoltageEv>
 8007a6a:	ee10 3a10 	vmov	r3, s0
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7f8 fd82 	bl	8000578 <__aeabi_f2d>
 8007a74:	4603      	mov	r3, r0
 8007a76:	460c      	mov	r4, r1
 8007a78:	461a      	mov	r2, r3
 8007a7a:	4623      	mov	r3, r4
 8007a7c:	482c      	ldr	r0, [pc, #176]	; (8007b30 <cppInit+0x100>)
 8007a7e:	f7f9 fb49 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007a82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a86:	f002 f9d7 	bl	8009e38 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8007a8a:	482a      	ldr	r0, [pc, #168]	; (8007b34 <cppInit+0x104>)
 8007a8c:	f7fc ff0c 	bl	80048a8 <_ZN6Logger10sdCardInitEv>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d007      	beq.n	8007aa6 <cppInit+0x76>
		led.fullColor('G');
 8007a96:	2147      	movs	r1, #71	; 0x47
 8007a98:	4827      	ldr	r0, [pc, #156]	; (8007b38 <cppInit+0x108>)
 8007a9a:	f7fa fb7b 	bl	8002194 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007a9e:	2064      	movs	r0, #100	; 0x64
 8007aa0:	f002 f9ca 	bl	8009e38 <HAL_Delay>
 8007aa4:	e006      	b.n	8007ab4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007aa6:	2152      	movs	r1, #82	; 0x52
 8007aa8:	4823      	ldr	r0, [pc, #140]	; (8007b38 <cppInit+0x108>)
 8007aaa:	f7fa fb73 	bl	8002194 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8007aae:	2064      	movs	r0, #100	; 0x64
 8007ab0:	f002 f9c2 	bl	8009e38 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007ab4:	4821      	ldr	r0, [pc, #132]	; (8007b3c <cppInit+0x10c>)
 8007ab6:	f7fa fcc9 	bl	800244c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8007aba:	4821      	ldr	r0, [pc, #132]	; (8007b40 <cppInit+0x110>)
 8007abc:	f7fd f98a 	bl	8004dd4 <_ZN5Motor4initEv>
	encoder.init();
 8007ac0:	4820      	ldr	r0, [pc, #128]	; (8007b44 <cppInit+0x114>)
 8007ac2:	f7f9 fcaf 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007ac6:	4820      	ldr	r0, [pc, #128]	; (8007b48 <cppInit+0x118>)
 8007ac8:	f7fa f912 	bl	8001cf0 <_ZN3IMU4initEv>
	line_trace.init();
 8007acc:	481f      	ldr	r0, [pc, #124]	; (8007b4c <cppInit+0x11c>)
 8007ace:	f7fb ffe3 	bl	8003a98 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007ad2:	481a      	ldr	r0, [pc, #104]	; (8007b3c <cppInit+0x10c>)
 8007ad4:	f7fa fe1a 	bl	800270c <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007ad8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007adc:	f002 f9ac 	bl	8009e38 <HAL_Delay>

	led.fullColor('M');
 8007ae0:	214d      	movs	r1, #77	; 0x4d
 8007ae2:	4815      	ldr	r0, [pc, #84]	; (8007b38 <cppInit+0x108>)
 8007ae4:	f7fa fb56 	bl	8002194 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007ae8:	4817      	ldr	r0, [pc, #92]	; (8007b48 <cppInit+0x118>)
 8007aea:	f7fa f9db 	bl	8001ea4 <_ZN3IMU11calibrationEv>
	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	//velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s dorone
	velocity_ctrl.setVelocityGain(1.2, 10.6, 0.0); //3s
 8007aee:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007b50 <cppInit+0x120>
 8007af2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007b54 <cppInit+0x124>
 8007af6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007b58 <cppInit+0x128>
 8007afa:	4818      	ldr	r0, [pc, #96]	; (8007b5c <cppInit+0x12c>)
 8007afc:	f7fe f9cc 	bl	8005e98 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007b00:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8007b50 <cppInit+0x120>
 8007b04:	eddf 0a16 	vldr	s1, [pc, #88]	; 8007b60 <cppInit+0x130>
 8007b08:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8007b64 <cppInit+0x134>
 8007b0c:	4813      	ldr	r0, [pc, #76]	; (8007b5c <cppInit+0x12c>)
 8007b0e:	f7fe f9dc 	bl	8005eca <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007b12:	4815      	ldr	r0, [pc, #84]	; (8007b68 <cppInit+0x138>)
 8007b14:	f7fd fb94 	bl	8005240 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007b18:	4814      	ldr	r0, [pc, #80]	; (8007b6c <cppInit+0x13c>)
 8007b1a:	f7fd fc2b 	bl	8005374 <_ZN13PathFollowing4initEv>

	esc.init();
 8007b1e:	4814      	ldr	r0, [pc, #80]	; (8007b70 <cppInit+0x140>)
 8007b20:	f7f9 fb64 	bl	80011ec <_ZN3ESC4initEv>

}
 8007b24:	bf00      	nop
 8007b26:	bd98      	pop	{r3, r4, r7, pc}
 8007b28:	200005c0 	.word	0x200005c0
 8007b2c:	08019f14 	.word	0x08019f14
 8007b30:	08019f1c 	.word	0x08019f1c
 8007b34:	200005e0 	.word	0x200005e0
 8007b38:	200005bc 	.word	0x200005bc
 8007b3c:	200002ac 	.word	0x200002ac
 8007b40:	200005b8 	.word	0x200005b8
 8007b44:	2001daac 	.word	0x2001daac
 8007b48:	200005cc 	.word	0x200005cc
 8007b4c:	2001db4c 	.word	0x2001db4c
 8007b50:	00000000 	.word	0x00000000
 8007b54:	4129999a 	.word	0x4129999a
 8007b58:	3f99999a 	.word	0x3f99999a
 8007b5c:	2001dacc 	.word	0x2001dacc
 8007b60:	3f5e3fbc 	.word	0x3f5e3fbc
 8007b64:	3d75c28f 	.word	0x3d75c28f
 8007b68:	2001db08 	.word	0x2001db08
 8007b6c:	2002ac98 	.word	0x2002ac98
 8007b70:	2001db48 	.word	0x2001db48

08007b74 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8007b78:	480e      	ldr	r0, [pc, #56]	; (8007bb4 <cppFlip1ms+0x40>)
 8007b7a:	f7fa fcc5 	bl	8002508 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007b7e:	480e      	ldr	r0, [pc, #56]	; (8007bb8 <cppFlip1ms+0x44>)
 8007b80:	f7fa f8de 	bl	8001d40 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007b84:	480d      	ldr	r0, [pc, #52]	; (8007bbc <cppFlip1ms+0x48>)
 8007b86:	f7f9 fc6f 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 8007b8a:	480d      	ldr	r0, [pc, #52]	; (8007bc0 <cppFlip1ms+0x4c>)
 8007b8c:	f7fc fa2a 	bl	8003fe4 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007b90:	480c      	ldr	r0, [pc, #48]	; (8007bc4 <cppFlip1ms+0x50>)
 8007b92:	f7fe f9b3 	bl	8005efc <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8007b96:	480c      	ldr	r0, [pc, #48]	; (8007bc8 <cppFlip1ms+0x54>)
 8007b98:	f7fd fb36 	bl	8005208 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007b9c:	480b      	ldr	r0, [pc, #44]	; (8007bcc <cppFlip1ms+0x58>)
 8007b9e:	f7fd fcf9 	bl	8005594 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007ba2:	480b      	ldr	r0, [pc, #44]	; (8007bd0 <cppFlip1ms+0x5c>)
 8007ba4:	f7fd f928 	bl	8004df8 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007ba8:	4804      	ldr	r0, [pc, #16]	; (8007bbc <cppFlip1ms+0x48>)
 8007baa:	f7f9 fd47 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007bae:	bf00      	nop
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200002ac 	.word	0x200002ac
 8007bb8:	200005cc 	.word	0x200005cc
 8007bbc:	2001daac 	.word	0x2001daac
 8007bc0:	2001db4c 	.word	0x2001db4c
 8007bc4:	2001dacc 	.word	0x2001dacc
 8007bc8:	2001db08 	.word	0x2001db08
 8007bcc:	200005a4 	.word	0x200005a4
 8007bd0:	200005b8 	.word	0x200005b8

08007bd4 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007bd8:	4802      	ldr	r0, [pc, #8]	; (8007be4 <cppFlip100ns+0x10>)
 8007bda:	f7fa fc47 	bl	800246c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007bde:	bf00      	nop
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	200002ac 	.word	0x200002ac

08007be8 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
		sys_ident.updateMsig();
		twice_cnt = 0;
	}
	*/

	logger.storeLog(line_trace.getTargetVelocity());
 8007bec:	480a      	ldr	r0, [pc, #40]	; (8007c18 <cppFlip10ms+0x30>)
 8007bee:	f7fc f92c 	bl	8003e4a <_ZN9LineTrace17getTargetVelocityEv>
 8007bf2:	eef0 7a40 	vmov.f32	s15, s0
 8007bf6:	eeb0 0a67 	vmov.f32	s0, s15
 8007bfa:	4808      	ldr	r0, [pc, #32]	; (8007c1c <cppFlip10ms+0x34>)
 8007bfc:	f7fc fe9c 	bl	8004938 <_ZN6Logger8storeLogEf>
	logger.storeLog2(velocity_ctrl.getCurrentVelocity());
 8007c00:	4807      	ldr	r0, [pc, #28]	; (8007c20 <cppFlip10ms+0x38>)
 8007c02:	f7fe f9bd 	bl	8005f80 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8007c06:	eef0 7a40 	vmov.f32	s15, s0
 8007c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007c0e:	4803      	ldr	r0, [pc, #12]	; (8007c1c <cppFlip10ms+0x34>)
 8007c10:	f7fc fec9 	bl	80049a6 <_ZN6Logger9storeLog2Ef>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007c14:	bf00      	nop
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	2001db4c 	.word	0x2001db4c
 8007c1c:	200005e0 	.word	0x200005e0
 8007c20:	2001dacc 	.word	0x2001dacc
 8007c24:	00000000 	.word	0x00000000

08007c28 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007c2e:	4baf      	ldr	r3, [pc, #700]	; (8007eec <cppLoop+0x2c4>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f3bf 8f5b 	dmb	ish
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	bf0c      	ite	eq
 8007c40:	2301      	moveq	r3, #1
 8007c42:	2300      	movne	r3, #0
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d015      	beq.n	8007c76 <cppLoop+0x4e>
 8007c4a:	48a8      	ldr	r0, [pc, #672]	; (8007eec <cppLoop+0x2c4>)
 8007c4c:	f00c fdd9 	bl	8014802 <__cxa_guard_acquire>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bf14      	ite	ne
 8007c56:	2301      	movne	r3, #1
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <cppLoop+0x4e>
 8007c60:	48a3      	ldr	r0, [pc, #652]	; (8007ef0 <cppLoop+0x2c8>)
 8007c62:	f7fc f820 	bl	8003ca6 <_ZN9LineTrace5getKpEv>
 8007c66:	eef0 7a40 	vmov.f32	s15, s0
 8007c6a:	4ba2      	ldr	r3, [pc, #648]	; (8007ef4 <cppLoop+0x2cc>)
 8007c6c:	edc3 7a00 	vstr	s15, [r3]
 8007c70:	489e      	ldr	r0, [pc, #632]	; (8007eec <cppLoop+0x2c4>)
 8007c72:	f00c fdd2 	bl	801481a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007c76:	4ba0      	ldr	r3, [pc, #640]	; (8007ef8 <cppLoop+0x2d0>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	f3bf 8f5b 	dmb	ish
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 0301 	and.w	r3, r3, #1
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	bf0c      	ite	eq
 8007c88:	2301      	moveq	r3, #1
 8007c8a:	2300      	movne	r3, #0
 8007c8c:	b2db      	uxtb	r3, r3
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d015      	beq.n	8007cbe <cppLoop+0x96>
 8007c92:	4899      	ldr	r0, [pc, #612]	; (8007ef8 <cppLoop+0x2d0>)
 8007c94:	f00c fdb5 	bl	8014802 <__cxa_guard_acquire>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	bf14      	ite	ne
 8007c9e:	2301      	movne	r3, #1
 8007ca0:	2300      	moveq	r3, #0
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00a      	beq.n	8007cbe <cppLoop+0x96>
 8007ca8:	4891      	ldr	r0, [pc, #580]	; (8007ef0 <cppLoop+0x2c8>)
 8007caa:	f7fc f80b 	bl	8003cc4 <_ZN9LineTrace5getKiEv>
 8007cae:	eef0 7a40 	vmov.f32	s15, s0
 8007cb2:	4b92      	ldr	r3, [pc, #584]	; (8007efc <cppLoop+0x2d4>)
 8007cb4:	edc3 7a00 	vstr	s15, [r3]
 8007cb8:	488f      	ldr	r0, [pc, #572]	; (8007ef8 <cppLoop+0x2d0>)
 8007cba:	f00c fdae 	bl	801481a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007cbe:	4b90      	ldr	r3, [pc, #576]	; (8007f00 <cppLoop+0x2d8>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	f3bf 8f5b 	dmb	ish
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bf0c      	ite	eq
 8007cd0:	2301      	moveq	r3, #1
 8007cd2:	2300      	movne	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d015      	beq.n	8007d06 <cppLoop+0xde>
 8007cda:	4889      	ldr	r0, [pc, #548]	; (8007f00 <cppLoop+0x2d8>)
 8007cdc:	f00c fd91 	bl	8014802 <__cxa_guard_acquire>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	bf14      	ite	ne
 8007ce6:	2301      	movne	r3, #1
 8007ce8:	2300      	moveq	r3, #0
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <cppLoop+0xde>
 8007cf0:	487f      	ldr	r0, [pc, #508]	; (8007ef0 <cppLoop+0x2c8>)
 8007cf2:	f7fb fff6 	bl	8003ce2 <_ZN9LineTrace5getKdEv>
 8007cf6:	eef0 7a40 	vmov.f32	s15, s0
 8007cfa:	4b82      	ldr	r3, [pc, #520]	; (8007f04 <cppLoop+0x2dc>)
 8007cfc:	edc3 7a00 	vstr	s15, [r3]
 8007d00:	487f      	ldr	r0, [pc, #508]	; (8007f00 <cppLoop+0x2d8>)
 8007d02:	f00c fd8a 	bl	801481a <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007d06:	4b80      	ldr	r3, [pc, #512]	; (8007f08 <cppLoop+0x2e0>)
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	f3bf 8f5b 	dmb	ish
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	bf0c      	ite	eq
 8007d18:	2301      	moveq	r3, #1
 8007d1a:	2300      	movne	r3, #0
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d015      	beq.n	8007d4e <cppLoop+0x126>
 8007d22:	4879      	ldr	r0, [pc, #484]	; (8007f08 <cppLoop+0x2e0>)
 8007d24:	f00c fd6d 	bl	8014802 <__cxa_guard_acquire>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	bf14      	ite	ne
 8007d2e:	2301      	movne	r3, #1
 8007d30:	2300      	moveq	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <cppLoop+0x126>
 8007d38:	486d      	ldr	r0, [pc, #436]	; (8007ef0 <cppLoop+0x2c8>)
 8007d3a:	f7fb fffa 	bl	8003d32 <_ZN9LineTrace9getKpSlowEv>
 8007d3e:	eef0 7a40 	vmov.f32	s15, s0
 8007d42:	4b72      	ldr	r3, [pc, #456]	; (8007f0c <cppLoop+0x2e4>)
 8007d44:	edc3 7a00 	vstr	s15, [r3]
 8007d48:	486f      	ldr	r0, [pc, #444]	; (8007f08 <cppLoop+0x2e0>)
 8007d4a:	f00c fd66 	bl	801481a <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007d4e:	4b70      	ldr	r3, [pc, #448]	; (8007f10 <cppLoop+0x2e8>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	f3bf 8f5b 	dmb	ish
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	f003 0301 	and.w	r3, r3, #1
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bf0c      	ite	eq
 8007d60:	2301      	moveq	r3, #1
 8007d62:	2300      	movne	r3, #0
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d015      	beq.n	8007d96 <cppLoop+0x16e>
 8007d6a:	4869      	ldr	r0, [pc, #420]	; (8007f10 <cppLoop+0x2e8>)
 8007d6c:	f00c fd49 	bl	8014802 <__cxa_guard_acquire>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	bf14      	ite	ne
 8007d76:	2301      	movne	r3, #1
 8007d78:	2300      	moveq	r3, #0
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00a      	beq.n	8007d96 <cppLoop+0x16e>
 8007d80:	485b      	ldr	r0, [pc, #364]	; (8007ef0 <cppLoop+0x2c8>)
 8007d82:	f7fb ffe5 	bl	8003d50 <_ZN9LineTrace9getKiSlowEv>
 8007d86:	eef0 7a40 	vmov.f32	s15, s0
 8007d8a:	4b62      	ldr	r3, [pc, #392]	; (8007f14 <cppLoop+0x2ec>)
 8007d8c:	edc3 7a00 	vstr	s15, [r3]
 8007d90:	485f      	ldr	r0, [pc, #380]	; (8007f10 <cppLoop+0x2e8>)
 8007d92:	f00c fd42 	bl	801481a <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007d96:	4b60      	ldr	r3, [pc, #384]	; (8007f18 <cppLoop+0x2f0>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	f3bf 8f5b 	dmb	ish
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	bf0c      	ite	eq
 8007da8:	2301      	moveq	r3, #1
 8007daa:	2300      	movne	r3, #0
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d015      	beq.n	8007dde <cppLoop+0x1b6>
 8007db2:	4859      	ldr	r0, [pc, #356]	; (8007f18 <cppLoop+0x2f0>)
 8007db4:	f00c fd25 	bl	8014802 <__cxa_guard_acquire>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	bf14      	ite	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <cppLoop+0x1b6>
 8007dc8:	4849      	ldr	r0, [pc, #292]	; (8007ef0 <cppLoop+0x2c8>)
 8007dca:	f7fb ffd0 	bl	8003d6e <_ZN9LineTrace9getKdSlowEv>
 8007dce:	eef0 7a40 	vmov.f32	s15, s0
 8007dd2:	4b52      	ldr	r3, [pc, #328]	; (8007f1c <cppLoop+0x2f4>)
 8007dd4:	edc3 7a00 	vstr	s15, [r3]
 8007dd8:	484f      	ldr	r0, [pc, #316]	; (8007f18 <cppLoop+0x2f0>)
 8007dda:	f00c fd1e 	bl	801481a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007dde:	4b50      	ldr	r3, [pc, #320]	; (8007f20 <cppLoop+0x2f8>)
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	f3bf 8f5b 	dmb	ish
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	f003 0301 	and.w	r3, r3, #1
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bf0c      	ite	eq
 8007df0:	2301      	moveq	r3, #1
 8007df2:	2300      	movne	r3, #0
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d015      	beq.n	8007e26 <cppLoop+0x1fe>
 8007dfa:	4849      	ldr	r0, [pc, #292]	; (8007f20 <cppLoop+0x2f8>)
 8007dfc:	f00c fd01 	bl	8014802 <__cxa_guard_acquire>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf14      	ite	ne
 8007e06:	2301      	movne	r3, #1
 8007e08:	2300      	moveq	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00a      	beq.n	8007e26 <cppLoop+0x1fe>
 8007e10:	4837      	ldr	r0, [pc, #220]	; (8007ef0 <cppLoop+0x2c8>)
 8007e12:	f7fc f81a 	bl	8003e4a <_ZN9LineTrace17getTargetVelocityEv>
 8007e16:	eef0 7a40 	vmov.f32	s15, s0
 8007e1a:	4b42      	ldr	r3, [pc, #264]	; (8007f24 <cppLoop+0x2fc>)
 8007e1c:	edc3 7a00 	vstr	s15, [r3]
 8007e20:	483f      	ldr	r0, [pc, #252]	; (8007f20 <cppLoop+0x2f8>)
 8007e22:	f00c fcfa 	bl	801481a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007e26:	4b40      	ldr	r3, [pc, #256]	; (8007f28 <cppLoop+0x300>)
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	f3bf 8f5b 	dmb	ish
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	bf0c      	ite	eq
 8007e38:	2301      	moveq	r3, #1
 8007e3a:	2300      	movne	r3, #0
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d015      	beq.n	8007e6e <cppLoop+0x246>
 8007e42:	4839      	ldr	r0, [pc, #228]	; (8007f28 <cppLoop+0x300>)
 8007e44:	f00c fcdd 	bl	8014802 <__cxa_guard_acquire>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	bf14      	ite	ne
 8007e4e:	2301      	movne	r3, #1
 8007e50:	2300      	moveq	r3, #0
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <cppLoop+0x246>
 8007e58:	4825      	ldr	r0, [pc, #148]	; (8007ef0 <cppLoop+0x2c8>)
 8007e5a:	f7fc f806 	bl	8003e6a <_ZN9LineTrace14getMaxVelocityEv>
 8007e5e:	eef0 7a40 	vmov.f32	s15, s0
 8007e62:	4b32      	ldr	r3, [pc, #200]	; (8007f2c <cppLoop+0x304>)
 8007e64:	edc3 7a00 	vstr	s15, [r3]
 8007e68:	482f      	ldr	r0, [pc, #188]	; (8007f28 <cppLoop+0x300>)
 8007e6a:	f00c fcd6 	bl	801481a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007e6e:	4b30      	ldr	r3, [pc, #192]	; (8007f30 <cppLoop+0x308>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	f3bf 8f5b 	dmb	ish
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 0301 	and.w	r3, r3, #1
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	bf0c      	ite	eq
 8007e80:	2301      	moveq	r3, #1
 8007e82:	2300      	movne	r3, #0
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d015      	beq.n	8007eb6 <cppLoop+0x28e>
 8007e8a:	4829      	ldr	r0, [pc, #164]	; (8007f30 <cppLoop+0x308>)
 8007e8c:	f00c fcb9 	bl	8014802 <__cxa_guard_acquire>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bf14      	ite	ne
 8007e96:	2301      	movne	r3, #1
 8007e98:	2300      	moveq	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00a      	beq.n	8007eb6 <cppLoop+0x28e>
 8007ea0:	4813      	ldr	r0, [pc, #76]	; (8007ef0 <cppLoop+0x2c8>)
 8007ea2:	f7fb fff2 	bl	8003e8a <_ZN9LineTrace15getMaxVelocity2Ev>
 8007ea6:	eef0 7a40 	vmov.f32	s15, s0
 8007eaa:	4b22      	ldr	r3, [pc, #136]	; (8007f34 <cppLoop+0x30c>)
 8007eac:	edc3 7a00 	vstr	s15, [r3]
 8007eb0:	481f      	ldr	r0, [pc, #124]	; (8007f30 <cppLoop+0x308>)
 8007eb2:	f00c fcb2 	bl	801481a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007eb6:	4b20      	ldr	r3, [pc, #128]	; (8007f38 <cppLoop+0x310>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	f3bf 8f5b 	dmb	ish
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0301 	and.w	r3, r3, #1
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	bf0c      	ite	eq
 8007ec8:	2301      	moveq	r3, #1
 8007eca:	2300      	movne	r3, #0
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d03f      	beq.n	8007f52 <cppLoop+0x32a>
 8007ed2:	4819      	ldr	r0, [pc, #100]	; (8007f38 <cppLoop+0x310>)
 8007ed4:	f00c fc95 	bl	8014802 <__cxa_guard_acquire>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	bf14      	ite	ne
 8007ede:	2301      	movne	r3, #1
 8007ee0:	2300      	moveq	r3, #0
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d034      	beq.n	8007f52 <cppLoop+0x32a>
 8007ee8:	e028      	b.n	8007f3c <cppLoop+0x314>
 8007eea:	bf00      	nop
 8007eec:	200423d0 	.word	0x200423d0
 8007ef0:	2001db4c 	.word	0x2001db4c
 8007ef4:	200423cc 	.word	0x200423cc
 8007ef8:	200423d8 	.word	0x200423d8
 8007efc:	200423d4 	.word	0x200423d4
 8007f00:	200423e0 	.word	0x200423e0
 8007f04:	200423dc 	.word	0x200423dc
 8007f08:	200423e8 	.word	0x200423e8
 8007f0c:	200423e4 	.word	0x200423e4
 8007f10:	200423f0 	.word	0x200423f0
 8007f14:	200423ec 	.word	0x200423ec
 8007f18:	200423f8 	.word	0x200423f8
 8007f1c:	200423f4 	.word	0x200423f4
 8007f20:	20042400 	.word	0x20042400
 8007f24:	200423fc 	.word	0x200423fc
 8007f28:	20042408 	.word	0x20042408
 8007f2c:	20042404 	.word	0x20042404
 8007f30:	20042410 	.word	0x20042410
 8007f34:	2004240c 	.word	0x2004240c
 8007f38:	20042418 	.word	0x20042418
 8007f3c:	48b6      	ldr	r0, [pc, #728]	; (8008218 <cppLoop+0x5f0>)
 8007f3e:	f7fb ffb4 	bl	8003eaa <_ZN9LineTrace14getMinVelocityEv>
 8007f42:	eef0 7a40 	vmov.f32	s15, s0
 8007f46:	4bb5      	ldr	r3, [pc, #724]	; (800821c <cppLoop+0x5f4>)
 8007f48:	edc3 7a00 	vstr	s15, [r3]
 8007f4c:	48b4      	ldr	r0, [pc, #720]	; (8008220 <cppLoop+0x5f8>)
 8007f4e:	f00c fc64 	bl	801481a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007f52:	4bb4      	ldr	r3, [pc, #720]	; (8008224 <cppLoop+0x5fc>)
 8007f54:	781b      	ldrb	r3, [r3, #0]
 8007f56:	f3bf 8f5b 	dmb	ish
 8007f5a:	b2db      	uxtb	r3, r3
 8007f5c:	f003 0301 	and.w	r3, r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	bf0c      	ite	eq
 8007f64:	2301      	moveq	r3, #1
 8007f66:	2300      	movne	r3, #0
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d015      	beq.n	8007f9a <cppLoop+0x372>
 8007f6e:	48ad      	ldr	r0, [pc, #692]	; (8008224 <cppLoop+0x5fc>)
 8007f70:	f00c fc47 	bl	8014802 <__cxa_guard_acquire>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bf14      	ite	ne
 8007f7a:	2301      	movne	r3, #1
 8007f7c:	2300      	moveq	r3, #0
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00a      	beq.n	8007f9a <cppLoop+0x372>
 8007f84:	48a4      	ldr	r0, [pc, #656]	; (8008218 <cppLoop+0x5f0>)
 8007f86:	f7fb ffa0 	bl	8003eca <_ZN9LineTrace15getMinVelocity2Ev>
 8007f8a:	eef0 7a40 	vmov.f32	s15, s0
 8007f8e:	4ba6      	ldr	r3, [pc, #664]	; (8008228 <cppLoop+0x600>)
 8007f90:	edc3 7a00 	vstr	s15, [r3]
 8007f94:	48a3      	ldr	r0, [pc, #652]	; (8008224 <cppLoop+0x5fc>)
 8007f96:	f00c fc40 	bl	801481a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007f9a:	4ba4      	ldr	r3, [pc, #656]	; (800822c <cppLoop+0x604>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	f3bf 8f5b 	dmb	ish
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0301 	and.w	r3, r3, #1
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	bf0c      	ite	eq
 8007fac:	2301      	moveq	r3, #1
 8007fae:	2300      	movne	r3, #0
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d015      	beq.n	8007fe2 <cppLoop+0x3ba>
 8007fb6:	489d      	ldr	r0, [pc, #628]	; (800822c <cppLoop+0x604>)
 8007fb8:	f00c fc23 	bl	8014802 <__cxa_guard_acquire>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	bf14      	ite	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	2300      	moveq	r3, #0
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00a      	beq.n	8007fe2 <cppLoop+0x3ba>
 8007fcc:	4892      	ldr	r0, [pc, #584]	; (8008218 <cppLoop+0x5f0>)
 8007fce:	f7fb ffc0 	bl	8003f52 <_ZN9LineTrace9getMaxAccEv>
 8007fd2:	eef0 7a40 	vmov.f32	s15, s0
 8007fd6:	4b96      	ldr	r3, [pc, #600]	; (8008230 <cppLoop+0x608>)
 8007fd8:	edc3 7a00 	vstr	s15, [r3]
 8007fdc:	4893      	ldr	r0, [pc, #588]	; (800822c <cppLoop+0x604>)
 8007fde:	f00c fc1c 	bl	801481a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007fe2:	4b94      	ldr	r3, [pc, #592]	; (8008234 <cppLoop+0x60c>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	f3bf 8f5b 	dmb	ish
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 0301 	and.w	r3, r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	bf0c      	ite	eq
 8007ff4:	2301      	moveq	r3, #1
 8007ff6:	2300      	movne	r3, #0
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d015      	beq.n	800802a <cppLoop+0x402>
 8007ffe:	488d      	ldr	r0, [pc, #564]	; (8008234 <cppLoop+0x60c>)
 8008000:	f00c fbff 	bl	8014802 <__cxa_guard_acquire>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	bf14      	ite	ne
 800800a:	2301      	movne	r3, #1
 800800c:	2300      	moveq	r3, #0
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <cppLoop+0x402>
 8008014:	4880      	ldr	r0, [pc, #512]	; (8008218 <cppLoop+0x5f0>)
 8008016:	f7fb ffd2 	bl	8003fbe <_ZN9LineTrace9getMaxDecEv>
 800801a:	eef0 7a40 	vmov.f32	s15, s0
 800801e:	4b86      	ldr	r3, [pc, #536]	; (8008238 <cppLoop+0x610>)
 8008020:	edc3 7a00 	vstr	s15, [r3]
 8008024:	4883      	ldr	r0, [pc, #524]	; (8008234 <cppLoop+0x60c>)
 8008026:	f00c fbf8 	bl	801481a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 800802a:	4b84      	ldr	r3, [pc, #528]	; (800823c <cppLoop+0x614>)
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	f3bf 8f5b 	dmb	ish
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	bf0c      	ite	eq
 800803c:	2301      	moveq	r3, #1
 800803e:	2300      	movne	r3, #0
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d015      	beq.n	8008072 <cppLoop+0x44a>
 8008046:	487d      	ldr	r0, [pc, #500]	; (800823c <cppLoop+0x614>)
 8008048:	f00c fbdb 	bl	8014802 <__cxa_guard_acquire>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	bf14      	ite	ne
 8008052:	2301      	movne	r3, #1
 8008054:	2300      	moveq	r3, #0
 8008056:	b2db      	uxtb	r3, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <cppLoop+0x44a>
 800805c:	486e      	ldr	r0, [pc, #440]	; (8008218 <cppLoop+0x5f0>)
 800805e:	f7fb ff9c 	bl	8003f9a <_ZN9LineTrace10getMaxAcc2Ev>
 8008062:	eef0 7a40 	vmov.f32	s15, s0
 8008066:	4b76      	ldr	r3, [pc, #472]	; (8008240 <cppLoop+0x618>)
 8008068:	edc3 7a00 	vstr	s15, [r3]
 800806c:	4873      	ldr	r0, [pc, #460]	; (800823c <cppLoop+0x614>)
 800806e:	f00c fbd4 	bl	801481a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8008072:	4b74      	ldr	r3, [pc, #464]	; (8008244 <cppLoop+0x61c>)
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	f3bf 8f5b 	dmb	ish
 800807a:	b2db      	uxtb	r3, r3
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	bf0c      	ite	eq
 8008084:	2301      	moveq	r3, #1
 8008086:	2300      	movne	r3, #0
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b00      	cmp	r3, #0
 800808c:	d015      	beq.n	80080ba <cppLoop+0x492>
 800808e:	486d      	ldr	r0, [pc, #436]	; (8008244 <cppLoop+0x61c>)
 8008090:	f00c fbb7 	bl	8014802 <__cxa_guard_acquire>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	bf14      	ite	ne
 800809a:	2301      	movne	r3, #1
 800809c:	2300      	moveq	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00a      	beq.n	80080ba <cppLoop+0x492>
 80080a4:	485c      	ldr	r0, [pc, #368]	; (8008218 <cppLoop+0x5f0>)
 80080a6:	f7fb ff66 	bl	8003f76 <_ZN9LineTrace10getMaxDec2Ev>
 80080aa:	eef0 7a40 	vmov.f32	s15, s0
 80080ae:	4b66      	ldr	r3, [pc, #408]	; (8008248 <cppLoop+0x620>)
 80080b0:	edc3 7a00 	vstr	s15, [r3]
 80080b4:	4863      	ldr	r0, [pc, #396]	; (8008244 <cppLoop+0x61c>)
 80080b6:	f00c fbb0 	bl	801481a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 80080ba:	4864      	ldr	r0, [pc, #400]	; (800824c <cppLoop+0x624>)
 80080bc:	f7fd f9fe 	bl	80054bc <_ZN12RotarySwitch8getValueEv>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b0f      	cmp	r3, #15
 80080c4:	f201 856e 	bhi.w	8009ba4 <cppLoop+0x1f7c>
 80080c8:	a201      	add	r2, pc, #4	; (adr r2, 80080d0 <cppLoop+0x4a8>)
 80080ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ce:	bf00      	nop
 80080d0:	08008111 	.word	0x08008111
 80080d4:	08008495 	.word	0x08008495
 80080d8:	080085b1 	.word	0x080085b1
 80080dc:	08008703 	.word	0x08008703
 80080e0:	080087f7 	.word	0x080087f7
 80080e4:	08008a99 	.word	0x08008a99
 80080e8:	08008bd1 	.word	0x08008bd1
 80080ec:	08008e55 	.word	0x08008e55
 80080f0:	0800909f 	.word	0x0800909f
 80080f4:	0800932f 	.word	0x0800932f
 80080f8:	080093eb 	.word	0x080093eb
 80080fc:	080094e1 	.word	0x080094e1
 8008100:	08009567 	.word	0x08009567
 8008104:	0800962d 	.word	0x0800962d
 8008108:	080096f3 	.word	0x080096f3
 800810c:	08009835 	.word	0x08009835
	case 0:
		led.fullColor('W');
 8008110:	2157      	movs	r1, #87	; 0x57
 8008112:	484f      	ldr	r0, [pc, #316]	; (8008250 <cppLoop+0x628>)
 8008114:	f7fa f83e 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008118:	f7f8 ffc2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800811c:	2100      	movs	r1, #0
 800811e:	2000      	movs	r0, #0
 8008120:	f7f8 ffce 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 8008124:	483c      	ldr	r0, [pc, #240]	; (8008218 <cppLoop+0x5f0>)
 8008126:	f7fb fe04 	bl	8003d32 <_ZN9LineTrace9getKpSlowEv>
 800812a:	eeb0 7a40 	vmov.f32	s14, s0
 800812e:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008254 <cppLoop+0x62c>
 8008132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008136:	eeb0 0a67 	vmov.f32	s0, s15
 800813a:	f7fa fc57 	bl	80029ec <_ZSt3absf>
 800813e:	ee10 3a10 	vmov	r3, s0
 8008142:	4618      	mov	r0, r3
 8008144:	f7f8 fa18 	bl	8000578 <__aeabi_f2d>
 8008148:	4603      	mov	r3, r0
 800814a:	460c      	mov	r4, r1
 800814c:	461a      	mov	r2, r3
 800814e:	4623      	mov	r3, r4
 8008150:	4841      	ldr	r0, [pc, #260]	; (8008258 <cppLoop+0x630>)
 8008152:	f7f8 ffdf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008156:	2101      	movs	r1, #1
 8008158:	2000      	movs	r0, #0
 800815a:	f7f8 ffb1 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 800815e:	482e      	ldr	r0, [pc, #184]	; (8008218 <cppLoop+0x5f0>)
 8008160:	f7fb fdf6 	bl	8003d50 <_ZN9LineTrace9getKiSlowEv>
 8008164:	eeb0 7a40 	vmov.f32	s14, s0
 8008168:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800825c <cppLoop+0x634>
 800816c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008170:	eeb0 0a67 	vmov.f32	s0, s15
 8008174:	f7fa fc3a 	bl	80029ec <_ZSt3absf>
 8008178:	ee10 3a10 	vmov	r3, s0
 800817c:	4618      	mov	r0, r3
 800817e:	f7f8 f9fb 	bl	8000578 <__aeabi_f2d>
 8008182:	4605      	mov	r5, r0
 8008184:	460e      	mov	r6, r1
 8008186:	4824      	ldr	r0, [pc, #144]	; (8008218 <cppLoop+0x5f0>)
 8008188:	f7fb fdf1 	bl	8003d6e <_ZN9LineTrace9getKdSlowEv>
 800818c:	eeb0 7a40 	vmov.f32	s14, s0
 8008190:	eddf 7a33 	vldr	s15, [pc, #204]	; 8008260 <cppLoop+0x638>
 8008194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008198:	eeb0 0a67 	vmov.f32	s0, s15
 800819c:	f7fa fc26 	bl	80029ec <_ZSt3absf>
 80081a0:	ee10 3a10 	vmov	r3, s0
 80081a4:	4618      	mov	r0, r3
 80081a6:	f7f8 f9e7 	bl	8000578 <__aeabi_f2d>
 80081aa:	4603      	mov	r3, r0
 80081ac:	460c      	mov	r4, r1
 80081ae:	e9cd 3400 	strd	r3, r4, [sp]
 80081b2:	462a      	mov	r2, r5
 80081b4:	4633      	mov	r3, r6
 80081b6:	482b      	ldr	r0, [pc, #172]	; (8008264 <cppLoop+0x63c>)
 80081b8:	f7f8 ffac 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80081bc:	482a      	ldr	r0, [pc, #168]	; (8008268 <cppLoop+0x640>)
 80081be:	f7f9 ff85 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	bf0c      	ite	eq
 80081c8:	2301      	moveq	r3, #1
 80081ca:	2300      	movne	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d04e      	beq.n	8008270 <cppLoop+0x648>
			led.LR(-1, 1);
 80081d2:	2201      	movs	r2, #1
 80081d4:	f04f 31ff 	mov.w	r1, #4294967295
 80081d8:	481d      	ldr	r0, [pc, #116]	; (8008250 <cppLoop+0x628>)
 80081da:	f7fa f897 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80081de:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80081e2:	f001 fe29 	bl	8009e38 <HAL_Delay>

			selector++;
 80081e6:	4b21      	ldr	r3, [pc, #132]	; (800826c <cppLoop+0x644>)
 80081e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	3301      	adds	r3, #1
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	b21a      	sxth	r2, r3
 80081f4:	4b1d      	ldr	r3, [pc, #116]	; (800826c <cppLoop+0x644>)
 80081f6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80081f8:	4b1c      	ldr	r3, [pc, #112]	; (800826c <cppLoop+0x644>)
 80081fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081fe:	2b02      	cmp	r3, #2
 8008200:	dd02      	ble.n	8008208 <cppLoop+0x5e0>
 8008202:	4b1a      	ldr	r3, [pc, #104]	; (800826c <cppLoop+0x644>)
 8008204:	2200      	movs	r2, #0
 8008206:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008208:	2200      	movs	r2, #0
 800820a:	f04f 31ff 	mov.w	r1, #4294967295
 800820e:	4810      	ldr	r0, [pc, #64]	; (8008250 <cppLoop+0x628>)
 8008210:	f7fa f87c 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008214:	f001 bcc8 	b.w	8009ba8 <cppLoop+0x1f80>
 8008218:	2001db4c 	.word	0x2001db4c
 800821c:	20042414 	.word	0x20042414
 8008220:	20042418 	.word	0x20042418
 8008224:	20042420 	.word	0x20042420
 8008228:	2004241c 	.word	0x2004241c
 800822c:	20042428 	.word	0x20042428
 8008230:	20042424 	.word	0x20042424
 8008234:	20042430 	.word	0x20042430
 8008238:	2004242c 	.word	0x2004242c
 800823c:	20042438 	.word	0x20042438
 8008240:	20042434 	.word	0x20042434
 8008244:	20042440 	.word	0x20042440
 8008248:	2004243c 	.word	0x2004243c
 800824c:	200005b4 	.word	0x200005b4
 8008250:	200005bc 	.word	0x200005bc
 8008254:	447a0000 	.word	0x447a0000
 8008258:	08019f20 	.word	0x08019f20
 800825c:	42c80000 	.word	0x42c80000
 8008260:	461c4000 	.word	0x461c4000
 8008264:	08019f2c 	.word	0x08019f2c
 8008268:	200005b0 	.word	0x200005b0
 800826c:	200423c0 	.word	0x200423c0
		else if(joy_stick.getValue() == JOY_R){
 8008270:	48bd      	ldr	r0, [pc, #756]	; (8008568 <cppLoop+0x940>)
 8008272:	f7f9 ff2b 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008276:	4603      	mov	r3, r0
 8008278:	2b10      	cmp	r3, #16
 800827a:	bf0c      	ite	eq
 800827c:	2301      	moveq	r3, #1
 800827e:	2300      	movne	r3, #0
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d059      	beq.n	800833a <cppLoop+0x712>
			led.LR(-1, 1);
 8008286:	2201      	movs	r2, #1
 8008288:	f04f 31ff 	mov.w	r1, #4294967295
 800828c:	48b7      	ldr	r0, [pc, #732]	; (800856c <cppLoop+0x944>)
 800828e:	f7fa f83d 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008292:	2064      	movs	r0, #100	; 0x64
 8008294:	f001 fdd0 	bl	8009e38 <HAL_Delay>
			if(selector == 0){
 8008298:	4bb5      	ldr	r3, [pc, #724]	; (8008570 <cppLoop+0x948>)
 800829a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d113      	bne.n	80082ca <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 80082a2:	4bb4      	ldr	r3, [pc, #720]	; (8008574 <cppLoop+0x94c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7f8 f966 	bl	8000578 <__aeabi_f2d>
 80082ac:	a3a8      	add	r3, pc, #672	; (adr r3, 8008550 <cppLoop+0x928>)
 80082ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b2:	f7f8 f803 	bl	80002bc <__adddf3>
 80082b6:	4603      	mov	r3, r0
 80082b8:	460c      	mov	r4, r1
 80082ba:	4618      	mov	r0, r3
 80082bc:	4621      	mov	r1, r4
 80082be:	f7f8 fcab 	bl	8000c18 <__aeabi_d2f>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4bab      	ldr	r3, [pc, #684]	; (8008574 <cppLoop+0x94c>)
 80082c6:	601a      	str	r2, [r3, #0]
 80082c8:	e02b      	b.n	8008322 <cppLoop+0x6fa>
			else if(selector == 1){
 80082ca:	4ba9      	ldr	r3, [pc, #676]	; (8008570 <cppLoop+0x948>)
 80082cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d113      	bne.n	80082fc <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 80082d4:	4ba8      	ldr	r3, [pc, #672]	; (8008578 <cppLoop+0x950>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4618      	mov	r0, r3
 80082da:	f7f8 f94d 	bl	8000578 <__aeabi_f2d>
 80082de:	a39e      	add	r3, pc, #632	; (adr r3, 8008558 <cppLoop+0x930>)
 80082e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e4:	f7f7 ffea 	bl	80002bc <__adddf3>
 80082e8:	4603      	mov	r3, r0
 80082ea:	460c      	mov	r4, r1
 80082ec:	4618      	mov	r0, r3
 80082ee:	4621      	mov	r1, r4
 80082f0:	f7f8 fc92 	bl	8000c18 <__aeabi_d2f>
 80082f4:	4602      	mov	r2, r0
 80082f6:	4ba0      	ldr	r3, [pc, #640]	; (8008578 <cppLoop+0x950>)
 80082f8:	601a      	str	r2, [r3, #0]
 80082fa:	e012      	b.n	8008322 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 80082fc:	4b9f      	ldr	r3, [pc, #636]	; (800857c <cppLoop+0x954>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4618      	mov	r0, r3
 8008302:	f7f8 f939 	bl	8000578 <__aeabi_f2d>
 8008306:	a396      	add	r3, pc, #600	; (adr r3, 8008560 <cppLoop+0x938>)
 8008308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830c:	f7f7 ffd6 	bl	80002bc <__adddf3>
 8008310:	4603      	mov	r3, r0
 8008312:	460c      	mov	r4, r1
 8008314:	4618      	mov	r0, r3
 8008316:	4621      	mov	r1, r4
 8008318:	f7f8 fc7e 	bl	8000c18 <__aeabi_d2f>
 800831c:	4602      	mov	r2, r0
 800831e:	4b97      	ldr	r3, [pc, #604]	; (800857c <cppLoop+0x954>)
 8008320:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008322:	2152      	movs	r1, #82	; 0x52
 8008324:	4891      	ldr	r0, [pc, #580]	; (800856c <cppLoop+0x944>)
 8008326:	f7f9 ff35 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800832a:	2200      	movs	r2, #0
 800832c:	f04f 31ff 	mov.w	r1, #4294967295
 8008330:	488e      	ldr	r0, [pc, #568]	; (800856c <cppLoop+0x944>)
 8008332:	f7f9 ffeb 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008336:	f001 bc37 	b.w	8009ba8 <cppLoop+0x1f80>
		else if(joy_stick.getValue() == JOY_L){
 800833a:	488b      	ldr	r0, [pc, #556]	; (8008568 <cppLoop+0x940>)
 800833c:	f7f9 fec6 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008340:	4603      	mov	r3, r0
 8008342:	2b01      	cmp	r3, #1
 8008344:	bf0c      	ite	eq
 8008346:	2301      	moveq	r3, #1
 8008348:	2300      	movne	r3, #0
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d059      	beq.n	8008404 <cppLoop+0x7dc>
			led.LR(-1, 1);
 8008350:	2201      	movs	r2, #1
 8008352:	f04f 31ff 	mov.w	r1, #4294967295
 8008356:	4885      	ldr	r0, [pc, #532]	; (800856c <cppLoop+0x944>)
 8008358:	f7f9 ffd8 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800835c:	2064      	movs	r0, #100	; 0x64
 800835e:	f001 fd6b 	bl	8009e38 <HAL_Delay>
			if(selector == 0){
 8008362:	4b83      	ldr	r3, [pc, #524]	; (8008570 <cppLoop+0x948>)
 8008364:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d113      	bne.n	8008394 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 800836c:	4b81      	ldr	r3, [pc, #516]	; (8008574 <cppLoop+0x94c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4618      	mov	r0, r3
 8008372:	f7f8 f901 	bl	8000578 <__aeabi_f2d>
 8008376:	a376      	add	r3, pc, #472	; (adr r3, 8008550 <cppLoop+0x928>)
 8008378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800837c:	f7f7 ff9c 	bl	80002b8 <__aeabi_dsub>
 8008380:	4603      	mov	r3, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4618      	mov	r0, r3
 8008386:	4621      	mov	r1, r4
 8008388:	f7f8 fc46 	bl	8000c18 <__aeabi_d2f>
 800838c:	4602      	mov	r2, r0
 800838e:	4b79      	ldr	r3, [pc, #484]	; (8008574 <cppLoop+0x94c>)
 8008390:	601a      	str	r2, [r3, #0]
 8008392:	e02b      	b.n	80083ec <cppLoop+0x7c4>
			else if(selector == 1){
 8008394:	4b76      	ldr	r3, [pc, #472]	; (8008570 <cppLoop+0x948>)
 8008396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800839a:	2b01      	cmp	r3, #1
 800839c:	d113      	bne.n	80083c6 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 800839e:	4b76      	ldr	r3, [pc, #472]	; (8008578 <cppLoop+0x950>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f8 f8e8 	bl	8000578 <__aeabi_f2d>
 80083a8:	a36b      	add	r3, pc, #428	; (adr r3, 8008558 <cppLoop+0x930>)
 80083aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ae:	f7f7 ff83 	bl	80002b8 <__aeabi_dsub>
 80083b2:	4603      	mov	r3, r0
 80083b4:	460c      	mov	r4, r1
 80083b6:	4618      	mov	r0, r3
 80083b8:	4621      	mov	r1, r4
 80083ba:	f7f8 fc2d 	bl	8000c18 <__aeabi_d2f>
 80083be:	4602      	mov	r2, r0
 80083c0:	4b6d      	ldr	r3, [pc, #436]	; (8008578 <cppLoop+0x950>)
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	e012      	b.n	80083ec <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 80083c6:	4b6d      	ldr	r3, [pc, #436]	; (800857c <cppLoop+0x954>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7f8 f8d4 	bl	8000578 <__aeabi_f2d>
 80083d0:	a363      	add	r3, pc, #396	; (adr r3, 8008560 <cppLoop+0x938>)
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	f7f7 ff6f 	bl	80002b8 <__aeabi_dsub>
 80083da:	4603      	mov	r3, r0
 80083dc:	460c      	mov	r4, r1
 80083de:	4618      	mov	r0, r3
 80083e0:	4621      	mov	r1, r4
 80083e2:	f7f8 fc19 	bl	8000c18 <__aeabi_d2f>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b64      	ldr	r3, [pc, #400]	; (800857c <cppLoop+0x954>)
 80083ea:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80083ec:	2152      	movs	r1, #82	; 0x52
 80083ee:	485f      	ldr	r0, [pc, #380]	; (800856c <cppLoop+0x944>)
 80083f0:	f7f9 fed0 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80083f4:	2200      	movs	r2, #0
 80083f6:	f04f 31ff 	mov.w	r1, #4294967295
 80083fa:	485c      	ldr	r0, [pc, #368]	; (800856c <cppLoop+0x944>)
 80083fc:	f7f9 ff86 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008400:	f001 bbd2 	b.w	8009ba8 <cppLoop+0x1f80>
		else if(joy_stick.getValue() == JOY_C){
 8008404:	4858      	ldr	r0, [pc, #352]	; (8008568 <cppLoop+0x940>)
 8008406:	f7f9 fe61 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800840a:	4603      	mov	r3, r0
 800840c:	2b02      	cmp	r3, #2
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	f001 83c6 	beq.w	8009ba8 <cppLoop+0x1f80>
			led.LR(-1, 1);
 800841c:	2201      	movs	r2, #1
 800841e:	f04f 31ff 	mov.w	r1, #4294967295
 8008422:	4852      	ldr	r0, [pc, #328]	; (800856c <cppLoop+0x944>)
 8008424:	f7f9 ff72 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008428:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800842c:	f001 fd04 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 8008430:	2300      	movs	r3, #0
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4b4f      	ldr	r3, [pc, #316]	; (8008574 <cppLoop+0x94c>)
 8008436:	2201      	movs	r2, #1
 8008438:	4951      	ldr	r1, [pc, #324]	; (8008580 <cppLoop+0x958>)
 800843a:	4852      	ldr	r0, [pc, #328]	; (8008584 <cppLoop+0x95c>)
 800843c:	f7f9 fa1e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 8008440:	2300      	movs	r3, #0
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4b4c      	ldr	r3, [pc, #304]	; (8008578 <cppLoop+0x950>)
 8008446:	2201      	movs	r2, #1
 8008448:	494f      	ldr	r1, [pc, #316]	; (8008588 <cppLoop+0x960>)
 800844a:	484e      	ldr	r0, [pc, #312]	; (8008584 <cppLoop+0x95c>)
 800844c:	f7f9 fa16 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 8008450:	2300      	movs	r3, #0
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	4b49      	ldr	r3, [pc, #292]	; (800857c <cppLoop+0x954>)
 8008456:	2201      	movs	r2, #1
 8008458:	494c      	ldr	r1, [pc, #304]	; (800858c <cppLoop+0x964>)
 800845a:	484a      	ldr	r0, [pc, #296]	; (8008584 <cppLoop+0x95c>)
 800845c:	f7f9 fa0e 	bl	800187c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 8008460:	4b44      	ldr	r3, [pc, #272]	; (8008574 <cppLoop+0x94c>)
 8008462:	edd3 7a00 	vldr	s15, [r3]
 8008466:	4b44      	ldr	r3, [pc, #272]	; (8008578 <cppLoop+0x950>)
 8008468:	ed93 7a00 	vldr	s14, [r3]
 800846c:	4b43      	ldr	r3, [pc, #268]	; (800857c <cppLoop+0x954>)
 800846e:	edd3 6a00 	vldr	s13, [r3]
 8008472:	eeb0 1a66 	vmov.f32	s2, s13
 8008476:	eef0 0a47 	vmov.f32	s1, s14
 800847a:	eeb0 0a67 	vmov.f32	s0, s15
 800847e:	4844      	ldr	r0, [pc, #272]	; (8008590 <cppLoop+0x968>)
 8008480:	f7fb fc3e 	bl	8003d00 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008484:	2200      	movs	r2, #0
 8008486:	f04f 31ff 	mov.w	r1, #4294967295
 800848a:	4838      	ldr	r0, [pc, #224]	; (800856c <cppLoop+0x944>)
 800848c:	f7f9 ff3e 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008490:	f001 bb8a 	b.w	8009ba8 <cppLoop+0x1f80>

	case 1:
		led.fullColor('C');
 8008494:	2143      	movs	r1, #67	; 0x43
 8008496:	4835      	ldr	r0, [pc, #212]	; (800856c <cppLoop+0x944>)
 8008498:	f7f9 fe7c 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 800849c:	f7f8 fe00 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084a0:	2100      	movs	r1, #0
 80084a2:	2000      	movs	r0, #0
 80084a4:	f7f8 fe0c 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80084a8:	483a      	ldr	r0, [pc, #232]	; (8008594 <cppLoop+0x96c>)
 80084aa:	f7f8 fe33 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084ae:	2101      	movs	r1, #1
 80084b0:	2000      	movs	r0, #0
 80084b2:	f7f8 fe05 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80084b6:	4b38      	ldr	r3, [pc, #224]	; (8008598 <cppLoop+0x970>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7f8 f85c 	bl	8000578 <__aeabi_f2d>
 80084c0:	4603      	mov	r3, r0
 80084c2:	460c      	mov	r4, r1
 80084c4:	461a      	mov	r2, r3
 80084c6:	4623      	mov	r3, r4
 80084c8:	4834      	ldr	r0, [pc, #208]	; (800859c <cppLoop+0x974>)
 80084ca:	f7f8 fe23 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80084ce:	4826      	ldr	r0, [pc, #152]	; (8008568 <cppLoop+0x940>)
 80084d0:	f7f9 fdfc 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	bf0c      	ite	eq
 80084da:	2301      	moveq	r3, #1
 80084dc:	2300      	movne	r3, #0
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f001 8363 	beq.w	8009bac <cppLoop+0x1f84>
			HAL_Delay(500);
 80084e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80084ea:	f001 fca5 	bl	8009e38 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80084ee:	4b2a      	ldr	r3, [pc, #168]	; (8008598 <cppLoop+0x970>)
 80084f0:	edd3 7a00 	vldr	s15, [r3]
 80084f4:	eeb0 0a67 	vmov.f32	s0, s15
 80084f8:	4825      	ldr	r0, [pc, #148]	; (8008590 <cppLoop+0x968>)
 80084fa:	f7fb fc56 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80084fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008502:	2101      	movs	r1, #1
 8008504:	4819      	ldr	r0, [pc, #100]	; (800856c <cppLoop+0x944>)
 8008506:	f7f9 ff01 	bl	800230c <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800850a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800850e:	f001 fc93 	bl	8009e38 <HAL_Delay>
			//logger.start();

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008512:	2100      	movs	r1, #0
 8008514:	481e      	ldr	r0, [pc, #120]	; (8008590 <cppLoop+0x968>)
 8008516:	f7fb fe99 	bl	800424c <_ZN9LineTrace7setModeEs>

			logger.start();
 800851a:	4821      	ldr	r0, [pc, #132]	; (80085a0 <cppLoop+0x978>)
 800851c:	f7fc fc1d 	bl	8004d5a <_ZN6Logger5startEv>

			line_trace.running();
 8008520:	481b      	ldr	r0, [pc, #108]	; (8008590 <cppLoop+0x968>)
 8008522:	f7fb fed7 	bl	80042d4 <_ZN9LineTrace7runningEv>

			logger.stop();
 8008526:	481e      	ldr	r0, [pc, #120]	; (80085a0 <cppLoop+0x978>)
 8008528:	f7fc fc33 	bl	8004d92 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 800852c:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <cppLoop+0x97c>)
 800852e:	491e      	ldr	r1, [pc, #120]	; (80085a8 <cppLoop+0x980>)
 8008530:	481b      	ldr	r0, [pc, #108]	; (80085a0 <cppLoop+0x978>)
 8008532:	f7fc fb13 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 8008536:	4a1d      	ldr	r2, [pc, #116]	; (80085ac <cppLoop+0x984>)
 8008538:	491b      	ldr	r1, [pc, #108]	; (80085a8 <cppLoop+0x980>)
 800853a:	4819      	ldr	r0, [pc, #100]	; (80085a0 <cppLoop+0x978>)
 800853c:	f7fc fb22 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>
			// Record stop and save
			//logger.stop();
			//logger.saveLogsInt("STATELOG", "LPERIOD.txt");
			//logger.saveLogs2Int("STATELOG", "RPERIOD.txt");

			led.LR(0, -1);
 8008540:	f04f 32ff 	mov.w	r2, #4294967295
 8008544:	2100      	movs	r1, #0
 8008546:	4809      	ldr	r0, [pc, #36]	; (800856c <cppLoop+0x944>)
 8008548:	f7f9 fee0 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 800854c:	f001 bb2e 	b.w	8009bac <cppLoop+0x1f84>
 8008550:	88e368f1 	.word	0x88e368f1
 8008554:	3ee4f8b5 	.word	0x3ee4f8b5
 8008558:	eb1c432d 	.word	0xeb1c432d
 800855c:	3f1a36e2 	.word	0x3f1a36e2
 8008560:	a0b5ed8d 	.word	0xa0b5ed8d
 8008564:	3eb0c6f7 	.word	0x3eb0c6f7
 8008568:	200005b0 	.word	0x200005b0
 800856c:	200005bc 	.word	0x200005bc
 8008570:	200423c0 	.word	0x200423c0
 8008574:	200423e4 	.word	0x200423e4
 8008578:	200423ec 	.word	0x200423ec
 800857c:	200423f4 	.word	0x200423f4
 8008580:	08019f3c 	.word	0x08019f3c
 8008584:	08019f48 	.word	0x08019f48
 8008588:	08019f50 	.word	0x08019f50
 800858c:	08019f5c 	.word	0x08019f5c
 8008590:	2001db4c 	.word	0x2001db4c
 8008594:	08019f68 	.word	0x08019f68
 8008598:	200423fc 	.word	0x200423fc
 800859c:	08019f74 	.word	0x08019f74
 80085a0:	200005e0 	.word	0x200005e0
 80085a4:	08019f80 	.word	0x08019f80
 80085a8:	08019f8c 	.word	0x08019f8c
 80085ac:	08019f98 	.word	0x08019f98

	case 2:
		led.fullColor('B');
 80085b0:	2142      	movs	r1, #66	; 0x42
 80085b2:	48c1      	ldr	r0, [pc, #772]	; (80088b8 <cppLoop+0xc90>)
 80085b4:	f7f9 fdee 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80085b8:	f7f8 fd72 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80085bc:	2100      	movs	r1, #0
 80085be:	2000      	movs	r0, #0
 80085c0:	f7f8 fd7e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80085c4:	48bd      	ldr	r0, [pc, #756]	; (80088bc <cppLoop+0xc94>)
 80085c6:	f7f8 fda5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085ca:	2101      	movs	r1, #1
 80085cc:	2000      	movs	r0, #0
 80085ce:	f7f8 fd77 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80085d2:	4bbb      	ldr	r3, [pc, #748]	; (80088c0 <cppLoop+0xc98>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7f7 ffce 	bl	8000578 <__aeabi_f2d>
 80085dc:	4603      	mov	r3, r0
 80085de:	460c      	mov	r4, r1
 80085e0:	461a      	mov	r2, r3
 80085e2:	4623      	mov	r3, r4
 80085e4:	48b7      	ldr	r0, [pc, #732]	; (80088c4 <cppLoop+0xc9c>)
 80085e6:	f7f8 fd95 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80085ea:	48b7      	ldr	r0, [pc, #732]	; (80088c8 <cppLoop+0xca0>)
 80085ec:	f7f9 fd6e 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b10      	cmp	r3, #16
 80085f4:	bf0c      	ite	eq
 80085f6:	2301      	moveq	r3, #1
 80085f8:	2300      	movne	r3, #0
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d023      	beq.n	8008648 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008600:	2201      	movs	r2, #1
 8008602:	f04f 31ff 	mov.w	r1, #4294967295
 8008606:	48ac      	ldr	r0, [pc, #688]	; (80088b8 <cppLoop+0xc90>)
 8008608:	f7f9 fe80 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800860c:	2064      	movs	r0, #100	; 0x64
 800860e:	f001 fc13 	bl	8009e38 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008612:	4bab      	ldr	r3, [pc, #684]	; (80088c0 <cppLoop+0xc98>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f7f7 ffae 	bl	8000578 <__aeabi_f2d>
 800861c:	a3a4      	add	r3, pc, #656	; (adr r3, 80088b0 <cppLoop+0xc88>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 fe4b 	bl	80002bc <__adddf3>
 8008626:	4603      	mov	r3, r0
 8008628:	460c      	mov	r4, r1
 800862a:	4618      	mov	r0, r3
 800862c:	4621      	mov	r1, r4
 800862e:	f7f8 faf3 	bl	8000c18 <__aeabi_d2f>
 8008632:	4602      	mov	r2, r0
 8008634:	4ba2      	ldr	r3, [pc, #648]	; (80088c0 <cppLoop+0xc98>)
 8008636:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008638:	2200      	movs	r2, #0
 800863a:	f04f 31ff 	mov.w	r1, #4294967295
 800863e:	489e      	ldr	r0, [pc, #632]	; (80088b8 <cppLoop+0xc90>)
 8008640:	f7f9 fe64 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008644:	f001 bab4 	b.w	8009bb0 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_L){
 8008648:	489f      	ldr	r0, [pc, #636]	; (80088c8 <cppLoop+0xca0>)
 800864a:	f7f9 fd3f 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800864e:	4603      	mov	r3, r0
 8008650:	2b01      	cmp	r3, #1
 8008652:	bf0c      	ite	eq
 8008654:	2301      	moveq	r3, #1
 8008656:	2300      	movne	r3, #0
 8008658:	b2db      	uxtb	r3, r3
 800865a:	2b00      	cmp	r3, #0
 800865c:	d023      	beq.n	80086a6 <cppLoop+0xa7e>
			led.LR(-1, 1);
 800865e:	2201      	movs	r2, #1
 8008660:	f04f 31ff 	mov.w	r1, #4294967295
 8008664:	4894      	ldr	r0, [pc, #592]	; (80088b8 <cppLoop+0xc90>)
 8008666:	f7f9 fe51 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800866a:	2064      	movs	r0, #100	; 0x64
 800866c:	f001 fbe4 	bl	8009e38 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008670:	4b93      	ldr	r3, [pc, #588]	; (80088c0 <cppLoop+0xc98>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4618      	mov	r0, r3
 8008676:	f7f7 ff7f 	bl	8000578 <__aeabi_f2d>
 800867a:	a38d      	add	r3, pc, #564	; (adr r3, 80088b0 <cppLoop+0xc88>)
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f7f7 fe1a 	bl	80002b8 <__aeabi_dsub>
 8008684:	4603      	mov	r3, r0
 8008686:	460c      	mov	r4, r1
 8008688:	4618      	mov	r0, r3
 800868a:	4621      	mov	r1, r4
 800868c:	f7f8 fac4 	bl	8000c18 <__aeabi_d2f>
 8008690:	4602      	mov	r2, r0
 8008692:	4b8b      	ldr	r3, [pc, #556]	; (80088c0 <cppLoop+0xc98>)
 8008694:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008696:	2200      	movs	r2, #0
 8008698:	f04f 31ff 	mov.w	r1, #4294967295
 800869c:	4886      	ldr	r0, [pc, #536]	; (80088b8 <cppLoop+0xc90>)
 800869e:	f7f9 fe35 	bl	800230c <_ZN3LED2LREaa>
		break;
 80086a2:	f001 ba85 	b.w	8009bb0 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_C){
 80086a6:	4888      	ldr	r0, [pc, #544]	; (80088c8 <cppLoop+0xca0>)
 80086a8:	f7f9 fd10 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	bf0c      	ite	eq
 80086b2:	2301      	moveq	r3, #1
 80086b4:	2300      	movne	r3, #0
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f001 8279 	beq.w	8009bb0 <cppLoop+0x1f88>
			led.LR(-1, 1);
 80086be:	2201      	movs	r2, #1
 80086c0:	f04f 31ff 	mov.w	r1, #4294967295
 80086c4:	487c      	ldr	r0, [pc, #496]	; (80088b8 <cppLoop+0xc90>)
 80086c6:	f7f9 fe21 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80086ca:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80086ce:	f001 fbb3 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80086d2:	2300      	movs	r3, #0
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	4b7a      	ldr	r3, [pc, #488]	; (80088c0 <cppLoop+0xc98>)
 80086d8:	2201      	movs	r2, #1
 80086da:	497c      	ldr	r1, [pc, #496]	; (80088cc <cppLoop+0xca4>)
 80086dc:	487c      	ldr	r0, [pc, #496]	; (80088d0 <cppLoop+0xca8>)
 80086de:	f7f9 f8cd 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80086e2:	4b77      	ldr	r3, [pc, #476]	; (80088c0 <cppLoop+0xc98>)
 80086e4:	edd3 7a00 	vldr	s15, [r3]
 80086e8:	eeb0 0a67 	vmov.f32	s0, s15
 80086ec:	4879      	ldr	r0, [pc, #484]	; (80088d4 <cppLoop+0xcac>)
 80086ee:	f7fb fb5c 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80086f2:	2200      	movs	r2, #0
 80086f4:	f04f 31ff 	mov.w	r1, #4294967295
 80086f8:	486f      	ldr	r0, [pc, #444]	; (80088b8 <cppLoop+0xc90>)
 80086fa:	f7f9 fe07 	bl	800230c <_ZN3LED2LREaa>
		break;
 80086fe:	f001 ba57 	b.w	8009bb0 <cppLoop+0x1f88>

	case 3:
		led.fullColor('Y');
 8008702:	2159      	movs	r1, #89	; 0x59
 8008704:	486c      	ldr	r0, [pc, #432]	; (80088b8 <cppLoop+0xc90>)
 8008706:	f7f9 fd45 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 800870a:	f7f8 fcc9 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800870e:	2100      	movs	r1, #0
 8008710:	2000      	movs	r0, #0
 8008712:	f7f8 fcd5 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008716:	4b70      	ldr	r3, [pc, #448]	; (80088d8 <cppLoop+0xcb0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4618      	mov	r0, r3
 800871c:	f7f7 ff2c 	bl	8000578 <__aeabi_f2d>
 8008720:	4603      	mov	r3, r0
 8008722:	460c      	mov	r4, r1
 8008724:	461a      	mov	r2, r3
 8008726:	4623      	mov	r3, r4
 8008728:	486c      	ldr	r0, [pc, #432]	; (80088dc <cppLoop+0xcb4>)
 800872a:	f7f8 fcf3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800872e:	2101      	movs	r1, #1
 8008730:	2000      	movs	r0, #0
 8008732:	f7f8 fcc5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008736:	4b6a      	ldr	r3, [pc, #424]	; (80088e0 <cppLoop+0xcb8>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4618      	mov	r0, r3
 800873c:	f7f7 ff1c 	bl	8000578 <__aeabi_f2d>
 8008740:	4603      	mov	r3, r0
 8008742:	460c      	mov	r4, r1
 8008744:	461a      	mov	r2, r3
 8008746:	4623      	mov	r3, r4
 8008748:	4866      	ldr	r0, [pc, #408]	; (80088e4 <cppLoop+0xcbc>)
 800874a:	f7f8 fce3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800874e:	485e      	ldr	r0, [pc, #376]	; (80088c8 <cppLoop+0xca0>)
 8008750:	f7f9 fcbc 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008754:	4603      	mov	r3, r0
 8008756:	2b02      	cmp	r3, #2
 8008758:	bf0c      	ite	eq
 800875a:	2301      	moveq	r3, #1
 800875c:	2300      	movne	r3, #0
 800875e:	b2db      	uxtb	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	f001 8227 	beq.w	8009bb4 <cppLoop+0x1f8c>
			HAL_Delay(500);
 8008766:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800876a:	f001 fb65 	bl	8009e38 <HAL_Delay>

			led.LR(1, -1);
 800876e:	f04f 32ff 	mov.w	r2, #4294967295
 8008772:	2101      	movs	r1, #1
 8008774:	4850      	ldr	r0, [pc, #320]	; (80088b8 <cppLoop+0xc90>)
 8008776:	f7f9 fdc9 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800877a:	2101      	movs	r1, #1
 800877c:	4855      	ldr	r0, [pc, #340]	; (80088d4 <cppLoop+0xcac>)
 800877e:	f7fb fd65 	bl	800424c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008782:	4b57      	ldr	r3, [pc, #348]	; (80088e0 <cppLoop+0xcb8>)
 8008784:	edd3 7a00 	vldr	s15, [r3]
 8008788:	eeb0 0a67 	vmov.f32	s0, s15
 800878c:	4851      	ldr	r0, [pc, #324]	; (80088d4 <cppLoop+0xcac>)
 800878e:	f7fb fb0c 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008792:	4b51      	ldr	r3, [pc, #324]	; (80088d8 <cppLoop+0xcb0>)
 8008794:	edd3 7a00 	vldr	s15, [r3]
 8008798:	eeb0 0a67 	vmov.f32	s0, s15
 800879c:	484d      	ldr	r0, [pc, #308]	; (80088d4 <cppLoop+0xcac>)
 800879e:	f7fb fb14 	bl	8003dca <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80087a2:	4b4f      	ldr	r3, [pc, #316]	; (80088e0 <cppLoop+0xcb8>)
 80087a4:	edd3 7a00 	vldr	s15, [r3]
 80087a8:	eeb0 0a67 	vmov.f32	s0, s15
 80087ac:	4849      	ldr	r0, [pc, #292]	; (80088d4 <cppLoop+0xcac>)
 80087ae:	f7fb fb2c 	bl	8003e0a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80087b2:	4848      	ldr	r0, [pc, #288]	; (80088d4 <cppLoop+0xcac>)
 80087b4:	f7fb fe8a 	bl	80044cc <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(1000);
 80087b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087bc:	f001 fb3c 	bl	8009e38 <HAL_Delay>

			logger.start();
 80087c0:	4849      	ldr	r0, [pc, #292]	; (80088e8 <cppLoop+0xcc0>)
 80087c2:	f7fc faca 	bl	8004d5a <_ZN6Logger5startEv>

			line_trace.running();
 80087c6:	4843      	ldr	r0, [pc, #268]	; (80088d4 <cppLoop+0xcac>)
 80087c8:	f7fb fd84 	bl	80042d4 <_ZN9LineTrace7runningEv>

			logger.stop();
 80087cc:	4846      	ldr	r0, [pc, #280]	; (80088e8 <cppLoop+0xcc0>)
 80087ce:	f7fc fae0 	bl	8004d92 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "TARVEL.txt");
 80087d2:	4a46      	ldr	r2, [pc, #280]	; (80088ec <cppLoop+0xcc4>)
 80087d4:	4946      	ldr	r1, [pc, #280]	; (80088f0 <cppLoop+0xcc8>)
 80087d6:	4844      	ldr	r0, [pc, #272]	; (80088e8 <cppLoop+0xcc0>)
 80087d8:	f7fc f9c0 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "CURVEL.txt");
 80087dc:	4a45      	ldr	r2, [pc, #276]	; (80088f4 <cppLoop+0xccc>)
 80087de:	4944      	ldr	r1, [pc, #272]	; (80088f0 <cppLoop+0xcc8>)
 80087e0:	4841      	ldr	r0, [pc, #260]	; (80088e8 <cppLoop+0xcc0>)
 80087e2:	f7fc f9cf 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 80087e6:	f04f 32ff 	mov.w	r2, #4294967295
 80087ea:	2100      	movs	r1, #0
 80087ec:	4832      	ldr	r0, [pc, #200]	; (80088b8 <cppLoop+0xc90>)
 80087ee:	f7f9 fd8d 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 80087f2:	f001 b9df 	b.w	8009bb4 <cppLoop+0x1f8c>

	case 4:
		led.fullColor('G');
 80087f6:	2147      	movs	r1, #71	; 0x47
 80087f8:	482f      	ldr	r0, [pc, #188]	; (80088b8 <cppLoop+0xc90>)
 80087fa:	f7f9 fccb 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80087fe:	f7f8 fc4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008802:	2100      	movs	r1, #0
 8008804:	2000      	movs	r0, #0
 8008806:	f7f8 fc5b 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800880a:	4832      	ldr	r0, [pc, #200]	; (80088d4 <cppLoop+0xcac>)
 800880c:	f7fb fb2d 	bl	8003e6a <_ZN9LineTrace14getMaxVelocityEv>
 8008810:	ee10 3a10 	vmov	r3, s0
 8008814:	4618      	mov	r0, r3
 8008816:	f7f7 feaf 	bl	8000578 <__aeabi_f2d>
 800881a:	4603      	mov	r3, r0
 800881c:	460c      	mov	r4, r1
 800881e:	461a      	mov	r2, r3
 8008820:	4623      	mov	r3, r4
 8008822:	482e      	ldr	r0, [pc, #184]	; (80088dc <cppLoop+0xcb4>)
 8008824:	f7f8 fc76 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008828:	2101      	movs	r1, #1
 800882a:	2000      	movs	r0, #0
 800882c:	f7f8 fc48 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008830:	4828      	ldr	r0, [pc, #160]	; (80088d4 <cppLoop+0xcac>)
 8008832:	f7fb fb3a 	bl	8003eaa <_ZN9LineTrace14getMinVelocityEv>
 8008836:	ee10 3a10 	vmov	r3, s0
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fe9c 	bl	8000578 <__aeabi_f2d>
 8008840:	4603      	mov	r3, r0
 8008842:	460c      	mov	r4, r1
 8008844:	461a      	mov	r2, r3
 8008846:	4623      	mov	r3, r4
 8008848:	481e      	ldr	r0, [pc, #120]	; (80088c4 <cppLoop+0xc9c>)
 800884a:	f7f8 fc63 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800884e:	481e      	ldr	r0, [pc, #120]	; (80088c8 <cppLoop+0xca0>)
 8008850:	f7f9 fc3c 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008854:	4603      	mov	r3, r0
 8008856:	2b08      	cmp	r3, #8
 8008858:	bf0c      	ite	eq
 800885a:	2301      	moveq	r3, #1
 800885c:	2300      	movne	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d04b      	beq.n	80088fc <cppLoop+0xcd4>
			led.LR(-1, 1);
 8008864:	2201      	movs	r2, #1
 8008866:	f04f 31ff 	mov.w	r1, #4294967295
 800886a:	4813      	ldr	r0, [pc, #76]	; (80088b8 <cppLoop+0xc90>)
 800886c:	f7f9 fd4e 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008870:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008874:	f001 fae0 	bl	8009e38 <HAL_Delay>

			selector_vel++;
 8008878:	4b1f      	ldr	r3, [pc, #124]	; (80088f8 <cppLoop+0xcd0>)
 800887a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800887e:	b29b      	uxth	r3, r3
 8008880:	3301      	adds	r3, #1
 8008882:	b29b      	uxth	r3, r3
 8008884:	b21a      	sxth	r2, r3
 8008886:	4b1c      	ldr	r3, [pc, #112]	; (80088f8 <cppLoop+0xcd0>)
 8008888:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800888a:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <cppLoop+0xcd0>)
 800888c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008890:	2b01      	cmp	r3, #1
 8008892:	dd02      	ble.n	800889a <cppLoop+0xc72>
 8008894:	4b18      	ldr	r3, [pc, #96]	; (80088f8 <cppLoop+0xcd0>)
 8008896:	2200      	movs	r2, #0
 8008898:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800889a:	2200      	movs	r2, #0
 800889c:	f04f 31ff 	mov.w	r1, #4294967295
 80088a0:	4805      	ldr	r0, [pc, #20]	; (80088b8 <cppLoop+0xc90>)
 80088a2:	f7f9 fd33 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80088a6:	f001 b987 	b.w	8009bb8 <cppLoop+0x1f90>
 80088aa:	bf00      	nop
 80088ac:	f3af 8000 	nop.w
 80088b0:	9999999a 	.word	0x9999999a
 80088b4:	3fb99999 	.word	0x3fb99999
 80088b8:	200005bc 	.word	0x200005bc
 80088bc:	08019f68 	.word	0x08019f68
 80088c0:	200423fc 	.word	0x200423fc
 80088c4:	08019fa4 	.word	0x08019fa4
 80088c8:	200005b0 	.word	0x200005b0
 80088cc:	08019fb0 	.word	0x08019fb0
 80088d0:	08019f48 	.word	0x08019f48
 80088d4:	2001db4c 	.word	0x2001db4c
 80088d8:	20042404 	.word	0x20042404
 80088dc:	08019fbc 	.word	0x08019fbc
 80088e0:	20042414 	.word	0x20042414
 80088e4:	08019f74 	.word	0x08019f74
 80088e8:	200005e0 	.word	0x200005e0
 80088ec:	08019f80 	.word	0x08019f80
 80088f0:	08019f8c 	.word	0x08019f8c
 80088f4:	08019f98 	.word	0x08019f98
 80088f8:	200423c6 	.word	0x200423c6
		else if(joy_stick.getValue() == JOY_R){
 80088fc:	48a4      	ldr	r0, [pc, #656]	; (8008b90 <cppLoop+0xf68>)
 80088fe:	f7f9 fbe5 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008902:	4603      	mov	r3, r0
 8008904:	2b10      	cmp	r3, #16
 8008906:	bf0c      	ite	eq
 8008908:	2301      	moveq	r3, #1
 800890a:	2300      	movne	r3, #0
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d03c      	beq.n	800898c <cppLoop+0xd64>
			led.LR(-1, 1);
 8008912:	2201      	movs	r2, #1
 8008914:	f04f 31ff 	mov.w	r1, #4294967295
 8008918:	489e      	ldr	r0, [pc, #632]	; (8008b94 <cppLoop+0xf6c>)
 800891a:	f7f9 fcf7 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800891e:	2064      	movs	r0, #100	; 0x64
 8008920:	f001 fa8a 	bl	8009e38 <HAL_Delay>
			if(selector_vel == 0)
 8008924:	4b9c      	ldr	r3, [pc, #624]	; (8008b98 <cppLoop+0xf70>)
 8008926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d113      	bne.n	8008956 <cppLoop+0xd2e>
				adj_max_velocity = adj_max_velocity + 0.1;
 800892e:	4b9b      	ldr	r3, [pc, #620]	; (8008b9c <cppLoop+0xf74>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f7f7 fe20 	bl	8000578 <__aeabi_f2d>
 8008938:	a393      	add	r3, pc, #588	; (adr r3, 8008b88 <cppLoop+0xf60>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fcbd 	bl	80002bc <__adddf3>
 8008942:	4603      	mov	r3, r0
 8008944:	460c      	mov	r4, r1
 8008946:	4618      	mov	r0, r3
 8008948:	4621      	mov	r1, r4
 800894a:	f7f8 f965 	bl	8000c18 <__aeabi_d2f>
 800894e:	4602      	mov	r2, r0
 8008950:	4b92      	ldr	r3, [pc, #584]	; (8008b9c <cppLoop+0xf74>)
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	e012      	b.n	800897c <cppLoop+0xd54>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008956:	4b92      	ldr	r3, [pc, #584]	; (8008ba0 <cppLoop+0xf78>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4618      	mov	r0, r3
 800895c:	f7f7 fe0c 	bl	8000578 <__aeabi_f2d>
 8008960:	a389      	add	r3, pc, #548	; (adr r3, 8008b88 <cppLoop+0xf60>)
 8008962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008966:	f7f7 fca9 	bl	80002bc <__adddf3>
 800896a:	4603      	mov	r3, r0
 800896c:	460c      	mov	r4, r1
 800896e:	4618      	mov	r0, r3
 8008970:	4621      	mov	r1, r4
 8008972:	f7f8 f951 	bl	8000c18 <__aeabi_d2f>
 8008976:	4602      	mov	r2, r0
 8008978:	4b89      	ldr	r3, [pc, #548]	; (8008ba0 <cppLoop+0xf78>)
 800897a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800897c:	2200      	movs	r2, #0
 800897e:	f04f 31ff 	mov.w	r1, #4294967295
 8008982:	4884      	ldr	r0, [pc, #528]	; (8008b94 <cppLoop+0xf6c>)
 8008984:	f7f9 fcc2 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008988:	f001 b916 	b.w	8009bb8 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_L){
 800898c:	4880      	ldr	r0, [pc, #512]	; (8008b90 <cppLoop+0xf68>)
 800898e:	f7f9 fb9d 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008992:	4603      	mov	r3, r0
 8008994:	2b01      	cmp	r3, #1
 8008996:	bf0c      	ite	eq
 8008998:	2301      	moveq	r3, #1
 800899a:	2300      	movne	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d03c      	beq.n	8008a1c <cppLoop+0xdf4>
			led.LR(-1, 1);
 80089a2:	2201      	movs	r2, #1
 80089a4:	f04f 31ff 	mov.w	r1, #4294967295
 80089a8:	487a      	ldr	r0, [pc, #488]	; (8008b94 <cppLoop+0xf6c>)
 80089aa:	f7f9 fcaf 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089ae:	2064      	movs	r0, #100	; 0x64
 80089b0:	f001 fa42 	bl	8009e38 <HAL_Delay>
			if(selector_vel == 0)
 80089b4:	4b78      	ldr	r3, [pc, #480]	; (8008b98 <cppLoop+0xf70>)
 80089b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d113      	bne.n	80089e6 <cppLoop+0xdbe>
				adj_max_velocity = adj_max_velocity - 0.1;
 80089be:	4b77      	ldr	r3, [pc, #476]	; (8008b9c <cppLoop+0xf74>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7f7 fdd8 	bl	8000578 <__aeabi_f2d>
 80089c8:	a36f      	add	r3, pc, #444	; (adr r3, 8008b88 <cppLoop+0xf60>)
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f7f7 fc73 	bl	80002b8 <__aeabi_dsub>
 80089d2:	4603      	mov	r3, r0
 80089d4:	460c      	mov	r4, r1
 80089d6:	4618      	mov	r0, r3
 80089d8:	4621      	mov	r1, r4
 80089da:	f7f8 f91d 	bl	8000c18 <__aeabi_d2f>
 80089de:	4602      	mov	r2, r0
 80089e0:	4b6e      	ldr	r3, [pc, #440]	; (8008b9c <cppLoop+0xf74>)
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e012      	b.n	8008a0c <cppLoop+0xde4>
				adj_min_velocity = adj_min_velocity - 0.1;
 80089e6:	4b6e      	ldr	r3, [pc, #440]	; (8008ba0 <cppLoop+0xf78>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f7 fdc4 	bl	8000578 <__aeabi_f2d>
 80089f0:	a365      	add	r3, pc, #404	; (adr r3, 8008b88 <cppLoop+0xf60>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f7f7 fc5f 	bl	80002b8 <__aeabi_dsub>
 80089fa:	4603      	mov	r3, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	4618      	mov	r0, r3
 8008a00:	4621      	mov	r1, r4
 8008a02:	f7f8 f909 	bl	8000c18 <__aeabi_d2f>
 8008a06:	4602      	mov	r2, r0
 8008a08:	4b65      	ldr	r3, [pc, #404]	; (8008ba0 <cppLoop+0xf78>)
 8008a0a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a12:	4860      	ldr	r0, [pc, #384]	; (8008b94 <cppLoop+0xf6c>)
 8008a14:	f7f9 fc7a 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008a18:	f001 b8ce 	b.w	8009bb8 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_C){
 8008a1c:	485c      	ldr	r0, [pc, #368]	; (8008b90 <cppLoop+0xf68>)
 8008a1e:	f7f9 fb55 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f001 80c2 	beq.w	8009bb8 <cppLoop+0x1f90>
			led.LR(-1, 1);
 8008a34:	2201      	movs	r2, #1
 8008a36:	f04f 31ff 	mov.w	r1, #4294967295
 8008a3a:	4856      	ldr	r0, [pc, #344]	; (8008b94 <cppLoop+0xf6c>)
 8008a3c:	f7f9 fc66 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a44:	f001 f9f8 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	4b53      	ldr	r3, [pc, #332]	; (8008b9c <cppLoop+0xf74>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	4954      	ldr	r1, [pc, #336]	; (8008ba4 <cppLoop+0xf7c>)
 8008a52:	4855      	ldr	r0, [pc, #340]	; (8008ba8 <cppLoop+0xf80>)
 8008a54:	f7f8 ff12 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	4b50      	ldr	r3, [pc, #320]	; (8008ba0 <cppLoop+0xf78>)
 8008a5e:	2201      	movs	r2, #1
 8008a60:	4952      	ldr	r1, [pc, #328]	; (8008bac <cppLoop+0xf84>)
 8008a62:	4851      	ldr	r0, [pc, #324]	; (8008ba8 <cppLoop+0xf80>)
 8008a64:	f7f8 ff0a 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008a68:	4b4c      	ldr	r3, [pc, #304]	; (8008b9c <cppLoop+0xf74>)
 8008a6a:	edd3 7a00 	vldr	s15, [r3]
 8008a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a72:	484f      	ldr	r0, [pc, #316]	; (8008bb0 <cppLoop+0xf88>)
 8008a74:	f7fb f9a9 	bl	8003dca <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008a78:	4b49      	ldr	r3, [pc, #292]	; (8008ba0 <cppLoop+0xf78>)
 8008a7a:	edd3 7a00 	vldr	s15, [r3]
 8008a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8008a82:	484b      	ldr	r0, [pc, #300]	; (8008bb0 <cppLoop+0xf88>)
 8008a84:	f7fb f9c1 	bl	8003e0a <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a8e:	4841      	ldr	r0, [pc, #260]	; (8008b94 <cppLoop+0xf6c>)
 8008a90:	f7f9 fc3c 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008a94:	f001 b890 	b.w	8009bb8 <cppLoop+0x1f90>

	case 5:
		led.fullColor('M');
 8008a98:	214d      	movs	r1, #77	; 0x4d
 8008a9a:	483e      	ldr	r0, [pc, #248]	; (8008b94 <cppLoop+0xf6c>)
 8008a9c:	f7f9 fb7a 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008aa0:	f7f8 fafe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	2000      	movs	r0, #0
 8008aa8:	f7f8 fb0a 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008aac:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <cppLoop+0xf8c>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f7f7 fd61 	bl	8000578 <__aeabi_f2d>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	460c      	mov	r4, r1
 8008aba:	461a      	mov	r2, r3
 8008abc:	4623      	mov	r3, r4
 8008abe:	483e      	ldr	r0, [pc, #248]	; (8008bb8 <cppLoop+0xf90>)
 8008ac0:	f7f8 fb28 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	f7f8 fafa 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008acc:	4b3b      	ldr	r3, [pc, #236]	; (8008bbc <cppLoop+0xf94>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7f7 fd51 	bl	8000578 <__aeabi_f2d>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	461a      	mov	r2, r3
 8008adc:	4623      	mov	r3, r4
 8008ade:	4838      	ldr	r0, [pc, #224]	; (8008bc0 <cppLoop+0xf98>)
 8008ae0:	f7f8 fb18 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008ae4:	482a      	ldr	r0, [pc, #168]	; (8008b90 <cppLoop+0xf68>)
 8008ae6:	f7f9 faf1 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008aea:	4603      	mov	r3, r0
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	bf0c      	ite	eq
 8008af0:	2301      	moveq	r3, #1
 8008af2:	2300      	movne	r3, #0
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	f001 8060 	beq.w	8009bbc <cppLoop+0x1f94>
			HAL_Delay(500);
 8008afc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b00:	f001 f99a 	bl	8009e38 <HAL_Delay>

			led.LR(1, -1);
 8008b04:	f04f 32ff 	mov.w	r2, #4294967295
 8008b08:	2101      	movs	r1, #1
 8008b0a:	4822      	ldr	r0, [pc, #136]	; (8008b94 <cppLoop+0xf6c>)
 8008b0c:	f7f9 fbfe 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008b10:	4b2c      	ldr	r3, [pc, #176]	; (8008bc4 <cppLoop+0xf9c>)
 8008b12:	edd3 7a00 	vldr	s15, [r3]
 8008b16:	4b2c      	ldr	r3, [pc, #176]	; (8008bc8 <cppLoop+0xfa0>)
 8008b18:	ed93 7a00 	vldr	s14, [r3]
 8008b1c:	4b2b      	ldr	r3, [pc, #172]	; (8008bcc <cppLoop+0xfa4>)
 8008b1e:	edd3 6a00 	vldr	s13, [r3]
 8008b22:	eeb0 1a66 	vmov.f32	s2, s13
 8008b26:	eef0 0a47 	vmov.f32	s1, s14
 8008b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b2e:	4820      	ldr	r0, [pc, #128]	; (8008bb0 <cppLoop+0xf88>)
 8008b30:	f7fb f8a0 	bl	8003c74 <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 8008b34:	2102      	movs	r1, #2
 8008b36:	481e      	ldr	r0, [pc, #120]	; (8008bb0 <cppLoop+0xf88>)
 8008b38:	f7fb fb88 	bl	800424c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008b3c:	4b1f      	ldr	r3, [pc, #124]	; (8008bbc <cppLoop+0xf94>)
 8008b3e:	edd3 7a00 	vldr	s15, [r3]
 8008b42:	eeb0 0a67 	vmov.f32	s0, s15
 8008b46:	481a      	ldr	r0, [pc, #104]	; (8008bb0 <cppLoop+0xf88>)
 8008b48:	f7fb f92f 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008b4c:	4b19      	ldr	r3, [pc, #100]	; (8008bb4 <cppLoop+0xf8c>)
 8008b4e:	edd3 7a00 	vldr	s15, [r3]
 8008b52:	eeb0 0a67 	vmov.f32	s0, s15
 8008b56:	4816      	ldr	r0, [pc, #88]	; (8008bb0 <cppLoop+0xf88>)
 8008b58:	f7fb f947 	bl	8003dea <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008b5c:	4b17      	ldr	r3, [pc, #92]	; (8008bbc <cppLoop+0xf94>)
 8008b5e:	edd3 7a00 	vldr	s15, [r3]
 8008b62:	eeb0 0a67 	vmov.f32	s0, s15
 8008b66:	4812      	ldr	r0, [pc, #72]	; (8008bb0 <cppLoop+0xf88>)
 8008b68:	f7fb f95f 	bl	8003e2a <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008b6c:	4810      	ldr	r0, [pc, #64]	; (8008bb0 <cppLoop+0xf88>)
 8008b6e:	f7fb fcad 	bl	80044cc <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008b72:	480f      	ldr	r0, [pc, #60]	; (8008bb0 <cppLoop+0xf88>)
 8008b74:	f7fb fbae 	bl	80042d4 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008b78:	f04f 32ff 	mov.w	r2, #4294967295
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4805      	ldr	r0, [pc, #20]	; (8008b94 <cppLoop+0xf6c>)
 8008b80:	f7f9 fbc4 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 8008b84:	f001 b81a 	b.w	8009bbc <cppLoop+0x1f94>
 8008b88:	9999999a 	.word	0x9999999a
 8008b8c:	3fb99999 	.word	0x3fb99999
 8008b90:	200005b0 	.word	0x200005b0
 8008b94:	200005bc 	.word	0x200005bc
 8008b98:	200423c6 	.word	0x200423c6
 8008b9c:	20042404 	.word	0x20042404
 8008ba0:	20042414 	.word	0x20042414
 8008ba4:	08019fc8 	.word	0x08019fc8
 8008ba8:	08019f48 	.word	0x08019f48
 8008bac:	08019fd4 	.word	0x08019fd4
 8008bb0:	2001db4c 	.word	0x2001db4c
 8008bb4:	2004240c 	.word	0x2004240c
 8008bb8:	08019fe0 	.word	0x08019fe0
 8008bbc:	2004241c 	.word	0x2004241c
 8008bc0:	08019f74 	.word	0x08019f74
 8008bc4:	200423cc 	.word	0x200423cc
 8008bc8:	200423d4 	.word	0x200423d4
 8008bcc:	200423dc 	.word	0x200423dc

	case 6:
		led.fullColor('R');
 8008bd0:	2152      	movs	r1, #82	; 0x52
 8008bd2:	4895      	ldr	r0, [pc, #596]	; (8008e28 <cppLoop+0x1200>)
 8008bd4:	f7f9 fade 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008bd8:	f7f8 fa62 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008bdc:	2100      	movs	r1, #0
 8008bde:	2000      	movs	r0, #0
 8008be0:	f7f8 fa6e 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008be4:	4891      	ldr	r0, [pc, #580]	; (8008e2c <cppLoop+0x1204>)
 8008be6:	f7fb f950 	bl	8003e8a <_ZN9LineTrace15getMaxVelocity2Ev>
 8008bea:	ee10 3a10 	vmov	r3, s0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fcc2 	bl	8000578 <__aeabi_f2d>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	4623      	mov	r3, r4
 8008bfc:	488c      	ldr	r0, [pc, #560]	; (8008e30 <cppLoop+0x1208>)
 8008bfe:	f7f8 fa89 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008c02:	2101      	movs	r1, #1
 8008c04:	2000      	movs	r0, #0
 8008c06:	f7f8 fa5b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008c0a:	4888      	ldr	r0, [pc, #544]	; (8008e2c <cppLoop+0x1204>)
 8008c0c:	f7fb f95d 	bl	8003eca <_ZN9LineTrace15getMinVelocity2Ev>
 8008c10:	ee10 3a10 	vmov	r3, s0
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7f7 fcaf 	bl	8000578 <__aeabi_f2d>
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4623      	mov	r3, r4
 8008c22:	4884      	ldr	r0, [pc, #528]	; (8008e34 <cppLoop+0x120c>)
 8008c24:	f7f8 fa76 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008c28:	4883      	ldr	r0, [pc, #524]	; (8008e38 <cppLoop+0x1210>)
 8008c2a:	f7f9 fa4f 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b08      	cmp	r3, #8
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d022      	beq.n	8008c84 <cppLoop+0x105c>
			led.LR(-1, 1);
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f04f 31ff 	mov.w	r1, #4294967295
 8008c44:	4878      	ldr	r0, [pc, #480]	; (8008e28 <cppLoop+0x1200>)
 8008c46:	f7f9 fb61 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c4e:	f001 f8f3 	bl	8009e38 <HAL_Delay>

			selector_vel2++;
 8008c52:	4b7a      	ldr	r3, [pc, #488]	; (8008e3c <cppLoop+0x1214>)
 8008c54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	b21a      	sxth	r2, r3
 8008c60:	4b76      	ldr	r3, [pc, #472]	; (8008e3c <cppLoop+0x1214>)
 8008c62:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008c64:	4b75      	ldr	r3, [pc, #468]	; (8008e3c <cppLoop+0x1214>)
 8008c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	dd02      	ble.n	8008c74 <cppLoop+0x104c>
 8008c6e:	4b73      	ldr	r3, [pc, #460]	; (8008e3c <cppLoop+0x1214>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008c74:	2200      	movs	r2, #0
 8008c76:	f04f 31ff 	mov.w	r1, #4294967295
 8008c7a:	486b      	ldr	r0, [pc, #428]	; (8008e28 <cppLoop+0x1200>)
 8008c7c:	f7f9 fb46 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008c80:	f000 bf9e 	b.w	8009bc0 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_R){
 8008c84:	486c      	ldr	r0, [pc, #432]	; (8008e38 <cppLoop+0x1210>)
 8008c86:	f7f9 fa21 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b10      	cmp	r3, #16
 8008c8e:	bf0c      	ite	eq
 8008c90:	2301      	moveq	r3, #1
 8008c92:	2300      	movne	r3, #0
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d03c      	beq.n	8008d14 <cppLoop+0x10ec>
			led.LR(-1, 1);
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008ca0:	4861      	ldr	r0, [pc, #388]	; (8008e28 <cppLoop+0x1200>)
 8008ca2:	f7f9 fb33 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ca6:	2064      	movs	r0, #100	; 0x64
 8008ca8:	f001 f8c6 	bl	8009e38 <HAL_Delay>
			if(selector_vel2 == 0)
 8008cac:	4b63      	ldr	r3, [pc, #396]	; (8008e3c <cppLoop+0x1214>)
 8008cae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d113      	bne.n	8008cde <cppLoop+0x10b6>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008cb6:	4b62      	ldr	r3, [pc, #392]	; (8008e40 <cppLoop+0x1218>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7f7 fc5c 	bl	8000578 <__aeabi_f2d>
 8008cc0:	a357      	add	r3, pc, #348	; (adr r3, 8008e20 <cppLoop+0x11f8>)
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f7f7 faf9 	bl	80002bc <__adddf3>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	4618      	mov	r0, r3
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f7f7 ffa1 	bl	8000c18 <__aeabi_d2f>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	4b59      	ldr	r3, [pc, #356]	; (8008e40 <cppLoop+0x1218>)
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	e012      	b.n	8008d04 <cppLoop+0x10dc>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008cde:	4b59      	ldr	r3, [pc, #356]	; (8008e44 <cppLoop+0x121c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f7 fc48 	bl	8000578 <__aeabi_f2d>
 8008ce8:	a34d      	add	r3, pc, #308	; (adr r3, 8008e20 <cppLoop+0x11f8>)
 8008cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cee:	f7f7 fae5 	bl	80002bc <__adddf3>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	f7f7 ff8d 	bl	8000c18 <__aeabi_d2f>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	4b50      	ldr	r3, [pc, #320]	; (8008e44 <cppLoop+0x121c>)
 8008d02:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d04:	2200      	movs	r2, #0
 8008d06:	f04f 31ff 	mov.w	r1, #4294967295
 8008d0a:	4847      	ldr	r0, [pc, #284]	; (8008e28 <cppLoop+0x1200>)
 8008d0c:	f7f9 fafe 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008d10:	f000 bf56 	b.w	8009bc0 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_L){
 8008d14:	4848      	ldr	r0, [pc, #288]	; (8008e38 <cppLoop+0x1210>)
 8008d16:	f7f9 f9d9 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	bf0c      	ite	eq
 8008d20:	2301      	moveq	r3, #1
 8008d22:	2300      	movne	r3, #0
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d03c      	beq.n	8008da4 <cppLoop+0x117c>
			led.LR(-1, 1);
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d30:	483d      	ldr	r0, [pc, #244]	; (8008e28 <cppLoop+0x1200>)
 8008d32:	f7f9 faeb 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008d36:	2064      	movs	r0, #100	; 0x64
 8008d38:	f001 f87e 	bl	8009e38 <HAL_Delay>
			if(selector_vel2 == 0)
 8008d3c:	4b3f      	ldr	r3, [pc, #252]	; (8008e3c <cppLoop+0x1214>)
 8008d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d113      	bne.n	8008d6e <cppLoop+0x1146>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008d46:	4b3e      	ldr	r3, [pc, #248]	; (8008e40 <cppLoop+0x1218>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f7 fc14 	bl	8000578 <__aeabi_f2d>
 8008d50:	a333      	add	r3, pc, #204	; (adr r3, 8008e20 <cppLoop+0x11f8>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 faaf 	bl	80002b8 <__aeabi_dsub>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	4618      	mov	r0, r3
 8008d60:	4621      	mov	r1, r4
 8008d62:	f7f7 ff59 	bl	8000c18 <__aeabi_d2f>
 8008d66:	4602      	mov	r2, r0
 8008d68:	4b35      	ldr	r3, [pc, #212]	; (8008e40 <cppLoop+0x1218>)
 8008d6a:	601a      	str	r2, [r3, #0]
 8008d6c:	e012      	b.n	8008d94 <cppLoop+0x116c>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008d6e:	4b35      	ldr	r3, [pc, #212]	; (8008e44 <cppLoop+0x121c>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7f7 fc00 	bl	8000578 <__aeabi_f2d>
 8008d78:	a329      	add	r3, pc, #164	; (adr r3, 8008e20 <cppLoop+0x11f8>)
 8008d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7e:	f7f7 fa9b 	bl	80002b8 <__aeabi_dsub>
 8008d82:	4603      	mov	r3, r0
 8008d84:	460c      	mov	r4, r1
 8008d86:	4618      	mov	r0, r3
 8008d88:	4621      	mov	r1, r4
 8008d8a:	f7f7 ff45 	bl	8000c18 <__aeabi_d2f>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b2c      	ldr	r3, [pc, #176]	; (8008e44 <cppLoop+0x121c>)
 8008d92:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008d94:	2200      	movs	r2, #0
 8008d96:	f04f 31ff 	mov.w	r1, #4294967295
 8008d9a:	4823      	ldr	r0, [pc, #140]	; (8008e28 <cppLoop+0x1200>)
 8008d9c:	f7f9 fab6 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008da0:	f000 bf0e 	b.w	8009bc0 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_C){
 8008da4:	4824      	ldr	r0, [pc, #144]	; (8008e38 <cppLoop+0x1210>)
 8008da6:	f7f9 f991 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	bf0c      	ite	eq
 8008db0:	2301      	moveq	r3, #1
 8008db2:	2300      	movne	r3, #0
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f000 8702 	beq.w	8009bc0 <cppLoop+0x1f98>
			led.LR(-1, 1);
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8008dc2:	4819      	ldr	r0, [pc, #100]	; (8008e28 <cppLoop+0x1200>)
 8008dc4:	f7f9 faa2 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008dc8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008dcc:	f001 f834 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	4b1a      	ldr	r3, [pc, #104]	; (8008e40 <cppLoop+0x1218>)
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	491b      	ldr	r1, [pc, #108]	; (8008e48 <cppLoop+0x1220>)
 8008dda:	481c      	ldr	r0, [pc, #112]	; (8008e4c <cppLoop+0x1224>)
 8008ddc:	f7f8 fd4e 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008de0:	2300      	movs	r3, #0
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <cppLoop+0x121c>)
 8008de6:	2201      	movs	r2, #1
 8008de8:	4919      	ldr	r1, [pc, #100]	; (8008e50 <cppLoop+0x1228>)
 8008dea:	4818      	ldr	r0, [pc, #96]	; (8008e4c <cppLoop+0x1224>)
 8008dec:	f7f8 fd46 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008df0:	4b13      	ldr	r3, [pc, #76]	; (8008e40 <cppLoop+0x1218>)
 8008df2:	edd3 7a00 	vldr	s15, [r3]
 8008df6:	eeb0 0a67 	vmov.f32	s0, s15
 8008dfa:	480c      	ldr	r0, [pc, #48]	; (8008e2c <cppLoop+0x1204>)
 8008dfc:	f7fa fff5 	bl	8003dea <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008e00:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <cppLoop+0x121c>)
 8008e02:	edd3 7a00 	vldr	s15, [r3]
 8008e06:	eeb0 0a67 	vmov.f32	s0, s15
 8008e0a:	4808      	ldr	r0, [pc, #32]	; (8008e2c <cppLoop+0x1204>)
 8008e0c:	f7fb f80d 	bl	8003e2a <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008e10:	2200      	movs	r2, #0
 8008e12:	f04f 31ff 	mov.w	r1, #4294967295
 8008e16:	4804      	ldr	r0, [pc, #16]	; (8008e28 <cppLoop+0x1200>)
 8008e18:	f7f9 fa78 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008e1c:	f000 bed0 	b.w	8009bc0 <cppLoop+0x1f98>
 8008e20:	9999999a 	.word	0x9999999a
 8008e24:	3fb99999 	.word	0x3fb99999
 8008e28:	200005bc 	.word	0x200005bc
 8008e2c:	2001db4c 	.word	0x2001db4c
 8008e30:	08019fe0 	.word	0x08019fe0
 8008e34:	08019fa4 	.word	0x08019fa4
 8008e38:	200005b0 	.word	0x200005b0
 8008e3c:	200423c8 	.word	0x200423c8
 8008e40:	2004240c 	.word	0x2004240c
 8008e44:	2004241c 	.word	0x2004241c
 8008e48:	08019fec 	.word	0x08019fec
 8008e4c:	08019f48 	.word	0x08019f48
 8008e50:	08019ff8 	.word	0x08019ff8

	case 7:
		led.fullColor('W');
 8008e54:	2157      	movs	r1, #87	; 0x57
 8008e56:	48c2      	ldr	r0, [pc, #776]	; (8009160 <cppLoop+0x1538>)
 8008e58:	f7f9 f99c 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e5c:	f7f8 f920 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e60:	2100      	movs	r1, #0
 8008e62:	2000      	movs	r0, #0
 8008e64:	f7f8 f92c 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008e68:	48be      	ldr	r0, [pc, #760]	; (8009164 <cppLoop+0x153c>)
 8008e6a:	f7fb f872 	bl	8003f52 <_ZN9LineTrace9getMaxAccEv>
 8008e6e:	ee10 3a10 	vmov	r3, s0
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7f7 fb80 	bl	8000578 <__aeabi_f2d>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	460c      	mov	r4, r1
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	4623      	mov	r3, r4
 8008e80:	48b9      	ldr	r0, [pc, #740]	; (8009168 <cppLoop+0x1540>)
 8008e82:	f7f8 f947 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e86:	2101      	movs	r1, #1
 8008e88:	2000      	movs	r0, #0
 8008e8a:	f7f8 f919 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008e8e:	48b5      	ldr	r0, [pc, #724]	; (8009164 <cppLoop+0x153c>)
 8008e90:	f7fb f895 	bl	8003fbe <_ZN9LineTrace9getMaxDecEv>
 8008e94:	ee10 3a10 	vmov	r3, s0
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f7f7 fb6d 	bl	8000578 <__aeabi_f2d>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	460c      	mov	r4, r1
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	48b1      	ldr	r0, [pc, #708]	; (800916c <cppLoop+0x1544>)
 8008ea8:	f7f8 f934 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008eac:	48b0      	ldr	r0, [pc, #704]	; (8009170 <cppLoop+0x1548>)
 8008eae:	f7f9 f90d 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b08      	cmp	r3, #8
 8008eb6:	bf0c      	ite	eq
 8008eb8:	2301      	moveq	r3, #1
 8008eba:	2300      	movne	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d022      	beq.n	8008f08 <cppLoop+0x12e0>
			led.LR(-1, 1);
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ec8:	48a5      	ldr	r0, [pc, #660]	; (8009160 <cppLoop+0x1538>)
 8008eca:	f7f9 fa1f 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ece:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ed2:	f000 ffb1 	bl	8009e38 <HAL_Delay>

			selector_acc++;
 8008ed6:	4ba7      	ldr	r3, [pc, #668]	; (8009174 <cppLoop+0x154c>)
 8008ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	3301      	adds	r3, #1
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	b21a      	sxth	r2, r3
 8008ee4:	4ba3      	ldr	r3, [pc, #652]	; (8009174 <cppLoop+0x154c>)
 8008ee6:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008ee8:	4ba2      	ldr	r3, [pc, #648]	; (8009174 <cppLoop+0x154c>)
 8008eea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	dd02      	ble.n	8008ef8 <cppLoop+0x12d0>
 8008ef2:	4ba0      	ldr	r3, [pc, #640]	; (8009174 <cppLoop+0x154c>)
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f04f 31ff 	mov.w	r1, #4294967295
 8008efe:	4898      	ldr	r0, [pc, #608]	; (8009160 <cppLoop+0x1538>)
 8008f00:	f7f9 fa04 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008f04:	f000 be5e 	b.w	8009bc4 <cppLoop+0x1f9c>
		else if(joy_stick.getValue() == JOY_R){
 8008f08:	4899      	ldr	r0, [pc, #612]	; (8009170 <cppLoop+0x1548>)
 8008f0a:	f7f9 f8df 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b10      	cmp	r3, #16
 8008f12:	bf0c      	ite	eq
 8008f14:	2301      	moveq	r3, #1
 8008f16:	2300      	movne	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d03c      	beq.n	8008f98 <cppLoop+0x1370>
			led.LR(-1, 1);
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f04f 31ff 	mov.w	r1, #4294967295
 8008f24:	488e      	ldr	r0, [pc, #568]	; (8009160 <cppLoop+0x1538>)
 8008f26:	f7f9 f9f1 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008f2a:	2064      	movs	r0, #100	; 0x64
 8008f2c:	f000 ff84 	bl	8009e38 <HAL_Delay>
			if(selector_acc == 0){
 8008f30:	4b90      	ldr	r3, [pc, #576]	; (8009174 <cppLoop+0x154c>)
 8008f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d113      	bne.n	8008f62 <cppLoop+0x133a>
				adj_acc = adj_acc + 0.1;
 8008f3a:	4b8f      	ldr	r3, [pc, #572]	; (8009178 <cppLoop+0x1550>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7f7 fb1a 	bl	8000578 <__aeabi_f2d>
 8008f44:	a384      	add	r3, pc, #528	; (adr r3, 8009158 <cppLoop+0x1530>)
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f7f7 f9b7 	bl	80002bc <__adddf3>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	460c      	mov	r4, r1
 8008f52:	4618      	mov	r0, r3
 8008f54:	4621      	mov	r1, r4
 8008f56:	f7f7 fe5f 	bl	8000c18 <__aeabi_d2f>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	4b86      	ldr	r3, [pc, #536]	; (8009178 <cppLoop+0x1550>)
 8008f5e:	601a      	str	r2, [r3, #0]
 8008f60:	e012      	b.n	8008f88 <cppLoop+0x1360>
				adj_dec = adj_dec + 0.1;
 8008f62:	4b86      	ldr	r3, [pc, #536]	; (800917c <cppLoop+0x1554>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7f7 fb06 	bl	8000578 <__aeabi_f2d>
 8008f6c:	a37a      	add	r3, pc, #488	; (adr r3, 8009158 <cppLoop+0x1530>)
 8008f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f72:	f7f7 f9a3 	bl	80002bc <__adddf3>
 8008f76:	4603      	mov	r3, r0
 8008f78:	460c      	mov	r4, r1
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7f7 fe4b 	bl	8000c18 <__aeabi_d2f>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b7d      	ldr	r3, [pc, #500]	; (800917c <cppLoop+0x1554>)
 8008f86:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008f8e:	4874      	ldr	r0, [pc, #464]	; (8009160 <cppLoop+0x1538>)
 8008f90:	f7f9 f9bc 	bl	800230c <_ZN3LED2LREaa>
		break;
 8008f94:	f000 be16 	b.w	8009bc4 <cppLoop+0x1f9c>
		else if(joy_stick.getValue() == JOY_L){
 8008f98:	4875      	ldr	r0, [pc, #468]	; (8009170 <cppLoop+0x1548>)
 8008f9a:	f7f9 f897 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2301      	moveq	r3, #1
 8008fa6:	2300      	movne	r3, #0
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03c      	beq.n	8009028 <cppLoop+0x1400>
			led.LR(-1, 1);
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb4:	486a      	ldr	r0, [pc, #424]	; (8009160 <cppLoop+0x1538>)
 8008fb6:	f7f9 f9a9 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008fba:	2064      	movs	r0, #100	; 0x64
 8008fbc:	f000 ff3c 	bl	8009e38 <HAL_Delay>
			if(selector_acc == 0){
 8008fc0:	4b6c      	ldr	r3, [pc, #432]	; (8009174 <cppLoop+0x154c>)
 8008fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d113      	bne.n	8008ff2 <cppLoop+0x13ca>
				adj_acc = adj_acc - 0.1;
 8008fca:	4b6b      	ldr	r3, [pc, #428]	; (8009178 <cppLoop+0x1550>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7f7 fad2 	bl	8000578 <__aeabi_f2d>
 8008fd4:	a360      	add	r3, pc, #384	; (adr r3, 8009158 <cppLoop+0x1530>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	f7f7 f96d 	bl	80002b8 <__aeabi_dsub>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	460c      	mov	r4, r1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	4621      	mov	r1, r4
 8008fe6:	f7f7 fe17 	bl	8000c18 <__aeabi_d2f>
 8008fea:	4602      	mov	r2, r0
 8008fec:	4b62      	ldr	r3, [pc, #392]	; (8009178 <cppLoop+0x1550>)
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e012      	b.n	8009018 <cppLoop+0x13f0>
				adj_dec = adj_dec - 0.1;
 8008ff2:	4b62      	ldr	r3, [pc, #392]	; (800917c <cppLoop+0x1554>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7f7 fabe 	bl	8000578 <__aeabi_f2d>
 8008ffc:	a356      	add	r3, pc, #344	; (adr r3, 8009158 <cppLoop+0x1530>)
 8008ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009002:	f7f7 f959 	bl	80002b8 <__aeabi_dsub>
 8009006:	4603      	mov	r3, r0
 8009008:	460c      	mov	r4, r1
 800900a:	4618      	mov	r0, r3
 800900c:	4621      	mov	r1, r4
 800900e:	f7f7 fe03 	bl	8000c18 <__aeabi_d2f>
 8009012:	4602      	mov	r2, r0
 8009014:	4b59      	ldr	r3, [pc, #356]	; (800917c <cppLoop+0x1554>)
 8009016:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009018:	2200      	movs	r2, #0
 800901a:	f04f 31ff 	mov.w	r1, #4294967295
 800901e:	4850      	ldr	r0, [pc, #320]	; (8009160 <cppLoop+0x1538>)
 8009020:	f7f9 f974 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009024:	f000 bdce 	b.w	8009bc4 <cppLoop+0x1f9c>
		else if(joy_stick.getValue() == JOY_C){
 8009028:	4851      	ldr	r0, [pc, #324]	; (8009170 <cppLoop+0x1548>)
 800902a:	f7f9 f84f 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800902e:	4603      	mov	r3, r0
 8009030:	2b02      	cmp	r3, #2
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b00      	cmp	r3, #0
 800903c:	f000 85c2 	beq.w	8009bc4 <cppLoop+0x1f9c>
			led.LR(-1, 1);
 8009040:	2201      	movs	r2, #1
 8009042:	f04f 31ff 	mov.w	r1, #4294967295
 8009046:	4846      	ldr	r0, [pc, #280]	; (8009160 <cppLoop+0x1538>)
 8009048:	f7f9 f960 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 800904c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009050:	f000 fef2 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8009054:	2300      	movs	r3, #0
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	4b47      	ldr	r3, [pc, #284]	; (8009178 <cppLoop+0x1550>)
 800905a:	2201      	movs	r2, #1
 800905c:	4948      	ldr	r1, [pc, #288]	; (8009180 <cppLoop+0x1558>)
 800905e:	4849      	ldr	r0, [pc, #292]	; (8009184 <cppLoop+0x155c>)
 8009060:	f7f8 fc0c 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8009064:	2300      	movs	r3, #0
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	4b44      	ldr	r3, [pc, #272]	; (800917c <cppLoop+0x1554>)
 800906a:	2201      	movs	r2, #1
 800906c:	4946      	ldr	r1, [pc, #280]	; (8009188 <cppLoop+0x1560>)
 800906e:	4845      	ldr	r0, [pc, #276]	; (8009184 <cppLoop+0x155c>)
 8009070:	f7f8 fc04 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8009074:	4b40      	ldr	r3, [pc, #256]	; (8009178 <cppLoop+0x1550>)
 8009076:	edd3 7a00 	vldr	s15, [r3]
 800907a:	4b40      	ldr	r3, [pc, #256]	; (800917c <cppLoop+0x1554>)
 800907c:	ed93 7a00 	vldr	s14, [r3]
 8009080:	eef0 0a47 	vmov.f32	s1, s14
 8009084:	eeb0 0a67 	vmov.f32	s0, s15
 8009088:	4836      	ldr	r0, [pc, #216]	; (8009164 <cppLoop+0x153c>)
 800908a:	f7fa ff2e 	bl	8003eea <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 800908e:	2200      	movs	r2, #0
 8009090:	f04f 31ff 	mov.w	r1, #4294967295
 8009094:	4832      	ldr	r0, [pc, #200]	; (8009160 <cppLoop+0x1538>)
 8009096:	f7f9 f939 	bl	800230c <_ZN3LED2LREaa>
		break;
 800909a:	f000 bd93 	b.w	8009bc4 <cppLoop+0x1f9c>

	case 8:
		led.fullColor('W');
 800909e:	2157      	movs	r1, #87	; 0x57
 80090a0:	482f      	ldr	r0, [pc, #188]	; (8009160 <cppLoop+0x1538>)
 80090a2:	f7f9 f877 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80090a6:	f7f7 fffb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80090aa:	2100      	movs	r1, #0
 80090ac:	2000      	movs	r0, #0
 80090ae:	f7f8 f807 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 80090b2:	482c      	ldr	r0, [pc, #176]	; (8009164 <cppLoop+0x153c>)
 80090b4:	f7fa ff71 	bl	8003f9a <_ZN9LineTrace10getMaxAcc2Ev>
 80090b8:	ee10 3a10 	vmov	r3, s0
 80090bc:	4618      	mov	r0, r3
 80090be:	f7f7 fa5b 	bl	8000578 <__aeabi_f2d>
 80090c2:	4603      	mov	r3, r0
 80090c4:	460c      	mov	r4, r1
 80090c6:	461a      	mov	r2, r3
 80090c8:	4623      	mov	r3, r4
 80090ca:	4830      	ldr	r0, [pc, #192]	; (800918c <cppLoop+0x1564>)
 80090cc:	f7f8 f822 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80090d0:	2101      	movs	r1, #1
 80090d2:	2000      	movs	r0, #0
 80090d4:	f7f7 fff4 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 80090d8:	4822      	ldr	r0, [pc, #136]	; (8009164 <cppLoop+0x153c>)
 80090da:	f7fa ff4c 	bl	8003f76 <_ZN9LineTrace10getMaxDec2Ev>
 80090de:	ee10 3a10 	vmov	r3, s0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7f7 fa48 	bl	8000578 <__aeabi_f2d>
 80090e8:	4603      	mov	r3, r0
 80090ea:	460c      	mov	r4, r1
 80090ec:	461a      	mov	r2, r3
 80090ee:	4623      	mov	r3, r4
 80090f0:	4827      	ldr	r0, [pc, #156]	; (8009190 <cppLoop+0x1568>)
 80090f2:	f7f8 f80f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80090f6:	481e      	ldr	r0, [pc, #120]	; (8009170 <cppLoop+0x1548>)
 80090f8:	f7f8 ffe8 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b08      	cmp	r3, #8
 8009100:	bf0c      	ite	eq
 8009102:	2301      	moveq	r3, #1
 8009104:	2300      	movne	r3, #0
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b00      	cmp	r3, #0
 800910a:	d045      	beq.n	8009198 <cppLoop+0x1570>
			led.LR(-1, 1);
 800910c:	2201      	movs	r2, #1
 800910e:	f04f 31ff 	mov.w	r1, #4294967295
 8009112:	4813      	ldr	r0, [pc, #76]	; (8009160 <cppLoop+0x1538>)
 8009114:	f7f9 f8fa 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009118:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800911c:	f000 fe8c 	bl	8009e38 <HAL_Delay>

			selector_acc2++;
 8009120:	4b1c      	ldr	r3, [pc, #112]	; (8009194 <cppLoop+0x156c>)
 8009122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009126:	b29b      	uxth	r3, r3
 8009128:	3301      	adds	r3, #1
 800912a:	b29b      	uxth	r3, r3
 800912c:	b21a      	sxth	r2, r3
 800912e:	4b19      	ldr	r3, [pc, #100]	; (8009194 <cppLoop+0x156c>)
 8009130:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <cppLoop+0x156c>)
 8009134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009138:	2b01      	cmp	r3, #1
 800913a:	dd02      	ble.n	8009142 <cppLoop+0x151a>
 800913c:	4b15      	ldr	r3, [pc, #84]	; (8009194 <cppLoop+0x156c>)
 800913e:	2200      	movs	r2, #0
 8009140:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8009142:	2200      	movs	r2, #0
 8009144:	f04f 31ff 	mov.w	r1, #4294967295
 8009148:	4805      	ldr	r0, [pc, #20]	; (8009160 <cppLoop+0x1538>)
 800914a:	f7f9 f8df 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 800914e:	f000 bd3b 	b.w	8009bc8 <cppLoop+0x1fa0>
 8009152:	bf00      	nop
 8009154:	f3af 8000 	nop.w
 8009158:	9999999a 	.word	0x9999999a
 800915c:	3fb99999 	.word	0x3fb99999
 8009160:	200005bc 	.word	0x200005bc
 8009164:	2001db4c 	.word	0x2001db4c
 8009168:	0801a004 	.word	0x0801a004
 800916c:	0801a010 	.word	0x0801a010
 8009170:	200005b0 	.word	0x200005b0
 8009174:	200423c2 	.word	0x200423c2
 8009178:	20042424 	.word	0x20042424
 800917c:	2004242c 	.word	0x2004242c
 8009180:	0801a01c 	.word	0x0801a01c
 8009184:	08019f48 	.word	0x08019f48
 8009188:	0801a024 	.word	0x0801a024
 800918c:	0801a02c 	.word	0x0801a02c
 8009190:	0801a038 	.word	0x0801a038
 8009194:	200423c4 	.word	0x200423c4
		else if(joy_stick.getValue() == JOY_R){
 8009198:	48bf      	ldr	r0, [pc, #764]	; (8009498 <cppLoop+0x1870>)
 800919a:	f7f8 ff97 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	bf0c      	ite	eq
 80091a4:	2301      	moveq	r3, #1
 80091a6:	2300      	movne	r3, #0
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d03c      	beq.n	8009228 <cppLoop+0x1600>
			led.LR(-1, 1);
 80091ae:	2201      	movs	r2, #1
 80091b0:	f04f 31ff 	mov.w	r1, #4294967295
 80091b4:	48b9      	ldr	r0, [pc, #740]	; (800949c <cppLoop+0x1874>)
 80091b6:	f7f9 f8a9 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 80091ba:	2064      	movs	r0, #100	; 0x64
 80091bc:	f000 fe3c 	bl	8009e38 <HAL_Delay>
			if(selector_acc2 == 0){
 80091c0:	4bb7      	ldr	r3, [pc, #732]	; (80094a0 <cppLoop+0x1878>)
 80091c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d113      	bne.n	80091f2 <cppLoop+0x15ca>
				adj_acc2 = adj_acc2 + 0.1;
 80091ca:	4bb6      	ldr	r3, [pc, #728]	; (80094a4 <cppLoop+0x187c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7f7 f9d2 	bl	8000578 <__aeabi_f2d>
 80091d4:	a3ae      	add	r3, pc, #696	; (adr r3, 8009490 <cppLoop+0x1868>)
 80091d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091da:	f7f7 f86f 	bl	80002bc <__adddf3>
 80091de:	4603      	mov	r3, r0
 80091e0:	460c      	mov	r4, r1
 80091e2:	4618      	mov	r0, r3
 80091e4:	4621      	mov	r1, r4
 80091e6:	f7f7 fd17 	bl	8000c18 <__aeabi_d2f>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4bad      	ldr	r3, [pc, #692]	; (80094a4 <cppLoop+0x187c>)
 80091ee:	601a      	str	r2, [r3, #0]
 80091f0:	e012      	b.n	8009218 <cppLoop+0x15f0>
				adj_dec2 = adj_dec2 + 0.1;
 80091f2:	4bad      	ldr	r3, [pc, #692]	; (80094a8 <cppLoop+0x1880>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f7 f9be 	bl	8000578 <__aeabi_f2d>
 80091fc:	a3a4      	add	r3, pc, #656	; (adr r3, 8009490 <cppLoop+0x1868>)
 80091fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009202:	f7f7 f85b 	bl	80002bc <__adddf3>
 8009206:	4603      	mov	r3, r0
 8009208:	460c      	mov	r4, r1
 800920a:	4618      	mov	r0, r3
 800920c:	4621      	mov	r1, r4
 800920e:	f7f7 fd03 	bl	8000c18 <__aeabi_d2f>
 8009212:	4602      	mov	r2, r0
 8009214:	4ba4      	ldr	r3, [pc, #656]	; (80094a8 <cppLoop+0x1880>)
 8009216:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009218:	2200      	movs	r2, #0
 800921a:	f04f 31ff 	mov.w	r1, #4294967295
 800921e:	489f      	ldr	r0, [pc, #636]	; (800949c <cppLoop+0x1874>)
 8009220:	f7f9 f874 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009224:	f000 bcd0 	b.w	8009bc8 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_L){
 8009228:	489b      	ldr	r0, [pc, #620]	; (8009498 <cppLoop+0x1870>)
 800922a:	f7f8 ff4f 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800922e:	4603      	mov	r3, r0
 8009230:	2b01      	cmp	r3, #1
 8009232:	bf0c      	ite	eq
 8009234:	2301      	moveq	r3, #1
 8009236:	2300      	movne	r3, #0
 8009238:	b2db      	uxtb	r3, r3
 800923a:	2b00      	cmp	r3, #0
 800923c:	d03c      	beq.n	80092b8 <cppLoop+0x1690>
			led.LR(-1, 1);
 800923e:	2201      	movs	r2, #1
 8009240:	f04f 31ff 	mov.w	r1, #4294967295
 8009244:	4895      	ldr	r0, [pc, #596]	; (800949c <cppLoop+0x1874>)
 8009246:	f7f9 f861 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800924a:	2064      	movs	r0, #100	; 0x64
 800924c:	f000 fdf4 	bl	8009e38 <HAL_Delay>
			if(selector_acc2 == 0){
 8009250:	4b93      	ldr	r3, [pc, #588]	; (80094a0 <cppLoop+0x1878>)
 8009252:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d113      	bne.n	8009282 <cppLoop+0x165a>
				adj_acc2 = adj_acc2 - 0.1;
 800925a:	4b92      	ldr	r3, [pc, #584]	; (80094a4 <cppLoop+0x187c>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4618      	mov	r0, r3
 8009260:	f7f7 f98a 	bl	8000578 <__aeabi_f2d>
 8009264:	a38a      	add	r3, pc, #552	; (adr r3, 8009490 <cppLoop+0x1868>)
 8009266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926a:	f7f7 f825 	bl	80002b8 <__aeabi_dsub>
 800926e:	4603      	mov	r3, r0
 8009270:	460c      	mov	r4, r1
 8009272:	4618      	mov	r0, r3
 8009274:	4621      	mov	r1, r4
 8009276:	f7f7 fccf 	bl	8000c18 <__aeabi_d2f>
 800927a:	4602      	mov	r2, r0
 800927c:	4b89      	ldr	r3, [pc, #548]	; (80094a4 <cppLoop+0x187c>)
 800927e:	601a      	str	r2, [r3, #0]
 8009280:	e012      	b.n	80092a8 <cppLoop+0x1680>
				adj_dec2 = adj_dec2 - 0.1;
 8009282:	4b89      	ldr	r3, [pc, #548]	; (80094a8 <cppLoop+0x1880>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4618      	mov	r0, r3
 8009288:	f7f7 f976 	bl	8000578 <__aeabi_f2d>
 800928c:	a380      	add	r3, pc, #512	; (adr r3, 8009490 <cppLoop+0x1868>)
 800928e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009292:	f7f7 f811 	bl	80002b8 <__aeabi_dsub>
 8009296:	4603      	mov	r3, r0
 8009298:	460c      	mov	r4, r1
 800929a:	4618      	mov	r0, r3
 800929c:	4621      	mov	r1, r4
 800929e:	f7f7 fcbb 	bl	8000c18 <__aeabi_d2f>
 80092a2:	4602      	mov	r2, r0
 80092a4:	4b80      	ldr	r3, [pc, #512]	; (80094a8 <cppLoop+0x1880>)
 80092a6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80092a8:	2200      	movs	r2, #0
 80092aa:	f04f 31ff 	mov.w	r1, #4294967295
 80092ae:	487b      	ldr	r0, [pc, #492]	; (800949c <cppLoop+0x1874>)
 80092b0:	f7f9 f82c 	bl	800230c <_ZN3LED2LREaa>
		break;
 80092b4:	f000 bc88 	b.w	8009bc8 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_C){
 80092b8:	4877      	ldr	r0, [pc, #476]	; (8009498 <cppLoop+0x1870>)
 80092ba:	f7f8 ff07 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	bf0c      	ite	eq
 80092c4:	2301      	moveq	r3, #1
 80092c6:	2300      	movne	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f000 847c 	beq.w	8009bc8 <cppLoop+0x1fa0>
			led.LR(-1, 1);
 80092d0:	2201      	movs	r2, #1
 80092d2:	f04f 31ff 	mov.w	r1, #4294967295
 80092d6:	4871      	ldr	r0, [pc, #452]	; (800949c <cppLoop+0x1874>)
 80092d8:	f7f9 f818 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 80092dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80092e0:	f000 fdaa 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 80092e4:	2300      	movs	r3, #0
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	4b6e      	ldr	r3, [pc, #440]	; (80094a4 <cppLoop+0x187c>)
 80092ea:	2201      	movs	r2, #1
 80092ec:	496f      	ldr	r1, [pc, #444]	; (80094ac <cppLoop+0x1884>)
 80092ee:	4870      	ldr	r0, [pc, #448]	; (80094b0 <cppLoop+0x1888>)
 80092f0:	f7f8 fac4 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 80092f4:	2300      	movs	r3, #0
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	4b6b      	ldr	r3, [pc, #428]	; (80094a8 <cppLoop+0x1880>)
 80092fa:	2201      	movs	r2, #1
 80092fc:	496d      	ldr	r1, [pc, #436]	; (80094b4 <cppLoop+0x188c>)
 80092fe:	486c      	ldr	r0, [pc, #432]	; (80094b0 <cppLoop+0x1888>)
 8009300:	f7f8 fabc 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8009304:	4b67      	ldr	r3, [pc, #412]	; (80094a4 <cppLoop+0x187c>)
 8009306:	edd3 7a00 	vldr	s15, [r3]
 800930a:	4b67      	ldr	r3, [pc, #412]	; (80094a8 <cppLoop+0x1880>)
 800930c:	ed93 7a00 	vldr	s14, [r3]
 8009310:	eef0 0a47 	vmov.f32	s1, s14
 8009314:	eeb0 0a67 	vmov.f32	s0, s15
 8009318:	4867      	ldr	r0, [pc, #412]	; (80094b8 <cppLoop+0x1890>)
 800931a:	f7fa fe00 	bl	8003f1e <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 800931e:	2200      	movs	r2, #0
 8009320:	f04f 31ff 	mov.w	r1, #4294967295
 8009324:	485d      	ldr	r0, [pc, #372]	; (800949c <cppLoop+0x1874>)
 8009326:	f7f8 fff1 	bl	800230c <_ZN3LED2LREaa>
		break;
 800932a:	f000 bc4d 	b.w	8009bc8 <cppLoop+0x1fa0>

	case 9:
		led.fullColor('~');
 800932e:	217e      	movs	r1, #126	; 0x7e
 8009330:	485a      	ldr	r0, [pc, #360]	; (800949c <cppLoop+0x1874>)
 8009332:	f7f8 ff2f 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009336:	f7f7 feb3 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800933a:	2100      	movs	r1, #0
 800933c:	2000      	movs	r0, #0
 800933e:	f7f7 febf 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8009342:	485e      	ldr	r0, [pc, #376]	; (80094bc <cppLoop+0x1894>)
 8009344:	f7f7 fee6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009348:	2101      	movs	r1, #1
 800934a:	2000      	movs	r0, #0
 800934c:	f7f7 feb8 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8009350:	485b      	ldr	r0, [pc, #364]	; (80094c0 <cppLoop+0x1898>)
 8009352:	f7f7 fedf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009356:	4850      	ldr	r0, [pc, #320]	; (8009498 <cppLoop+0x1870>)
 8009358:	f7f8 feb8 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800935c:	4603      	mov	r3, r0
 800935e:	2b02      	cmp	r3, #2
 8009360:	bf0c      	ite	eq
 8009362:	2301      	moveq	r3, #1
 8009364:	2300      	movne	r3, #0
 8009366:	b2db      	uxtb	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	f000 842f 	beq.w	8009bcc <cppLoop+0x1fa4>
			led.LR(-1, 1);
 800936e:	2201      	movs	r2, #1
 8009370:	f04f 31ff 	mov.w	r1, #4294967295
 8009374:	4849      	ldr	r0, [pc, #292]	; (800949c <cppLoop+0x1874>)
 8009376:	f7f8 ffc9 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(500);
 800937a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800937e:	f000 fd5b 	bl	8009e38 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009382:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80094c4 <cppLoop+0x189c>
 8009386:	484c      	ldr	r0, [pc, #304]	; (80094b8 <cppLoop+0x1890>)
 8009388:	f7fa fd00 	bl	8003d8c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800938c:	484a      	ldr	r0, [pc, #296]	; (80094b8 <cppLoop+0x1890>)
 800938e:	f7fa ff6f 	bl	8004270 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009392:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009396:	f000 fd4f 	bl	8009e38 <HAL_Delay>

			led.fullColor('R');
 800939a:	2152      	movs	r1, #82	; 0x52
 800939c:	483f      	ldr	r0, [pc, #252]	; (800949c <cppLoop+0x1874>)
 800939e:	f7f8 fef9 	bl	8002194 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 80093a2:	4849      	ldr	r0, [pc, #292]	; (80094c8 <cppLoop+0x18a0>)
 80093a4:	f7f8 f9bc 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 80093a8:	f242 7010 	movw	r0, #10000	; 0x2710
 80093ac:	f000 fd44 	bl	8009e38 <HAL_Delay>

			line_trace.stop();
 80093b0:	4841      	ldr	r0, [pc, #260]	; (80094b8 <cppLoop+0x1890>)
 80093b2:	f7fb f809 	bl	80043c8 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80093b6:	4945      	ldr	r1, [pc, #276]	; (80094cc <cppLoop+0x18a4>)
 80093b8:	4845      	ldr	r0, [pc, #276]	; (80094d0 <cppLoop+0x18a8>)
 80093ba:	f7f8 f9ea 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 80093be:	4842      	ldr	r0, [pc, #264]	; (80094c8 <cppLoop+0x18a0>)
 80093c0:	f7f8 f972 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 80093c4:	eef0 7a40 	vmov.f32	s15, s0
 80093c8:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 80093cc:	1d3b      	adds	r3, r7, #4
 80093ce:	2201      	movs	r2, #1
 80093d0:	4619      	mov	r1, r3
 80093d2:	2001      	movs	r0, #1
 80093d4:	f7f8 fa00 	bl	80017d8 <sd_write_float>
			user_fclose();
 80093d8:	f7f8 f9ee 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 80093dc:	2200      	movs	r2, #0
 80093de:	f04f 31ff 	mov.w	r1, #4294967295
 80093e2:	482e      	ldr	r0, [pc, #184]	; (800949c <cppLoop+0x1874>)
 80093e4:	f7f8 ff92 	bl	800230c <_ZN3LED2LREaa>
		}
		break;
 80093e8:	e3f0      	b.n	8009bcc <cppLoop+0x1fa4>

	case 10:
		led.fullColor('~');
 80093ea:	217e      	movs	r1, #126	; 0x7e
 80093ec:	482b      	ldr	r0, [pc, #172]	; (800949c <cppLoop+0x1874>)
 80093ee:	f7f8 fed1 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80093f2:	f7f7 fe55 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093f6:	2100      	movs	r1, #0
 80093f8:	2000      	movs	r0, #0
 80093fa:	f7f7 fe61 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 80093fe:	4835      	ldr	r0, [pc, #212]	; (80094d4 <cppLoop+0x18ac>)
 8009400:	f7f7 fe88 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009404:	2101      	movs	r1, #1
 8009406:	2000      	movs	r0, #0
 8009408:	f7f7 fe5a 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800940c:	4832      	ldr	r0, [pc, #200]	; (80094d8 <cppLoop+0x18b0>)
 800940e:	f7f7 fe81 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009412:	4821      	ldr	r0, [pc, #132]	; (8009498 <cppLoop+0x1870>)
 8009414:	f7f8 fe5a 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009418:	4603      	mov	r3, r0
 800941a:	2b02      	cmp	r3, #2
 800941c:	bf0c      	ite	eq
 800941e:	2301      	moveq	r3, #1
 8009420:	2300      	movne	r3, #0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	2b00      	cmp	r3, #0
 8009426:	f000 83d3 	beq.w	8009bd0 <cppLoop+0x1fa8>
			HAL_Delay(500);
 800942a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800942e:	f000 fd03 	bl	8009e38 <HAL_Delay>
			led.LR(-1, 1);
 8009432:	2201      	movs	r2, #1
 8009434:	f04f 31ff 	mov.w	r1, #4294967295
 8009438:	4818      	ldr	r0, [pc, #96]	; (800949c <cppLoop+0x1874>)
 800943a:	f7f8 ff67 	bl	800230c <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 800943e:	2102      	movs	r1, #2
 8009440:	481d      	ldr	r0, [pc, #116]	; (80094b8 <cppLoop+0x1890>)
 8009442:	f7fa ff03 	bl	800424c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8009446:	4b25      	ldr	r3, [pc, #148]	; (80094dc <cppLoop+0x18b4>)
 8009448:	edd3 7a00 	vldr	s15, [r3]
 800944c:	eeb0 0a67 	vmov.f32	s0, s15
 8009450:	4819      	ldr	r0, [pc, #100]	; (80094b8 <cppLoop+0x1890>)
 8009452:	f7fa fcaa 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009456:	4b21      	ldr	r3, [pc, #132]	; (80094dc <cppLoop+0x18b4>)
 8009458:	edd3 7a00 	vldr	s15, [r3]
 800945c:	eeb0 0a67 	vmov.f32	s0, s15
 8009460:	4815      	ldr	r0, [pc, #84]	; (80094b8 <cppLoop+0x1890>)
 8009462:	f7fa fcb2 	bl	8003dca <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009466:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <cppLoop+0x18b4>)
 8009468:	edd3 7a00 	vldr	s15, [r3]
 800946c:	eeb0 0a67 	vmov.f32	s0, s15
 8009470:	4811      	ldr	r0, [pc, #68]	; (80094b8 <cppLoop+0x1890>)
 8009472:	f7fa fcca 	bl	8003e0a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009476:	4810      	ldr	r0, [pc, #64]	; (80094b8 <cppLoop+0x1890>)
 8009478:	f7fb f8f6 	bl	8004668 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 800947c:	2200      	movs	r2, #0
 800947e:	f04f 31ff 	mov.w	r1, #4294967295
 8009482:	4806      	ldr	r0, [pc, #24]	; (800949c <cppLoop+0x1874>)
 8009484:	f7f8 ff42 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 8009488:	e3a2      	b.n	8009bd0 <cppLoop+0x1fa8>
 800948a:	bf00      	nop
 800948c:	f3af 8000 	nop.w
 8009490:	9999999a 	.word	0x9999999a
 8009494:	3fb99999 	.word	0x3fb99999
 8009498:	200005b0 	.word	0x200005b0
 800949c:	200005bc 	.word	0x200005bc
 80094a0:	200423c4 	.word	0x200423c4
 80094a4:	20042434 	.word	0x20042434
 80094a8:	2004243c 	.word	0x2004243c
 80094ac:	0801a044 	.word	0x0801a044
 80094b0:	08019f48 	.word	0x08019f48
 80094b4:	0801a050 	.word	0x0801a050
 80094b8:	2001db4c 	.word	0x2001db4c
 80094bc:	0801a05c 	.word	0x0801a05c
 80094c0:	0801a064 	.word	0x0801a064
 80094c4:	00000000 	.word	0x00000000
 80094c8:	2001daac 	.word	0x2001daac
 80094cc:	0801a070 	.word	0x0801a070
 80094d0:	0801a078 	.word	0x0801a078
 80094d4:	0801a084 	.word	0x0801a084
 80094d8:	0801a090 	.word	0x0801a090
 80094dc:	2004240c 	.word	0x2004240c

	case 11:
		led.fullColor('~');
 80094e0:	217e      	movs	r1, #126	; 0x7e
 80094e2:	48bc      	ldr	r0, [pc, #752]	; (80097d4 <cppLoop+0x1bac>)
 80094e4:	f7f8 fe56 	bl	8002194 <_ZN3LED9fullColorEc>

lcd_clear();
 80094e8:	f7f7 fdda 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094ec:	2100      	movs	r1, #0
 80094ee:	2000      	movs	r0, #0
 80094f0:	f7f7 fde6 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 80094f4:	48b8      	ldr	r0, [pc, #736]	; (80097d8 <cppLoop+0x1bb0>)
 80094f6:	f7f7 fe0d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094fa:	2101      	movs	r1, #1
 80094fc:	2000      	movs	r0, #0
 80094fe:	f7f7 fddf 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009502:	48b6      	ldr	r0, [pc, #728]	; (80097dc <cppLoop+0x1bb4>)
 8009504:	f7f7 fe06 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009508:	48b5      	ldr	r0, [pc, #724]	; (80097e0 <cppLoop+0x1bb8>)
 800950a:	f7f8 fddf 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800950e:	4603      	mov	r3, r0
 8009510:	2b02      	cmp	r3, #2
 8009512:	bf0c      	ite	eq
 8009514:	2301      	moveq	r3, #1
 8009516:	2300      	movne	r3, #0
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b00      	cmp	r3, #0
 800951c:	f000 835a 	beq.w	8009bd4 <cppLoop+0x1fac>
			HAL_Delay(1000);
 8009520:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009524:	f000 fc88 	bl	8009e38 <HAL_Delay>
			led.LR(-1, 1);
 8009528:	2201      	movs	r2, #1
 800952a:	f04f 31ff 	mov.w	r1, #4294967295
 800952e:	48a9      	ldr	r0, [pc, #676]	; (80097d4 <cppLoop+0x1bac>)
 8009530:	f7f8 feec 	bl	800230c <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009534:	eddf 1aab 	vldr	s3, [pc, #684]	; 80097e4 <cppLoop+0x1bbc>
 8009538:	ed9f 1aaa 	vldr	s2, [pc, #680]	; 80097e4 <cppLoop+0x1bbc>
 800953c:	eddf 0aa9 	vldr	s1, [pc, #676]	; 80097e4 <cppLoop+0x1bbc>
 8009540:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80097e4 <cppLoop+0x1bbc>
 8009544:	48a8      	ldr	r0, [pc, #672]	; (80097e8 <cppLoop+0x1bc0>)
 8009546:	f7f7 fe83 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 800954a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800954e:	f000 fc73 	bl	8009e38 <HAL_Delay>
			esc.off();
 8009552:	48a5      	ldr	r0, [pc, #660]	; (80097e8 <cppLoop+0x1bc0>)
 8009554:	f7f7 ff16 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8009558:	2200      	movs	r2, #0
 800955a:	f04f 31ff 	mov.w	r1, #4294967295
 800955e:	489d      	ldr	r0, [pc, #628]	; (80097d4 <cppLoop+0x1bac>)
 8009560:	f7f8 fed4 	bl	800230c <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 8009564:	e336      	b.n	8009bd4 <cppLoop+0x1fac>

	case 12:
		led.fullColor('~');
 8009566:	217e      	movs	r1, #126	; 0x7e
 8009568:	489a      	ldr	r0, [pc, #616]	; (80097d4 <cppLoop+0x1bac>)
 800956a:	f7f8 fe13 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 800956e:	f7f7 fd97 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009572:	2100      	movs	r1, #0
 8009574:	2000      	movs	r0, #0
 8009576:	f7f7 fda3 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 800957a:	489c      	ldr	r0, [pc, #624]	; (80097ec <cppLoop+0x1bc4>)
 800957c:	f7f7 fdca 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009580:	2101      	movs	r1, #1
 8009582:	2000      	movs	r0, #0
 8009584:	f7f7 fd9c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009588:	4899      	ldr	r0, [pc, #612]	; (80097f0 <cppLoop+0x1bc8>)
 800958a:	f7f7 fdc3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800958e:	4894      	ldr	r0, [pc, #592]	; (80097e0 <cppLoop+0x1bb8>)
 8009590:	f7f8 fd9c 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009594:	4603      	mov	r3, r0
 8009596:	2b02      	cmp	r3, #2
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f000 8319 	beq.w	8009bd8 <cppLoop+0x1fb0>
			HAL_Delay(1500);
 80095a6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80095aa:	f000 fc45 	bl	8009e38 <HAL_Delay>
			led.LR(-1, 1);
 80095ae:	2201      	movs	r2, #1
 80095b0:	f04f 31ff 	mov.w	r1, #4294967295
 80095b4:	4887      	ldr	r0, [pc, #540]	; (80097d4 <cppLoop+0x1bac>)
 80095b6:	f7f8 fea9 	bl	800230c <_ZN3LED2LREaa>

			HAL_Delay(3000);
 80095ba:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80095be:	f000 fc3b 	bl	8009e38 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80095c2:	eddf 1a88 	vldr	s3, [pc, #544]	; 80097e4 <cppLoop+0x1bbc>
 80095c6:	ed9f 1a87 	vldr	s2, [pc, #540]	; 80097e4 <cppLoop+0x1bbc>
 80095ca:	eddf 0a86 	vldr	s1, [pc, #536]	; 80097e4 <cppLoop+0x1bbc>
 80095ce:	ed9f 0a85 	vldr	s0, [pc, #532]	; 80097e4 <cppLoop+0x1bbc>
 80095d2:	4885      	ldr	r0, [pc, #532]	; (80097e8 <cppLoop+0x1bc0>)
 80095d4:	f7f7 fe3c 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80095d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095dc:	f000 fc2c 	bl	8009e38 <HAL_Delay>

			logger.start();
 80095e0:	4884      	ldr	r0, [pc, #528]	; (80097f4 <cppLoop+0x1bcc>)
 80095e2:	f7fb fbba 	bl	8004d5a <_ZN6Logger5startEv>
			velocity_ctrl.start();
 80095e6:	4884      	ldr	r0, [pc, #528]	; (80097f8 <cppLoop+0x1bd0>)
 80095e8:	f7fc fc9b 	bl	8005f22 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 80095ec:	eddf 0a83 	vldr	s1, [pc, #524]	; 80097fc <cppLoop+0x1bd4>
 80095f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80095f4:	4880      	ldr	r0, [pc, #512]	; (80097f8 <cppLoop+0x1bd0>)
 80095f6:	f7fc fc27 	bl	8005e48 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 80095fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80095fe:	f000 fc1b 	bl	8009e38 <HAL_Delay>

			logger.stop();
 8009602:	487c      	ldr	r0, [pc, #496]	; (80097f4 <cppLoop+0x1bcc>)
 8009604:	f7fb fbc5 	bl	8004d92 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009608:	487b      	ldr	r0, [pc, #492]	; (80097f8 <cppLoop+0x1bd0>)
 800960a:	f7fc fc9d 	bl	8005f48 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 800960e:	4876      	ldr	r0, [pc, #472]	; (80097e8 <cppLoop+0x1bc0>)
 8009610:	f7f7 feb8 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009614:	4a7a      	ldr	r2, [pc, #488]	; (8009800 <cppLoop+0x1bd8>)
 8009616:	497b      	ldr	r1, [pc, #492]	; (8009804 <cppLoop+0x1bdc>)
 8009618:	4876      	ldr	r0, [pc, #472]	; (80097f4 <cppLoop+0x1bcc>)
 800961a:	f7fb fa9f 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 800961e:	2200      	movs	r2, #0
 8009620:	f04f 31ff 	mov.w	r1, #4294967295
 8009624:	486b      	ldr	r0, [pc, #428]	; (80097d4 <cppLoop+0x1bac>)
 8009626:	f7f8 fe71 	bl	800230c <_ZN3LED2LREaa>
		}
		break;
 800962a:	e2d5      	b.n	8009bd8 <cppLoop+0x1fb0>

	case 13:

		led.fullColor('W');
 800962c:	2157      	movs	r1, #87	; 0x57
 800962e:	4869      	ldr	r0, [pc, #420]	; (80097d4 <cppLoop+0x1bac>)
 8009630:	f7f8 fdb0 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009634:	f7f7 fd34 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009638:	2100      	movs	r1, #0
 800963a:	2000      	movs	r0, #0
 800963c:	f7f7 fd40 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009640:	4871      	ldr	r0, [pc, #452]	; (8009808 <cppLoop+0x1be0>)
 8009642:	f7f7 fd67 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009646:	2101      	movs	r1, #1
 8009648:	2000      	movs	r0, #0
 800964a:	f7f7 fd39 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 800964e:	4b6f      	ldr	r3, [pc, #444]	; (800980c <cppLoop+0x1be4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4618      	mov	r0, r3
 8009654:	f7f6 ff90 	bl	8000578 <__aeabi_f2d>
 8009658:	4603      	mov	r3, r0
 800965a:	460c      	mov	r4, r1
 800965c:	461a      	mov	r2, r3
 800965e:	4623      	mov	r3, r4
 8009660:	486b      	ldr	r0, [pc, #428]	; (8009810 <cppLoop+0x1be8>)
 8009662:	f7f7 fd57 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009666:	485e      	ldr	r0, [pc, #376]	; (80097e0 <cppLoop+0x1bb8>)
 8009668:	f7f8 fd30 	bl	80020cc <_ZN8JoyStick8getValueEv>
 800966c:	4603      	mov	r3, r0
 800966e:	2b02      	cmp	r3, #2
 8009670:	bf0c      	ite	eq
 8009672:	2301      	moveq	r3, #1
 8009674:	2300      	movne	r3, #0
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	f000 82af 	beq.w	8009bdc <cppLoop+0x1fb4>
			HAL_Delay(500);
 800967e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009682:	f000 fbd9 	bl	8009e38 <HAL_Delay>

			led.LR(1, -1);
 8009686:	f04f 32ff 	mov.w	r2, #4294967295
 800968a:	2101      	movs	r1, #1
 800968c:	4851      	ldr	r0, [pc, #324]	; (80097d4 <cppLoop+0x1bac>)
 800968e:	f7f8 fe3d 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009692:	2102      	movs	r1, #2
 8009694:	485f      	ldr	r0, [pc, #380]	; (8009814 <cppLoop+0x1bec>)
 8009696:	f7fa fdd9 	bl	800424c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800969a:	4b5f      	ldr	r3, [pc, #380]	; (8009818 <cppLoop+0x1bf0>)
 800969c:	edd3 7a00 	vldr	s15, [r3]
 80096a0:	eeb0 0a67 	vmov.f32	s0, s15
 80096a4:	485b      	ldr	r0, [pc, #364]	; (8009814 <cppLoop+0x1bec>)
 80096a6:	f7fa fb80 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80096aa:	4b58      	ldr	r3, [pc, #352]	; (800980c <cppLoop+0x1be4>)
 80096ac:	edd3 7a00 	vldr	s15, [r3]
 80096b0:	eeb0 0a67 	vmov.f32	s0, s15
 80096b4:	4857      	ldr	r0, [pc, #348]	; (8009814 <cppLoop+0x1bec>)
 80096b6:	f7fa fb88 	bl	8003dca <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80096ba:	4b54      	ldr	r3, [pc, #336]	; (800980c <cppLoop+0x1be4>)
 80096bc:	edd3 7a00 	vldr	s15, [r3]
 80096c0:	eeb0 0a67 	vmov.f32	s0, s15
 80096c4:	4853      	ldr	r0, [pc, #332]	; (8009814 <cppLoop+0x1bec>)
 80096c6:	f7fa fba0 	bl	8003e0a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80096ca:	4852      	ldr	r0, [pc, #328]	; (8009814 <cppLoop+0x1bec>)
 80096cc:	f7fa ffcc 	bl	8004668 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			//HAL_Delay(3000);
			//esc.on(BLDC_POWER*1.2, BLDC_POWER, BLDC_POWER, BLDC_POWER);
			HAL_Delay(1000);
 80096d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096d4:	f000 fbb0 	bl	8009e38 <HAL_Delay>

			line_trace.running();
 80096d8:	484e      	ldr	r0, [pc, #312]	; (8009814 <cppLoop+0x1bec>)
 80096da:	f7fa fdfb 	bl	80042d4 <_ZN9LineTrace7runningEv>

			esc.off();
 80096de:	4842      	ldr	r0, [pc, #264]	; (80097e8 <cppLoop+0x1bc0>)
 80096e0:	f7f7 fe50 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 80096e4:	f04f 32ff 	mov.w	r2, #4294967295
 80096e8:	2100      	movs	r1, #0
 80096ea:	483a      	ldr	r0, [pc, #232]	; (80097d4 <cppLoop+0x1bac>)
 80096ec:	f7f8 fe0e 	bl	800230c <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 80096f0:	e274      	b.n	8009bdc <cppLoop+0x1fb4>

	case 14:
		led.fullColor('W');
 80096f2:	2157      	movs	r1, #87	; 0x57
 80096f4:	4837      	ldr	r0, [pc, #220]	; (80097d4 <cppLoop+0x1bac>)
 80096f6:	f7f8 fd4d 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 80096fa:	f7f7 fcd1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096fe:	2100      	movs	r1, #0
 8009700:	2000      	movs	r0, #0
 8009702:	f7f7 fcdd 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009706:	4845      	ldr	r0, [pc, #276]	; (800981c <cppLoop+0x1bf4>)
 8009708:	f7f7 fd04 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800970c:	2101      	movs	r1, #1
 800970e:	2000      	movs	r0, #0
 8009710:	f7f7 fcd6 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8009714:	4b42      	ldr	r3, [pc, #264]	; (8009820 <cppLoop+0x1bf8>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4618      	mov	r0, r3
 800971a:	f7f6 ff2d 	bl	8000578 <__aeabi_f2d>
 800971e:	4603      	mov	r3, r0
 8009720:	460c      	mov	r4, r1
 8009722:	461a      	mov	r2, r3
 8009724:	4623      	mov	r3, r4
 8009726:	483a      	ldr	r0, [pc, #232]	; (8009810 <cppLoop+0x1be8>)
 8009728:	f7f7 fcf4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800972c:	482c      	ldr	r0, [pc, #176]	; (80097e0 <cppLoop+0x1bb8>)
 800972e:	f7f8 fccd 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009732:	4603      	mov	r3, r0
 8009734:	2b02      	cmp	r3, #2
 8009736:	bf0c      	ite	eq
 8009738:	2301      	moveq	r3, #1
 800973a:	2300      	movne	r3, #0
 800973c:	b2db      	uxtb	r3, r3
 800973e:	2b00      	cmp	r3, #0
 8009740:	f000 824e 	beq.w	8009be0 <cppLoop+0x1fb8>
			HAL_Delay(500);
 8009744:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009748:	f000 fb76 	bl	8009e38 <HAL_Delay>

			led.LR(1, -1);
 800974c:	f04f 32ff 	mov.w	r2, #4294967295
 8009750:	2101      	movs	r1, #1
 8009752:	4820      	ldr	r0, [pc, #128]	; (80097d4 <cppLoop+0x1bac>)
 8009754:	f7f8 fdda 	bl	800230c <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 8009758:	2101      	movs	r1, #1
 800975a:	482e      	ldr	r0, [pc, #184]	; (8009814 <cppLoop+0x1bec>)
 800975c:	f7fa fd76 	bl	800424c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8009760:	4b30      	ldr	r3, [pc, #192]	; (8009824 <cppLoop+0x1bfc>)
 8009762:	edd3 7a00 	vldr	s15, [r3]
 8009766:	eeb0 0a67 	vmov.f32	s0, s15
 800976a:	482a      	ldr	r0, [pc, #168]	; (8009814 <cppLoop+0x1bec>)
 800976c:	f7fa fb1d 	bl	8003daa <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009770:	4b2b      	ldr	r3, [pc, #172]	; (8009820 <cppLoop+0x1bf8>)
 8009772:	edd3 7a00 	vldr	s15, [r3]
 8009776:	eeb0 0a67 	vmov.f32	s0, s15
 800977a:	4826      	ldr	r0, [pc, #152]	; (8009814 <cppLoop+0x1bec>)
 800977c:	f7fa fb25 	bl	8003dca <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009780:	4b28      	ldr	r3, [pc, #160]	; (8009824 <cppLoop+0x1bfc>)
 8009782:	edd3 7a00 	vldr	s15, [r3]
 8009786:	eeb0 0a67 	vmov.f32	s0, s15
 800978a:	4822      	ldr	r0, [pc, #136]	; (8009814 <cppLoop+0x1bec>)
 800978c:	f7fa fb3d 	bl	8003e0a <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009790:	4820      	ldr	r0, [pc, #128]	; (8009814 <cppLoop+0x1bec>)
 8009792:	f7fa ff69 	bl	8004668 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(1000);
 8009796:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800979a:	f000 fb4d 	bl	8009e38 <HAL_Delay>

			logger.start();
 800979e:	4815      	ldr	r0, [pc, #84]	; (80097f4 <cppLoop+0x1bcc>)
 80097a0:	f7fb fadb 	bl	8004d5a <_ZN6Logger5startEv>

			line_trace.running();
 80097a4:	481b      	ldr	r0, [pc, #108]	; (8009814 <cppLoop+0x1bec>)
 80097a6:	f7fa fd95 	bl	80042d4 <_ZN9LineTrace7runningEv>

			logger.stop();
 80097aa:	4812      	ldr	r0, [pc, #72]	; (80097f4 <cppLoop+0x1bcc>)
 80097ac:	f7fb faf1 	bl	8004d92 <_ZN6Logger4stopEv>
			logger.saveLogs("STATELOG", "CURVEL.txt");
 80097b0:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <cppLoop+0x1c00>)
 80097b2:	491e      	ldr	r1, [pc, #120]	; (800982c <cppLoop+0x1c04>)
 80097b4:	480f      	ldr	r0, [pc, #60]	; (80097f4 <cppLoop+0x1bcc>)
 80097b6:	f7fb f9d1 	bl	8004b5c <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TARVEL.txt");
 80097ba:	4a1d      	ldr	r2, [pc, #116]	; (8009830 <cppLoop+0x1c08>)
 80097bc:	491b      	ldr	r1, [pc, #108]	; (800982c <cppLoop+0x1c04>)
 80097be:	480d      	ldr	r0, [pc, #52]	; (80097f4 <cppLoop+0x1bcc>)
 80097c0:	f7fb f9e0 	bl	8004b84 <_ZN6Logger9saveLogs2EPKcS1_>
;

			led.LR(0, -1);
 80097c4:	f04f 32ff 	mov.w	r2, #4294967295
 80097c8:	2100      	movs	r1, #0
 80097ca:	4802      	ldr	r0, [pc, #8]	; (80097d4 <cppLoop+0x1bac>)
 80097cc:	f7f8 fd9e 	bl	800230c <_ZN3LED2LREaa>
		}

		break;
 80097d0:	e206      	b.n	8009be0 <cppLoop+0x1fb8>
 80097d2:	bf00      	nop
 80097d4:	200005bc 	.word	0x200005bc
 80097d8:	0801a09c 	.word	0x0801a09c
 80097dc:	0801a0a0 	.word	0x0801a0a0
 80097e0:	200005b0 	.word	0x200005b0
 80097e4:	3ea3d70a 	.word	0x3ea3d70a
 80097e8:	2001db48 	.word	0x2001db48
 80097ec:	0801a0a8 	.word	0x0801a0a8
 80097f0:	0801a0ac 	.word	0x0801a0ac
 80097f4:	200005e0 	.word	0x200005e0
 80097f8:	2001dacc 	.word	0x2001dacc
 80097fc:	00000000 	.word	0x00000000
 8009800:	0801a0b8 	.word	0x0801a0b8
 8009804:	0801a0c4 	.word	0x0801a0c4
 8009808:	0801a0d0 	.word	0x0801a0d0
 800980c:	2004240c 	.word	0x2004240c
 8009810:	08019f74 	.word	0x08019f74
 8009814:	2001db4c 	.word	0x2001db4c
 8009818:	2004241c 	.word	0x2004241c
 800981c:	0801a0dc 	.word	0x0801a0dc
 8009820:	20042404 	.word	0x20042404
 8009824:	20042414 	.word	0x20042414
 8009828:	08019f98 	.word	0x08019f98
 800982c:	08019f8c 	.word	0x08019f8c
 8009830:	08019f80 	.word	0x08019f80

	case 15:
		led.fullColor('W');
 8009834:	2157      	movs	r1, #87	; 0x57
 8009836:	48ac      	ldr	r0, [pc, #688]	; (8009ae8 <cppLoop+0x1ec0>)
 8009838:	f7f8 fcac 	bl	8002194 <_ZN3LED9fullColorEc>

		lcd_clear();
 800983c:	f7f7 fc30 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009840:	2100      	movs	r1, #0
 8009842:	2000      	movs	r0, #0
 8009844:	f7f7 fc3c 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 8009848:	48a8      	ldr	r0, [pc, #672]	; (8009aec <cppLoop+0x1ec4>)
 800984a:	f7fa fa2c 	bl	8003ca6 <_ZN9LineTrace5getKpEv>
 800984e:	eeb0 7a40 	vmov.f32	s14, s0
 8009852:	eddf 7aa7 	vldr	s15, [pc, #668]	; 8009af0 <cppLoop+0x1ec8>
 8009856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985a:	eeb0 0a67 	vmov.f32	s0, s15
 800985e:	f7f9 f8c5 	bl	80029ec <_ZSt3absf>
 8009862:	ee10 3a10 	vmov	r3, s0
 8009866:	4618      	mov	r0, r3
 8009868:	f7f6 fe86 	bl	8000578 <__aeabi_f2d>
 800986c:	4603      	mov	r3, r0
 800986e:	460c      	mov	r4, r1
 8009870:	461a      	mov	r2, r3
 8009872:	4623      	mov	r3, r4
 8009874:	489f      	ldr	r0, [pc, #636]	; (8009af4 <cppLoop+0x1ecc>)
 8009876:	f7f7 fc4d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800987a:	2101      	movs	r1, #1
 800987c:	2000      	movs	r0, #0
 800987e:	f7f7 fc1f 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 8009882:	489a      	ldr	r0, [pc, #616]	; (8009aec <cppLoop+0x1ec4>)
 8009884:	f7fa fa1e 	bl	8003cc4 <_ZN9LineTrace5getKiEv>
 8009888:	eeb0 7a40 	vmov.f32	s14, s0
 800988c:	eddf 7a9a 	vldr	s15, [pc, #616]	; 8009af8 <cppLoop+0x1ed0>
 8009890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009894:	eeb0 0a67 	vmov.f32	s0, s15
 8009898:	f7f9 f8a8 	bl	80029ec <_ZSt3absf>
 800989c:	ee10 3a10 	vmov	r3, s0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7f6 fe69 	bl	8000578 <__aeabi_f2d>
 80098a6:	4605      	mov	r5, r0
 80098a8:	460e      	mov	r6, r1
 80098aa:	4890      	ldr	r0, [pc, #576]	; (8009aec <cppLoop+0x1ec4>)
 80098ac:	f7fa fa19 	bl	8003ce2 <_ZN9LineTrace5getKdEv>
 80098b0:	eeb0 7a40 	vmov.f32	s14, s0
 80098b4:	eddf 7a91 	vldr	s15, [pc, #580]	; 8009afc <cppLoop+0x1ed4>
 80098b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098bc:	eeb0 0a67 	vmov.f32	s0, s15
 80098c0:	f7f9 f894 	bl	80029ec <_ZSt3absf>
 80098c4:	ee10 3a10 	vmov	r3, s0
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7f6 fe55 	bl	8000578 <__aeabi_f2d>
 80098ce:	4603      	mov	r3, r0
 80098d0:	460c      	mov	r4, r1
 80098d2:	e9cd 3400 	strd	r3, r4, [sp]
 80098d6:	462a      	mov	r2, r5
 80098d8:	4633      	mov	r3, r6
 80098da:	4889      	ldr	r0, [pc, #548]	; (8009b00 <cppLoop+0x1ed8>)
 80098dc:	f7f7 fc1a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80098e0:	4888      	ldr	r0, [pc, #544]	; (8009b04 <cppLoop+0x1edc>)
 80098e2:	f7f8 fbf3 	bl	80020cc <_ZN8JoyStick8getValueEv>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b08      	cmp	r3, #8
 80098ea:	bf0c      	ite	eq
 80098ec:	2301      	moveq	r3, #1
 80098ee:	2300      	movne	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d021      	beq.n	800993a <cppLoop+0x1d12>
			led.LR(-1, 1);
 80098f6:	2201      	movs	r2, #1
 80098f8:	f04f 31ff 	mov.w	r1, #4294967295
 80098fc:	487a      	ldr	r0, [pc, #488]	; (8009ae8 <cppLoop+0x1ec0>)
 80098fe:	f7f8 fd05 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009902:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009906:	f000 fa97 	bl	8009e38 <HAL_Delay>

			selector++;
 800990a:	4b7f      	ldr	r3, [pc, #508]	; (8009b08 <cppLoop+0x1ee0>)
 800990c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009910:	b29b      	uxth	r3, r3
 8009912:	3301      	adds	r3, #1
 8009914:	b29b      	uxth	r3, r3
 8009916:	b21a      	sxth	r2, r3
 8009918:	4b7b      	ldr	r3, [pc, #492]	; (8009b08 <cppLoop+0x1ee0>)
 800991a:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 800991c:	4b7a      	ldr	r3, [pc, #488]	; (8009b08 <cppLoop+0x1ee0>)
 800991e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009922:	2b02      	cmp	r3, #2
 8009924:	dd02      	ble.n	800992c <cppLoop+0x1d04>
 8009926:	4b78      	ldr	r3, [pc, #480]	; (8009b08 <cppLoop+0x1ee0>)
 8009928:	2200      	movs	r2, #0
 800992a:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800992c:	2200      	movs	r2, #0
 800992e:	f04f 31ff 	mov.w	r1, #4294967295
 8009932:	486d      	ldr	r0, [pc, #436]	; (8009ae8 <cppLoop+0x1ec0>)
 8009934:	f7f8 fcea 	bl	800230c <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8009938:	e154      	b.n	8009be4 <cppLoop+0x1fbc>
		else if(joy_stick.getValue() == JOY_R){
 800993a:	4872      	ldr	r0, [pc, #456]	; (8009b04 <cppLoop+0x1edc>)
 800993c:	f7f8 fbc6 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009940:	4603      	mov	r3, r0
 8009942:	2b10      	cmp	r3, #16
 8009944:	bf0c      	ite	eq
 8009946:	2301      	moveq	r3, #1
 8009948:	2300      	movne	r3, #0
 800994a:	b2db      	uxtb	r3, r3
 800994c:	2b00      	cmp	r3, #0
 800994e:	d058      	beq.n	8009a02 <cppLoop+0x1dda>
			led.LR(-1, 1);
 8009950:	2201      	movs	r2, #1
 8009952:	f04f 31ff 	mov.w	r1, #4294967295
 8009956:	4864      	ldr	r0, [pc, #400]	; (8009ae8 <cppLoop+0x1ec0>)
 8009958:	f7f8 fcd8 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 800995c:	2064      	movs	r0, #100	; 0x64
 800995e:	f000 fa6b 	bl	8009e38 <HAL_Delay>
			if(selector == 0){
 8009962:	4b69      	ldr	r3, [pc, #420]	; (8009b08 <cppLoop+0x1ee0>)
 8009964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d113      	bne.n	8009994 <cppLoop+0x1d6c>
				adj_kp = adj_kp + 0.00001;
 800996c:	4b67      	ldr	r3, [pc, #412]	; (8009b0c <cppLoop+0x1ee4>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4618      	mov	r0, r3
 8009972:	f7f6 fe01 	bl	8000578 <__aeabi_f2d>
 8009976:	a356      	add	r3, pc, #344	; (adr r3, 8009ad0 <cppLoop+0x1ea8>)
 8009978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997c:	f7f6 fc9e 	bl	80002bc <__adddf3>
 8009980:	4603      	mov	r3, r0
 8009982:	460c      	mov	r4, r1
 8009984:	4618      	mov	r0, r3
 8009986:	4621      	mov	r1, r4
 8009988:	f7f7 f946 	bl	8000c18 <__aeabi_d2f>
 800998c:	4602      	mov	r2, r0
 800998e:	4b5f      	ldr	r3, [pc, #380]	; (8009b0c <cppLoop+0x1ee4>)
 8009990:	601a      	str	r2, [r3, #0]
 8009992:	e02b      	b.n	80099ec <cppLoop+0x1dc4>
			else if(selector == 1){
 8009994:	4b5c      	ldr	r3, [pc, #368]	; (8009b08 <cppLoop+0x1ee0>)
 8009996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d113      	bne.n	80099c6 <cppLoop+0x1d9e>
				adj_ki = adj_ki + 0.0001;
 800999e:	4b5c      	ldr	r3, [pc, #368]	; (8009b10 <cppLoop+0x1ee8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7f6 fde8 	bl	8000578 <__aeabi_f2d>
 80099a8:	a34b      	add	r3, pc, #300	; (adr r3, 8009ad8 <cppLoop+0x1eb0>)
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	f7f6 fc85 	bl	80002bc <__adddf3>
 80099b2:	4603      	mov	r3, r0
 80099b4:	460c      	mov	r4, r1
 80099b6:	4618      	mov	r0, r3
 80099b8:	4621      	mov	r1, r4
 80099ba:	f7f7 f92d 	bl	8000c18 <__aeabi_d2f>
 80099be:	4602      	mov	r2, r0
 80099c0:	4b53      	ldr	r3, [pc, #332]	; (8009b10 <cppLoop+0x1ee8>)
 80099c2:	601a      	str	r2, [r3, #0]
 80099c4:	e012      	b.n	80099ec <cppLoop+0x1dc4>
				adj_kd = adj_kd + 0.000001;
 80099c6:	4b53      	ldr	r3, [pc, #332]	; (8009b14 <cppLoop+0x1eec>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7f6 fdd4 	bl	8000578 <__aeabi_f2d>
 80099d0:	a343      	add	r3, pc, #268	; (adr r3, 8009ae0 <cppLoop+0x1eb8>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fc71 	bl	80002bc <__adddf3>
 80099da:	4603      	mov	r3, r0
 80099dc:	460c      	mov	r4, r1
 80099de:	4618      	mov	r0, r3
 80099e0:	4621      	mov	r1, r4
 80099e2:	f7f7 f919 	bl	8000c18 <__aeabi_d2f>
 80099e6:	4602      	mov	r2, r0
 80099e8:	4b4a      	ldr	r3, [pc, #296]	; (8009b14 <cppLoop+0x1eec>)
 80099ea:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80099ec:	2152      	movs	r1, #82	; 0x52
 80099ee:	483e      	ldr	r0, [pc, #248]	; (8009ae8 <cppLoop+0x1ec0>)
 80099f0:	f7f8 fbd0 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80099f4:	2200      	movs	r2, #0
 80099f6:	f04f 31ff 	mov.w	r1, #4294967295
 80099fa:	483b      	ldr	r0, [pc, #236]	; (8009ae8 <cppLoop+0x1ec0>)
 80099fc:	f7f8 fc86 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009a00:	e0f0      	b.n	8009be4 <cppLoop+0x1fbc>
		else if(joy_stick.getValue() == JOY_L){
 8009a02:	4840      	ldr	r0, [pc, #256]	; (8009b04 <cppLoop+0x1edc>)
 8009a04:	f7f8 fb62 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	bf0c      	ite	eq
 8009a0e:	2301      	moveq	r3, #1
 8009a10:	2300      	movne	r3, #0
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d07f      	beq.n	8009b18 <cppLoop+0x1ef0>
			led.LR(-1, 1);
 8009a18:	2201      	movs	r2, #1
 8009a1a:	f04f 31ff 	mov.w	r1, #4294967295
 8009a1e:	4832      	ldr	r0, [pc, #200]	; (8009ae8 <cppLoop+0x1ec0>)
 8009a20:	f7f8 fc74 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009a24:	2064      	movs	r0, #100	; 0x64
 8009a26:	f000 fa07 	bl	8009e38 <HAL_Delay>
			if(selector == 0){
 8009a2a:	4b37      	ldr	r3, [pc, #220]	; (8009b08 <cppLoop+0x1ee0>)
 8009a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d113      	bne.n	8009a5c <cppLoop+0x1e34>
				adj_kp = adj_kp - 0.00001;
 8009a34:	4b35      	ldr	r3, [pc, #212]	; (8009b0c <cppLoop+0x1ee4>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7f6 fd9d 	bl	8000578 <__aeabi_f2d>
 8009a3e:	a324      	add	r3, pc, #144	; (adr r3, 8009ad0 <cppLoop+0x1ea8>)
 8009a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a44:	f7f6 fc38 	bl	80002b8 <__aeabi_dsub>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	460c      	mov	r4, r1
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	4621      	mov	r1, r4
 8009a50:	f7f7 f8e2 	bl	8000c18 <__aeabi_d2f>
 8009a54:	4602      	mov	r2, r0
 8009a56:	4b2d      	ldr	r3, [pc, #180]	; (8009b0c <cppLoop+0x1ee4>)
 8009a58:	601a      	str	r2, [r3, #0]
 8009a5a:	e02b      	b.n	8009ab4 <cppLoop+0x1e8c>
			else if(selector == 1){
 8009a5c:	4b2a      	ldr	r3, [pc, #168]	; (8009b08 <cppLoop+0x1ee0>)
 8009a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d113      	bne.n	8009a8e <cppLoop+0x1e66>
				adj_ki = adj_ki - 0.0001;
 8009a66:	4b2a      	ldr	r3, [pc, #168]	; (8009b10 <cppLoop+0x1ee8>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7f6 fd84 	bl	8000578 <__aeabi_f2d>
 8009a70:	a319      	add	r3, pc, #100	; (adr r3, 8009ad8 <cppLoop+0x1eb0>)
 8009a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a76:	f7f6 fc1f 	bl	80002b8 <__aeabi_dsub>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	4618      	mov	r0, r3
 8009a80:	4621      	mov	r1, r4
 8009a82:	f7f7 f8c9 	bl	8000c18 <__aeabi_d2f>
 8009a86:	4602      	mov	r2, r0
 8009a88:	4b21      	ldr	r3, [pc, #132]	; (8009b10 <cppLoop+0x1ee8>)
 8009a8a:	601a      	str	r2, [r3, #0]
 8009a8c:	e012      	b.n	8009ab4 <cppLoop+0x1e8c>
				adj_kd = adj_kd - 0.000001;
 8009a8e:	4b21      	ldr	r3, [pc, #132]	; (8009b14 <cppLoop+0x1eec>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7f6 fd70 	bl	8000578 <__aeabi_f2d>
 8009a98:	a311      	add	r3, pc, #68	; (adr r3, 8009ae0 <cppLoop+0x1eb8>)
 8009a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9e:	f7f6 fc0b 	bl	80002b8 <__aeabi_dsub>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	f7f7 f8b5 	bl	8000c18 <__aeabi_d2f>
 8009aae:	4602      	mov	r2, r0
 8009ab0:	4b18      	ldr	r3, [pc, #96]	; (8009b14 <cppLoop+0x1eec>)
 8009ab2:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009ab4:	2152      	movs	r1, #82	; 0x52
 8009ab6:	480c      	ldr	r0, [pc, #48]	; (8009ae8 <cppLoop+0x1ec0>)
 8009ab8:	f7f8 fb6c 	bl	8002194 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009abc:	2200      	movs	r2, #0
 8009abe:	f04f 31ff 	mov.w	r1, #4294967295
 8009ac2:	4809      	ldr	r0, [pc, #36]	; (8009ae8 <cppLoop+0x1ec0>)
 8009ac4:	f7f8 fc22 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009ac8:	e08c      	b.n	8009be4 <cppLoop+0x1fbc>
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w
 8009ad0:	88e368f1 	.word	0x88e368f1
 8009ad4:	3ee4f8b5 	.word	0x3ee4f8b5
 8009ad8:	eb1c432d 	.word	0xeb1c432d
 8009adc:	3f1a36e2 	.word	0x3f1a36e2
 8009ae0:	a0b5ed8d 	.word	0xa0b5ed8d
 8009ae4:	3eb0c6f7 	.word	0x3eb0c6f7
 8009ae8:	200005bc 	.word	0x200005bc
 8009aec:	2001db4c 	.word	0x2001db4c
 8009af0:	447a0000 	.word	0x447a0000
 8009af4:	0801a0e8 	.word	0x0801a0e8
 8009af8:	42c80000 	.word	0x42c80000
 8009afc:	461c4000 	.word	0x461c4000
 8009b00:	08019f2c 	.word	0x08019f2c
 8009b04:	200005b0 	.word	0x200005b0
 8009b08:	200423c0 	.word	0x200423c0
 8009b0c:	200423cc 	.word	0x200423cc
 8009b10:	200423d4 	.word	0x200423d4
 8009b14:	200423dc 	.word	0x200423dc
		else if(joy_stick.getValue() == JOY_C){
 8009b18:	4836      	ldr	r0, [pc, #216]	; (8009bf4 <cppLoop+0x1fcc>)
 8009b1a:	f7f8 fad7 	bl	80020cc <_ZN8JoyStick8getValueEv>
 8009b1e:	4603      	mov	r3, r0
 8009b20:	2b02      	cmp	r3, #2
 8009b22:	bf0c      	ite	eq
 8009b24:	2301      	moveq	r3, #1
 8009b26:	2300      	movne	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d05a      	beq.n	8009be4 <cppLoop+0x1fbc>
			led.LR(-1, 1);
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f04f 31ff 	mov.w	r1, #4294967295
 8009b34:	4830      	ldr	r0, [pc, #192]	; (8009bf8 <cppLoop+0x1fd0>)
 8009b36:	f7f8 fbe9 	bl	800230c <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009b3a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009b3e:	f000 f97b 	bl	8009e38 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8009b42:	2300      	movs	r3, #0
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4b2d      	ldr	r3, [pc, #180]	; (8009bfc <cppLoop+0x1fd4>)
 8009b48:	2201      	movs	r2, #1
 8009b4a:	492d      	ldr	r1, [pc, #180]	; (8009c00 <cppLoop+0x1fd8>)
 8009b4c:	482d      	ldr	r0, [pc, #180]	; (8009c04 <cppLoop+0x1fdc>)
 8009b4e:	f7f7 fe95 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8009b52:	2300      	movs	r3, #0
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	4b2c      	ldr	r3, [pc, #176]	; (8009c08 <cppLoop+0x1fe0>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	492c      	ldr	r1, [pc, #176]	; (8009c0c <cppLoop+0x1fe4>)
 8009b5c:	4829      	ldr	r0, [pc, #164]	; (8009c04 <cppLoop+0x1fdc>)
 8009b5e:	f7f7 fe8d 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8009b62:	2300      	movs	r3, #0
 8009b64:	9300      	str	r3, [sp, #0]
 8009b66:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <cppLoop+0x1fe8>)
 8009b68:	2201      	movs	r2, #1
 8009b6a:	492a      	ldr	r1, [pc, #168]	; (8009c14 <cppLoop+0x1fec>)
 8009b6c:	4825      	ldr	r0, [pc, #148]	; (8009c04 <cppLoop+0x1fdc>)
 8009b6e:	f7f7 fe85 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8009b72:	4b22      	ldr	r3, [pc, #136]	; (8009bfc <cppLoop+0x1fd4>)
 8009b74:	edd3 7a00 	vldr	s15, [r3]
 8009b78:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <cppLoop+0x1fe0>)
 8009b7a:	ed93 7a00 	vldr	s14, [r3]
 8009b7e:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <cppLoop+0x1fe8>)
 8009b80:	edd3 6a00 	vldr	s13, [r3]
 8009b84:	eeb0 1a66 	vmov.f32	s2, s13
 8009b88:	eef0 0a47 	vmov.f32	s1, s14
 8009b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8009b90:	4821      	ldr	r0, [pc, #132]	; (8009c18 <cppLoop+0x1ff0>)
 8009b92:	f7fa f86f 	bl	8003c74 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009b96:	2200      	movs	r2, #0
 8009b98:	f04f 31ff 	mov.w	r1, #4294967295
 8009b9c:	4816      	ldr	r0, [pc, #88]	; (8009bf8 <cppLoop+0x1fd0>)
 8009b9e:	f7f8 fbb5 	bl	800230c <_ZN3LED2LREaa>
		break;
 8009ba2:	e01f      	b.n	8009be4 <cppLoop+0x1fbc>

	default:
		break;
 8009ba4:	bf00      	nop
 8009ba6:	e01e      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009ba8:	bf00      	nop
 8009baa:	e01c      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bac:	bf00      	nop
 8009bae:	e01a      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bb0:	bf00      	nop
 8009bb2:	e018      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bb4:	bf00      	nop
 8009bb6:	e016      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bb8:	bf00      	nop
 8009bba:	e014      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bbc:	bf00      	nop
 8009bbe:	e012      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bc0:	bf00      	nop
 8009bc2:	e010      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bc4:	bf00      	nop
 8009bc6:	e00e      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bc8:	bf00      	nop
 8009bca:	e00c      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bcc:	bf00      	nop
 8009bce:	e00a      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bd0:	bf00      	nop
 8009bd2:	e008      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bd4:	bf00      	nop
 8009bd6:	e006      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bd8:	bf00      	nop
 8009bda:	e004      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009bdc:	bf00      	nop
 8009bde:	e002      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009be0:	bf00      	nop
 8009be2:	e000      	b.n	8009be6 <cppLoop+0x1fbe>
		break;
 8009be4:	bf00      	nop

	}

	HAL_Delay(30);
 8009be6:	201e      	movs	r0, #30
 8009be8:	f000 f926 	bl	8009e38 <HAL_Delay>

}
 8009bec:	bf00      	nop
 8009bee:	370c      	adds	r7, #12
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bf4:	200005b0 	.word	0x200005b0
 8009bf8:	200005bc 	.word	0x200005bc
 8009bfc:	200423cc 	.word	0x200423cc
 8009c00:	0801a0f4 	.word	0x0801a0f4
 8009c04:	08019f48 	.word	0x08019f48
 8009c08:	200423d4 	.word	0x200423d4
 8009c0c:	0801a0fc 	.word	0x0801a0fc
 8009c10:	200423dc 	.word	0x200423dc
 8009c14:	0801a104 	.word	0x0801a104
 8009c18:	2001db4c 	.word	0x2001db4c

08009c1c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af06      	add	r7, sp, #24
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d142      	bne.n	8009cb2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d13d      	bne.n	8009cb2 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009c36:	4821      	ldr	r0, [pc, #132]	; (8009cbc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009c38:	f7f8 fba0 	bl	800237c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009c3c:	4820      	ldr	r0, [pc, #128]	; (8009cc0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009c3e:	f7fb fc8b 	bl	8005558 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009c42:	4820      	ldr	r0, [pc, #128]	; (8009cc4 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009c44:	f7f8 fa36 	bl	80020b4 <_ZN8JoyStickC1Ev>
Motor motor;
 8009c48:	481f      	ldr	r0, [pc, #124]	; (8009cc8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c4a:	f7fb f8b2 	bl	8004db2 <_ZN5MotorC1Ev>
IMU imu;
 8009c4e:	481f      	ldr	r0, [pc, #124]	; (8009ccc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c50:	f7f8 f82c 	bl	8001cac <_ZN3IMUC1Ev>
Logger logger;
 8009c54:	481e      	ldr	r0, [pc, #120]	; (8009cd0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c56:	f7fa fdf7 	bl	8004848 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009c5a:	481e      	ldr	r0, [pc, #120]	; (8009cd4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c5c:	f7f7 fbb6 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009c60:	4b1a      	ldr	r3, [pc, #104]	; (8009ccc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c62:	4a1c      	ldr	r2, [pc, #112]	; (8009cd4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c64:	4918      	ldr	r1, [pc, #96]	; (8009cc8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c66:	481c      	ldr	r0, [pc, #112]	; (8009cd8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c68:	f7fb ffba 	bl	8005be0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	; (8009cd8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c6e:	4a17      	ldr	r2, [pc, #92]	; (8009ccc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c70:	4918      	ldr	r1, [pc, #96]	; (8009cd4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c72:	481a      	ldr	r0, [pc, #104]	; (8009cdc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009c74:	f7fb f982 	bl	8004f7c <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009c78:	4819      	ldr	r0, [pc, #100]	; (8009ce0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c7a:	f7f7 faab 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009c7e:	4b18      	ldr	r3, [pc, #96]	; (8009ce0 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009c80:	9305      	str	r3, [sp, #20]
 8009c82:	4b12      	ldr	r3, [pc, #72]	; (8009ccc <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009c84:	9304      	str	r3, [sp, #16]
 8009c86:	4b12      	ldr	r3, [pc, #72]	; (8009cd0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009c88:	9303      	str	r3, [sp, #12]
 8009c8a:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009c8c:	9302      	str	r3, [sp, #8]
 8009c8e:	4b11      	ldr	r3, [pc, #68]	; (8009cd4 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	4b0b      	ldr	r3, [pc, #44]	; (8009cc0 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009c94:	9300      	str	r3, [sp, #0]
 8009c96:	4b10      	ldr	r3, [pc, #64]	; (8009cd8 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009c98:	4a08      	ldr	r2, [pc, #32]	; (8009cbc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009c9a:	490b      	ldr	r1, [pc, #44]	; (8009cc8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009c9c:	4811      	ldr	r0, [pc, #68]	; (8009ce4 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009c9e:	f7f8 feb5 	bl	8002a0c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009ca2:	4a09      	ldr	r2, [pc, #36]	; (8009cc8 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009ca4:	490a      	ldr	r1, [pc, #40]	; (8009cd0 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009ca6:	4810      	ldr	r0, [pc, #64]	; (8009ce8 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009ca8:	f7fb fdd2 	bl	8005850 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009cac:	480f      	ldr	r0, [pc, #60]	; (8009cec <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009cae:	f7fb fae5 	bl	800527c <_ZN13PathFollowingC1Ev>
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200002ac 	.word	0x200002ac
 8009cc0:	200005a4 	.word	0x200005a4
 8009cc4:	200005b0 	.word	0x200005b0
 8009cc8:	200005b8 	.word	0x200005b8
 8009ccc:	200005cc 	.word	0x200005cc
 8009cd0:	200005e0 	.word	0x200005e0
 8009cd4:	2001daac 	.word	0x2001daac
 8009cd8:	2001dacc 	.word	0x2001dacc
 8009cdc:	2001db08 	.word	0x2001db08
 8009ce0:	2001db48 	.word	0x2001db48
 8009ce4:	2001db4c 	.word	0x2001db4c
 8009ce8:	2002aa8c 	.word	0x2002aa8c
 8009cec:	2002ac98 	.word	0x2002ac98

08009cf0 <_GLOBAL__sub_I_line_sensor>:
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009cf8:	2001      	movs	r0, #1
 8009cfa:	f7ff ff8f 	bl	8009c1c <_Z41__static_initialization_and_destruction_0ii>
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009d38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009d04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009d06:	e003      	b.n	8009d10 <LoopCopyDataInit>

08009d08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009d08:	4b0c      	ldr	r3, [pc, #48]	; (8009d3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009d0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009d0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009d0e:	3104      	adds	r1, #4

08009d10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009d10:	480b      	ldr	r0, [pc, #44]	; (8009d40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009d12:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009d14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009d16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009d18:	d3f6      	bcc.n	8009d08 <CopyDataInit>
  ldr  r2, =_sbss
 8009d1a:	4a0b      	ldr	r2, [pc, #44]	; (8009d48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009d1c:	e002      	b.n	8009d24 <LoopFillZerobss>

08009d1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009d1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009d20:	f842 3b04 	str.w	r3, [r2], #4

08009d24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009d26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009d28:	d3f9      	bcc.n	8009d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009d2a:	f7fd fe6b 	bl	8007a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009d2e:	f00b fdd3 	bl	80158d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009d32:	f7fc f9a5 	bl	8006080 <main>
  bx  lr    
 8009d36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009d38:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009d3c:	0801a6f8 	.word	0x0801a6f8
  ldr  r0, =_sdata
 8009d40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009d44:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009d48:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009d4c:	20046e20 	.word	0x20046e20

08009d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009d50:	e7fe      	b.n	8009d50 <ADC_IRQHandler>
	...

08009d54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009d58:	4b0e      	ldr	r3, [pc, #56]	; (8009d94 <HAL_Init+0x40>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a0d      	ldr	r2, [pc, #52]	; (8009d94 <HAL_Init+0x40>)
 8009d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009d64:	4b0b      	ldr	r3, [pc, #44]	; (8009d94 <HAL_Init+0x40>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a0a      	ldr	r2, [pc, #40]	; (8009d94 <HAL_Init+0x40>)
 8009d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009d6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009d70:	4b08      	ldr	r3, [pc, #32]	; (8009d94 <HAL_Init+0x40>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a07      	ldr	r2, [pc, #28]	; (8009d94 <HAL_Init+0x40>)
 8009d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009d7c:	2003      	movs	r0, #3
 8009d7e:	f000 fd51 	bl	800a824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009d82:	2000      	movs	r0, #0
 8009d84:	f000 f808 	bl	8009d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009d88:	f7fd f88c 	bl	8006ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009d8c:	2300      	movs	r3, #0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	40023c00 	.word	0x40023c00

08009d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009da0:	4b12      	ldr	r3, [pc, #72]	; (8009dec <HAL_InitTick+0x54>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	4b12      	ldr	r3, [pc, #72]	; (8009df0 <HAL_InitTick+0x58>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	4619      	mov	r1, r3
 8009daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8009db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 fd69 	bl	800a88e <HAL_SYSTICK_Config>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e00e      	b.n	8009de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2b0f      	cmp	r3, #15
 8009dca:	d80a      	bhi.n	8009de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009dcc:	2200      	movs	r2, #0
 8009dce:	6879      	ldr	r1, [r7, #4]
 8009dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd4:	f000 fd31 	bl	800a83a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009dd8:	4a06      	ldr	r2, [pc, #24]	; (8009df4 <HAL_InitTick+0x5c>)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
 8009de0:	e000      	b.n	8009de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3708      	adds	r7, #8
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000000 	.word	0x20000000
 8009df0:	20000008 	.word	0x20000008
 8009df4:	20000004 	.word	0x20000004

08009df8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009dfc:	4b06      	ldr	r3, [pc, #24]	; (8009e18 <HAL_IncTick+0x20>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <HAL_IncTick+0x24>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4413      	add	r3, r2
 8009e08:	4a04      	ldr	r2, [pc, #16]	; (8009e1c <HAL_IncTick+0x24>)
 8009e0a:	6013      	str	r3, [r2, #0]
}
 8009e0c:	bf00      	nop
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000008 	.word	0x20000008
 8009e1c:	20044da8 	.word	0x20044da8

08009e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e20:	b480      	push	{r7}
 8009e22:	af00      	add	r7, sp, #0
  return uwTick;
 8009e24:	4b03      	ldr	r3, [pc, #12]	; (8009e34 <HAL_GetTick+0x14>)
 8009e26:	681b      	ldr	r3, [r3, #0]
}
 8009e28:	4618      	mov	r0, r3
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	20044da8 	.word	0x20044da8

08009e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e40:	f7ff ffee 	bl	8009e20 <HAL_GetTick>
 8009e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d005      	beq.n	8009e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009e52:	4b09      	ldr	r3, [pc, #36]	; (8009e78 <HAL_Delay+0x40>)
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	461a      	mov	r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009e5e:	bf00      	nop
 8009e60:	f7ff ffde 	bl	8009e20 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	68fa      	ldr	r2, [r7, #12]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d8f7      	bhi.n	8009e60 <HAL_Delay+0x28>
  {
  }
}
 8009e70:	bf00      	nop
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	20000008 	.word	0x20000008

08009e7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d101      	bne.n	8009e92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e033      	b.n	8009efa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d109      	bne.n	8009eae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7fd f82a 	bl	8006ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	f003 0310 	and.w	r3, r3, #16
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d118      	bne.n	8009eec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009ec2:	f023 0302 	bic.w	r3, r3, #2
 8009ec6:	f043 0202 	orr.w	r2, r3, #2
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 fa5a 	bl	800a388 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	f043 0201 	orr.w	r2, r3, #1
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	641a      	str	r2, [r3, #64]	; 0x40
 8009eea:	e001      	b.n	8009ef0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
	...

08009f04 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009f10:	2300      	movs	r3, #0
 8009f12:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d101      	bne.n	8009f22 <HAL_ADC_Start_DMA+0x1e>
 8009f1e:	2302      	movs	r3, #2
 8009f20:	e0cc      	b.n	800a0bc <HAL_ADC_Start_DMA+0x1b8>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f003 0301 	and.w	r3, r3, #1
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d018      	beq.n	8009f6a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f042 0201 	orr.w	r2, r2, #1
 8009f46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009f48:	4b5e      	ldr	r3, [pc, #376]	; (800a0c4 <HAL_ADC_Start_DMA+0x1c0>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a5e      	ldr	r2, [pc, #376]	; (800a0c8 <HAL_ADC_Start_DMA+0x1c4>)
 8009f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f52:	0c9a      	lsrs	r2, r3, #18
 8009f54:	4613      	mov	r3, r2
 8009f56:	005b      	lsls	r3, r3, #1
 8009f58:	4413      	add	r3, r2
 8009f5a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009f5c:	e002      	b.n	8009f64 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009f5e:	693b      	ldr	r3, [r7, #16]
 8009f60:	3b01      	subs	r3, #1
 8009f62:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d1f9      	bne.n	8009f5e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	f040 80a0 	bne.w	800a0ba <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f7e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009f82:	f023 0301 	bic.w	r3, r3, #1
 8009f86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d007      	beq.n	8009fac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009fa4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fb8:	d106      	bne.n	8009fc8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fbe:	f023 0206 	bic.w	r2, r3, #6
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	645a      	str	r2, [r3, #68]	; 0x44
 8009fc6:	e002      	b.n	8009fce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009fd6:	4b3d      	ldr	r3, [pc, #244]	; (800a0cc <HAL_ADC_Start_DMA+0x1c8>)
 8009fd8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	4a3c      	ldr	r2, [pc, #240]	; (800a0d0 <HAL_ADC_Start_DMA+0x1cc>)
 8009fe0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe6:	4a3b      	ldr	r2, [pc, #236]	; (800a0d4 <HAL_ADC_Start_DMA+0x1d0>)
 8009fe8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fee:	4a3a      	ldr	r2, [pc, #232]	; (800a0d8 <HAL_ADC_Start_DMA+0x1d4>)
 8009ff0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009ffa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685a      	ldr	r2, [r3, #4]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a00a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	689a      	ldr	r2, [r3, #8]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a01a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	334c      	adds	r3, #76	; 0x4c
 800a026:	4619      	mov	r1, r3
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f000 fcea 	bl	800aa04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	685b      	ldr	r3, [r3, #4]
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d12a      	bne.n	800a092 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a26      	ldr	r2, [pc, #152]	; (800a0dc <HAL_ADC_Start_DMA+0x1d8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d015      	beq.n	800a072 <HAL_ADC_Start_DMA+0x16e>
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4a25      	ldr	r2, [pc, #148]	; (800a0e0 <HAL_ADC_Start_DMA+0x1dc>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d105      	bne.n	800a05c <HAL_ADC_Start_DMA+0x158>
 800a050:	4b1e      	ldr	r3, [pc, #120]	; (800a0cc <HAL_ADC_Start_DMA+0x1c8>)
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f003 031f 	and.w	r3, r3, #31
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a20      	ldr	r2, [pc, #128]	; (800a0e4 <HAL_ADC_Start_DMA+0x1e0>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d129      	bne.n	800a0ba <HAL_ADC_Start_DMA+0x1b6>
 800a066:	4b19      	ldr	r3, [pc, #100]	; (800a0cc <HAL_ADC_Start_DMA+0x1c8>)
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f003 031f 	and.w	r3, r3, #31
 800a06e:	2b0f      	cmp	r3, #15
 800a070:	d823      	bhi.n	800a0ba <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d11c      	bne.n	800a0ba <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a08e:	609a      	str	r2, [r3, #8]
 800a090:	e013      	b.n	800a0ba <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a11      	ldr	r2, [pc, #68]	; (800a0dc <HAL_ADC_Start_DMA+0x1d8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d10e      	bne.n	800a0ba <HAL_ADC_Start_DMA+0x1b6>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d107      	bne.n	800a0ba <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	689a      	ldr	r2, [r3, #8]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800a0b8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	20000000 	.word	0x20000000
 800a0c8:	431bde83 	.word	0x431bde83
 800a0cc:	40012300 	.word	0x40012300
 800a0d0:	0800a581 	.word	0x0800a581
 800a0d4:	0800a63b 	.word	0x0800a63b
 800a0d8:	0800a657 	.word	0x0800a657
 800a0dc:	40012000 	.word	0x40012000
 800a0e0:	40012100 	.word	0x40012100
 800a0e4:	40012200 	.word	0x40012200

0800a0e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a12e:	2300      	movs	r3, #0
 800a130:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d101      	bne.n	800a140 <HAL_ADC_ConfigChannel+0x1c>
 800a13c:	2302      	movs	r3, #2
 800a13e:	e113      	b.n	800a368 <HAL_ADC_ConfigChannel+0x244>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b09      	cmp	r3, #9
 800a14e:	d925      	bls.n	800a19c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68d9      	ldr	r1, [r3, #12]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	4613      	mov	r3, r2
 800a160:	005b      	lsls	r3, r3, #1
 800a162:	4413      	add	r3, r2
 800a164:	3b1e      	subs	r3, #30
 800a166:	2207      	movs	r2, #7
 800a168:	fa02 f303 	lsl.w	r3, r2, r3
 800a16c:	43da      	mvns	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	400a      	ands	r2, r1
 800a174:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	68d9      	ldr	r1, [r3, #12]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	689a      	ldr	r2, [r3, #8]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	4618      	mov	r0, r3
 800a188:	4603      	mov	r3, r0
 800a18a:	005b      	lsls	r3, r3, #1
 800a18c:	4403      	add	r3, r0
 800a18e:	3b1e      	subs	r3, #30
 800a190:	409a      	lsls	r2, r3
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	430a      	orrs	r2, r1
 800a198:	60da      	str	r2, [r3, #12]
 800a19a:	e022      	b.n	800a1e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6919      	ldr	r1, [r3, #16]
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	4413      	add	r3, r2
 800a1b0:	2207      	movs	r2, #7
 800a1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b6:	43da      	mvns	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	400a      	ands	r2, r1
 800a1be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6919      	ldr	r1, [r3, #16]
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	689a      	ldr	r2, [r3, #8]
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	4403      	add	r3, r0
 800a1d8:	409a      	lsls	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2b06      	cmp	r3, #6
 800a1e8:	d824      	bhi.n	800a234 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	3b05      	subs	r3, #5
 800a1fc:	221f      	movs	r2, #31
 800a1fe:	fa02 f303 	lsl.w	r3, r2, r3
 800a202:	43da      	mvns	r2, r3
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	400a      	ands	r2, r1
 800a20a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	b29b      	uxth	r3, r3
 800a218:	4618      	mov	r0, r3
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	685a      	ldr	r2, [r3, #4]
 800a21e:	4613      	mov	r3, r2
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	4413      	add	r3, r2
 800a224:	3b05      	subs	r3, #5
 800a226:	fa00 f203 	lsl.w	r2, r0, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	635a      	str	r2, [r3, #52]	; 0x34
 800a232:	e04c      	b.n	800a2ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	2b0c      	cmp	r3, #12
 800a23a:	d824      	bhi.n	800a286 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
 800a246:	4613      	mov	r3, r2
 800a248:	009b      	lsls	r3, r3, #2
 800a24a:	4413      	add	r3, r2
 800a24c:	3b23      	subs	r3, #35	; 0x23
 800a24e:	221f      	movs	r2, #31
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	43da      	mvns	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	400a      	ands	r2, r1
 800a25c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4618      	mov	r0, r3
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	4613      	mov	r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	4413      	add	r3, r2
 800a276:	3b23      	subs	r3, #35	; 0x23
 800a278:	fa00 f203 	lsl.w	r2, r0, r3
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	430a      	orrs	r2, r1
 800a282:	631a      	str	r2, [r3, #48]	; 0x30
 800a284:	e023      	b.n	800a2ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	3b41      	subs	r3, #65	; 0x41
 800a298:	221f      	movs	r2, #31
 800a29a:	fa02 f303 	lsl.w	r3, r2, r3
 800a29e:	43da      	mvns	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	400a      	ands	r2, r1
 800a2a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	685a      	ldr	r2, [r3, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	009b      	lsls	r3, r3, #2
 800a2be:	4413      	add	r3, r2
 800a2c0:	3b41      	subs	r3, #65	; 0x41
 800a2c2:	fa00 f203 	lsl.w	r2, r0, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	430a      	orrs	r2, r1
 800a2cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a2ce:	4b29      	ldr	r3, [pc, #164]	; (800a374 <HAL_ADC_ConfigChannel+0x250>)
 800a2d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a28      	ldr	r2, [pc, #160]	; (800a378 <HAL_ADC_ConfigChannel+0x254>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d10f      	bne.n	800a2fc <HAL_ADC_ConfigChannel+0x1d8>
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b12      	cmp	r3, #18
 800a2e2:	d10b      	bne.n	800a2fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a1d      	ldr	r2, [pc, #116]	; (800a378 <HAL_ADC_ConfigChannel+0x254>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d12b      	bne.n	800a35e <HAL_ADC_ConfigChannel+0x23a>
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a1c      	ldr	r2, [pc, #112]	; (800a37c <HAL_ADC_ConfigChannel+0x258>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d003      	beq.n	800a318 <HAL_ADC_ConfigChannel+0x1f4>
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b11      	cmp	r3, #17
 800a316:	d122      	bne.n	800a35e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a11      	ldr	r2, [pc, #68]	; (800a37c <HAL_ADC_ConfigChannel+0x258>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d111      	bne.n	800a35e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a33a:	4b11      	ldr	r3, [pc, #68]	; (800a380 <HAL_ADC_ConfigChannel+0x25c>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	4a11      	ldr	r2, [pc, #68]	; (800a384 <HAL_ADC_ConfigChannel+0x260>)
 800a340:	fba2 2303 	umull	r2, r3, r2, r3
 800a344:	0c9a      	lsrs	r2, r3, #18
 800a346:	4613      	mov	r3, r2
 800a348:	009b      	lsls	r3, r3, #2
 800a34a:	4413      	add	r3, r2
 800a34c:	005b      	lsls	r3, r3, #1
 800a34e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a350:	e002      	b.n	800a358 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	3b01      	subs	r3, #1
 800a356:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d1f9      	bne.n	800a352 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	2200      	movs	r2, #0
 800a362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3714      	adds	r7, #20
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr
 800a374:	40012300 	.word	0x40012300
 800a378:	40012000 	.word	0x40012000
 800a37c:	10000012 	.word	0x10000012
 800a380:	20000000 	.word	0x20000000
 800a384:	431bde83 	.word	0x431bde83

0800a388 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a390:	4b79      	ldr	r3, [pc, #484]	; (800a578 <ADC_Init+0x1f0>)
 800a392:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	431a      	orrs	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6859      	ldr	r1, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	691b      	ldr	r3, [r3, #16]
 800a3c8:	021a      	lsls	r2, r3, #8
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685a      	ldr	r2, [r3, #4]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a3e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	6859      	ldr	r1, [r3, #4]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	689a      	ldr	r2, [r3, #8]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	689a      	ldr	r2, [r3, #8]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	6899      	ldr	r1, [r3, #8]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68da      	ldr	r2, [r3, #12]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	430a      	orrs	r2, r1
 800a414:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41a:	4a58      	ldr	r2, [pc, #352]	; (800a57c <ADC_Init+0x1f4>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d022      	beq.n	800a466 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689a      	ldr	r2, [r3, #8]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a42e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6899      	ldr	r1, [r3, #8]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689a      	ldr	r2, [r3, #8]
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a450:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	6899      	ldr	r1, [r3, #8]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	609a      	str	r2, [r3, #8]
 800a464:	e00f      	b.n	800a486 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	689a      	ldr	r2, [r3, #8]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	689a      	ldr	r2, [r3, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	689a      	ldr	r2, [r3, #8]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f022 0202 	bic.w	r2, r2, #2
 800a494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6899      	ldr	r1, [r3, #8]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	7e1b      	ldrb	r3, [r3, #24]
 800a4a0:	005a      	lsls	r2, r3, #1
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d01b      	beq.n	800a4ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685a      	ldr	r2, [r3, #4]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a4d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6859      	ldr	r1, [r3, #4]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	3b01      	subs	r3, #1
 800a4e0:	035a      	lsls	r2, r3, #13
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	430a      	orrs	r2, r1
 800a4e8:	605a      	str	r2, [r3, #4]
 800a4ea:	e007      	b.n	800a4fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a50a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	69db      	ldr	r3, [r3, #28]
 800a516:	3b01      	subs	r3, #1
 800a518:	051a      	lsls	r2, r3, #20
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	430a      	orrs	r2, r1
 800a520:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689a      	ldr	r2, [r3, #8]
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a530:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	6899      	ldr	r1, [r3, #8]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a53e:	025a      	lsls	r2, r3, #9
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	430a      	orrs	r2, r1
 800a546:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689a      	ldr	r2, [r3, #8]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a556:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	6899      	ldr	r1, [r3, #8]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	029a      	lsls	r2, r3, #10
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	609a      	str	r2, [r3, #8]
}
 800a56c:	bf00      	nop
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr
 800a578:	40012300 	.word	0x40012300
 800a57c:	0f000001 	.word	0x0f000001

0800a580 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a596:	2b00      	cmp	r3, #0
 800a598:	d13c      	bne.n	800a614 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	689b      	ldr	r3, [r3, #8]
 800a5ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d12b      	bne.n	800a60c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d127      	bne.n	800a60c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d006      	beq.n	800a5d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d119      	bne.n	800a60c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0220 	bic.w	r2, r2, #32
 800a5e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d105      	bne.n	800a60c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a604:	f043 0201 	orr.w	r2, r3, #1
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f7ff fd6b 	bl	800a0e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a612:	e00e      	b.n	800a632 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a618:	f003 0310 	and.w	r3, r3, #16
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff fd75 	bl	800a110 <HAL_ADC_ErrorCallback>
}
 800a626:	e004      	b.n	800a632 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	4798      	blx	r3
}
 800a632:	bf00      	nop
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a646:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f7ff fd57 	bl	800a0fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a64e:	bf00      	nop
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a662:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2240      	movs	r2, #64	; 0x40
 800a668:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66e:	f043 0204 	orr.w	r2, r3, #4
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f7ff fd4a 	bl	800a110 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a67c:	bf00      	nop
 800a67e:	3710      	adds	r7, #16
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a684:	b480      	push	{r7}
 800a686:	b085      	sub	sp, #20
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f003 0307 	and.w	r3, r3, #7
 800a692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a694:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <__NVIC_SetPriorityGrouping+0x44>)
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a69a:	68ba      	ldr	r2, [r7, #8]
 800a69c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a6ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a6b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a6b6:	4a04      	ldr	r2, [pc, #16]	; (800a6c8 <__NVIC_SetPriorityGrouping+0x44>)
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	60d3      	str	r3, [r2, #12]
}
 800a6bc:	bf00      	nop
 800a6be:	3714      	adds	r7, #20
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c6:	4770      	bx	lr
 800a6c8:	e000ed00 	.word	0xe000ed00

0800a6cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a6d0:	4b04      	ldr	r3, [pc, #16]	; (800a6e4 <__NVIC_GetPriorityGrouping+0x18>)
 800a6d2:	68db      	ldr	r3, [r3, #12]
 800a6d4:	0a1b      	lsrs	r3, r3, #8
 800a6d6:	f003 0307 	and.w	r3, r3, #7
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr
 800a6e4:	e000ed00 	.word	0xe000ed00

0800a6e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	db0b      	blt.n	800a712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a6fa:	79fb      	ldrb	r3, [r7, #7]
 800a6fc:	f003 021f 	and.w	r2, r3, #31
 800a700:	4907      	ldr	r1, [pc, #28]	; (800a720 <__NVIC_EnableIRQ+0x38>)
 800a702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a706:	095b      	lsrs	r3, r3, #5
 800a708:	2001      	movs	r0, #1
 800a70a:	fa00 f202 	lsl.w	r2, r0, r2
 800a70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	e000e100 	.word	0xe000e100

0800a724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	6039      	str	r1, [r7, #0]
 800a72e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a734:	2b00      	cmp	r3, #0
 800a736:	db0a      	blt.n	800a74e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	490c      	ldr	r1, [pc, #48]	; (800a770 <__NVIC_SetPriority+0x4c>)
 800a73e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a742:	0112      	lsls	r2, r2, #4
 800a744:	b2d2      	uxtb	r2, r2
 800a746:	440b      	add	r3, r1
 800a748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a74c:	e00a      	b.n	800a764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	b2da      	uxtb	r2, r3
 800a752:	4908      	ldr	r1, [pc, #32]	; (800a774 <__NVIC_SetPriority+0x50>)
 800a754:	79fb      	ldrb	r3, [r7, #7]
 800a756:	f003 030f 	and.w	r3, r3, #15
 800a75a:	3b04      	subs	r3, #4
 800a75c:	0112      	lsls	r2, r2, #4
 800a75e:	b2d2      	uxtb	r2, r2
 800a760:	440b      	add	r3, r1
 800a762:	761a      	strb	r2, [r3, #24]
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr
 800a770:	e000e100 	.word	0xe000e100
 800a774:	e000ed00 	.word	0xe000ed00

0800a778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a778:	b480      	push	{r7}
 800a77a:	b089      	sub	sp, #36	; 0x24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	f1c3 0307 	rsb	r3, r3, #7
 800a792:	2b04      	cmp	r3, #4
 800a794:	bf28      	it	cs
 800a796:	2304      	movcs	r3, #4
 800a798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	3304      	adds	r3, #4
 800a79e:	2b06      	cmp	r3, #6
 800a7a0:	d902      	bls.n	800a7a8 <NVIC_EncodePriority+0x30>
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	3b03      	subs	r3, #3
 800a7a6:	e000      	b.n	800a7aa <NVIC_EncodePriority+0x32>
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b0:	69bb      	ldr	r3, [r7, #24]
 800a7b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b6:	43da      	mvns	r2, r3
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	401a      	ands	r2, r3
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a7c0:	f04f 31ff 	mov.w	r1, #4294967295
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7ca:	43d9      	mvns	r1, r3
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a7d0:	4313      	orrs	r3, r2
         );
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3724      	adds	r7, #36	; 0x24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
	...

0800a7e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b082      	sub	sp, #8
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	3b01      	subs	r3, #1
 800a7ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a7f0:	d301      	bcc.n	800a7f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e00f      	b.n	800a816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a7f6:	4a0a      	ldr	r2, [pc, #40]	; (800a820 <SysTick_Config+0x40>)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a7fe:	210f      	movs	r1, #15
 800a800:	f04f 30ff 	mov.w	r0, #4294967295
 800a804:	f7ff ff8e 	bl	800a724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a808:	4b05      	ldr	r3, [pc, #20]	; (800a820 <SysTick_Config+0x40>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <SysTick_Config+0x40>)
 800a810:	2207      	movs	r2, #7
 800a812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a814:	2300      	movs	r3, #0
}
 800a816:	4618      	mov	r0, r3
 800a818:	3708      	adds	r7, #8
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop
 800a820:	e000e010 	.word	0xe000e010

0800a824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff ff29 	bl	800a684 <__NVIC_SetPriorityGrouping>
}
 800a832:	bf00      	nop
 800a834:	3708      	adds	r7, #8
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b086      	sub	sp, #24
 800a83e:	af00      	add	r7, sp, #0
 800a840:	4603      	mov	r3, r0
 800a842:	60b9      	str	r1, [r7, #8]
 800a844:	607a      	str	r2, [r7, #4]
 800a846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a848:	2300      	movs	r3, #0
 800a84a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a84c:	f7ff ff3e 	bl	800a6cc <__NVIC_GetPriorityGrouping>
 800a850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	68b9      	ldr	r1, [r7, #8]
 800a856:	6978      	ldr	r0, [r7, #20]
 800a858:	f7ff ff8e 	bl	800a778 <NVIC_EncodePriority>
 800a85c:	4602      	mov	r2, r0
 800a85e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a862:	4611      	mov	r1, r2
 800a864:	4618      	mov	r0, r3
 800a866:	f7ff ff5d 	bl	800a724 <__NVIC_SetPriority>
}
 800a86a:	bf00      	nop
 800a86c:	3718      	adds	r7, #24
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	4603      	mov	r3, r0
 800a87a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a87c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a880:	4618      	mov	r0, r3
 800a882:	f7ff ff31 	bl	800a6e8 <__NVIC_EnableIRQ>
}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b082      	sub	sp, #8
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff ffa2 	bl	800a7e0 <SysTick_Config>
 800a89c:	4603      	mov	r3, r0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a8b4:	f7ff fab4 	bl	8009e20 <HAL_GetTick>
 800a8b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e099      	b.n	800a9f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2202      	movs	r2, #2
 800a8d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f022 0201 	bic.w	r2, r2, #1
 800a8e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a8e4:	e00f      	b.n	800a906 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a8e6:	f7ff fa9b 	bl	8009e20 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	2b05      	cmp	r3, #5
 800a8f2:	d908      	bls.n	800a906 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2220      	movs	r2, #32
 800a8f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2203      	movs	r2, #3
 800a8fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a902:	2303      	movs	r3, #3
 800a904:	e078      	b.n	800a9f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 0301 	and.w	r3, r3, #1
 800a910:	2b00      	cmp	r3, #0
 800a912:	d1e8      	bne.n	800a8e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a91c:	697a      	ldr	r2, [r7, #20]
 800a91e:	4b38      	ldr	r3, [pc, #224]	; (800aa00 <HAL_DMA_Init+0x158>)
 800a920:	4013      	ands	r3, r2
 800a922:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	685a      	ldr	r2, [r3, #4]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a932:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	691b      	ldr	r3, [r3, #16]
 800a938:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a93e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	699b      	ldr	r3, [r3, #24]
 800a944:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a94a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a1b      	ldr	r3, [r3, #32]
 800a950:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	4313      	orrs	r3, r2
 800a956:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d107      	bne.n	800a970 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a968:	4313      	orrs	r3, r2
 800a96a:	697a      	ldr	r2, [r7, #20]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	f023 0307 	bic.w	r3, r3, #7
 800a986:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98c:	697a      	ldr	r2, [r7, #20]
 800a98e:	4313      	orrs	r3, r2
 800a990:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a996:	2b04      	cmp	r3, #4
 800a998:	d117      	bne.n	800a9ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99e:	697a      	ldr	r2, [r7, #20]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00e      	beq.n	800a9ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 fa9d 	bl	800aeec <DMA_CheckFifoParam>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d008      	beq.n	800a9ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2240      	movs	r2, #64	; 0x40
 800a9bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e016      	b.n	800a9f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 fa54 	bl	800ae80 <DMA_CalcBaseAndBitshift>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9e0:	223f      	movs	r2, #63	; 0x3f
 800a9e2:	409a      	lsls	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3718      	adds	r7, #24
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	f010803f 	.word	0xf010803f

0800aa04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b086      	sub	sp, #24
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	60b9      	str	r1, [r7, #8]
 800aa0e:	607a      	str	r2, [r7, #4]
 800aa10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa12:	2300      	movs	r3, #0
 800aa14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d101      	bne.n	800aa2a <HAL_DMA_Start_IT+0x26>
 800aa26:	2302      	movs	r3, #2
 800aa28:	e040      	b.n	800aaac <HAL_DMA_Start_IT+0xa8>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d12f      	bne.n	800aa9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2202      	movs	r2, #2
 800aa42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f000 f9e6 	bl	800ae24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5c:	223f      	movs	r2, #63	; 0x3f
 800aa5e:	409a      	lsls	r2, r3
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f042 0216 	orr.w	r2, r2, #22
 800aa72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d007      	beq.n	800aa8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	681a      	ldr	r2, [r3, #0]
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f042 0208 	orr.w	r2, r2, #8
 800aa8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	601a      	str	r2, [r3, #0]
 800aa9c:	e005      	b.n	800aaaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800aaaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3718      	adds	r7, #24
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800aac2:	b2db      	uxtb	r3, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d004      	beq.n	800aad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2280      	movs	r2, #128	; 0x80
 800aacc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800aace:	2301      	movs	r3, #1
 800aad0:	e00c      	b.n	800aaec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2205      	movs	r2, #5
 800aad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f022 0201 	bic.w	r2, r2, #1
 800aae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	370c      	adds	r7, #12
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ab04:	4b92      	ldr	r3, [pc, #584]	; (800ad50 <HAL_DMA_IRQHandler+0x258>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a92      	ldr	r2, [pc, #584]	; (800ad54 <HAL_DMA_IRQHandler+0x25c>)
 800ab0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0e:	0a9b      	lsrs	r3, r3, #10
 800ab10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab22:	2208      	movs	r2, #8
 800ab24:	409a      	lsls	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	4013      	ands	r3, r2
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d01a      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d013      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	681a      	ldr	r2, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0204 	bic.w	r2, r2, #4
 800ab4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab50:	2208      	movs	r2, #8
 800ab52:	409a      	lsls	r2, r3
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5c:	f043 0201 	orr.w	r2, r3, #1
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab68:	2201      	movs	r2, #1
 800ab6a:	409a      	lsls	r2, r3
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	4013      	ands	r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d012      	beq.n	800ab9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00b      	beq.n	800ab9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab86:	2201      	movs	r2, #1
 800ab88:	409a      	lsls	r2, r3
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab92:	f043 0202 	orr.w	r2, r3, #2
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9e:	2204      	movs	r2, #4
 800aba0:	409a      	lsls	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	4013      	ands	r3, r2
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d012      	beq.n	800abd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0302 	and.w	r3, r3, #2
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00b      	beq.n	800abd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abbc:	2204      	movs	r2, #4
 800abbe:	409a      	lsls	r2, r3
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abc8:	f043 0204 	orr.w	r2, r3, #4
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abd4:	2210      	movs	r2, #16
 800abd6:	409a      	lsls	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4013      	ands	r3, r2
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d043      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f003 0308 	and.w	r3, r3, #8
 800abea:	2b00      	cmp	r3, #0
 800abec:	d03c      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf2:	2210      	movs	r2, #16
 800abf4:	409a      	lsls	r2, r3
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d018      	beq.n	800ac3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d108      	bne.n	800ac28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d024      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	4798      	blx	r3
 800ac26:	e01f      	b.n	800ac68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01b      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	4798      	blx	r3
 800ac38:	e016      	b.n	800ac68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d107      	bne.n	800ac58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0208 	bic.w	r2, r2, #8
 800ac56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d003      	beq.n	800ac68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	409a      	lsls	r2, r3
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4013      	ands	r3, r2
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 808e 	beq.w	800ad96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0310 	and.w	r3, r3, #16
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	f000 8086 	beq.w	800ad96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8e:	2220      	movs	r2, #32
 800ac90:	409a      	lsls	r2, r3
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ac9c:	b2db      	uxtb	r3, r3
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	d136      	bne.n	800ad10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	681a      	ldr	r2, [r3, #0]
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f022 0216 	bic.w	r2, r2, #22
 800acb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	695a      	ldr	r2, [r3, #20]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d103      	bne.n	800acd2 <HAL_DMA_IRQHandler+0x1da>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d007      	beq.n	800ace2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f022 0208 	bic.w	r2, r2, #8
 800ace0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace6:	223f      	movs	r2, #63	; 0x3f
 800ace8:	409a      	lsls	r2, r3
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d07d      	beq.n	800ae02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	4798      	blx	r3
        }
        return;
 800ad0e:	e078      	b.n	800ae02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d01c      	beq.n	800ad58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d108      	bne.n	800ad3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d030      	beq.n	800ad96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	4798      	blx	r3
 800ad3c:	e02b      	b.n	800ad96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d027      	beq.n	800ad96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	4798      	blx	r3
 800ad4e:	e022      	b.n	800ad96 <HAL_DMA_IRQHandler+0x29e>
 800ad50:	20000000 	.word	0x20000000
 800ad54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10f      	bne.n	800ad86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f022 0210 	bic.w	r2, r2, #16
 800ad74:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d003      	beq.n	800ad96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d032      	beq.n	800ae04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ada2:	f003 0301 	and.w	r3, r3, #1
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d022      	beq.n	800adf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2205      	movs	r2, #5
 800adae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f022 0201 	bic.w	r2, r2, #1
 800adc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	3301      	adds	r3, #1
 800adc6:	60bb      	str	r3, [r7, #8]
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d307      	bcc.n	800adde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f2      	bne.n	800adc2 <HAL_DMA_IRQHandler+0x2ca>
 800addc:	e000      	b.n	800ade0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800adde:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2201      	movs	r2, #1
 800adec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	4798      	blx	r3
 800ae00:	e000      	b.n	800ae04 <HAL_DMA_IRQHandler+0x30c>
        return;
 800ae02:	bf00      	nop
    }
  }
}
 800ae04:	3718      	adds	r7, #24
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop

0800ae0c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b085      	sub	sp, #20
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ae40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	2b40      	cmp	r3, #64	; 0x40
 800ae50:	d108      	bne.n	800ae64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	687a      	ldr	r2, [r7, #4]
 800ae58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68ba      	ldr	r2, [r7, #8]
 800ae60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ae62:	e007      	b.n	800ae74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	68ba      	ldr	r2, [r7, #8]
 800ae6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	60da      	str	r2, [r3, #12]
}
 800ae74:	bf00      	nop
 800ae76:	3714      	adds	r7, #20
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	3b10      	subs	r3, #16
 800ae90:	4a14      	ldr	r2, [pc, #80]	; (800aee4 <DMA_CalcBaseAndBitshift+0x64>)
 800ae92:	fba2 2303 	umull	r2, r3, r2, r3
 800ae96:	091b      	lsrs	r3, r3, #4
 800ae98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ae9a:	4a13      	ldr	r2, [pc, #76]	; (800aee8 <DMA_CalcBaseAndBitshift+0x68>)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	4413      	add	r3, r2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2b03      	cmp	r3, #3
 800aeac:	d909      	bls.n	800aec2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aeb6:	f023 0303 	bic.w	r3, r3, #3
 800aeba:	1d1a      	adds	r2, r3, #4
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	659a      	str	r2, [r3, #88]	; 0x58
 800aec0:	e007      	b.n	800aed2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	aaaaaaab 	.word	0xaaaaaaab
 800aee8:	0801a140 	.word	0x0801a140

0800aeec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	699b      	ldr	r3, [r3, #24]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d11f      	bne.n	800af46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	2b03      	cmp	r3, #3
 800af0a:	d855      	bhi.n	800afb8 <DMA_CheckFifoParam+0xcc>
 800af0c:	a201      	add	r2, pc, #4	; (adr r2, 800af14 <DMA_CheckFifoParam+0x28>)
 800af0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af12:	bf00      	nop
 800af14:	0800af25 	.word	0x0800af25
 800af18:	0800af37 	.word	0x0800af37
 800af1c:	0800af25 	.word	0x0800af25
 800af20:	0800afb9 	.word	0x0800afb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d045      	beq.n	800afbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af34:	e042      	b.n	800afbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af3e:	d13f      	bne.n	800afc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af44:	e03c      	b.n	800afc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	699b      	ldr	r3, [r3, #24]
 800af4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af4e:	d121      	bne.n	800af94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b03      	cmp	r3, #3
 800af54:	d836      	bhi.n	800afc4 <DMA_CheckFifoParam+0xd8>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <DMA_CheckFifoParam+0x70>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800af6d 	.word	0x0800af6d
 800af60:	0800af73 	.word	0x0800af73
 800af64:	0800af6d 	.word	0x0800af6d
 800af68:	0800af85 	.word	0x0800af85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800af6c:	2301      	movs	r3, #1
 800af6e:	73fb      	strb	r3, [r7, #15]
      break;
 800af70:	e02f      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d024      	beq.n	800afc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800af7e:	2301      	movs	r3, #1
 800af80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800af82:	e021      	b.n	800afc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800af8c:	d11e      	bne.n	800afcc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800af92:	e01b      	b.n	800afcc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b02      	cmp	r3, #2
 800af98:	d902      	bls.n	800afa0 <DMA_CheckFifoParam+0xb4>
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d003      	beq.n	800afa6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800af9e:	e018      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800afa0:	2301      	movs	r3, #1
 800afa2:	73fb      	strb	r3, [r7, #15]
      break;
 800afa4:	e015      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00e      	beq.n	800afd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800afb2:	2301      	movs	r3, #1
 800afb4:	73fb      	strb	r3, [r7, #15]
      break;
 800afb6:	e00b      	b.n	800afd0 <DMA_CheckFifoParam+0xe4>
      break;
 800afb8:	bf00      	nop
 800afba:	e00a      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      break;
 800afbc:	bf00      	nop
 800afbe:	e008      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      break;
 800afc0:	bf00      	nop
 800afc2:	e006      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      break;
 800afc4:	bf00      	nop
 800afc6:	e004      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      break;
 800afc8:	bf00      	nop
 800afca:	e002      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      break;   
 800afcc:	bf00      	nop
 800afce:	e000      	b.n	800afd2 <DMA_CheckFifoParam+0xe6>
      break;
 800afd0:	bf00      	nop
    }
  } 
  
  return status; 
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b089      	sub	sp, #36	; 0x24
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800afea:	2300      	movs	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800afee:	2300      	movs	r3, #0
 800aff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aff6:	2300      	movs	r3, #0
 800aff8:	61fb      	str	r3, [r7, #28]
 800affa:	e177      	b.n	800b2ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800affc:	2201      	movs	r2, #1
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	fa02 f303 	lsl.w	r3, r2, r3
 800b004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	4013      	ands	r3, r2
 800b00e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b010:	693a      	ldr	r2, [r7, #16]
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	429a      	cmp	r2, r3
 800b016:	f040 8166 	bne.w	800b2e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	685b      	ldr	r3, [r3, #4]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d00b      	beq.n	800b03a <HAL_GPIO_Init+0x5a>
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d007      	beq.n	800b03a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b02e:	2b11      	cmp	r3, #17
 800b030:	d003      	beq.n	800b03a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	685b      	ldr	r3, [r3, #4]
 800b036:	2b12      	cmp	r3, #18
 800b038:	d130      	bne.n	800b09c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	2203      	movs	r2, #3
 800b046:	fa02 f303 	lsl.w	r3, r2, r3
 800b04a:	43db      	mvns	r3, r3
 800b04c:	69ba      	ldr	r2, [r7, #24]
 800b04e:	4013      	ands	r3, r2
 800b050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	005b      	lsls	r3, r3, #1
 800b05a:	fa02 f303 	lsl.w	r3, r2, r3
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	4313      	orrs	r3, r2
 800b062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b070:	2201      	movs	r2, #1
 800b072:	69fb      	ldr	r3, [r7, #28]
 800b074:	fa02 f303 	lsl.w	r3, r2, r3
 800b078:	43db      	mvns	r3, r3
 800b07a:	69ba      	ldr	r2, [r7, #24]
 800b07c:	4013      	ands	r3, r2
 800b07e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	091b      	lsrs	r3, r3, #4
 800b086:	f003 0201 	and.w	r2, r3, #1
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	fa02 f303 	lsl.w	r3, r2, r3
 800b090:	69ba      	ldr	r2, [r7, #24]
 800b092:	4313      	orrs	r3, r2
 800b094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	69ba      	ldr	r2, [r7, #24]
 800b09a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	005b      	lsls	r3, r3, #1
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ac:	43db      	mvns	r3, r3
 800b0ae:	69ba      	ldr	r2, [r7, #24]
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	689a      	ldr	r2, [r3, #8]
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	005b      	lsls	r3, r3, #1
 800b0bc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d003      	beq.n	800b0dc <HAL_GPIO_Init+0xfc>
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	2b12      	cmp	r3, #18
 800b0da:	d123      	bne.n	800b124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b0dc:	69fb      	ldr	r3, [r7, #28]
 800b0de:	08da      	lsrs	r2, r3, #3
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	3208      	adds	r2, #8
 800b0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	f003 0307 	and.w	r3, r3, #7
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	220f      	movs	r2, #15
 800b0f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f8:	43db      	mvns	r3, r3
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	691a      	ldr	r2, [r3, #16]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	f003 0307 	and.w	r3, r3, #7
 800b10a:	009b      	lsls	r3, r3, #2
 800b10c:	fa02 f303 	lsl.w	r3, r2, r3
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	4313      	orrs	r3, r2
 800b114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	08da      	lsrs	r2, r3, #3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3208      	adds	r2, #8
 800b11e:	69b9      	ldr	r1, [r7, #24]
 800b120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	005b      	lsls	r3, r3, #1
 800b12e:	2203      	movs	r2, #3
 800b130:	fa02 f303 	lsl.w	r3, r2, r3
 800b134:	43db      	mvns	r3, r3
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	4013      	ands	r3, r2
 800b13a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f003 0203 	and.w	r2, r3, #3
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	005b      	lsls	r3, r3, #1
 800b148:	fa02 f303 	lsl.w	r3, r2, r3
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	4313      	orrs	r3, r2
 800b150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	69ba      	ldr	r2, [r7, #24]
 800b156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	f000 80c0 	beq.w	800b2e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	4b65      	ldr	r3, [pc, #404]	; (800b300 <HAL_GPIO_Init+0x320>)
 800b16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b16e:	4a64      	ldr	r2, [pc, #400]	; (800b300 <HAL_GPIO_Init+0x320>)
 800b170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b174:	6453      	str	r3, [r2, #68]	; 0x44
 800b176:	4b62      	ldr	r3, [pc, #392]	; (800b300 <HAL_GPIO_Init+0x320>)
 800b178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b17a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b17e:	60fb      	str	r3, [r7, #12]
 800b180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b182:	4a60      	ldr	r2, [pc, #384]	; (800b304 <HAL_GPIO_Init+0x324>)
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	089b      	lsrs	r3, r3, #2
 800b188:	3302      	adds	r3, #2
 800b18a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b18e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b190:	69fb      	ldr	r3, [r7, #28]
 800b192:	f003 0303 	and.w	r3, r3, #3
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	220f      	movs	r2, #15
 800b19a:	fa02 f303 	lsl.w	r3, r2, r3
 800b19e:	43db      	mvns	r3, r3
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4a57      	ldr	r2, [pc, #348]	; (800b308 <HAL_GPIO_Init+0x328>)
 800b1aa:	4293      	cmp	r3, r2
 800b1ac:	d037      	beq.n	800b21e <HAL_GPIO_Init+0x23e>
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	4a56      	ldr	r2, [pc, #344]	; (800b30c <HAL_GPIO_Init+0x32c>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d031      	beq.n	800b21a <HAL_GPIO_Init+0x23a>
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4a55      	ldr	r2, [pc, #340]	; (800b310 <HAL_GPIO_Init+0x330>)
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	d02b      	beq.n	800b216 <HAL_GPIO_Init+0x236>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	4a54      	ldr	r2, [pc, #336]	; (800b314 <HAL_GPIO_Init+0x334>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d025      	beq.n	800b212 <HAL_GPIO_Init+0x232>
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	4a53      	ldr	r2, [pc, #332]	; (800b318 <HAL_GPIO_Init+0x338>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d01f      	beq.n	800b20e <HAL_GPIO_Init+0x22e>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	4a52      	ldr	r2, [pc, #328]	; (800b31c <HAL_GPIO_Init+0x33c>)
 800b1d2:	4293      	cmp	r3, r2
 800b1d4:	d019      	beq.n	800b20a <HAL_GPIO_Init+0x22a>
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	4a51      	ldr	r2, [pc, #324]	; (800b320 <HAL_GPIO_Init+0x340>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d013      	beq.n	800b206 <HAL_GPIO_Init+0x226>
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	4a50      	ldr	r2, [pc, #320]	; (800b324 <HAL_GPIO_Init+0x344>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d00d      	beq.n	800b202 <HAL_GPIO_Init+0x222>
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	4a4f      	ldr	r2, [pc, #316]	; (800b328 <HAL_GPIO_Init+0x348>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d007      	beq.n	800b1fe <HAL_GPIO_Init+0x21e>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4a4e      	ldr	r2, [pc, #312]	; (800b32c <HAL_GPIO_Init+0x34c>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d101      	bne.n	800b1fa <HAL_GPIO_Init+0x21a>
 800b1f6:	2309      	movs	r3, #9
 800b1f8:	e012      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b1fa:	230a      	movs	r3, #10
 800b1fc:	e010      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b1fe:	2308      	movs	r3, #8
 800b200:	e00e      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b202:	2307      	movs	r3, #7
 800b204:	e00c      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b206:	2306      	movs	r3, #6
 800b208:	e00a      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b20a:	2305      	movs	r3, #5
 800b20c:	e008      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b20e:	2304      	movs	r3, #4
 800b210:	e006      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b212:	2303      	movs	r3, #3
 800b214:	e004      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b216:	2302      	movs	r3, #2
 800b218:	e002      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b21a:	2301      	movs	r3, #1
 800b21c:	e000      	b.n	800b220 <HAL_GPIO_Init+0x240>
 800b21e:	2300      	movs	r3, #0
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	f002 0203 	and.w	r2, r2, #3
 800b226:	0092      	lsls	r2, r2, #2
 800b228:	4093      	lsls	r3, r2
 800b22a:	69ba      	ldr	r2, [r7, #24]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b230:	4934      	ldr	r1, [pc, #208]	; (800b304 <HAL_GPIO_Init+0x324>)
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	089b      	lsrs	r3, r3, #2
 800b236:	3302      	adds	r3, #2
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b23e:	4b3c      	ldr	r3, [pc, #240]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	43db      	mvns	r3, r3
 800b248:	69ba      	ldr	r2, [r7, #24]
 800b24a:	4013      	ands	r3, r2
 800b24c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b256:	2b00      	cmp	r3, #0
 800b258:	d003      	beq.n	800b262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b25a:	69ba      	ldr	r2, [r7, #24]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	4313      	orrs	r3, r2
 800b260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b262:	4a33      	ldr	r2, [pc, #204]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b268:	4b31      	ldr	r3, [pc, #196]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	43db      	mvns	r3, r3
 800b272:	69ba      	ldr	r2, [r7, #24]
 800b274:	4013      	ands	r3, r2
 800b276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d003      	beq.n	800b28c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b28c:	4a28      	ldr	r2, [pc, #160]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b292:	4b27      	ldr	r3, [pc, #156]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b294:	689b      	ldr	r3, [r3, #8]
 800b296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	43db      	mvns	r3, r3
 800b29c:	69ba      	ldr	r2, [r7, #24]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2a2:	683b      	ldr	r3, [r7, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d003      	beq.n	800b2b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b2b6:	4a1e      	ldr	r2, [pc, #120]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b2bc:	4b1c      	ldr	r3, [pc, #112]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	43db      	mvns	r3, r3
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	4013      	ands	r3, r2
 800b2ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d003      	beq.n	800b2e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	4313      	orrs	r3, r2
 800b2de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b2e0:	4a13      	ldr	r2, [pc, #76]	; (800b330 <HAL_GPIO_Init+0x350>)
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	61fb      	str	r3, [r7, #28]
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	2b0f      	cmp	r3, #15
 800b2f0:	f67f ae84 	bls.w	800affc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	3724      	adds	r7, #36	; 0x24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	40023800 	.word	0x40023800
 800b304:	40013800 	.word	0x40013800
 800b308:	40020000 	.word	0x40020000
 800b30c:	40020400 	.word	0x40020400
 800b310:	40020800 	.word	0x40020800
 800b314:	40020c00 	.word	0x40020c00
 800b318:	40021000 	.word	0x40021000
 800b31c:	40021400 	.word	0x40021400
 800b320:	40021800 	.word	0x40021800
 800b324:	40021c00 	.word	0x40021c00
 800b328:	40022000 	.word	0x40022000
 800b32c:	40022400 	.word	0x40022400
 800b330:	40013c00 	.word	0x40013c00

0800b334 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	460b      	mov	r3, r1
 800b33e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	691a      	ldr	r2, [r3, #16]
 800b344:	887b      	ldrh	r3, [r7, #2]
 800b346:	4013      	ands	r3, r2
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b34c:	2301      	movs	r3, #1
 800b34e:	73fb      	strb	r3, [r7, #15]
 800b350:	e001      	b.n	800b356 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b352:	2300      	movs	r3, #0
 800b354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b356:	7bfb      	ldrb	r3, [r7, #15]
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	807b      	strh	r3, [r7, #2]
 800b370:	4613      	mov	r3, r2
 800b372:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b374:	787b      	ldrb	r3, [r7, #1]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d003      	beq.n	800b382 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b37a:	887a      	ldrh	r2, [r7, #2]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b380:	e003      	b.n	800b38a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b382:	887b      	ldrh	r3, [r7, #2]
 800b384:	041a      	lsls	r2, r3, #16
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	619a      	str	r2, [r3, #24]
}
 800b38a:	bf00      	nop
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr
	...

0800b398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e11f      	b.n	800b5ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f7fb fe4a 	bl	8007058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2224      	movs	r2, #36	; 0x24
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0201 	bic.w	r2, r2, #1
 800b3da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b3fc:	f001 f96e 	bl	800c6dc <HAL_RCC_GetPCLK1Freq>
 800b400:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	4a7b      	ldr	r2, [pc, #492]	; (800b5f4 <HAL_I2C_Init+0x25c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d807      	bhi.n	800b41c <HAL_I2C_Init+0x84>
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	4a7a      	ldr	r2, [pc, #488]	; (800b5f8 <HAL_I2C_Init+0x260>)
 800b410:	4293      	cmp	r3, r2
 800b412:	bf94      	ite	ls
 800b414:	2301      	movls	r3, #1
 800b416:	2300      	movhi	r3, #0
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	e006      	b.n	800b42a <HAL_I2C_Init+0x92>
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	4a77      	ldr	r2, [pc, #476]	; (800b5fc <HAL_I2C_Init+0x264>)
 800b420:	4293      	cmp	r3, r2
 800b422:	bf94      	ite	ls
 800b424:	2301      	movls	r3, #1
 800b426:	2300      	movhi	r3, #0
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e0db      	b.n	800b5ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	4a72      	ldr	r2, [pc, #456]	; (800b600 <HAL_I2C_Init+0x268>)
 800b436:	fba2 2303 	umull	r2, r3, r2, r3
 800b43a:	0c9b      	lsrs	r3, r3, #18
 800b43c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	430a      	orrs	r2, r1
 800b450:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6a1b      	ldr	r3, [r3, #32]
 800b458:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	4a64      	ldr	r2, [pc, #400]	; (800b5f4 <HAL_I2C_Init+0x25c>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d802      	bhi.n	800b46c <HAL_I2C_Init+0xd4>
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	3301      	adds	r3, #1
 800b46a:	e009      	b.n	800b480 <HAL_I2C_Init+0xe8>
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b472:	fb02 f303 	mul.w	r3, r2, r3
 800b476:	4a63      	ldr	r2, [pc, #396]	; (800b604 <HAL_I2C_Init+0x26c>)
 800b478:	fba2 2303 	umull	r2, r3, r2, r3
 800b47c:	099b      	lsrs	r3, r3, #6
 800b47e:	3301      	adds	r3, #1
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6812      	ldr	r2, [r2, #0]
 800b484:	430b      	orrs	r3, r1
 800b486:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b492:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	685b      	ldr	r3, [r3, #4]
 800b49a:	4956      	ldr	r1, [pc, #344]	; (800b5f4 <HAL_I2C_Init+0x25c>)
 800b49c:	428b      	cmp	r3, r1
 800b49e:	d80d      	bhi.n	800b4bc <HAL_I2C_Init+0x124>
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	1e59      	subs	r1, r3, #1
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4b4:	2b04      	cmp	r3, #4
 800b4b6:	bf38      	it	cc
 800b4b8:	2304      	movcc	r3, #4
 800b4ba:	e04f      	b.n	800b55c <HAL_I2C_Init+0x1c4>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	689b      	ldr	r3, [r3, #8]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d111      	bne.n	800b4e8 <HAL_I2C_Init+0x150>
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	1e58      	subs	r0, r3, #1
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6859      	ldr	r1, [r3, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	005b      	lsls	r3, r3, #1
 800b4d0:	440b      	add	r3, r1
 800b4d2:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	bf0c      	ite	eq
 800b4e0:	2301      	moveq	r3, #1
 800b4e2:	2300      	movne	r3, #0
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	e012      	b.n	800b50e <HAL_I2C_Init+0x176>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	1e58      	subs	r0, r3, #1
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6859      	ldr	r1, [r3, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	440b      	add	r3, r1
 800b4f6:	0099      	lsls	r1, r3, #2
 800b4f8:	440b      	add	r3, r1
 800b4fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800b4fe:	3301      	adds	r3, #1
 800b500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b504:	2b00      	cmp	r3, #0
 800b506:	bf0c      	ite	eq
 800b508:	2301      	moveq	r3, #1
 800b50a:	2300      	movne	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d001      	beq.n	800b516 <HAL_I2C_Init+0x17e>
 800b512:	2301      	movs	r3, #1
 800b514:	e022      	b.n	800b55c <HAL_I2C_Init+0x1c4>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10e      	bne.n	800b53c <HAL_I2C_Init+0x1a4>
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	1e58      	subs	r0, r3, #1
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6859      	ldr	r1, [r3, #4]
 800b526:	460b      	mov	r3, r1
 800b528:	005b      	lsls	r3, r3, #1
 800b52a:	440b      	add	r3, r1
 800b52c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b530:	3301      	adds	r3, #1
 800b532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b53a:	e00f      	b.n	800b55c <HAL_I2C_Init+0x1c4>
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	1e58      	subs	r0, r3, #1
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6859      	ldr	r1, [r3, #4]
 800b544:	460b      	mov	r3, r1
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	440b      	add	r3, r1
 800b54a:	0099      	lsls	r1, r3, #2
 800b54c:	440b      	add	r3, r1
 800b54e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b552:	3301      	adds	r3, #1
 800b554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b55c:	6879      	ldr	r1, [r7, #4]
 800b55e:	6809      	ldr	r1, [r1, #0]
 800b560:	4313      	orrs	r3, r2
 800b562:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	69da      	ldr	r2, [r3, #28]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	431a      	orrs	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	430a      	orrs	r2, r1
 800b57e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b58a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	6911      	ldr	r1, [r2, #16]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	68d2      	ldr	r2, [r2, #12]
 800b596:	4311      	orrs	r1, r2
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	430b      	orrs	r3, r1
 800b59e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68db      	ldr	r3, [r3, #12]
 800b5a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	695a      	ldr	r2, [r3, #20]
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	430a      	orrs	r2, r1
 800b5ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	f042 0201 	orr.w	r2, r2, #1
 800b5ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3710      	adds	r7, #16
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	000186a0 	.word	0x000186a0
 800b5f8:	001e847f 	.word	0x001e847f
 800b5fc:	003d08ff 	.word	0x003d08ff
 800b600:	431bde83 	.word	0x431bde83
 800b604:	10624dd3 	.word	0x10624dd3

0800b608 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b088      	sub	sp, #32
 800b60c:	af02      	add	r7, sp, #8
 800b60e:	60f8      	str	r0, [r7, #12]
 800b610:	607a      	str	r2, [r7, #4]
 800b612:	461a      	mov	r2, r3
 800b614:	460b      	mov	r3, r1
 800b616:	817b      	strh	r3, [r7, #10]
 800b618:	4613      	mov	r3, r2
 800b61a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b61c:	f7fe fc00 	bl	8009e20 <HAL_GetTick>
 800b620:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	2b20      	cmp	r3, #32
 800b62c:	f040 80e0 	bne.w	800b7f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	9300      	str	r3, [sp, #0]
 800b634:	2319      	movs	r3, #25
 800b636:	2201      	movs	r2, #1
 800b638:	4970      	ldr	r1, [pc, #448]	; (800b7fc <HAL_I2C_Master_Transmit+0x1f4>)
 800b63a:	68f8      	ldr	r0, [r7, #12]
 800b63c:	f000 fc58 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b646:	2302      	movs	r3, #2
 800b648:	e0d3      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b650:	2b01      	cmp	r3, #1
 800b652:	d101      	bne.n	800b658 <HAL_I2C_Master_Transmit+0x50>
 800b654:	2302      	movs	r3, #2
 800b656:	e0cc      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x1ea>
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d007      	beq.n	800b67e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f042 0201 	orr.w	r2, r2, #1
 800b67c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b68c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2221      	movs	r2, #33	; 0x21
 800b692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2210      	movs	r2, #16
 800b69a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	893a      	ldrh	r2, [r7, #8]
 800b6ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	4a50      	ldr	r2, [pc, #320]	; (800b800 <HAL_I2C_Master_Transmit+0x1f8>)
 800b6be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b6c0:	8979      	ldrh	r1, [r7, #10]
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	6a3a      	ldr	r2, [r7, #32]
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f000 fac2 	bl	800bc50 <I2C_MasterRequestWrite>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e08d      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	613b      	str	r3, [r7, #16]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	695b      	ldr	r3, [r3, #20]
 800b6e0:	613b      	str	r3, [r7, #16]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	613b      	str	r3, [r7, #16]
 800b6ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b6ec:	e066      	b.n	800b7bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b6ee:	697a      	ldr	r2, [r7, #20]
 800b6f0:	6a39      	ldr	r1, [r7, #32]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f000 fcd2 	bl	800c09c <I2C_WaitOnTXEFlagUntilTimeout>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00d      	beq.n	800b71a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b702:	2b04      	cmp	r3, #4
 800b704:	d107      	bne.n	800b716 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b714:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b716:	2301      	movs	r3, #1
 800b718:	e06b      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b71e:	781a      	ldrb	r2, [r3, #0]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72a:	1c5a      	adds	r2, r3, #1
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b734:	b29b      	uxth	r3, r3
 800b736:	3b01      	subs	r3, #1
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b742:	3b01      	subs	r3, #1
 800b744:	b29a      	uxth	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695b      	ldr	r3, [r3, #20]
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	2b04      	cmp	r3, #4
 800b756:	d11b      	bne.n	800b790 <HAL_I2C_Master_Transmit+0x188>
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d017      	beq.n	800b790 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b764:	781a      	ldrb	r2, [r3, #0]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	1c5a      	adds	r2, r3, #1
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	3b01      	subs	r3, #1
 800b77e:	b29a      	uxth	r2, r3
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b788:	3b01      	subs	r3, #1
 800b78a:	b29a      	uxth	r2, r3
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b790:	697a      	ldr	r2, [r7, #20]
 800b792:	6a39      	ldr	r1, [r7, #32]
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f000 fcc2 	bl	800c11e <I2C_WaitOnBTFFlagUntilTimeout>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d00d      	beq.n	800b7bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	2b04      	cmp	r3, #4
 800b7a6:	d107      	bne.n	800b7b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	681a      	ldr	r2, [r3, #0]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e01a      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d194      	bne.n	800b6ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	e000      	b.n	800b7f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b7f0:	2302      	movs	r3, #2
  }
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3718      	adds	r7, #24
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	00100002 	.word	0x00100002
 800b800:	ffff0000 	.word	0xffff0000

0800b804 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b08c      	sub	sp, #48	; 0x30
 800b808:	af02      	add	r7, sp, #8
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	461a      	mov	r2, r3
 800b810:	460b      	mov	r3, r1
 800b812:	817b      	strh	r3, [r7, #10]
 800b814:	4613      	mov	r3, r2
 800b816:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b818:	f7fe fb02 	bl	8009e20 <HAL_GetTick>
 800b81c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b824:	b2db      	uxtb	r3, r3
 800b826:	2b20      	cmp	r3, #32
 800b828:	f040 820b 	bne.w	800bc42 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	2319      	movs	r3, #25
 800b832:	2201      	movs	r2, #1
 800b834:	497c      	ldr	r1, [pc, #496]	; (800ba28 <HAL_I2C_Master_Receive+0x224>)
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f000 fb5a 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b842:	2302      	movs	r3, #2
 800b844:	e1fe      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d101      	bne.n	800b854 <HAL_I2C_Master_Receive+0x50>
 800b850:	2302      	movs	r3, #2
 800b852:	e1f7      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b01      	cmp	r3, #1
 800b868:	d007      	beq.n	800b87a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	681a      	ldr	r2, [r3, #0]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f042 0201 	orr.w	r2, r2, #1
 800b878:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b888:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	2222      	movs	r2, #34	; 0x22
 800b88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2210      	movs	r2, #16
 800b896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	893a      	ldrh	r2, [r7, #8]
 800b8aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	4a5c      	ldr	r2, [pc, #368]	; (800ba2c <HAL_I2C_Master_Receive+0x228>)
 800b8ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b8bc:	8979      	ldrh	r1, [r7, #10]
 800b8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 fa46 	bl	800bd54 <I2C_MasterRequestRead>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d001      	beq.n	800b8d2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e1b8      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d113      	bne.n	800b902 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8da:	2300      	movs	r3, #0
 800b8dc:	623b      	str	r3, [r7, #32]
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	695b      	ldr	r3, [r3, #20]
 800b8e4:	623b      	str	r3, [r7, #32]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	623b      	str	r3, [r7, #32]
 800b8ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8fe:	601a      	str	r2, [r3, #0]
 800b900:	e18c      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b906:	2b01      	cmp	r3, #1
 800b908:	d11b      	bne.n	800b942 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b91a:	2300      	movs	r3, #0
 800b91c:	61fb      	str	r3, [r7, #28]
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	695b      	ldr	r3, [r3, #20]
 800b924:	61fb      	str	r3, [r7, #28]
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	699b      	ldr	r3, [r3, #24]
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	e16c      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b946:	2b02      	cmp	r3, #2
 800b948:	d11b      	bne.n	800b982 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b96a:	2300      	movs	r3, #0
 800b96c:	61bb      	str	r3, [r7, #24]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	695b      	ldr	r3, [r3, #20]
 800b974:	61bb      	str	r3, [r7, #24]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	699b      	ldr	r3, [r3, #24]
 800b97c:	61bb      	str	r3, [r7, #24]
 800b97e:	69bb      	ldr	r3, [r7, #24]
 800b980:	e14c      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b990:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	695b      	ldr	r3, [r3, #20]
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	699b      	ldr	r3, [r3, #24]
 800b9a4:	617b      	str	r3, [r7, #20]
 800b9a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b9a8:	e138      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	f200 80f1 	bhi.w	800bb96 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d123      	bne.n	800ba04 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f000 fbed 	bl	800c1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b9cc:	2301      	movs	r3, #1
 800b9ce:	e139      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691a      	ldr	r2, [r3, #16]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9da:	b2d2      	uxtb	r2, r2
 800b9dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9e2:	1c5a      	adds	r2, r3, #1
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9ec:	3b01      	subs	r3, #1
 800b9ee:	b29a      	uxth	r2, r3
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba02:	e10b      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba08:	2b02      	cmp	r3, #2
 800ba0a:	d14e      	bne.n	800baaa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba12:	2200      	movs	r2, #0
 800ba14:	4906      	ldr	r1, [pc, #24]	; (800ba30 <HAL_I2C_Master_Receive+0x22c>)
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 fa6a 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d008      	beq.n	800ba34 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	e10e      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
 800ba26:	bf00      	nop
 800ba28:	00100002 	.word	0x00100002
 800ba2c:	ffff0000 	.word	0xffff0000
 800ba30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	691a      	ldr	r2, [r3, #16]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4e:	b2d2      	uxtb	r2, r2
 800ba50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba60:	3b01      	subs	r3, #1
 800ba62:	b29a      	uxth	r2, r3
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba6c:	b29b      	uxth	r3, r3
 800ba6e:	3b01      	subs	r3, #1
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	691a      	ldr	r2, [r3, #16]
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	b2d2      	uxtb	r2, r2
 800ba82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	1c5a      	adds	r2, r3, #1
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29a      	uxth	r2, r3
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	3b01      	subs	r3, #1
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800baa8:	e0b8      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab0:	2200      	movs	r2, #0
 800bab2:	4966      	ldr	r1, [pc, #408]	; (800bc4c <HAL_I2C_Master_Receive+0x448>)
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 fa1b 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800bac0:	2301      	movs	r3, #1
 800bac2:	e0bf      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bad2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	691a      	ldr	r2, [r3, #16]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bade:	b2d2      	uxtb	r2, r2
 800bae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bae6:	1c5a      	adds	r2, r3, #1
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baf0:	3b01      	subs	r3, #1
 800baf2:	b29a      	uxth	r2, r3
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	3b01      	subs	r3, #1
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	494f      	ldr	r1, [pc, #316]	; (800bc4c <HAL_I2C_Master_Receive+0x448>)
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	f000 f9ed 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e091      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	691a      	ldr	r2, [r3, #16]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3a:	b2d2      	uxtb	r2, r2
 800bb3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb42:	1c5a      	adds	r2, r3, #1
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	b29a      	uxth	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb58:	b29b      	uxth	r3, r3
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	b29a      	uxth	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	691a      	ldr	r2, [r3, #16]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb6c:	b2d2      	uxtb	r2, r2
 800bb6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	b29a      	uxth	r2, r3
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	b29a      	uxth	r2, r3
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb94:	e042      	b.n	800bc1c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bb96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 fb00 	bl	800c1a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e04c      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	691a      	ldr	r2, [r3, #16]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbb4:	b2d2      	uxtb	r2, r2
 800bbb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	1c5a      	adds	r2, r3, #1
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	b29a      	uxth	r2, r3
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	f003 0304 	and.w	r3, r3, #4
 800bbe6:	2b04      	cmp	r3, #4
 800bbe8:	d118      	bne.n	800bc1c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	691a      	ldr	r2, [r3, #16]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf4:	b2d2      	uxtb	r2, r2
 800bbf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfc:	1c5a      	adds	r2, r3, #1
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc06:	3b01      	subs	r3, #1
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	3b01      	subs	r3, #1
 800bc16:	b29a      	uxth	r2, r3
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	f47f aec2 	bne.w	800b9aa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
 800bc40:	e000      	b.n	800bc44 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800bc42:	2302      	movs	r3, #2
  }
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3728      	adds	r7, #40	; 0x28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	00010004 	.word	0x00010004

0800bc50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af02      	add	r7, sp, #8
 800bc56:	60f8      	str	r0, [r7, #12]
 800bc58:	607a      	str	r2, [r7, #4]
 800bc5a:	603b      	str	r3, [r7, #0]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	2b08      	cmp	r3, #8
 800bc6a:	d006      	beq.n	800bc7a <I2C_MasterRequestWrite+0x2a>
 800bc6c:	697b      	ldr	r3, [r7, #20]
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d003      	beq.n	800bc7a <I2C_MasterRequestWrite+0x2a>
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc78:	d108      	bne.n	800bc8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc88:	601a      	str	r2, [r3, #0]
 800bc8a:	e00b      	b.n	800bca4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc90:	2b12      	cmp	r3, #18
 800bc92:	d107      	bne.n	800bca4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bca2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f000 f91d 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d00d      	beq.n	800bcd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcca:	d103      	bne.n	800bcd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e035      	b.n	800bd44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bce0:	d108      	bne.n	800bcf4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bce2:	897b      	ldrh	r3, [r7, #10]
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	461a      	mov	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bcf0:	611a      	str	r2, [r3, #16]
 800bcf2:	e01b      	b.n	800bd2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bcf4:	897b      	ldrh	r3, [r7, #10]
 800bcf6:	11db      	asrs	r3, r3, #7
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	f003 0306 	and.w	r3, r3, #6
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	f063 030f 	orn	r3, r3, #15
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	490e      	ldr	r1, [pc, #56]	; (800bd4c <I2C_MasterRequestWrite+0xfc>)
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 f943 	bl	800bf9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e010      	b.n	800bd44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd22:	897b      	ldrh	r3, [r7, #10]
 800bd24:	b2da      	uxtb	r2, r3
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	4907      	ldr	r1, [pc, #28]	; (800bd50 <I2C_MasterRequestWrite+0x100>)
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 f933 	bl	800bf9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d001      	beq.n	800bd42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e000      	b.n	800bd44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	00010008 	.word	0x00010008
 800bd50:	00010002 	.word	0x00010002

0800bd54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b088      	sub	sp, #32
 800bd58:	af02      	add	r7, sp, #8
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	607a      	str	r2, [r7, #4]
 800bd5e:	603b      	str	r3, [r7, #0]
 800bd60:	460b      	mov	r3, r1
 800bd62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bd78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	2b08      	cmp	r3, #8
 800bd7e:	d006      	beq.n	800bd8e <I2C_MasterRequestRead+0x3a>
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d003      	beq.n	800bd8e <I2C_MasterRequestRead+0x3a>
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bd8c:	d108      	bne.n	800bda0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	e00b      	b.n	800bdb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	2b11      	cmp	r3, #17
 800bda6:	d107      	bne.n	800bdb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f000 f893 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d00d      	beq.n	800bdec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdde:	d103      	bne.n	800bde8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bde6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bde8:	2303      	movs	r3, #3
 800bdea:	e079      	b.n	800bee0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bdf4:	d108      	bne.n	800be08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bdf6:	897b      	ldrh	r3, [r7, #10]
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	f043 0301 	orr.w	r3, r3, #1
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	611a      	str	r2, [r3, #16]
 800be06:	e05f      	b.n	800bec8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800be08:	897b      	ldrh	r3, [r7, #10]
 800be0a:	11db      	asrs	r3, r3, #7
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	f003 0306 	and.w	r3, r3, #6
 800be12:	b2db      	uxtb	r3, r3
 800be14:	f063 030f 	orn	r3, r3, #15
 800be18:	b2da      	uxtb	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	4930      	ldr	r1, [pc, #192]	; (800bee8 <I2C_MasterRequestRead+0x194>)
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f000 f8b9 	bl	800bf9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be2c:	4603      	mov	r3, r0
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d001      	beq.n	800be36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e054      	b.n	800bee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800be36:	897b      	ldrh	r3, [r7, #10]
 800be38:	b2da      	uxtb	r2, r3
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	4929      	ldr	r1, [pc, #164]	; (800beec <I2C_MasterRequestRead+0x198>)
 800be46:	68f8      	ldr	r0, [r7, #12]
 800be48:	f000 f8a9 	bl	800bf9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d001      	beq.n	800be56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800be52:	2301      	movs	r3, #1
 800be54:	e044      	b.n	800bee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be56:	2300      	movs	r3, #0
 800be58:	613b      	str	r3, [r7, #16]
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	695b      	ldr	r3, [r3, #20]
 800be60:	613b      	str	r3, [r7, #16]
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	613b      	str	r3, [r7, #16]
 800be6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	681a      	ldr	r2, [r3, #0]
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800be7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	f000 f831 	bl	800bef0 <I2C_WaitOnFlagUntilTimeout>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00d      	beq.n	800beb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea2:	d103      	bne.n	800beac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800beaa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e017      	b.n	800bee0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800beb0:	897b      	ldrh	r3, [r7, #10]
 800beb2:	11db      	asrs	r3, r3, #7
 800beb4:	b2db      	uxtb	r3, r3
 800beb6:	f003 0306 	and.w	r3, r3, #6
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f063 030e 	orn	r3, r3, #14
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	4907      	ldr	r1, [pc, #28]	; (800beec <I2C_MasterRequestRead+0x198>)
 800bece:	68f8      	ldr	r0, [r7, #12]
 800bed0:	f000 f865 	bl	800bf9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d001      	beq.n	800bede <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e000      	b.n	800bee0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bede:	2300      	movs	r3, #0
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	3718      	adds	r7, #24
 800bee4:	46bd      	mov	sp, r7
 800bee6:	bd80      	pop	{r7, pc}
 800bee8:	00010008 	.word	0x00010008
 800beec:	00010002 	.word	0x00010002

0800bef0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	603b      	str	r3, [r7, #0]
 800befc:	4613      	mov	r3, r2
 800befe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf00:	e025      	b.n	800bf4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf08:	d021      	beq.n	800bf4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf0a:	f7fd ff89 	bl	8009e20 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	683a      	ldr	r2, [r7, #0]
 800bf16:	429a      	cmp	r2, r3
 800bf18:	d302      	bcc.n	800bf20 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d116      	bne.n	800bf4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2220      	movs	r2, #32
 800bf2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3a:	f043 0220 	orr.w	r2, r3, #32
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e023      	b.n	800bf96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	0c1b      	lsrs	r3, r3, #16
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d10d      	bne.n	800bf74 <I2C_WaitOnFlagUntilTimeout+0x84>
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	43da      	mvns	r2, r3
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	4013      	ands	r3, r2
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	bf0c      	ite	eq
 800bf6a:	2301      	moveq	r3, #1
 800bf6c:	2300      	movne	r3, #0
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	461a      	mov	r2, r3
 800bf72:	e00c      	b.n	800bf8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	699b      	ldr	r3, [r3, #24]
 800bf7a:	43da      	mvns	r2, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	4013      	ands	r3, r2
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bf0c      	ite	eq
 800bf86:	2301      	moveq	r3, #1
 800bf88:	2300      	movne	r3, #0
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	79fb      	ldrb	r3, [r7, #7]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d0b6      	beq.n	800bf02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b084      	sub	sp, #16
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	60f8      	str	r0, [r7, #12]
 800bfa6:	60b9      	str	r1, [r7, #8]
 800bfa8:	607a      	str	r2, [r7, #4]
 800bfaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bfac:	e051      	b.n	800c052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	695b      	ldr	r3, [r3, #20]
 800bfb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bfbc:	d123      	bne.n	800c006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681a      	ldr	r2, [r3, #0]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bfcc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bfd6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff2:	f043 0204 	orr.w	r2, r3, #4
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2200      	movs	r2, #0
 800bffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e046      	b.n	800c094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c00c:	d021      	beq.n	800c052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c00e:	f7fd ff07 	bl	8009e20 <HAL_GetTick>
 800c012:	4602      	mov	r2, r0
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	1ad3      	subs	r3, r2, r3
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d302      	bcc.n	800c024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d116      	bne.n	800c052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	2200      	movs	r2, #0
 800c028:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2220      	movs	r2, #32
 800c02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2200      	movs	r2, #0
 800c036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c03e:	f043 0220 	orr.w	r2, r3, #32
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	e020      	b.n	800c094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	0c1b      	lsrs	r3, r3, #16
 800c056:	b2db      	uxtb	r3, r3
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d10c      	bne.n	800c076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	43da      	mvns	r2, r3
 800c064:	68bb      	ldr	r3, [r7, #8]
 800c066:	4013      	ands	r3, r2
 800c068:	b29b      	uxth	r3, r3
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	bf14      	ite	ne
 800c06e:	2301      	movne	r3, #1
 800c070:	2300      	moveq	r3, #0
 800c072:	b2db      	uxtb	r3, r3
 800c074:	e00b      	b.n	800c08e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	699b      	ldr	r3, [r3, #24]
 800c07c:	43da      	mvns	r2, r3
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	4013      	ands	r3, r2
 800c082:	b29b      	uxth	r3, r3
 800c084:	2b00      	cmp	r3, #0
 800c086:	bf14      	ite	ne
 800c088:	2301      	movne	r3, #1
 800c08a:	2300      	moveq	r3, #0
 800c08c:	b2db      	uxtb	r3, r3
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d18d      	bne.n	800bfae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800c092:	2300      	movs	r3, #0
}
 800c094:	4618      	mov	r0, r3
 800c096:	3710      	adds	r7, #16
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}

0800c09c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c0a8:	e02d      	b.n	800c106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f000 f8ce 	bl	800c24c <I2C_IsAcknowledgeFailed>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d001      	beq.n	800c0ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	e02d      	b.n	800c116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c0:	d021      	beq.n	800c106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0c2:	f7fd fead 	bl	8009e20 <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c0d2:	68bb      	ldr	r3, [r7, #8]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d116      	bne.n	800c106 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	2220      	movs	r2, #32
 800c0e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	2200      	movs	r2, #0
 800c0ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0f2:	f043 0220 	orr.w	r2, r3, #32
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c102:	2301      	movs	r3, #1
 800c104:	e007      	b.n	800c116 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c110:	2b80      	cmp	r3, #128	; 0x80
 800c112:	d1ca      	bne.n	800c0aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c114:	2300      	movs	r3, #0
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}

0800c11e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c11e:	b580      	push	{r7, lr}
 800c120:	b084      	sub	sp, #16
 800c122:	af00      	add	r7, sp, #0
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	60b9      	str	r1, [r7, #8]
 800c128:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c12a:	e02d      	b.n	800c188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f000 f88d 	bl	800c24c <I2C_IsAcknowledgeFailed>
 800c132:	4603      	mov	r3, r0
 800c134:	2b00      	cmp	r3, #0
 800c136:	d001      	beq.n	800c13c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	e02d      	b.n	800c198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c142:	d021      	beq.n	800c188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c144:	f7fd fe6c 	bl	8009e20 <HAL_GetTick>
 800c148:	4602      	mov	r2, r0
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	1ad3      	subs	r3, r2, r3
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	429a      	cmp	r2, r3
 800c152:	d302      	bcc.n	800c15a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d116      	bne.n	800c188 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	2220      	movs	r2, #32
 800c164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	2200      	movs	r2, #0
 800c16c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c174:	f043 0220 	orr.w	r2, r3, #32
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e007      	b.n	800c198 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	695b      	ldr	r3, [r3, #20]
 800c18e:	f003 0304 	and.w	r3, r3, #4
 800c192:	2b04      	cmp	r3, #4
 800c194:	d1ca      	bne.n	800c12c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c196:	2300      	movs	r3, #0
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c1ac:	e042      	b.n	800c234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	695b      	ldr	r3, [r3, #20]
 800c1b4:	f003 0310 	and.w	r3, r3, #16
 800c1b8:	2b10      	cmp	r3, #16
 800c1ba:	d119      	bne.n	800c1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f06f 0210 	mvn.w	r2, #16
 800c1c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2220      	movs	r2, #32
 800c1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c1ec:	2301      	movs	r3, #1
 800c1ee:	e029      	b.n	800c244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1f0:	f7fd fe16 	bl	8009e20 <HAL_GetTick>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	68ba      	ldr	r2, [r7, #8]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d302      	bcc.n	800c206 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d116      	bne.n	800c234 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2200      	movs	r2, #0
 800c20a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2220      	movs	r2, #32
 800c210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c220:	f043 0220 	orr.w	r2, r3, #32
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e007      	b.n	800c244 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23e:	2b40      	cmp	r3, #64	; 0x40
 800c240:	d1b5      	bne.n	800c1ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3710      	adds	r7, #16
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	695b      	ldr	r3, [r3, #20]
 800c25a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c25e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c262:	d11b      	bne.n	800c29c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c26c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2220      	movs	r2, #32
 800c278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c288:	f043 0204 	orr.w	r2, r3, #4
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c298:	2301      	movs	r3, #1
 800c29a:	e000      	b.n	800c29e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	370c      	adds	r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
	...

0800c2ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	603b      	str	r3, [r7, #0]
 800c2ba:	4b20      	ldr	r3, [pc, #128]	; (800c33c <HAL_PWREx_EnableOverDrive+0x90>)
 800c2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2be:	4a1f      	ldr	r2, [pc, #124]	; (800c33c <HAL_PWREx_EnableOverDrive+0x90>)
 800c2c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c2c4:	6413      	str	r3, [r2, #64]	; 0x40
 800c2c6:	4b1d      	ldr	r3, [pc, #116]	; (800c33c <HAL_PWREx_EnableOverDrive+0x90>)
 800c2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2ce:	603b      	str	r3, [r7, #0]
 800c2d0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c2d2:	4b1b      	ldr	r3, [pc, #108]	; (800c340 <HAL_PWREx_EnableOverDrive+0x94>)
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c2d8:	f7fd fda2 	bl	8009e20 <HAL_GetTick>
 800c2dc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2de:	e009      	b.n	800c2f4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c2e0:	f7fd fd9e 	bl	8009e20 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2ee:	d901      	bls.n	800c2f4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e01f      	b.n	800c334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c2f4:	4b13      	ldr	r3, [pc, #76]	; (800c344 <HAL_PWREx_EnableOverDrive+0x98>)
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c300:	d1ee      	bne.n	800c2e0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c302:	4b11      	ldr	r3, [pc, #68]	; (800c348 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c304:	2201      	movs	r2, #1
 800c306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c308:	f7fd fd8a 	bl	8009e20 <HAL_GetTick>
 800c30c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c30e:	e009      	b.n	800c324 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c310:	f7fd fd86 	bl	8009e20 <HAL_GetTick>
 800c314:	4602      	mov	r2, r0
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c31e:	d901      	bls.n	800c324 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c320:	2303      	movs	r3, #3
 800c322:	e007      	b.n	800c334 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c324:	4b07      	ldr	r3, [pc, #28]	; (800c344 <HAL_PWREx_EnableOverDrive+0x98>)
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c32c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c330:	d1ee      	bne.n	800c310 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c332:	2300      	movs	r3, #0
}
 800c334:	4618      	mov	r0, r3
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	40023800 	.word	0x40023800
 800c340:	420e0040 	.word	0x420e0040
 800c344:	40007000 	.word	0x40007000
 800c348:	420e0044 	.word	0x420e0044

0800c34c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d101      	bne.n	800c360 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c35c:	2301      	movs	r3, #1
 800c35e:	e0cc      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c360:	4b68      	ldr	r3, [pc, #416]	; (800c504 <HAL_RCC_ClockConfig+0x1b8>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 030f 	and.w	r3, r3, #15
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d90c      	bls.n	800c388 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c36e:	4b65      	ldr	r3, [pc, #404]	; (800c504 <HAL_RCC_ClockConfig+0x1b8>)
 800c370:	683a      	ldr	r2, [r7, #0]
 800c372:	b2d2      	uxtb	r2, r2
 800c374:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c376:	4b63      	ldr	r3, [pc, #396]	; (800c504 <HAL_RCC_ClockConfig+0x1b8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f003 030f 	and.w	r3, r3, #15
 800c37e:	683a      	ldr	r2, [r7, #0]
 800c380:	429a      	cmp	r2, r3
 800c382:	d001      	beq.n	800c388 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	e0b8      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f003 0302 	and.w	r3, r3, #2
 800c390:	2b00      	cmp	r3, #0
 800c392:	d020      	beq.n	800c3d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 0304 	and.w	r3, r3, #4
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d005      	beq.n	800c3ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c3a0:	4b59      	ldr	r3, [pc, #356]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	4a58      	ldr	r2, [pc, #352]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c3aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0308 	and.w	r3, r3, #8
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d005      	beq.n	800c3c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c3b8:	4b53      	ldr	r3, [pc, #332]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	4a52      	ldr	r2, [pc, #328]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c3c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c3c4:	4b50      	ldr	r3, [pc, #320]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3c6:	689b      	ldr	r3, [r3, #8]
 800c3c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	494d      	ldr	r1, [pc, #308]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3d2:	4313      	orrs	r3, r2
 800c3d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d044      	beq.n	800c46c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	d107      	bne.n	800c3fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c3ea:	4b47      	ldr	r3, [pc, #284]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d119      	bne.n	800c42a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	e07f      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d003      	beq.n	800c40a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c406:	2b03      	cmp	r3, #3
 800c408:	d107      	bne.n	800c41a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c40a:	4b3f      	ldr	r3, [pc, #252]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c412:	2b00      	cmp	r3, #0
 800c414:	d109      	bne.n	800c42a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	e06f      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c41a:	4b3b      	ldr	r3, [pc, #236]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0302 	and.w	r3, r3, #2
 800c422:	2b00      	cmp	r3, #0
 800c424:	d101      	bne.n	800c42a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c426:	2301      	movs	r3, #1
 800c428:	e067      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c42a:	4b37      	ldr	r3, [pc, #220]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c42c:	689b      	ldr	r3, [r3, #8]
 800c42e:	f023 0203 	bic.w	r2, r3, #3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	685b      	ldr	r3, [r3, #4]
 800c436:	4934      	ldr	r1, [pc, #208]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c438:	4313      	orrs	r3, r2
 800c43a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c43c:	f7fd fcf0 	bl	8009e20 <HAL_GetTick>
 800c440:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c442:	e00a      	b.n	800c45a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c444:	f7fd fcec 	bl	8009e20 <HAL_GetTick>
 800c448:	4602      	mov	r2, r0
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	1ad3      	subs	r3, r2, r3
 800c44e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c452:	4293      	cmp	r3, r2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e04f      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c45a:	4b2b      	ldr	r3, [pc, #172]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c45c:	689b      	ldr	r3, [r3, #8]
 800c45e:	f003 020c 	and.w	r2, r3, #12
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	009b      	lsls	r3, r3, #2
 800c468:	429a      	cmp	r2, r3
 800c46a:	d1eb      	bne.n	800c444 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c46c:	4b25      	ldr	r3, [pc, #148]	; (800c504 <HAL_RCC_ClockConfig+0x1b8>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	f003 030f 	and.w	r3, r3, #15
 800c474:	683a      	ldr	r2, [r7, #0]
 800c476:	429a      	cmp	r2, r3
 800c478:	d20c      	bcs.n	800c494 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c47a:	4b22      	ldr	r3, [pc, #136]	; (800c504 <HAL_RCC_ClockConfig+0x1b8>)
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	b2d2      	uxtb	r2, r2
 800c480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c482:	4b20      	ldr	r3, [pc, #128]	; (800c504 <HAL_RCC_ClockConfig+0x1b8>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 030f 	and.w	r3, r3, #15
 800c48a:	683a      	ldr	r2, [r7, #0]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d001      	beq.n	800c494 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e032      	b.n	800c4fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d008      	beq.n	800c4b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c4a0:	4b19      	ldr	r3, [pc, #100]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	4916      	ldr	r1, [pc, #88]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0308 	and.w	r3, r3, #8
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d009      	beq.n	800c4d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c4be:	4b12      	ldr	r3, [pc, #72]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	490e      	ldr	r1, [pc, #56]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c4d2:	f000 f821 	bl	800c518 <HAL_RCC_GetSysClockFreq>
 800c4d6:	4601      	mov	r1, r0
 800c4d8:	4b0b      	ldr	r3, [pc, #44]	; (800c508 <HAL_RCC_ClockConfig+0x1bc>)
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	091b      	lsrs	r3, r3, #4
 800c4de:	f003 030f 	and.w	r3, r3, #15
 800c4e2:	4a0a      	ldr	r2, [pc, #40]	; (800c50c <HAL_RCC_ClockConfig+0x1c0>)
 800c4e4:	5cd3      	ldrb	r3, [r2, r3]
 800c4e6:	fa21 f303 	lsr.w	r3, r1, r3
 800c4ea:	4a09      	ldr	r2, [pc, #36]	; (800c510 <HAL_RCC_ClockConfig+0x1c4>)
 800c4ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c4ee:	4b09      	ldr	r3, [pc, #36]	; (800c514 <HAL_RCC_ClockConfig+0x1c8>)
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fd fc50 	bl	8009d98 <HAL_InitTick>

  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3710      	adds	r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop
 800c504:	40023c00 	.word	0x40023c00
 800c508:	40023800 	.word	0x40023800
 800c50c:	0801a128 	.word	0x0801a128
 800c510:	20000000 	.word	0x20000000
 800c514:	20000004 	.word	0x20000004

0800c518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c51a:	b085      	sub	sp, #20
 800c51c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c51e:	2300      	movs	r3, #0
 800c520:	607b      	str	r3, [r7, #4]
 800c522:	2300      	movs	r3, #0
 800c524:	60fb      	str	r3, [r7, #12]
 800c526:	2300      	movs	r3, #0
 800c528:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c52e:	4b63      	ldr	r3, [pc, #396]	; (800c6bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c530:	689b      	ldr	r3, [r3, #8]
 800c532:	f003 030c 	and.w	r3, r3, #12
 800c536:	2b04      	cmp	r3, #4
 800c538:	d007      	beq.n	800c54a <HAL_RCC_GetSysClockFreq+0x32>
 800c53a:	2b08      	cmp	r3, #8
 800c53c:	d008      	beq.n	800c550 <HAL_RCC_GetSysClockFreq+0x38>
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f040 80b4 	bne.w	800c6ac <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c544:	4b5e      	ldr	r3, [pc, #376]	; (800c6c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c546:	60bb      	str	r3, [r7, #8]
       break;
 800c548:	e0b3      	b.n	800c6b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c54a:	4b5d      	ldr	r3, [pc, #372]	; (800c6c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c54c:	60bb      	str	r3, [r7, #8]
      break;
 800c54e:	e0b0      	b.n	800c6b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c550:	4b5a      	ldr	r3, [pc, #360]	; (800c6bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c558:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c55a:	4b58      	ldr	r3, [pc, #352]	; (800c6bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d04a      	beq.n	800c5fc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c566:	4b55      	ldr	r3, [pc, #340]	; (800c6bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	099b      	lsrs	r3, r3, #6
 800c56c:	f04f 0400 	mov.w	r4, #0
 800c570:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c574:	f04f 0200 	mov.w	r2, #0
 800c578:	ea03 0501 	and.w	r5, r3, r1
 800c57c:	ea04 0602 	and.w	r6, r4, r2
 800c580:	4629      	mov	r1, r5
 800c582:	4632      	mov	r2, r6
 800c584:	f04f 0300 	mov.w	r3, #0
 800c588:	f04f 0400 	mov.w	r4, #0
 800c58c:	0154      	lsls	r4, r2, #5
 800c58e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c592:	014b      	lsls	r3, r1, #5
 800c594:	4619      	mov	r1, r3
 800c596:	4622      	mov	r2, r4
 800c598:	1b49      	subs	r1, r1, r5
 800c59a:	eb62 0206 	sbc.w	r2, r2, r6
 800c59e:	f04f 0300 	mov.w	r3, #0
 800c5a2:	f04f 0400 	mov.w	r4, #0
 800c5a6:	0194      	lsls	r4, r2, #6
 800c5a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c5ac:	018b      	lsls	r3, r1, #6
 800c5ae:	1a5b      	subs	r3, r3, r1
 800c5b0:	eb64 0402 	sbc.w	r4, r4, r2
 800c5b4:	f04f 0100 	mov.w	r1, #0
 800c5b8:	f04f 0200 	mov.w	r2, #0
 800c5bc:	00e2      	lsls	r2, r4, #3
 800c5be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c5c2:	00d9      	lsls	r1, r3, #3
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4614      	mov	r4, r2
 800c5c8:	195b      	adds	r3, r3, r5
 800c5ca:	eb44 0406 	adc.w	r4, r4, r6
 800c5ce:	f04f 0100 	mov.w	r1, #0
 800c5d2:	f04f 0200 	mov.w	r2, #0
 800c5d6:	02a2      	lsls	r2, r4, #10
 800c5d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c5dc:	0299      	lsls	r1, r3, #10
 800c5de:	460b      	mov	r3, r1
 800c5e0:	4614      	mov	r4, r2
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	4621      	mov	r1, r4
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f04f 0400 	mov.w	r4, #0
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	4623      	mov	r3, r4
 800c5f0:	f7f4 fb62 	bl	8000cb8 <__aeabi_uldivmod>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	60fb      	str	r3, [r7, #12]
 800c5fa:	e049      	b.n	800c690 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c5fc:	4b2f      	ldr	r3, [pc, #188]	; (800c6bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	099b      	lsrs	r3, r3, #6
 800c602:	f04f 0400 	mov.w	r4, #0
 800c606:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c60a:	f04f 0200 	mov.w	r2, #0
 800c60e:	ea03 0501 	and.w	r5, r3, r1
 800c612:	ea04 0602 	and.w	r6, r4, r2
 800c616:	4629      	mov	r1, r5
 800c618:	4632      	mov	r2, r6
 800c61a:	f04f 0300 	mov.w	r3, #0
 800c61e:	f04f 0400 	mov.w	r4, #0
 800c622:	0154      	lsls	r4, r2, #5
 800c624:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c628:	014b      	lsls	r3, r1, #5
 800c62a:	4619      	mov	r1, r3
 800c62c:	4622      	mov	r2, r4
 800c62e:	1b49      	subs	r1, r1, r5
 800c630:	eb62 0206 	sbc.w	r2, r2, r6
 800c634:	f04f 0300 	mov.w	r3, #0
 800c638:	f04f 0400 	mov.w	r4, #0
 800c63c:	0194      	lsls	r4, r2, #6
 800c63e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c642:	018b      	lsls	r3, r1, #6
 800c644:	1a5b      	subs	r3, r3, r1
 800c646:	eb64 0402 	sbc.w	r4, r4, r2
 800c64a:	f04f 0100 	mov.w	r1, #0
 800c64e:	f04f 0200 	mov.w	r2, #0
 800c652:	00e2      	lsls	r2, r4, #3
 800c654:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c658:	00d9      	lsls	r1, r3, #3
 800c65a:	460b      	mov	r3, r1
 800c65c:	4614      	mov	r4, r2
 800c65e:	195b      	adds	r3, r3, r5
 800c660:	eb44 0406 	adc.w	r4, r4, r6
 800c664:	f04f 0100 	mov.w	r1, #0
 800c668:	f04f 0200 	mov.w	r2, #0
 800c66c:	02a2      	lsls	r2, r4, #10
 800c66e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c672:	0299      	lsls	r1, r3, #10
 800c674:	460b      	mov	r3, r1
 800c676:	4614      	mov	r4, r2
 800c678:	4618      	mov	r0, r3
 800c67a:	4621      	mov	r1, r4
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f04f 0400 	mov.w	r4, #0
 800c682:	461a      	mov	r2, r3
 800c684:	4623      	mov	r3, r4
 800c686:	f7f4 fb17 	bl	8000cb8 <__aeabi_uldivmod>
 800c68a:	4603      	mov	r3, r0
 800c68c:	460c      	mov	r4, r1
 800c68e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c690:	4b0a      	ldr	r3, [pc, #40]	; (800c6bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	0c1b      	lsrs	r3, r3, #16
 800c696:	f003 0303 	and.w	r3, r3, #3
 800c69a:	3301      	adds	r3, #1
 800c69c:	005b      	lsls	r3, r3, #1
 800c69e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6a8:	60bb      	str	r3, [r7, #8]
      break;
 800c6aa:	e002      	b.n	800c6b2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c6ac:	4b04      	ldr	r3, [pc, #16]	; (800c6c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c6ae:	60bb      	str	r3, [r7, #8]
      break;
 800c6b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c6b2:	68bb      	ldr	r3, [r7, #8]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3714      	adds	r7, #20
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6bc:	40023800 	.word	0x40023800
 800c6c0:	00f42400 	.word	0x00f42400

0800c6c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c6c8:	4b03      	ldr	r3, [pc, #12]	; (800c6d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	20000000 	.word	0x20000000

0800c6dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c6e0:	f7ff fff0 	bl	800c6c4 <HAL_RCC_GetHCLKFreq>
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	4b05      	ldr	r3, [pc, #20]	; (800c6fc <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	0a9b      	lsrs	r3, r3, #10
 800c6ec:	f003 0307 	and.w	r3, r3, #7
 800c6f0:	4a03      	ldr	r2, [pc, #12]	; (800c700 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6f2:	5cd3      	ldrb	r3, [r2, r3]
 800c6f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	40023800 	.word	0x40023800
 800c700:	0801a138 	.word	0x0801a138

0800c704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c708:	f7ff ffdc 	bl	800c6c4 <HAL_RCC_GetHCLKFreq>
 800c70c:	4601      	mov	r1, r0
 800c70e:	4b05      	ldr	r3, [pc, #20]	; (800c724 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c710:	689b      	ldr	r3, [r3, #8]
 800c712:	0b5b      	lsrs	r3, r3, #13
 800c714:	f003 0307 	and.w	r3, r3, #7
 800c718:	4a03      	ldr	r2, [pc, #12]	; (800c728 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c71a:	5cd3      	ldrb	r3, [r2, r3]
 800c71c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c720:	4618      	mov	r0, r3
 800c722:	bd80      	pop	{r7, pc}
 800c724:	40023800 	.word	0x40023800
 800c728:	0801a138 	.word	0x0801a138

0800c72c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b088      	sub	sp, #32
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c734:	2300      	movs	r3, #0
 800c736:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c738:	2300      	movs	r3, #0
 800c73a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c73c:	2300      	movs	r3, #0
 800c73e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c740:	2300      	movs	r3, #0
 800c742:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c744:	2300      	movs	r3, #0
 800c746:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c750:	2b00      	cmp	r3, #0
 800c752:	d00a      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c754:	4b66      	ldr	r3, [pc, #408]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c756:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c75a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c762:	4963      	ldr	r1, [pc, #396]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c764:	4313      	orrs	r3, r2
 800c766:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c776:	4b5e      	ldr	r3, [pc, #376]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c77c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c784:	495a      	ldr	r1, [pc, #360]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c786:	4313      	orrs	r3, r2
 800c788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 0301 	and.w	r3, r3, #1
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10b      	bne.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d105      	bne.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d075      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c7b0:	4b50      	ldr	r3, [pc, #320]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c7b6:	f7fd fb33 	bl	8009e20 <HAL_GetTick>
 800c7ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7bc:	e008      	b.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c7be:	f7fd fb2f 	bl	8009e20 <HAL_GetTick>
 800c7c2:	4602      	mov	r2, r0
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	1ad3      	subs	r3, r2, r3
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d901      	bls.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c7cc:	2303      	movs	r3, #3
 800c7ce:	e1dc      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c7d0:	4b47      	ldr	r3, [pc, #284]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d1f0      	bne.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d009      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	685b      	ldr	r3, [r3, #4]
 800c7ec:	019a      	lsls	r2, r3, #6
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	689b      	ldr	r3, [r3, #8]
 800c7f2:	071b      	lsls	r3, r3, #28
 800c7f4:	493e      	ldr	r1, [pc, #248]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 0302 	and.w	r3, r3, #2
 800c804:	2b00      	cmp	r3, #0
 800c806:	d01f      	beq.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c808:	4b39      	ldr	r3, [pc, #228]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c80e:	0f1b      	lsrs	r3, r3, #28
 800c810:	f003 0307 	and.w	r3, r3, #7
 800c814:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	685b      	ldr	r3, [r3, #4]
 800c81a:	019a      	lsls	r2, r3, #6
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	68db      	ldr	r3, [r3, #12]
 800c820:	061b      	lsls	r3, r3, #24
 800c822:	431a      	orrs	r2, r3
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	071b      	lsls	r3, r3, #28
 800c828:	4931      	ldr	r1, [pc, #196]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c82a:	4313      	orrs	r3, r2
 800c82c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c830:	4b2f      	ldr	r3, [pc, #188]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c836:	f023 021f 	bic.w	r2, r3, #31
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	3b01      	subs	r3, #1
 800c840:	492b      	ldr	r1, [pc, #172]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c842:	4313      	orrs	r3, r2
 800c844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00d      	beq.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	019a      	lsls	r2, r3, #6
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68db      	ldr	r3, [r3, #12]
 800c85e:	061b      	lsls	r3, r3, #24
 800c860:	431a      	orrs	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	071b      	lsls	r3, r3, #28
 800c868:	4921      	ldr	r1, [pc, #132]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c86a:	4313      	orrs	r3, r2
 800c86c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c870:	4b20      	ldr	r3, [pc, #128]	; (800c8f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c872:	2201      	movs	r2, #1
 800c874:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c876:	f7fd fad3 	bl	8009e20 <HAL_GetTick>
 800c87a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c87c:	e008      	b.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c87e:	f7fd facf 	bl	8009e20 <HAL_GetTick>
 800c882:	4602      	mov	r2, r0
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	1ad3      	subs	r3, r2, r3
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d901      	bls.n	800c890 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c88c:	2303      	movs	r3, #3
 800c88e:	e17c      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c890:	4b17      	ldr	r3, [pc, #92]	; (800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d0f0      	beq.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d112      	bne.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d10c      	bne.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 80ce 	beq.w	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c8c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8ca:	f040 80c8 	bne.w	800ca5e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8d4:	f7fd faa4 	bl	8009e20 <HAL_GetTick>
 800c8d8:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c8da:	e00f      	b.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c8dc:	f7fd faa0 	bl	8009e20 <HAL_GetTick>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	69fb      	ldr	r3, [r7, #28]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d908      	bls.n	800c8fc <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8ea:	2303      	movs	r3, #3
 800c8ec:	e14d      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c8ee:	bf00      	nop
 800c8f0:	40023800 	.word	0x40023800
 800c8f4:	42470068 	.word	0x42470068
 800c8f8:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c8fc:	4ba5      	ldr	r3, [pc, #660]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c904:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c908:	d0e8      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f003 0304 	and.w	r3, r3, #4
 800c912:	2b00      	cmp	r3, #0
 800c914:	d02e      	beq.n	800c974 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c916:	4b9f      	ldr	r3, [pc, #636]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c91c:	0c1b      	lsrs	r3, r3, #16
 800c91e:	f003 0303 	and.w	r3, r3, #3
 800c922:	3301      	adds	r3, #1
 800c924:	005b      	lsls	r3, r3, #1
 800c926:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c928:	4b9a      	ldr	r3, [pc, #616]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c92e:	0f1b      	lsrs	r3, r3, #28
 800c930:	f003 0307 	and.w	r3, r3, #7
 800c934:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	691b      	ldr	r3, [r3, #16]
 800c93a:	019a      	lsls	r2, r3, #6
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	085b      	lsrs	r3, r3, #1
 800c940:	3b01      	subs	r3, #1
 800c942:	041b      	lsls	r3, r3, #16
 800c944:	431a      	orrs	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	699b      	ldr	r3, [r3, #24]
 800c94a:	061b      	lsls	r3, r3, #24
 800c94c:	431a      	orrs	r2, r3
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	071b      	lsls	r3, r3, #28
 800c952:	4990      	ldr	r1, [pc, #576]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c954:	4313      	orrs	r3, r2
 800c956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c95a:	4b8e      	ldr	r3, [pc, #568]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c95c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c960:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c968:	3b01      	subs	r3, #1
 800c96a:	021b      	lsls	r3, r3, #8
 800c96c:	4989      	ldr	r1, [pc, #548]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c96e:	4313      	orrs	r3, r2
 800c970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 0308 	and.w	r3, r3, #8
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d02c      	beq.n	800c9da <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c980:	4b84      	ldr	r3, [pc, #528]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c986:	0c1b      	lsrs	r3, r3, #16
 800c988:	f003 0303 	and.w	r3, r3, #3
 800c98c:	3301      	adds	r3, #1
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c992:	4b80      	ldr	r3, [pc, #512]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c998:	0e1b      	lsrs	r3, r3, #24
 800c99a:	f003 030f 	and.w	r3, r3, #15
 800c99e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	019a      	lsls	r2, r3, #6
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	085b      	lsrs	r3, r3, #1
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	041b      	lsls	r3, r3, #16
 800c9ae:	431a      	orrs	r2, r3
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	061b      	lsls	r3, r3, #24
 800c9b4:	431a      	orrs	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	69db      	ldr	r3, [r3, #28]
 800c9ba:	071b      	lsls	r3, r3, #28
 800c9bc:	4975      	ldr	r1, [pc, #468]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c9c4:	4b73      	ldr	r3, [pc, #460]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d2:	4970      	ldr	r1, [pc, #448]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d024      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c9ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9ee:	d11f      	bne.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c9f0:	4b68      	ldr	r3, [pc, #416]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9f6:	0e1b      	lsrs	r3, r3, #24
 800c9f8:	f003 030f 	and.w	r3, r3, #15
 800c9fc:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c9fe:	4b65      	ldr	r3, [pc, #404]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca04:	0f1b      	lsrs	r3, r3, #28
 800ca06:	f003 0307 	and.w	r3, r3, #7
 800ca0a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691b      	ldr	r3, [r3, #16]
 800ca10:	019a      	lsls	r2, r3, #6
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	695b      	ldr	r3, [r3, #20]
 800ca16:	085b      	lsrs	r3, r3, #1
 800ca18:	3b01      	subs	r3, #1
 800ca1a:	041b      	lsls	r3, r3, #16
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	061b      	lsls	r3, r3, #24
 800ca22:	431a      	orrs	r2, r3
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	071b      	lsls	r3, r3, #28
 800ca28:	495a      	ldr	r1, [pc, #360]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ca30:	4b59      	ldr	r3, [pc, #356]	; (800cb98 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800ca32:	2201      	movs	r2, #1
 800ca34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ca36:	f7fd f9f3 	bl	8009e20 <HAL_GetTick>
 800ca3a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ca3c:	e008      	b.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ca3e:	f7fd f9ef 	bl	8009e20 <HAL_GetTick>
 800ca42:	4602      	mov	r2, r0
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d901      	bls.n	800ca50 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	e09c      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ca50:	4b50      	ldr	r3, [pc, #320]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca5c:	d1ef      	bne.n	800ca3e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0320 	and.w	r3, r3, #32
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 8083 	beq.w	800cb72 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	60bb      	str	r3, [r7, #8]
 800ca70:	4b48      	ldr	r3, [pc, #288]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca74:	4a47      	ldr	r2, [pc, #284]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca7a:	6413      	str	r3, [r2, #64]	; 0x40
 800ca7c:	4b45      	ldr	r3, [pc, #276]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ca7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca84:	60bb      	str	r3, [r7, #8]
 800ca86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ca88:	4b44      	ldr	r3, [pc, #272]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a43      	ldr	r2, [pc, #268]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800ca8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca92:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ca94:	f7fd f9c4 	bl	8009e20 <HAL_GetTick>
 800ca98:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ca9a:	e008      	b.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ca9c:	f7fd f9c0 	bl	8009e20 <HAL_GetTick>
 800caa0:	4602      	mov	r2, r0
 800caa2:	69fb      	ldr	r3, [r7, #28]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	2b02      	cmp	r3, #2
 800caa8:	d901      	bls.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800caaa:	2303      	movs	r3, #3
 800caac:	e06d      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800caae:	4b3b      	ldr	r3, [pc, #236]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d0f0      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800caba:	4b36      	ldr	r3, [pc, #216]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cabe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cac2:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d02f      	beq.n	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cad2:	69ba      	ldr	r2, [r7, #24]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d028      	beq.n	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cad8:	4b2e      	ldr	r3, [pc, #184]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cadc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cae0:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cae2:	4b2f      	ldr	r3, [pc, #188]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800cae4:	2201      	movs	r2, #1
 800cae6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cae8:	4b2d      	ldr	r3, [pc, #180]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800caee:	4a29      	ldr	r2, [pc, #164]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800caf4:	4b27      	ldr	r3, [pc, #156]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800caf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caf8:	f003 0301 	and.w	r3, r3, #1
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d114      	bne.n	800cb2a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cb00:	f7fd f98e 	bl	8009e20 <HAL_GetTick>
 800cb04:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb06:	e00a      	b.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cb08:	f7fd f98a 	bl	8009e20 <HAL_GetTick>
 800cb0c:	4602      	mov	r2, r0
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	1ad3      	subs	r3, r2, r3
 800cb12:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d901      	bls.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800cb1a:	2303      	movs	r3, #3
 800cb1c:	e035      	b.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cb1e:	4b1d      	ldr	r3, [pc, #116]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb22:	f003 0302 	and.w	r3, r3, #2
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d0ee      	beq.n	800cb08 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cb32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb36:	d10d      	bne.n	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800cb38:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb3a:	689b      	ldr	r3, [r3, #8]
 800cb3c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb44:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cb48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb4c:	4911      	ldr	r1, [pc, #68]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	608b      	str	r3, [r1, #8]
 800cb52:	e005      	b.n	800cb60 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800cb54:	4b0f      	ldr	r3, [pc, #60]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb56:	689b      	ldr	r3, [r3, #8]
 800cb58:	4a0e      	ldr	r2, [pc, #56]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cb5e:	6093      	str	r3, [r2, #8]
 800cb60:	4b0c      	ldr	r3, [pc, #48]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb6c:	4909      	ldr	r1, [pc, #36]	; (800cb94 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f003 0310 	and.w	r3, r3, #16
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d004      	beq.n	800cb88 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cb84:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800cb86:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3720      	adds	r7, #32
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
 800cb92:	bf00      	nop
 800cb94:	40023800 	.word	0x40023800
 800cb98:	42470070 	.word	0x42470070
 800cb9c:	40007000 	.word	0x40007000
 800cba0:	42470e40 	.word	0x42470e40
 800cba4:	424711e0 	.word	0x424711e0

0800cba8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d075      	beq.n	800ccac <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cbc0:	4ba2      	ldr	r3, [pc, #648]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	f003 030c 	and.w	r3, r3, #12
 800cbc8:	2b04      	cmp	r3, #4
 800cbca:	d00c      	beq.n	800cbe6 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbcc:	4b9f      	ldr	r3, [pc, #636]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800cbd4:	2b08      	cmp	r3, #8
 800cbd6:	d112      	bne.n	800cbfe <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cbd8:	4b9c      	ldr	r3, [pc, #624]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cbe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cbe4:	d10b      	bne.n	800cbfe <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cbe6:	4b99      	ldr	r3, [pc, #612]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d05b      	beq.n	800ccaa <HAL_RCC_OscConfig+0x102>
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	685b      	ldr	r3, [r3, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d157      	bne.n	800ccaa <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e20b      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	685b      	ldr	r3, [r3, #4]
 800cc02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc06:	d106      	bne.n	800cc16 <HAL_RCC_OscConfig+0x6e>
 800cc08:	4b90      	ldr	r3, [pc, #576]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a8f      	ldr	r2, [pc, #572]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	e01d      	b.n	800cc52 <HAL_RCC_OscConfig+0xaa>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cc1e:	d10c      	bne.n	800cc3a <HAL_RCC_OscConfig+0x92>
 800cc20:	4b8a      	ldr	r3, [pc, #552]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	4a89      	ldr	r2, [pc, #548]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cc2a:	6013      	str	r3, [r2, #0]
 800cc2c:	4b87      	ldr	r3, [pc, #540]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a86      	ldr	r2, [pc, #536]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cc36:	6013      	str	r3, [r2, #0]
 800cc38:	e00b      	b.n	800cc52 <HAL_RCC_OscConfig+0xaa>
 800cc3a:	4b84      	ldr	r3, [pc, #528]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a83      	ldr	r2, [pc, #524]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cc44:	6013      	str	r3, [r2, #0]
 800cc46:	4b81      	ldr	r3, [pc, #516]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a80      	ldr	r2, [pc, #512]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cc50:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d013      	beq.n	800cc82 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc5a:	f7fd f8e1 	bl	8009e20 <HAL_GetTick>
 800cc5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc60:	e008      	b.n	800cc74 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc62:	f7fd f8dd 	bl	8009e20 <HAL_GetTick>
 800cc66:	4602      	mov	r2, r0
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	1ad3      	subs	r3, r2, r3
 800cc6c:	2b64      	cmp	r3, #100	; 0x64
 800cc6e:	d901      	bls.n	800cc74 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800cc70:	2303      	movs	r3, #3
 800cc72:	e1d0      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cc74:	4b75      	ldr	r3, [pc, #468]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d0f0      	beq.n	800cc62 <HAL_RCC_OscConfig+0xba>
 800cc80:	e014      	b.n	800ccac <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc82:	f7fd f8cd 	bl	8009e20 <HAL_GetTick>
 800cc86:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc88:	e008      	b.n	800cc9c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cc8a:	f7fd f8c9 	bl	8009e20 <HAL_GetTick>
 800cc8e:	4602      	mov	r2, r0
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	2b64      	cmp	r3, #100	; 0x64
 800cc96:	d901      	bls.n	800cc9c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e1bc      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cc9c:	4b6b      	ldr	r3, [pc, #428]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d1f0      	bne.n	800cc8a <HAL_RCC_OscConfig+0xe2>
 800cca8:	e000      	b.n	800ccac <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ccaa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 0302 	and.w	r3, r3, #2
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d063      	beq.n	800cd80 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ccb8:	4b64      	ldr	r3, [pc, #400]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ccba:	689b      	ldr	r3, [r3, #8]
 800ccbc:	f003 030c 	and.w	r3, r3, #12
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d00b      	beq.n	800ccdc <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccc4:	4b61      	ldr	r3, [pc, #388]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cccc:	2b08      	cmp	r3, #8
 800ccce:	d11c      	bne.n	800cd0a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ccd0:	4b5e      	ldr	r3, [pc, #376]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d116      	bne.n	800cd0a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ccdc:	4b5b      	ldr	r3, [pc, #364]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0302 	and.w	r3, r3, #2
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d005      	beq.n	800ccf4 <HAL_RCC_OscConfig+0x14c>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	68db      	ldr	r3, [r3, #12]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d001      	beq.n	800ccf4 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800ccf0:	2301      	movs	r3, #1
 800ccf2:	e190      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ccf4:	4b55      	ldr	r3, [pc, #340]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	00db      	lsls	r3, r3, #3
 800cd02:	4952      	ldr	r1, [pc, #328]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cd04:	4313      	orrs	r3, r2
 800cd06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cd08:	e03a      	b.n	800cd80 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	68db      	ldr	r3, [r3, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d020      	beq.n	800cd54 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cd12:	4b4f      	ldr	r3, [pc, #316]	; (800ce50 <HAL_RCC_OscConfig+0x2a8>)
 800cd14:	2201      	movs	r2, #1
 800cd16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd18:	f7fd f882 	bl	8009e20 <HAL_GetTick>
 800cd1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd1e:	e008      	b.n	800cd32 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd20:	f7fd f87e 	bl	8009e20 <HAL_GetTick>
 800cd24:	4602      	mov	r2, r0
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	1ad3      	subs	r3, r2, r3
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d901      	bls.n	800cd32 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cd2e:	2303      	movs	r3, #3
 800cd30:	e171      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cd32:	4b46      	ldr	r3, [pc, #280]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0302 	and.w	r3, r3, #2
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d0f0      	beq.n	800cd20 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cd3e:	4b43      	ldr	r3, [pc, #268]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	691b      	ldr	r3, [r3, #16]
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	493f      	ldr	r1, [pc, #252]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	600b      	str	r3, [r1, #0]
 800cd52:	e015      	b.n	800cd80 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cd54:	4b3e      	ldr	r3, [pc, #248]	; (800ce50 <HAL_RCC_OscConfig+0x2a8>)
 800cd56:	2200      	movs	r2, #0
 800cd58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd5a:	f7fd f861 	bl	8009e20 <HAL_GetTick>
 800cd5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd60:	e008      	b.n	800cd74 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cd62:	f7fd f85d 	bl	8009e20 <HAL_GetTick>
 800cd66:	4602      	mov	r2, r0
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	2b02      	cmp	r3, #2
 800cd6e:	d901      	bls.n	800cd74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e150      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cd74:	4b35      	ldr	r3, [pc, #212]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f003 0302 	and.w	r3, r3, #2
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d1f0      	bne.n	800cd62 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f003 0308 	and.w	r3, r3, #8
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d030      	beq.n	800cdee <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	695b      	ldr	r3, [r3, #20]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d016      	beq.n	800cdc2 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cd94:	4b2f      	ldr	r3, [pc, #188]	; (800ce54 <HAL_RCC_OscConfig+0x2ac>)
 800cd96:	2201      	movs	r2, #1
 800cd98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd9a:	f7fd f841 	bl	8009e20 <HAL_GetTick>
 800cd9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cda0:	e008      	b.n	800cdb4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cda2:	f7fd f83d 	bl	8009e20 <HAL_GetTick>
 800cda6:	4602      	mov	r2, r0
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	1ad3      	subs	r3, r2, r3
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d901      	bls.n	800cdb4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	e130      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cdb4:	4b25      	ldr	r3, [pc, #148]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cdb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdb8:	f003 0302 	and.w	r3, r3, #2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d0f0      	beq.n	800cda2 <HAL_RCC_OscConfig+0x1fa>
 800cdc0:	e015      	b.n	800cdee <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cdc2:	4b24      	ldr	r3, [pc, #144]	; (800ce54 <HAL_RCC_OscConfig+0x2ac>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cdc8:	f7fd f82a 	bl	8009e20 <HAL_GetTick>
 800cdcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cdce:	e008      	b.n	800cde2 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cdd0:	f7fd f826 	bl	8009e20 <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d901      	bls.n	800cde2 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e119      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cde2:	4b1a      	ldr	r3, [pc, #104]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800cde4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cde6:	f003 0302 	and.w	r3, r3, #2
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1f0      	bne.n	800cdd0 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 0304 	and.w	r3, r3, #4
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 809f 	beq.w	800cf3a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ce00:	4b12      	ldr	r3, [pc, #72]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ce02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d10f      	bne.n	800ce2c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	60fb      	str	r3, [r7, #12]
 800ce10:	4b0e      	ldr	r3, [pc, #56]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ce12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce14:	4a0d      	ldr	r2, [pc, #52]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ce16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ce1a:	6413      	str	r3, [r2, #64]	; 0x40
 800ce1c:	4b0b      	ldr	r3, [pc, #44]	; (800ce4c <HAL_RCC_OscConfig+0x2a4>)
 800ce1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce24:	60fb      	str	r3, [r7, #12]
 800ce26:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce2c:	4b0a      	ldr	r3, [pc, #40]	; (800ce58 <HAL_RCC_OscConfig+0x2b0>)
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d120      	bne.n	800ce7a <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ce38:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <HAL_RCC_OscConfig+0x2b0>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	4a06      	ldr	r2, [pc, #24]	; (800ce58 <HAL_RCC_OscConfig+0x2b0>)
 800ce3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ce42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ce44:	f7fc ffec 	bl	8009e20 <HAL_GetTick>
 800ce48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce4a:	e010      	b.n	800ce6e <HAL_RCC_OscConfig+0x2c6>
 800ce4c:	40023800 	.word	0x40023800
 800ce50:	42470000 	.word	0x42470000
 800ce54:	42470e80 	.word	0x42470e80
 800ce58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ce5c:	f7fc ffe0 	bl	8009e20 <HAL_GetTick>
 800ce60:	4602      	mov	r2, r0
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	2b02      	cmp	r3, #2
 800ce68:	d901      	bls.n	800ce6e <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800ce6a:	2303      	movs	r3, #3
 800ce6c:	e0d3      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ce6e:	4b6c      	ldr	r3, [pc, #432]	; (800d020 <HAL_RCC_OscConfig+0x478>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d0f0      	beq.n	800ce5c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d106      	bne.n	800ce90 <HAL_RCC_OscConfig+0x2e8>
 800ce82:	4b68      	ldr	r3, [pc, #416]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ce84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce86:	4a67      	ldr	r2, [pc, #412]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ce88:	f043 0301 	orr.w	r3, r3, #1
 800ce8c:	6713      	str	r3, [r2, #112]	; 0x70
 800ce8e:	e01c      	b.n	800ceca <HAL_RCC_OscConfig+0x322>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	2b05      	cmp	r3, #5
 800ce96:	d10c      	bne.n	800ceb2 <HAL_RCC_OscConfig+0x30a>
 800ce98:	4b62      	ldr	r3, [pc, #392]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ce9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce9c:	4a61      	ldr	r2, [pc, #388]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ce9e:	f043 0304 	orr.w	r3, r3, #4
 800cea2:	6713      	str	r3, [r2, #112]	; 0x70
 800cea4:	4b5f      	ldr	r3, [pc, #380]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea8:	4a5e      	ldr	r2, [pc, #376]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ceaa:	f043 0301 	orr.w	r3, r3, #1
 800ceae:	6713      	str	r3, [r2, #112]	; 0x70
 800ceb0:	e00b      	b.n	800ceca <HAL_RCC_OscConfig+0x322>
 800ceb2:	4b5c      	ldr	r3, [pc, #368]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ceb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ceb6:	4a5b      	ldr	r2, [pc, #364]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800ceb8:	f023 0301 	bic.w	r3, r3, #1
 800cebc:	6713      	str	r3, [r2, #112]	; 0x70
 800cebe:	4b59      	ldr	r3, [pc, #356]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec2:	4a58      	ldr	r2, [pc, #352]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cec4:	f023 0304 	bic.w	r3, r3, #4
 800cec8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d015      	beq.n	800cefe <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ced2:	f7fc ffa5 	bl	8009e20 <HAL_GetTick>
 800ced6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ced8:	e00a      	b.n	800cef0 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ceda:	f7fc ffa1 	bl	8009e20 <HAL_GetTick>
 800cede:	4602      	mov	r2, r0
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cee8:	4293      	cmp	r3, r2
 800ceea:	d901      	bls.n	800cef0 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e092      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cef0:	4b4c      	ldr	r3, [pc, #304]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cef4:	f003 0302 	and.w	r3, r3, #2
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d0ee      	beq.n	800ceda <HAL_RCC_OscConfig+0x332>
 800cefc:	e014      	b.n	800cf28 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cefe:	f7fc ff8f 	bl	8009e20 <HAL_GetTick>
 800cf02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf04:	e00a      	b.n	800cf1c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cf06:	f7fc ff8b 	bl	8009e20 <HAL_GetTick>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d901      	bls.n	800cf1c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cf18:	2303      	movs	r3, #3
 800cf1a:	e07c      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cf1c:	4b41      	ldr	r3, [pc, #260]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cf1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf20:	f003 0302 	and.w	r3, r3, #2
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1ee      	bne.n	800cf06 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cf28:	7dfb      	ldrb	r3, [r7, #23]
 800cf2a:	2b01      	cmp	r3, #1
 800cf2c:	d105      	bne.n	800cf3a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cf2e:	4b3d      	ldr	r3, [pc, #244]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cf30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf32:	4a3c      	ldr	r2, [pc, #240]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cf34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	699b      	ldr	r3, [r3, #24]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d068      	beq.n	800d014 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cf42:	4b38      	ldr	r3, [pc, #224]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f003 030c 	and.w	r3, r3, #12
 800cf4a:	2b08      	cmp	r3, #8
 800cf4c:	d060      	beq.n	800d010 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	699b      	ldr	r3, [r3, #24]
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	d145      	bne.n	800cfe2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cf56:	4b34      	ldr	r3, [pc, #208]	; (800d028 <HAL_RCC_OscConfig+0x480>)
 800cf58:	2200      	movs	r2, #0
 800cf5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cf5c:	f7fc ff60 	bl	8009e20 <HAL_GetTick>
 800cf60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf62:	e008      	b.n	800cf76 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cf64:	f7fc ff5c 	bl	8009e20 <HAL_GetTick>
 800cf68:	4602      	mov	r2, r0
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	1ad3      	subs	r3, r2, r3
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	d901      	bls.n	800cf76 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e04f      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cf76:	4b2b      	ldr	r3, [pc, #172]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1f0      	bne.n	800cf64 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	69da      	ldr	r2, [r3, #28]
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	6a1b      	ldr	r3, [r3, #32]
 800cf8a:	431a      	orrs	r2, r3
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf90:	019b      	lsls	r3, r3, #6
 800cf92:	431a      	orrs	r2, r3
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf98:	085b      	lsrs	r3, r3, #1
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	041b      	lsls	r3, r3, #16
 800cf9e:	431a      	orrs	r2, r3
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa4:	061b      	lsls	r3, r3, #24
 800cfa6:	431a      	orrs	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfac:	071b      	lsls	r3, r3, #28
 800cfae:	491d      	ldr	r1, [pc, #116]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cfb4:	4b1c      	ldr	r3, [pc, #112]	; (800d028 <HAL_RCC_OscConfig+0x480>)
 800cfb6:	2201      	movs	r2, #1
 800cfb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfba:	f7fc ff31 	bl	8009e20 <HAL_GetTick>
 800cfbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfc0:	e008      	b.n	800cfd4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cfc2:	f7fc ff2d 	bl	8009e20 <HAL_GetTick>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	693b      	ldr	r3, [r7, #16]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d901      	bls.n	800cfd4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e020      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cfd4:	4b13      	ldr	r3, [pc, #76]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0f0      	beq.n	800cfc2 <HAL_RCC_OscConfig+0x41a>
 800cfe0:	e018      	b.n	800d014 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cfe2:	4b11      	ldr	r3, [pc, #68]	; (800d028 <HAL_RCC_OscConfig+0x480>)
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cfe8:	f7fc ff1a 	bl	8009e20 <HAL_GetTick>
 800cfec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cfee:	e008      	b.n	800d002 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cff0:	f7fc ff16 	bl	8009e20 <HAL_GetTick>
 800cff4:	4602      	mov	r2, r0
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d901      	bls.n	800d002 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800cffe:	2303      	movs	r3, #3
 800d000:	e009      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d002:	4b08      	ldr	r3, [pc, #32]	; (800d024 <HAL_RCC_OscConfig+0x47c>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1f0      	bne.n	800cff0 <HAL_RCC_OscConfig+0x448>
 800d00e:	e001      	b.n	800d014 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	e000      	b.n	800d016 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800d014:	2300      	movs	r3, #0
}
 800d016:	4618      	mov	r0, r3
 800d018:	3718      	adds	r7, #24
 800d01a:	46bd      	mov	sp, r7
 800d01c:	bd80      	pop	{r7, pc}
 800d01e:	bf00      	nop
 800d020:	40007000 	.word	0x40007000
 800d024:	40023800 	.word	0x40023800
 800d028:	42470060 	.word	0x42470060

0800d02c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d03a:	2301      	movs	r3, #1
 800d03c:	e022      	b.n	800d084 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d044:	b2db      	uxtb	r3, r3
 800d046:	2b00      	cmp	r3, #0
 800d048:	d105      	bne.n	800d056 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f7fa f87d 	bl	8007150 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2203      	movs	r2, #3
 800d05a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 f814 	bl	800d08c <HAL_SD_InitCard>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e00a      	b.n	800d084 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d082:	2300      	movs	r3, #0
}
 800d084:	4618      	mov	r0, r3
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d08c:	b5b0      	push	{r4, r5, r7, lr}
 800d08e:	b08e      	sub	sp, #56	; 0x38
 800d090:	af04      	add	r7, sp, #16
 800d092:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d094:	2300      	movs	r3, #0
 800d096:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d098:	2300      	movs	r3, #0
 800d09a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d09c:	2300      	movs	r3, #0
 800d09e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d0a8:	2376      	movs	r3, #118	; 0x76
 800d0aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681d      	ldr	r5, [r3, #0]
 800d0b0:	466c      	mov	r4, sp
 800d0b2:	f107 0314 	add.w	r3, r7, #20
 800d0b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d0ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d0be:	f107 0308 	add.w	r3, r7, #8
 800d0c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d0c4:	4628      	mov	r0, r5
 800d0c6:	f003 fa87 	bl	80105d8 <SDIO_Init>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d001      	beq.n	800d0dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d0d8:	2301      	movs	r3, #1
 800d0da:	e031      	b.n	800d140 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d0dc:	4b1a      	ldr	r3, [pc, #104]	; (800d148 <HAL_SD_InitCard+0xbc>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f003 fabf 	bl	801066a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d0ec:	4b16      	ldr	r3, [pc, #88]	; (800d148 <HAL_SD_InitCard+0xbc>)
 800d0ee:	2201      	movs	r2, #1
 800d0f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 ffc6 	bl	800e084 <SD_PowerON>
 800d0f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0fa:	6a3b      	ldr	r3, [r7, #32]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00b      	beq.n	800d118 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d10c:	6a3b      	ldr	r3, [r7, #32]
 800d10e:	431a      	orrs	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	e013      	b.n	800d140 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f000 fee5 	bl	800dee8 <SD_InitCard>
 800d11e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d120:	6a3b      	ldr	r3, [r7, #32]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00b      	beq.n	800d13e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2201      	movs	r2, #1
 800d12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	431a      	orrs	r2, r3
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d13a:	2301      	movs	r3, #1
 800d13c:	e000      	b.n	800d140 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800d13e:	2300      	movs	r3, #0
}
 800d140:	4618      	mov	r0, r3
 800d142:	3728      	adds	r7, #40	; 0x28
 800d144:	46bd      	mov	sp, r7
 800d146:	bdb0      	pop	{r4, r5, r7, pc}
 800d148:	422580a0 	.word	0x422580a0

0800d14c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b08c      	sub	sp, #48	; 0x30
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d15e:	68bb      	ldr	r3, [r7, #8]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d107      	bne.n	800d174 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d168:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d170:	2301      	movs	r3, #1
 800d172:	e0c7      	b.n	800d304 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d17a:	b2db      	uxtb	r3, r3
 800d17c:	2b01      	cmp	r3, #1
 800d17e:	f040 80c0 	bne.w	800d302 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2200      	movs	r2, #0
 800d186:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	441a      	add	r2, r3
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d192:	429a      	cmp	r2, r3
 800d194:	d907      	bls.n	800d1a6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e0ae      	b.n	800d304 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2203      	movs	r2, #3
 800d1aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d1c4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ca:	4a50      	ldr	r2, [pc, #320]	; (800d30c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d1cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d2:	4a4f      	ldr	r2, [pc, #316]	; (800d310 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d1d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1da:	2200      	movs	r2, #0
 800d1dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3380      	adds	r3, #128	; 0x80
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	025b      	lsls	r3, r3, #9
 800d1f0:	089b      	lsrs	r3, r3, #2
 800d1f2:	f7fd fc07 	bl	800aa04 <HAL_DMA_Start_IT>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d017      	beq.n	800d22c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d20a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a40      	ldr	r2, [pc, #256]	; (800d314 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d212:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d218:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	e06b      	b.n	800d304 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d22c:	4b3a      	ldr	r3, [pc, #232]	; (800d318 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d22e:	2201      	movs	r2, #1
 800d230:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d236:	2b01      	cmp	r3, #1
 800d238:	d002      	beq.n	800d240 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d23a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23c:	025b      	lsls	r3, r3, #9
 800d23e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d248:	4618      	mov	r0, r3
 800d24a:	f003 faa1 	bl	8010790 <SDMMC_CmdBlockLength>
 800d24e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d252:	2b00      	cmp	r3, #0
 800d254:	d00f      	beq.n	800d276 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	4a2e      	ldr	r2, [pc, #184]	; (800d314 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d25c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d264:	431a      	orrs	r2, r3
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2201      	movs	r2, #1
 800d26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d272:	2301      	movs	r3, #1
 800d274:	e046      	b.n	800d304 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d276:	f04f 33ff 	mov.w	r3, #4294967295
 800d27a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d27c:	683b      	ldr	r3, [r7, #0]
 800d27e:	025b      	lsls	r3, r3, #9
 800d280:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d282:	2390      	movs	r3, #144	; 0x90
 800d284:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d286:	2302      	movs	r3, #2
 800d288:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d28a:	2300      	movs	r3, #0
 800d28c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d28e:	2301      	movs	r3, #1
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f107 0210 	add.w	r2, r7, #16
 800d29a:	4611      	mov	r1, r2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f003 fa4b 	bl	8010738 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d90a      	bls.n	800d2be <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2282      	movs	r2, #130	; 0x82
 800d2ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f003 faaf 	bl	8010818 <SDMMC_CmdReadMultiBlock>
 800d2ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d2bc:	e009      	b.n	800d2d2 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2281      	movs	r2, #129	; 0x81
 800d2c2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f003 fa82 	bl	80107d4 <SDMMC_CmdReadSingleBlock>
 800d2d0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d012      	beq.n	800d2fe <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	4a0d      	ldr	r2, [pc, #52]	; (800d314 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d2de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e6:	431a      	orrs	r2, r3
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d2fa:	2301      	movs	r3, #1
 800d2fc:	e002      	b.n	800d304 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	e000      	b.n	800d304 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d302:	2302      	movs	r3, #2
  }
}
 800d304:	4618      	mov	r0, r3
 800d306:	3730      	adds	r7, #48	; 0x30
 800d308:	46bd      	mov	sp, r7
 800d30a:	bd80      	pop	{r7, pc}
 800d30c:	0800dcf7 	.word	0x0800dcf7
 800d310:	0800dd69 	.word	0x0800dd69
 800d314:	004005ff 	.word	0x004005ff
 800d318:	4225858c 	.word	0x4225858c

0800d31c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b08c      	sub	sp, #48	; 0x30
 800d320:	af00      	add	r7, sp, #0
 800d322:	60f8      	str	r0, [r7, #12]
 800d324:	60b9      	str	r1, [r7, #8]
 800d326:	607a      	str	r2, [r7, #4]
 800d328:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d107      	bne.n	800d344 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d338:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	e0ca      	b.n	800d4da <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	f040 80c3 	bne.w	800d4d8 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2200      	movs	r2, #0
 800d356:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d358:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	441a      	add	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d362:	429a      	cmp	r2, r3
 800d364:	d907      	bls.n	800d376 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d372:	2301      	movs	r3, #1
 800d374:	e0b1      	b.n	800d4da <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2203      	movs	r2, #3
 800d37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2200      	movs	r2, #0
 800d384:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f042 021a 	orr.w	r2, r2, #26
 800d394:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d39a:	4a52      	ldr	r2, [pc, #328]	; (800d4e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d39c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3a2:	4a51      	ldr	r2, [pc, #324]	; (800d4e8 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d3a4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d002      	beq.n	800d3bc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b8:	025b      	lsls	r3, r3, #9
 800d3ba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f003 f9e3 	bl	8010790 <SDMMC_CmdBlockLength>
 800d3ca:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d00f      	beq.n	800d3f2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	4a45      	ldr	r2, [pc, #276]	; (800d4ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d3d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	431a      	orrs	r2, r3
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e073      	b.n	800d4da <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d90a      	bls.n	800d40e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	22a0      	movs	r2, #160	; 0xa0
 800d3fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d404:	4618      	mov	r0, r3
 800d406:	f003 fa4b 	bl	80108a0 <SDMMC_CmdWriteMultiBlock>
 800d40a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d40c:	e009      	b.n	800d422 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	2290      	movs	r2, #144	; 0x90
 800d412:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d41a:	4618      	mov	r0, r3
 800d41c:	f003 fa1e 	bl	801085c <SDMMC_CmdWriteSingleBlock>
 800d420:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d424:	2b00      	cmp	r3, #0
 800d426:	d012      	beq.n	800d44e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4a2f      	ldr	r2, [pc, #188]	; (800d4ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	431a      	orrs	r2, r3
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2201      	movs	r2, #1
 800d440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2200      	movs	r2, #0
 800d448:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d44a:	2301      	movs	r3, #1
 800d44c:	e045      	b.n	800d4da <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d44e:	4b28      	ldr	r3, [pc, #160]	; (800d4f0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d450:	2201      	movs	r2, #1
 800d452:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d458:	68b9      	ldr	r1, [r7, #8]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3380      	adds	r3, #128	; 0x80
 800d460:	461a      	mov	r2, r3
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	025b      	lsls	r3, r3, #9
 800d466:	089b      	lsrs	r3, r3, #2
 800d468:	f7fd facc 	bl	800aa04 <HAL_DMA_Start_IT>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d01a      	beq.n	800d4a8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f022 021a 	bic.w	r2, r2, #26
 800d480:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	4a19      	ldr	r2, [pc, #100]	; (800d4ec <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d488:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d48e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4a4:	2301      	movs	r3, #1
 800d4a6:	e018      	b.n	800d4da <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4ac:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	025b      	lsls	r3, r3, #9
 800d4b2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d4b4:	2390      	movs	r3, #144	; 0x90
 800d4b6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f107 0210 	add.w	r2, r7, #16
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f003 f932 	bl	8010738 <SDIO_ConfigData>

      return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e000      	b.n	800d4da <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d4d8:	2302      	movs	r3, #2
  }
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3730      	adds	r7, #48	; 0x30
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0800dccd 	.word	0x0800dccd
 800d4e8:	0800dd69 	.word	0x0800dd69
 800d4ec:	004005ff 	.word	0x004005ff
 800d4f0:	4225858c 	.word	0x4225858c

0800d4f4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d500:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d008      	beq.n	800d522 <HAL_SD_IRQHandler+0x2e>
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f003 0308 	and.w	r3, r3, #8
 800d516:	2b00      	cmp	r3, #0
 800d518:	d003      	beq.n	800d522 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f000 ffc8 	bl	800e4b0 <SD_Read_IT>
 800d520:	e155      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	f000 808f 	beq.w	800d650 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	6812      	ldr	r2, [r2, #0]
 800d546:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d54a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d54e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	f022 0201 	bic.w	r2, r2, #1
 800d55e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f003 0308 	and.w	r3, r3, #8
 800d566:	2b00      	cmp	r3, #0
 800d568:	d039      	beq.n	800d5de <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	2b00      	cmp	r3, #0
 800d572:	d104      	bne.n	800d57e <HAL_SD_IRQHandler+0x8a>
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0320 	and.w	r3, r3, #32
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d011      	beq.n	800d5a2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4618      	mov	r0, r3
 800d584:	f003 f9ae 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800d588:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d008      	beq.n	800d5a2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	431a      	orrs	r2, r3
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f91f 	bl	800d7e0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5aa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f003 0301 	and.w	r3, r3, #1
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d104      	bne.n	800d5ce <HAL_SD_IRQHandler+0xda>
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	f003 0302 	and.w	r3, r3, #2
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d003      	beq.n	800d5d6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f003 fe04 	bl	80111dc <HAL_SD_RxCpltCallback>
 800d5d4:	e0fb      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f003 fdf6 	bl	80111c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5dc:	e0f7      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f000 80f2 	beq.w	800d7ce <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f003 0320 	and.w	r3, r3, #32
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d011      	beq.n	800d618 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f003 f973 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800d5fe:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d008      	beq.n	800d618 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	431a      	orrs	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f8e4 	bl	800d7e0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f040 80d5 	bne.w	800d7ce <HAL_SD_IRQHandler+0x2da>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f003 0302 	and.w	r3, r3, #2
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f040 80cf 	bne.w	800d7ce <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	f022 0208 	bic.w	r2, r2, #8
 800d63e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f003 fdbd 	bl	80111c8 <HAL_SD_TxCpltCallback>
}
 800d64e:	e0be      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d008      	beq.n	800d670 <HAL_SD_IRQHandler+0x17c>
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	f003 0308 	and.w	r3, r3, #8
 800d664:	2b00      	cmp	r3, #0
 800d666:	d003      	beq.n	800d670 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 ff72 	bl	800e552 <SD_Write_IT>
 800d66e:	e0ae      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d676:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f000 80a7 	beq.w	800d7ce <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d686:	f003 0302 	and.w	r3, r3, #2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d005      	beq.n	800d69a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d692:	f043 0202 	orr.w	r2, r3, #2
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a0:	f003 0308 	and.w	r3, r3, #8
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d005      	beq.n	800d6b4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ac:	f043 0208 	orr.w	r2, r3, #8
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ba:	f003 0320 	and.w	r3, r3, #32
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d005      	beq.n	800d6ce <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c6:	f043 0220 	orr.w	r2, r3, #32
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d4:	f003 0310 	and.w	r3, r3, #16
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d005      	beq.n	800d6e8 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e0:	f043 0210 	orr.w	r2, r3, #16
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6f0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d700:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4618      	mov	r0, r3
 800d708:	f003 f8ec 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800d70c:	4602      	mov	r2, r0
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d712:	431a      	orrs	r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	f003 0308 	and.w	r3, r3, #8
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00a      	beq.n	800d738 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2201      	movs	r2, #1
 800d726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2200      	movs	r2, #0
 800d72e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 f855 	bl	800d7e0 <HAL_SD_ErrorCallback>
}
 800d736:	e04a      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d045      	beq.n	800d7ce <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f003 0310 	and.w	r3, r3, #16
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d104      	bne.n	800d756 <HAL_SD_IRQHandler+0x262>
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f003 0320 	and.w	r3, r3, #32
 800d752:	2b00      	cmp	r3, #0
 800d754:	d011      	beq.n	800d77a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d75a:	4a1f      	ldr	r2, [pc, #124]	; (800d7d8 <HAL_SD_IRQHandler+0x2e4>)
 800d75c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d762:	4618      	mov	r0, r3
 800d764:	f7fd f9a6 	bl	800aab4 <HAL_DMA_Abort_IT>
 800d768:	4603      	mov	r3, r0
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d02f      	beq.n	800d7ce <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d772:	4618      	mov	r0, r3
 800d774:	f000 fb4a 	bl	800de0c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d778:	e029      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f003 0301 	and.w	r3, r3, #1
 800d780:	2b00      	cmp	r3, #0
 800d782:	d104      	bne.n	800d78e <HAL_SD_IRQHandler+0x29a>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f003 0302 	and.w	r3, r3, #2
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d011      	beq.n	800d7b2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	4a12      	ldr	r2, [pc, #72]	; (800d7dc <HAL_SD_IRQHandler+0x2e8>)
 800d794:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7fd f98a 	bl	800aab4 <HAL_DMA_Abort_IT>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d013      	beq.n	800d7ce <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 fb65 	bl	800de7a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d7b0:	e00d      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f003 fcf4 	bl	80111b4 <HAL_SD_AbortCallback>
}
 800d7cc:	e7ff      	b.n	800d7ce <HAL_SD_IRQHandler+0x2da>
 800d7ce:	bf00      	nop
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	0800de0d 	.word	0x0800de0d
 800d7dc:	0800de7b 	.word	0x0800de7b

0800d7e0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b083      	sub	sp, #12
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d7e8:	bf00      	nop
 800d7ea:	370c      	adds	r7, #12
 800d7ec:	46bd      	mov	sp, r7
 800d7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f2:	4770      	bx	lr

0800d7f4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
 800d7fc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d802:	0f9b      	lsrs	r3, r3, #30
 800d804:	b2da      	uxtb	r2, r3
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d80e:	0e9b      	lsrs	r3, r3, #26
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f003 030f 	and.w	r3, r3, #15
 800d816:	b2da      	uxtb	r2, r3
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d820:	0e1b      	lsrs	r3, r3, #24
 800d822:	b2db      	uxtb	r3, r3
 800d824:	f003 0303 	and.w	r3, r3, #3
 800d828:	b2da      	uxtb	r2, r3
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d832:	0c1b      	lsrs	r3, r3, #16
 800d834:	b2da      	uxtb	r2, r3
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d83e:	0a1b      	lsrs	r3, r3, #8
 800d840:	b2da      	uxtb	r2, r3
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d84a:	b2da      	uxtb	r2, r3
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d854:	0d1b      	lsrs	r3, r3, #20
 800d856:	b29a      	uxth	r2, r3
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d860:	0c1b      	lsrs	r3, r3, #16
 800d862:	b2db      	uxtb	r3, r3
 800d864:	f003 030f 	and.w	r3, r3, #15
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d872:	0bdb      	lsrs	r3, r3, #15
 800d874:	b2db      	uxtb	r3, r3
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d884:	0b9b      	lsrs	r3, r3, #14
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 0301 	and.w	r3, r3, #1
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d896:	0b5b      	lsrs	r3, r3, #13
 800d898:	b2db      	uxtb	r3, r3
 800d89a:	f003 0301 	and.w	r3, r3, #1
 800d89e:	b2da      	uxtb	r2, r3
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8a8:	0b1b      	lsrs	r3, r3, #12
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d163      	bne.n	800d98c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8c8:	009a      	lsls	r2, r3, #2
 800d8ca:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d8ce:	4013      	ands	r3, r2
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d8d4:	0f92      	lsrs	r2, r2, #30
 800d8d6:	431a      	orrs	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8e0:	0edb      	lsrs	r3, r3, #27
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	f003 0307 	and.w	r3, r3, #7
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f2:	0e1b      	lsrs	r3, r3, #24
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	f003 0307 	and.w	r3, r3, #7
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d904:	0d5b      	lsrs	r3, r3, #21
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 0307 	and.w	r3, r3, #7
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d916:	0c9b      	lsrs	r3, r3, #18
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	f003 0307 	and.w	r3, r3, #7
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d928:	0bdb      	lsrs	r3, r3, #15
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f003 0307 	and.w	r3, r3, #7
 800d930:	b2da      	uxtb	r2, r3
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	1c5a      	adds	r2, r3, #1
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	7e1b      	ldrb	r3, [r3, #24]
 800d944:	b2db      	uxtb	r3, r3
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	3302      	adds	r3, #2
 800d94c:	2201      	movs	r2, #1
 800d94e:	fa02 f303 	lsl.w	r3, r2, r3
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d956:	fb02 f203 	mul.w	r2, r2, r3
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	7a1b      	ldrb	r3, [r3, #8]
 800d962:	b2db      	uxtb	r3, r3
 800d964:	f003 030f 	and.w	r3, r3, #15
 800d968:	2201      	movs	r2, #1
 800d96a:	409a      	lsls	r2, r3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d978:	0a52      	lsrs	r2, r2, #9
 800d97a:	fb02 f203 	mul.w	r2, r2, r3
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d988:	661a      	str	r2, [r3, #96]	; 0x60
 800d98a:	e031      	b.n	800d9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d990:	2b01      	cmp	r3, #1
 800d992:	d11d      	bne.n	800d9d0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d998:	041b      	lsls	r3, r3, #16
 800d99a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9a2:	0c1b      	lsrs	r3, r3, #16
 800d9a4:	431a      	orrs	r2, r3
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	691b      	ldr	r3, [r3, #16]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	029a      	lsls	r2, r3, #10
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9c4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	661a      	str	r2, [r3, #96]	; 0x60
 800d9ce:	e00f      	b.n	800d9f0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a58      	ldr	r2, [pc, #352]	; (800db38 <HAL_SD_GetCardCSD+0x344>)
 800d9d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2201      	movs	r2, #1
 800d9e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	e09d      	b.n	800db2c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9f4:	0b9b      	lsrs	r3, r3, #14
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	f003 0301 	and.w	r3, r3, #1
 800d9fc:	b2da      	uxtb	r2, r3
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da06:	09db      	lsrs	r3, r3, #7
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da0e:	b2da      	uxtb	r2, r3
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da1e:	b2da      	uxtb	r2, r3
 800da20:	683b      	ldr	r3, [r7, #0]
 800da22:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da28:	0fdb      	lsrs	r3, r3, #31
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da34:	0f5b      	lsrs	r3, r3, #29
 800da36:	b2db      	uxtb	r3, r3
 800da38:	f003 0303 	and.w	r3, r3, #3
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da46:	0e9b      	lsrs	r3, r3, #26
 800da48:	b2db      	uxtb	r3, r3
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	b2da      	uxtb	r2, r3
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da58:	0d9b      	lsrs	r3, r3, #22
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	f003 030f 	and.w	r3, r3, #15
 800da60:	b2da      	uxtb	r2, r3
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da6a:	0d5b      	lsrs	r3, r3, #21
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 0301 	and.w	r3, r3, #1
 800da72:	b2da      	uxtb	r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	b2db      	uxtb	r3, r3
 800da8a:	f003 0301 	and.w	r3, r3, #1
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	0bdb      	lsrs	r3, r3, #15
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	0b9b      	lsrs	r3, r3, #14
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	0b5b      	lsrs	r3, r3, #13
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad6:	0b1b      	lsrs	r3, r3, #12
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daea:	0a9b      	lsrs	r3, r3, #10
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0303 	and.w	r3, r3, #3
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafe:	0a1b      	lsrs	r3, r3, #8
 800db00:	b2db      	uxtb	r3, r3
 800db02:	f003 0303 	and.w	r3, r3, #3
 800db06:	b2da      	uxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	2201      	movs	r2, #1
 800db26:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	370c      	adds	r7, #12
 800db30:	46bd      	mov	sp, r7
 800db32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db36:	4770      	bx	lr
 800db38:	004005ff 	.word	0x004005ff

0800db3c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db62:	683b      	ldr	r3, [r7, #0]
 800db64:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db7a:	683b      	ldr	r3, [r7, #0]
 800db7c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800db86:	2300      	movs	r3, #0
}
 800db88:	4618      	mov	r0, r3
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800db94:	b5b0      	push	{r4, r5, r7, lr}
 800db96:	b08e      	sub	sp, #56	; 0x38
 800db98:	af04      	add	r7, sp, #16
 800db9a:	6078      	str	r0, [r7, #4]
 800db9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2203      	movs	r2, #3
 800dba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	d02e      	beq.n	800dc0c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbb4:	d106      	bne.n	800dbc4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	639a      	str	r2, [r3, #56]	; 0x38
 800dbc2:	e029      	b.n	800dc18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbca:	d10a      	bne.n	800dbe2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f000 fb0f 	bl	800e1f0 <SD_WideBus_Enable>
 800dbd2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	639a      	str	r2, [r3, #56]	; 0x38
 800dbe0:	e01a      	b.n	800dc18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10a      	bne.n	800dbfe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fb4c 	bl	800e286 <SD_WideBus_Disable>
 800dbee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbf6:	431a      	orrs	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	639a      	str	r2, [r3, #56]	; 0x38
 800dbfc:	e00c      	b.n	800dc18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	639a      	str	r2, [r3, #56]	; 0x38
 800dc0a:	e005      	b.n	800dc18 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d009      	beq.n	800dc34 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4a18      	ldr	r2, [pc, #96]	; (800dc88 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800dc26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dc30:	2301      	movs	r3, #1
 800dc32:	e024      	b.n	800dc7e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	689b      	ldr	r3, [r3, #8]
 800dc3e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	68db      	ldr	r3, [r3, #12]
 800dc44:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	695b      	ldr	r3, [r3, #20]
 800dc4e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	699b      	ldr	r3, [r3, #24]
 800dc54:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681d      	ldr	r5, [r3, #0]
 800dc5a:	466c      	mov	r4, sp
 800dc5c:	f107 0318 	add.w	r3, r7, #24
 800dc60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc68:	f107 030c 	add.w	r3, r7, #12
 800dc6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc6e:	4628      	mov	r0, r5
 800dc70:	f002 fcb2 	bl	80105d8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3728      	adds	r7, #40	; 0x28
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bdb0      	pop	{r4, r5, r7, pc}
 800dc86:	bf00      	nop
 800dc88:	004005ff 	.word	0x004005ff

0800dc8c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b086      	sub	sp, #24
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dc94:	2300      	movs	r3, #0
 800dc96:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dc98:	f107 030c 	add.w	r3, r7, #12
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f000 fa7e 	bl	800e1a0 <SD_SendStatus>
 800dca4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d005      	beq.n	800dcb8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	431a      	orrs	r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	0a5b      	lsrs	r3, r3, #9
 800dcbc:	f003 030f 	and.w	r3, r3, #15
 800dcc0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dcc2:	693b      	ldr	r3, [r7, #16]
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3718      	adds	r7, #24
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dce8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800dcea:	bf00      	nop
 800dcec:	3714      	adds	r7, #20
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf4:	4770      	bx	lr

0800dcf6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b084      	sub	sp, #16
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd02:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd08:	2b82      	cmp	r3, #130	; 0x82
 800dd0a:	d111      	bne.n	800dd30 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4618      	mov	r0, r3
 800dd12:	f002 fde7 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800dd16:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd18:	68bb      	ldr	r3, [r7, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d008      	beq.n	800dd30 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	431a      	orrs	r2, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7ff fd58 	bl	800d7e0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f022 0208 	bic.w	r2, r2, #8
 800dd3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd48:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	2201      	movs	r2, #1
 800dd4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f003 fa3f 	bl	80111dc <HAL_SD_RxCpltCallback>
#endif
}
 800dd5e:	bf00      	nop
 800dd60:	3710      	adds	r7, #16
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}
	...

0800dd68 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd74:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7fd f848 	bl	800ae0c <HAL_DMA_GetError>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	d03e      	beq.n	800de00 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd88:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd90:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d002      	beq.n	800dd9e <SD_DMAError+0x36>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d12d      	bne.n	800ddfa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4a19      	ldr	r2, [pc, #100]	; (800de08 <SD_DMAError+0xa0>)
 800dda4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ddb4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ddc2:	6978      	ldr	r0, [r7, #20]
 800ddc4:	f7ff ff62 	bl	800dc8c <HAL_SD_GetCardState>
 800ddc8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ddca:	68bb      	ldr	r3, [r7, #8]
 800ddcc:	2b06      	cmp	r3, #6
 800ddce:	d002      	beq.n	800ddd6 <SD_DMAError+0x6e>
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	2b05      	cmp	r3, #5
 800ddd4:	d10a      	bne.n	800ddec <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4618      	mov	r0, r3
 800dddc:	f002 fd82 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800dde0:	4602      	mov	r2, r0
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dde6:	431a      	orrs	r2, r3
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2201      	movs	r2, #1
 800ddf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800ddfa:	6978      	ldr	r0, [r7, #20]
 800ddfc:	f7ff fcf0 	bl	800d7e0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800de00:	bf00      	nop
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	004005ff 	.word	0x004005ff

0800de0c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de18:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f240 523a 	movw	r2, #1338	; 0x53a
 800de22:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f7ff ff31 	bl	800dc8c <HAL_SD_GetCardState>
 800de2a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	2b06      	cmp	r3, #6
 800de3e:	d002      	beq.n	800de46 <SD_DMATxAbort+0x3a>
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	2b05      	cmp	r3, #5
 800de44:	d10a      	bne.n	800de5c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f002 fd4a 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800de50:	4602      	mov	r2, r0
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de56:	431a      	orrs	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de60:	2b00      	cmp	r3, #0
 800de62:	d103      	bne.n	800de6c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f003 f9a5 	bl	80111b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800de6a:	e002      	b.n	800de72 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800de6c:	68f8      	ldr	r0, [r7, #12]
 800de6e:	f7ff fcb7 	bl	800d7e0 <HAL_SD_ErrorCallback>
}
 800de72:	bf00      	nop
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de86:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f240 523a 	movw	r2, #1338	; 0x53a
 800de90:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7ff fefa 	bl	800dc8c <HAL_SD_GetCardState>
 800de98:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	2b06      	cmp	r3, #6
 800deac:	d002      	beq.n	800deb4 <SD_DMARxAbort+0x3a>
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2b05      	cmp	r3, #5
 800deb2:	d10a      	bne.n	800deca <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f002 fd13 	bl	80108e4 <SDMMC_CmdStopTransfer>
 800debe:	4602      	mov	r2, r0
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec4:	431a      	orrs	r2, r3
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d103      	bne.n	800deda <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f003 f96e 	bl	80111b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800ded8:	e002      	b.n	800dee0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	f7ff fc80 	bl	800d7e0 <HAL_SD_ErrorCallback>
}
 800dee0:	bf00      	nop
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dee8:	b5b0      	push	{r4, r5, r7, lr}
 800deea:	b094      	sub	sp, #80	; 0x50
 800deec:	af04      	add	r7, sp, #16
 800deee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800def0:	2301      	movs	r3, #1
 800def2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4618      	mov	r0, r3
 800defa:	f002 fbc5 	bl	8010688 <SDIO_GetPowerState>
 800defe:	4603      	mov	r3, r0
 800df00:	2b00      	cmp	r3, #0
 800df02:	d102      	bne.n	800df0a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df08:	e0b7      	b.n	800e07a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df0e:	2b03      	cmp	r3, #3
 800df10:	d02f      	beq.n	800df72 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4618      	mov	r0, r3
 800df18:	f002 fdee 	bl	8010af8 <SDMMC_CmdSendCID>
 800df1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800df1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df20:	2b00      	cmp	r3, #0
 800df22:	d001      	beq.n	800df28 <SD_InitCard+0x40>
    {
      return errorstate;
 800df24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df26:	e0a8      	b.n	800e07a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2100      	movs	r1, #0
 800df2e:	4618      	mov	r0, r3
 800df30:	f002 fbef 	bl	8010712 <SDIO_GetResponse>
 800df34:	4602      	mov	r2, r0
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	2104      	movs	r1, #4
 800df40:	4618      	mov	r0, r3
 800df42:	f002 fbe6 	bl	8010712 <SDIO_GetResponse>
 800df46:	4602      	mov	r2, r0
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2108      	movs	r1, #8
 800df52:	4618      	mov	r0, r3
 800df54:	f002 fbdd 	bl	8010712 <SDIO_GetResponse>
 800df58:	4602      	mov	r2, r0
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	210c      	movs	r1, #12
 800df64:	4618      	mov	r0, r3
 800df66:	f002 fbd4 	bl	8010712 <SDIO_GetResponse>
 800df6a:	4602      	mov	r2, r0
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df76:	2b03      	cmp	r3, #3
 800df78:	d00d      	beq.n	800df96 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f107 020e 	add.w	r2, r7, #14
 800df82:	4611      	mov	r1, r2
 800df84:	4618      	mov	r0, r3
 800df86:	f002 fdf4 	bl	8010b72 <SDMMC_CmdSetRelAdd>
 800df8a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800df8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <SD_InitCard+0xae>
    {
      return errorstate;
 800df92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df94:	e071      	b.n	800e07a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df9a:	2b03      	cmp	r3, #3
 800df9c:	d036      	beq.n	800e00c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800df9e:	89fb      	ldrh	r3, [r7, #14]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681a      	ldr	r2, [r3, #0]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfae:	041b      	lsls	r3, r3, #16
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	4610      	mov	r0, r2
 800dfb4:	f002 fdbe 	bl	8010b34 <SDMMC_CmdSendCSD>
 800dfb8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc2:	e05a      	b.n	800e07a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	2100      	movs	r1, #0
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f002 fba1 	bl	8010712 <SDIO_GetResponse>
 800dfd0:	4602      	mov	r2, r0
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	2104      	movs	r1, #4
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f002 fb98 	bl	8010712 <SDIO_GetResponse>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	2108      	movs	r1, #8
 800dfee:	4618      	mov	r0, r3
 800dff0:	f002 fb8f 	bl	8010712 <SDIO_GetResponse>
 800dff4:	4602      	mov	r2, r0
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	210c      	movs	r1, #12
 800e000:	4618      	mov	r0, r3
 800e002:	f002 fb86 	bl	8010712 <SDIO_GetResponse>
 800e006:	4602      	mov	r2, r0
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	2104      	movs	r1, #4
 800e012:	4618      	mov	r0, r3
 800e014:	f002 fb7d 	bl	8010712 <SDIO_GetResponse>
 800e018:	4603      	mov	r3, r0
 800e01a:	0d1a      	lsrs	r2, r3, #20
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e020:	f107 0310 	add.w	r3, r7, #16
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff fbe4 	bl	800d7f4 <HAL_SD_GetCardCSD>
 800e02c:	4603      	mov	r3, r0
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e032:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e036:	e020      	b.n	800e07a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6819      	ldr	r1, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e040:	041b      	lsls	r3, r3, #16
 800e042:	f04f 0400 	mov.w	r4, #0
 800e046:	461a      	mov	r2, r3
 800e048:	4623      	mov	r3, r4
 800e04a:	4608      	mov	r0, r1
 800e04c:	f002 fc6c 	bl	8010928 <SDMMC_CmdSelDesel>
 800e050:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e054:	2b00      	cmp	r3, #0
 800e056:	d001      	beq.n	800e05c <SD_InitCard+0x174>
  {
    return errorstate;
 800e058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e05a:	e00e      	b.n	800e07a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681d      	ldr	r5, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	466c      	mov	r4, sp
 800e064:	f103 0210 	add.w	r2, r3, #16
 800e068:	ca07      	ldmia	r2, {r0, r1, r2}
 800e06a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e06e:	3304      	adds	r3, #4
 800e070:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e072:	4628      	mov	r0, r5
 800e074:	f002 fab0 	bl	80105d8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e078:	2300      	movs	r3, #0
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3740      	adds	r7, #64	; 0x40
 800e07e:	46bd      	mov	sp, r7
 800e080:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800e084 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b086      	sub	sp, #24
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e08c:	2300      	movs	r3, #0
 800e08e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e090:	2300      	movs	r3, #0
 800e092:	617b      	str	r3, [r7, #20]
 800e094:	2300      	movs	r3, #0
 800e096:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	4618      	mov	r0, r3
 800e09e:	f002 fc66 	bl	801096e <SDMMC_CmdGoIdleState>
 800e0a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d001      	beq.n	800e0ae <SD_PowerON+0x2a>
  {
    return errorstate;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	e072      	b.n	800e194 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f002 fc79 	bl	80109aa <SDMMC_CmdOperCond>
 800e0b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00d      	beq.n	800e0dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f002 fc4f 	bl	801096e <SDMMC_CmdGoIdleState>
 800e0d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d004      	beq.n	800e0e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	e05b      	b.n	800e194 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	2201      	movs	r2, #1
 800e0e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d137      	bne.n	800e15a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f002 fc79 	bl	80109e8 <SDMMC_CmdAppCommand>
 800e0f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d02d      	beq.n	800e15a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e102:	e047      	b.n	800e194 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	2100      	movs	r1, #0
 800e10a:	4618      	mov	r0, r3
 800e10c:	f002 fc6c 	bl	80109e8 <SDMMC_CmdAppCommand>
 800e110:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <SD_PowerON+0x98>
    {
      return errorstate;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	e03b      	b.n	800e194 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	491e      	ldr	r1, [pc, #120]	; (800e19c <SD_PowerON+0x118>)
 800e122:	4618      	mov	r0, r3
 800e124:	f002 fc82 	bl	8010a2c <SDMMC_CmdAppOperCommand>
 800e128:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e130:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e134:	e02e      	b.n	800e194 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	2100      	movs	r1, #0
 800e13c:	4618      	mov	r0, r3
 800e13e:	f002 fae8 	bl	8010712 <SDIO_GetResponse>
 800e142:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	0fdb      	lsrs	r3, r3, #31
 800e148:	2b01      	cmp	r3, #1
 800e14a:	d101      	bne.n	800e150 <SD_PowerON+0xcc>
 800e14c:	2301      	movs	r3, #1
 800e14e:	e000      	b.n	800e152 <SD_PowerON+0xce>
 800e150:	2300      	movs	r3, #0
 800e152:	613b      	str	r3, [r7, #16]

    count++;
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	3301      	adds	r3, #1
 800e158:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e160:	4293      	cmp	r3, r2
 800e162:	d802      	bhi.n	800e16a <SD_PowerON+0xe6>
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d0cc      	beq.n	800e104 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e170:	4293      	cmp	r3, r2
 800e172:	d902      	bls.n	800e17a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e174:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e178:	e00c      	b.n	800e194 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e180:	2b00      	cmp	r3, #0
 800e182:	d003      	beq.n	800e18c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	645a      	str	r2, [r3, #68]	; 0x44
 800e18a:	e002      	b.n	800e192 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2200      	movs	r2, #0
 800e190:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3718      	adds	r7, #24
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	c1100000 	.word	0xc1100000

0800e1a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
 800e1a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d102      	bne.n	800e1b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e1b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e1b4:	e018      	b.n	800e1e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1be:	041b      	lsls	r3, r3, #16
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	4610      	mov	r0, r2
 800e1c4:	f002 fcf6 	bl	8010bb4 <SDMMC_CmdSendStatus>
 800e1c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d001      	beq.n	800e1d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	e009      	b.n	800e1e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	2100      	movs	r1, #0
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f002 fa99 	bl	8010712 <SDIO_GetResponse>
 800e1e0:	4602      	mov	r2, r0
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3710      	adds	r7, #16
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}

0800e1f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e1f0:	b580      	push	{r7, lr}
 800e1f2:	b086      	sub	sp, #24
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	2100      	movs	r1, #0
 800e206:	4618      	mov	r0, r3
 800e208:	f002 fa83 	bl	8010712 <SDIO_GetResponse>
 800e20c:	4603      	mov	r3, r0
 800e20e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e212:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e216:	d102      	bne.n	800e21e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e218:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e21c:	e02f      	b.n	800e27e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e21e:	f107 030c 	add.w	r3, r7, #12
 800e222:	4619      	mov	r1, r3
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 f879 	bl	800e31c <SD_FindSCR>
 800e22a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e22c:	697b      	ldr	r3, [r7, #20]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d001      	beq.n	800e236 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	e023      	b.n	800e27e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d01c      	beq.n	800e27a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681a      	ldr	r2, [r3, #0]
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e248:	041b      	lsls	r3, r3, #16
 800e24a:	4619      	mov	r1, r3
 800e24c:	4610      	mov	r0, r2
 800e24e:	f002 fbcb 	bl	80109e8 <SDMMC_CmdAppCommand>
 800e252:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d001      	beq.n	800e25e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e25a:	697b      	ldr	r3, [r7, #20]
 800e25c:	e00f      	b.n	800e27e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	2102      	movs	r1, #2
 800e264:	4618      	mov	r0, r3
 800e266:	f002 fc04 	bl	8010a72 <SDMMC_CmdBusWidth>
 800e26a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d001      	beq.n	800e276 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	e003      	b.n	800e27e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e276:	2300      	movs	r3, #0
 800e278:	e001      	b.n	800e27e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e27a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3718      	adds	r7, #24
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b086      	sub	sp, #24
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e28e:	2300      	movs	r3, #0
 800e290:	60fb      	str	r3, [r7, #12]
 800e292:	2300      	movs	r3, #0
 800e294:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	2100      	movs	r1, #0
 800e29c:	4618      	mov	r0, r3
 800e29e:	f002 fa38 	bl	8010712 <SDIO_GetResponse>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2ac:	d102      	bne.n	800e2b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2b2:	e02f      	b.n	800e314 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e2b4:	f107 030c 	add.w	r3, r7, #12
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 f82e 	bl	800e31c <SD_FindSCR>
 800e2c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d001      	beq.n	800e2cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	e023      	b.n	800e314 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d01c      	beq.n	800e310 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2de:	041b      	lsls	r3, r3, #16
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f002 fb80 	bl	80109e8 <SDMMC_CmdAppCommand>
 800e2e8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d001      	beq.n	800e2f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	e00f      	b.n	800e314 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2100      	movs	r1, #0
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f002 fbb9 	bl	8010a72 <SDMMC_CmdBusWidth>
 800e300:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d001      	beq.n	800e30c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	e003      	b.n	800e314 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e30c:	2300      	movs	r3, #0
 800e30e:	e001      	b.n	800e314 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e310:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e314:	4618      	mov	r0, r3
 800e316:	3718      	adds	r7, #24
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e31c:	b590      	push	{r4, r7, lr}
 800e31e:	b08f      	sub	sp, #60	; 0x3c
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e326:	f7fb fd7b 	bl	8009e20 <HAL_GetTick>
 800e32a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e32c:	2300      	movs	r3, #0
 800e32e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e330:	2300      	movs	r3, #0
 800e332:	60bb      	str	r3, [r7, #8]
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2108      	movs	r1, #8
 800e342:	4618      	mov	r0, r3
 800e344:	f002 fa24 	bl	8010790 <SDMMC_CmdBlockLength>
 800e348:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d001      	beq.n	800e354 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e352:	e0a9      	b.n	800e4a8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e35c:	041b      	lsls	r3, r3, #16
 800e35e:	4619      	mov	r1, r3
 800e360:	4610      	mov	r0, r2
 800e362:	f002 fb41 	bl	80109e8 <SDMMC_CmdAppCommand>
 800e366:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e370:	e09a      	b.n	800e4a8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e372:	f04f 33ff 	mov.w	r3, #4294967295
 800e376:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e378:	2308      	movs	r3, #8
 800e37a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e37c:	2330      	movs	r3, #48	; 0x30
 800e37e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e380:	2302      	movs	r3, #2
 800e382:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e384:	2300      	movs	r3, #0
 800e386:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e388:	2301      	movs	r3, #1
 800e38a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	f107 0210 	add.w	r2, r7, #16
 800e394:	4611      	mov	r1, r2
 800e396:	4618      	mov	r0, r3
 800e398:	f002 f9ce 	bl	8010738 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f002 fb88 	bl	8010ab6 <SDMMC_CmdSendSCR>
 800e3a6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d022      	beq.n	800e3f4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3b0:	e07a      	b.n	800e4a8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d00e      	beq.n	800e3de <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6819      	ldr	r1, [r3, #0]
 800e3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	f107 0208 	add.w	r2, r7, #8
 800e3cc:	18d4      	adds	r4, r2, r3
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	f002 f92d 	bl	801062e <SDIO_ReadFIFO>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	6023      	str	r3, [r4, #0]
      index++;
 800e3d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3da:	3301      	adds	r3, #1
 800e3dc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3de:	f7fb fd1f 	bl	8009e20 <HAL_GetTick>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ec:	d102      	bne.n	800e3f4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e3ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e3f2:	e059      	b.n	800e4a8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3fa:	f240 432a 	movw	r3, #1066	; 0x42a
 800e3fe:	4013      	ands	r3, r2
 800e400:	2b00      	cmp	r3, #0
 800e402:	d0d6      	beq.n	800e3b2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e40a:	f003 0308 	and.w	r3, r3, #8
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d005      	beq.n	800e41e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2208      	movs	r2, #8
 800e418:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e41a:	2308      	movs	r3, #8
 800e41c:	e044      	b.n	800e4a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e424:	f003 0302 	and.w	r3, r3, #2
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d005      	beq.n	800e438 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2202      	movs	r2, #2
 800e432:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e434:	2302      	movs	r3, #2
 800e436:	e037      	b.n	800e4a8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e43e:	f003 0320 	and.w	r3, r3, #32
 800e442:	2b00      	cmp	r3, #0
 800e444:	d005      	beq.n	800e452 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2220      	movs	r2, #32
 800e44c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e44e:	2320      	movs	r3, #32
 800e450:	e02a      	b.n	800e4a8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f240 523a 	movw	r2, #1338	; 0x53a
 800e45a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	061a      	lsls	r2, r3, #24
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	021b      	lsls	r3, r3, #8
 800e464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e468:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	0a1b      	lsrs	r3, r3, #8
 800e46e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e472:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	0e1b      	lsrs	r3, r3, #24
 800e478:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47c:	601a      	str	r2, [r3, #0]
    scr++;
 800e47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e480:	3304      	adds	r3, #4
 800e482:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	061a      	lsls	r2, r3, #24
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	021b      	lsls	r3, r3, #8
 800e48c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e490:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	0a1b      	lsrs	r3, r3, #8
 800e496:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e49a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	0e1b      	lsrs	r3, r3, #24
 800e4a0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	373c      	adds	r7, #60	; 0x3c
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd90      	pop	{r4, r7, pc}

0800e4b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b086      	sub	sp, #24
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d03f      	beq.n	800e54a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	617b      	str	r3, [r7, #20]
 800e4ce:	e033      	b.n	800e538 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f002 f8aa 	bl	801062e <SDIO_ReadFIFO>
 800e4da:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	b2da      	uxtb	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	0a1b      	lsrs	r3, r3, #8
 800e4f4:	b2da      	uxtb	r2, r3
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e500:	693b      	ldr	r3, [r7, #16]
 800e502:	3b01      	subs	r3, #1
 800e504:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	0c1b      	lsrs	r3, r3, #16
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3301      	adds	r3, #1
 800e514:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	3b01      	subs	r3, #1
 800e51a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	0e1b      	lsrs	r3, r3, #24
 800e520:	b2da      	uxtb	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3301      	adds	r3, #1
 800e52a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	3b01      	subs	r3, #1
 800e530:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e532:	697b      	ldr	r3, [r7, #20]
 800e534:	3301      	adds	r3, #1
 800e536:	617b      	str	r3, [r7, #20]
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	2b07      	cmp	r3, #7
 800e53c:	d9c8      	bls.n	800e4d0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	693a      	ldr	r2, [r7, #16]
 800e548:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e54a:	bf00      	nop
 800e54c:	3718      	adds	r7, #24
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b086      	sub	sp, #24
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a1b      	ldr	r3, [r3, #32]
 800e55e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e564:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d043      	beq.n	800e5f4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e56c:	2300      	movs	r3, #0
 800e56e:	617b      	str	r3, [r7, #20]
 800e570:	e037      	b.n	800e5e2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	781b      	ldrb	r3, [r3, #0]
 800e576:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	3301      	adds	r3, #1
 800e57c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	3b01      	subs	r3, #1
 800e582:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	021a      	lsls	r2, r3, #8
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	4313      	orrs	r3, r2
 800e58e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	3301      	adds	r3, #1
 800e594:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	3b01      	subs	r3, #1
 800e59a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	041a      	lsls	r2, r3, #16
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	4313      	orrs	r3, r2
 800e5a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	3301      	adds	r3, #1
 800e5ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	061a      	lsls	r2, r3, #24
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3301      	adds	r3, #1
 800e5c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	f107 0208 	add.w	r2, r7, #8
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f002 f836 	bl	8010648 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	617b      	str	r3, [r7, #20]
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	2b07      	cmp	r3, #7
 800e5e6:	d9c4      	bls.n	800e572 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	68fa      	ldr	r2, [r7, #12]
 800e5ec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	693a      	ldr	r2, [r7, #16]
 800e5f2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e5f4:	bf00      	nop
 800e5f6:	3718      	adds	r7, #24
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d101      	bne.n	800e60e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	e056      	b.n	800e6bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2200      	movs	r2, #0
 800e612:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d106      	bne.n	800e62e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2200      	movs	r2, #0
 800e624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e628:	6878      	ldr	r0, [r7, #4]
 800e62a:	f7f8 fe83 	bl	8007334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2202      	movs	r2, #2
 800e632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e644:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	685a      	ldr	r2, [r3, #4]
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	431a      	orrs	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	431a      	orrs	r2, r3
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	431a      	orrs	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	695b      	ldr	r3, [r3, #20]
 800e660:	431a      	orrs	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	699b      	ldr	r3, [r3, #24]
 800e666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e66a:	431a      	orrs	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	69db      	ldr	r3, [r3, #28]
 800e670:	431a      	orrs	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6a1b      	ldr	r3, [r3, #32]
 800e676:	ea42 0103 	orr.w	r1, r2, r3
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	430a      	orrs	r2, r1
 800e684:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	699b      	ldr	r3, [r3, #24]
 800e68a:	0c1b      	lsrs	r3, r3, #16
 800e68c:	f003 0104 	and.w	r1, r3, #4
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	430a      	orrs	r2, r1
 800e69a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	69da      	ldr	r2, [r3, #28]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e6aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2201      	movs	r2, #1
 800e6b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b088      	sub	sp, #32
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	603b      	str	r3, [r7, #0]
 800e6d0:	4613      	mov	r3, r2
 800e6d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d101      	bne.n	800e6e6 <HAL_SPI_Transmit+0x22>
 800e6e2:	2302      	movs	r3, #2
 800e6e4:	e11e      	b.n	800e924 <HAL_SPI_Transmit+0x260>
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e6ee:	f7fb fb97 	bl	8009e20 <HAL_GetTick>
 800e6f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e6f4:	88fb      	ldrh	r3, [r7, #6]
 800e6f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	2b01      	cmp	r3, #1
 800e702:	d002      	beq.n	800e70a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e704:	2302      	movs	r3, #2
 800e706:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e708:	e103      	b.n	800e912 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <HAL_SPI_Transmit+0x52>
 800e710:	88fb      	ldrh	r3, [r7, #6]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d102      	bne.n	800e71c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e716:	2301      	movs	r3, #1
 800e718:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e71a:	e0fa      	b.n	800e912 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2203      	movs	r2, #3
 800e720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	2200      	movs	r2, #0
 800e728:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	88fa      	ldrh	r2, [r7, #6]
 800e734:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	88fa      	ldrh	r2, [r7, #6]
 800e73a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	2200      	movs	r2, #0
 800e740:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	2200      	movs	r2, #0
 800e74c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2200      	movs	r2, #0
 800e752:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e762:	d107      	bne.n	800e774 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e772:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e77e:	2b40      	cmp	r3, #64	; 0x40
 800e780:	d007      	beq.n	800e792 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	681a      	ldr	r2, [r3, #0]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e790:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e79a:	d14b      	bne.n	800e834 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <HAL_SPI_Transmit+0xe6>
 800e7a4:	8afb      	ldrh	r3, [r7, #22]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d13e      	bne.n	800e828 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ae:	881a      	ldrh	r2, [r3, #0]
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ba:	1c9a      	adds	r2, r3, #2
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7c4:	b29b      	uxth	r3, r3
 800e7c6:	3b01      	subs	r3, #1
 800e7c8:	b29a      	uxth	r2, r3
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e7ce:	e02b      	b.n	800e828 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	f003 0302 	and.w	r3, r3, #2
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d112      	bne.n	800e804 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e2:	881a      	ldrh	r2, [r3, #0]
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ee:	1c9a      	adds	r2, r3, #2
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e7f8:	b29b      	uxth	r3, r3
 800e7fa:	3b01      	subs	r3, #1
 800e7fc:	b29a      	uxth	r2, r3
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	86da      	strh	r2, [r3, #54]	; 0x36
 800e802:	e011      	b.n	800e828 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e804:	f7fb fb0c 	bl	8009e20 <HAL_GetTick>
 800e808:	4602      	mov	r2, r0
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	683a      	ldr	r2, [r7, #0]
 800e810:	429a      	cmp	r2, r3
 800e812:	d803      	bhi.n	800e81c <HAL_SPI_Transmit+0x158>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81a:	d102      	bne.n	800e822 <HAL_SPI_Transmit+0x15e>
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d102      	bne.n	800e828 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e822:	2303      	movs	r3, #3
 800e824:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e826:	e074      	b.n	800e912 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d1ce      	bne.n	800e7d0 <HAL_SPI_Transmit+0x10c>
 800e832:	e04c      	b.n	800e8ce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	685b      	ldr	r3, [r3, #4]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d002      	beq.n	800e842 <HAL_SPI_Transmit+0x17e>
 800e83c:	8afb      	ldrh	r3, [r7, #22]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d140      	bne.n	800e8c4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	330c      	adds	r3, #12
 800e84c:	7812      	ldrb	r2, [r2, #0]
 800e84e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e85e:	b29b      	uxth	r3, r3
 800e860:	3b01      	subs	r3, #1
 800e862:	b29a      	uxth	r2, r3
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e868:	e02c      	b.n	800e8c4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	689b      	ldr	r3, [r3, #8]
 800e870:	f003 0302 	and.w	r3, r3, #2
 800e874:	2b02      	cmp	r3, #2
 800e876:	d113      	bne.n	800e8a0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	330c      	adds	r3, #12
 800e882:	7812      	ldrb	r2, [r2, #0]
 800e884:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e88a:	1c5a      	adds	r2, r3, #1
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e894:	b29b      	uxth	r3, r3
 800e896:	3b01      	subs	r3, #1
 800e898:	b29a      	uxth	r2, r3
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	86da      	strh	r2, [r3, #54]	; 0x36
 800e89e:	e011      	b.n	800e8c4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8a0:	f7fb fabe 	bl	8009e20 <HAL_GetTick>
 800e8a4:	4602      	mov	r2, r0
 800e8a6:	69bb      	ldr	r3, [r7, #24]
 800e8a8:	1ad3      	subs	r3, r2, r3
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d803      	bhi.n	800e8b8 <HAL_SPI_Transmit+0x1f4>
 800e8b0:	683b      	ldr	r3, [r7, #0]
 800e8b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8b6:	d102      	bne.n	800e8be <HAL_SPI_Transmit+0x1fa>
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d102      	bne.n	800e8c4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e8be:	2303      	movs	r3, #3
 800e8c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e8c2:	e026      	b.n	800e912 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d1cd      	bne.n	800e86a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e8ce:	69ba      	ldr	r2, [r7, #24]
 800e8d0:	6839      	ldr	r1, [r7, #0]
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f000 fba4 	bl	800f020 <SPI_EndRxTxTransaction>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d002      	beq.n	800e8e4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2220      	movs	r2, #32
 800e8e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d10a      	bne.n	800e902 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	613b      	str	r3, [r7, #16]
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	613b      	str	r3, [r7, #16]
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	689b      	ldr	r3, [r3, #8]
 800e8fe:	613b      	str	r3, [r7, #16]
 800e900:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e906:	2b00      	cmp	r3, #0
 800e908:	d002      	beq.n	800e910 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e90a:	2301      	movs	r3, #1
 800e90c:	77fb      	strb	r3, [r7, #31]
 800e90e:	e000      	b.n	800e912 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e910:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2201      	movs	r2, #1
 800e916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	2200      	movs	r2, #0
 800e91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e922:	7ffb      	ldrb	r3, [r7, #31]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3720      	adds	r7, #32
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b088      	sub	sp, #32
 800e930:	af02      	add	r7, sp, #8
 800e932:	60f8      	str	r0, [r7, #12]
 800e934:	60b9      	str	r1, [r7, #8]
 800e936:	603b      	str	r3, [r7, #0]
 800e938:	4613      	mov	r3, r2
 800e93a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e93c:	2300      	movs	r3, #0
 800e93e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	685b      	ldr	r3, [r3, #4]
 800e944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e948:	d112      	bne.n	800e970 <HAL_SPI_Receive+0x44>
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d10e      	bne.n	800e970 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	2204      	movs	r2, #4
 800e956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e95a:	88fa      	ldrh	r2, [r7, #6]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	4613      	mov	r3, r2
 800e962:	68ba      	ldr	r2, [r7, #8]
 800e964:	68b9      	ldr	r1, [r7, #8]
 800e966:	68f8      	ldr	r0, [r7, #12]
 800e968:	f000 f8e9 	bl	800eb3e <HAL_SPI_TransmitReceive>
 800e96c:	4603      	mov	r3, r0
 800e96e:	e0e2      	b.n	800eb36 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e976:	2b01      	cmp	r3, #1
 800e978:	d101      	bne.n	800e97e <HAL_SPI_Receive+0x52>
 800e97a:	2302      	movs	r3, #2
 800e97c:	e0db      	b.n	800eb36 <HAL_SPI_Receive+0x20a>
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2201      	movs	r2, #1
 800e982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e986:	f7fb fa4b 	bl	8009e20 <HAL_GetTick>
 800e98a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b01      	cmp	r3, #1
 800e996:	d002      	beq.n	800e99e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e998:	2302      	movs	r3, #2
 800e99a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e99c:	e0c2      	b.n	800eb24 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e99e:	68bb      	ldr	r3, [r7, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <HAL_SPI_Receive+0x7e>
 800e9a4:	88fb      	ldrh	r3, [r7, #6]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d102      	bne.n	800e9b0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e9ae:	e0b9      	b.n	800eb24 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2204      	movs	r2, #4
 800e9b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	88fa      	ldrh	r2, [r7, #6]
 800e9c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	88fa      	ldrh	r2, [r7, #6]
 800e9ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	689b      	ldr	r3, [r3, #8]
 800e9f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9f6:	d107      	bne.n	800ea08 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ea06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea12:	2b40      	cmp	r3, #64	; 0x40
 800ea14:	d007      	beq.n	800ea26 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ea24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	68db      	ldr	r3, [r3, #12]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d162      	bne.n	800eaf4 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800ea2e:	e02e      	b.n	800ea8e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	f003 0301 	and.w	r3, r3, #1
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d115      	bne.n	800ea6a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f103 020c 	add.w	r2, r3, #12
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea4a:	7812      	ldrb	r2, [r2, #0]
 800ea4c:	b2d2      	uxtb	r2, r2
 800ea4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea54:	1c5a      	adds	r2, r3, #1
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	3b01      	subs	r3, #1
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea68:	e011      	b.n	800ea8e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea6a:	f7fb f9d9 	bl	8009e20 <HAL_GetTick>
 800ea6e:	4602      	mov	r2, r0
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	1ad3      	subs	r3, r2, r3
 800ea74:	683a      	ldr	r2, [r7, #0]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d803      	bhi.n	800ea82 <HAL_SPI_Receive+0x156>
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea80:	d102      	bne.n	800ea88 <HAL_SPI_Receive+0x15c>
 800ea82:	683b      	ldr	r3, [r7, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d102      	bne.n	800ea8e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800ea88:	2303      	movs	r3, #3
 800ea8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ea8c:	e04a      	b.n	800eb24 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d1cb      	bne.n	800ea30 <HAL_SPI_Receive+0x104>
 800ea98:	e031      	b.n	800eafe <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	689b      	ldr	r3, [r3, #8]
 800eaa0:	f003 0301 	and.w	r3, r3, #1
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d113      	bne.n	800ead0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68da      	ldr	r2, [r3, #12]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab2:	b292      	uxth	r2, r2
 800eab4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaba:	1c9a      	adds	r2, r3, #2
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	3b01      	subs	r3, #1
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eace:	e011      	b.n	800eaf4 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ead0:	f7fb f9a6 	bl	8009e20 <HAL_GetTick>
 800ead4:	4602      	mov	r2, r0
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d803      	bhi.n	800eae8 <HAL_SPI_Receive+0x1bc>
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae6:	d102      	bne.n	800eaee <HAL_SPI_Receive+0x1c2>
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d102      	bne.n	800eaf4 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800eaee:	2303      	movs	r3, #3
 800eaf0:	75fb      	strb	r3, [r7, #23]
          goto error;
 800eaf2:	e017      	b.n	800eb24 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1cd      	bne.n	800ea9a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f000 fa27 	bl	800ef56 <SPI_EndRxTransaction>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d002      	beq.n	800eb14 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2220      	movs	r2, #32
 800eb12:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d002      	beq.n	800eb22 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	75fb      	strb	r3, [r7, #23]
 800eb20:	e000      	b.n	800eb24 <HAL_SPI_Receive+0x1f8>
  }

error :
 800eb22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800eb34:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3718      	adds	r7, #24
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b08c      	sub	sp, #48	; 0x30
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	60f8      	str	r0, [r7, #12]
 800eb46:	60b9      	str	r1, [r7, #8]
 800eb48:	607a      	str	r2, [r7, #4]
 800eb4a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800eb4c:	2301      	movs	r3, #1
 800eb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800eb50:	2300      	movs	r3, #0
 800eb52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d101      	bne.n	800eb64 <HAL_SPI_TransmitReceive+0x26>
 800eb60:	2302      	movs	r3, #2
 800eb62:	e18a      	b.n	800ee7a <HAL_SPI_TransmitReceive+0x33c>
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2201      	movs	r2, #1
 800eb68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb6c:	f7fb f958 	bl	8009e20 <HAL_GetTick>
 800eb70:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800eb78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	685b      	ldr	r3, [r3, #4]
 800eb80:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800eb82:	887b      	ldrh	r3, [r7, #2]
 800eb84:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800eb86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d00f      	beq.n	800ebae <HAL_SPI_TransmitReceive+0x70>
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eb94:	d107      	bne.n	800eba6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	689b      	ldr	r3, [r3, #8]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d103      	bne.n	800eba6 <HAL_SPI_TransmitReceive+0x68>
 800eb9e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800eba2:	2b04      	cmp	r3, #4
 800eba4:	d003      	beq.n	800ebae <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800eba6:	2302      	movs	r3, #2
 800eba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebac:	e15b      	b.n	800ee66 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d005      	beq.n	800ebc0 <HAL_SPI_TransmitReceive+0x82>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d002      	beq.n	800ebc0 <HAL_SPI_TransmitReceive+0x82>
 800ebba:	887b      	ldrh	r3, [r7, #2]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d103      	bne.n	800ebc8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ebc6:	e14e      	b.n	800ee66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	2b04      	cmp	r3, #4
 800ebd2:	d003      	beq.n	800ebdc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2205      	movs	r2, #5
 800ebd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	887a      	ldrh	r2, [r7, #2]
 800ebec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	887a      	ldrh	r2, [r7, #2]
 800ebf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	68ba      	ldr	r2, [r7, #8]
 800ebf8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	887a      	ldrh	r2, [r7, #2]
 800ebfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	887a      	ldrh	r2, [r7, #2]
 800ec04:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1c:	2b40      	cmp	r3, #64	; 0x40
 800ec1e:	d007      	beq.n	800ec30 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ec2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ec38:	d178      	bne.n	800ed2c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d002      	beq.n	800ec48 <HAL_SPI_TransmitReceive+0x10a>
 800ec42:	8b7b      	ldrh	r3, [r7, #26]
 800ec44:	2b01      	cmp	r3, #1
 800ec46:	d166      	bne.n	800ed16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec4c:	881a      	ldrh	r2, [r3, #0]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec58:	1c9a      	adds	r2, r3, #2
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec62:	b29b      	uxth	r3, r3
 800ec64:	3b01      	subs	r3, #1
 800ec66:	b29a      	uxth	r2, r3
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec6c:	e053      	b.n	800ed16 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	689b      	ldr	r3, [r3, #8]
 800ec74:	f003 0302 	and.w	r3, r3, #2
 800ec78:	2b02      	cmp	r3, #2
 800ec7a:	d11b      	bne.n	800ecb4 <HAL_SPI_TransmitReceive+0x176>
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec80:	b29b      	uxth	r3, r3
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d016      	beq.n	800ecb4 <HAL_SPI_TransmitReceive+0x176>
 800ec86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec88:	2b01      	cmp	r3, #1
 800ec8a:	d113      	bne.n	800ecb4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec90:	881a      	ldrh	r2, [r3, #0]
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec9c:	1c9a      	adds	r2, r3, #2
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eca6:	b29b      	uxth	r3, r3
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	b29a      	uxth	r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	f003 0301 	and.w	r3, r3, #1
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d119      	bne.n	800ecf6 <HAL_SPI_TransmitReceive+0x1b8>
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ecc6:	b29b      	uxth	r3, r3
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d014      	beq.n	800ecf6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	68da      	ldr	r2, [r3, #12]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecd6:	b292      	uxth	r2, r2
 800ecd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecde:	1c9a      	adds	r2, r3, #2
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	3b01      	subs	r3, #1
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ecf6:	f7fb f893 	bl	8009e20 <HAL_GetTick>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecfe:	1ad3      	subs	r3, r2, r3
 800ed00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d807      	bhi.n	800ed16 <HAL_SPI_TransmitReceive+0x1d8>
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed0c:	d003      	beq.n	800ed16 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ed14:	e0a7      	b.n	800ee66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed1a:	b29b      	uxth	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1a6      	bne.n	800ec6e <HAL_SPI_TransmitReceive+0x130>
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed24:	b29b      	uxth	r3, r3
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d1a1      	bne.n	800ec6e <HAL_SPI_TransmitReceive+0x130>
 800ed2a:	e07c      	b.n	800ee26 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d002      	beq.n	800ed3a <HAL_SPI_TransmitReceive+0x1fc>
 800ed34:	8b7b      	ldrh	r3, [r7, #26]
 800ed36:	2b01      	cmp	r3, #1
 800ed38:	d16b      	bne.n	800ee12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	330c      	adds	r3, #12
 800ed44:	7812      	ldrb	r2, [r2, #0]
 800ed46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed4c:	1c5a      	adds	r2, r3, #1
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	3b01      	subs	r3, #1
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed60:	e057      	b.n	800ee12 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	689b      	ldr	r3, [r3, #8]
 800ed68:	f003 0302 	and.w	r3, r3, #2
 800ed6c:	2b02      	cmp	r3, #2
 800ed6e:	d11c      	bne.n	800edaa <HAL_SPI_TransmitReceive+0x26c>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed74:	b29b      	uxth	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d017      	beq.n	800edaa <HAL_SPI_TransmitReceive+0x26c>
 800ed7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d114      	bne.n	800edaa <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	330c      	adds	r3, #12
 800ed8a:	7812      	ldrb	r2, [r2, #0]
 800ed8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed92:	1c5a      	adds	r2, r3, #1
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	3b01      	subs	r3, #1
 800eda0:	b29a      	uxth	r2, r3
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eda6:	2300      	movs	r3, #0
 800eda8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	f003 0301 	and.w	r3, r3, #1
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d119      	bne.n	800edec <HAL_SPI_TransmitReceive+0x2ae>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edbc:	b29b      	uxth	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d014      	beq.n	800edec <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	68da      	ldr	r2, [r3, #12]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edcc:	b2d2      	uxtb	r2, r2
 800edce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edd4:	1c5a      	adds	r2, r3, #1
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edde:	b29b      	uxth	r3, r3
 800ede0:	3b01      	subs	r3, #1
 800ede2:	b29a      	uxth	r2, r3
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ede8:	2301      	movs	r3, #1
 800edea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800edec:	f7fb f818 	bl	8009e20 <HAL_GetTick>
 800edf0:	4602      	mov	r2, r0
 800edf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf4:	1ad3      	subs	r3, r2, r3
 800edf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edf8:	429a      	cmp	r2, r3
 800edfa:	d803      	bhi.n	800ee04 <HAL_SPI_TransmitReceive+0x2c6>
 800edfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee02:	d102      	bne.n	800ee0a <HAL_SPI_TransmitReceive+0x2cc>
 800ee04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d103      	bne.n	800ee12 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ee0a:	2303      	movs	r3, #3
 800ee0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ee10:	e029      	b.n	800ee66 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d1a2      	bne.n	800ed62 <HAL_SPI_TransmitReceive+0x224>
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d19d      	bne.n	800ed62 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ee26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 f8f8 	bl	800f020 <SPI_EndRxTxTransaction>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d006      	beq.n	800ee44 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ee36:	2301      	movs	r3, #1
 800ee38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	2220      	movs	r2, #32
 800ee40:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ee42:	e010      	b.n	800ee66 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	689b      	ldr	r3, [r3, #8]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10b      	bne.n	800ee64 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	617b      	str	r3, [r7, #20]
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68db      	ldr	r3, [r3, #12]
 800ee56:	617b      	str	r3, [r7, #20]
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	689b      	ldr	r3, [r3, #8]
 800ee5e:	617b      	str	r3, [r7, #20]
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	e000      	b.n	800ee66 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ee64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2201      	movs	r2, #1
 800ee6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	2200      	movs	r2, #0
 800ee72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ee76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3730      	adds	r7, #48	; 0x30
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b084      	sub	sp, #16
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	60f8      	str	r0, [r7, #12]
 800ee8a:	60b9      	str	r1, [r7, #8]
 800ee8c:	603b      	str	r3, [r7, #0]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ee92:	e04c      	b.n	800ef2e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee9a:	d048      	beq.n	800ef2e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ee9c:	f7fa ffc0 	bl	8009e20 <HAL_GetTick>
 800eea0:	4602      	mov	r2, r0
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	1ad3      	subs	r3, r2, r3
 800eea6:	683a      	ldr	r2, [r7, #0]
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d902      	bls.n	800eeb2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d13d      	bne.n	800ef2e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800eec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eeca:	d111      	bne.n	800eef0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	689b      	ldr	r3, [r3, #8]
 800eed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eed4:	d004      	beq.n	800eee0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	689b      	ldr	r3, [r3, #8]
 800eeda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eede:	d107      	bne.n	800eef0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	681a      	ldr	r2, [r3, #0]
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eeee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eef8:	d10f      	bne.n	800ef1a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	681a      	ldr	r2, [r3, #0]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ef18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	2200      	movs	r2, #0
 800ef26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800ef2a:	2303      	movs	r3, #3
 800ef2c:	e00f      	b.n	800ef4e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689a      	ldr	r2, [r3, #8]
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	4013      	ands	r3, r2
 800ef38:	68ba      	ldr	r2, [r7, #8]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	bf0c      	ite	eq
 800ef3e:	2301      	moveq	r3, #1
 800ef40:	2300      	movne	r3, #0
 800ef42:	b2db      	uxtb	r3, r3
 800ef44:	461a      	mov	r2, r3
 800ef46:	79fb      	ldrb	r3, [r7, #7]
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d1a3      	bne.n	800ee94 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}

0800ef56 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800ef56:	b580      	push	{r7, lr}
 800ef58:	b086      	sub	sp, #24
 800ef5a:	af02      	add	r7, sp, #8
 800ef5c:	60f8      	str	r0, [r7, #12]
 800ef5e:	60b9      	str	r1, [r7, #8]
 800ef60:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef6a:	d111      	bne.n	800ef90 <SPI_EndRxTransaction+0x3a>
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	689b      	ldr	r3, [r3, #8]
 800ef70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef74:	d004      	beq.n	800ef80 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	689b      	ldr	r3, [r3, #8]
 800ef7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef7e:	d107      	bne.n	800ef90 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ef8e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	685b      	ldr	r3, [r3, #4]
 800ef94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ef98:	d12a      	bne.n	800eff0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	689b      	ldr	r3, [r3, #8]
 800ef9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800efa2:	d012      	beq.n	800efca <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	2200      	movs	r2, #0
 800efac:	2180      	movs	r1, #128	; 0x80
 800efae:	68f8      	ldr	r0, [r7, #12]
 800efb0:	f7ff ff67 	bl	800ee82 <SPI_WaitFlagStateUntilTimeout>
 800efb4:	4603      	mov	r3, r0
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d02d      	beq.n	800f016 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efbe:	f043 0220 	orr.w	r2, r3, #32
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800efc6:	2303      	movs	r3, #3
 800efc8:	e026      	b.n	800f018 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	9300      	str	r3, [sp, #0]
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	2200      	movs	r2, #0
 800efd2:	2101      	movs	r1, #1
 800efd4:	68f8      	ldr	r0, [r7, #12]
 800efd6:	f7ff ff54 	bl	800ee82 <SPI_WaitFlagStateUntilTimeout>
 800efda:	4603      	mov	r3, r0
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d01a      	beq.n	800f016 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efe4:	f043 0220 	orr.w	r2, r3, #32
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800efec:	2303      	movs	r3, #3
 800efee:	e013      	b.n	800f018 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	2200      	movs	r2, #0
 800eff8:	2101      	movs	r1, #1
 800effa:	68f8      	ldr	r0, [r7, #12]
 800effc:	f7ff ff41 	bl	800ee82 <SPI_WaitFlagStateUntilTimeout>
 800f000:	4603      	mov	r3, r0
 800f002:	2b00      	cmp	r3, #0
 800f004:	d007      	beq.n	800f016 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f00a:	f043 0220 	orr.w	r2, r3, #32
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f012:	2303      	movs	r3, #3
 800f014:	e000      	b.n	800f018 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3710      	adds	r7, #16
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af02      	add	r7, sp, #8
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	60b9      	str	r1, [r7, #8]
 800f02a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800f02c:	4b1b      	ldr	r3, [pc, #108]	; (800f09c <SPI_EndRxTxTransaction+0x7c>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	4a1b      	ldr	r2, [pc, #108]	; (800f0a0 <SPI_EndRxTxTransaction+0x80>)
 800f032:	fba2 2303 	umull	r2, r3, r2, r3
 800f036:	0d5b      	lsrs	r3, r3, #21
 800f038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f03c:	fb02 f303 	mul.w	r3, r2, r3
 800f040:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f04a:	d112      	bne.n	800f072 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2200      	movs	r2, #0
 800f054:	2180      	movs	r1, #128	; 0x80
 800f056:	68f8      	ldr	r0, [r7, #12]
 800f058:	f7ff ff13 	bl	800ee82 <SPI_WaitFlagStateUntilTimeout>
 800f05c:	4603      	mov	r3, r0
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d016      	beq.n	800f090 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f066:	f043 0220 	orr.w	r2, r3, #32
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800f06e:	2303      	movs	r3, #3
 800f070:	e00f      	b.n	800f092 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d00a      	beq.n	800f08e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	3b01      	subs	r3, #1
 800f07c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	689b      	ldr	r3, [r3, #8]
 800f084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f088:	2b80      	cmp	r3, #128	; 0x80
 800f08a:	d0f2      	beq.n	800f072 <SPI_EndRxTxTransaction+0x52>
 800f08c:	e000      	b.n	800f090 <SPI_EndRxTxTransaction+0x70>
        break;
 800f08e:	bf00      	nop
  }

  return HAL_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3718      	adds	r7, #24
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	20000000 	.word	0x20000000
 800f0a0:	165e9f81 	.word	0x165e9f81

0800f0a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d101      	bne.n	800f0b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e01d      	b.n	800f0f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d106      	bne.n	800f0d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7f8 f9ee 	bl	80074ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2202      	movs	r2, #2
 800f0d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	3304      	adds	r3, #4
 800f0e0:	4619      	mov	r1, r3
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	f000 fb56 	bl	800f794 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	3708      	adds	r7, #8
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	bd80      	pop	{r7, pc}

0800f0fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b085      	sub	sp, #20
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	68da      	ldr	r2, [r3, #12]
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f042 0201 	orr.w	r2, r2, #1
 800f110:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	f003 0307 	and.w	r3, r3, #7
 800f11c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b06      	cmp	r3, #6
 800f122:	d007      	beq.n	800f134 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f042 0201 	orr.w	r2, r2, #1
 800f132:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3714      	adds	r7, #20
 800f13a:	46bd      	mov	sp, r7
 800f13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f140:	4770      	bx	lr

0800f142 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f142:	b580      	push	{r7, lr}
 800f144:	b082      	sub	sp, #8
 800f146:	af00      	add	r7, sp, #0
 800f148:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d101      	bne.n	800f154 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	e01d      	b.n	800f190 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d106      	bne.n	800f16e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f7f8 f92b 	bl	80073c4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2202      	movs	r2, #2
 800f172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681a      	ldr	r2, [r3, #0]
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3304      	adds	r3, #4
 800f17e:	4619      	mov	r1, r3
 800f180:	4610      	mov	r0, r2
 800f182:	f000 fb07 	bl	800f794 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2201      	movs	r2, #1
 800f18a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	2201      	movs	r2, #1
 800f1a8:	6839      	ldr	r1, [r7, #0]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 fd42 	bl	800fc34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	4a15      	ldr	r2, [pc, #84]	; (800f20c <HAL_TIM_PWM_Start+0x74>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	d004      	beq.n	800f1c4 <HAL_TIM_PWM_Start+0x2c>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	4a14      	ldr	r2, [pc, #80]	; (800f210 <HAL_TIM_PWM_Start+0x78>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d101      	bne.n	800f1c8 <HAL_TIM_PWM_Start+0x30>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e000      	b.n	800f1ca <HAL_TIM_PWM_Start+0x32>
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d007      	beq.n	800f1de <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f1dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	689b      	ldr	r3, [r3, #8]
 800f1e4:	f003 0307 	and.w	r3, r3, #7
 800f1e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2b06      	cmp	r3, #6
 800f1ee:	d007      	beq.n	800f200 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f042 0201 	orr.w	r2, r2, #1
 800f1fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3710      	adds	r7, #16
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}
 800f20a:	bf00      	nop
 800f20c:	40010000 	.word	0x40010000
 800f210:	40010400 	.word	0x40010400

0800f214 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b086      	sub	sp, #24
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d101      	bne.n	800f228 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f224:	2301      	movs	r3, #1
 800f226:	e083      	b.n	800f330 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	2b00      	cmp	r3, #0
 800f232:	d106      	bne.n	800f242 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f7f8 f9c5 	bl	80075cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	2202      	movs	r2, #2
 800f246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	689b      	ldr	r3, [r3, #8]
 800f250:	687a      	ldr	r2, [r7, #4]
 800f252:	6812      	ldr	r2, [r2, #0]
 800f254:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f258:	f023 0307 	bic.w	r3, r3, #7
 800f25c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	3304      	adds	r3, #4
 800f266:	4619      	mov	r1, r3
 800f268:	4610      	mov	r0, r2
 800f26a:	f000 fa93 	bl	800f794 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	689b      	ldr	r3, [r3, #8]
 800f274:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	699b      	ldr	r3, [r3, #24]
 800f27c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6a1b      	ldr	r3, [r3, #32]
 800f284:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	697a      	ldr	r2, [r7, #20]
 800f28c:	4313      	orrs	r3, r2
 800f28e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	689a      	ldr	r2, [r3, #8]
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	699b      	ldr	r3, [r3, #24]
 800f2a4:	021b      	lsls	r3, r3, #8
 800f2a6:	4313      	orrs	r3, r2
 800f2a8:	693a      	ldr	r2, [r7, #16]
 800f2aa:	4313      	orrs	r3, r2
 800f2ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f2ae:	693b      	ldr	r3, [r7, #16]
 800f2b0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f2b4:	f023 030c 	bic.w	r3, r3, #12
 800f2b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f2c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f2c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	68da      	ldr	r2, [r3, #12]
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	69db      	ldr	r3, [r3, #28]
 800f2ce:	021b      	lsls	r3, r3, #8
 800f2d0:	4313      	orrs	r3, r2
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	4313      	orrs	r3, r2
 800f2d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	691b      	ldr	r3, [r3, #16]
 800f2dc:	011a      	lsls	r2, r3, #4
 800f2de:	683b      	ldr	r3, [r7, #0]
 800f2e0:	6a1b      	ldr	r3, [r3, #32]
 800f2e2:	031b      	lsls	r3, r3, #12
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	693a      	ldr	r2, [r7, #16]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f2f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f2fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	685a      	ldr	r2, [r3, #4]
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	695b      	ldr	r3, [r3, #20]
 800f304:	011b      	lsls	r3, r3, #4
 800f306:	4313      	orrs	r3, r2
 800f308:	68fa      	ldr	r2, [r7, #12]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	697a      	ldr	r2, [r7, #20]
 800f314:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	693a      	ldr	r2, [r7, #16]
 800f31c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f32e:	2300      	movs	r3, #0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3718      	adds	r7, #24
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d002      	beq.n	800f34e <HAL_TIM_Encoder_Start+0x16>
 800f348:	2b04      	cmp	r3, #4
 800f34a:	d008      	beq.n	800f35e <HAL_TIM_Encoder_Start+0x26>
 800f34c:	e00f      	b.n	800f36e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2201      	movs	r2, #1
 800f354:	2100      	movs	r1, #0
 800f356:	4618      	mov	r0, r3
 800f358:	f000 fc6c 	bl	800fc34 <TIM_CCxChannelCmd>
      break;
 800f35c:	e016      	b.n	800f38c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2201      	movs	r2, #1
 800f364:	2104      	movs	r1, #4
 800f366:	4618      	mov	r0, r3
 800f368:	f000 fc64 	bl	800fc34 <TIM_CCxChannelCmd>
      break;
 800f36c:	e00e      	b.n	800f38c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	2201      	movs	r2, #1
 800f374:	2100      	movs	r1, #0
 800f376:	4618      	mov	r0, r3
 800f378:	f000 fc5c 	bl	800fc34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	2201      	movs	r2, #1
 800f382:	2104      	movs	r1, #4
 800f384:	4618      	mov	r0, r3
 800f386:	f000 fc55 	bl	800fc34 <TIM_CCxChannelCmd>
      break;
 800f38a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	681a      	ldr	r2, [r3, #0]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	f042 0201 	orr.w	r2, r2, #1
 800f39a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f39c:	2300      	movs	r3, #0
}
 800f39e:	4618      	mov	r0, r3
 800f3a0:	3708      	adds	r7, #8
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bd80      	pop	{r7, pc}

0800f3a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f3a6:	b580      	push	{r7, lr}
 800f3a8:	b082      	sub	sp, #8
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d122      	bne.n	800f402 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	f003 0302 	and.w	r3, r3, #2
 800f3c6:	2b02      	cmp	r3, #2
 800f3c8:	d11b      	bne.n	800f402 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f06f 0202 	mvn.w	r2, #2
 800f3d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2201      	movs	r2, #1
 800f3d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	699b      	ldr	r3, [r3, #24]
 800f3e0:	f003 0303 	and.w	r3, r3, #3
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d003      	beq.n	800f3f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f000 f9b5 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f3ee:	e005      	b.n	800f3fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f3f0:	6878      	ldr	r0, [r7, #4]
 800f3f2:	f000 f9a7 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f9b8 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	691b      	ldr	r3, [r3, #16]
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b04      	cmp	r3, #4
 800f40e:	d122      	bne.n	800f456 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	f003 0304 	and.w	r3, r3, #4
 800f41a:	2b04      	cmp	r3, #4
 800f41c:	d11b      	bne.n	800f456 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f06f 0204 	mvn.w	r2, #4
 800f426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2202      	movs	r2, #2
 800f42c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	699b      	ldr	r3, [r3, #24]
 800f434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d003      	beq.n	800f444 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f000 f98b 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f442:	e005      	b.n	800f450 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f97d 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f000 f98e 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	691b      	ldr	r3, [r3, #16]
 800f45c:	f003 0308 	and.w	r3, r3, #8
 800f460:	2b08      	cmp	r3, #8
 800f462:	d122      	bne.n	800f4aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	f003 0308 	and.w	r3, r3, #8
 800f46e:	2b08      	cmp	r3, #8
 800f470:	d11b      	bne.n	800f4aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f06f 0208 	mvn.w	r2, #8
 800f47a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	2204      	movs	r2, #4
 800f480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	69db      	ldr	r3, [r3, #28]
 800f488:	f003 0303 	and.w	r3, r3, #3
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d003      	beq.n	800f498 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f961 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f496:	e005      	b.n	800f4a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f953 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f964 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	691b      	ldr	r3, [r3, #16]
 800f4b0:	f003 0310 	and.w	r3, r3, #16
 800f4b4:	2b10      	cmp	r3, #16
 800f4b6:	d122      	bne.n	800f4fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	68db      	ldr	r3, [r3, #12]
 800f4be:	f003 0310 	and.w	r3, r3, #16
 800f4c2:	2b10      	cmp	r3, #16
 800f4c4:	d11b      	bne.n	800f4fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	f06f 0210 	mvn.w	r2, #16
 800f4ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2208      	movs	r2, #8
 800f4d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	69db      	ldr	r3, [r3, #28]
 800f4dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d003      	beq.n	800f4ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f937 	bl	800f758 <HAL_TIM_IC_CaptureCallback>
 800f4ea:	e005      	b.n	800f4f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f929 	bl	800f744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 f93a 	bl	800f76c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	691b      	ldr	r3, [r3, #16]
 800f504:	f003 0301 	and.w	r3, r3, #1
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d10e      	bne.n	800f52a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68db      	ldr	r3, [r3, #12]
 800f512:	f003 0301 	and.w	r3, r3, #1
 800f516:	2b01      	cmp	r3, #1
 800f518:	d107      	bne.n	800f52a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	f06f 0201 	mvn.w	r2, #1
 800f522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7f6 fd3b 	bl	8005fa0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	691b      	ldr	r3, [r3, #16]
 800f530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f534:	2b80      	cmp	r3, #128	; 0x80
 800f536:	d10e      	bne.n	800f556 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	68db      	ldr	r3, [r3, #12]
 800f53e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f542:	2b80      	cmp	r3, #128	; 0x80
 800f544:	d107      	bne.n	800f556 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f54e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f000 fc6d 	bl	800fe30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f560:	2b40      	cmp	r3, #64	; 0x40
 800f562:	d10e      	bne.n	800f582 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	68db      	ldr	r3, [r3, #12]
 800f56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f56e:	2b40      	cmp	r3, #64	; 0x40
 800f570:	d107      	bne.n	800f582 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f57a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 f8ff 	bl	800f780 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	f003 0320 	and.w	r3, r3, #32
 800f58c:	2b20      	cmp	r3, #32
 800f58e:	d10e      	bne.n	800f5ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	68db      	ldr	r3, [r3, #12]
 800f596:	f003 0320 	and.w	r3, r3, #32
 800f59a:	2b20      	cmp	r3, #32
 800f59c:	d107      	bne.n	800f5ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	f06f 0220 	mvn.w	r2, #32
 800f5a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 fc37 	bl	800fe1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f5ae:	bf00      	nop
 800f5b0:	3708      	adds	r7, #8
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
	...

0800f5b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d101      	bne.n	800f5d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	e0b4      	b.n	800f73c <HAL_TIM_PWM_ConfigChannel+0x184>
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	2202      	movs	r2, #2
 800f5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	2b0c      	cmp	r3, #12
 800f5e6:	f200 809f 	bhi.w	800f728 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f5ea:	a201      	add	r2, pc, #4	; (adr r2, 800f5f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5f0:	0800f625 	.word	0x0800f625
 800f5f4:	0800f729 	.word	0x0800f729
 800f5f8:	0800f729 	.word	0x0800f729
 800f5fc:	0800f729 	.word	0x0800f729
 800f600:	0800f665 	.word	0x0800f665
 800f604:	0800f729 	.word	0x0800f729
 800f608:	0800f729 	.word	0x0800f729
 800f60c:	0800f729 	.word	0x0800f729
 800f610:	0800f6a7 	.word	0x0800f6a7
 800f614:	0800f729 	.word	0x0800f729
 800f618:	0800f729 	.word	0x0800f729
 800f61c:	0800f729 	.word	0x0800f729
 800f620:	0800f6e7 	.word	0x0800f6e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	68b9      	ldr	r1, [r7, #8]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 f952 	bl	800f8d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	699a      	ldr	r2, [r3, #24]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	681b      	ldr	r3, [r3, #0]
 800f63a:	f042 0208 	orr.w	r2, r2, #8
 800f63e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	699a      	ldr	r2, [r3, #24]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	f022 0204 	bic.w	r2, r2, #4
 800f64e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	6999      	ldr	r1, [r3, #24]
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	691a      	ldr	r2, [r3, #16]
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	430a      	orrs	r2, r1
 800f660:	619a      	str	r2, [r3, #24]
      break;
 800f662:	e062      	b.n	800f72a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	68b9      	ldr	r1, [r7, #8]
 800f66a:	4618      	mov	r0, r3
 800f66c:	f000 f9a2 	bl	800f9b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	699a      	ldr	r2, [r3, #24]
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f67e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	699a      	ldr	r2, [r3, #24]
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f68e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	6999      	ldr	r1, [r3, #24]
 800f696:	68bb      	ldr	r3, [r7, #8]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	021a      	lsls	r2, r3, #8
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	430a      	orrs	r2, r1
 800f6a2:	619a      	str	r2, [r3, #24]
      break;
 800f6a4:	e041      	b.n	800f72a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	68b9      	ldr	r1, [r7, #8]
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f000 f9f7 	bl	800faa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	69da      	ldr	r2, [r3, #28]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	f042 0208 	orr.w	r2, r2, #8
 800f6c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	69da      	ldr	r2, [r3, #28]
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f022 0204 	bic.w	r2, r2, #4
 800f6d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	69d9      	ldr	r1, [r3, #28]
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	691a      	ldr	r2, [r3, #16]
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	430a      	orrs	r2, r1
 800f6e2:	61da      	str	r2, [r3, #28]
      break;
 800f6e4:	e021      	b.n	800f72a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	68b9      	ldr	r1, [r7, #8]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 fa4b 	bl	800fb88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	69da      	ldr	r2, [r3, #28]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	69da      	ldr	r2, [r3, #28]
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	69d9      	ldr	r1, [r3, #28]
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	691b      	ldr	r3, [r3, #16]
 800f71c:	021a      	lsls	r2, r3, #8
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	430a      	orrs	r2, r1
 800f724:	61da      	str	r2, [r3, #28]
      break;
 800f726:	e000      	b.n	800f72a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f728:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2201      	movs	r2, #1
 800f72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	2200      	movs	r2, #0
 800f736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f73a:	2300      	movs	r3, #0
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3710      	adds	r7, #16
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f744:	b480      	push	{r7}
 800f746:	b083      	sub	sp, #12
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f74c:	bf00      	nop
 800f74e:	370c      	adds	r7, #12
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr

0800f758 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f758:	b480      	push	{r7}
 800f75a:	b083      	sub	sp, #12
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f760:	bf00      	nop
 800f762:	370c      	adds	r7, #12
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b083      	sub	sp, #12
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f774:	bf00      	nop
 800f776:	370c      	adds	r7, #12
 800f778:	46bd      	mov	sp, r7
 800f77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77e:	4770      	bx	lr

0800f780 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f780:	b480      	push	{r7}
 800f782:	b083      	sub	sp, #12
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f788:	bf00      	nop
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
 800f79c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	4a40      	ldr	r2, [pc, #256]	; (800f8a8 <TIM_Base_SetConfig+0x114>)
 800f7a8:	4293      	cmp	r3, r2
 800f7aa:	d013      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7b2:	d00f      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	4a3d      	ldr	r2, [pc, #244]	; (800f8ac <TIM_Base_SetConfig+0x118>)
 800f7b8:	4293      	cmp	r3, r2
 800f7ba:	d00b      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	4a3c      	ldr	r2, [pc, #240]	; (800f8b0 <TIM_Base_SetConfig+0x11c>)
 800f7c0:	4293      	cmp	r3, r2
 800f7c2:	d007      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	4a3b      	ldr	r2, [pc, #236]	; (800f8b4 <TIM_Base_SetConfig+0x120>)
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d003      	beq.n	800f7d4 <TIM_Base_SetConfig+0x40>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	4a3a      	ldr	r2, [pc, #232]	; (800f8b8 <TIM_Base_SetConfig+0x124>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d108      	bne.n	800f7e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f7da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	4313      	orrs	r3, r2
 800f7e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	4a2f      	ldr	r2, [pc, #188]	; (800f8a8 <TIM_Base_SetConfig+0x114>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d02b      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f7f4:	d027      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	4a2c      	ldr	r2, [pc, #176]	; (800f8ac <TIM_Base_SetConfig+0x118>)
 800f7fa:	4293      	cmp	r3, r2
 800f7fc:	d023      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	4a2b      	ldr	r2, [pc, #172]	; (800f8b0 <TIM_Base_SetConfig+0x11c>)
 800f802:	4293      	cmp	r3, r2
 800f804:	d01f      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a2a      	ldr	r2, [pc, #168]	; (800f8b4 <TIM_Base_SetConfig+0x120>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d01b      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a29      	ldr	r2, [pc, #164]	; (800f8b8 <TIM_Base_SetConfig+0x124>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d017      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a28      	ldr	r2, [pc, #160]	; (800f8bc <TIM_Base_SetConfig+0x128>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d013      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a27      	ldr	r2, [pc, #156]	; (800f8c0 <TIM_Base_SetConfig+0x12c>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d00f      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a26      	ldr	r2, [pc, #152]	; (800f8c4 <TIM_Base_SetConfig+0x130>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d00b      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	4a25      	ldr	r2, [pc, #148]	; (800f8c8 <TIM_Base_SetConfig+0x134>)
 800f832:	4293      	cmp	r3, r2
 800f834:	d007      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	4a24      	ldr	r2, [pc, #144]	; (800f8cc <TIM_Base_SetConfig+0x138>)
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d003      	beq.n	800f846 <TIM_Base_SetConfig+0xb2>
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	4a23      	ldr	r2, [pc, #140]	; (800f8d0 <TIM_Base_SetConfig+0x13c>)
 800f842:	4293      	cmp	r3, r2
 800f844:	d108      	bne.n	800f858 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f84c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	4313      	orrs	r3, r2
 800f856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	695b      	ldr	r3, [r3, #20]
 800f862:	4313      	orrs	r3, r2
 800f864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	68fa      	ldr	r2, [r7, #12]
 800f86a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	689a      	ldr	r2, [r3, #8]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	4a0a      	ldr	r2, [pc, #40]	; (800f8a8 <TIM_Base_SetConfig+0x114>)
 800f880:	4293      	cmp	r3, r2
 800f882:	d003      	beq.n	800f88c <TIM_Base_SetConfig+0xf8>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	4a0c      	ldr	r2, [pc, #48]	; (800f8b8 <TIM_Base_SetConfig+0x124>)
 800f888:	4293      	cmp	r3, r2
 800f88a:	d103      	bne.n	800f894 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	691a      	ldr	r2, [r3, #16]
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2201      	movs	r2, #1
 800f898:	615a      	str	r2, [r3, #20]
}
 800f89a:	bf00      	nop
 800f89c:	3714      	adds	r7, #20
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr
 800f8a6:	bf00      	nop
 800f8a8:	40010000 	.word	0x40010000
 800f8ac:	40000400 	.word	0x40000400
 800f8b0:	40000800 	.word	0x40000800
 800f8b4:	40000c00 	.word	0x40000c00
 800f8b8:	40010400 	.word	0x40010400
 800f8bc:	40014000 	.word	0x40014000
 800f8c0:	40014400 	.word	0x40014400
 800f8c4:	40014800 	.word	0x40014800
 800f8c8:	40001800 	.word	0x40001800
 800f8cc:	40001c00 	.word	0x40001c00
 800f8d0:	40002000 	.word	0x40002000

0800f8d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b087      	sub	sp, #28
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a1b      	ldr	r3, [r3, #32]
 800f8e2:	f023 0201 	bic.w	r2, r3, #1
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a1b      	ldr	r3, [r3, #32]
 800f8ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	685b      	ldr	r3, [r3, #4]
 800f8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	699b      	ldr	r3, [r3, #24]
 800f8fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f023 0303 	bic.w	r3, r3, #3
 800f90a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	4313      	orrs	r3, r2
 800f914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f023 0302 	bic.w	r3, r3, #2
 800f91c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	697a      	ldr	r2, [r7, #20]
 800f924:	4313      	orrs	r3, r2
 800f926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	4a20      	ldr	r2, [pc, #128]	; (800f9ac <TIM_OC1_SetConfig+0xd8>)
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d003      	beq.n	800f938 <TIM_OC1_SetConfig+0x64>
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	4a1f      	ldr	r2, [pc, #124]	; (800f9b0 <TIM_OC1_SetConfig+0xdc>)
 800f934:	4293      	cmp	r3, r2
 800f936:	d10c      	bne.n	800f952 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	f023 0308 	bic.w	r3, r3, #8
 800f93e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	68db      	ldr	r3, [r3, #12]
 800f944:	697a      	ldr	r2, [r7, #20]
 800f946:	4313      	orrs	r3, r2
 800f948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f94a:	697b      	ldr	r3, [r7, #20]
 800f94c:	f023 0304 	bic.w	r3, r3, #4
 800f950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	4a15      	ldr	r2, [pc, #84]	; (800f9ac <TIM_OC1_SetConfig+0xd8>)
 800f956:	4293      	cmp	r3, r2
 800f958:	d003      	beq.n	800f962 <TIM_OC1_SetConfig+0x8e>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4a14      	ldr	r2, [pc, #80]	; (800f9b0 <TIM_OC1_SetConfig+0xdc>)
 800f95e:	4293      	cmp	r3, r2
 800f960:	d111      	bne.n	800f986 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	695b      	ldr	r3, [r3, #20]
 800f976:	693a      	ldr	r2, [r7, #16]
 800f978:	4313      	orrs	r3, r2
 800f97a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	699b      	ldr	r3, [r3, #24]
 800f980:	693a      	ldr	r2, [r7, #16]
 800f982:	4313      	orrs	r3, r2
 800f984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	693a      	ldr	r2, [r7, #16]
 800f98a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	68fa      	ldr	r2, [r7, #12]
 800f990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	685a      	ldr	r2, [r3, #4]
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	621a      	str	r2, [r3, #32]
}
 800f9a0:	bf00      	nop
 800f9a2:	371c      	adds	r7, #28
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9aa:	4770      	bx	lr
 800f9ac:	40010000 	.word	0x40010000
 800f9b0:	40010400 	.word	0x40010400

0800f9b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b087      	sub	sp, #28
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	f023 0210 	bic.w	r2, r3, #16
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6a1b      	ldr	r3, [r3, #32]
 800f9ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f9ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	021b      	lsls	r3, r3, #8
 800f9f2:	68fa      	ldr	r2, [r7, #12]
 800f9f4:	4313      	orrs	r3, r2
 800f9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f9f8:	697b      	ldr	r3, [r7, #20]
 800f9fa:	f023 0320 	bic.w	r3, r3, #32
 800f9fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	689b      	ldr	r3, [r3, #8]
 800fa04:	011b      	lsls	r3, r3, #4
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	4a22      	ldr	r2, [pc, #136]	; (800fa98 <TIM_OC2_SetConfig+0xe4>)
 800fa10:	4293      	cmp	r3, r2
 800fa12:	d003      	beq.n	800fa1c <TIM_OC2_SetConfig+0x68>
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	4a21      	ldr	r2, [pc, #132]	; (800fa9c <TIM_OC2_SetConfig+0xe8>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d10d      	bne.n	800fa38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	011b      	lsls	r3, r3, #4
 800fa2a:	697a      	ldr	r2, [r7, #20]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4a17      	ldr	r2, [pc, #92]	; (800fa98 <TIM_OC2_SetConfig+0xe4>)
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	d003      	beq.n	800fa48 <TIM_OC2_SetConfig+0x94>
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	4a16      	ldr	r2, [pc, #88]	; (800fa9c <TIM_OC2_SetConfig+0xe8>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d113      	bne.n	800fa70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fa48:	693b      	ldr	r3, [r7, #16]
 800fa4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fa4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fa56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	695b      	ldr	r3, [r3, #20]
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	693a      	ldr	r2, [r7, #16]
 800fa60:	4313      	orrs	r3, r2
 800fa62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	693a      	ldr	r2, [r7, #16]
 800fa6c:	4313      	orrs	r3, r2
 800fa6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	693a      	ldr	r2, [r7, #16]
 800fa74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	68fa      	ldr	r2, [r7, #12]
 800fa7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	685a      	ldr	r2, [r3, #4]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	621a      	str	r2, [r3, #32]
}
 800fa8a:	bf00      	nop
 800fa8c:	371c      	adds	r7, #28
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop
 800fa98:	40010000 	.word	0x40010000
 800fa9c:	40010400 	.word	0x40010400

0800faa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	6a1b      	ldr	r3, [r3, #32]
 800faae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a1b      	ldr	r3, [r3, #32]
 800faba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	69db      	ldr	r3, [r3, #28]
 800fac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800face:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f023 0303 	bic.w	r3, r3, #3
 800fad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	68fa      	ldr	r2, [r7, #12]
 800fade:	4313      	orrs	r3, r2
 800fae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fae2:	697b      	ldr	r3, [r7, #20]
 800fae4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	021b      	lsls	r3, r3, #8
 800faf0:	697a      	ldr	r2, [r7, #20]
 800faf2:	4313      	orrs	r3, r2
 800faf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	4a21      	ldr	r2, [pc, #132]	; (800fb80 <TIM_OC3_SetConfig+0xe0>)
 800fafa:	4293      	cmp	r3, r2
 800fafc:	d003      	beq.n	800fb06 <TIM_OC3_SetConfig+0x66>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	4a20      	ldr	r2, [pc, #128]	; (800fb84 <TIM_OC3_SetConfig+0xe4>)
 800fb02:	4293      	cmp	r3, r2
 800fb04:	d10d      	bne.n	800fb22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fb0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	021b      	lsls	r3, r3, #8
 800fb14:	697a      	ldr	r2, [r7, #20]
 800fb16:	4313      	orrs	r3, r2
 800fb18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fb20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	4a16      	ldr	r2, [pc, #88]	; (800fb80 <TIM_OC3_SetConfig+0xe0>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d003      	beq.n	800fb32 <TIM_OC3_SetConfig+0x92>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4a15      	ldr	r2, [pc, #84]	; (800fb84 <TIM_OC3_SetConfig+0xe4>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d113      	bne.n	800fb5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fb38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fb3a:	693b      	ldr	r3, [r7, #16]
 800fb3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fb40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	695b      	ldr	r3, [r3, #20]
 800fb46:	011b      	lsls	r3, r3, #4
 800fb48:	693a      	ldr	r2, [r7, #16]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	693a      	ldr	r2, [r7, #16]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	693a      	ldr	r2, [r7, #16]
 800fb5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb66:	683b      	ldr	r3, [r7, #0]
 800fb68:	685a      	ldr	r2, [r3, #4]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	697a      	ldr	r2, [r7, #20]
 800fb72:	621a      	str	r2, [r3, #32]
}
 800fb74:	bf00      	nop
 800fb76:	371c      	adds	r7, #28
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr
 800fb80:	40010000 	.word	0x40010000
 800fb84:	40010400 	.word	0x40010400

0800fb88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6a1b      	ldr	r3, [r3, #32]
 800fb96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	6a1b      	ldr	r3, [r3, #32]
 800fba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	685b      	ldr	r3, [r3, #4]
 800fba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fbb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fbbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	021b      	lsls	r3, r3, #8
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	4313      	orrs	r3, r2
 800fbca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	689b      	ldr	r3, [r3, #8]
 800fbd8:	031b      	lsls	r3, r3, #12
 800fbda:	693a      	ldr	r2, [r7, #16]
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	4a12      	ldr	r2, [pc, #72]	; (800fc2c <TIM_OC4_SetConfig+0xa4>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d003      	beq.n	800fbf0 <TIM_OC4_SetConfig+0x68>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	4a11      	ldr	r2, [pc, #68]	; (800fc30 <TIM_OC4_SetConfig+0xa8>)
 800fbec:	4293      	cmp	r3, r2
 800fbee:	d109      	bne.n	800fc04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fbf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	695b      	ldr	r3, [r3, #20]
 800fbfc:	019b      	lsls	r3, r3, #6
 800fbfe:	697a      	ldr	r2, [r7, #20]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	685a      	ldr	r2, [r3, #4]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	693a      	ldr	r2, [r7, #16]
 800fc1c:	621a      	str	r2, [r3, #32]
}
 800fc1e:	bf00      	nop
 800fc20:	371c      	adds	r7, #28
 800fc22:	46bd      	mov	sp, r7
 800fc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc28:	4770      	bx	lr
 800fc2a:	bf00      	nop
 800fc2c:	40010000 	.word	0x40010000
 800fc30:	40010400 	.word	0x40010400

0800fc34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fc34:	b480      	push	{r7}
 800fc36:	b087      	sub	sp, #28
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	60f8      	str	r0, [r7, #12]
 800fc3c:	60b9      	str	r1, [r7, #8]
 800fc3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	f003 031f 	and.w	r3, r3, #31
 800fc46:	2201      	movs	r2, #1
 800fc48:	fa02 f303 	lsl.w	r3, r2, r3
 800fc4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	6a1a      	ldr	r2, [r3, #32]
 800fc52:	697b      	ldr	r3, [r7, #20]
 800fc54:	43db      	mvns	r3, r3
 800fc56:	401a      	ands	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6a1a      	ldr	r2, [r3, #32]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	f003 031f 	and.w	r3, r3, #31
 800fc66:	6879      	ldr	r1, [r7, #4]
 800fc68:	fa01 f303 	lsl.w	r3, r1, r3
 800fc6c:	431a      	orrs	r2, r3
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	621a      	str	r2, [r3, #32]
}
 800fc72:	bf00      	nop
 800fc74:	371c      	adds	r7, #28
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
	...

0800fc80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b085      	sub	sp, #20
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc90:	2b01      	cmp	r3, #1
 800fc92:	d101      	bne.n	800fc98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc94:	2302      	movs	r3, #2
 800fc96:	e05a      	b.n	800fd4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2201      	movs	r2, #1
 800fc9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2202      	movs	r2, #2
 800fca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	685b      	ldr	r3, [r3, #4]
 800fcae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	689b      	ldr	r3, [r3, #8]
 800fcb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	68fa      	ldr	r2, [r7, #12]
 800fcc6:	4313      	orrs	r3, r2
 800fcc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	68fa      	ldr	r2, [r7, #12]
 800fcd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a21      	ldr	r2, [pc, #132]	; (800fd5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fcd8:	4293      	cmp	r3, r2
 800fcda:	d022      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fce4:	d01d      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4a1d      	ldr	r2, [pc, #116]	; (800fd60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fcec:	4293      	cmp	r3, r2
 800fcee:	d018      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a1b      	ldr	r2, [pc, #108]	; (800fd64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d013      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	4a1a      	ldr	r2, [pc, #104]	; (800fd68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d00e      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4a18      	ldr	r2, [pc, #96]	; (800fd6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fd0a:	4293      	cmp	r3, r2
 800fd0c:	d009      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	681b      	ldr	r3, [r3, #0]
 800fd12:	4a17      	ldr	r2, [pc, #92]	; (800fd70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d004      	beq.n	800fd22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4a15      	ldr	r2, [pc, #84]	; (800fd74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	d10c      	bne.n	800fd3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fd2a:	683b      	ldr	r3, [r7, #0]
 800fd2c:	685b      	ldr	r3, [r3, #4]
 800fd2e:	68ba      	ldr	r2, [r7, #8]
 800fd30:	4313      	orrs	r3, r2
 800fd32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	68ba      	ldr	r2, [r7, #8]
 800fd3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	2201      	movs	r2, #1
 800fd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fd4c:	2300      	movs	r3, #0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	40010000 	.word	0x40010000
 800fd60:	40000400 	.word	0x40000400
 800fd64:	40000800 	.word	0x40000800
 800fd68:	40000c00 	.word	0x40000c00
 800fd6c:	40010400 	.word	0x40010400
 800fd70:	40014000 	.word	0x40014000
 800fd74:	40001800 	.word	0x40001800

0800fd78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fd82:	2300      	movs	r3, #0
 800fd84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fd8c:	2b01      	cmp	r3, #1
 800fd8e:	d101      	bne.n	800fd94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd90:	2302      	movs	r3, #2
 800fd92:	e03d      	b.n	800fe10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	2201      	movs	r2, #1
 800fd98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fda2:	683b      	ldr	r3, [r7, #0]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	689b      	ldr	r3, [r3, #8]
 800fdb4:	4313      	orrs	r3, r2
 800fdb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	685b      	ldr	r3, [r3, #4]
 800fdc2:	4313      	orrs	r3, r2
 800fdc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	4313      	orrs	r3, r2
 800fdd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	691b      	ldr	r3, [r3, #16]
 800fdde:	4313      	orrs	r3, r2
 800fde0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	695b      	ldr	r3, [r3, #20]
 800fdec:	4313      	orrs	r3, r2
 800fdee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	69db      	ldr	r3, [r3, #28]
 800fdfa:	4313      	orrs	r3, r2
 800fdfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	68fa      	ldr	r2, [r7, #12]
 800fe04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fe0e:	2300      	movs	r3, #0
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3714      	adds	r7, #20
 800fe14:	46bd      	mov	sp, r7
 800fe16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1a:	4770      	bx	lr

0800fe1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fe24:	bf00      	nop
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fe30:	b480      	push	{r7}
 800fe32:	b083      	sub	sp, #12
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fe38:	bf00      	nop
 800fe3a:	370c      	adds	r7, #12
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d101      	bne.n	800fe56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	e03f      	b.n	800fed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fe5c:	b2db      	uxtb	r3, r3
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d106      	bne.n	800fe70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	2200      	movs	r2, #0
 800fe66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7f7 fcd8 	bl	8007820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2224      	movs	r2, #36	; 0x24
 800fe74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68da      	ldr	r2, [r3, #12]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fe86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f000 f829 	bl	800fee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	691a      	ldr	r2, [r3, #16]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fe9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	695a      	ldr	r2, [r3, #20]
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800feac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	68da      	ldr	r2, [r3, #12]
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800febc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2220      	movs	r2, #32
 800fec8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2220      	movs	r2, #32
 800fed0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fed4:	2300      	movs	r3, #0
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3708      	adds	r7, #8
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
	...

0800fee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fee4:	b085      	sub	sp, #20
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	691b      	ldr	r3, [r3, #16]
 800fef0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	68da      	ldr	r2, [r3, #12]
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	430a      	orrs	r2, r1
 800fefe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	691b      	ldr	r3, [r3, #16]
 800ff08:	431a      	orrs	r2, r3
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	695b      	ldr	r3, [r3, #20]
 800ff0e:	431a      	orrs	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	69db      	ldr	r3, [r3, #28]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	68db      	ldr	r3, [r3, #12]
 800ff1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ff22:	f023 030c 	bic.w	r3, r3, #12
 800ff26:	687a      	ldr	r2, [r7, #4]
 800ff28:	6812      	ldr	r2, [r2, #0]
 800ff2a:	68f9      	ldr	r1, [r7, #12]
 800ff2c:	430b      	orrs	r3, r1
 800ff2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	695b      	ldr	r3, [r3, #20]
 800ff36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	699a      	ldr	r2, [r3, #24]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	430a      	orrs	r2, r1
 800ff44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	69db      	ldr	r3, [r3, #28]
 800ff4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ff4e:	f040 818b 	bne.w	8010268 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	4ac1      	ldr	r2, [pc, #772]	; (801025c <UART_SetConfig+0x37c>)
 800ff58:	4293      	cmp	r3, r2
 800ff5a:	d005      	beq.n	800ff68 <UART_SetConfig+0x88>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	4abf      	ldr	r2, [pc, #764]	; (8010260 <UART_SetConfig+0x380>)
 800ff62:	4293      	cmp	r3, r2
 800ff64:	f040 80bd 	bne.w	80100e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ff68:	f7fc fbcc 	bl	800c704 <HAL_RCC_GetPCLK2Freq>
 800ff6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	461d      	mov	r5, r3
 800ff72:	f04f 0600 	mov.w	r6, #0
 800ff76:	46a8      	mov	r8, r5
 800ff78:	46b1      	mov	r9, r6
 800ff7a:	eb18 0308 	adds.w	r3, r8, r8
 800ff7e:	eb49 0409 	adc.w	r4, r9, r9
 800ff82:	4698      	mov	r8, r3
 800ff84:	46a1      	mov	r9, r4
 800ff86:	eb18 0805 	adds.w	r8, r8, r5
 800ff8a:	eb49 0906 	adc.w	r9, r9, r6
 800ff8e:	f04f 0100 	mov.w	r1, #0
 800ff92:	f04f 0200 	mov.w	r2, #0
 800ff96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ff9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ffa2:	4688      	mov	r8, r1
 800ffa4:	4691      	mov	r9, r2
 800ffa6:	eb18 0005 	adds.w	r0, r8, r5
 800ffaa:	eb49 0106 	adc.w	r1, r9, r6
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	685b      	ldr	r3, [r3, #4]
 800ffb2:	461d      	mov	r5, r3
 800ffb4:	f04f 0600 	mov.w	r6, #0
 800ffb8:	196b      	adds	r3, r5, r5
 800ffba:	eb46 0406 	adc.w	r4, r6, r6
 800ffbe:	461a      	mov	r2, r3
 800ffc0:	4623      	mov	r3, r4
 800ffc2:	f7f0 fe79 	bl	8000cb8 <__aeabi_uldivmod>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	460c      	mov	r4, r1
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4ba5      	ldr	r3, [pc, #660]	; (8010264 <UART_SetConfig+0x384>)
 800ffce:	fba3 2302 	umull	r2, r3, r3, r2
 800ffd2:	095b      	lsrs	r3, r3, #5
 800ffd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	461d      	mov	r5, r3
 800ffdc:	f04f 0600 	mov.w	r6, #0
 800ffe0:	46a9      	mov	r9, r5
 800ffe2:	46b2      	mov	sl, r6
 800ffe4:	eb19 0309 	adds.w	r3, r9, r9
 800ffe8:	eb4a 040a 	adc.w	r4, sl, sl
 800ffec:	4699      	mov	r9, r3
 800ffee:	46a2      	mov	sl, r4
 800fff0:	eb19 0905 	adds.w	r9, r9, r5
 800fff4:	eb4a 0a06 	adc.w	sl, sl, r6
 800fff8:	f04f 0100 	mov.w	r1, #0
 800fffc:	f04f 0200 	mov.w	r2, #0
 8010000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010004:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010008:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801000c:	4689      	mov	r9, r1
 801000e:	4692      	mov	sl, r2
 8010010:	eb19 0005 	adds.w	r0, r9, r5
 8010014:	eb4a 0106 	adc.w	r1, sl, r6
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	461d      	mov	r5, r3
 801001e:	f04f 0600 	mov.w	r6, #0
 8010022:	196b      	adds	r3, r5, r5
 8010024:	eb46 0406 	adc.w	r4, r6, r6
 8010028:	461a      	mov	r2, r3
 801002a:	4623      	mov	r3, r4
 801002c:	f7f0 fe44 	bl	8000cb8 <__aeabi_uldivmod>
 8010030:	4603      	mov	r3, r0
 8010032:	460c      	mov	r4, r1
 8010034:	461a      	mov	r2, r3
 8010036:	4b8b      	ldr	r3, [pc, #556]	; (8010264 <UART_SetConfig+0x384>)
 8010038:	fba3 1302 	umull	r1, r3, r3, r2
 801003c:	095b      	lsrs	r3, r3, #5
 801003e:	2164      	movs	r1, #100	; 0x64
 8010040:	fb01 f303 	mul.w	r3, r1, r3
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	00db      	lsls	r3, r3, #3
 8010048:	3332      	adds	r3, #50	; 0x32
 801004a:	4a86      	ldr	r2, [pc, #536]	; (8010264 <UART_SetConfig+0x384>)
 801004c:	fba2 2303 	umull	r2, r3, r2, r3
 8010050:	095b      	lsrs	r3, r3, #5
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8010058:	4498      	add	r8, r3
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	461d      	mov	r5, r3
 801005e:	f04f 0600 	mov.w	r6, #0
 8010062:	46a9      	mov	r9, r5
 8010064:	46b2      	mov	sl, r6
 8010066:	eb19 0309 	adds.w	r3, r9, r9
 801006a:	eb4a 040a 	adc.w	r4, sl, sl
 801006e:	4699      	mov	r9, r3
 8010070:	46a2      	mov	sl, r4
 8010072:	eb19 0905 	adds.w	r9, r9, r5
 8010076:	eb4a 0a06 	adc.w	sl, sl, r6
 801007a:	f04f 0100 	mov.w	r1, #0
 801007e:	f04f 0200 	mov.w	r2, #0
 8010082:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010086:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801008a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801008e:	4689      	mov	r9, r1
 8010090:	4692      	mov	sl, r2
 8010092:	eb19 0005 	adds.w	r0, r9, r5
 8010096:	eb4a 0106 	adc.w	r1, sl, r6
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	461d      	mov	r5, r3
 80100a0:	f04f 0600 	mov.w	r6, #0
 80100a4:	196b      	adds	r3, r5, r5
 80100a6:	eb46 0406 	adc.w	r4, r6, r6
 80100aa:	461a      	mov	r2, r3
 80100ac:	4623      	mov	r3, r4
 80100ae:	f7f0 fe03 	bl	8000cb8 <__aeabi_uldivmod>
 80100b2:	4603      	mov	r3, r0
 80100b4:	460c      	mov	r4, r1
 80100b6:	461a      	mov	r2, r3
 80100b8:	4b6a      	ldr	r3, [pc, #424]	; (8010264 <UART_SetConfig+0x384>)
 80100ba:	fba3 1302 	umull	r1, r3, r3, r2
 80100be:	095b      	lsrs	r3, r3, #5
 80100c0:	2164      	movs	r1, #100	; 0x64
 80100c2:	fb01 f303 	mul.w	r3, r1, r3
 80100c6:	1ad3      	subs	r3, r2, r3
 80100c8:	00db      	lsls	r3, r3, #3
 80100ca:	3332      	adds	r3, #50	; 0x32
 80100cc:	4a65      	ldr	r2, [pc, #404]	; (8010264 <UART_SetConfig+0x384>)
 80100ce:	fba2 2303 	umull	r2, r3, r2, r3
 80100d2:	095b      	lsrs	r3, r3, #5
 80100d4:	f003 0207 	and.w	r2, r3, #7
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	4442      	add	r2, r8
 80100de:	609a      	str	r2, [r3, #8]
 80100e0:	e26f      	b.n	80105c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80100e2:	f7fc fafb 	bl	800c6dc <HAL_RCC_GetPCLK1Freq>
 80100e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	461d      	mov	r5, r3
 80100ec:	f04f 0600 	mov.w	r6, #0
 80100f0:	46a8      	mov	r8, r5
 80100f2:	46b1      	mov	r9, r6
 80100f4:	eb18 0308 	adds.w	r3, r8, r8
 80100f8:	eb49 0409 	adc.w	r4, r9, r9
 80100fc:	4698      	mov	r8, r3
 80100fe:	46a1      	mov	r9, r4
 8010100:	eb18 0805 	adds.w	r8, r8, r5
 8010104:	eb49 0906 	adc.w	r9, r9, r6
 8010108:	f04f 0100 	mov.w	r1, #0
 801010c:	f04f 0200 	mov.w	r2, #0
 8010110:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010114:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010118:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801011c:	4688      	mov	r8, r1
 801011e:	4691      	mov	r9, r2
 8010120:	eb18 0005 	adds.w	r0, r8, r5
 8010124:	eb49 0106 	adc.w	r1, r9, r6
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	461d      	mov	r5, r3
 801012e:	f04f 0600 	mov.w	r6, #0
 8010132:	196b      	adds	r3, r5, r5
 8010134:	eb46 0406 	adc.w	r4, r6, r6
 8010138:	461a      	mov	r2, r3
 801013a:	4623      	mov	r3, r4
 801013c:	f7f0 fdbc 	bl	8000cb8 <__aeabi_uldivmod>
 8010140:	4603      	mov	r3, r0
 8010142:	460c      	mov	r4, r1
 8010144:	461a      	mov	r2, r3
 8010146:	4b47      	ldr	r3, [pc, #284]	; (8010264 <UART_SetConfig+0x384>)
 8010148:	fba3 2302 	umull	r2, r3, r3, r2
 801014c:	095b      	lsrs	r3, r3, #5
 801014e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	461d      	mov	r5, r3
 8010156:	f04f 0600 	mov.w	r6, #0
 801015a:	46a9      	mov	r9, r5
 801015c:	46b2      	mov	sl, r6
 801015e:	eb19 0309 	adds.w	r3, r9, r9
 8010162:	eb4a 040a 	adc.w	r4, sl, sl
 8010166:	4699      	mov	r9, r3
 8010168:	46a2      	mov	sl, r4
 801016a:	eb19 0905 	adds.w	r9, r9, r5
 801016e:	eb4a 0a06 	adc.w	sl, sl, r6
 8010172:	f04f 0100 	mov.w	r1, #0
 8010176:	f04f 0200 	mov.w	r2, #0
 801017a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801017e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010182:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010186:	4689      	mov	r9, r1
 8010188:	4692      	mov	sl, r2
 801018a:	eb19 0005 	adds.w	r0, r9, r5
 801018e:	eb4a 0106 	adc.w	r1, sl, r6
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	461d      	mov	r5, r3
 8010198:	f04f 0600 	mov.w	r6, #0
 801019c:	196b      	adds	r3, r5, r5
 801019e:	eb46 0406 	adc.w	r4, r6, r6
 80101a2:	461a      	mov	r2, r3
 80101a4:	4623      	mov	r3, r4
 80101a6:	f7f0 fd87 	bl	8000cb8 <__aeabi_uldivmod>
 80101aa:	4603      	mov	r3, r0
 80101ac:	460c      	mov	r4, r1
 80101ae:	461a      	mov	r2, r3
 80101b0:	4b2c      	ldr	r3, [pc, #176]	; (8010264 <UART_SetConfig+0x384>)
 80101b2:	fba3 1302 	umull	r1, r3, r3, r2
 80101b6:	095b      	lsrs	r3, r3, #5
 80101b8:	2164      	movs	r1, #100	; 0x64
 80101ba:	fb01 f303 	mul.w	r3, r1, r3
 80101be:	1ad3      	subs	r3, r2, r3
 80101c0:	00db      	lsls	r3, r3, #3
 80101c2:	3332      	adds	r3, #50	; 0x32
 80101c4:	4a27      	ldr	r2, [pc, #156]	; (8010264 <UART_SetConfig+0x384>)
 80101c6:	fba2 2303 	umull	r2, r3, r2, r3
 80101ca:	095b      	lsrs	r3, r3, #5
 80101cc:	005b      	lsls	r3, r3, #1
 80101ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80101d2:	4498      	add	r8, r3
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	461d      	mov	r5, r3
 80101d8:	f04f 0600 	mov.w	r6, #0
 80101dc:	46a9      	mov	r9, r5
 80101de:	46b2      	mov	sl, r6
 80101e0:	eb19 0309 	adds.w	r3, r9, r9
 80101e4:	eb4a 040a 	adc.w	r4, sl, sl
 80101e8:	4699      	mov	r9, r3
 80101ea:	46a2      	mov	sl, r4
 80101ec:	eb19 0905 	adds.w	r9, r9, r5
 80101f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80101f4:	f04f 0100 	mov.w	r1, #0
 80101f8:	f04f 0200 	mov.w	r2, #0
 80101fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010200:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010204:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010208:	4689      	mov	r9, r1
 801020a:	4692      	mov	sl, r2
 801020c:	eb19 0005 	adds.w	r0, r9, r5
 8010210:	eb4a 0106 	adc.w	r1, sl, r6
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	685b      	ldr	r3, [r3, #4]
 8010218:	461d      	mov	r5, r3
 801021a:	f04f 0600 	mov.w	r6, #0
 801021e:	196b      	adds	r3, r5, r5
 8010220:	eb46 0406 	adc.w	r4, r6, r6
 8010224:	461a      	mov	r2, r3
 8010226:	4623      	mov	r3, r4
 8010228:	f7f0 fd46 	bl	8000cb8 <__aeabi_uldivmod>
 801022c:	4603      	mov	r3, r0
 801022e:	460c      	mov	r4, r1
 8010230:	461a      	mov	r2, r3
 8010232:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <UART_SetConfig+0x384>)
 8010234:	fba3 1302 	umull	r1, r3, r3, r2
 8010238:	095b      	lsrs	r3, r3, #5
 801023a:	2164      	movs	r1, #100	; 0x64
 801023c:	fb01 f303 	mul.w	r3, r1, r3
 8010240:	1ad3      	subs	r3, r2, r3
 8010242:	00db      	lsls	r3, r3, #3
 8010244:	3332      	adds	r3, #50	; 0x32
 8010246:	4a07      	ldr	r2, [pc, #28]	; (8010264 <UART_SetConfig+0x384>)
 8010248:	fba2 2303 	umull	r2, r3, r2, r3
 801024c:	095b      	lsrs	r3, r3, #5
 801024e:	f003 0207 	and.w	r2, r3, #7
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	4442      	add	r2, r8
 8010258:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 801025a:	e1b2      	b.n	80105c2 <UART_SetConfig+0x6e2>
 801025c:	40011000 	.word	0x40011000
 8010260:	40011400 	.word	0x40011400
 8010264:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4ad7      	ldr	r2, [pc, #860]	; (80105cc <UART_SetConfig+0x6ec>)
 801026e:	4293      	cmp	r3, r2
 8010270:	d005      	beq.n	801027e <UART_SetConfig+0x39e>
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4ad6      	ldr	r2, [pc, #856]	; (80105d0 <UART_SetConfig+0x6f0>)
 8010278:	4293      	cmp	r3, r2
 801027a:	f040 80d1 	bne.w	8010420 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 801027e:	f7fc fa41 	bl	800c704 <HAL_RCC_GetPCLK2Freq>
 8010282:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	469a      	mov	sl, r3
 8010288:	f04f 0b00 	mov.w	fp, #0
 801028c:	46d0      	mov	r8, sl
 801028e:	46d9      	mov	r9, fp
 8010290:	eb18 0308 	adds.w	r3, r8, r8
 8010294:	eb49 0409 	adc.w	r4, r9, r9
 8010298:	4698      	mov	r8, r3
 801029a:	46a1      	mov	r9, r4
 801029c:	eb18 080a 	adds.w	r8, r8, sl
 80102a0:	eb49 090b 	adc.w	r9, r9, fp
 80102a4:	f04f 0100 	mov.w	r1, #0
 80102a8:	f04f 0200 	mov.w	r2, #0
 80102ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80102b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80102b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80102b8:	4688      	mov	r8, r1
 80102ba:	4691      	mov	r9, r2
 80102bc:	eb1a 0508 	adds.w	r5, sl, r8
 80102c0:	eb4b 0609 	adc.w	r6, fp, r9
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	685b      	ldr	r3, [r3, #4]
 80102c8:	4619      	mov	r1, r3
 80102ca:	f04f 0200 	mov.w	r2, #0
 80102ce:	f04f 0300 	mov.w	r3, #0
 80102d2:	f04f 0400 	mov.w	r4, #0
 80102d6:	0094      	lsls	r4, r2, #2
 80102d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80102dc:	008b      	lsls	r3, r1, #2
 80102de:	461a      	mov	r2, r3
 80102e0:	4623      	mov	r3, r4
 80102e2:	4628      	mov	r0, r5
 80102e4:	4631      	mov	r1, r6
 80102e6:	f7f0 fce7 	bl	8000cb8 <__aeabi_uldivmod>
 80102ea:	4603      	mov	r3, r0
 80102ec:	460c      	mov	r4, r1
 80102ee:	461a      	mov	r2, r3
 80102f0:	4bb8      	ldr	r3, [pc, #736]	; (80105d4 <UART_SetConfig+0x6f4>)
 80102f2:	fba3 2302 	umull	r2, r3, r3, r2
 80102f6:	095b      	lsrs	r3, r3, #5
 80102f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	469b      	mov	fp, r3
 8010300:	f04f 0c00 	mov.w	ip, #0
 8010304:	46d9      	mov	r9, fp
 8010306:	46e2      	mov	sl, ip
 8010308:	eb19 0309 	adds.w	r3, r9, r9
 801030c:	eb4a 040a 	adc.w	r4, sl, sl
 8010310:	4699      	mov	r9, r3
 8010312:	46a2      	mov	sl, r4
 8010314:	eb19 090b 	adds.w	r9, r9, fp
 8010318:	eb4a 0a0c 	adc.w	sl, sl, ip
 801031c:	f04f 0100 	mov.w	r1, #0
 8010320:	f04f 0200 	mov.w	r2, #0
 8010324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801032c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010330:	4689      	mov	r9, r1
 8010332:	4692      	mov	sl, r2
 8010334:	eb1b 0509 	adds.w	r5, fp, r9
 8010338:	eb4c 060a 	adc.w	r6, ip, sl
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	4619      	mov	r1, r3
 8010342:	f04f 0200 	mov.w	r2, #0
 8010346:	f04f 0300 	mov.w	r3, #0
 801034a:	f04f 0400 	mov.w	r4, #0
 801034e:	0094      	lsls	r4, r2, #2
 8010350:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010354:	008b      	lsls	r3, r1, #2
 8010356:	461a      	mov	r2, r3
 8010358:	4623      	mov	r3, r4
 801035a:	4628      	mov	r0, r5
 801035c:	4631      	mov	r1, r6
 801035e:	f7f0 fcab 	bl	8000cb8 <__aeabi_uldivmod>
 8010362:	4603      	mov	r3, r0
 8010364:	460c      	mov	r4, r1
 8010366:	461a      	mov	r2, r3
 8010368:	4b9a      	ldr	r3, [pc, #616]	; (80105d4 <UART_SetConfig+0x6f4>)
 801036a:	fba3 1302 	umull	r1, r3, r3, r2
 801036e:	095b      	lsrs	r3, r3, #5
 8010370:	2164      	movs	r1, #100	; 0x64
 8010372:	fb01 f303 	mul.w	r3, r1, r3
 8010376:	1ad3      	subs	r3, r2, r3
 8010378:	011b      	lsls	r3, r3, #4
 801037a:	3332      	adds	r3, #50	; 0x32
 801037c:	4a95      	ldr	r2, [pc, #596]	; (80105d4 <UART_SetConfig+0x6f4>)
 801037e:	fba2 2303 	umull	r2, r3, r2, r3
 8010382:	095b      	lsrs	r3, r3, #5
 8010384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010388:	4498      	add	r8, r3
 801038a:	68bb      	ldr	r3, [r7, #8]
 801038c:	469b      	mov	fp, r3
 801038e:	f04f 0c00 	mov.w	ip, #0
 8010392:	46d9      	mov	r9, fp
 8010394:	46e2      	mov	sl, ip
 8010396:	eb19 0309 	adds.w	r3, r9, r9
 801039a:	eb4a 040a 	adc.w	r4, sl, sl
 801039e:	4699      	mov	r9, r3
 80103a0:	46a2      	mov	sl, r4
 80103a2:	eb19 090b 	adds.w	r9, r9, fp
 80103a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103aa:	f04f 0100 	mov.w	r1, #0
 80103ae:	f04f 0200 	mov.w	r2, #0
 80103b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103be:	4689      	mov	r9, r1
 80103c0:	4692      	mov	sl, r2
 80103c2:	eb1b 0509 	adds.w	r5, fp, r9
 80103c6:	eb4c 060a 	adc.w	r6, ip, sl
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	4619      	mov	r1, r3
 80103d0:	f04f 0200 	mov.w	r2, #0
 80103d4:	f04f 0300 	mov.w	r3, #0
 80103d8:	f04f 0400 	mov.w	r4, #0
 80103dc:	0094      	lsls	r4, r2, #2
 80103de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80103e2:	008b      	lsls	r3, r1, #2
 80103e4:	461a      	mov	r2, r3
 80103e6:	4623      	mov	r3, r4
 80103e8:	4628      	mov	r0, r5
 80103ea:	4631      	mov	r1, r6
 80103ec:	f7f0 fc64 	bl	8000cb8 <__aeabi_uldivmod>
 80103f0:	4603      	mov	r3, r0
 80103f2:	460c      	mov	r4, r1
 80103f4:	461a      	mov	r2, r3
 80103f6:	4b77      	ldr	r3, [pc, #476]	; (80105d4 <UART_SetConfig+0x6f4>)
 80103f8:	fba3 1302 	umull	r1, r3, r3, r2
 80103fc:	095b      	lsrs	r3, r3, #5
 80103fe:	2164      	movs	r1, #100	; 0x64
 8010400:	fb01 f303 	mul.w	r3, r1, r3
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	011b      	lsls	r3, r3, #4
 8010408:	3332      	adds	r3, #50	; 0x32
 801040a:	4a72      	ldr	r2, [pc, #456]	; (80105d4 <UART_SetConfig+0x6f4>)
 801040c:	fba2 2303 	umull	r2, r3, r2, r3
 8010410:	095b      	lsrs	r3, r3, #5
 8010412:	f003 020f 	and.w	r2, r3, #15
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	4442      	add	r2, r8
 801041c:	609a      	str	r2, [r3, #8]
 801041e:	e0d0      	b.n	80105c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8010420:	f7fc f95c 	bl	800c6dc <HAL_RCC_GetPCLK1Freq>
 8010424:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	469a      	mov	sl, r3
 801042a:	f04f 0b00 	mov.w	fp, #0
 801042e:	46d0      	mov	r8, sl
 8010430:	46d9      	mov	r9, fp
 8010432:	eb18 0308 	adds.w	r3, r8, r8
 8010436:	eb49 0409 	adc.w	r4, r9, r9
 801043a:	4698      	mov	r8, r3
 801043c:	46a1      	mov	r9, r4
 801043e:	eb18 080a 	adds.w	r8, r8, sl
 8010442:	eb49 090b 	adc.w	r9, r9, fp
 8010446:	f04f 0100 	mov.w	r1, #0
 801044a:	f04f 0200 	mov.w	r2, #0
 801044e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010452:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8010456:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801045a:	4688      	mov	r8, r1
 801045c:	4691      	mov	r9, r2
 801045e:	eb1a 0508 	adds.w	r5, sl, r8
 8010462:	eb4b 0609 	adc.w	r6, fp, r9
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	4619      	mov	r1, r3
 801046c:	f04f 0200 	mov.w	r2, #0
 8010470:	f04f 0300 	mov.w	r3, #0
 8010474:	f04f 0400 	mov.w	r4, #0
 8010478:	0094      	lsls	r4, r2, #2
 801047a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801047e:	008b      	lsls	r3, r1, #2
 8010480:	461a      	mov	r2, r3
 8010482:	4623      	mov	r3, r4
 8010484:	4628      	mov	r0, r5
 8010486:	4631      	mov	r1, r6
 8010488:	f7f0 fc16 	bl	8000cb8 <__aeabi_uldivmod>
 801048c:	4603      	mov	r3, r0
 801048e:	460c      	mov	r4, r1
 8010490:	461a      	mov	r2, r3
 8010492:	4b50      	ldr	r3, [pc, #320]	; (80105d4 <UART_SetConfig+0x6f4>)
 8010494:	fba3 2302 	umull	r2, r3, r3, r2
 8010498:	095b      	lsrs	r3, r3, #5
 801049a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 801049e:	68bb      	ldr	r3, [r7, #8]
 80104a0:	469b      	mov	fp, r3
 80104a2:	f04f 0c00 	mov.w	ip, #0
 80104a6:	46d9      	mov	r9, fp
 80104a8:	46e2      	mov	sl, ip
 80104aa:	eb19 0309 	adds.w	r3, r9, r9
 80104ae:	eb4a 040a 	adc.w	r4, sl, sl
 80104b2:	4699      	mov	r9, r3
 80104b4:	46a2      	mov	sl, r4
 80104b6:	eb19 090b 	adds.w	r9, r9, fp
 80104ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80104be:	f04f 0100 	mov.w	r1, #0
 80104c2:	f04f 0200 	mov.w	r2, #0
 80104c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80104ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80104d2:	4689      	mov	r9, r1
 80104d4:	4692      	mov	sl, r2
 80104d6:	eb1b 0509 	adds.w	r5, fp, r9
 80104da:	eb4c 060a 	adc.w	r6, ip, sl
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	685b      	ldr	r3, [r3, #4]
 80104e2:	4619      	mov	r1, r3
 80104e4:	f04f 0200 	mov.w	r2, #0
 80104e8:	f04f 0300 	mov.w	r3, #0
 80104ec:	f04f 0400 	mov.w	r4, #0
 80104f0:	0094      	lsls	r4, r2, #2
 80104f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80104f6:	008b      	lsls	r3, r1, #2
 80104f8:	461a      	mov	r2, r3
 80104fa:	4623      	mov	r3, r4
 80104fc:	4628      	mov	r0, r5
 80104fe:	4631      	mov	r1, r6
 8010500:	f7f0 fbda 	bl	8000cb8 <__aeabi_uldivmod>
 8010504:	4603      	mov	r3, r0
 8010506:	460c      	mov	r4, r1
 8010508:	461a      	mov	r2, r3
 801050a:	4b32      	ldr	r3, [pc, #200]	; (80105d4 <UART_SetConfig+0x6f4>)
 801050c:	fba3 1302 	umull	r1, r3, r3, r2
 8010510:	095b      	lsrs	r3, r3, #5
 8010512:	2164      	movs	r1, #100	; 0x64
 8010514:	fb01 f303 	mul.w	r3, r1, r3
 8010518:	1ad3      	subs	r3, r2, r3
 801051a:	011b      	lsls	r3, r3, #4
 801051c:	3332      	adds	r3, #50	; 0x32
 801051e:	4a2d      	ldr	r2, [pc, #180]	; (80105d4 <UART_SetConfig+0x6f4>)
 8010520:	fba2 2303 	umull	r2, r3, r2, r3
 8010524:	095b      	lsrs	r3, r3, #5
 8010526:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801052a:	4498      	add	r8, r3
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	469b      	mov	fp, r3
 8010530:	f04f 0c00 	mov.w	ip, #0
 8010534:	46d9      	mov	r9, fp
 8010536:	46e2      	mov	sl, ip
 8010538:	eb19 0309 	adds.w	r3, r9, r9
 801053c:	eb4a 040a 	adc.w	r4, sl, sl
 8010540:	4699      	mov	r9, r3
 8010542:	46a2      	mov	sl, r4
 8010544:	eb19 090b 	adds.w	r9, r9, fp
 8010548:	eb4a 0a0c 	adc.w	sl, sl, ip
 801054c:	f04f 0100 	mov.w	r1, #0
 8010550:	f04f 0200 	mov.w	r2, #0
 8010554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010558:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801055c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010560:	4689      	mov	r9, r1
 8010562:	4692      	mov	sl, r2
 8010564:	eb1b 0509 	adds.w	r5, fp, r9
 8010568:	eb4c 060a 	adc.w	r6, ip, sl
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	4619      	mov	r1, r3
 8010572:	f04f 0200 	mov.w	r2, #0
 8010576:	f04f 0300 	mov.w	r3, #0
 801057a:	f04f 0400 	mov.w	r4, #0
 801057e:	0094      	lsls	r4, r2, #2
 8010580:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010584:	008b      	lsls	r3, r1, #2
 8010586:	461a      	mov	r2, r3
 8010588:	4623      	mov	r3, r4
 801058a:	4628      	mov	r0, r5
 801058c:	4631      	mov	r1, r6
 801058e:	f7f0 fb93 	bl	8000cb8 <__aeabi_uldivmod>
 8010592:	4603      	mov	r3, r0
 8010594:	460c      	mov	r4, r1
 8010596:	461a      	mov	r2, r3
 8010598:	4b0e      	ldr	r3, [pc, #56]	; (80105d4 <UART_SetConfig+0x6f4>)
 801059a:	fba3 1302 	umull	r1, r3, r3, r2
 801059e:	095b      	lsrs	r3, r3, #5
 80105a0:	2164      	movs	r1, #100	; 0x64
 80105a2:	fb01 f303 	mul.w	r3, r1, r3
 80105a6:	1ad3      	subs	r3, r2, r3
 80105a8:	011b      	lsls	r3, r3, #4
 80105aa:	3332      	adds	r3, #50	; 0x32
 80105ac:	4a09      	ldr	r2, [pc, #36]	; (80105d4 <UART_SetConfig+0x6f4>)
 80105ae:	fba2 2303 	umull	r2, r3, r2, r3
 80105b2:	095b      	lsrs	r3, r3, #5
 80105b4:	f003 020f 	and.w	r2, r3, #15
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4442      	add	r2, r8
 80105be:	609a      	str	r2, [r3, #8]
}
 80105c0:	e7ff      	b.n	80105c2 <UART_SetConfig+0x6e2>
 80105c2:	bf00      	nop
 80105c4:	3714      	adds	r7, #20
 80105c6:	46bd      	mov	sp, r7
 80105c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105cc:	40011000 	.word	0x40011000
 80105d0:	40011400 	.word	0x40011400
 80105d4:	51eb851f 	.word	0x51eb851f

080105d8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80105d8:	b084      	sub	sp, #16
 80105da:	b480      	push	{r7}
 80105dc:	b085      	sub	sp, #20
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
 80105e2:	f107 001c 	add.w	r0, r7, #28
 80105e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80105ea:	2300      	movs	r3, #0
 80105ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80105ee:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80105f0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80105f2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80105f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80105f6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80105fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80105fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8010602:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010604:	68fa      	ldr	r2, [r7, #12]
 8010606:	4313      	orrs	r3, r2
 8010608:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	685b      	ldr	r3, [r3, #4]
 801060e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8010612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	431a      	orrs	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801061e:	2300      	movs	r3, #0
}
 8010620:	4618      	mov	r0, r3
 8010622:	3714      	adds	r7, #20
 8010624:	46bd      	mov	sp, r7
 8010626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062a:	b004      	add	sp, #16
 801062c:	4770      	bx	lr

0801062e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 801062e:	b480      	push	{r7}
 8010630:	b083      	sub	sp, #12
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801063c:	4618      	mov	r0, r3
 801063e:	370c      	adds	r7, #12
 8010640:	46bd      	mov	sp, r7
 8010642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010646:	4770      	bx	lr

08010648 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	681a      	ldr	r2, [r3, #0]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801065c:	2300      	movs	r3, #0
}
 801065e:	4618      	mov	r0, r3
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 801066a:	b580      	push	{r7, lr}
 801066c:	b082      	sub	sp, #8
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2203      	movs	r2, #3
 8010676:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010678:	2002      	movs	r0, #2
 801067a:	f7f9 fbdd 	bl	8009e38 <HAL_Delay>
  
  return HAL_OK;
 801067e:	2300      	movs	r3, #0
}
 8010680:	4618      	mov	r0, r3
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}

08010688 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f003 0303 	and.w	r3, r3, #3
}
 8010698:	4618      	mov	r0, r3
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b085      	sub	sp, #20
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]
 80106ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80106b2:	683b      	ldr	r3, [r7, #0]
 80106b4:	681a      	ldr	r2, [r3, #0]
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80106c4:	683b      	ldr	r3, [r7, #0]
 80106c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80106c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80106ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80106d0:	68fa      	ldr	r2, [r7, #12]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80106de:	f023 030f 	bic.w	r3, r3, #15
 80106e2:	68fa      	ldr	r2, [r7, #12]
 80106e4:	431a      	orrs	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80106ea:	2300      	movs	r3, #0
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3714      	adds	r7, #20
 80106f0:	46bd      	mov	sp, r7
 80106f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f6:	4770      	bx	lr

080106f8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	691b      	ldr	r3, [r3, #16]
 8010704:	b2db      	uxtb	r3, r3
}
 8010706:	4618      	mov	r0, r3
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010712:	b480      	push	{r7}
 8010714:	b085      	sub	sp, #20
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
 801071a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	3314      	adds	r3, #20
 8010720:	461a      	mov	r2, r3
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	4413      	add	r3, r2
 8010726:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
}  
 801072c:	4618      	mov	r0, r3
 801072e:	3714      	adds	r7, #20
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010738:	b480      	push	{r7}
 801073a:	b085      	sub	sp, #20
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
 8010740:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	681a      	ldr	r2, [r3, #0]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	685a      	ldr	r2, [r3, #4]
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801075a:	683b      	ldr	r3, [r7, #0]
 801075c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801075e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8010764:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 801076a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801076c:	68fa      	ldr	r2, [r7, #12]
 801076e:	4313      	orrs	r3, r2
 8010770:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010776:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	431a      	orrs	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010782:	2300      	movs	r3, #0

}
 8010784:	4618      	mov	r0, r3
 8010786:	3714      	adds	r7, #20
 8010788:	46bd      	mov	sp, r7
 801078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801078e:	4770      	bx	lr

08010790 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b088      	sub	sp, #32
 8010794:	af00      	add	r7, sp, #0
 8010796:	6078      	str	r0, [r7, #4]
 8010798:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801079a:	683b      	ldr	r3, [r7, #0]
 801079c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801079e:	2310      	movs	r3, #16
 80107a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107a2:	2340      	movs	r3, #64	; 0x40
 80107a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107a6:	2300      	movs	r3, #0
 80107a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107b0:	f107 0308 	add.w	r3, r7, #8
 80107b4:	4619      	mov	r1, r3
 80107b6:	6878      	ldr	r0, [r7, #4]
 80107b8:	f7ff ff74 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80107bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80107c0:	2110      	movs	r1, #16
 80107c2:	6878      	ldr	r0, [r7, #4]
 80107c4:	f000 fa40 	bl	8010c48 <SDMMC_GetCmdResp1>
 80107c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107ca:	69fb      	ldr	r3, [r7, #28]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3720      	adds	r7, #32
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}

080107d4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b088      	sub	sp, #32
 80107d8:	af00      	add	r7, sp, #0
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80107de:	683b      	ldr	r3, [r7, #0]
 80107e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80107e2:	2311      	movs	r3, #17
 80107e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107e6:	2340      	movs	r3, #64	; 0x40
 80107e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107ea:	2300      	movs	r3, #0
 80107ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107f4:	f107 0308 	add.w	r3, r7, #8
 80107f8:	4619      	mov	r1, r3
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f7ff ff52 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010800:	f241 3288 	movw	r2, #5000	; 0x1388
 8010804:	2111      	movs	r1, #17
 8010806:	6878      	ldr	r0, [r7, #4]
 8010808:	f000 fa1e 	bl	8010c48 <SDMMC_GetCmdResp1>
 801080c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801080e:	69fb      	ldr	r3, [r7, #28]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3720      	adds	r7, #32
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b088      	sub	sp, #32
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010826:	2312      	movs	r3, #18
 8010828:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801082a:	2340      	movs	r3, #64	; 0x40
 801082c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801082e:	2300      	movs	r3, #0
 8010830:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010836:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010838:	f107 0308 	add.w	r3, r7, #8
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff ff30 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010844:	f241 3288 	movw	r2, #5000	; 0x1388
 8010848:	2112      	movs	r1, #18
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 f9fc 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010850:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010852:	69fb      	ldr	r3, [r7, #28]
}
 8010854:	4618      	mov	r0, r3
 8010856:	3720      	adds	r7, #32
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b088      	sub	sp, #32
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801086a:	2318      	movs	r3, #24
 801086c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801086e:	2340      	movs	r3, #64	; 0x40
 8010870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010872:	2300      	movs	r3, #0
 8010874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801087a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801087c:	f107 0308 	add.w	r3, r7, #8
 8010880:	4619      	mov	r1, r3
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7ff ff0e 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010888:	f241 3288 	movw	r2, #5000	; 0x1388
 801088c:	2118      	movs	r1, #24
 801088e:	6878      	ldr	r0, [r7, #4]
 8010890:	f000 f9da 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010896:	69fb      	ldr	r3, [r7, #28]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3720      	adds	r7, #32
 801089c:	46bd      	mov	sp, r7
 801089e:	bd80      	pop	{r7, pc}

080108a0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b088      	sub	sp, #32
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80108ae:	2319      	movs	r3, #25
 80108b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108b2:	2340      	movs	r3, #64	; 0x40
 80108b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108b6:	2300      	movs	r3, #0
 80108b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108c0:	f107 0308 	add.w	r3, r7, #8
 80108c4:	4619      	mov	r1, r3
 80108c6:	6878      	ldr	r0, [r7, #4]
 80108c8:	f7ff feec 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80108cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80108d0:	2119      	movs	r1, #25
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 f9b8 	bl	8010c48 <SDMMC_GetCmdResp1>
 80108d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108da:	69fb      	ldr	r3, [r7, #28]
}
 80108dc:	4618      	mov	r0, r3
 80108de:	3720      	adds	r7, #32
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}

080108e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b088      	sub	sp, #32
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80108ec:	2300      	movs	r3, #0
 80108ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80108f0:	230c      	movs	r3, #12
 80108f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108f4:	2340      	movs	r3, #64	; 0x40
 80108f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108f8:	2300      	movs	r3, #0
 80108fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010900:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010902:	f107 0308 	add.w	r3, r7, #8
 8010906:	4619      	mov	r1, r3
 8010908:	6878      	ldr	r0, [r7, #4]
 801090a:	f7ff fecb 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801090e:	4a05      	ldr	r2, [pc, #20]	; (8010924 <SDMMC_CmdStopTransfer+0x40>)
 8010910:	210c      	movs	r1, #12
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f998 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801091a:	69fb      	ldr	r3, [r7, #28]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3720      	adds	r7, #32
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}
 8010924:	05f5e100 	.word	0x05f5e100

08010928 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08a      	sub	sp, #40	; 0x28
 801092c:	af00      	add	r7, sp, #0
 801092e:	60f8      	str	r0, [r7, #12]
 8010930:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010938:	2307      	movs	r3, #7
 801093a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801093c:	2340      	movs	r3, #64	; 0x40
 801093e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010940:	2300      	movs	r3, #0
 8010942:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010944:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010948:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801094a:	f107 0310 	add.w	r3, r7, #16
 801094e:	4619      	mov	r1, r3
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f7ff fea7 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010956:	f241 3288 	movw	r2, #5000	; 0x1388
 801095a:	2107      	movs	r1, #7
 801095c:	68f8      	ldr	r0, [r7, #12]
 801095e:	f000 f973 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010962:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010966:	4618      	mov	r0, r3
 8010968:	3728      	adds	r7, #40	; 0x28
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b088      	sub	sp, #32
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8010976:	2300      	movs	r3, #0
 8010978:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801097a:	2300      	movs	r3, #0
 801097c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801097e:	2300      	movs	r3, #0
 8010980:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010982:	2300      	movs	r3, #0
 8010984:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010986:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801098a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801098c:	f107 0308 	add.w	r3, r7, #8
 8010990:	4619      	mov	r1, r3
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7ff fe86 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f92d 	bl	8010bf8 <SDMMC_GetCmdError>
 801099e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109a0:	69fb      	ldr	r3, [r7, #28]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3720      	adds	r7, #32
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b088      	sub	sp, #32
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80109b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80109b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80109b8:	2308      	movs	r3, #8
 80109ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109bc:	2340      	movs	r3, #64	; 0x40
 80109be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109c0:	2300      	movs	r3, #0
 80109c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109ca:	f107 0308 	add.w	r3, r7, #8
 80109ce:	4619      	mov	r1, r3
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f7ff fe67 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f000 fb16 	bl	8011008 <SDMMC_GetCmdResp7>
 80109dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109de:	69fb      	ldr	r3, [r7, #28]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	3720      	adds	r7, #32
 80109e4:	46bd      	mov	sp, r7
 80109e6:	bd80      	pop	{r7, pc}

080109e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b088      	sub	sp, #32
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80109f2:	683b      	ldr	r3, [r7, #0]
 80109f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80109f6:	2337      	movs	r3, #55	; 0x37
 80109f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80109fa:	2340      	movs	r3, #64	; 0x40
 80109fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109fe:	2300      	movs	r3, #0
 8010a00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a08:	f107 0308 	add.w	r3, r7, #8
 8010a0c:	4619      	mov	r1, r3
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff fe48 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a18:	2137      	movs	r1, #55	; 0x37
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f914 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010a20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a22:	69fb      	ldr	r3, [r7, #28]
}
 8010a24:	4618      	mov	r0, r3
 8010a26:	3720      	adds	r7, #32
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	bd80      	pop	{r7, pc}

08010a2c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b088      	sub	sp, #32
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010a42:	2329      	movs	r3, #41	; 0x29
 8010a44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a46:	2340      	movs	r3, #64	; 0x40
 8010a48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a54:	f107 0308 	add.w	r3, r7, #8
 8010a58:	4619      	mov	r1, r3
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	f7ff fe22 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 fa23 	bl	8010eac <SDMMC_GetCmdResp3>
 8010a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a68:	69fb      	ldr	r3, [r7, #28]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3720      	adds	r7, #32
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}

08010a72 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010a72:	b580      	push	{r7, lr}
 8010a74:	b088      	sub	sp, #32
 8010a76:	af00      	add	r7, sp, #0
 8010a78:	6078      	str	r0, [r7, #4]
 8010a7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010a7c:	683b      	ldr	r3, [r7, #0]
 8010a7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010a80:	2306      	movs	r3, #6
 8010a82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a84:	2340      	movs	r3, #64	; 0x40
 8010a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a92:	f107 0308 	add.w	r3, r7, #8
 8010a96:	4619      	mov	r1, r3
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f7ff fe03 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010aa2:	2106      	movs	r1, #6
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f8cf 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010aaa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aac:	69fb      	ldr	r3, [r7, #28]
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3720      	adds	r7, #32
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	bd80      	pop	{r7, pc}

08010ab6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8010ab6:	b580      	push	{r7, lr}
 8010ab8:	b088      	sub	sp, #32
 8010aba:	af00      	add	r7, sp, #0
 8010abc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010abe:	2300      	movs	r3, #0
 8010ac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010ac2:	2333      	movs	r3, #51	; 0x33
 8010ac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010ac6:	2340      	movs	r3, #64	; 0x40
 8010ac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010aca:	2300      	movs	r3, #0
 8010acc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010ace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010ad2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010ad4:	f107 0308 	add.w	r3, r7, #8
 8010ad8:	4619      	mov	r1, r3
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f7ff fde2 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ae4:	2133      	movs	r1, #51	; 0x33
 8010ae6:	6878      	ldr	r0, [r7, #4]
 8010ae8:	f000 f8ae 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010aec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aee:	69fb      	ldr	r3, [r7, #28]
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3720      	adds	r7, #32
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}

08010af8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b088      	sub	sp, #32
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010b00:	2300      	movs	r3, #0
 8010b02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010b04:	2302      	movs	r3, #2
 8010b06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010b08:	23c0      	movs	r3, #192	; 0xc0
 8010b0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b16:	f107 0308 	add.w	r3, r7, #8
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f7ff fdc1 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 f97c 	bl	8010e20 <SDMMC_GetCmdResp2>
 8010b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b2a:	69fb      	ldr	r3, [r7, #28]
}
 8010b2c:	4618      	mov	r0, r3
 8010b2e:	3720      	adds	r7, #32
 8010b30:	46bd      	mov	sp, r7
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b088      	sub	sp, #32
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010b42:	2309      	movs	r3, #9
 8010b44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010b46:	23c0      	movs	r3, #192	; 0xc0
 8010b48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b54:	f107 0308 	add.w	r3, r7, #8
 8010b58:	4619      	mov	r1, r3
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f7ff fda2 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f000 f95d 	bl	8010e20 <SDMMC_GetCmdResp2>
 8010b66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b68:	69fb      	ldr	r3, [r7, #28]
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3720      	adds	r7, #32
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	bd80      	pop	{r7, pc}

08010b72 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010b72:	b580      	push	{r7, lr}
 8010b74:	b088      	sub	sp, #32
 8010b76:	af00      	add	r7, sp, #0
 8010b78:	6078      	str	r0, [r7, #4]
 8010b7a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010b80:	2303      	movs	r3, #3
 8010b82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010b84:	2340      	movs	r3, #64	; 0x40
 8010b86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b90:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010b92:	f107 0308 	add.w	r3, r7, #8
 8010b96:	4619      	mov	r1, r3
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7ff fd83 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010b9e:	683a      	ldr	r2, [r7, #0]
 8010ba0:	2103      	movs	r1, #3
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 f9bc 	bl	8010f20 <SDMMC_GetCmdResp6>
 8010ba8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010baa:	69fb      	ldr	r3, [r7, #28]
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3720      	adds	r7, #32
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b088      	sub	sp, #32
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010bbe:	683b      	ldr	r3, [r7, #0]
 8010bc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010bc2:	230d      	movs	r3, #13
 8010bc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010bc6:	2340      	movs	r3, #64	; 0x40
 8010bc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bd2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010bd4:	f107 0308 	add.w	r3, r7, #8
 8010bd8:	4619      	mov	r1, r3
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7ff fd62 	bl	80106a4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010be4:	210d      	movs	r1, #13
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f000 f82e 	bl	8010c48 <SDMMC_GetCmdResp1>
 8010bec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010bee:	69fb      	ldr	r3, [r7, #28]
}
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	3720      	adds	r7, #32
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bd80      	pop	{r7, pc}

08010bf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010bf8:	b490      	push	{r4, r7}
 8010bfa:	b082      	sub	sp, #8
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010c00:	4b0f      	ldr	r3, [pc, #60]	; (8010c40 <SDMMC_GetCmdError+0x48>)
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	4a0f      	ldr	r2, [pc, #60]	; (8010c44 <SDMMC_GetCmdError+0x4c>)
 8010c06:	fba2 2303 	umull	r2, r3, r2, r3
 8010c0a:	0a5b      	lsrs	r3, r3, #9
 8010c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c14:	4623      	mov	r3, r4
 8010c16:	1e5c      	subs	r4, r3, #1
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d102      	bne.n	8010c22 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c20:	e009      	b.n	8010c36 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d0f2      	beq.n	8010c14 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	22c5      	movs	r2, #197	; 0xc5
 8010c32:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010c34:	2300      	movs	r3, #0
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	3708      	adds	r7, #8
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bc90      	pop	{r4, r7}
 8010c3e:	4770      	bx	lr
 8010c40:	20000000 	.word	0x20000000
 8010c44:	10624dd3 	.word	0x10624dd3

08010c48 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010c48:	b590      	push	{r4, r7, lr}
 8010c4a:	b087      	sub	sp, #28
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	460b      	mov	r3, r1
 8010c52:	607a      	str	r2, [r7, #4]
 8010c54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010c56:	4b6f      	ldr	r3, [pc, #444]	; (8010e14 <SDMMC_GetCmdResp1+0x1cc>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4a6f      	ldr	r2, [pc, #444]	; (8010e18 <SDMMC_GetCmdResp1+0x1d0>)
 8010c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010c60:	0a5b      	lsrs	r3, r3, #9
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010c68:	4623      	mov	r3, r4
 8010c6a:	1e5c      	subs	r4, r3, #1
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d102      	bne.n	8010c76 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010c70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010c74:	e0c9      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c7a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c7c:	697b      	ldr	r3, [r7, #20]
 8010c7e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d0f0      	beq.n	8010c68 <SDMMC_GetCmdResp1+0x20>
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d1eb      	bne.n	8010c68 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c94:	f003 0304 	and.w	r3, r3, #4
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d004      	beq.n	8010ca6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2204      	movs	r2, #4
 8010ca0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ca2:	2304      	movs	r3, #4
 8010ca4:	e0b1      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010caa:	f003 0301 	and.w	r3, r3, #1
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d004      	beq.n	8010cbc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	2201      	movs	r2, #1
 8010cb6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	e0a6      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	22c5      	movs	r2, #197	; 0xc5
 8010cc0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010cc2:	68f8      	ldr	r0, [r7, #12]
 8010cc4:	f7ff fd18 	bl	80106f8 <SDIO_GetCommandResponse>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	461a      	mov	r2, r3
 8010ccc:	7afb      	ldrb	r3, [r7, #11]
 8010cce:	4293      	cmp	r3, r2
 8010cd0:	d001      	beq.n	8010cd6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cd2:	2301      	movs	r3, #1
 8010cd4:	e099      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010cd6:	2100      	movs	r1, #0
 8010cd8:	68f8      	ldr	r0, [r7, #12]
 8010cda:	f7ff fd1a 	bl	8010712 <SDIO_GetResponse>
 8010cde:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	4b4e      	ldr	r3, [pc, #312]	; (8010e1c <SDMMC_GetCmdResp1+0x1d4>)
 8010ce4:	4013      	ands	r3, r2
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010cea:	2300      	movs	r3, #0
 8010cec:	e08d      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010cee:	693b      	ldr	r3, [r7, #16]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	da02      	bge.n	8010cfa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010cf8:	e087      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010cfa:	693b      	ldr	r3, [r7, #16]
 8010cfc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d001      	beq.n	8010d08 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d04:	2340      	movs	r3, #64	; 0x40
 8010d06:	e080      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d12:	2380      	movs	r3, #128	; 0x80
 8010d14:	e079      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d24:	e071      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d002      	beq.n	8010d36 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d34:	e069      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d002      	beq.n	8010d46 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010d40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d44:	e061      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d002      	beq.n	8010d56 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d54:	e059      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010d56:	693b      	ldr	r3, [r7, #16]
 8010d58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d64:	e051      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010d66:	693b      	ldr	r3, [r7, #16]
 8010d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d002      	beq.n	8010d76 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d74:	e049      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010d76:	693b      	ldr	r3, [r7, #16]
 8010d78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d002      	beq.n	8010d86 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010d80:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d84:	e041      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010d86:	693b      	ldr	r3, [r7, #16]
 8010d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d94:	e039      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d002      	beq.n	8010da6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010da4:	e031      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d002      	beq.n	8010db6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010db0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010db4:	e029      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d002      	beq.n	8010dc6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010dc0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010dc4:	e021      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010dd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010dd4:	e019      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010dd6:	693b      	ldr	r3, [r7, #16]
 8010dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d002      	beq.n	8010de6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010de0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010de4:	e011      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010de6:	693b      	ldr	r3, [r7, #16]
 8010de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d002      	beq.n	8010df6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010df0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010df4:	e009      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	f003 0308 	and.w	r3, r3, #8
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d002      	beq.n	8010e06 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010e00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010e04:	e001      	b.n	8010e0a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	371c      	adds	r7, #28
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd90      	pop	{r4, r7, pc}
 8010e12:	bf00      	nop
 8010e14:	20000000 	.word	0x20000000
 8010e18:	10624dd3 	.word	0x10624dd3
 8010e1c:	fdffe008 	.word	0xfdffe008

08010e20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010e20:	b490      	push	{r4, r7}
 8010e22:	b084      	sub	sp, #16
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e28:	4b1e      	ldr	r3, [pc, #120]	; (8010ea4 <SDMMC_GetCmdResp2+0x84>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	4a1e      	ldr	r2, [pc, #120]	; (8010ea8 <SDMMC_GetCmdResp2+0x88>)
 8010e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8010e32:	0a5b      	lsrs	r3, r3, #9
 8010e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010e3c:	4623      	mov	r3, r4
 8010e3e:	1e5c      	subs	r4, r3, #1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d102      	bne.n	8010e4a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e48:	e026      	b.n	8010e98 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d0f0      	beq.n	8010e3c <SDMMC_GetCmdResp2+0x1c>
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1eb      	bne.n	8010e3c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e68:	f003 0304 	and.w	r3, r3, #4
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d004      	beq.n	8010e7a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	2204      	movs	r2, #4
 8010e74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e76:	2304      	movs	r3, #4
 8010e78:	e00e      	b.n	8010e98 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7e:	f003 0301 	and.w	r3, r3, #1
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d004      	beq.n	8010e90 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2201      	movs	r2, #1
 8010e8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	e003      	b.n	8010e98 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	22c5      	movs	r2, #197	; 0xc5
 8010e94:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010e96:	2300      	movs	r3, #0
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3710      	adds	r7, #16
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bc90      	pop	{r4, r7}
 8010ea0:	4770      	bx	lr
 8010ea2:	bf00      	nop
 8010ea4:	20000000 	.word	0x20000000
 8010ea8:	10624dd3 	.word	0x10624dd3

08010eac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010eac:	b490      	push	{r4, r7}
 8010eae:	b084      	sub	sp, #16
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010eb4:	4b18      	ldr	r3, [pc, #96]	; (8010f18 <SDMMC_GetCmdResp3+0x6c>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	4a18      	ldr	r2, [pc, #96]	; (8010f1c <SDMMC_GetCmdResp3+0x70>)
 8010eba:	fba2 2303 	umull	r2, r3, r2, r3
 8010ebe:	0a5b      	lsrs	r3, r3, #9
 8010ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ec4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010ec8:	4623      	mov	r3, r4
 8010eca:	1e5c      	subs	r4, r3, #1
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d102      	bne.n	8010ed6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ed0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010ed4:	e01b      	b.n	8010f0e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eda:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d0f0      	beq.n	8010ec8 <SDMMC_GetCmdResp3+0x1c>
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d1eb      	bne.n	8010ec8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef4:	f003 0304 	and.w	r3, r3, #4
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d004      	beq.n	8010f06 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	2204      	movs	r2, #4
 8010f00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f02:	2304      	movs	r3, #4
 8010f04:	e003      	b.n	8010f0e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	22c5      	movs	r2, #197	; 0xc5
 8010f0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010f0c:	2300      	movs	r3, #0
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3710      	adds	r7, #16
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bc90      	pop	{r4, r7}
 8010f16:	4770      	bx	lr
 8010f18:	20000000 	.word	0x20000000
 8010f1c:	10624dd3 	.word	0x10624dd3

08010f20 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010f20:	b590      	push	{r4, r7, lr}
 8010f22:	b087      	sub	sp, #28
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	60f8      	str	r0, [r7, #12]
 8010f28:	460b      	mov	r3, r1
 8010f2a:	607a      	str	r2, [r7, #4]
 8010f2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010f2e:	4b34      	ldr	r3, [pc, #208]	; (8011000 <SDMMC_GetCmdResp6+0xe0>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	4a34      	ldr	r2, [pc, #208]	; (8011004 <SDMMC_GetCmdResp6+0xe4>)
 8010f34:	fba2 2303 	umull	r2, r3, r2, r3
 8010f38:	0a5b      	lsrs	r3, r3, #9
 8010f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f3e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010f42:	4623      	mov	r3, r4
 8010f44:	1e5c      	subs	r4, r3, #1
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d102      	bne.n	8010f50 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010f4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010f4e:	e052      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f54:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d0f0      	beq.n	8010f42 <SDMMC_GetCmdResp6+0x22>
 8010f60:	697b      	ldr	r3, [r7, #20]
 8010f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d1eb      	bne.n	8010f42 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f6e:	f003 0304 	and.w	r3, r3, #4
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d004      	beq.n	8010f80 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	2204      	movs	r2, #4
 8010f7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f7c:	2304      	movs	r3, #4
 8010f7e:	e03a      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f84:	f003 0301 	and.w	r3, r3, #1
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d004      	beq.n	8010f96 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2201      	movs	r2, #1
 8010f90:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010f92:	2301      	movs	r3, #1
 8010f94:	e02f      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f7ff fbae 	bl	80106f8 <SDIO_GetCommandResponse>
 8010f9c:	4603      	mov	r3, r0
 8010f9e:	461a      	mov	r2, r3
 8010fa0:	7afb      	ldrb	r3, [r7, #11]
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	d001      	beq.n	8010faa <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	e025      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	22c5      	movs	r2, #197	; 0xc5
 8010fae:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010fb0:	2100      	movs	r1, #0
 8010fb2:	68f8      	ldr	r0, [r7, #12]
 8010fb4:	f7ff fbad 	bl	8010712 <SDIO_GetResponse>
 8010fb8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d106      	bne.n	8010fd2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	0c1b      	lsrs	r3, r3, #16
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010fce:	2300      	movs	r3, #0
 8010fd0:	e011      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010fd2:	693b      	ldr	r3, [r7, #16]
 8010fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d002      	beq.n	8010fe2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010fdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010fe0:	e009      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010fe2:	693b      	ldr	r3, [r7, #16]
 8010fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d002      	beq.n	8010ff2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ff0:	e001      	b.n	8010ff6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	371c      	adds	r7, #28
 8010ffa:	46bd      	mov	sp, r7
 8010ffc:	bd90      	pop	{r4, r7, pc}
 8010ffe:	bf00      	nop
 8011000:	20000000 	.word	0x20000000
 8011004:	10624dd3 	.word	0x10624dd3

08011008 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8011008:	b490      	push	{r4, r7}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011010:	4b21      	ldr	r3, [pc, #132]	; (8011098 <SDMMC_GetCmdResp7+0x90>)
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	4a21      	ldr	r2, [pc, #132]	; (801109c <SDMMC_GetCmdResp7+0x94>)
 8011016:	fba2 2303 	umull	r2, r3, r2, r3
 801101a:	0a5b      	lsrs	r3, r3, #9
 801101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011020:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8011024:	4623      	mov	r3, r4
 8011026:	1e5c      	subs	r4, r3, #1
 8011028:	2b00      	cmp	r3, #0
 801102a:	d102      	bne.n	8011032 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801102c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011030:	e02c      	b.n	801108c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011036:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801103e:	2b00      	cmp	r3, #0
 8011040:	d0f0      	beq.n	8011024 <SDMMC_GetCmdResp7+0x1c>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1eb      	bne.n	8011024 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011050:	f003 0304 	and.w	r3, r3, #4
 8011054:	2b00      	cmp	r3, #0
 8011056:	d004      	beq.n	8011062 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	2204      	movs	r2, #4
 801105c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801105e:	2304      	movs	r3, #4
 8011060:	e014      	b.n	801108c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011066:	f003 0301 	and.w	r3, r3, #1
 801106a:	2b00      	cmp	r3, #0
 801106c:	d004      	beq.n	8011078 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011074:	2301      	movs	r3, #1
 8011076:	e009      	b.n	801108c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801107c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011080:	2b00      	cmp	r3, #0
 8011082:	d002      	beq.n	801108a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2240      	movs	r2, #64	; 0x40
 8011088:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801108a:	2300      	movs	r3, #0
  
}
 801108c:	4618      	mov	r0, r3
 801108e:	3710      	adds	r7, #16
 8011090:	46bd      	mov	sp, r7
 8011092:	bc90      	pop	{r4, r7}
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	20000000 	.word	0x20000000
 801109c:	10624dd3 	.word	0x10624dd3

080110a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80110a4:	4904      	ldr	r1, [pc, #16]	; (80110b8 <MX_FATFS_Init+0x18>)
 80110a6:	4805      	ldr	r0, [pc, #20]	; (80110bc <MX_FATFS_Init+0x1c>)
 80110a8:	f003 fb9c 	bl	80147e4 <FATFS_LinkDriver>
 80110ac:	4603      	mov	r3, r0
 80110ae:	461a      	mov	r2, r3
 80110b0:	4b03      	ldr	r3, [pc, #12]	; (80110c0 <MX_FATFS_Init+0x20>)
 80110b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80110b4:	bf00      	nop
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	20044db0 	.word	0x20044db0
 80110bc:	0801a148 	.word	0x0801a148
 80110c0:	20044dac 	.word	0x20044dac

080110c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80110ca:	2300      	movs	r3, #0
 80110cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80110ce:	f000 f896 	bl	80111fe <BSP_SD_IsDetected>
 80110d2:	4603      	mov	r3, r0
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d001      	beq.n	80110dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80110d8:	2301      	movs	r3, #1
 80110da:	e012      	b.n	8011102 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80110dc:	480b      	ldr	r0, [pc, #44]	; (801110c <BSP_SD_Init+0x48>)
 80110de:	f7fb ffa5 	bl	800d02c <HAL_SD_Init>
 80110e2:	4603      	mov	r3, r0
 80110e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80110e6:	79fb      	ldrb	r3, [r7, #7]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d109      	bne.n	8011100 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80110ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80110f0:	4806      	ldr	r0, [pc, #24]	; (801110c <BSP_SD_Init+0x48>)
 80110f2:	f7fc fd4f 	bl	800db94 <HAL_SD_ConfigWideBusOperation>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80110fc:	2301      	movs	r3, #1
 80110fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011100:	79fb      	ldrb	r3, [r7, #7]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3708      	adds	r7, #8
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	20044bac 	.word	0x20044bac

08011110 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b086      	sub	sp, #24
 8011114:	af00      	add	r7, sp, #0
 8011116:	60f8      	str	r0, [r7, #12]
 8011118:	60b9      	str	r1, [r7, #8]
 801111a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801111c:	2300      	movs	r3, #0
 801111e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	68ba      	ldr	r2, [r7, #8]
 8011124:	68f9      	ldr	r1, [r7, #12]
 8011126:	4806      	ldr	r0, [pc, #24]	; (8011140 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011128:	f7fc f810 	bl	800d14c <HAL_SD_ReadBlocks_DMA>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d001      	beq.n	8011136 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011132:	2301      	movs	r3, #1
 8011134:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011136:	7dfb      	ldrb	r3, [r7, #23]
}
 8011138:	4618      	mov	r0, r3
 801113a:	3718      	adds	r7, #24
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	20044bac 	.word	0x20044bac

08011144 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b086      	sub	sp, #24
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011150:	2300      	movs	r3, #0
 8011152:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	68ba      	ldr	r2, [r7, #8]
 8011158:	68f9      	ldr	r1, [r7, #12]
 801115a:	4806      	ldr	r0, [pc, #24]	; (8011174 <BSP_SD_WriteBlocks_DMA+0x30>)
 801115c:	f7fc f8de 	bl	800d31c <HAL_SD_WriteBlocks_DMA>
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d001      	beq.n	801116a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801116a:	7dfb      	ldrb	r3, [r7, #23]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3718      	adds	r7, #24
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}
 8011174:	20044bac 	.word	0x20044bac

08011178 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801117c:	4805      	ldr	r0, [pc, #20]	; (8011194 <BSP_SD_GetCardState+0x1c>)
 801117e:	f7fc fd85 	bl	800dc8c <HAL_SD_GetCardState>
 8011182:	4603      	mov	r3, r0
 8011184:	2b04      	cmp	r3, #4
 8011186:	bf14      	ite	ne
 8011188:	2301      	movne	r3, #1
 801118a:	2300      	moveq	r3, #0
 801118c:	b2db      	uxtb	r3, r3
}
 801118e:	4618      	mov	r0, r3
 8011190:	bd80      	pop	{r7, pc}
 8011192:	bf00      	nop
 8011194:	20044bac 	.word	0x20044bac

08011198 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80111a0:	6879      	ldr	r1, [r7, #4]
 80111a2:	4803      	ldr	r0, [pc, #12]	; (80111b0 <BSP_SD_GetCardInfo+0x18>)
 80111a4:	f7fc fcca 	bl	800db3c <HAL_SD_GetCardInfo>
}
 80111a8:	bf00      	nop
 80111aa:	3708      	adds	r7, #8
 80111ac:	46bd      	mov	sp, r7
 80111ae:	bd80      	pop	{r7, pc}
 80111b0:	20044bac 	.word	0x20044bac

080111b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80111b4:	b580      	push	{r7, lr}
 80111b6:	b082      	sub	sp, #8
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80111bc:	f000 f818 	bl	80111f0 <BSP_SD_AbortCallback>
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80111d0:	f000 f9a8 	bl	8011524 <BSP_SD_WriteCpltCallback>
}
 80111d4:	bf00      	nop
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80111e4:	f000 f9aa 	bl	801153c <BSP_SD_ReadCpltCallback>
}
 80111e8:	bf00      	nop
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80111f0:	b480      	push	{r7}
 80111f2:	af00      	add	r7, sp, #0

}
 80111f4:	bf00      	nop
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr

080111fe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b082      	sub	sp, #8
 8011202:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011204:	2301      	movs	r3, #1
 8011206:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011208:	f000 f80c 	bl	8011224 <BSP_PlatformIsDetected>
 801120c:	4603      	mov	r3, r0
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011212:	2300      	movs	r3, #0
 8011214:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8011216:	79fb      	ldrb	r3, [r7, #7]
 8011218:	b2db      	uxtb	r3, r3
}
 801121a:	4618      	mov	r0, r3
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
	...

08011224 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801122a:	2301      	movs	r3, #1
 801122c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801122e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8011232:	4806      	ldr	r0, [pc, #24]	; (801124c <BSP_PlatformIsDetected+0x28>)
 8011234:	f7fa f87e 	bl	800b334 <HAL_GPIO_ReadPin>
 8011238:	4603      	mov	r3, r0
 801123a:	2b00      	cmp	r3, #0
 801123c:	d001      	beq.n	8011242 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801123e:	2300      	movs	r3, #0
 8011240:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011242:	79fb      	ldrb	r3, [r7, #7]
}
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	40020000 	.word	0x40020000

08011250 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011258:	f7f8 fde2 	bl	8009e20 <HAL_GetTick>
 801125c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801125e:	e006      	b.n	801126e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011260:	f7ff ff8a 	bl	8011178 <BSP_SD_GetCardState>
 8011264:	4603      	mov	r3, r0
 8011266:	2b00      	cmp	r3, #0
 8011268:	d101      	bne.n	801126e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801126a:	2300      	movs	r3, #0
 801126c:	e009      	b.n	8011282 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801126e:	f7f8 fdd7 	bl	8009e20 <HAL_GetTick>
 8011272:	4602      	mov	r2, r0
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	429a      	cmp	r2, r3
 801127c:	d8f0      	bhi.n	8011260 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801127e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011282:	4618      	mov	r0, r3
 8011284:	3710      	adds	r7, #16
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
	...

0801128c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	4603      	mov	r3, r0
 8011294:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011296:	4b0b      	ldr	r3, [pc, #44]	; (80112c4 <SD_CheckStatus+0x38>)
 8011298:	2201      	movs	r2, #1
 801129a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801129c:	f7ff ff6c 	bl	8011178 <BSP_SD_GetCardState>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d107      	bne.n	80112b6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80112a6:	4b07      	ldr	r3, [pc, #28]	; (80112c4 <SD_CheckStatus+0x38>)
 80112a8:	781b      	ldrb	r3, [r3, #0]
 80112aa:	b2db      	uxtb	r3, r3
 80112ac:	f023 0301 	bic.w	r3, r3, #1
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	4b04      	ldr	r3, [pc, #16]	; (80112c4 <SD_CheckStatus+0x38>)
 80112b4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80112b6:	4b03      	ldr	r3, [pc, #12]	; (80112c4 <SD_CheckStatus+0x38>)
 80112b8:	781b      	ldrb	r3, [r3, #0]
 80112ba:	b2db      	uxtb	r3, r3
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	20000009 	.word	0x20000009

080112c8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b082      	sub	sp, #8
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	4603      	mov	r3, r0
 80112d0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80112d2:	f7ff fef7 	bl	80110c4 <BSP_SD_Init>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d107      	bne.n	80112ec <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80112dc:	79fb      	ldrb	r3, [r7, #7]
 80112de:	4618      	mov	r0, r3
 80112e0:	f7ff ffd4 	bl	801128c <SD_CheckStatus>
 80112e4:	4603      	mov	r3, r0
 80112e6:	461a      	mov	r2, r3
 80112e8:	4b04      	ldr	r3, [pc, #16]	; (80112fc <SD_initialize+0x34>)
 80112ea:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80112ec:	4b03      	ldr	r3, [pc, #12]	; (80112fc <SD_initialize+0x34>)
 80112ee:	781b      	ldrb	r3, [r3, #0]
 80112f0:	b2db      	uxtb	r3, r3
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3708      	adds	r7, #8
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	20000009 	.word	0x20000009

08011300 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	4603      	mov	r3, r0
 8011308:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801130a:	79fb      	ldrb	r3, [r7, #7]
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff ffbd 	bl	801128c <SD_CheckStatus>
 8011312:	4603      	mov	r3, r0
}
 8011314:	4618      	mov	r0, r3
 8011316:	3708      	adds	r7, #8
 8011318:	46bd      	mov	sp, r7
 801131a:	bd80      	pop	{r7, pc}

0801131c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
 8011322:	60b9      	str	r1, [r7, #8]
 8011324:	607a      	str	r2, [r7, #4]
 8011326:	603b      	str	r3, [r7, #0]
 8011328:	4603      	mov	r3, r0
 801132a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801132c:	2301      	movs	r3, #1
 801132e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011330:	f247 5030 	movw	r0, #30000	; 0x7530
 8011334:	f7ff ff8c 	bl	8011250 <SD_CheckStatusWithTimeout>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	da01      	bge.n	8011342 <SD_read+0x26>
  {
    return res;
 801133e:	7dfb      	ldrb	r3, [r7, #23]
 8011340:	e03b      	b.n	80113ba <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011342:	683a      	ldr	r2, [r7, #0]
 8011344:	6879      	ldr	r1, [r7, #4]
 8011346:	68b8      	ldr	r0, [r7, #8]
 8011348:	f7ff fee2 	bl	8011110 <BSP_SD_ReadBlocks_DMA>
 801134c:	4603      	mov	r3, r0
 801134e:	2b00      	cmp	r3, #0
 8011350:	d132      	bne.n	80113b8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011352:	4b1c      	ldr	r3, [pc, #112]	; (80113c4 <SD_read+0xa8>)
 8011354:	2200      	movs	r2, #0
 8011356:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011358:	f7f8 fd62 	bl	8009e20 <HAL_GetTick>
 801135c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801135e:	bf00      	nop
 8011360:	4b18      	ldr	r3, [pc, #96]	; (80113c4 <SD_read+0xa8>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d108      	bne.n	801137a <SD_read+0x5e>
 8011368:	f7f8 fd5a 	bl	8009e20 <HAL_GetTick>
 801136c:	4602      	mov	r2, r0
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	1ad3      	subs	r3, r2, r3
 8011372:	f247 522f 	movw	r2, #29999	; 0x752f
 8011376:	4293      	cmp	r3, r2
 8011378:	d9f2      	bls.n	8011360 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 801137a:	4b12      	ldr	r3, [pc, #72]	; (80113c4 <SD_read+0xa8>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d102      	bne.n	8011388 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011382:	2301      	movs	r3, #1
 8011384:	75fb      	strb	r3, [r7, #23]
 8011386:	e017      	b.n	80113b8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011388:	4b0e      	ldr	r3, [pc, #56]	; (80113c4 <SD_read+0xa8>)
 801138a:	2200      	movs	r2, #0
 801138c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801138e:	f7f8 fd47 	bl	8009e20 <HAL_GetTick>
 8011392:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011394:	e007      	b.n	80113a6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011396:	f7ff feef 	bl	8011178 <BSP_SD_GetCardState>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d102      	bne.n	80113a6 <SD_read+0x8a>
          {
            res = RES_OK;
 80113a0:	2300      	movs	r3, #0
 80113a2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80113a4:	e008      	b.n	80113b8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80113a6:	f7f8 fd3b 	bl	8009e20 <HAL_GetTick>
 80113aa:	4602      	mov	r2, r0
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	1ad3      	subs	r3, r2, r3
 80113b0:	f247 522f 	movw	r2, #29999	; 0x752f
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d9ee      	bls.n	8011396 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80113b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3718      	adds	r7, #24
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	20042448 	.word	0x20042448

080113c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60b9      	str	r1, [r7, #8]
 80113d0:	607a      	str	r2, [r7, #4]
 80113d2:	603b      	str	r3, [r7, #0]
 80113d4:	4603      	mov	r3, r0
 80113d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80113d8:	2301      	movs	r3, #1
 80113da:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80113dc:	4b24      	ldr	r3, [pc, #144]	; (8011470 <SD_write+0xa8>)
 80113de:	2200      	movs	r2, #0
 80113e0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80113e2:	f247 5030 	movw	r0, #30000	; 0x7530
 80113e6:	f7ff ff33 	bl	8011250 <SD_CheckStatusWithTimeout>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	da01      	bge.n	80113f4 <SD_write+0x2c>
  {
    return res;
 80113f0:	7dfb      	ldrb	r3, [r7, #23]
 80113f2:	e038      	b.n	8011466 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80113f4:	683a      	ldr	r2, [r7, #0]
 80113f6:	6879      	ldr	r1, [r7, #4]
 80113f8:	68b8      	ldr	r0, [r7, #8]
 80113fa:	f7ff fea3 	bl	8011144 <BSP_SD_WriteBlocks_DMA>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d12f      	bne.n	8011464 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011404:	f7f8 fd0c 	bl	8009e20 <HAL_GetTick>
 8011408:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801140a:	bf00      	nop
 801140c:	4b18      	ldr	r3, [pc, #96]	; (8011470 <SD_write+0xa8>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d108      	bne.n	8011426 <SD_write+0x5e>
 8011414:	f7f8 fd04 	bl	8009e20 <HAL_GetTick>
 8011418:	4602      	mov	r2, r0
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	1ad3      	subs	r3, r2, r3
 801141e:	f247 522f 	movw	r2, #29999	; 0x752f
 8011422:	4293      	cmp	r3, r2
 8011424:	d9f2      	bls.n	801140c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8011426:	4b12      	ldr	r3, [pc, #72]	; (8011470 <SD_write+0xa8>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d102      	bne.n	8011434 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	75fb      	strb	r3, [r7, #23]
 8011432:	e017      	b.n	8011464 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011434:	4b0e      	ldr	r3, [pc, #56]	; (8011470 <SD_write+0xa8>)
 8011436:	2200      	movs	r2, #0
 8011438:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801143a:	f7f8 fcf1 	bl	8009e20 <HAL_GetTick>
 801143e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011440:	e007      	b.n	8011452 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011442:	f7ff fe99 	bl	8011178 <BSP_SD_GetCardState>
 8011446:	4603      	mov	r3, r0
 8011448:	2b00      	cmp	r3, #0
 801144a:	d102      	bne.n	8011452 <SD_write+0x8a>
          {
            res = RES_OK;
 801144c:	2300      	movs	r3, #0
 801144e:	75fb      	strb	r3, [r7, #23]
            break;
 8011450:	e008      	b.n	8011464 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011452:	f7f8 fce5 	bl	8009e20 <HAL_GetTick>
 8011456:	4602      	mov	r2, r0
 8011458:	693b      	ldr	r3, [r7, #16]
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011460:	4293      	cmp	r3, r2
 8011462:	d9ee      	bls.n	8011442 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011464:	7dfb      	ldrb	r3, [r7, #23]
}
 8011466:	4618      	mov	r0, r3
 8011468:	3718      	adds	r7, #24
 801146a:	46bd      	mov	sp, r7
 801146c:	bd80      	pop	{r7, pc}
 801146e:	bf00      	nop
 8011470:	20042444 	.word	0x20042444

08011474 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b08c      	sub	sp, #48	; 0x30
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	603a      	str	r2, [r7, #0]
 801147e:	71fb      	strb	r3, [r7, #7]
 8011480:	460b      	mov	r3, r1
 8011482:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011484:	2301      	movs	r3, #1
 8011486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801148a:	4b25      	ldr	r3, [pc, #148]	; (8011520 <SD_ioctl+0xac>)
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	b2db      	uxtb	r3, r3
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	2b00      	cmp	r3, #0
 8011496:	d001      	beq.n	801149c <SD_ioctl+0x28>
 8011498:	2303      	movs	r3, #3
 801149a:	e03c      	b.n	8011516 <SD_ioctl+0xa2>

  switch (cmd)
 801149c:	79bb      	ldrb	r3, [r7, #6]
 801149e:	2b03      	cmp	r3, #3
 80114a0:	d834      	bhi.n	801150c <SD_ioctl+0x98>
 80114a2:	a201      	add	r2, pc, #4	; (adr r2, 80114a8 <SD_ioctl+0x34>)
 80114a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114a8:	080114b9 	.word	0x080114b9
 80114ac:	080114c1 	.word	0x080114c1
 80114b0:	080114d9 	.word	0x080114d9
 80114b4:	080114f3 	.word	0x080114f3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114be:	e028      	b.n	8011512 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80114c0:	f107 030c 	add.w	r3, r7, #12
 80114c4:	4618      	mov	r0, r3
 80114c6:	f7ff fe67 	bl	8011198 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80114ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80114d0:	2300      	movs	r3, #0
 80114d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114d6:	e01c      	b.n	8011512 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80114d8:	f107 030c 	add.w	r3, r7, #12
 80114dc:	4618      	mov	r0, r3
 80114de:	f7ff fe5b 	bl	8011198 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80114e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114e4:	b29a      	uxth	r2, r3
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80114f0:	e00f      	b.n	8011512 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80114f2:	f107 030c 	add.w	r3, r7, #12
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7ff fe4e 	bl	8011198 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80114fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114fe:	0a5a      	lsrs	r2, r3, #9
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011504:	2300      	movs	r3, #0
 8011506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801150a:	e002      	b.n	8011512 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801150c:	2304      	movs	r3, #4
 801150e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011516:	4618      	mov	r0, r3
 8011518:	3730      	adds	r7, #48	; 0x30
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	20000009 	.word	0x20000009

08011524 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011524:	b480      	push	{r7}
 8011526:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011528:	4b03      	ldr	r3, [pc, #12]	; (8011538 <BSP_SD_WriteCpltCallback+0x14>)
 801152a:	2201      	movs	r2, #1
 801152c:	601a      	str	r2, [r3, #0]
}
 801152e:	bf00      	nop
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr
 8011538:	20042444 	.word	0x20042444

0801153c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801153c:	b480      	push	{r7}
 801153e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011540:	4b03      	ldr	r3, [pc, #12]	; (8011550 <BSP_SD_ReadCpltCallback+0x14>)
 8011542:	2201      	movs	r2, #1
 8011544:	601a      	str	r2, [r3, #0]
}
 8011546:	bf00      	nop
 8011548:	46bd      	mov	sp, r7
 801154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154e:	4770      	bx	lr
 8011550:	20042448 	.word	0x20042448

08011554 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b084      	sub	sp, #16
 8011558:	af00      	add	r7, sp, #0
 801155a:	4603      	mov	r3, r0
 801155c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801155e:	79fb      	ldrb	r3, [r7, #7]
 8011560:	4a08      	ldr	r2, [pc, #32]	; (8011584 <disk_status+0x30>)
 8011562:	009b      	lsls	r3, r3, #2
 8011564:	4413      	add	r3, r2
 8011566:	685b      	ldr	r3, [r3, #4]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	79fa      	ldrb	r2, [r7, #7]
 801156c:	4905      	ldr	r1, [pc, #20]	; (8011584 <disk_status+0x30>)
 801156e:	440a      	add	r2, r1
 8011570:	7a12      	ldrb	r2, [r2, #8]
 8011572:	4610      	mov	r0, r2
 8011574:	4798      	blx	r3
 8011576:	4603      	mov	r3, r0
 8011578:	73fb      	strb	r3, [r7, #15]
  return stat;
 801157a:	7bfb      	ldrb	r3, [r7, #15]
}
 801157c:	4618      	mov	r0, r3
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20042474 	.word	0x20042474

08011588 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	4603      	mov	r3, r0
 8011590:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011592:	2300      	movs	r3, #0
 8011594:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	4a0d      	ldr	r2, [pc, #52]	; (80115d0 <disk_initialize+0x48>)
 801159a:	5cd3      	ldrb	r3, [r2, r3]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d111      	bne.n	80115c4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80115a0:	79fb      	ldrb	r3, [r7, #7]
 80115a2:	4a0b      	ldr	r2, [pc, #44]	; (80115d0 <disk_initialize+0x48>)
 80115a4:	2101      	movs	r1, #1
 80115a6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80115a8:	79fb      	ldrb	r3, [r7, #7]
 80115aa:	4a09      	ldr	r2, [pc, #36]	; (80115d0 <disk_initialize+0x48>)
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	79fa      	ldrb	r2, [r7, #7]
 80115b6:	4906      	ldr	r1, [pc, #24]	; (80115d0 <disk_initialize+0x48>)
 80115b8:	440a      	add	r2, r1
 80115ba:	7a12      	ldrb	r2, [r2, #8]
 80115bc:	4610      	mov	r0, r2
 80115be:	4798      	blx	r3
 80115c0:	4603      	mov	r3, r0
 80115c2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80115c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	20042474 	.word	0x20042474

080115d4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b087      	sub	sp, #28
 80115d8:	af00      	add	r7, sp, #0
 80115da:	60b9      	str	r1, [r7, #8]
 80115dc:	607a      	str	r2, [r7, #4]
 80115de:	603b      	str	r3, [r7, #0]
 80115e0:	4603      	mov	r3, r0
 80115e2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80115e4:	7bfb      	ldrb	r3, [r7, #15]
 80115e6:	4a0a      	ldr	r2, [pc, #40]	; (8011610 <disk_read+0x3c>)
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	4413      	add	r3, r2
 80115ec:	685b      	ldr	r3, [r3, #4]
 80115ee:	689c      	ldr	r4, [r3, #8]
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
 80115f2:	4a07      	ldr	r2, [pc, #28]	; (8011610 <disk_read+0x3c>)
 80115f4:	4413      	add	r3, r2
 80115f6:	7a18      	ldrb	r0, [r3, #8]
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	687a      	ldr	r2, [r7, #4]
 80115fc:	68b9      	ldr	r1, [r7, #8]
 80115fe:	47a0      	blx	r4
 8011600:	4603      	mov	r3, r0
 8011602:	75fb      	strb	r3, [r7, #23]
  return res;
 8011604:	7dfb      	ldrb	r3, [r7, #23]
}
 8011606:	4618      	mov	r0, r3
 8011608:	371c      	adds	r7, #28
 801160a:	46bd      	mov	sp, r7
 801160c:	bd90      	pop	{r4, r7, pc}
 801160e:	bf00      	nop
 8011610:	20042474 	.word	0x20042474

08011614 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011614:	b590      	push	{r4, r7, lr}
 8011616:	b087      	sub	sp, #28
 8011618:	af00      	add	r7, sp, #0
 801161a:	60b9      	str	r1, [r7, #8]
 801161c:	607a      	str	r2, [r7, #4]
 801161e:	603b      	str	r3, [r7, #0]
 8011620:	4603      	mov	r3, r0
 8011622:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011624:	7bfb      	ldrb	r3, [r7, #15]
 8011626:	4a0a      	ldr	r2, [pc, #40]	; (8011650 <disk_write+0x3c>)
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	685b      	ldr	r3, [r3, #4]
 801162e:	68dc      	ldr	r4, [r3, #12]
 8011630:	7bfb      	ldrb	r3, [r7, #15]
 8011632:	4a07      	ldr	r2, [pc, #28]	; (8011650 <disk_write+0x3c>)
 8011634:	4413      	add	r3, r2
 8011636:	7a18      	ldrb	r0, [r3, #8]
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	687a      	ldr	r2, [r7, #4]
 801163c:	68b9      	ldr	r1, [r7, #8]
 801163e:	47a0      	blx	r4
 8011640:	4603      	mov	r3, r0
 8011642:	75fb      	strb	r3, [r7, #23]
  return res;
 8011644:	7dfb      	ldrb	r3, [r7, #23]
}
 8011646:	4618      	mov	r0, r3
 8011648:	371c      	adds	r7, #28
 801164a:	46bd      	mov	sp, r7
 801164c:	bd90      	pop	{r4, r7, pc}
 801164e:	bf00      	nop
 8011650:	20042474 	.word	0x20042474

08011654 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b084      	sub	sp, #16
 8011658:	af00      	add	r7, sp, #0
 801165a:	4603      	mov	r3, r0
 801165c:	603a      	str	r2, [r7, #0]
 801165e:	71fb      	strb	r3, [r7, #7]
 8011660:	460b      	mov	r3, r1
 8011662:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011664:	79fb      	ldrb	r3, [r7, #7]
 8011666:	4a09      	ldr	r2, [pc, #36]	; (801168c <disk_ioctl+0x38>)
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	4413      	add	r3, r2
 801166c:	685b      	ldr	r3, [r3, #4]
 801166e:	691b      	ldr	r3, [r3, #16]
 8011670:	79fa      	ldrb	r2, [r7, #7]
 8011672:	4906      	ldr	r1, [pc, #24]	; (801168c <disk_ioctl+0x38>)
 8011674:	440a      	add	r2, r1
 8011676:	7a10      	ldrb	r0, [r2, #8]
 8011678:	79b9      	ldrb	r1, [r7, #6]
 801167a:	683a      	ldr	r2, [r7, #0]
 801167c:	4798      	blx	r3
 801167e:	4603      	mov	r3, r0
 8011680:	73fb      	strb	r3, [r7, #15]
  return res;
 8011682:	7bfb      	ldrb	r3, [r7, #15]
}
 8011684:	4618      	mov	r0, r3
 8011686:	3710      	adds	r7, #16
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}
 801168c:	20042474 	.word	0x20042474

08011690 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011690:	b480      	push	{r7}
 8011692:	b085      	sub	sp, #20
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	3301      	adds	r3, #1
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80116a0:	89fb      	ldrh	r3, [r7, #14]
 80116a2:	021b      	lsls	r3, r3, #8
 80116a4:	b21a      	sxth	r2, r3
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	b21b      	sxth	r3, r3
 80116ac:	4313      	orrs	r3, r2
 80116ae:	b21b      	sxth	r3, r3
 80116b0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80116b2:	89fb      	ldrh	r3, [r7, #14]
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3714      	adds	r7, #20
 80116b8:	46bd      	mov	sp, r7
 80116ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116be:	4770      	bx	lr

080116c0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80116c0:	b480      	push	{r7}
 80116c2:	b085      	sub	sp, #20
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	3303      	adds	r3, #3
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	021b      	lsls	r3, r3, #8
 80116d4:	687a      	ldr	r2, [r7, #4]
 80116d6:	3202      	adds	r2, #2
 80116d8:	7812      	ldrb	r2, [r2, #0]
 80116da:	4313      	orrs	r3, r2
 80116dc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	021b      	lsls	r3, r3, #8
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	3201      	adds	r2, #1
 80116e6:	7812      	ldrb	r2, [r2, #0]
 80116e8:	4313      	orrs	r3, r2
 80116ea:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	021b      	lsls	r3, r3, #8
 80116f0:	687a      	ldr	r2, [r7, #4]
 80116f2:	7812      	ldrb	r2, [r2, #0]
 80116f4:	4313      	orrs	r3, r2
 80116f6:	60fb      	str	r3, [r7, #12]
	return rv;
 80116f8:	68fb      	ldr	r3, [r7, #12]
}
 80116fa:	4618      	mov	r0, r3
 80116fc:	3714      	adds	r7, #20
 80116fe:	46bd      	mov	sp, r7
 8011700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011704:	4770      	bx	lr

08011706 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011706:	b480      	push	{r7}
 8011708:	b083      	sub	sp, #12
 801170a:	af00      	add	r7, sp, #0
 801170c:	6078      	str	r0, [r7, #4]
 801170e:	460b      	mov	r3, r1
 8011710:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	1c5a      	adds	r2, r3, #1
 8011716:	607a      	str	r2, [r7, #4]
 8011718:	887a      	ldrh	r2, [r7, #2]
 801171a:	b2d2      	uxtb	r2, r2
 801171c:	701a      	strb	r2, [r3, #0]
 801171e:	887b      	ldrh	r3, [r7, #2]
 8011720:	0a1b      	lsrs	r3, r3, #8
 8011722:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	1c5a      	adds	r2, r3, #1
 8011728:	607a      	str	r2, [r7, #4]
 801172a:	887a      	ldrh	r2, [r7, #2]
 801172c:	b2d2      	uxtb	r2, r2
 801172e:	701a      	strb	r2, [r3, #0]
}
 8011730:	bf00      	nop
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	1c5a      	adds	r2, r3, #1
 801174a:	607a      	str	r2, [r7, #4]
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	b2d2      	uxtb	r2, r2
 8011750:	701a      	strb	r2, [r3, #0]
 8011752:	683b      	ldr	r3, [r7, #0]
 8011754:	0a1b      	lsrs	r3, r3, #8
 8011756:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	1c5a      	adds	r2, r3, #1
 801175c:	607a      	str	r2, [r7, #4]
 801175e:	683a      	ldr	r2, [r7, #0]
 8011760:	b2d2      	uxtb	r2, r2
 8011762:	701a      	strb	r2, [r3, #0]
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	0a1b      	lsrs	r3, r3, #8
 8011768:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	1c5a      	adds	r2, r3, #1
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	683a      	ldr	r2, [r7, #0]
 8011772:	b2d2      	uxtb	r2, r2
 8011774:	701a      	strb	r2, [r3, #0]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	0a1b      	lsrs	r3, r3, #8
 801177a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	1c5a      	adds	r2, r3, #1
 8011780:	607a      	str	r2, [r7, #4]
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	b2d2      	uxtb	r2, r2
 8011786:	701a      	strb	r2, [r3, #0]
}
 8011788:	bf00      	nop
 801178a:	370c      	adds	r7, #12
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011794:	b480      	push	{r7}
 8011796:	b087      	sub	sp, #28
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d00d      	beq.n	80117ca <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80117ae:	693a      	ldr	r2, [r7, #16]
 80117b0:	1c53      	adds	r3, r2, #1
 80117b2:	613b      	str	r3, [r7, #16]
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	1c59      	adds	r1, r3, #1
 80117b8:	6179      	str	r1, [r7, #20]
 80117ba:	7812      	ldrb	r2, [r2, #0]
 80117bc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	3b01      	subs	r3, #1
 80117c2:	607b      	str	r3, [r7, #4]
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d1f1      	bne.n	80117ae <mem_cpy+0x1a>
	}
}
 80117ca:	bf00      	nop
 80117cc:	371c      	adds	r7, #28
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80117d6:	b480      	push	{r7}
 80117d8:	b087      	sub	sp, #28
 80117da:	af00      	add	r7, sp, #0
 80117dc:	60f8      	str	r0, [r7, #12]
 80117de:	60b9      	str	r1, [r7, #8]
 80117e0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	1c5a      	adds	r2, r3, #1
 80117ea:	617a      	str	r2, [r7, #20]
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	b2d2      	uxtb	r2, r2
 80117f0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	3b01      	subs	r3, #1
 80117f6:	607b      	str	r3, [r7, #4]
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d1f3      	bne.n	80117e6 <mem_set+0x10>
}
 80117fe:	bf00      	nop
 8011800:	371c      	adds	r7, #28
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr

0801180a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801180a:	b480      	push	{r7}
 801180c:	b089      	sub	sp, #36	; 0x24
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	60b9      	str	r1, [r7, #8]
 8011814:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	61fb      	str	r3, [r7, #28]
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011822:	69fb      	ldr	r3, [r7, #28]
 8011824:	1c5a      	adds	r2, r3, #1
 8011826:	61fa      	str	r2, [r7, #28]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	4619      	mov	r1, r3
 801182c:	69bb      	ldr	r3, [r7, #24]
 801182e:	1c5a      	adds	r2, r3, #1
 8011830:	61ba      	str	r2, [r7, #24]
 8011832:	781b      	ldrb	r3, [r3, #0]
 8011834:	1acb      	subs	r3, r1, r3
 8011836:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	3b01      	subs	r3, #1
 801183c:	607b      	str	r3, [r7, #4]
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	2b00      	cmp	r3, #0
 8011842:	d002      	beq.n	801184a <mem_cmp+0x40>
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d0eb      	beq.n	8011822 <mem_cmp+0x18>

	return r;
 801184a:	697b      	ldr	r3, [r7, #20]
}
 801184c:	4618      	mov	r0, r3
 801184e:	3724      	adds	r7, #36	; 0x24
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	4770      	bx	lr

08011858 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011862:	e002      	b.n	801186a <chk_chr+0x12>
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	3301      	adds	r3, #1
 8011868:	607b      	str	r3, [r7, #4]
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d005      	beq.n	801187e <chk_chr+0x26>
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	461a      	mov	r2, r3
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	4293      	cmp	r3, r2
 801187c:	d1f2      	bne.n	8011864 <chk_chr+0xc>
	return *str;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	781b      	ldrb	r3, [r3, #0]
}
 8011882:	4618      	mov	r0, r3
 8011884:	370c      	adds	r7, #12
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr
	...

08011890 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011890:	b480      	push	{r7}
 8011892:	b085      	sub	sp, #20
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
 8011898:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801189a:	2300      	movs	r3, #0
 801189c:	60bb      	str	r3, [r7, #8]
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	60fb      	str	r3, [r7, #12]
 80118a2:	e029      	b.n	80118f8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80118a4:	4a27      	ldr	r2, [pc, #156]	; (8011944 <chk_lock+0xb4>)
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	011b      	lsls	r3, r3, #4
 80118aa:	4413      	add	r3, r2
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d01d      	beq.n	80118ee <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118b2:	4a24      	ldr	r2, [pc, #144]	; (8011944 <chk_lock+0xb4>)
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	011b      	lsls	r3, r3, #4
 80118b8:	4413      	add	r3, r2
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d116      	bne.n	80118f2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80118c4:	4a1f      	ldr	r2, [pc, #124]	; (8011944 <chk_lock+0xb4>)
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	011b      	lsls	r3, r3, #4
 80118ca:	4413      	add	r3, r2
 80118cc:	3304      	adds	r3, #4
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d10c      	bne.n	80118f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118d8:	4a1a      	ldr	r2, [pc, #104]	; (8011944 <chk_lock+0xb4>)
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	011b      	lsls	r3, r3, #4
 80118de:	4413      	add	r3, r2
 80118e0:	3308      	adds	r3, #8
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d102      	bne.n	80118f2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80118ec:	e007      	b.n	80118fe <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80118ee:	2301      	movs	r3, #1
 80118f0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	3301      	adds	r3, #1
 80118f6:	60fb      	str	r3, [r7, #12]
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	2b01      	cmp	r3, #1
 80118fc:	d9d2      	bls.n	80118a4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	2b02      	cmp	r3, #2
 8011902:	d109      	bne.n	8011918 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d102      	bne.n	8011910 <chk_lock+0x80>
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	2b02      	cmp	r3, #2
 801190e:	d101      	bne.n	8011914 <chk_lock+0x84>
 8011910:	2300      	movs	r3, #0
 8011912:	e010      	b.n	8011936 <chk_lock+0xa6>
 8011914:	2312      	movs	r3, #18
 8011916:	e00e      	b.n	8011936 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d108      	bne.n	8011930 <chk_lock+0xa0>
 801191e:	4a09      	ldr	r2, [pc, #36]	; (8011944 <chk_lock+0xb4>)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	011b      	lsls	r3, r3, #4
 8011924:	4413      	add	r3, r2
 8011926:	330c      	adds	r3, #12
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801192e:	d101      	bne.n	8011934 <chk_lock+0xa4>
 8011930:	2310      	movs	r3, #16
 8011932:	e000      	b.n	8011936 <chk_lock+0xa6>
 8011934:	2300      	movs	r3, #0
}
 8011936:	4618      	mov	r0, r3
 8011938:	3714      	adds	r7, #20
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop
 8011944:	20042454 	.word	0x20042454

08011948 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011948:	b480      	push	{r7}
 801194a:	b083      	sub	sp, #12
 801194c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801194e:	2300      	movs	r3, #0
 8011950:	607b      	str	r3, [r7, #4]
 8011952:	e002      	b.n	801195a <enq_lock+0x12>
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3301      	adds	r3, #1
 8011958:	607b      	str	r3, [r7, #4]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	2b01      	cmp	r3, #1
 801195e:	d806      	bhi.n	801196e <enq_lock+0x26>
 8011960:	4a09      	ldr	r2, [pc, #36]	; (8011988 <enq_lock+0x40>)
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	011b      	lsls	r3, r3, #4
 8011966:	4413      	add	r3, r2
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1f2      	bne.n	8011954 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b02      	cmp	r3, #2
 8011972:	bf14      	ite	ne
 8011974:	2301      	movne	r3, #1
 8011976:	2300      	moveq	r3, #0
 8011978:	b2db      	uxtb	r3, r3
}
 801197a:	4618      	mov	r0, r3
 801197c:	370c      	adds	r7, #12
 801197e:	46bd      	mov	sp, r7
 8011980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011984:	4770      	bx	lr
 8011986:	bf00      	nop
 8011988:	20042454 	.word	0x20042454

0801198c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801198c:	b480      	push	{r7}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011996:	2300      	movs	r3, #0
 8011998:	60fb      	str	r3, [r7, #12]
 801199a:	e01f      	b.n	80119dc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801199c:	4a41      	ldr	r2, [pc, #260]	; (8011aa4 <inc_lock+0x118>)
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	011b      	lsls	r3, r3, #4
 80119a2:	4413      	add	r3, r2
 80119a4:	681a      	ldr	r2, [r3, #0]
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d113      	bne.n	80119d6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80119ae:	4a3d      	ldr	r2, [pc, #244]	; (8011aa4 <inc_lock+0x118>)
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	011b      	lsls	r3, r3, #4
 80119b4:	4413      	add	r3, r2
 80119b6:	3304      	adds	r3, #4
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80119be:	429a      	cmp	r2, r3
 80119c0:	d109      	bne.n	80119d6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80119c2:	4a38      	ldr	r2, [pc, #224]	; (8011aa4 <inc_lock+0x118>)
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	011b      	lsls	r3, r3, #4
 80119c8:	4413      	add	r3, r2
 80119ca:	3308      	adds	r3, #8
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d006      	beq.n	80119e4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	3301      	adds	r3, #1
 80119da:	60fb      	str	r3, [r7, #12]
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2b01      	cmp	r3, #1
 80119e0:	d9dc      	bls.n	801199c <inc_lock+0x10>
 80119e2:	e000      	b.n	80119e6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80119e4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	2b02      	cmp	r3, #2
 80119ea:	d132      	bne.n	8011a52 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80119ec:	2300      	movs	r3, #0
 80119ee:	60fb      	str	r3, [r7, #12]
 80119f0:	e002      	b.n	80119f8 <inc_lock+0x6c>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3301      	adds	r3, #1
 80119f6:	60fb      	str	r3, [r7, #12]
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d806      	bhi.n	8011a0c <inc_lock+0x80>
 80119fe:	4a29      	ldr	r2, [pc, #164]	; (8011aa4 <inc_lock+0x118>)
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	011b      	lsls	r3, r3, #4
 8011a04:	4413      	add	r3, r2
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d1f2      	bne.n	80119f2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	2b02      	cmp	r3, #2
 8011a10:	d101      	bne.n	8011a16 <inc_lock+0x8a>
 8011a12:	2300      	movs	r3, #0
 8011a14:	e040      	b.n	8011a98 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681a      	ldr	r2, [r3, #0]
 8011a1a:	4922      	ldr	r1, [pc, #136]	; (8011aa4 <inc_lock+0x118>)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	011b      	lsls	r3, r3, #4
 8011a20:	440b      	add	r3, r1
 8011a22:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	689a      	ldr	r2, [r3, #8]
 8011a28:	491e      	ldr	r1, [pc, #120]	; (8011aa4 <inc_lock+0x118>)
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	011b      	lsls	r3, r3, #4
 8011a2e:	440b      	add	r3, r1
 8011a30:	3304      	adds	r3, #4
 8011a32:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	695a      	ldr	r2, [r3, #20]
 8011a38:	491a      	ldr	r1, [pc, #104]	; (8011aa4 <inc_lock+0x118>)
 8011a3a:	68fb      	ldr	r3, [r7, #12]
 8011a3c:	011b      	lsls	r3, r3, #4
 8011a3e:	440b      	add	r3, r1
 8011a40:	3308      	adds	r3, #8
 8011a42:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011a44:	4a17      	ldr	r2, [pc, #92]	; (8011aa4 <inc_lock+0x118>)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	011b      	lsls	r3, r3, #4
 8011a4a:	4413      	add	r3, r2
 8011a4c:	330c      	adds	r3, #12
 8011a4e:	2200      	movs	r2, #0
 8011a50:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011a52:	683b      	ldr	r3, [r7, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d009      	beq.n	8011a6c <inc_lock+0xe0>
 8011a58:	4a12      	ldr	r2, [pc, #72]	; (8011aa4 <inc_lock+0x118>)
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	011b      	lsls	r3, r3, #4
 8011a5e:	4413      	add	r3, r2
 8011a60:	330c      	adds	r3, #12
 8011a62:	881b      	ldrh	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d001      	beq.n	8011a6c <inc_lock+0xe0>
 8011a68:	2300      	movs	r3, #0
 8011a6a:	e015      	b.n	8011a98 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011a6c:	683b      	ldr	r3, [r7, #0]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d108      	bne.n	8011a84 <inc_lock+0xf8>
 8011a72:	4a0c      	ldr	r2, [pc, #48]	; (8011aa4 <inc_lock+0x118>)
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	011b      	lsls	r3, r3, #4
 8011a78:	4413      	add	r3, r2
 8011a7a:	330c      	adds	r3, #12
 8011a7c:	881b      	ldrh	r3, [r3, #0]
 8011a7e:	3301      	adds	r3, #1
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	e001      	b.n	8011a88 <inc_lock+0xfc>
 8011a84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011a88:	4906      	ldr	r1, [pc, #24]	; (8011aa4 <inc_lock+0x118>)
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	011b      	lsls	r3, r3, #4
 8011a8e:	440b      	add	r3, r1
 8011a90:	330c      	adds	r3, #12
 8011a92:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	3301      	adds	r3, #1
}
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3714      	adds	r7, #20
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa2:	4770      	bx	lr
 8011aa4:	20042454 	.word	0x20042454

08011aa8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b085      	sub	sp, #20
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	3b01      	subs	r3, #1
 8011ab4:	607b      	str	r3, [r7, #4]
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	2b01      	cmp	r3, #1
 8011aba:	d825      	bhi.n	8011b08 <dec_lock+0x60>
		n = Files[i].ctr;
 8011abc:	4a17      	ldr	r2, [pc, #92]	; (8011b1c <dec_lock+0x74>)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	011b      	lsls	r3, r3, #4
 8011ac2:	4413      	add	r3, r2
 8011ac4:	330c      	adds	r3, #12
 8011ac6:	881b      	ldrh	r3, [r3, #0]
 8011ac8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011aca:	89fb      	ldrh	r3, [r7, #14]
 8011acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ad0:	d101      	bne.n	8011ad6 <dec_lock+0x2e>
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011ad6:	89fb      	ldrh	r3, [r7, #14]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d002      	beq.n	8011ae2 <dec_lock+0x3a>
 8011adc:	89fb      	ldrh	r3, [r7, #14]
 8011ade:	3b01      	subs	r3, #1
 8011ae0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011ae2:	4a0e      	ldr	r2, [pc, #56]	; (8011b1c <dec_lock+0x74>)
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	011b      	lsls	r3, r3, #4
 8011ae8:	4413      	add	r3, r2
 8011aea:	330c      	adds	r3, #12
 8011aec:	89fa      	ldrh	r2, [r7, #14]
 8011aee:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011af0:	89fb      	ldrh	r3, [r7, #14]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d105      	bne.n	8011b02 <dec_lock+0x5a>
 8011af6:	4a09      	ldr	r2, [pc, #36]	; (8011b1c <dec_lock+0x74>)
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	011b      	lsls	r3, r3, #4
 8011afc:	4413      	add	r3, r2
 8011afe:	2200      	movs	r2, #0
 8011b00:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011b02:	2300      	movs	r3, #0
 8011b04:	737b      	strb	r3, [r7, #13]
 8011b06:	e001      	b.n	8011b0c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011b08:	2302      	movs	r3, #2
 8011b0a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011b0c:	7b7b      	ldrb	r3, [r7, #13]
}
 8011b0e:	4618      	mov	r0, r3
 8011b10:	3714      	adds	r7, #20
 8011b12:	46bd      	mov	sp, r7
 8011b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop
 8011b1c:	20042454 	.word	0x20042454

08011b20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011b20:	b480      	push	{r7}
 8011b22:	b085      	sub	sp, #20
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011b28:	2300      	movs	r3, #0
 8011b2a:	60fb      	str	r3, [r7, #12]
 8011b2c:	e010      	b.n	8011b50 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b2e:	4a0d      	ldr	r2, [pc, #52]	; (8011b64 <clear_lock+0x44>)
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	011b      	lsls	r3, r3, #4
 8011b34:	4413      	add	r3, r2
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d105      	bne.n	8011b4a <clear_lock+0x2a>
 8011b3e:	4a09      	ldr	r2, [pc, #36]	; (8011b64 <clear_lock+0x44>)
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	011b      	lsls	r3, r3, #4
 8011b44:	4413      	add	r3, r2
 8011b46:	2200      	movs	r2, #0
 8011b48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	3301      	adds	r3, #1
 8011b4e:	60fb      	str	r3, [r7, #12]
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d9eb      	bls.n	8011b2e <clear_lock+0xe>
	}
}
 8011b56:	bf00      	nop
 8011b58:	3714      	adds	r7, #20
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b60:	4770      	bx	lr
 8011b62:	bf00      	nop
 8011b64:	20042454 	.word	0x20042454

08011b68 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b086      	sub	sp, #24
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	78db      	ldrb	r3, [r3, #3]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d034      	beq.n	8011be6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b80:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	7858      	ldrb	r0, [r3, #1]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	697a      	ldr	r2, [r7, #20]
 8011b90:	f7ff fd40 	bl	8011614 <disk_write>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d002      	beq.n	8011ba0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	73fb      	strb	r3, [r7, #15]
 8011b9e:	e022      	b.n	8011be6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	1ad2      	subs	r2, r2, r3
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	6a1b      	ldr	r3, [r3, #32]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d217      	bcs.n	8011be6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	789b      	ldrb	r3, [r3, #2]
 8011bba:	613b      	str	r3, [r7, #16]
 8011bbc:	e010      	b.n	8011be0 <sync_window+0x78>
					wsect += fs->fsize;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	697a      	ldr	r2, [r7, #20]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	7858      	ldrb	r0, [r3, #1]
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	697a      	ldr	r2, [r7, #20]
 8011bd6:	f7ff fd1d 	bl	8011614 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	3b01      	subs	r3, #1
 8011bde:	613b      	str	r3, [r7, #16]
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	2b01      	cmp	r3, #1
 8011be4:	d8eb      	bhi.n	8011bbe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8011be8:	4618      	mov	r0, r3
 8011bea:	3718      	adds	r7, #24
 8011bec:	46bd      	mov	sp, r7
 8011bee:	bd80      	pop	{r7, pc}

08011bf0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c02:	683a      	ldr	r2, [r7, #0]
 8011c04:	429a      	cmp	r2, r3
 8011c06:	d01b      	beq.n	8011c40 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f7ff ffad 	bl	8011b68 <sync_window>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d113      	bne.n	8011c40 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	7858      	ldrb	r0, [r3, #1]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011c22:	2301      	movs	r3, #1
 8011c24:	683a      	ldr	r2, [r7, #0]
 8011c26:	f7ff fcd5 	bl	80115d4 <disk_read>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	2b00      	cmp	r3, #0
 8011c2e:	d004      	beq.n	8011c3a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011c30:	f04f 33ff 	mov.w	r3, #4294967295
 8011c34:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011c36:	2301      	movs	r3, #1
 8011c38:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	683a      	ldr	r2, [r7, #0]
 8011c3e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c42:	4618      	mov	r0, r3
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
	...

08011c4c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011c4c:	b580      	push	{r7, lr}
 8011c4e:	b084      	sub	sp, #16
 8011c50:	af00      	add	r7, sp, #0
 8011c52:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7ff ff87 	bl	8011b68 <sync_window>
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011c5e:	7bfb      	ldrb	r3, [r7, #15]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d159      	bne.n	8011d18 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	781b      	ldrb	r3, [r3, #0]
 8011c68:	2b03      	cmp	r3, #3
 8011c6a:	d149      	bne.n	8011d00 <sync_fs+0xb4>
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	791b      	ldrb	r3, [r3, #4]
 8011c70:	2b01      	cmp	r3, #1
 8011c72:	d145      	bne.n	8011d00 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	899b      	ldrh	r3, [r3, #12]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	2100      	movs	r1, #0
 8011c82:	f7ff fda8 	bl	80117d6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	3338      	adds	r3, #56	; 0x38
 8011c8a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011c8e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011c92:	4618      	mov	r0, r3
 8011c94:	f7ff fd37 	bl	8011706 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	3338      	adds	r3, #56	; 0x38
 8011c9c:	4921      	ldr	r1, [pc, #132]	; (8011d24 <sync_fs+0xd8>)
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f7ff fd4c 	bl	801173c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	3338      	adds	r3, #56	; 0x38
 8011ca8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011cac:	491e      	ldr	r1, [pc, #120]	; (8011d28 <sync_fs+0xdc>)
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7ff fd44 	bl	801173c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	3338      	adds	r3, #56	; 0x38
 8011cb8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	695b      	ldr	r3, [r3, #20]
 8011cc0:	4619      	mov	r1, r3
 8011cc2:	4610      	mov	r0, r2
 8011cc4:	f7ff fd3a 	bl	801173c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	3338      	adds	r3, #56	; 0x38
 8011ccc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	691b      	ldr	r3, [r3, #16]
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	f7ff fd30 	bl	801173c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ce0:	1c5a      	adds	r2, r3, #1
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	7858      	ldrb	r0, [r3, #1]
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	f7ff fc8d 	bl	8011614 <disk_write>
			fs->fsi_flag = 0;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	785b      	ldrb	r3, [r3, #1]
 8011d04:	2200      	movs	r2, #0
 8011d06:	2100      	movs	r1, #0
 8011d08:	4618      	mov	r0, r3
 8011d0a:	f7ff fca3 	bl	8011654 <disk_ioctl>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d001      	beq.n	8011d18 <sync_fs+0xcc>
 8011d14:	2301      	movs	r3, #1
 8011d16:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	3710      	adds	r7, #16
 8011d1e:	46bd      	mov	sp, r7
 8011d20:	bd80      	pop	{r7, pc}
 8011d22:	bf00      	nop
 8011d24:	41615252 	.word	0x41615252
 8011d28:	61417272 	.word	0x61417272

08011d2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b083      	sub	sp, #12
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011d36:	683b      	ldr	r3, [r7, #0]
 8011d38:	3b02      	subs	r3, #2
 8011d3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	69db      	ldr	r3, [r3, #28]
 8011d40:	3b02      	subs	r3, #2
 8011d42:	683a      	ldr	r2, [r7, #0]
 8011d44:	429a      	cmp	r2, r3
 8011d46:	d301      	bcc.n	8011d4c <clust2sect+0x20>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	e008      	b.n	8011d5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	895b      	ldrh	r3, [r3, #10]
 8011d50:	461a      	mov	r2, r3
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	fb03 f202 	mul.w	r2, r3, r2
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d5c:	4413      	add	r3, r2
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	370c      	adds	r7, #12
 8011d62:	46bd      	mov	sp, r7
 8011d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d68:	4770      	bx	lr

08011d6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011d6a:	b580      	push	{r7, lr}
 8011d6c:	b086      	sub	sp, #24
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	6078      	str	r0, [r7, #4]
 8011d72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	2b01      	cmp	r3, #1
 8011d7e:	d904      	bls.n	8011d8a <get_fat+0x20>
 8011d80:	693b      	ldr	r3, [r7, #16]
 8011d82:	69db      	ldr	r3, [r3, #28]
 8011d84:	683a      	ldr	r2, [r7, #0]
 8011d86:	429a      	cmp	r2, r3
 8011d88:	d302      	bcc.n	8011d90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011d8a:	2301      	movs	r3, #1
 8011d8c:	617b      	str	r3, [r7, #20]
 8011d8e:	e0b7      	b.n	8011f00 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011d90:	f04f 33ff 	mov.w	r3, #4294967295
 8011d94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	781b      	ldrb	r3, [r3, #0]
 8011d9a:	2b02      	cmp	r3, #2
 8011d9c:	d05a      	beq.n	8011e54 <get_fat+0xea>
 8011d9e:	2b03      	cmp	r3, #3
 8011da0:	d07d      	beq.n	8011e9e <get_fat+0x134>
 8011da2:	2b01      	cmp	r3, #1
 8011da4:	f040 80a2 	bne.w	8011eec <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	60fb      	str	r3, [r7, #12]
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	085b      	lsrs	r3, r3, #1
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	4413      	add	r3, r2
 8011db4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011db6:	693b      	ldr	r3, [r7, #16]
 8011db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	899b      	ldrh	r3, [r3, #12]
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dc6:	4413      	add	r3, r2
 8011dc8:	4619      	mov	r1, r3
 8011dca:	6938      	ldr	r0, [r7, #16]
 8011dcc:	f7ff ff10 	bl	8011bf0 <move_window>
 8011dd0:	4603      	mov	r3, r0
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	f040 808d 	bne.w	8011ef2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	1c5a      	adds	r2, r3, #1
 8011ddc:	60fa      	str	r2, [r7, #12]
 8011dde:	693a      	ldr	r2, [r7, #16]
 8011de0:	8992      	ldrh	r2, [r2, #12]
 8011de2:	fbb3 f1f2 	udiv	r1, r3, r2
 8011de6:	fb02 f201 	mul.w	r2, r2, r1
 8011dea:	1a9b      	subs	r3, r3, r2
 8011dec:	693a      	ldr	r2, [r7, #16]
 8011dee:	4413      	add	r3, r2
 8011df0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011df4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011df6:	693b      	ldr	r3, [r7, #16]
 8011df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	899b      	ldrh	r3, [r3, #12]
 8011dfe:	4619      	mov	r1, r3
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e06:	4413      	add	r3, r2
 8011e08:	4619      	mov	r1, r3
 8011e0a:	6938      	ldr	r0, [r7, #16]
 8011e0c:	f7ff fef0 	bl	8011bf0 <move_window>
 8011e10:	4603      	mov	r3, r0
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d16f      	bne.n	8011ef6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	899b      	ldrh	r3, [r3, #12]
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e22:	fb02 f201 	mul.w	r2, r2, r1
 8011e26:	1a9b      	subs	r3, r3, r2
 8011e28:	693a      	ldr	r2, [r7, #16]
 8011e2a:	4413      	add	r3, r2
 8011e2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011e30:	021b      	lsls	r3, r3, #8
 8011e32:	461a      	mov	r2, r3
 8011e34:	68bb      	ldr	r3, [r7, #8]
 8011e36:	4313      	orrs	r3, r2
 8011e38:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	f003 0301 	and.w	r3, r3, #1
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d002      	beq.n	8011e4a <get_fat+0xe0>
 8011e44:	68bb      	ldr	r3, [r7, #8]
 8011e46:	091b      	lsrs	r3, r3, #4
 8011e48:	e002      	b.n	8011e50 <get_fat+0xe6>
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011e50:	617b      	str	r3, [r7, #20]
			break;
 8011e52:	e055      	b.n	8011f00 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e58:	693b      	ldr	r3, [r7, #16]
 8011e5a:	899b      	ldrh	r3, [r3, #12]
 8011e5c:	085b      	lsrs	r3, r3, #1
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	4619      	mov	r1, r3
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e68:	4413      	add	r3, r2
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6938      	ldr	r0, [r7, #16]
 8011e6e:	f7ff febf 	bl	8011bf0 <move_window>
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d140      	bne.n	8011efa <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011e78:	693b      	ldr	r3, [r7, #16]
 8011e7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	005b      	lsls	r3, r3, #1
 8011e82:	693a      	ldr	r2, [r7, #16]
 8011e84:	8992      	ldrh	r2, [r2, #12]
 8011e86:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e8a:	fb02 f200 	mul.w	r2, r2, r0
 8011e8e:	1a9b      	subs	r3, r3, r2
 8011e90:	440b      	add	r3, r1
 8011e92:	4618      	mov	r0, r3
 8011e94:	f7ff fbfc 	bl	8011690 <ld_word>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	617b      	str	r3, [r7, #20]
			break;
 8011e9c:	e030      	b.n	8011f00 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011e9e:	693b      	ldr	r3, [r7, #16]
 8011ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	899b      	ldrh	r3, [r3, #12]
 8011ea6:	089b      	lsrs	r3, r3, #2
 8011ea8:	b29b      	uxth	r3, r3
 8011eaa:	4619      	mov	r1, r3
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8011eb2:	4413      	add	r3, r2
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	6938      	ldr	r0, [r7, #16]
 8011eb8:	f7ff fe9a 	bl	8011bf0 <move_window>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d11d      	bne.n	8011efe <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011ec2:	693b      	ldr	r3, [r7, #16]
 8011ec4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ec8:	683b      	ldr	r3, [r7, #0]
 8011eca:	009b      	lsls	r3, r3, #2
 8011ecc:	693a      	ldr	r2, [r7, #16]
 8011ece:	8992      	ldrh	r2, [r2, #12]
 8011ed0:	fbb3 f0f2 	udiv	r0, r3, r2
 8011ed4:	fb02 f200 	mul.w	r2, r2, r0
 8011ed8:	1a9b      	subs	r3, r3, r2
 8011eda:	440b      	add	r3, r1
 8011edc:	4618      	mov	r0, r3
 8011ede:	f7ff fbef 	bl	80116c0 <ld_dword>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011ee8:	617b      	str	r3, [r7, #20]
			break;
 8011eea:	e009      	b.n	8011f00 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011eec:	2301      	movs	r3, #1
 8011eee:	617b      	str	r3, [r7, #20]
 8011ef0:	e006      	b.n	8011f00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ef2:	bf00      	nop
 8011ef4:	e004      	b.n	8011f00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011ef6:	bf00      	nop
 8011ef8:	e002      	b.n	8011f00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011efa:	bf00      	nop
 8011efc:	e000      	b.n	8011f00 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011efe:	bf00      	nop
		}
	}

	return val;
 8011f00:	697b      	ldr	r3, [r7, #20]
}
 8011f02:	4618      	mov	r0, r3
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}

08011f0a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011f0a:	b590      	push	{r4, r7, lr}
 8011f0c:	b089      	sub	sp, #36	; 0x24
 8011f0e:	af00      	add	r7, sp, #0
 8011f10:	60f8      	str	r0, [r7, #12]
 8011f12:	60b9      	str	r1, [r7, #8]
 8011f14:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011f16:	2302      	movs	r3, #2
 8011f18:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	2b01      	cmp	r3, #1
 8011f1e:	f240 8106 	bls.w	801212e <put_fat+0x224>
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	69db      	ldr	r3, [r3, #28]
 8011f26:	68ba      	ldr	r2, [r7, #8]
 8011f28:	429a      	cmp	r2, r3
 8011f2a:	f080 8100 	bcs.w	801212e <put_fat+0x224>
		switch (fs->fs_type) {
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	f000 8088 	beq.w	8012048 <put_fat+0x13e>
 8011f38:	2b03      	cmp	r3, #3
 8011f3a:	f000 80b0 	beq.w	801209e <put_fat+0x194>
 8011f3e:	2b01      	cmp	r3, #1
 8011f40:	f040 80f5 	bne.w	801212e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	61bb      	str	r3, [r7, #24]
 8011f48:	69bb      	ldr	r3, [r7, #24]
 8011f4a:	085b      	lsrs	r3, r3, #1
 8011f4c:	69ba      	ldr	r2, [r7, #24]
 8011f4e:	4413      	add	r3, r2
 8011f50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	899b      	ldrh	r3, [r3, #12]
 8011f5a:	4619      	mov	r1, r3
 8011f5c:	69bb      	ldr	r3, [r7, #24]
 8011f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f62:	4413      	add	r3, r2
 8011f64:	4619      	mov	r1, r3
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f7ff fe42 	bl	8011bf0 <move_window>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f70:	7ffb      	ldrb	r3, [r7, #31]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	f040 80d4 	bne.w	8012120 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	1c5a      	adds	r2, r3, #1
 8011f82:	61ba      	str	r2, [r7, #24]
 8011f84:	68fa      	ldr	r2, [r7, #12]
 8011f86:	8992      	ldrh	r2, [r2, #12]
 8011f88:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f8c:	fb02 f200 	mul.w	r2, r2, r0
 8011f90:	1a9b      	subs	r3, r3, r2
 8011f92:	440b      	add	r3, r1
 8011f94:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	f003 0301 	and.w	r3, r3, #1
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00d      	beq.n	8011fbc <put_fat+0xb2>
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	b25b      	sxtb	r3, r3
 8011fa6:	f003 030f 	and.w	r3, r3, #15
 8011faa:	b25a      	sxtb	r2, r3
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	011b      	lsls	r3, r3, #4
 8011fb2:	b25b      	sxtb	r3, r3
 8011fb4:	4313      	orrs	r3, r2
 8011fb6:	b25b      	sxtb	r3, r3
 8011fb8:	b2db      	uxtb	r3, r3
 8011fba:	e001      	b.n	8011fc0 <put_fat+0xb6>
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	697a      	ldr	r2, [r7, #20]
 8011fc2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	2201      	movs	r2, #1
 8011fc8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	899b      	ldrh	r3, [r3, #12]
 8011fd2:	4619      	mov	r1, r3
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fda:	4413      	add	r3, r2
 8011fdc:	4619      	mov	r1, r3
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f7ff fe06 	bl	8011bf0 <move_window>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011fe8:	7ffb      	ldrb	r3, [r7, #31]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	f040 809a 	bne.w	8012124 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	899b      	ldrh	r3, [r3, #12]
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	69bb      	ldr	r3, [r7, #24]
 8011ffe:	fbb3 f0f2 	udiv	r0, r3, r2
 8012002:	fb02 f200 	mul.w	r2, r2, r0
 8012006:	1a9b      	subs	r3, r3, r2
 8012008:	440b      	add	r3, r1
 801200a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	f003 0301 	and.w	r3, r3, #1
 8012012:	2b00      	cmp	r3, #0
 8012014:	d003      	beq.n	801201e <put_fat+0x114>
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	091b      	lsrs	r3, r3, #4
 801201a:	b2db      	uxtb	r3, r3
 801201c:	e00e      	b.n	801203c <put_fat+0x132>
 801201e:	697b      	ldr	r3, [r7, #20]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	b25b      	sxtb	r3, r3
 8012024:	f023 030f 	bic.w	r3, r3, #15
 8012028:	b25a      	sxtb	r2, r3
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	0a1b      	lsrs	r3, r3, #8
 801202e:	b25b      	sxtb	r3, r3
 8012030:	f003 030f 	and.w	r3, r3, #15
 8012034:	b25b      	sxtb	r3, r3
 8012036:	4313      	orrs	r3, r2
 8012038:	b25b      	sxtb	r3, r3
 801203a:	b2db      	uxtb	r3, r3
 801203c:	697a      	ldr	r2, [r7, #20]
 801203e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2201      	movs	r2, #1
 8012044:	70da      	strb	r2, [r3, #3]
			break;
 8012046:	e072      	b.n	801212e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	899b      	ldrh	r3, [r3, #12]
 8012050:	085b      	lsrs	r3, r3, #1
 8012052:	b29b      	uxth	r3, r3
 8012054:	4619      	mov	r1, r3
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	fbb3 f3f1 	udiv	r3, r3, r1
 801205c:	4413      	add	r3, r2
 801205e:	4619      	mov	r1, r3
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	f7ff fdc5 	bl	8011bf0 <move_window>
 8012066:	4603      	mov	r3, r0
 8012068:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801206a:	7ffb      	ldrb	r3, [r7, #31]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d15b      	bne.n	8012128 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	005b      	lsls	r3, r3, #1
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	8992      	ldrh	r2, [r2, #12]
 801207e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012082:	fb02 f200 	mul.w	r2, r2, r0
 8012086:	1a9b      	subs	r3, r3, r2
 8012088:	440b      	add	r3, r1
 801208a:	687a      	ldr	r2, [r7, #4]
 801208c:	b292      	uxth	r2, r2
 801208e:	4611      	mov	r1, r2
 8012090:	4618      	mov	r0, r3
 8012092:	f7ff fb38 	bl	8011706 <st_word>
			fs->wflag = 1;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	2201      	movs	r2, #1
 801209a:	70da      	strb	r2, [r3, #3]
			break;
 801209c:	e047      	b.n	801212e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	899b      	ldrh	r3, [r3, #12]
 80120a6:	089b      	lsrs	r3, r3, #2
 80120a8:	b29b      	uxth	r3, r3
 80120aa:	4619      	mov	r1, r3
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80120b2:	4413      	add	r3, r2
 80120b4:	4619      	mov	r1, r3
 80120b6:	68f8      	ldr	r0, [r7, #12]
 80120b8:	f7ff fd9a 	bl	8011bf0 <move_window>
 80120bc:	4603      	mov	r3, r0
 80120be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80120c0:	7ffb      	ldrb	r3, [r7, #31]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d132      	bne.n	801212c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	009b      	lsls	r3, r3, #2
 80120d6:	68fa      	ldr	r2, [r7, #12]
 80120d8:	8992      	ldrh	r2, [r2, #12]
 80120da:	fbb3 f0f2 	udiv	r0, r3, r2
 80120de:	fb02 f200 	mul.w	r2, r2, r0
 80120e2:	1a9b      	subs	r3, r3, r2
 80120e4:	440b      	add	r3, r1
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7ff faea 	bl	80116c0 <ld_dword>
 80120ec:	4603      	mov	r3, r0
 80120ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80120f2:	4323      	orrs	r3, r4
 80120f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	009b      	lsls	r3, r3, #2
 8012100:	68fa      	ldr	r2, [r7, #12]
 8012102:	8992      	ldrh	r2, [r2, #12]
 8012104:	fbb3 f0f2 	udiv	r0, r3, r2
 8012108:	fb02 f200 	mul.w	r2, r2, r0
 801210c:	1a9b      	subs	r3, r3, r2
 801210e:	440b      	add	r3, r1
 8012110:	6879      	ldr	r1, [r7, #4]
 8012112:	4618      	mov	r0, r3
 8012114:	f7ff fb12 	bl	801173c <st_dword>
			fs->wflag = 1;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	2201      	movs	r2, #1
 801211c:	70da      	strb	r2, [r3, #3]
			break;
 801211e:	e006      	b.n	801212e <put_fat+0x224>
			if (res != FR_OK) break;
 8012120:	bf00      	nop
 8012122:	e004      	b.n	801212e <put_fat+0x224>
			if (res != FR_OK) break;
 8012124:	bf00      	nop
 8012126:	e002      	b.n	801212e <put_fat+0x224>
			if (res != FR_OK) break;
 8012128:	bf00      	nop
 801212a:	e000      	b.n	801212e <put_fat+0x224>
			if (res != FR_OK) break;
 801212c:	bf00      	nop
		}
	}
	return res;
 801212e:	7ffb      	ldrb	r3, [r7, #31]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3724      	adds	r7, #36	; 0x24
 8012134:	46bd      	mov	sp, r7
 8012136:	bd90      	pop	{r4, r7, pc}

08012138 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b088      	sub	sp, #32
 801213c:	af00      	add	r7, sp, #0
 801213e:	60f8      	str	r0, [r7, #12]
 8012140:	60b9      	str	r1, [r7, #8]
 8012142:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012144:	2300      	movs	r3, #0
 8012146:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	2b01      	cmp	r3, #1
 8012152:	d904      	bls.n	801215e <remove_chain+0x26>
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	69db      	ldr	r3, [r3, #28]
 8012158:	68ba      	ldr	r2, [r7, #8]
 801215a:	429a      	cmp	r2, r3
 801215c:	d301      	bcc.n	8012162 <remove_chain+0x2a>
 801215e:	2302      	movs	r3, #2
 8012160:	e04b      	b.n	80121fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	2b00      	cmp	r3, #0
 8012166:	d00c      	beq.n	8012182 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012168:	f04f 32ff 	mov.w	r2, #4294967295
 801216c:	6879      	ldr	r1, [r7, #4]
 801216e:	69b8      	ldr	r0, [r7, #24]
 8012170:	f7ff fecb 	bl	8011f0a <put_fat>
 8012174:	4603      	mov	r3, r0
 8012176:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012178:	7ffb      	ldrb	r3, [r7, #31]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <remove_chain+0x4a>
 801217e:	7ffb      	ldrb	r3, [r7, #31]
 8012180:	e03b      	b.n	80121fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012182:	68b9      	ldr	r1, [r7, #8]
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f7ff fdf0 	bl	8011d6a <get_fat>
 801218a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d031      	beq.n	80121f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	2b01      	cmp	r3, #1
 8012196:	d101      	bne.n	801219c <remove_chain+0x64>
 8012198:	2302      	movs	r3, #2
 801219a:	e02e      	b.n	80121fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a2:	d101      	bne.n	80121a8 <remove_chain+0x70>
 80121a4:	2301      	movs	r3, #1
 80121a6:	e028      	b.n	80121fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80121a8:	2200      	movs	r2, #0
 80121aa:	68b9      	ldr	r1, [r7, #8]
 80121ac:	69b8      	ldr	r0, [r7, #24]
 80121ae:	f7ff feac 	bl	8011f0a <put_fat>
 80121b2:	4603      	mov	r3, r0
 80121b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80121b6:	7ffb      	ldrb	r3, [r7, #31]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d001      	beq.n	80121c0 <remove_chain+0x88>
 80121bc:	7ffb      	ldrb	r3, [r7, #31]
 80121be:	e01c      	b.n	80121fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80121c0:	69bb      	ldr	r3, [r7, #24]
 80121c2:	695a      	ldr	r2, [r3, #20]
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	69db      	ldr	r3, [r3, #28]
 80121c8:	3b02      	subs	r3, #2
 80121ca:	429a      	cmp	r2, r3
 80121cc:	d20b      	bcs.n	80121e6 <remove_chain+0xae>
			fs->free_clst++;
 80121ce:	69bb      	ldr	r3, [r7, #24]
 80121d0:	695b      	ldr	r3, [r3, #20]
 80121d2:	1c5a      	adds	r2, r3, #1
 80121d4:	69bb      	ldr	r3, [r7, #24]
 80121d6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80121d8:	69bb      	ldr	r3, [r7, #24]
 80121da:	791b      	ldrb	r3, [r3, #4]
 80121dc:	f043 0301 	orr.w	r3, r3, #1
 80121e0:	b2da      	uxtb	r2, r3
 80121e2:	69bb      	ldr	r3, [r7, #24]
 80121e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80121e6:	697b      	ldr	r3, [r7, #20]
 80121e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80121ea:	69bb      	ldr	r3, [r7, #24]
 80121ec:	69db      	ldr	r3, [r3, #28]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d3c6      	bcc.n	8012182 <remove_chain+0x4a>
 80121f4:	e000      	b.n	80121f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80121f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80121f8:	2300      	movs	r3, #0
}
 80121fa:	4618      	mov	r0, r3
 80121fc:	3720      	adds	r7, #32
 80121fe:	46bd      	mov	sp, r7
 8012200:	bd80      	pop	{r7, pc}

08012202 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012202:	b580      	push	{r7, lr}
 8012204:	b088      	sub	sp, #32
 8012206:	af00      	add	r7, sp, #0
 8012208:	6078      	str	r0, [r7, #4]
 801220a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012212:	683b      	ldr	r3, [r7, #0]
 8012214:	2b00      	cmp	r3, #0
 8012216:	d10d      	bne.n	8012234 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012218:	693b      	ldr	r3, [r7, #16]
 801221a:	691b      	ldr	r3, [r3, #16]
 801221c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801221e:	69bb      	ldr	r3, [r7, #24]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d004      	beq.n	801222e <create_chain+0x2c>
 8012224:	693b      	ldr	r3, [r7, #16]
 8012226:	69db      	ldr	r3, [r3, #28]
 8012228:	69ba      	ldr	r2, [r7, #24]
 801222a:	429a      	cmp	r2, r3
 801222c:	d31b      	bcc.n	8012266 <create_chain+0x64>
 801222e:	2301      	movs	r3, #1
 8012230:	61bb      	str	r3, [r7, #24]
 8012232:	e018      	b.n	8012266 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012234:	6839      	ldr	r1, [r7, #0]
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7ff fd97 	bl	8011d6a <get_fat>
 801223c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d801      	bhi.n	8012248 <create_chain+0x46>
 8012244:	2301      	movs	r3, #1
 8012246:	e070      	b.n	801232a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801224e:	d101      	bne.n	8012254 <create_chain+0x52>
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	e06a      	b.n	801232a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012254:	693b      	ldr	r3, [r7, #16]
 8012256:	69db      	ldr	r3, [r3, #28]
 8012258:	68fa      	ldr	r2, [r7, #12]
 801225a:	429a      	cmp	r2, r3
 801225c:	d201      	bcs.n	8012262 <create_chain+0x60>
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	e063      	b.n	801232a <create_chain+0x128>
		scl = clst;
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	3301      	adds	r3, #1
 801226e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012270:	693b      	ldr	r3, [r7, #16]
 8012272:	69db      	ldr	r3, [r3, #28]
 8012274:	69fa      	ldr	r2, [r7, #28]
 8012276:	429a      	cmp	r2, r3
 8012278:	d307      	bcc.n	801228a <create_chain+0x88>
				ncl = 2;
 801227a:	2302      	movs	r3, #2
 801227c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801227e:	69fa      	ldr	r2, [r7, #28]
 8012280:	69bb      	ldr	r3, [r7, #24]
 8012282:	429a      	cmp	r2, r3
 8012284:	d901      	bls.n	801228a <create_chain+0x88>
 8012286:	2300      	movs	r3, #0
 8012288:	e04f      	b.n	801232a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801228a:	69f9      	ldr	r1, [r7, #28]
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f7ff fd6c 	bl	8011d6a <get_fat>
 8012292:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d00e      	beq.n	80122b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d003      	beq.n	80122a8 <create_chain+0xa6>
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a6:	d101      	bne.n	80122ac <create_chain+0xaa>
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	e03e      	b.n	801232a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80122ac:	69fa      	ldr	r2, [r7, #28]
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d1da      	bne.n	801226a <create_chain+0x68>
 80122b4:	2300      	movs	r3, #0
 80122b6:	e038      	b.n	801232a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80122b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80122ba:	f04f 32ff 	mov.w	r2, #4294967295
 80122be:	69f9      	ldr	r1, [r7, #28]
 80122c0:	6938      	ldr	r0, [r7, #16]
 80122c2:	f7ff fe22 	bl	8011f0a <put_fat>
 80122c6:	4603      	mov	r3, r0
 80122c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d109      	bne.n	80122e4 <create_chain+0xe2>
 80122d0:	683b      	ldr	r3, [r7, #0]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d006      	beq.n	80122e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80122d6:	69fa      	ldr	r2, [r7, #28]
 80122d8:	6839      	ldr	r1, [r7, #0]
 80122da:	6938      	ldr	r0, [r7, #16]
 80122dc:	f7ff fe15 	bl	8011f0a <put_fat>
 80122e0:	4603      	mov	r3, r0
 80122e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80122e4:	7dfb      	ldrb	r3, [r7, #23]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d116      	bne.n	8012318 <create_chain+0x116>
		fs->last_clst = ncl;
 80122ea:	693b      	ldr	r3, [r7, #16]
 80122ec:	69fa      	ldr	r2, [r7, #28]
 80122ee:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80122f0:	693b      	ldr	r3, [r7, #16]
 80122f2:	695a      	ldr	r2, [r3, #20]
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	69db      	ldr	r3, [r3, #28]
 80122f8:	3b02      	subs	r3, #2
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d804      	bhi.n	8012308 <create_chain+0x106>
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	695b      	ldr	r3, [r3, #20]
 8012302:	1e5a      	subs	r2, r3, #1
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	791b      	ldrb	r3, [r3, #4]
 801230c:	f043 0301 	orr.w	r3, r3, #1
 8012310:	b2da      	uxtb	r2, r3
 8012312:	693b      	ldr	r3, [r7, #16]
 8012314:	711a      	strb	r2, [r3, #4]
 8012316:	e007      	b.n	8012328 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012318:	7dfb      	ldrb	r3, [r7, #23]
 801231a:	2b01      	cmp	r3, #1
 801231c:	d102      	bne.n	8012324 <create_chain+0x122>
 801231e:	f04f 33ff 	mov.w	r3, #4294967295
 8012322:	e000      	b.n	8012326 <create_chain+0x124>
 8012324:	2301      	movs	r3, #1
 8012326:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012328:	69fb      	ldr	r3, [r7, #28]
}
 801232a:	4618      	mov	r0, r3
 801232c:	3720      	adds	r7, #32
 801232e:	46bd      	mov	sp, r7
 8012330:	bd80      	pop	{r7, pc}

08012332 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012332:	b480      	push	{r7}
 8012334:	b087      	sub	sp, #28
 8012336:	af00      	add	r7, sp, #0
 8012338:	6078      	str	r0, [r7, #4]
 801233a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012346:	3304      	adds	r3, #4
 8012348:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	899b      	ldrh	r3, [r3, #12]
 801234e:	461a      	mov	r2, r3
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	fbb3 f3f2 	udiv	r3, r3, r2
 8012356:	68fa      	ldr	r2, [r7, #12]
 8012358:	8952      	ldrh	r2, [r2, #10]
 801235a:	fbb3 f3f2 	udiv	r3, r3, r2
 801235e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	1d1a      	adds	r2, r3, #4
 8012364:	613a      	str	r2, [r7, #16]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d101      	bne.n	8012374 <clmt_clust+0x42>
 8012370:	2300      	movs	r3, #0
 8012372:	e010      	b.n	8012396 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012374:	697a      	ldr	r2, [r7, #20]
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	429a      	cmp	r2, r3
 801237a:	d307      	bcc.n	801238c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801237c:	697a      	ldr	r2, [r7, #20]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	1ad3      	subs	r3, r2, r3
 8012382:	617b      	str	r3, [r7, #20]
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	3304      	adds	r3, #4
 8012388:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801238a:	e7e9      	b.n	8012360 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801238c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	4413      	add	r3, r2
}
 8012396:	4618      	mov	r0, r3
 8012398:	371c      	adds	r7, #28
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr

080123a2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b086      	sub	sp, #24
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	6078      	str	r0, [r7, #4]
 80123aa:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80123b2:	683b      	ldr	r3, [r7, #0]
 80123b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80123b8:	d204      	bcs.n	80123c4 <dir_sdi+0x22>
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	f003 031f 	and.w	r3, r3, #31
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d001      	beq.n	80123c8 <dir_sdi+0x26>
		return FR_INT_ERR;
 80123c4:	2302      	movs	r3, #2
 80123c6:	e071      	b.n	80124ac <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	683a      	ldr	r2, [r7, #0]
 80123cc:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	689b      	ldr	r3, [r3, #8]
 80123d2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d106      	bne.n	80123e8 <dir_sdi+0x46>
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	781b      	ldrb	r3, [r3, #0]
 80123de:	2b02      	cmp	r3, #2
 80123e0:	d902      	bls.n	80123e8 <dir_sdi+0x46>
		clst = fs->dirbase;
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d10c      	bne.n	8012408 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80123ee:	683b      	ldr	r3, [r7, #0]
 80123f0:	095b      	lsrs	r3, r3, #5
 80123f2:	693a      	ldr	r2, [r7, #16]
 80123f4:	8912      	ldrh	r2, [r2, #8]
 80123f6:	4293      	cmp	r3, r2
 80123f8:	d301      	bcc.n	80123fe <dir_sdi+0x5c>
 80123fa:	2302      	movs	r3, #2
 80123fc:	e056      	b.n	80124ac <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	61da      	str	r2, [r3, #28]
 8012406:	e02d      	b.n	8012464 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012408:	693b      	ldr	r3, [r7, #16]
 801240a:	895b      	ldrh	r3, [r3, #10]
 801240c:	461a      	mov	r2, r3
 801240e:	693b      	ldr	r3, [r7, #16]
 8012410:	899b      	ldrh	r3, [r3, #12]
 8012412:	fb03 f302 	mul.w	r3, r3, r2
 8012416:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012418:	e019      	b.n	801244e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6979      	ldr	r1, [r7, #20]
 801241e:	4618      	mov	r0, r3
 8012420:	f7ff fca3 	bl	8011d6a <get_fat>
 8012424:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801242c:	d101      	bne.n	8012432 <dir_sdi+0x90>
 801242e:	2301      	movs	r3, #1
 8012430:	e03c      	b.n	80124ac <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012432:	697b      	ldr	r3, [r7, #20]
 8012434:	2b01      	cmp	r3, #1
 8012436:	d904      	bls.n	8012442 <dir_sdi+0xa0>
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	69db      	ldr	r3, [r3, #28]
 801243c:	697a      	ldr	r2, [r7, #20]
 801243e:	429a      	cmp	r2, r3
 8012440:	d301      	bcc.n	8012446 <dir_sdi+0xa4>
 8012442:	2302      	movs	r3, #2
 8012444:	e032      	b.n	80124ac <dir_sdi+0x10a>
			ofs -= csz;
 8012446:	683a      	ldr	r2, [r7, #0]
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	1ad3      	subs	r3, r2, r3
 801244c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801244e:	683a      	ldr	r2, [r7, #0]
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	429a      	cmp	r2, r3
 8012454:	d2e1      	bcs.n	801241a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012456:	6979      	ldr	r1, [r7, #20]
 8012458:	6938      	ldr	r0, [r7, #16]
 801245a:	f7ff fc67 	bl	8011d2c <clust2sect>
 801245e:	4602      	mov	r2, r0
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	697a      	ldr	r2, [r7, #20]
 8012468:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	69db      	ldr	r3, [r3, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d101      	bne.n	8012476 <dir_sdi+0xd4>
 8012472:	2302      	movs	r3, #2
 8012474:	e01a      	b.n	80124ac <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	69da      	ldr	r2, [r3, #28]
 801247a:	693b      	ldr	r3, [r7, #16]
 801247c:	899b      	ldrh	r3, [r3, #12]
 801247e:	4619      	mov	r1, r3
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	fbb3 f3f1 	udiv	r3, r3, r1
 8012486:	441a      	add	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801248c:	693b      	ldr	r3, [r7, #16]
 801248e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	899b      	ldrh	r3, [r3, #12]
 8012496:	461a      	mov	r2, r3
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	fbb3 f0f2 	udiv	r0, r3, r2
 801249e:	fb02 f200 	mul.w	r2, r2, r0
 80124a2:	1a9b      	subs	r3, r3, r2
 80124a4:	18ca      	adds	r2, r1, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80124aa:	2300      	movs	r3, #0
}
 80124ac:	4618      	mov	r0, r3
 80124ae:	3718      	adds	r7, #24
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd80      	pop	{r7, pc}

080124b4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b086      	sub	sp, #24
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	695b      	ldr	r3, [r3, #20]
 80124c8:	3320      	adds	r3, #32
 80124ca:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	69db      	ldr	r3, [r3, #28]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d003      	beq.n	80124dc <dir_next+0x28>
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80124da:	d301      	bcc.n	80124e0 <dir_next+0x2c>
 80124dc:	2304      	movs	r3, #4
 80124de:	e0bb      	b.n	8012658 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	899b      	ldrh	r3, [r3, #12]
 80124e4:	461a      	mov	r2, r3
 80124e6:	68bb      	ldr	r3, [r7, #8]
 80124e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80124ec:	fb02 f201 	mul.w	r2, r2, r1
 80124f0:	1a9b      	subs	r3, r3, r2
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	f040 809d 	bne.w	8012632 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	69db      	ldr	r3, [r3, #28]
 80124fc:	1c5a      	adds	r2, r3, #1
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	699b      	ldr	r3, [r3, #24]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d10b      	bne.n	8012522 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	095b      	lsrs	r3, r3, #5
 801250e:	68fa      	ldr	r2, [r7, #12]
 8012510:	8912      	ldrh	r2, [r2, #8]
 8012512:	4293      	cmp	r3, r2
 8012514:	f0c0 808d 	bcc.w	8012632 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	2200      	movs	r2, #0
 801251c:	61da      	str	r2, [r3, #28]
 801251e:	2304      	movs	r3, #4
 8012520:	e09a      	b.n	8012658 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	899b      	ldrh	r3, [r3, #12]
 8012526:	461a      	mov	r2, r3
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	fbb3 f3f2 	udiv	r3, r3, r2
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	8952      	ldrh	r2, [r2, #10]
 8012532:	3a01      	subs	r2, #1
 8012534:	4013      	ands	r3, r2
 8012536:	2b00      	cmp	r3, #0
 8012538:	d17b      	bne.n	8012632 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801253a:	687a      	ldr	r2, [r7, #4]
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	699b      	ldr	r3, [r3, #24]
 8012540:	4619      	mov	r1, r3
 8012542:	4610      	mov	r0, r2
 8012544:	f7ff fc11 	bl	8011d6a <get_fat>
 8012548:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	2b01      	cmp	r3, #1
 801254e:	d801      	bhi.n	8012554 <dir_next+0xa0>
 8012550:	2302      	movs	r3, #2
 8012552:	e081      	b.n	8012658 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801255a:	d101      	bne.n	8012560 <dir_next+0xac>
 801255c:	2301      	movs	r3, #1
 801255e:	e07b      	b.n	8012658 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	69db      	ldr	r3, [r3, #28]
 8012564:	697a      	ldr	r2, [r7, #20]
 8012566:	429a      	cmp	r2, r3
 8012568:	d359      	bcc.n	801261e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801256a:	683b      	ldr	r3, [r7, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d104      	bne.n	801257a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	2200      	movs	r2, #0
 8012574:	61da      	str	r2, [r3, #28]
 8012576:	2304      	movs	r3, #4
 8012578:	e06e      	b.n	8012658 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801257a:	687a      	ldr	r2, [r7, #4]
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	699b      	ldr	r3, [r3, #24]
 8012580:	4619      	mov	r1, r3
 8012582:	4610      	mov	r0, r2
 8012584:	f7ff fe3d 	bl	8012202 <create_chain>
 8012588:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 801258a:	697b      	ldr	r3, [r7, #20]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d101      	bne.n	8012594 <dir_next+0xe0>
 8012590:	2307      	movs	r3, #7
 8012592:	e061      	b.n	8012658 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012594:	697b      	ldr	r3, [r7, #20]
 8012596:	2b01      	cmp	r3, #1
 8012598:	d101      	bne.n	801259e <dir_next+0xea>
 801259a:	2302      	movs	r3, #2
 801259c:	e05c      	b.n	8012658 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125a4:	d101      	bne.n	80125aa <dir_next+0xf6>
 80125a6:	2301      	movs	r3, #1
 80125a8:	e056      	b.n	8012658 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f7ff fadc 	bl	8011b68 <sync_window>
 80125b0:	4603      	mov	r3, r0
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d001      	beq.n	80125ba <dir_next+0x106>
 80125b6:	2301      	movs	r3, #1
 80125b8:	e04e      	b.n	8012658 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	899b      	ldrh	r3, [r3, #12]
 80125c4:	461a      	mov	r2, r3
 80125c6:	2100      	movs	r1, #0
 80125c8:	f7ff f905 	bl	80117d6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80125cc:	2300      	movs	r3, #0
 80125ce:	613b      	str	r3, [r7, #16]
 80125d0:	6979      	ldr	r1, [r7, #20]
 80125d2:	68f8      	ldr	r0, [r7, #12]
 80125d4:	f7ff fbaa 	bl	8011d2c <clust2sect>
 80125d8:	4602      	mov	r2, r0
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	635a      	str	r2, [r3, #52]	; 0x34
 80125de:	e012      	b.n	8012606 <dir_next+0x152>
						fs->wflag = 1;
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	2201      	movs	r2, #1
 80125e4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80125e6:	68f8      	ldr	r0, [r7, #12]
 80125e8:	f7ff fabe 	bl	8011b68 <sync_window>
 80125ec:	4603      	mov	r3, r0
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d001      	beq.n	80125f6 <dir_next+0x142>
 80125f2:	2301      	movs	r3, #1
 80125f4:	e030      	b.n	8012658 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	3301      	adds	r3, #1
 80125fa:	613b      	str	r3, [r7, #16]
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012600:	1c5a      	adds	r2, r3, #1
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	635a      	str	r2, [r3, #52]	; 0x34
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	895b      	ldrh	r3, [r3, #10]
 801260a:	461a      	mov	r2, r3
 801260c:	693b      	ldr	r3, [r7, #16]
 801260e:	4293      	cmp	r3, r2
 8012610:	d3e6      	bcc.n	80125e0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012616:	693b      	ldr	r3, [r7, #16]
 8012618:	1ad2      	subs	r2, r2, r3
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	697a      	ldr	r2, [r7, #20]
 8012622:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012624:	6979      	ldr	r1, [r7, #20]
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ff fb80 	bl	8011d2c <clust2sect>
 801262c:	4602      	mov	r2, r0
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	899b      	ldrh	r3, [r3, #12]
 8012642:	461a      	mov	r2, r3
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	fbb3 f0f2 	udiv	r0, r3, r2
 801264a:	fb02 f200 	mul.w	r2, r2, r0
 801264e:	1a9b      	subs	r3, r3, r2
 8012650:	18ca      	adds	r2, r1, r3
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012656:	2300      	movs	r3, #0
}
 8012658:	4618      	mov	r0, r3
 801265a:	3718      	adds	r7, #24
 801265c:	46bd      	mov	sp, r7
 801265e:	bd80      	pop	{r7, pc}

08012660 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b086      	sub	sp, #24
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
 8012668:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012670:	2100      	movs	r1, #0
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	f7ff fe95 	bl	80123a2 <dir_sdi>
 8012678:	4603      	mov	r3, r0
 801267a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801267c:	7dfb      	ldrb	r3, [r7, #23]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d12b      	bne.n	80126da <dir_alloc+0x7a>
		n = 0;
 8012682:	2300      	movs	r3, #0
 8012684:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	69db      	ldr	r3, [r3, #28]
 801268a:	4619      	mov	r1, r3
 801268c:	68f8      	ldr	r0, [r7, #12]
 801268e:	f7ff faaf 	bl	8011bf0 <move_window>
 8012692:	4603      	mov	r3, r0
 8012694:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012696:	7dfb      	ldrb	r3, [r7, #23]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d11d      	bne.n	80126d8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6a1b      	ldr	r3, [r3, #32]
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	2be5      	cmp	r3, #229	; 0xe5
 80126a4:	d004      	beq.n	80126b0 <dir_alloc+0x50>
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6a1b      	ldr	r3, [r3, #32]
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d107      	bne.n	80126c0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	3301      	adds	r3, #1
 80126b4:	613b      	str	r3, [r7, #16]
 80126b6:	693a      	ldr	r2, [r7, #16]
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d102      	bne.n	80126c4 <dir_alloc+0x64>
 80126be:	e00c      	b.n	80126da <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80126c0:	2300      	movs	r3, #0
 80126c2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80126c4:	2101      	movs	r1, #1
 80126c6:	6878      	ldr	r0, [r7, #4]
 80126c8:	f7ff fef4 	bl	80124b4 <dir_next>
 80126cc:	4603      	mov	r3, r0
 80126ce:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80126d0:	7dfb      	ldrb	r3, [r7, #23]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d0d7      	beq.n	8012686 <dir_alloc+0x26>
 80126d6:	e000      	b.n	80126da <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80126d8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80126da:	7dfb      	ldrb	r3, [r7, #23]
 80126dc:	2b04      	cmp	r3, #4
 80126de:	d101      	bne.n	80126e4 <dir_alloc+0x84>
 80126e0:	2307      	movs	r3, #7
 80126e2:	75fb      	strb	r3, [r7, #23]
	return res;
 80126e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3718      	adds	r7, #24
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}

080126ee <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80126ee:	b580      	push	{r7, lr}
 80126f0:	b084      	sub	sp, #16
 80126f2:	af00      	add	r7, sp, #0
 80126f4:	6078      	str	r0, [r7, #4]
 80126f6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	331a      	adds	r3, #26
 80126fc:	4618      	mov	r0, r3
 80126fe:	f7fe ffc7 	bl	8011690 <ld_word>
 8012702:	4603      	mov	r3, r0
 8012704:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	781b      	ldrb	r3, [r3, #0]
 801270a:	2b03      	cmp	r3, #3
 801270c:	d109      	bne.n	8012722 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	3314      	adds	r3, #20
 8012712:	4618      	mov	r0, r3
 8012714:	f7fe ffbc 	bl	8011690 <ld_word>
 8012718:	4603      	mov	r3, r0
 801271a:	041b      	lsls	r3, r3, #16
 801271c:	68fa      	ldr	r2, [r7, #12]
 801271e:	4313      	orrs	r3, r2
 8012720:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012722:	68fb      	ldr	r3, [r7, #12]
}
 8012724:	4618      	mov	r0, r3
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}

0801272c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801272c:	b580      	push	{r7, lr}
 801272e:	b084      	sub	sp, #16
 8012730:	af00      	add	r7, sp, #0
 8012732:	60f8      	str	r0, [r7, #12]
 8012734:	60b9      	str	r1, [r7, #8]
 8012736:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012738:	68bb      	ldr	r3, [r7, #8]
 801273a:	331a      	adds	r3, #26
 801273c:	687a      	ldr	r2, [r7, #4]
 801273e:	b292      	uxth	r2, r2
 8012740:	4611      	mov	r1, r2
 8012742:	4618      	mov	r0, r3
 8012744:	f7fe ffdf 	bl	8011706 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	2b03      	cmp	r3, #3
 801274e:	d109      	bne.n	8012764 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012750:	68bb      	ldr	r3, [r7, #8]
 8012752:	f103 0214 	add.w	r2, r3, #20
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	0c1b      	lsrs	r3, r3, #16
 801275a:	b29b      	uxth	r3, r3
 801275c:	4619      	mov	r1, r3
 801275e:	4610      	mov	r0, r2
 8012760:	f7fe ffd1 	bl	8011706 <st_word>
	}
}
 8012764:	bf00      	nop
 8012766:	3710      	adds	r7, #16
 8012768:	46bd      	mov	sp, r7
 801276a:	bd80      	pop	{r7, pc}

0801276c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	b086      	sub	sp, #24
 8012770:	af00      	add	r7, sp, #0
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8012776:	2304      	movs	r3, #4
 8012778:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012780:	e03c      	b.n	80127fc <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	69db      	ldr	r3, [r3, #28]
 8012786:	4619      	mov	r1, r3
 8012788:	6938      	ldr	r0, [r7, #16]
 801278a:	f7ff fa31 	bl	8011bf0 <move_window>
 801278e:	4603      	mov	r3, r0
 8012790:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012792:	7dfb      	ldrb	r3, [r7, #23]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d136      	bne.n	8012806 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6a1b      	ldr	r3, [r3, #32]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80127a0:	7bfb      	ldrb	r3, [r7, #15]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d102      	bne.n	80127ac <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80127a6:	2304      	movs	r3, #4
 80127a8:	75fb      	strb	r3, [r7, #23]
 80127aa:	e031      	b.n	8012810 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6a1b      	ldr	r3, [r3, #32]
 80127b0:	330b      	adds	r3, #11
 80127b2:	781b      	ldrb	r3, [r3, #0]
 80127b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80127b8:	73bb      	strb	r3, [r7, #14]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	7bba      	ldrb	r2, [r7, #14]
 80127be:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80127c0:	7bfb      	ldrb	r3, [r7, #15]
 80127c2:	2be5      	cmp	r3, #229	; 0xe5
 80127c4:	d011      	beq.n	80127ea <dir_read+0x7e>
 80127c6:	7bfb      	ldrb	r3, [r7, #15]
 80127c8:	2b2e      	cmp	r3, #46	; 0x2e
 80127ca:	d00e      	beq.n	80127ea <dir_read+0x7e>
 80127cc:	7bbb      	ldrb	r3, [r7, #14]
 80127ce:	2b0f      	cmp	r3, #15
 80127d0:	d00b      	beq.n	80127ea <dir_read+0x7e>
 80127d2:	7bbb      	ldrb	r3, [r7, #14]
 80127d4:	f023 0320 	bic.w	r3, r3, #32
 80127d8:	2b08      	cmp	r3, #8
 80127da:	bf0c      	ite	eq
 80127dc:	2301      	moveq	r3, #1
 80127de:	2300      	movne	r3, #0
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	461a      	mov	r2, r3
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	4293      	cmp	r3, r2
 80127e8:	d00f      	beq.n	801280a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80127ea:	2100      	movs	r1, #0
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f7ff fe61 	bl	80124b4 <dir_next>
 80127f2:	4603      	mov	r3, r0
 80127f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80127f6:	7dfb      	ldrb	r3, [r7, #23]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d108      	bne.n	801280e <dir_read+0xa2>
	while (dp->sect) {
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	69db      	ldr	r3, [r3, #28]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d1be      	bne.n	8012782 <dir_read+0x16>
 8012804:	e004      	b.n	8012810 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012806:	bf00      	nop
 8012808:	e002      	b.n	8012810 <dir_read+0xa4>
				break;
 801280a:	bf00      	nop
 801280c:	e000      	b.n	8012810 <dir_read+0xa4>
		if (res != FR_OK) break;
 801280e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012810:	7dfb      	ldrb	r3, [r7, #23]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d002      	beq.n	801281c <dir_read+0xb0>
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	2200      	movs	r2, #0
 801281a:	61da      	str	r2, [r3, #28]
	return res;
 801281c:	7dfb      	ldrb	r3, [r7, #23]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3718      	adds	r7, #24
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012826:	b580      	push	{r7, lr}
 8012828:	b086      	sub	sp, #24
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012834:	2100      	movs	r1, #0
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f7ff fdb3 	bl	80123a2 <dir_sdi>
 801283c:	4603      	mov	r3, r0
 801283e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012840:	7dfb      	ldrb	r3, [r7, #23]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d001      	beq.n	801284a <dir_find+0x24>
 8012846:	7dfb      	ldrb	r3, [r7, #23]
 8012848:	e03e      	b.n	80128c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	69db      	ldr	r3, [r3, #28]
 801284e:	4619      	mov	r1, r3
 8012850:	6938      	ldr	r0, [r7, #16]
 8012852:	f7ff f9cd 	bl	8011bf0 <move_window>
 8012856:	4603      	mov	r3, r0
 8012858:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801285a:	7dfb      	ldrb	r3, [r7, #23]
 801285c:	2b00      	cmp	r3, #0
 801285e:	d12f      	bne.n	80128c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6a1b      	ldr	r3, [r3, #32]
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012868:	7bfb      	ldrb	r3, [r7, #15]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d102      	bne.n	8012874 <dir_find+0x4e>
 801286e:	2304      	movs	r3, #4
 8012870:	75fb      	strb	r3, [r7, #23]
 8012872:	e028      	b.n	80128c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	6a1b      	ldr	r3, [r3, #32]
 8012878:	330b      	adds	r3, #11
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012880:	b2da      	uxtb	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	6a1b      	ldr	r3, [r3, #32]
 801288a:	330b      	adds	r3, #11
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	f003 0308 	and.w	r3, r3, #8
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10a      	bne.n	80128ac <dir_find+0x86>
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6a18      	ldr	r0, [r3, #32]
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	3324      	adds	r3, #36	; 0x24
 801289e:	220b      	movs	r2, #11
 80128a0:	4619      	mov	r1, r3
 80128a2:	f7fe ffb2 	bl	801180a <mem_cmp>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d00b      	beq.n	80128c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80128ac:	2100      	movs	r1, #0
 80128ae:	6878      	ldr	r0, [r7, #4]
 80128b0:	f7ff fe00 	bl	80124b4 <dir_next>
 80128b4:	4603      	mov	r3, r0
 80128b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80128b8:	7dfb      	ldrb	r3, [r7, #23]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d0c5      	beq.n	801284a <dir_find+0x24>
 80128be:	e002      	b.n	80128c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 80128c0:	bf00      	nop
 80128c2:	e000      	b.n	80128c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80128c4:	bf00      	nop

	return res;
 80128c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3718      	adds	r7, #24
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}

080128d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80128d0:	b580      	push	{r7, lr}
 80128d2:	b084      	sub	sp, #16
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80128de:	2101      	movs	r1, #1
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f7ff febd 	bl	8012660 <dir_alloc>
 80128e6:	4603      	mov	r3, r0
 80128e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80128ea:	7bfb      	ldrb	r3, [r7, #15]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d11c      	bne.n	801292a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	69db      	ldr	r3, [r3, #28]
 80128f4:	4619      	mov	r1, r3
 80128f6:	68b8      	ldr	r0, [r7, #8]
 80128f8:	f7ff f97a 	bl	8011bf0 <move_window>
 80128fc:	4603      	mov	r3, r0
 80128fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012900:	7bfb      	ldrb	r3, [r7, #15]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d111      	bne.n	801292a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6a1b      	ldr	r3, [r3, #32]
 801290a:	2220      	movs	r2, #32
 801290c:	2100      	movs	r1, #0
 801290e:	4618      	mov	r0, r3
 8012910:	f7fe ff61 	bl	80117d6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6a18      	ldr	r0, [r3, #32]
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	3324      	adds	r3, #36	; 0x24
 801291c:	220b      	movs	r2, #11
 801291e:	4619      	mov	r1, r3
 8012920:	f7fe ff38 	bl	8011794 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	2201      	movs	r2, #1
 8012928:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801292a:	7bfb      	ldrb	r3, [r7, #15]
}
 801292c:	4618      	mov	r0, r3
 801292e:	3710      	adds	r7, #16
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}

08012934 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b084      	sub	sp, #16
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	69db      	ldr	r3, [r3, #28]
 8012946:	4619      	mov	r1, r3
 8012948:	68f8      	ldr	r0, [r7, #12]
 801294a:	f7ff f951 	bl	8011bf0 <move_window>
 801294e:	4603      	mov	r3, r0
 8012950:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012952:	7afb      	ldrb	r3, [r7, #11]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d106      	bne.n	8012966 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	6a1b      	ldr	r3, [r3, #32]
 801295c:	22e5      	movs	r2, #229	; 0xe5
 801295e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	2201      	movs	r2, #1
 8012964:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8012966:	7afb      	ldrb	r3, [r7, #11]
}
 8012968:	4618      	mov	r0, r3
 801296a:	3710      	adds	r7, #16
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b088      	sub	sp, #32
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	60fb      	str	r3, [r7, #12]
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	3324      	adds	r3, #36	; 0x24
 8012984:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8012986:	220b      	movs	r2, #11
 8012988:	2120      	movs	r1, #32
 801298a:	68b8      	ldr	r0, [r7, #8]
 801298c:	f7fe ff23 	bl	80117d6 <mem_set>
	si = i = 0; ni = 8;
 8012990:	2300      	movs	r3, #0
 8012992:	613b      	str	r3, [r7, #16]
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	617b      	str	r3, [r7, #20]
 8012998:	2308      	movs	r3, #8
 801299a:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 801299c:	68fa      	ldr	r2, [r7, #12]
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	4413      	add	r3, r2
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	2b2e      	cmp	r3, #46	; 0x2e
 80129a6:	d12f      	bne.n	8012a08 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	1c5a      	adds	r2, r3, #1
 80129ac:	617a      	str	r2, [r7, #20]
 80129ae:	68fa      	ldr	r2, [r7, #12]
 80129b0:	4413      	add	r3, r2
 80129b2:	781b      	ldrb	r3, [r3, #0]
 80129b4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80129b6:	7ffb      	ldrb	r3, [r7, #31]
 80129b8:	2b2e      	cmp	r3, #46	; 0x2e
 80129ba:	d10a      	bne.n	80129d2 <create_name+0x62>
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	2b02      	cmp	r3, #2
 80129c0:	d807      	bhi.n	80129d2 <create_name+0x62>
			sfn[i++] = c;
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	1c5a      	adds	r2, r3, #1
 80129c6:	613a      	str	r2, [r7, #16]
 80129c8:	68ba      	ldr	r2, [r7, #8]
 80129ca:	4413      	add	r3, r2
 80129cc:	7ffa      	ldrb	r2, [r7, #31]
 80129ce:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 80129d0:	e7ea      	b.n	80129a8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 80129d2:	7ffb      	ldrb	r3, [r7, #31]
 80129d4:	2b2f      	cmp	r3, #47	; 0x2f
 80129d6:	d007      	beq.n	80129e8 <create_name+0x78>
 80129d8:	7ffb      	ldrb	r3, [r7, #31]
 80129da:	2b5c      	cmp	r3, #92	; 0x5c
 80129dc:	d004      	beq.n	80129e8 <create_name+0x78>
 80129de:	7ffb      	ldrb	r3, [r7, #31]
 80129e0:	2b20      	cmp	r3, #32
 80129e2:	d901      	bls.n	80129e8 <create_name+0x78>
 80129e4:	2306      	movs	r3, #6
 80129e6:	e084      	b.n	8012af2 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 80129e8:	68fa      	ldr	r2, [r7, #12]
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	441a      	add	r2, r3
 80129ee:	683b      	ldr	r3, [r7, #0]
 80129f0:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 80129f2:	7ffb      	ldrb	r3, [r7, #31]
 80129f4:	2b20      	cmp	r3, #32
 80129f6:	d801      	bhi.n	80129fc <create_name+0x8c>
 80129f8:	2224      	movs	r2, #36	; 0x24
 80129fa:	e000      	b.n	80129fe <create_name+0x8e>
 80129fc:	2220      	movs	r2, #32
 80129fe:	68bb      	ldr	r3, [r7, #8]
 8012a00:	330b      	adds	r3, #11
 8012a02:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012a04:	2300      	movs	r3, #0
 8012a06:	e074      	b.n	8012af2 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012a08:	697b      	ldr	r3, [r7, #20]
 8012a0a:	1c5a      	adds	r2, r3, #1
 8012a0c:	617a      	str	r2, [r7, #20]
 8012a0e:	68fa      	ldr	r2, [r7, #12]
 8012a10:	4413      	add	r3, r2
 8012a12:	781b      	ldrb	r3, [r3, #0]
 8012a14:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012a16:	7ffb      	ldrb	r3, [r7, #31]
 8012a18:	2b20      	cmp	r3, #32
 8012a1a:	d94e      	bls.n	8012aba <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8012a1c:	7ffb      	ldrb	r3, [r7, #31]
 8012a1e:	2b2f      	cmp	r3, #47	; 0x2f
 8012a20:	d006      	beq.n	8012a30 <create_name+0xc0>
 8012a22:	7ffb      	ldrb	r3, [r7, #31]
 8012a24:	2b5c      	cmp	r3, #92	; 0x5c
 8012a26:	d110      	bne.n	8012a4a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012a28:	e002      	b.n	8012a30 <create_name+0xc0>
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	617b      	str	r3, [r7, #20]
 8012a30:	68fa      	ldr	r2, [r7, #12]
 8012a32:	697b      	ldr	r3, [r7, #20]
 8012a34:	4413      	add	r3, r2
 8012a36:	781b      	ldrb	r3, [r3, #0]
 8012a38:	2b2f      	cmp	r3, #47	; 0x2f
 8012a3a:	d0f6      	beq.n	8012a2a <create_name+0xba>
 8012a3c:	68fa      	ldr	r2, [r7, #12]
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	4413      	add	r3, r2
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	2b5c      	cmp	r3, #92	; 0x5c
 8012a46:	d0f0      	beq.n	8012a2a <create_name+0xba>
			break;
 8012a48:	e038      	b.n	8012abc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8012a4a:	7ffb      	ldrb	r3, [r7, #31]
 8012a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8012a4e:	d003      	beq.n	8012a58 <create_name+0xe8>
 8012a50:	693a      	ldr	r2, [r7, #16]
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d30c      	bcc.n	8012a72 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	2b0b      	cmp	r3, #11
 8012a5c:	d002      	beq.n	8012a64 <create_name+0xf4>
 8012a5e:	7ffb      	ldrb	r3, [r7, #31]
 8012a60:	2b2e      	cmp	r3, #46	; 0x2e
 8012a62:	d001      	beq.n	8012a68 <create_name+0xf8>
 8012a64:	2306      	movs	r3, #6
 8012a66:	e044      	b.n	8012af2 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8012a68:	2308      	movs	r3, #8
 8012a6a:	613b      	str	r3, [r7, #16]
 8012a6c:	230b      	movs	r3, #11
 8012a6e:	61bb      	str	r3, [r7, #24]
			continue;
 8012a70:	e022      	b.n	8012ab8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012a72:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	da04      	bge.n	8012a84 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012a7a:	7ffb      	ldrb	r3, [r7, #31]
 8012a7c:	3b80      	subs	r3, #128	; 0x80
 8012a7e:	4a1f      	ldr	r2, [pc, #124]	; (8012afc <create_name+0x18c>)
 8012a80:	5cd3      	ldrb	r3, [r2, r3]
 8012a82:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012a84:	7ffb      	ldrb	r3, [r7, #31]
 8012a86:	4619      	mov	r1, r3
 8012a88:	481d      	ldr	r0, [pc, #116]	; (8012b00 <create_name+0x190>)
 8012a8a:	f7fe fee5 	bl	8011858 <chk_chr>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d001      	beq.n	8012a98 <create_name+0x128>
 8012a94:	2306      	movs	r3, #6
 8012a96:	e02c      	b.n	8012af2 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012a98:	7ffb      	ldrb	r3, [r7, #31]
 8012a9a:	2b60      	cmp	r3, #96	; 0x60
 8012a9c:	d905      	bls.n	8012aaa <create_name+0x13a>
 8012a9e:	7ffb      	ldrb	r3, [r7, #31]
 8012aa0:	2b7a      	cmp	r3, #122	; 0x7a
 8012aa2:	d802      	bhi.n	8012aaa <create_name+0x13a>
 8012aa4:	7ffb      	ldrb	r3, [r7, #31]
 8012aa6:	3b20      	subs	r3, #32
 8012aa8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	613a      	str	r2, [r7, #16]
 8012ab0:	68ba      	ldr	r2, [r7, #8]
 8012ab2:	4413      	add	r3, r2
 8012ab4:	7ffa      	ldrb	r2, [r7, #31]
 8012ab6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012ab8:	e7a6      	b.n	8012a08 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012aba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012abc:	68fa      	ldr	r2, [r7, #12]
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	441a      	add	r2, r3
 8012ac2:	683b      	ldr	r3, [r7, #0]
 8012ac4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d101      	bne.n	8012ad0 <create_name+0x160>
 8012acc:	2306      	movs	r3, #6
 8012ace:	e010      	b.n	8012af2 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2be5      	cmp	r3, #229	; 0xe5
 8012ad6:	d102      	bne.n	8012ade <create_name+0x16e>
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	2205      	movs	r2, #5
 8012adc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012ade:	7ffb      	ldrb	r3, [r7, #31]
 8012ae0:	2b20      	cmp	r3, #32
 8012ae2:	d801      	bhi.n	8012ae8 <create_name+0x178>
 8012ae4:	2204      	movs	r2, #4
 8012ae6:	e000      	b.n	8012aea <create_name+0x17a>
 8012ae8:	2200      	movs	r2, #0
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	330b      	adds	r3, #11
 8012aee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012af0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012af2:	4618      	mov	r0, r3
 8012af4:	3720      	adds	r7, #32
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
 8012afa:	bf00      	nop
 8012afc:	0801a15c 	.word	0x0801a15c
 8012b00:	0801a10c 	.word	0x0801a10c

08012b04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b086      	sub	sp, #24
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	2b2f      	cmp	r3, #47	; 0x2f
 8012b1e:	d00b      	beq.n	8012b38 <follow_path+0x34>
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	781b      	ldrb	r3, [r3, #0]
 8012b24:	2b5c      	cmp	r3, #92	; 0x5c
 8012b26:	d007      	beq.n	8012b38 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	699a      	ldr	r2, [r3, #24]
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	609a      	str	r2, [r3, #8]
 8012b30:	e00d      	b.n	8012b4e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012b32:	683b      	ldr	r3, [r7, #0]
 8012b34:	3301      	adds	r3, #1
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	781b      	ldrb	r3, [r3, #0]
 8012b3c:	2b2f      	cmp	r3, #47	; 0x2f
 8012b3e:	d0f8      	beq.n	8012b32 <follow_path+0x2e>
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	781b      	ldrb	r3, [r3, #0]
 8012b44:	2b5c      	cmp	r3, #92	; 0x5c
 8012b46:	d0f4      	beq.n	8012b32 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	2200      	movs	r2, #0
 8012b4c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	2b1f      	cmp	r3, #31
 8012b54:	d80a      	bhi.n	8012b6c <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	2280      	movs	r2, #128	; 0x80
 8012b5a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8012b5e:	2100      	movs	r1, #0
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f7ff fc1e 	bl	80123a2 <dir_sdi>
 8012b66:	4603      	mov	r3, r0
 8012b68:	75fb      	strb	r3, [r7, #23]
 8012b6a:	e05b      	b.n	8012c24 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012b6c:	463b      	mov	r3, r7
 8012b6e:	4619      	mov	r1, r3
 8012b70:	6878      	ldr	r0, [r7, #4]
 8012b72:	f7ff fefd 	bl	8012970 <create_name>
 8012b76:	4603      	mov	r3, r0
 8012b78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012b7a:	7dfb      	ldrb	r3, [r7, #23]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d14c      	bne.n	8012c1a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f7ff fe50 	bl	8012826 <dir_find>
 8012b86:	4603      	mov	r3, r0
 8012b88:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012b90:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012b92:	7dfb      	ldrb	r3, [r7, #23]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d01b      	beq.n	8012bd0 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012b98:	7dfb      	ldrb	r3, [r7, #23]
 8012b9a:	2b04      	cmp	r3, #4
 8012b9c:	d13f      	bne.n	8012c1e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012b9e:	7afb      	ldrb	r3, [r7, #11]
 8012ba0:	f003 0320 	and.w	r3, r3, #32
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d00b      	beq.n	8012bc0 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012ba8:	7afb      	ldrb	r3, [r7, #11]
 8012baa:	f003 0304 	and.w	r3, r3, #4
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d031      	beq.n	8012c16 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	2280      	movs	r2, #128	; 0x80
 8012bb6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012bba:	2300      	movs	r3, #0
 8012bbc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012bbe:	e02e      	b.n	8012c1e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012bc0:	7afb      	ldrb	r3, [r7, #11]
 8012bc2:	f003 0304 	and.w	r3, r3, #4
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d129      	bne.n	8012c1e <follow_path+0x11a>
 8012bca:	2305      	movs	r3, #5
 8012bcc:	75fb      	strb	r3, [r7, #23]
				break;
 8012bce:	e026      	b.n	8012c1e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012bd0:	7afb      	ldrb	r3, [r7, #11]
 8012bd2:	f003 0304 	and.w	r3, r3, #4
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d123      	bne.n	8012c22 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	799b      	ldrb	r3, [r3, #6]
 8012bde:	f003 0310 	and.w	r3, r3, #16
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d102      	bne.n	8012bec <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012be6:	2305      	movs	r3, #5
 8012be8:	75fb      	strb	r3, [r7, #23]
 8012bea:	e01b      	b.n	8012c24 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	695b      	ldr	r3, [r3, #20]
 8012bf6:	68fa      	ldr	r2, [r7, #12]
 8012bf8:	8992      	ldrh	r2, [r2, #12]
 8012bfa:	fbb3 f0f2 	udiv	r0, r3, r2
 8012bfe:	fb02 f200 	mul.w	r2, r2, r0
 8012c02:	1a9b      	subs	r3, r3, r2
 8012c04:	440b      	add	r3, r1
 8012c06:	4619      	mov	r1, r3
 8012c08:	68f8      	ldr	r0, [r7, #12]
 8012c0a:	f7ff fd70 	bl	80126ee <ld_clust>
 8012c0e:	4602      	mov	r2, r0
 8012c10:	693b      	ldr	r3, [r7, #16]
 8012c12:	609a      	str	r2, [r3, #8]
 8012c14:	e7aa      	b.n	8012b6c <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012c16:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012c18:	e7a8      	b.n	8012b6c <follow_path+0x68>
			if (res != FR_OK) break;
 8012c1a:	bf00      	nop
 8012c1c:	e002      	b.n	8012c24 <follow_path+0x120>
				break;
 8012c1e:	bf00      	nop
 8012c20:	e000      	b.n	8012c24 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012c22:	bf00      	nop
			}
		}
	}

	return res;
 8012c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	3718      	adds	r7, #24
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}

08012c2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012c2e:	b480      	push	{r7}
 8012c30:	b087      	sub	sp, #28
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012c36:	f04f 33ff 	mov.w	r3, #4294967295
 8012c3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d031      	beq.n	8012ca8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	617b      	str	r3, [r7, #20]
 8012c4a:	e002      	b.n	8012c52 <get_ldnumber+0x24>
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	3301      	adds	r3, #1
 8012c50:	617b      	str	r3, [r7, #20]
 8012c52:	697b      	ldr	r3, [r7, #20]
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	2b20      	cmp	r3, #32
 8012c58:	d903      	bls.n	8012c62 <get_ldnumber+0x34>
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	2b3a      	cmp	r3, #58	; 0x3a
 8012c60:	d1f4      	bne.n	8012c4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012c62:	697b      	ldr	r3, [r7, #20]
 8012c64:	781b      	ldrb	r3, [r3, #0]
 8012c66:	2b3a      	cmp	r3, #58	; 0x3a
 8012c68:	d11c      	bne.n	8012ca4 <get_ldnumber+0x76>
			tp = *path;
 8012c6a:	687b      	ldr	r3, [r7, #4]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	1c5a      	adds	r2, r3, #1
 8012c74:	60fa      	str	r2, [r7, #12]
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	3b30      	subs	r3, #48	; 0x30
 8012c7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012c7c:	68bb      	ldr	r3, [r7, #8]
 8012c7e:	2b09      	cmp	r3, #9
 8012c80:	d80e      	bhi.n	8012ca0 <get_ldnumber+0x72>
 8012c82:	68fa      	ldr	r2, [r7, #12]
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d10a      	bne.n	8012ca0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d107      	bne.n	8012ca0 <get_ldnumber+0x72>
					vol = (int)i;
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	3301      	adds	r3, #1
 8012c98:	617b      	str	r3, [r7, #20]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	697a      	ldr	r2, [r7, #20]
 8012c9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	e002      	b.n	8012caa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012ca8:	693b      	ldr	r3, [r7, #16]
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	371c      	adds	r7, #28
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb4:	4770      	bx	lr
	...

08012cb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	6078      	str	r0, [r7, #4]
 8012cc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	70da      	strb	r2, [r3, #3]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f04f 32ff 	mov.w	r2, #4294967295
 8012cce:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012cd0:	6839      	ldr	r1, [r7, #0]
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7fe ff8c 	bl	8011bf0 <move_window>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d001      	beq.n	8012ce2 <check_fs+0x2a>
 8012cde:	2304      	movs	r3, #4
 8012ce0:	e038      	b.n	8012d54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	3338      	adds	r3, #56	; 0x38
 8012ce6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7fe fcd0 	bl	8011690 <ld_word>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	461a      	mov	r2, r3
 8012cf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012cf8:	429a      	cmp	r2, r3
 8012cfa:	d001      	beq.n	8012d00 <check_fs+0x48>
 8012cfc:	2303      	movs	r3, #3
 8012cfe:	e029      	b.n	8012d54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012d06:	2be9      	cmp	r3, #233	; 0xe9
 8012d08:	d009      	beq.n	8012d1e <check_fs+0x66>
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012d10:	2beb      	cmp	r3, #235	; 0xeb
 8012d12:	d11e      	bne.n	8012d52 <check_fs+0x9a>
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012d1a:	2b90      	cmp	r3, #144	; 0x90
 8012d1c:	d119      	bne.n	8012d52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	3338      	adds	r3, #56	; 0x38
 8012d22:	3336      	adds	r3, #54	; 0x36
 8012d24:	4618      	mov	r0, r3
 8012d26:	f7fe fccb 	bl	80116c0 <ld_dword>
 8012d2a:	4603      	mov	r3, r0
 8012d2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012d30:	4a0a      	ldr	r2, [pc, #40]	; (8012d5c <check_fs+0xa4>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d101      	bne.n	8012d3a <check_fs+0x82>
 8012d36:	2300      	movs	r3, #0
 8012d38:	e00c      	b.n	8012d54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	3338      	adds	r3, #56	; 0x38
 8012d3e:	3352      	adds	r3, #82	; 0x52
 8012d40:	4618      	mov	r0, r3
 8012d42:	f7fe fcbd 	bl	80116c0 <ld_dword>
 8012d46:	4602      	mov	r2, r0
 8012d48:	4b05      	ldr	r3, [pc, #20]	; (8012d60 <check_fs+0xa8>)
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d101      	bne.n	8012d52 <check_fs+0x9a>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	e000      	b.n	8012d54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012d52:	2302      	movs	r3, #2
}
 8012d54:	4618      	mov	r0, r3
 8012d56:	3708      	adds	r7, #8
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}
 8012d5c:	00544146 	.word	0x00544146
 8012d60:	33544146 	.word	0x33544146

08012d64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b096      	sub	sp, #88	; 0x58
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	60f8      	str	r0, [r7, #12]
 8012d6c:	60b9      	str	r1, [r7, #8]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	2200      	movs	r2, #0
 8012d76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012d78:	68f8      	ldr	r0, [r7, #12]
 8012d7a:	f7ff ff58 	bl	8012c2e <get_ldnumber>
 8012d7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012d80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	da01      	bge.n	8012d8a <find_volume+0x26>
 8012d86:	230b      	movs	r3, #11
 8012d88:	e268      	b.n	801325c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012d8a:	4ab0      	ldr	r2, [pc, #704]	; (801304c <find_volume+0x2e8>)
 8012d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012d92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d101      	bne.n	8012d9e <find_volume+0x3a>
 8012d9a:	230c      	movs	r3, #12
 8012d9c:	e25e      	b.n	801325c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012d9e:	68bb      	ldr	r3, [r7, #8]
 8012da0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012da2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012da4:	79fb      	ldrb	r3, [r7, #7]
 8012da6:	f023 0301 	bic.w	r3, r3, #1
 8012daa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dae:	781b      	ldrb	r3, [r3, #0]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d01a      	beq.n	8012dea <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db6:	785b      	ldrb	r3, [r3, #1]
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7fe fbcb 	bl	8011554 <disk_status>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc8:	f003 0301 	and.w	r3, r3, #1
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d10c      	bne.n	8012dea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012dd0:	79fb      	ldrb	r3, [r7, #7]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d007      	beq.n	8012de6 <find_volume+0x82>
 8012dd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dda:	f003 0304 	and.w	r3, r3, #4
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d001      	beq.n	8012de6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012de2:	230a      	movs	r3, #10
 8012de4:	e23a      	b.n	801325c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012de6:	2300      	movs	r3, #0
 8012de8:	e238      	b.n	801325c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dec:	2200      	movs	r2, #0
 8012dee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012df2:	b2da      	uxtb	r2, r3
 8012df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfa:	785b      	ldrb	r3, [r3, #1]
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fe fbc3 	bl	8011588 <disk_initialize>
 8012e02:	4603      	mov	r3, r0
 8012e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012e08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e0c:	f003 0301 	and.w	r3, r3, #1
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d001      	beq.n	8012e18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012e14:	2303      	movs	r3, #3
 8012e16:	e221      	b.n	801325c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012e18:	79fb      	ldrb	r3, [r7, #7]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d007      	beq.n	8012e2e <find_volume+0xca>
 8012e1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e22:	f003 0304 	and.w	r3, r3, #4
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d001      	beq.n	8012e2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012e2a:	230a      	movs	r3, #10
 8012e2c:	e216      	b.n	801325c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e30:	7858      	ldrb	r0, [r3, #1]
 8012e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e34:	330c      	adds	r3, #12
 8012e36:	461a      	mov	r2, r3
 8012e38:	2102      	movs	r1, #2
 8012e3a:	f7fe fc0b 	bl	8011654 <disk_ioctl>
 8012e3e:	4603      	mov	r3, r0
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d001      	beq.n	8012e48 <find_volume+0xe4>
 8012e44:	2301      	movs	r3, #1
 8012e46:	e209      	b.n	801325c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4a:	899b      	ldrh	r3, [r3, #12]
 8012e4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012e50:	d80d      	bhi.n	8012e6e <find_volume+0x10a>
 8012e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e54:	899b      	ldrh	r3, [r3, #12]
 8012e56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e5a:	d308      	bcc.n	8012e6e <find_volume+0x10a>
 8012e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5e:	899b      	ldrh	r3, [r3, #12]
 8012e60:	461a      	mov	r2, r3
 8012e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e64:	899b      	ldrh	r3, [r3, #12]
 8012e66:	3b01      	subs	r3, #1
 8012e68:	4013      	ands	r3, r2
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d001      	beq.n	8012e72 <find_volume+0x10e>
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e1f4      	b.n	801325c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012e72:	2300      	movs	r3, #0
 8012e74:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012e76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e78:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e7a:	f7ff ff1d 	bl	8012cb8 <check_fs>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012e84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012e88:	2b02      	cmp	r3, #2
 8012e8a:	d14b      	bne.n	8012f24 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	643b      	str	r3, [r7, #64]	; 0x40
 8012e90:	e01f      	b.n	8012ed2 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e94:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e9a:	011b      	lsls	r3, r3, #4
 8012e9c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012ea0:	4413      	add	r3, r2
 8012ea2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea6:	3304      	adds	r3, #4
 8012ea8:	781b      	ldrb	r3, [r3, #0]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d006      	beq.n	8012ebc <find_volume+0x158>
 8012eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb0:	3308      	adds	r3, #8
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	f7fe fc04 	bl	80116c0 <ld_dword>
 8012eb8:	4602      	mov	r2, r0
 8012eba:	e000      	b.n	8012ebe <find_volume+0x15a>
 8012ebc:	2200      	movs	r2, #0
 8012ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ec0:	009b      	lsls	r3, r3, #2
 8012ec2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012ec6:	440b      	add	r3, r1
 8012ec8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ecc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ece:	3301      	adds	r3, #1
 8012ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8012ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ed4:	2b03      	cmp	r3, #3
 8012ed6:	d9dc      	bls.n	8012e92 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012ed8:	2300      	movs	r3, #0
 8012eda:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d002      	beq.n	8012ee8 <find_volume+0x184>
 8012ee2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012ee8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012ef0:	4413      	add	r3, r2
 8012ef2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012ef6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d005      	beq.n	8012f0a <find_volume+0x1a6>
 8012efe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012f00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012f02:	f7ff fed9 	bl	8012cb8 <check_fs>
 8012f06:	4603      	mov	r3, r0
 8012f08:	e000      	b.n	8012f0c <find_volume+0x1a8>
 8012f0a:	2303      	movs	r3, #3
 8012f0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f14:	2b01      	cmp	r3, #1
 8012f16:	d905      	bls.n	8012f24 <find_volume+0x1c0>
 8012f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f1a:	3301      	adds	r3, #1
 8012f1c:	643b      	str	r3, [r7, #64]	; 0x40
 8012f1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f20:	2b03      	cmp	r3, #3
 8012f22:	d9e1      	bls.n	8012ee8 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f28:	2b04      	cmp	r3, #4
 8012f2a:	d101      	bne.n	8012f30 <find_volume+0x1cc>
 8012f2c:	2301      	movs	r3, #1
 8012f2e:	e195      	b.n	801325c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012f30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d901      	bls.n	8012f3c <find_volume+0x1d8>
 8012f38:	230d      	movs	r3, #13
 8012f3a:	e18f      	b.n	801325c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f3e:	3338      	adds	r3, #56	; 0x38
 8012f40:	330b      	adds	r3, #11
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7fe fba4 	bl	8011690 <ld_word>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	461a      	mov	r2, r3
 8012f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4e:	899b      	ldrh	r3, [r3, #12]
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d001      	beq.n	8012f58 <find_volume+0x1f4>
 8012f54:	230d      	movs	r3, #13
 8012f56:	e181      	b.n	801325c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f5a:	3338      	adds	r3, #56	; 0x38
 8012f5c:	3316      	adds	r3, #22
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fe fb96 	bl	8011690 <ld_word>
 8012f64:	4603      	mov	r3, r0
 8012f66:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d106      	bne.n	8012f7c <find_volume+0x218>
 8012f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f70:	3338      	adds	r3, #56	; 0x38
 8012f72:	3324      	adds	r3, #36	; 0x24
 8012f74:	4618      	mov	r0, r3
 8012f76:	f7fe fba3 	bl	80116c0 <ld_dword>
 8012f7a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012f80:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f84:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8e:	789b      	ldrb	r3, [r3, #2]
 8012f90:	2b01      	cmp	r3, #1
 8012f92:	d005      	beq.n	8012fa0 <find_volume+0x23c>
 8012f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f96:	789b      	ldrb	r3, [r3, #2]
 8012f98:	2b02      	cmp	r3, #2
 8012f9a:	d001      	beq.n	8012fa0 <find_volume+0x23c>
 8012f9c:	230d      	movs	r3, #13
 8012f9e:	e15d      	b.n	801325c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa2:	789b      	ldrb	r3, [r3, #2]
 8012fa4:	461a      	mov	r2, r3
 8012fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fa8:	fb02 f303 	mul.w	r3, r2, r3
 8012fac:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012fb4:	b29a      	uxth	r2, r3
 8012fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbc:	895b      	ldrh	r3, [r3, #10]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d008      	beq.n	8012fd4 <find_volume+0x270>
 8012fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fc4:	895b      	ldrh	r3, [r3, #10]
 8012fc6:	461a      	mov	r2, r3
 8012fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fca:	895b      	ldrh	r3, [r3, #10]
 8012fcc:	3b01      	subs	r3, #1
 8012fce:	4013      	ands	r3, r2
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d001      	beq.n	8012fd8 <find_volume+0x274>
 8012fd4:	230d      	movs	r3, #13
 8012fd6:	e141      	b.n	801325c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fda:	3338      	adds	r3, #56	; 0x38
 8012fdc:	3311      	adds	r3, #17
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f7fe fb56 	bl	8011690 <ld_word>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fee:	891b      	ldrh	r3, [r3, #8]
 8012ff0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ff2:	8992      	ldrh	r2, [r2, #12]
 8012ff4:	0952      	lsrs	r2, r2, #5
 8012ff6:	b292      	uxth	r2, r2
 8012ff8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012ffc:	fb02 f201 	mul.w	r2, r2, r1
 8013000:	1a9b      	subs	r3, r3, r2
 8013002:	b29b      	uxth	r3, r3
 8013004:	2b00      	cmp	r3, #0
 8013006:	d001      	beq.n	801300c <find_volume+0x2a8>
 8013008:	230d      	movs	r3, #13
 801300a:	e127      	b.n	801325c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801300c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300e:	3338      	adds	r3, #56	; 0x38
 8013010:	3313      	adds	r3, #19
 8013012:	4618      	mov	r0, r3
 8013014:	f7fe fb3c 	bl	8011690 <ld_word>
 8013018:	4603      	mov	r3, r0
 801301a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801301c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801301e:	2b00      	cmp	r3, #0
 8013020:	d106      	bne.n	8013030 <find_volume+0x2cc>
 8013022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013024:	3338      	adds	r3, #56	; 0x38
 8013026:	3320      	adds	r3, #32
 8013028:	4618      	mov	r0, r3
 801302a:	f7fe fb49 	bl	80116c0 <ld_dword>
 801302e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013032:	3338      	adds	r3, #56	; 0x38
 8013034:	330e      	adds	r3, #14
 8013036:	4618      	mov	r0, r3
 8013038:	f7fe fb2a 	bl	8011690 <ld_word>
 801303c:	4603      	mov	r3, r0
 801303e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013040:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013042:	2b00      	cmp	r3, #0
 8013044:	d104      	bne.n	8013050 <find_volume+0x2ec>
 8013046:	230d      	movs	r3, #13
 8013048:	e108      	b.n	801325c <find_volume+0x4f8>
 801304a:	bf00      	nop
 801304c:	2004244c 	.word	0x2004244c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013050:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013054:	4413      	add	r3, r2
 8013056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013058:	8911      	ldrh	r1, [r2, #8]
 801305a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801305c:	8992      	ldrh	r2, [r2, #12]
 801305e:	0952      	lsrs	r2, r2, #5
 8013060:	b292      	uxth	r2, r2
 8013062:	fbb1 f2f2 	udiv	r2, r1, r2
 8013066:	b292      	uxth	r2, r2
 8013068:	4413      	add	r3, r2
 801306a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801306c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801306e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013070:	429a      	cmp	r2, r3
 8013072:	d201      	bcs.n	8013078 <find_volume+0x314>
 8013074:	230d      	movs	r3, #13
 8013076:	e0f1      	b.n	801325c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801307a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801307c:	1ad3      	subs	r3, r2, r3
 801307e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013080:	8952      	ldrh	r2, [r2, #10]
 8013082:	fbb3 f3f2 	udiv	r3, r3, r2
 8013086:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308a:	2b00      	cmp	r3, #0
 801308c:	d101      	bne.n	8013092 <find_volume+0x32e>
 801308e:	230d      	movs	r3, #13
 8013090:	e0e4      	b.n	801325c <find_volume+0x4f8>
		fmt = FS_FAT32;
 8013092:	2303      	movs	r3, #3
 8013094:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801309e:	4293      	cmp	r3, r2
 80130a0:	d802      	bhi.n	80130a8 <find_volume+0x344>
 80130a2:	2302      	movs	r3, #2
 80130a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80130a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130aa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80130ae:	4293      	cmp	r3, r2
 80130b0:	d802      	bhi.n	80130b8 <find_volume+0x354>
 80130b2:	2301      	movs	r3, #1
 80130b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80130b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ba:	1c9a      	adds	r2, r3, #2
 80130bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130be:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80130c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130c4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80130c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80130ca:	441a      	add	r2, r3
 80130cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130ce:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80130d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80130d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d4:	441a      	add	r2, r3
 80130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d8:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 80130da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80130de:	2b03      	cmp	r3, #3
 80130e0:	d11e      	bne.n	8013120 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80130e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130e4:	3338      	adds	r3, #56	; 0x38
 80130e6:	332a      	adds	r3, #42	; 0x2a
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7fe fad1 	bl	8011690 <ld_word>
 80130ee:	4603      	mov	r3, r0
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d001      	beq.n	80130f8 <find_volume+0x394>
 80130f4:	230d      	movs	r3, #13
 80130f6:	e0b1      	b.n	801325c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80130f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130fa:	891b      	ldrh	r3, [r3, #8]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d001      	beq.n	8013104 <find_volume+0x3a0>
 8013100:	230d      	movs	r3, #13
 8013102:	e0ab      	b.n	801325c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013106:	3338      	adds	r3, #56	; 0x38
 8013108:	332c      	adds	r3, #44	; 0x2c
 801310a:	4618      	mov	r0, r3
 801310c:	f7fe fad8 	bl	80116c0 <ld_dword>
 8013110:	4602      	mov	r2, r0
 8013112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013114:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013118:	69db      	ldr	r3, [r3, #28]
 801311a:	009b      	lsls	r3, r3, #2
 801311c:	647b      	str	r3, [r7, #68]	; 0x44
 801311e:	e01f      	b.n	8013160 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013122:	891b      	ldrh	r3, [r3, #8]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d101      	bne.n	801312c <find_volume+0x3c8>
 8013128:	230d      	movs	r3, #13
 801312a:	e097      	b.n	801325c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801312e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013132:	441a      	add	r2, r3
 8013134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013136:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801313c:	2b02      	cmp	r3, #2
 801313e:	d103      	bne.n	8013148 <find_volume+0x3e4>
 8013140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013142:	69db      	ldr	r3, [r3, #28]
 8013144:	005b      	lsls	r3, r3, #1
 8013146:	e00a      	b.n	801315e <find_volume+0x3fa>
 8013148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801314a:	69da      	ldr	r2, [r3, #28]
 801314c:	4613      	mov	r3, r2
 801314e:	005b      	lsls	r3, r3, #1
 8013150:	4413      	add	r3, r2
 8013152:	085a      	lsrs	r2, r3, #1
 8013154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013156:	69db      	ldr	r3, [r3, #28]
 8013158:	f003 0301 	and.w	r3, r3, #1
 801315c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801315e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013162:	6a1a      	ldr	r2, [r3, #32]
 8013164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013166:	899b      	ldrh	r3, [r3, #12]
 8013168:	4619      	mov	r1, r3
 801316a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801316c:	440b      	add	r3, r1
 801316e:	3b01      	subs	r3, #1
 8013170:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013172:	8989      	ldrh	r1, [r1, #12]
 8013174:	fbb3 f3f1 	udiv	r3, r3, r1
 8013178:	429a      	cmp	r2, r3
 801317a:	d201      	bcs.n	8013180 <find_volume+0x41c>
 801317c:	230d      	movs	r3, #13
 801317e:	e06d      	b.n	801325c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013182:	f04f 32ff 	mov.w	r2, #4294967295
 8013186:	615a      	str	r2, [r3, #20]
 8013188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318a:	695a      	ldr	r2, [r3, #20]
 801318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801318e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013192:	2280      	movs	r2, #128	; 0x80
 8013194:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013196:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801319a:	2b03      	cmp	r3, #3
 801319c:	d149      	bne.n	8013232 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801319e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131a0:	3338      	adds	r3, #56	; 0x38
 80131a2:	3330      	adds	r3, #48	; 0x30
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fe fa73 	bl	8011690 <ld_word>
 80131aa:	4603      	mov	r3, r0
 80131ac:	2b01      	cmp	r3, #1
 80131ae:	d140      	bne.n	8013232 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80131b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80131b2:	3301      	adds	r3, #1
 80131b4:	4619      	mov	r1, r3
 80131b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80131b8:	f7fe fd1a 	bl	8011bf0 <move_window>
 80131bc:	4603      	mov	r3, r0
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d137      	bne.n	8013232 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80131c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c4:	2200      	movs	r2, #0
 80131c6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80131c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131ca:	3338      	adds	r3, #56	; 0x38
 80131cc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80131d0:	4618      	mov	r0, r3
 80131d2:	f7fe fa5d 	bl	8011690 <ld_word>
 80131d6:	4603      	mov	r3, r0
 80131d8:	461a      	mov	r2, r3
 80131da:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80131de:	429a      	cmp	r2, r3
 80131e0:	d127      	bne.n	8013232 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80131e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131e4:	3338      	adds	r3, #56	; 0x38
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fe fa6a 	bl	80116c0 <ld_dword>
 80131ec:	4602      	mov	r2, r0
 80131ee:	4b1d      	ldr	r3, [pc, #116]	; (8013264 <find_volume+0x500>)
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d11e      	bne.n	8013232 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80131f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131f6:	3338      	adds	r3, #56	; 0x38
 80131f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fe fa5f 	bl	80116c0 <ld_dword>
 8013202:	4602      	mov	r2, r0
 8013204:	4b18      	ldr	r3, [pc, #96]	; (8013268 <find_volume+0x504>)
 8013206:	429a      	cmp	r2, r3
 8013208:	d113      	bne.n	8013232 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801320a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801320c:	3338      	adds	r3, #56	; 0x38
 801320e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013212:	4618      	mov	r0, r3
 8013214:	f7fe fa54 	bl	80116c0 <ld_dword>
 8013218:	4602      	mov	r2, r0
 801321a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801321c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801321e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013220:	3338      	adds	r3, #56	; 0x38
 8013222:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013226:	4618      	mov	r0, r3
 8013228:	f7fe fa4a 	bl	80116c0 <ld_dword>
 801322c:	4602      	mov	r2, r0
 801322e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013230:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013234:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013238:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801323a:	4b0c      	ldr	r3, [pc, #48]	; (801326c <find_volume+0x508>)
 801323c:	881b      	ldrh	r3, [r3, #0]
 801323e:	3301      	adds	r3, #1
 8013240:	b29a      	uxth	r2, r3
 8013242:	4b0a      	ldr	r3, [pc, #40]	; (801326c <find_volume+0x508>)
 8013244:	801a      	strh	r2, [r3, #0]
 8013246:	4b09      	ldr	r3, [pc, #36]	; (801326c <find_volume+0x508>)
 8013248:	881a      	ldrh	r2, [r3, #0]
 801324a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801324c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 801324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013250:	2200      	movs	r2, #0
 8013252:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013254:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013256:	f7fe fc63 	bl	8011b20 <clear_lock>
#endif
	return FR_OK;
 801325a:	2300      	movs	r3, #0
}
 801325c:	4618      	mov	r0, r3
 801325e:	3758      	adds	r7, #88	; 0x58
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}
 8013264:	41615252 	.word	0x41615252
 8013268:	61417272 	.word	0x61417272
 801326c:	20042450 	.word	0x20042450

08013270 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801327a:	2309      	movs	r3, #9
 801327c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d01c      	beq.n	80132be <validate+0x4e>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d018      	beq.n	80132be <validate+0x4e>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	781b      	ldrb	r3, [r3, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d013      	beq.n	80132be <validate+0x4e>
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	889a      	ldrh	r2, [r3, #4]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	681b      	ldr	r3, [r3, #0]
 801329e:	88db      	ldrh	r3, [r3, #6]
 80132a0:	429a      	cmp	r2, r3
 80132a2:	d10c      	bne.n	80132be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	785b      	ldrb	r3, [r3, #1]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fe f952 	bl	8011554 <disk_status>
 80132b0:	4603      	mov	r3, r0
 80132b2:	f003 0301 	and.w	r3, r3, #1
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d101      	bne.n	80132be <validate+0x4e>
			res = FR_OK;
 80132ba:	2300      	movs	r3, #0
 80132bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80132be:	7bfb      	ldrb	r3, [r7, #15]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d102      	bne.n	80132ca <validate+0x5a>
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	e000      	b.n	80132cc <validate+0x5c>
 80132ca:	2300      	movs	r3, #0
 80132cc:	683a      	ldr	r2, [r7, #0]
 80132ce:	6013      	str	r3, [r2, #0]
	return res;
 80132d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80132d2:	4618      	mov	r0, r3
 80132d4:	3710      	adds	r7, #16
 80132d6:	46bd      	mov	sp, r7
 80132d8:	bd80      	pop	{r7, pc}
	...

080132dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b088      	sub	sp, #32
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	60f8      	str	r0, [r7, #12]
 80132e4:	60b9      	str	r1, [r7, #8]
 80132e6:	4613      	mov	r3, r2
 80132e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80132ee:	f107 0310 	add.w	r3, r7, #16
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7ff fc9b 	bl	8012c2e <get_ldnumber>
 80132f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80132fa:	69fb      	ldr	r3, [r7, #28]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	da01      	bge.n	8013304 <f_mount+0x28>
 8013300:	230b      	movs	r3, #11
 8013302:	e02b      	b.n	801335c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013304:	4a17      	ldr	r2, [pc, #92]	; (8013364 <f_mount+0x88>)
 8013306:	69fb      	ldr	r3, [r7, #28]
 8013308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801330c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801330e:	69bb      	ldr	r3, [r7, #24]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d005      	beq.n	8013320 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013314:	69b8      	ldr	r0, [r7, #24]
 8013316:	f7fe fc03 	bl	8011b20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	2200      	movs	r2, #0
 801331e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d002      	beq.n	801332c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	2200      	movs	r2, #0
 801332a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	490d      	ldr	r1, [pc, #52]	; (8013364 <f_mount+0x88>)
 8013330:	69fb      	ldr	r3, [r7, #28]
 8013332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d002      	beq.n	8013342 <f_mount+0x66>
 801333c:	79fb      	ldrb	r3, [r7, #7]
 801333e:	2b01      	cmp	r3, #1
 8013340:	d001      	beq.n	8013346 <f_mount+0x6a>
 8013342:	2300      	movs	r3, #0
 8013344:	e00a      	b.n	801335c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013346:	f107 010c 	add.w	r1, r7, #12
 801334a:	f107 0308 	add.w	r3, r7, #8
 801334e:	2200      	movs	r2, #0
 8013350:	4618      	mov	r0, r3
 8013352:	f7ff fd07 	bl	8012d64 <find_volume>
 8013356:	4603      	mov	r3, r0
 8013358:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801335a:	7dfb      	ldrb	r3, [r7, #23]
}
 801335c:	4618      	mov	r0, r3
 801335e:	3720      	adds	r7, #32
 8013360:	46bd      	mov	sp, r7
 8013362:	bd80      	pop	{r7, pc}
 8013364:	2004244c 	.word	0x2004244c

08013368 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b098      	sub	sp, #96	; 0x60
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	60b9      	str	r1, [r7, #8]
 8013372:	4613      	mov	r3, r2
 8013374:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d101      	bne.n	8013380 <f_open+0x18>
 801337c:	2309      	movs	r3, #9
 801337e:	e1ba      	b.n	80136f6 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013386:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013388:	79fa      	ldrb	r2, [r7, #7]
 801338a:	f107 0110 	add.w	r1, r7, #16
 801338e:	f107 0308 	add.w	r3, r7, #8
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff fce6 	bl	8012d64 <find_volume>
 8013398:	4603      	mov	r3, r0
 801339a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801339e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	f040 819e 	bne.w	80136e4 <f_open+0x37c>
		dj.obj.fs = fs;
 80133a8:	693b      	ldr	r3, [r7, #16]
 80133aa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80133ac:	68ba      	ldr	r2, [r7, #8]
 80133ae:	f107 0314 	add.w	r3, r7, #20
 80133b2:	4611      	mov	r1, r2
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff fba5 	bl	8012b04 <follow_path>
 80133ba:	4603      	mov	r3, r0
 80133bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80133c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d11a      	bne.n	80133fe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80133c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80133cc:	b25b      	sxtb	r3, r3
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	da03      	bge.n	80133da <f_open+0x72>
				res = FR_INVALID_NAME;
 80133d2:	2306      	movs	r3, #6
 80133d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80133d8:	e011      	b.n	80133fe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80133da:	79fb      	ldrb	r3, [r7, #7]
 80133dc:	f023 0301 	bic.w	r3, r3, #1
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	bf14      	ite	ne
 80133e4:	2301      	movne	r3, #1
 80133e6:	2300      	moveq	r3, #0
 80133e8:	b2db      	uxtb	r3, r3
 80133ea:	461a      	mov	r2, r3
 80133ec:	f107 0314 	add.w	r3, r7, #20
 80133f0:	4611      	mov	r1, r2
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fe fa4c 	bl	8011890 <chk_lock>
 80133f8:	4603      	mov	r3, r0
 80133fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80133fe:	79fb      	ldrb	r3, [r7, #7]
 8013400:	f003 031c 	and.w	r3, r3, #28
 8013404:	2b00      	cmp	r3, #0
 8013406:	d07e      	beq.n	8013506 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013408:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801340c:	2b00      	cmp	r3, #0
 801340e:	d017      	beq.n	8013440 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013414:	2b04      	cmp	r3, #4
 8013416:	d10e      	bne.n	8013436 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013418:	f7fe fa96 	bl	8011948 <enq_lock>
 801341c:	4603      	mov	r3, r0
 801341e:	2b00      	cmp	r3, #0
 8013420:	d006      	beq.n	8013430 <f_open+0xc8>
 8013422:	f107 0314 	add.w	r3, r7, #20
 8013426:	4618      	mov	r0, r3
 8013428:	f7ff fa52 	bl	80128d0 <dir_register>
 801342c:	4603      	mov	r3, r0
 801342e:	e000      	b.n	8013432 <f_open+0xca>
 8013430:	2312      	movs	r3, #18
 8013432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013436:	79fb      	ldrb	r3, [r7, #7]
 8013438:	f043 0308 	orr.w	r3, r3, #8
 801343c:	71fb      	strb	r3, [r7, #7]
 801343e:	e010      	b.n	8013462 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013440:	7ebb      	ldrb	r3, [r7, #26]
 8013442:	f003 0311 	and.w	r3, r3, #17
 8013446:	2b00      	cmp	r3, #0
 8013448:	d003      	beq.n	8013452 <f_open+0xea>
					res = FR_DENIED;
 801344a:	2307      	movs	r3, #7
 801344c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013450:	e007      	b.n	8013462 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013452:	79fb      	ldrb	r3, [r7, #7]
 8013454:	f003 0304 	and.w	r3, r3, #4
 8013458:	2b00      	cmp	r3, #0
 801345a:	d002      	beq.n	8013462 <f_open+0xfa>
 801345c:	2308      	movs	r3, #8
 801345e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013466:	2b00      	cmp	r3, #0
 8013468:	d167      	bne.n	801353a <f_open+0x1d2>
 801346a:	79fb      	ldrb	r3, [r7, #7]
 801346c:	f003 0308 	and.w	r3, r3, #8
 8013470:	2b00      	cmp	r3, #0
 8013472:	d062      	beq.n	801353a <f_open+0x1d2>
				dw = GET_FATTIME();
 8013474:	4ba2      	ldr	r3, [pc, #648]	; (8013700 <f_open+0x398>)
 8013476:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347a:	330e      	adds	r3, #14
 801347c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801347e:	4618      	mov	r0, r3
 8013480:	f7fe f95c 	bl	801173c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013486:	3316      	adds	r3, #22
 8013488:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801348a:	4618      	mov	r0, r3
 801348c:	f7fe f956 	bl	801173c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013492:	330b      	adds	r3, #11
 8013494:	2220      	movs	r2, #32
 8013496:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801349c:	4611      	mov	r1, r2
 801349e:	4618      	mov	r0, r3
 80134a0:	f7ff f925 	bl	80126ee <ld_clust>
 80134a4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80134a6:	693b      	ldr	r3, [r7, #16]
 80134a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80134aa:	2200      	movs	r2, #0
 80134ac:	4618      	mov	r0, r3
 80134ae:	f7ff f93d 	bl	801272c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80134b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134b4:	331c      	adds	r3, #28
 80134b6:	2100      	movs	r1, #0
 80134b8:	4618      	mov	r0, r3
 80134ba:	f7fe f93f 	bl	801173c <st_dword>
					fs->wflag = 1;
 80134be:	693b      	ldr	r3, [r7, #16]
 80134c0:	2201      	movs	r2, #1
 80134c2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80134c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d037      	beq.n	801353a <f_open+0x1d2>
						dw = fs->winsect;
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134ce:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80134d0:	f107 0314 	add.w	r3, r7, #20
 80134d4:	2200      	movs	r2, #0
 80134d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80134d8:	4618      	mov	r0, r3
 80134da:	f7fe fe2d 	bl	8012138 <remove_chain>
 80134de:	4603      	mov	r3, r0
 80134e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80134e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d126      	bne.n	801353a <f_open+0x1d2>
							res = move_window(fs, dw);
 80134ec:	693b      	ldr	r3, [r7, #16]
 80134ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80134f0:	4618      	mov	r0, r3
 80134f2:	f7fe fb7d 	bl	8011bf0 <move_window>
 80134f6:	4603      	mov	r3, r0
 80134f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80134fc:	693b      	ldr	r3, [r7, #16]
 80134fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013500:	3a01      	subs	r2, #1
 8013502:	611a      	str	r2, [r3, #16]
 8013504:	e019      	b.n	801353a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801350a:	2b00      	cmp	r3, #0
 801350c:	d115      	bne.n	801353a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801350e:	7ebb      	ldrb	r3, [r7, #26]
 8013510:	f003 0310 	and.w	r3, r3, #16
 8013514:	2b00      	cmp	r3, #0
 8013516:	d003      	beq.n	8013520 <f_open+0x1b8>
					res = FR_NO_FILE;
 8013518:	2304      	movs	r3, #4
 801351a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801351e:	e00c      	b.n	801353a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013520:	79fb      	ldrb	r3, [r7, #7]
 8013522:	f003 0302 	and.w	r3, r3, #2
 8013526:	2b00      	cmp	r3, #0
 8013528:	d007      	beq.n	801353a <f_open+0x1d2>
 801352a:	7ebb      	ldrb	r3, [r7, #26]
 801352c:	f003 0301 	and.w	r3, r3, #1
 8013530:	2b00      	cmp	r3, #0
 8013532:	d002      	beq.n	801353a <f_open+0x1d2>
						res = FR_DENIED;
 8013534:	2307      	movs	r3, #7
 8013536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801353a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801353e:	2b00      	cmp	r3, #0
 8013540:	d128      	bne.n	8013594 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013542:	79fb      	ldrb	r3, [r7, #7]
 8013544:	f003 0308 	and.w	r3, r3, #8
 8013548:	2b00      	cmp	r3, #0
 801354a:	d003      	beq.n	8013554 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 801354c:	79fb      	ldrb	r3, [r7, #7]
 801354e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013552:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801355c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013562:	79fb      	ldrb	r3, [r7, #7]
 8013564:	f023 0301 	bic.w	r3, r3, #1
 8013568:	2b00      	cmp	r3, #0
 801356a:	bf14      	ite	ne
 801356c:	2301      	movne	r3, #1
 801356e:	2300      	moveq	r3, #0
 8013570:	b2db      	uxtb	r3, r3
 8013572:	461a      	mov	r2, r3
 8013574:	f107 0314 	add.w	r3, r7, #20
 8013578:	4611      	mov	r1, r2
 801357a:	4618      	mov	r0, r3
 801357c:	f7fe fa06 	bl	801198c <inc_lock>
 8013580:	4602      	mov	r2, r0
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d102      	bne.n	8013594 <f_open+0x22c>
 801358e:	2302      	movs	r3, #2
 8013590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013598:	2b00      	cmp	r3, #0
 801359a:	f040 80a3 	bne.w	80136e4 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801359e:	693b      	ldr	r3, [r7, #16]
 80135a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80135a2:	4611      	mov	r1, r2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f7ff f8a2 	bl	80126ee <ld_clust>
 80135aa:	4602      	mov	r2, r0
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80135b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b2:	331c      	adds	r3, #28
 80135b4:	4618      	mov	r0, r3
 80135b6:	f7fe f883 	bl	80116c0 <ld_dword>
 80135ba:	4602      	mov	r2, r0
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	2200      	movs	r2, #0
 80135c4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80135c6:	693a      	ldr	r2, [r7, #16]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80135cc:	693b      	ldr	r3, [r7, #16]
 80135ce:	88da      	ldrh	r2, [r3, #6]
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	79fa      	ldrb	r2, [r7, #7]
 80135d8:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	2200      	movs	r2, #0
 80135de:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2200      	movs	r2, #0
 80135e4:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	2200      	movs	r2, #0
 80135ea:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	3330      	adds	r3, #48	; 0x30
 80135f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80135f4:	2100      	movs	r1, #0
 80135f6:	4618      	mov	r0, r3
 80135f8:	f7fe f8ed 	bl	80117d6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80135fc:	79fb      	ldrb	r3, [r7, #7]
 80135fe:	f003 0320 	and.w	r3, r3, #32
 8013602:	2b00      	cmp	r3, #0
 8013604:	d06e      	beq.n	80136e4 <f_open+0x37c>
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	68db      	ldr	r3, [r3, #12]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d06a      	beq.n	80136e4 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	68da      	ldr	r2, [r3, #12]
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	895b      	ldrh	r3, [r3, #10]
 801361a:	461a      	mov	r2, r3
 801361c:	693b      	ldr	r3, [r7, #16]
 801361e:	899b      	ldrh	r3, [r3, #12]
 8013620:	fb03 f302 	mul.w	r3, r3, r2
 8013624:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013626:	68fb      	ldr	r3, [r7, #12]
 8013628:	689b      	ldr	r3, [r3, #8]
 801362a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	68db      	ldr	r3, [r3, #12]
 8013630:	657b      	str	r3, [r7, #84]	; 0x54
 8013632:	e016      	b.n	8013662 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013638:	4618      	mov	r0, r3
 801363a:	f7fe fb96 	bl	8011d6a <get_fat>
 801363e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8013640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013642:	2b01      	cmp	r3, #1
 8013644:	d802      	bhi.n	801364c <f_open+0x2e4>
 8013646:	2302      	movs	r3, #2
 8013648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801364c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801364e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013652:	d102      	bne.n	801365a <f_open+0x2f2>
 8013654:	2301      	movs	r3, #1
 8013656:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801365a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801365c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801365e:	1ad3      	subs	r3, r2, r3
 8013660:	657b      	str	r3, [r7, #84]	; 0x54
 8013662:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013666:	2b00      	cmp	r3, #0
 8013668:	d103      	bne.n	8013672 <f_open+0x30a>
 801366a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801366c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801366e:	429a      	cmp	r2, r3
 8013670:	d8e0      	bhi.n	8013634 <f_open+0x2cc>
				}
				fp->clust = clst;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8013676:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013678:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801367c:	2b00      	cmp	r3, #0
 801367e:	d131      	bne.n	80136e4 <f_open+0x37c>
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	899b      	ldrh	r3, [r3, #12]
 8013684:	461a      	mov	r2, r3
 8013686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013688:	fbb3 f1f2 	udiv	r1, r3, r2
 801368c:	fb02 f201 	mul.w	r2, r2, r1
 8013690:	1a9b      	subs	r3, r3, r2
 8013692:	2b00      	cmp	r3, #0
 8013694:	d026      	beq.n	80136e4 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013696:	693b      	ldr	r3, [r7, #16]
 8013698:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801369a:	4618      	mov	r0, r3
 801369c:	f7fe fb46 	bl	8011d2c <clust2sect>
 80136a0:	6478      	str	r0, [r7, #68]	; 0x44
 80136a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d103      	bne.n	80136b0 <f_open+0x348>
						res = FR_INT_ERR;
 80136a8:	2302      	movs	r3, #2
 80136aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80136ae:	e019      	b.n	80136e4 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80136b0:	693b      	ldr	r3, [r7, #16]
 80136b2:	899b      	ldrh	r3, [r3, #12]
 80136b4:	461a      	mov	r2, r3
 80136b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136b8:	fbb3 f2f2 	udiv	r2, r3, r2
 80136bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80136be:	441a      	add	r2, r3
 80136c0:	68fb      	ldr	r3, [r7, #12]
 80136c2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	7858      	ldrb	r0, [r3, #1]
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	6a1a      	ldr	r2, [r3, #32]
 80136d2:	2301      	movs	r3, #1
 80136d4:	f7fd ff7e 	bl	80115d4 <disk_read>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d002      	beq.n	80136e4 <f_open+0x37c>
 80136de:	2301      	movs	r3, #1
 80136e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80136e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d002      	beq.n	80136f2 <f_open+0x38a>
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	2200      	movs	r2, #0
 80136f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80136f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80136f6:	4618      	mov	r0, r3
 80136f8:	3760      	adds	r7, #96	; 0x60
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	274a0000 	.word	0x274a0000

08013704 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b08e      	sub	sp, #56	; 0x38
 8013708:	af00      	add	r7, sp, #0
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	607a      	str	r2, [r7, #4]
 8013710:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	2200      	movs	r2, #0
 801371a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f107 0214 	add.w	r2, r7, #20
 8013722:	4611      	mov	r1, r2
 8013724:	4618      	mov	r0, r3
 8013726:	f7ff fda3 	bl	8013270 <validate>
 801372a:	4603      	mov	r3, r0
 801372c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013730:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013734:	2b00      	cmp	r3, #0
 8013736:	d107      	bne.n	8013748 <f_read+0x44>
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	7d5b      	ldrb	r3, [r3, #21]
 801373c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013744:	2b00      	cmp	r3, #0
 8013746:	d002      	beq.n	801374e <f_read+0x4a>
 8013748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801374c:	e135      	b.n	80139ba <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	7d1b      	ldrb	r3, [r3, #20]
 8013752:	f003 0301 	and.w	r3, r3, #1
 8013756:	2b00      	cmp	r3, #0
 8013758:	d101      	bne.n	801375e <f_read+0x5a>
 801375a:	2307      	movs	r3, #7
 801375c:	e12d      	b.n	80139ba <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	68da      	ldr	r2, [r3, #12]
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	699b      	ldr	r3, [r3, #24]
 8013766:	1ad3      	subs	r3, r2, r3
 8013768:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	6a3b      	ldr	r3, [r7, #32]
 801376e:	429a      	cmp	r2, r3
 8013770:	f240 811e 	bls.w	80139b0 <f_read+0x2ac>
 8013774:	6a3b      	ldr	r3, [r7, #32]
 8013776:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013778:	e11a      	b.n	80139b0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	699b      	ldr	r3, [r3, #24]
 801377e:	697a      	ldr	r2, [r7, #20]
 8013780:	8992      	ldrh	r2, [r2, #12]
 8013782:	fbb3 f1f2 	udiv	r1, r3, r2
 8013786:	fb02 f201 	mul.w	r2, r2, r1
 801378a:	1a9b      	subs	r3, r3, r2
 801378c:	2b00      	cmp	r3, #0
 801378e:	f040 80d5 	bne.w	801393c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	699b      	ldr	r3, [r3, #24]
 8013796:	697a      	ldr	r2, [r7, #20]
 8013798:	8992      	ldrh	r2, [r2, #12]
 801379a:	fbb3 f3f2 	udiv	r3, r3, r2
 801379e:	697a      	ldr	r2, [r7, #20]
 80137a0:	8952      	ldrh	r2, [r2, #10]
 80137a2:	3a01      	subs	r2, #1
 80137a4:	4013      	ands	r3, r2
 80137a6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80137a8:	69fb      	ldr	r3, [r7, #28]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d12f      	bne.n	801380e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	699b      	ldr	r3, [r3, #24]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d103      	bne.n	80137be <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	689b      	ldr	r3, [r3, #8]
 80137ba:	633b      	str	r3, [r7, #48]	; 0x30
 80137bc:	e013      	b.n	80137e6 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d007      	beq.n	80137d6 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	699b      	ldr	r3, [r3, #24]
 80137ca:	4619      	mov	r1, r3
 80137cc:	68f8      	ldr	r0, [r7, #12]
 80137ce:	f7fe fdb0 	bl	8012332 <clmt_clust>
 80137d2:	6338      	str	r0, [r7, #48]	; 0x30
 80137d4:	e007      	b.n	80137e6 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80137d6:	68fa      	ldr	r2, [r7, #12]
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	69db      	ldr	r3, [r3, #28]
 80137dc:	4619      	mov	r1, r3
 80137de:	4610      	mov	r0, r2
 80137e0:	f7fe fac3 	bl	8011d6a <get_fat>
 80137e4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80137e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e8:	2b01      	cmp	r3, #1
 80137ea:	d804      	bhi.n	80137f6 <f_read+0xf2>
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	2202      	movs	r2, #2
 80137f0:	755a      	strb	r2, [r3, #21]
 80137f2:	2302      	movs	r3, #2
 80137f4:	e0e1      	b.n	80139ba <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80137f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137fc:	d104      	bne.n	8013808 <f_read+0x104>
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	2201      	movs	r2, #1
 8013802:	755a      	strb	r2, [r3, #21]
 8013804:	2301      	movs	r3, #1
 8013806:	e0d8      	b.n	80139ba <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801380c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801380e:	697a      	ldr	r2, [r7, #20]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	69db      	ldr	r3, [r3, #28]
 8013814:	4619      	mov	r1, r3
 8013816:	4610      	mov	r0, r2
 8013818:	f7fe fa88 	bl	8011d2c <clust2sect>
 801381c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d104      	bne.n	801382e <f_read+0x12a>
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2202      	movs	r2, #2
 8013828:	755a      	strb	r2, [r3, #21]
 801382a:	2302      	movs	r3, #2
 801382c:	e0c5      	b.n	80139ba <f_read+0x2b6>
			sect += csect;
 801382e:	69ba      	ldr	r2, [r7, #24]
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	4413      	add	r3, r2
 8013834:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	899b      	ldrh	r3, [r3, #12]
 801383a:	461a      	mov	r2, r3
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013842:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013846:	2b00      	cmp	r3, #0
 8013848:	d041      	beq.n	80138ce <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801384a:	69fa      	ldr	r2, [r7, #28]
 801384c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801384e:	4413      	add	r3, r2
 8013850:	697a      	ldr	r2, [r7, #20]
 8013852:	8952      	ldrh	r2, [r2, #10]
 8013854:	4293      	cmp	r3, r2
 8013856:	d905      	bls.n	8013864 <f_read+0x160>
					cc = fs->csize - csect;
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	895b      	ldrh	r3, [r3, #10]
 801385c:	461a      	mov	r2, r3
 801385e:	69fb      	ldr	r3, [r7, #28]
 8013860:	1ad3      	subs	r3, r2, r3
 8013862:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013864:	697b      	ldr	r3, [r7, #20]
 8013866:	7858      	ldrb	r0, [r3, #1]
 8013868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801386a:	69ba      	ldr	r2, [r7, #24]
 801386c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801386e:	f7fd feb1 	bl	80115d4 <disk_read>
 8013872:	4603      	mov	r3, r0
 8013874:	2b00      	cmp	r3, #0
 8013876:	d004      	beq.n	8013882 <f_read+0x17e>
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	2201      	movs	r2, #1
 801387c:	755a      	strb	r2, [r3, #21]
 801387e:	2301      	movs	r3, #1
 8013880:	e09b      	b.n	80139ba <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	7d1b      	ldrb	r3, [r3, #20]
 8013886:	b25b      	sxtb	r3, r3
 8013888:	2b00      	cmp	r3, #0
 801388a:	da18      	bge.n	80138be <f_read+0x1ba>
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	6a1a      	ldr	r2, [r3, #32]
 8013890:	69bb      	ldr	r3, [r7, #24]
 8013892:	1ad3      	subs	r3, r2, r3
 8013894:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013896:	429a      	cmp	r2, r3
 8013898:	d911      	bls.n	80138be <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	6a1a      	ldr	r2, [r3, #32]
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	1ad3      	subs	r3, r2, r3
 80138a2:	697a      	ldr	r2, [r7, #20]
 80138a4:	8992      	ldrh	r2, [r2, #12]
 80138a6:	fb02 f303 	mul.w	r3, r2, r3
 80138aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138ac:	18d0      	adds	r0, r2, r3
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138b4:	697b      	ldr	r3, [r7, #20]
 80138b6:	899b      	ldrh	r3, [r3, #12]
 80138b8:	461a      	mov	r2, r3
 80138ba:	f7fd ff6b 	bl	8011794 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	899b      	ldrh	r3, [r3, #12]
 80138c2:	461a      	mov	r2, r3
 80138c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138c6:	fb02 f303 	mul.w	r3, r2, r3
 80138ca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80138cc:	e05c      	b.n	8013988 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6a1b      	ldr	r3, [r3, #32]
 80138d2:	69ba      	ldr	r2, [r7, #24]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d02e      	beq.n	8013936 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	7d1b      	ldrb	r3, [r3, #20]
 80138dc:	b25b      	sxtb	r3, r3
 80138de:	2b00      	cmp	r3, #0
 80138e0:	da18      	bge.n	8013914 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	7858      	ldrb	r0, [r3, #1]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	6a1a      	ldr	r2, [r3, #32]
 80138f0:	2301      	movs	r3, #1
 80138f2:	f7fd fe8f 	bl	8011614 <disk_write>
 80138f6:	4603      	mov	r3, r0
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d004      	beq.n	8013906 <f_read+0x202>
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	2201      	movs	r2, #1
 8013900:	755a      	strb	r2, [r3, #21]
 8013902:	2301      	movs	r3, #1
 8013904:	e059      	b.n	80139ba <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	7d1b      	ldrb	r3, [r3, #20]
 801390a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801390e:	b2da      	uxtb	r2, r3
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	7858      	ldrb	r0, [r3, #1]
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801391e:	2301      	movs	r3, #1
 8013920:	69ba      	ldr	r2, [r7, #24]
 8013922:	f7fd fe57 	bl	80115d4 <disk_read>
 8013926:	4603      	mov	r3, r0
 8013928:	2b00      	cmp	r3, #0
 801392a:	d004      	beq.n	8013936 <f_read+0x232>
 801392c:	68fb      	ldr	r3, [r7, #12]
 801392e:	2201      	movs	r2, #1
 8013930:	755a      	strb	r2, [r3, #21]
 8013932:	2301      	movs	r3, #1
 8013934:	e041      	b.n	80139ba <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	69ba      	ldr	r2, [r7, #24]
 801393a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	899b      	ldrh	r3, [r3, #12]
 8013940:	4618      	mov	r0, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	8992      	ldrh	r2, [r2, #12]
 801394a:	fbb3 f1f2 	udiv	r1, r3, r2
 801394e:	fb02 f201 	mul.w	r2, r2, r1
 8013952:	1a9b      	subs	r3, r3, r2
 8013954:	1ac3      	subs	r3, r0, r3
 8013956:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	429a      	cmp	r2, r3
 801395e:	d901      	bls.n	8013964 <f_read+0x260>
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	699b      	ldr	r3, [r3, #24]
 801396e:	697a      	ldr	r2, [r7, #20]
 8013970:	8992      	ldrh	r2, [r2, #12]
 8013972:	fbb3 f0f2 	udiv	r0, r3, r2
 8013976:	fb02 f200 	mul.w	r2, r2, r0
 801397a:	1a9b      	subs	r3, r3, r2
 801397c:	440b      	add	r3, r1
 801397e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013980:	4619      	mov	r1, r3
 8013982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013984:	f7fd ff06 	bl	8011794 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398c:	4413      	add	r3, r2
 801398e:	627b      	str	r3, [r7, #36]	; 0x24
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	699a      	ldr	r2, [r3, #24]
 8013994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013996:	441a      	add	r2, r3
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	619a      	str	r2, [r3, #24]
 801399c:	683b      	ldr	r3, [r7, #0]
 801399e:	681a      	ldr	r2, [r3, #0]
 80139a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139a2:	441a      	add	r2, r3
 80139a4:	683b      	ldr	r3, [r7, #0]
 80139a6:	601a      	str	r2, [r3, #0]
 80139a8:	687a      	ldr	r2, [r7, #4]
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	1ad3      	subs	r3, r2, r3
 80139ae:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	f47f aee1 	bne.w	801377a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80139b8:	2300      	movs	r3, #0
}
 80139ba:	4618      	mov	r0, r3
 80139bc:	3738      	adds	r7, #56	; 0x38
 80139be:	46bd      	mov	sp, r7
 80139c0:	bd80      	pop	{r7, pc}

080139c2 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80139c2:	b580      	push	{r7, lr}
 80139c4:	b08c      	sub	sp, #48	; 0x30
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	60f8      	str	r0, [r7, #12]
 80139ca:	60b9      	str	r1, [r7, #8]
 80139cc:	607a      	str	r2, [r7, #4]
 80139ce:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80139d0:	68bb      	ldr	r3, [r7, #8]
 80139d2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	2200      	movs	r2, #0
 80139d8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	f107 0210 	add.w	r2, r7, #16
 80139e0:	4611      	mov	r1, r2
 80139e2:	4618      	mov	r0, r3
 80139e4:	f7ff fc44 	bl	8013270 <validate>
 80139e8:	4603      	mov	r3, r0
 80139ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80139ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d107      	bne.n	8013a06 <f_write+0x44>
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	7d5b      	ldrb	r3, [r3, #21]
 80139fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80139fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <f_write+0x4a>
 8013a06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a0a:	e16a      	b.n	8013ce2 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013a0c:	68fb      	ldr	r3, [r7, #12]
 8013a0e:	7d1b      	ldrb	r3, [r3, #20]
 8013a10:	f003 0302 	and.w	r3, r3, #2
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d101      	bne.n	8013a1c <f_write+0x5a>
 8013a18:	2307      	movs	r3, #7
 8013a1a:	e162      	b.n	8013ce2 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	699a      	ldr	r2, [r3, #24]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	441a      	add	r2, r3
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	699b      	ldr	r3, [r3, #24]
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	f080 814c 	bcs.w	8013cc6 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	699b      	ldr	r3, [r3, #24]
 8013a32:	43db      	mvns	r3, r3
 8013a34:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013a36:	e146      	b.n	8013cc6 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	699b      	ldr	r3, [r3, #24]
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	8992      	ldrh	r2, [r2, #12]
 8013a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8013a44:	fb02 f201 	mul.w	r2, r2, r1
 8013a48:	1a9b      	subs	r3, r3, r2
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	f040 80f1 	bne.w	8013c32 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	693a      	ldr	r2, [r7, #16]
 8013a56:	8992      	ldrh	r2, [r2, #12]
 8013a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a5c:	693a      	ldr	r2, [r7, #16]
 8013a5e:	8952      	ldrh	r2, [r2, #10]
 8013a60:	3a01      	subs	r2, #1
 8013a62:	4013      	ands	r3, r2
 8013a64:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d143      	bne.n	8013af4 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	699b      	ldr	r3, [r3, #24]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d10c      	bne.n	8013a8e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	689b      	ldr	r3, [r3, #8]
 8013a78:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d11a      	bne.n	8013ab6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013a80:	68fb      	ldr	r3, [r7, #12]
 8013a82:	2100      	movs	r1, #0
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7fe fbbc 	bl	8012202 <create_chain>
 8013a8a:	62b8      	str	r0, [r7, #40]	; 0x28
 8013a8c:	e013      	b.n	8013ab6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d007      	beq.n	8013aa6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	699b      	ldr	r3, [r3, #24]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	68f8      	ldr	r0, [r7, #12]
 8013a9e:	f7fe fc48 	bl	8012332 <clmt_clust>
 8013aa2:	62b8      	str	r0, [r7, #40]	; 0x28
 8013aa4:	e007      	b.n	8013ab6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	69db      	ldr	r3, [r3, #28]
 8013aac:	4619      	mov	r1, r3
 8013aae:	4610      	mov	r0, r2
 8013ab0:	f7fe fba7 	bl	8012202 <create_chain>
 8013ab4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	f000 8109 	beq.w	8013cd0 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d104      	bne.n	8013ace <f_write+0x10c>
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	2202      	movs	r2, #2
 8013ac8:	755a      	strb	r2, [r3, #21]
 8013aca:	2302      	movs	r3, #2
 8013acc:	e109      	b.n	8013ce2 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ad4:	d104      	bne.n	8013ae0 <f_write+0x11e>
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	2201      	movs	r2, #1
 8013ada:	755a      	strb	r2, [r3, #21]
 8013adc:	2301      	movs	r3, #1
 8013ade:	e100      	b.n	8013ce2 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013ae4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	689b      	ldr	r3, [r3, #8]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d102      	bne.n	8013af4 <f_write+0x132>
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013af2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	7d1b      	ldrb	r3, [r3, #20]
 8013af8:	b25b      	sxtb	r3, r3
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	da18      	bge.n	8013b30 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	7858      	ldrb	r0, [r3, #1]
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	6a1a      	ldr	r2, [r3, #32]
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	f7fd fd81 	bl	8011614 <disk_write>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d004      	beq.n	8013b22 <f_write+0x160>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	2201      	movs	r2, #1
 8013b1c:	755a      	strb	r2, [r3, #21]
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e0df      	b.n	8013ce2 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	7d1b      	ldrb	r3, [r3, #20]
 8013b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b2a:	b2da      	uxtb	r2, r3
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013b30:	693a      	ldr	r2, [r7, #16]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	69db      	ldr	r3, [r3, #28]
 8013b36:	4619      	mov	r1, r3
 8013b38:	4610      	mov	r0, r2
 8013b3a:	f7fe f8f7 	bl	8011d2c <clust2sect>
 8013b3e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d104      	bne.n	8013b50 <f_write+0x18e>
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2202      	movs	r2, #2
 8013b4a:	755a      	strb	r2, [r3, #21]
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	e0c8      	b.n	8013ce2 <f_write+0x320>
			sect += csect;
 8013b50:	697a      	ldr	r2, [r7, #20]
 8013b52:	69bb      	ldr	r3, [r7, #24]
 8013b54:	4413      	add	r3, r2
 8013b56:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013b58:	693b      	ldr	r3, [r7, #16]
 8013b5a:	899b      	ldrh	r3, [r3, #12]
 8013b5c:	461a      	mov	r2, r3
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8013b64:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8013b66:	6a3b      	ldr	r3, [r7, #32]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d043      	beq.n	8013bf4 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013b6c:	69ba      	ldr	r2, [r7, #24]
 8013b6e:	6a3b      	ldr	r3, [r7, #32]
 8013b70:	4413      	add	r3, r2
 8013b72:	693a      	ldr	r2, [r7, #16]
 8013b74:	8952      	ldrh	r2, [r2, #10]
 8013b76:	4293      	cmp	r3, r2
 8013b78:	d905      	bls.n	8013b86 <f_write+0x1c4>
					cc = fs->csize - csect;
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	895b      	ldrh	r3, [r3, #10]
 8013b7e:	461a      	mov	r2, r3
 8013b80:	69bb      	ldr	r3, [r7, #24]
 8013b82:	1ad3      	subs	r3, r2, r3
 8013b84:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	7858      	ldrb	r0, [r3, #1]
 8013b8a:	6a3b      	ldr	r3, [r7, #32]
 8013b8c:	697a      	ldr	r2, [r7, #20]
 8013b8e:	69f9      	ldr	r1, [r7, #28]
 8013b90:	f7fd fd40 	bl	8011614 <disk_write>
 8013b94:	4603      	mov	r3, r0
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d004      	beq.n	8013ba4 <f_write+0x1e2>
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	755a      	strb	r2, [r3, #21]
 8013ba0:	2301      	movs	r3, #1
 8013ba2:	e09e      	b.n	8013ce2 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	6a1a      	ldr	r2, [r3, #32]
 8013ba8:	697b      	ldr	r3, [r7, #20]
 8013baa:	1ad3      	subs	r3, r2, r3
 8013bac:	6a3a      	ldr	r2, [r7, #32]
 8013bae:	429a      	cmp	r2, r3
 8013bb0:	d918      	bls.n	8013be4 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	6a1a      	ldr	r2, [r3, #32]
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	1ad3      	subs	r3, r2, r3
 8013bc0:	693a      	ldr	r2, [r7, #16]
 8013bc2:	8992      	ldrh	r2, [r2, #12]
 8013bc4:	fb02 f303 	mul.w	r3, r2, r3
 8013bc8:	69fa      	ldr	r2, [r7, #28]
 8013bca:	18d1      	adds	r1, r2, r3
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	899b      	ldrh	r3, [r3, #12]
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	f7fd fddf 	bl	8011794 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	7d1b      	ldrb	r3, [r3, #20]
 8013bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bde:	b2da      	uxtb	r2, r3
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	899b      	ldrh	r3, [r3, #12]
 8013be8:	461a      	mov	r2, r3
 8013bea:	6a3b      	ldr	r3, [r7, #32]
 8013bec:	fb02 f303 	mul.w	r3, r2, r3
 8013bf0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013bf2:	e04b      	b.n	8013c8c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	6a1b      	ldr	r3, [r3, #32]
 8013bf8:	697a      	ldr	r2, [r7, #20]
 8013bfa:	429a      	cmp	r2, r3
 8013bfc:	d016      	beq.n	8013c2c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	699a      	ldr	r2, [r3, #24]
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013c06:	429a      	cmp	r2, r3
 8013c08:	d210      	bcs.n	8013c2c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013c0a:	693b      	ldr	r3, [r7, #16]
 8013c0c:	7858      	ldrb	r0, [r3, #1]
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c14:	2301      	movs	r3, #1
 8013c16:	697a      	ldr	r2, [r7, #20]
 8013c18:	f7fd fcdc 	bl	80115d4 <disk_read>
 8013c1c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d004      	beq.n	8013c2c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	2201      	movs	r2, #1
 8013c26:	755a      	strb	r2, [r3, #21]
 8013c28:	2301      	movs	r3, #1
 8013c2a:	e05a      	b.n	8013ce2 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	697a      	ldr	r2, [r7, #20]
 8013c30:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013c32:	693b      	ldr	r3, [r7, #16]
 8013c34:	899b      	ldrh	r3, [r3, #12]
 8013c36:	4618      	mov	r0, r3
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	699b      	ldr	r3, [r3, #24]
 8013c3c:	693a      	ldr	r2, [r7, #16]
 8013c3e:	8992      	ldrh	r2, [r2, #12]
 8013c40:	fbb3 f1f2 	udiv	r1, r3, r2
 8013c44:	fb02 f201 	mul.w	r2, r2, r1
 8013c48:	1a9b      	subs	r3, r3, r2
 8013c4a:	1ac3      	subs	r3, r0, r3
 8013c4c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013c4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d901      	bls.n	8013c5a <f_write+0x298>
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	699b      	ldr	r3, [r3, #24]
 8013c64:	693a      	ldr	r2, [r7, #16]
 8013c66:	8992      	ldrh	r2, [r2, #12]
 8013c68:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c6c:	fb02 f200 	mul.w	r2, r2, r0
 8013c70:	1a9b      	subs	r3, r3, r2
 8013c72:	440b      	add	r3, r1
 8013c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013c76:	69f9      	ldr	r1, [r7, #28]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fd fd8b 	bl	8011794 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	7d1b      	ldrb	r3, [r3, #20]
 8013c82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c86:	b2da      	uxtb	r2, r3
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013c8c:	69fa      	ldr	r2, [r7, #28]
 8013c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c90:	4413      	add	r3, r2
 8013c92:	61fb      	str	r3, [r7, #28]
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	699a      	ldr	r2, [r3, #24]
 8013c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c9a:	441a      	add	r2, r3
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	619a      	str	r2, [r3, #24]
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	68da      	ldr	r2, [r3, #12]
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	699b      	ldr	r3, [r3, #24]
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	bf38      	it	cc
 8013cac:	461a      	movcc	r2, r3
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	60da      	str	r2, [r3, #12]
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cb8:	441a      	add	r2, r3
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	601a      	str	r2, [r3, #0]
 8013cbe:	687a      	ldr	r2, [r7, #4]
 8013cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc2:	1ad3      	subs	r3, r2, r3
 8013cc4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	f47f aeb5 	bne.w	8013a38 <f_write+0x76>
 8013cce:	e000      	b.n	8013cd2 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013cd0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	7d1b      	ldrb	r3, [r3, #20]
 8013cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cda:	b2da      	uxtb	r2, r3
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013ce0:	2300      	movs	r3, #0
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3730      	adds	r7, #48	; 0x30
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
	...

08013cec <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b086      	sub	sp, #24
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	f107 0208 	add.w	r2, r7, #8
 8013cfa:	4611      	mov	r1, r2
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7ff fab7 	bl	8013270 <validate>
 8013d02:	4603      	mov	r3, r0
 8013d04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d06:	7dfb      	ldrb	r3, [r7, #23]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d167      	bne.n	8013ddc <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	7d1b      	ldrb	r3, [r3, #20]
 8013d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d061      	beq.n	8013ddc <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	7d1b      	ldrb	r3, [r3, #20]
 8013d1c:	b25b      	sxtb	r3, r3
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	da15      	bge.n	8013d4e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013d22:	68bb      	ldr	r3, [r7, #8]
 8013d24:	7858      	ldrb	r0, [r3, #1]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6a1a      	ldr	r2, [r3, #32]
 8013d30:	2301      	movs	r3, #1
 8013d32:	f7fd fc6f 	bl	8011614 <disk_write>
 8013d36:	4603      	mov	r3, r0
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d001      	beq.n	8013d40 <f_sync+0x54>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e04e      	b.n	8013dde <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	7d1b      	ldrb	r3, [r3, #20]
 8013d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013d4e:	4b26      	ldr	r3, [pc, #152]	; (8013de8 <f_sync+0xfc>)
 8013d50:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d58:	4619      	mov	r1, r3
 8013d5a:	4610      	mov	r0, r2
 8013d5c:	f7fd ff48 	bl	8011bf0 <move_window>
 8013d60:	4603      	mov	r3, r0
 8013d62:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013d64:	7dfb      	ldrb	r3, [r7, #23]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d138      	bne.n	8013ddc <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d6e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	330b      	adds	r3, #11
 8013d74:	781a      	ldrb	r2, [r3, #0]
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	330b      	adds	r3, #11
 8013d7a:	f042 0220 	orr.w	r2, r2, #32
 8013d7e:	b2d2      	uxtb	r2, r2
 8013d80:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	6818      	ldr	r0, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	689b      	ldr	r3, [r3, #8]
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	68f9      	ldr	r1, [r7, #12]
 8013d8e:	f7fe fccd 	bl	801272c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	f103 021c 	add.w	r2, r3, #28
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	4619      	mov	r1, r3
 8013d9e:	4610      	mov	r0, r2
 8013da0:	f7fd fccc 	bl	801173c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013da4:	68fb      	ldr	r3, [r7, #12]
 8013da6:	3316      	adds	r3, #22
 8013da8:	6939      	ldr	r1, [r7, #16]
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fd fcc6 	bl	801173c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	3312      	adds	r3, #18
 8013db4:	2100      	movs	r1, #0
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fd fca5 	bl	8011706 <st_word>
					fs->wflag = 1;
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	2201      	movs	r2, #1
 8013dc0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	f7fd ff41 	bl	8011c4c <sync_fs>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	7d1b      	ldrb	r3, [r3, #20]
 8013dd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013dd6:	b2da      	uxtb	r2, r3
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3718      	adds	r7, #24
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	274a0000 	.word	0x274a0000

08013dec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013df4:	6878      	ldr	r0, [r7, #4]
 8013df6:	f7ff ff79 	bl	8013cec <f_sync>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013dfe:	7bfb      	ldrb	r3, [r7, #15]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d118      	bne.n	8013e36 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	f107 0208 	add.w	r2, r7, #8
 8013e0a:	4611      	mov	r1, r2
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	f7ff fa2f 	bl	8013270 <validate>
 8013e12:	4603      	mov	r3, r0
 8013e14:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013e16:	7bfb      	ldrb	r3, [r7, #15]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d10c      	bne.n	8013e36 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	691b      	ldr	r3, [r3, #16]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7fd fe41 	bl	8011aa8 <dec_lock>
 8013e26:	4603      	mov	r3, r0
 8013e28:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013e2a:	7bfb      	ldrb	r3, [r7, #15]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d102      	bne.n	8013e36 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2200      	movs	r2, #0
 8013e34:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3710      	adds	r7, #16
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013e40:	b590      	push	{r4, r7, lr}
 8013e42:	b091      	sub	sp, #68	; 0x44
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013e48:	f107 0108 	add.w	r1, r7, #8
 8013e4c:	1d3b      	adds	r3, r7, #4
 8013e4e:	2200      	movs	r2, #0
 8013e50:	4618      	mov	r0, r3
 8013e52:	f7fe ff87 	bl	8012d64 <find_volume>
 8013e56:	4603      	mov	r3, r0
 8013e58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013e5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d131      	bne.n	8013ec8 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013e68:	687a      	ldr	r2, [r7, #4]
 8013e6a:	f107 030c 	add.w	r3, r7, #12
 8013e6e:	4611      	mov	r1, r2
 8013e70:	4618      	mov	r0, r3
 8013e72:	f7fe fe47 	bl	8012b04 <follow_path>
 8013e76:	4603      	mov	r3, r0
 8013e78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013e7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d11a      	bne.n	8013eba <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013e84:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013e88:	b25b      	sxtb	r3, r3
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	da03      	bge.n	8013e96 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	697a      	ldr	r2, [r7, #20]
 8013e92:	619a      	str	r2, [r3, #24]
 8013e94:	e011      	b.n	8013eba <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013e96:	7cbb      	ldrb	r3, [r7, #18]
 8013e98:	f003 0310 	and.w	r3, r3, #16
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d009      	beq.n	8013eb4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ea4:	68bc      	ldr	r4, [r7, #8]
 8013ea6:	4611      	mov	r1, r2
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	f7fe fc20 	bl	80126ee <ld_clust>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	61a3      	str	r3, [r4, #24]
 8013eb2:	e002      	b.n	8013eba <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013eb4:	2305      	movs	r3, #5
 8013eb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013eba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ebe:	2b04      	cmp	r3, #4
 8013ec0:	d102      	bne.n	8013ec8 <f_chdir+0x88>
 8013ec2:	2305      	movs	r3, #5
 8013ec4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013ec8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3744      	adds	r7, #68	; 0x44
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	bd90      	pop	{r4, r7, pc}

08013ed4 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b090      	sub	sp, #64	; 0x40
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f107 0208 	add.w	r2, r7, #8
 8013ee4:	4611      	mov	r1, r2
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7ff f9c2 	bl	8013270 <validate>
 8013eec:	4603      	mov	r3, r0
 8013eee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013ef2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d103      	bne.n	8013f02 <f_lseek+0x2e>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	7d5b      	ldrb	r3, [r3, #21]
 8013efe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d002      	beq.n	8013f10 <f_lseek+0x3c>
 8013f0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013f0e:	e201      	b.n	8014314 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	f000 80d9 	beq.w	80140cc <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f20:	d15a      	bne.n	8013fd8 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f26:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f2a:	1d1a      	adds	r2, r3, #4
 8013f2c:	627a      	str	r2, [r7, #36]	; 0x24
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	617b      	str	r3, [r7, #20]
 8013f32:	2302      	movs	r3, #2
 8013f34:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	689b      	ldr	r3, [r3, #8]
 8013f3a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d03a      	beq.n	8013fb8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f44:	613b      	str	r3, [r7, #16]
 8013f46:	2300      	movs	r3, #0
 8013f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4c:	3302      	adds	r3, #2
 8013f4e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f52:	60fb      	str	r3, [r7, #12]
 8013f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f56:	3301      	adds	r3, #1
 8013f58:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f7fd ff03 	bl	8011d6a <get_fat>
 8013f64:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f68:	2b01      	cmp	r3, #1
 8013f6a:	d804      	bhi.n	8013f76 <f_lseek+0xa2>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2202      	movs	r2, #2
 8013f70:	755a      	strb	r2, [r3, #21]
 8013f72:	2302      	movs	r3, #2
 8013f74:	e1ce      	b.n	8014314 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f7c:	d104      	bne.n	8013f88 <f_lseek+0xb4>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	2201      	movs	r2, #1
 8013f82:	755a      	strb	r2, [r3, #21]
 8013f84:	2301      	movs	r3, #1
 8013f86:	e1c5      	b.n	8014314 <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013f88:	68fb      	ldr	r3, [r7, #12]
 8013f8a:	3301      	adds	r3, #1
 8013f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f8e:	429a      	cmp	r2, r3
 8013f90:	d0de      	beq.n	8013f50 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d809      	bhi.n	8013fae <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f9c:	1d1a      	adds	r2, r3, #4
 8013f9e:	627a      	str	r2, [r7, #36]	; 0x24
 8013fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fa2:	601a      	str	r2, [r3, #0]
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	1d1a      	adds	r2, r3, #4
 8013fa8:	627a      	str	r2, [r7, #36]	; 0x24
 8013faa:	693a      	ldr	r2, [r7, #16]
 8013fac:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013fae:	68bb      	ldr	r3, [r7, #8]
 8013fb0:	69db      	ldr	r3, [r3, #28]
 8013fb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013fb4:	429a      	cmp	r2, r3
 8013fb6:	d3c4      	bcc.n	8013f42 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fbe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fc2:	697b      	ldr	r3, [r7, #20]
 8013fc4:	429a      	cmp	r2, r3
 8013fc6:	d803      	bhi.n	8013fd0 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fca:	2200      	movs	r2, #0
 8013fcc:	601a      	str	r2, [r3, #0]
 8013fce:	e19f      	b.n	8014310 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013fd0:	2311      	movs	r3, #17
 8013fd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013fd6:	e19b      	b.n	8014310 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	68db      	ldr	r3, [r3, #12]
 8013fdc:	683a      	ldr	r2, [r7, #0]
 8013fde:	429a      	cmp	r2, r3
 8013fe0:	d902      	bls.n	8013fe8 <f_lseek+0x114>
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	68db      	ldr	r3, [r3, #12]
 8013fe6:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	683a      	ldr	r2, [r7, #0]
 8013fec:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	f000 818d 	beq.w	8014310 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	6878      	ldr	r0, [r7, #4]
 8013ffe:	f7fe f998 	bl	8012332 <clmt_clust>
 8014002:	4602      	mov	r2, r0
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014008:	68ba      	ldr	r2, [r7, #8]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	69db      	ldr	r3, [r3, #28]
 801400e:	4619      	mov	r1, r3
 8014010:	4610      	mov	r0, r2
 8014012:	f7fd fe8b 	bl	8011d2c <clust2sect>
 8014016:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014018:	69bb      	ldr	r3, [r7, #24]
 801401a:	2b00      	cmp	r3, #0
 801401c:	d104      	bne.n	8014028 <f_lseek+0x154>
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	2202      	movs	r2, #2
 8014022:	755a      	strb	r2, [r3, #21]
 8014024:	2302      	movs	r3, #2
 8014026:	e175      	b.n	8014314 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014028:	683b      	ldr	r3, [r7, #0]
 801402a:	3b01      	subs	r3, #1
 801402c:	68ba      	ldr	r2, [r7, #8]
 801402e:	8992      	ldrh	r2, [r2, #12]
 8014030:	fbb3 f3f2 	udiv	r3, r3, r2
 8014034:	68ba      	ldr	r2, [r7, #8]
 8014036:	8952      	ldrh	r2, [r2, #10]
 8014038:	3a01      	subs	r2, #1
 801403a:	4013      	ands	r3, r2
 801403c:	69ba      	ldr	r2, [r7, #24]
 801403e:	4413      	add	r3, r2
 8014040:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	699b      	ldr	r3, [r3, #24]
 8014046:	68ba      	ldr	r2, [r7, #8]
 8014048:	8992      	ldrh	r2, [r2, #12]
 801404a:	fbb3 f1f2 	udiv	r1, r3, r2
 801404e:	fb02 f201 	mul.w	r2, r2, r1
 8014052:	1a9b      	subs	r3, r3, r2
 8014054:	2b00      	cmp	r3, #0
 8014056:	f000 815b 	beq.w	8014310 <f_lseek+0x43c>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a1b      	ldr	r3, [r3, #32]
 801405e:	69ba      	ldr	r2, [r7, #24]
 8014060:	429a      	cmp	r2, r3
 8014062:	f000 8155 	beq.w	8014310 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	7d1b      	ldrb	r3, [r3, #20]
 801406a:	b25b      	sxtb	r3, r3
 801406c:	2b00      	cmp	r3, #0
 801406e:	da18      	bge.n	80140a2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014070:	68bb      	ldr	r3, [r7, #8]
 8014072:	7858      	ldrb	r0, [r3, #1]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	6a1a      	ldr	r2, [r3, #32]
 801407e:	2301      	movs	r3, #1
 8014080:	f7fd fac8 	bl	8011614 <disk_write>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d004      	beq.n	8014094 <f_lseek+0x1c0>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2201      	movs	r2, #1
 801408e:	755a      	strb	r2, [r3, #21]
 8014090:	2301      	movs	r3, #1
 8014092:	e13f      	b.n	8014314 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	7d1b      	ldrb	r3, [r3, #20]
 8014098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801409c:	b2da      	uxtb	r2, r3
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	7858      	ldrb	r0, [r3, #1]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80140ac:	2301      	movs	r3, #1
 80140ae:	69ba      	ldr	r2, [r7, #24]
 80140b0:	f7fd fa90 	bl	80115d4 <disk_read>
 80140b4:	4603      	mov	r3, r0
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d004      	beq.n	80140c4 <f_lseek+0x1f0>
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	2201      	movs	r2, #1
 80140be:	755a      	strb	r2, [r3, #21]
 80140c0:	2301      	movs	r3, #1
 80140c2:	e127      	b.n	8014314 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	69ba      	ldr	r2, [r7, #24]
 80140c8:	621a      	str	r2, [r3, #32]
 80140ca:	e121      	b.n	8014310 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	68db      	ldr	r3, [r3, #12]
 80140d0:	683a      	ldr	r2, [r7, #0]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d908      	bls.n	80140e8 <f_lseek+0x214>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	7d1b      	ldrb	r3, [r3, #20]
 80140da:	f003 0302 	and.w	r3, r3, #2
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d102      	bne.n	80140e8 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	699b      	ldr	r3, [r3, #24]
 80140ec:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80140ee:	2300      	movs	r3, #0
 80140f0:	637b      	str	r3, [r7, #52]	; 0x34
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140f6:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	f000 80b5 	beq.w	801426a <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	895b      	ldrh	r3, [r3, #10]
 8014104:	461a      	mov	r2, r3
 8014106:	68bb      	ldr	r3, [r7, #8]
 8014108:	899b      	ldrh	r3, [r3, #12]
 801410a:	fb03 f302 	mul.w	r3, r3, r2
 801410e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014110:	6a3b      	ldr	r3, [r7, #32]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d01b      	beq.n	801414e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014116:	683b      	ldr	r3, [r7, #0]
 8014118:	1e5a      	subs	r2, r3, #1
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	fbb2 f2f3 	udiv	r2, r2, r3
 8014120:	6a3b      	ldr	r3, [r7, #32]
 8014122:	1e59      	subs	r1, r3, #1
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801412a:	429a      	cmp	r2, r3
 801412c:	d30f      	bcc.n	801414e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801412e:	6a3b      	ldr	r3, [r7, #32]
 8014130:	1e5a      	subs	r2, r3, #1
 8014132:	69fb      	ldr	r3, [r7, #28]
 8014134:	425b      	negs	r3, r3
 8014136:	401a      	ands	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	699b      	ldr	r3, [r3, #24]
 8014140:	683a      	ldr	r2, [r7, #0]
 8014142:	1ad3      	subs	r3, r2, r3
 8014144:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	69db      	ldr	r3, [r3, #28]
 801414a:	63bb      	str	r3, [r7, #56]	; 0x38
 801414c:	e022      	b.n	8014194 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	689b      	ldr	r3, [r3, #8]
 8014152:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014156:	2b00      	cmp	r3, #0
 8014158:	d119      	bne.n	801418e <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2100      	movs	r1, #0
 801415e:	4618      	mov	r0, r3
 8014160:	f7fe f84f 	bl	8012202 <create_chain>
 8014164:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014168:	2b01      	cmp	r3, #1
 801416a:	d104      	bne.n	8014176 <f_lseek+0x2a2>
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2202      	movs	r2, #2
 8014170:	755a      	strb	r2, [r3, #21]
 8014172:	2302      	movs	r3, #2
 8014174:	e0ce      	b.n	8014314 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801417c:	d104      	bne.n	8014188 <f_lseek+0x2b4>
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	2201      	movs	r2, #1
 8014182:	755a      	strb	r2, [r3, #21]
 8014184:	2301      	movs	r3, #1
 8014186:	e0c5      	b.n	8014314 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801418c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014192:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014196:	2b00      	cmp	r3, #0
 8014198:	d067      	beq.n	801426a <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801419a:	e03a      	b.n	8014212 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 801419c:	683a      	ldr	r2, [r7, #0]
 801419e:	69fb      	ldr	r3, [r7, #28]
 80141a0:	1ad3      	subs	r3, r2, r3
 80141a2:	603b      	str	r3, [r7, #0]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	699a      	ldr	r2, [r3, #24]
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	441a      	add	r2, r3
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	7d1b      	ldrb	r3, [r3, #20]
 80141b4:	f003 0302 	and.w	r3, r3, #2
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00b      	beq.n	80141d4 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7fe f81e 	bl	8012202 <create_chain>
 80141c6:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80141c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d108      	bne.n	80141e0 <f_lseek+0x30c>
							ofs = 0; break;
 80141ce:	2300      	movs	r3, #0
 80141d0:	603b      	str	r3, [r7, #0]
 80141d2:	e022      	b.n	801421a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80141d8:	4618      	mov	r0, r3
 80141da:	f7fd fdc6 	bl	8011d6a <get_fat>
 80141de:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80141e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141e6:	d104      	bne.n	80141f2 <f_lseek+0x31e>
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2201      	movs	r2, #1
 80141ec:	755a      	strb	r2, [r3, #21]
 80141ee:	2301      	movs	r3, #1
 80141f0:	e090      	b.n	8014314 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80141f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f4:	2b01      	cmp	r3, #1
 80141f6:	d904      	bls.n	8014202 <f_lseek+0x32e>
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	69db      	ldr	r3, [r3, #28]
 80141fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141fe:	429a      	cmp	r2, r3
 8014200:	d304      	bcc.n	801420c <f_lseek+0x338>
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	2202      	movs	r2, #2
 8014206:	755a      	strb	r2, [r3, #21]
 8014208:	2302      	movs	r3, #2
 801420a:	e083      	b.n	8014314 <f_lseek+0x440>
					fp->clust = clst;
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014210:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	69fb      	ldr	r3, [r7, #28]
 8014216:	429a      	cmp	r2, r3
 8014218:	d8c0      	bhi.n	801419c <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	699a      	ldr	r2, [r3, #24]
 801421e:	683b      	ldr	r3, [r7, #0]
 8014220:	441a      	add	r2, r3
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014226:	68bb      	ldr	r3, [r7, #8]
 8014228:	899b      	ldrh	r3, [r3, #12]
 801422a:	461a      	mov	r2, r3
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014232:	fb02 f201 	mul.w	r2, r2, r1
 8014236:	1a9b      	subs	r3, r3, r2
 8014238:	2b00      	cmp	r3, #0
 801423a:	d016      	beq.n	801426a <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014240:	4618      	mov	r0, r3
 8014242:	f7fd fd73 	bl	8011d2c <clust2sect>
 8014246:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801424a:	2b00      	cmp	r3, #0
 801424c:	d104      	bne.n	8014258 <f_lseek+0x384>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	2202      	movs	r2, #2
 8014252:	755a      	strb	r2, [r3, #21]
 8014254:	2302      	movs	r3, #2
 8014256:	e05d      	b.n	8014314 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	899b      	ldrh	r3, [r3, #12]
 801425c:	461a      	mov	r2, r3
 801425e:	683b      	ldr	r3, [r7, #0]
 8014260:	fbb3 f3f2 	udiv	r3, r3, r2
 8014264:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014266:	4413      	add	r3, r2
 8014268:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	699a      	ldr	r2, [r3, #24]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	429a      	cmp	r2, r3
 8014274:	d90a      	bls.n	801428c <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	699a      	ldr	r2, [r3, #24]
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	7d1b      	ldrb	r3, [r3, #20]
 8014282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014286:	b2da      	uxtb	r2, r3
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	699b      	ldr	r3, [r3, #24]
 8014290:	68ba      	ldr	r2, [r7, #8]
 8014292:	8992      	ldrh	r2, [r2, #12]
 8014294:	fbb3 f1f2 	udiv	r1, r3, r2
 8014298:	fb02 f201 	mul.w	r2, r2, r1
 801429c:	1a9b      	subs	r3, r3, r2
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d036      	beq.n	8014310 <f_lseek+0x43c>
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6a1b      	ldr	r3, [r3, #32]
 80142a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142a8:	429a      	cmp	r2, r3
 80142aa:	d031      	beq.n	8014310 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	7d1b      	ldrb	r3, [r3, #20]
 80142b0:	b25b      	sxtb	r3, r3
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	da18      	bge.n	80142e8 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	7858      	ldrb	r0, [r3, #1]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6a1a      	ldr	r2, [r3, #32]
 80142c4:	2301      	movs	r3, #1
 80142c6:	f7fd f9a5 	bl	8011614 <disk_write>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d004      	beq.n	80142da <f_lseek+0x406>
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	2201      	movs	r2, #1
 80142d4:	755a      	strb	r2, [r3, #21]
 80142d6:	2301      	movs	r3, #1
 80142d8:	e01c      	b.n	8014314 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	7d1b      	ldrb	r3, [r3, #20]
 80142de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80142e2:	b2da      	uxtb	r2, r3
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	7858      	ldrb	r0, [r3, #1]
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80142f2:	2301      	movs	r3, #1
 80142f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80142f6:	f7fd f96d 	bl	80115d4 <disk_read>
 80142fa:	4603      	mov	r3, r0
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d004      	beq.n	801430a <f_lseek+0x436>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2201      	movs	r2, #1
 8014304:	755a      	strb	r2, [r3, #21]
 8014306:	2301      	movs	r3, #1
 8014308:	e004      	b.n	8014314 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801430e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014310:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014314:	4618      	mov	r0, r3
 8014316:	3740      	adds	r7, #64	; 0x40
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}

0801431c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b09e      	sub	sp, #120	; 0x78
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8014324:	2300      	movs	r3, #0
 8014326:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014328:	f107 010c 	add.w	r1, r7, #12
 801432c:	1d3b      	adds	r3, r7, #4
 801432e:	2202      	movs	r2, #2
 8014330:	4618      	mov	r0, r3
 8014332:	f7fe fd17 	bl	8012d64 <find_volume>
 8014336:	4603      	mov	r3, r0
 8014338:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8014340:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014344:	2b00      	cmp	r3, #0
 8014346:	f040 80a4 	bne.w	8014492 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014350:	4611      	mov	r1, r2
 8014352:	4618      	mov	r0, r3
 8014354:	f7fe fbd6 	bl	8012b04 <follow_path>
 8014358:	4603      	mov	r3, r0
 801435a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 801435e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014362:	2b00      	cmp	r3, #0
 8014364:	d108      	bne.n	8014378 <f_unlink+0x5c>
 8014366:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801436a:	f003 0320 	and.w	r3, r3, #32
 801436e:	2b00      	cmp	r3, #0
 8014370:	d002      	beq.n	8014378 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8014372:	2306      	movs	r3, #6
 8014374:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014378:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801437c:	2b00      	cmp	r3, #0
 801437e:	d108      	bne.n	8014392 <f_unlink+0x76>
 8014380:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8014384:	2102      	movs	r1, #2
 8014386:	4618      	mov	r0, r3
 8014388:	f7fd fa82 	bl	8011890 <chk_lock>
 801438c:	4603      	mov	r3, r0
 801438e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8014392:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014396:	2b00      	cmp	r3, #0
 8014398:	d17b      	bne.n	8014492 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801439a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801439e:	b25b      	sxtb	r3, r3
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	da03      	bge.n	80143ac <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80143a4:	2306      	movs	r3, #6
 80143a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80143aa:	e008      	b.n	80143be <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 80143ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80143b0:	f003 0301 	and.w	r3, r3, #1
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d002      	beq.n	80143be <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80143b8:	2307      	movs	r3, #7
 80143ba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 80143be:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d13d      	bne.n	8014442 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80143ca:	4611      	mov	r1, r2
 80143cc:	4618      	mov	r0, r3
 80143ce:	f7fe f98e 	bl	80126ee <ld_clust>
 80143d2:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80143d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80143d8:	f003 0310 	and.w	r3, r3, #16
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d030      	beq.n	8014442 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	699b      	ldr	r3, [r3, #24]
 80143e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80143e6:	429a      	cmp	r2, r3
 80143e8:	d103      	bne.n	80143f2 <f_unlink+0xd6>
						res = FR_DENIED;
 80143ea:	2307      	movs	r3, #7
 80143ec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80143f0:	e027      	b.n	8014442 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80143f2:	68fb      	ldr	r3, [r7, #12]
 80143f4:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80143f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80143f8:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80143fa:	f107 0310 	add.w	r3, r7, #16
 80143fe:	2100      	movs	r1, #0
 8014400:	4618      	mov	r0, r3
 8014402:	f7fd ffce 	bl	80123a2 <dir_sdi>
 8014406:	4603      	mov	r3, r0
 8014408:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 801440c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014410:	2b00      	cmp	r3, #0
 8014412:	d116      	bne.n	8014442 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8014414:	f107 0310 	add.w	r3, r7, #16
 8014418:	2100      	movs	r1, #0
 801441a:	4618      	mov	r0, r3
 801441c:	f7fe f9a6 	bl	801276c <dir_read>
 8014420:	4603      	mov	r3, r0
 8014422:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8014426:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801442a:	2b00      	cmp	r3, #0
 801442c:	d102      	bne.n	8014434 <f_unlink+0x118>
 801442e:	2307      	movs	r3, #7
 8014430:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8014434:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014438:	2b04      	cmp	r3, #4
 801443a:	d102      	bne.n	8014442 <f_unlink+0x126>
 801443c:	2300      	movs	r3, #0
 801443e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8014442:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014446:	2b00      	cmp	r3, #0
 8014448:	d123      	bne.n	8014492 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801444a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801444e:	4618      	mov	r0, r3
 8014450:	f7fe fa70 	bl	8012934 <dir_remove>
 8014454:	4603      	mov	r3, r0
 8014456:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 801445a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801445e:	2b00      	cmp	r3, #0
 8014460:	d10c      	bne.n	801447c <f_unlink+0x160>
 8014462:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014464:	2b00      	cmp	r3, #0
 8014466:	d009      	beq.n	801447c <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8014468:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801446c:	2200      	movs	r2, #0
 801446e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8014470:	4618      	mov	r0, r3
 8014472:	f7fd fe61 	bl	8012138 <remove_chain>
 8014476:	4603      	mov	r3, r0
 8014478:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 801447c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014480:	2b00      	cmp	r3, #0
 8014482:	d106      	bne.n	8014492 <f_unlink+0x176>
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	4618      	mov	r0, r3
 8014488:	f7fd fbe0 	bl	8011c4c <sync_fs>
 801448c:	4603      	mov	r3, r0
 801448e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014492:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8014496:	4618      	mov	r0, r3
 8014498:	3778      	adds	r7, #120	; 0x78
 801449a:	46bd      	mov	sp, r7
 801449c:	bd80      	pop	{r7, pc}
	...

080144a0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b096      	sub	sp, #88	; 0x58
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80144a8:	f107 0108 	add.w	r1, r7, #8
 80144ac:	1d3b      	adds	r3, r7, #4
 80144ae:	2202      	movs	r2, #2
 80144b0:	4618      	mov	r0, r3
 80144b2:	f7fe fc57 	bl	8012d64 <find_volume>
 80144b6:	4603      	mov	r3, r0
 80144b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 80144bc:	68bb      	ldr	r3, [r7, #8]
 80144be:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 80144c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f040 80fe 	bne.w	80146c6 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	f107 030c 	add.w	r3, r7, #12
 80144d0:	4611      	mov	r1, r2
 80144d2:	4618      	mov	r0, r3
 80144d4:	f7fe fb16 	bl	8012b04 <follow_path>
 80144d8:	4603      	mov	r3, r0
 80144da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80144de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d102      	bne.n	80144ec <f_mkdir+0x4c>
 80144e6:	2308      	movs	r3, #8
 80144e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80144ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144f0:	2b04      	cmp	r3, #4
 80144f2:	d108      	bne.n	8014506 <f_mkdir+0x66>
 80144f4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80144f8:	f003 0320 	and.w	r3, r3, #32
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d002      	beq.n	8014506 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014500:	2306      	movs	r3, #6
 8014502:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8014506:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801450a:	2b04      	cmp	r3, #4
 801450c:	f040 80db 	bne.w	80146c6 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014510:	f107 030c 	add.w	r3, r7, #12
 8014514:	2100      	movs	r1, #0
 8014516:	4618      	mov	r0, r3
 8014518:	f7fd fe73 	bl	8012202 <create_chain>
 801451c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 801451e:	68bb      	ldr	r3, [r7, #8]
 8014520:	895b      	ldrh	r3, [r3, #10]
 8014522:	461a      	mov	r2, r3
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	899b      	ldrh	r3, [r3, #12]
 8014528:	fb03 f302 	mul.w	r3, r3, r2
 801452c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 801452e:	2300      	movs	r3, #0
 8014530:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8014534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014536:	2b00      	cmp	r3, #0
 8014538:	d102      	bne.n	8014540 <f_mkdir+0xa0>
 801453a:	2307      	movs	r3, #7
 801453c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8014540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014542:	2b01      	cmp	r3, #1
 8014544:	d102      	bne.n	801454c <f_mkdir+0xac>
 8014546:	2302      	movs	r3, #2
 8014548:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 801454c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801454e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014552:	d102      	bne.n	801455a <f_mkdir+0xba>
 8014554:	2301      	movs	r3, #1
 8014556:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801455a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801455e:	2b00      	cmp	r3, #0
 8014560:	d106      	bne.n	8014570 <f_mkdir+0xd0>
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	4618      	mov	r0, r3
 8014566:	f7fd faff 	bl	8011b68 <sync_window>
 801456a:	4603      	mov	r3, r0
 801456c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8014570:	4b58      	ldr	r3, [pc, #352]	; (80146d4 <f_mkdir+0x234>)
 8014572:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8014574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014578:	2b00      	cmp	r3, #0
 801457a:	d16c      	bne.n	8014656 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 801457c:	68bb      	ldr	r3, [r7, #8]
 801457e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014580:	4618      	mov	r0, r3
 8014582:	f7fd fbd3 	bl	8011d2c <clust2sect>
 8014586:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	3338      	adds	r3, #56	; 0x38
 801458c:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	899b      	ldrh	r3, [r3, #12]
 8014592:	461a      	mov	r2, r3
 8014594:	2100      	movs	r1, #0
 8014596:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014598:	f7fd f91d 	bl	80117d6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 801459c:	220b      	movs	r2, #11
 801459e:	2120      	movs	r1, #32
 80145a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80145a2:	f7fd f918 	bl	80117d6 <mem_set>
					dir[DIR_Name] = '.';
 80145a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a8:	222e      	movs	r2, #46	; 0x2e
 80145aa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80145ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ae:	330b      	adds	r3, #11
 80145b0:	2210      	movs	r2, #16
 80145b2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80145b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145b6:	3316      	adds	r3, #22
 80145b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7fd f8be 	bl	801173c <st_dword>
					st_clust(fs, dir, dcl);
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80145c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145c6:	4618      	mov	r0, r3
 80145c8:	f7fe f8b0 	bl	801272c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80145cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ce:	3320      	adds	r3, #32
 80145d0:	2220      	movs	r2, #32
 80145d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80145d4:	4618      	mov	r0, r3
 80145d6:	f7fd f8dd 	bl	8011794 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80145da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145dc:	3321      	adds	r3, #33	; 0x21
 80145de:	222e      	movs	r2, #46	; 0x2e
 80145e0:	701a      	strb	r2, [r3, #0]
 80145e2:	697b      	ldr	r3, [r7, #20]
 80145e4:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80145e6:	68bb      	ldr	r3, [r7, #8]
 80145e8:	781b      	ldrb	r3, [r3, #0]
 80145ea:	2b03      	cmp	r3, #3
 80145ec:	d106      	bne.n	80145fc <f_mkdir+0x15c>
 80145ee:	68bb      	ldr	r3, [r7, #8]
 80145f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145f4:	429a      	cmp	r2, r3
 80145f6:	d101      	bne.n	80145fc <f_mkdir+0x15c>
 80145f8:	2300      	movs	r3, #0
 80145fa:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 80145fc:	68b8      	ldr	r0, [r7, #8]
 80145fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014600:	3320      	adds	r3, #32
 8014602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014604:	4619      	mov	r1, r3
 8014606:	f7fe f891 	bl	801272c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801460a:	68bb      	ldr	r3, [r7, #8]
 801460c:	895b      	ldrh	r3, [r3, #10]
 801460e:	653b      	str	r3, [r7, #80]	; 0x50
 8014610:	e01c      	b.n	801464c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8014612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014614:	1c5a      	adds	r2, r3, #1
 8014616:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014618:	68ba      	ldr	r2, [r7, #8]
 801461a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	2201      	movs	r2, #1
 8014620:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	4618      	mov	r0, r3
 8014626:	f7fd fa9f 	bl	8011b68 <sync_window>
 801462a:	4603      	mov	r3, r0
 801462c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8014630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014634:	2b00      	cmp	r3, #0
 8014636:	d10d      	bne.n	8014654 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	899b      	ldrh	r3, [r3, #12]
 801463c:	461a      	mov	r2, r3
 801463e:	2100      	movs	r1, #0
 8014640:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014642:	f7fd f8c8 	bl	80117d6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014648:	3b01      	subs	r3, #1
 801464a:	653b      	str	r3, [r7, #80]	; 0x50
 801464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801464e:	2b00      	cmp	r3, #0
 8014650:	d1df      	bne.n	8014612 <f_mkdir+0x172>
 8014652:	e000      	b.n	8014656 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8014654:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8014656:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801465a:	2b00      	cmp	r3, #0
 801465c:	d107      	bne.n	801466e <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801465e:	f107 030c 	add.w	r3, r7, #12
 8014662:	4618      	mov	r0, r3
 8014664:	f7fe f934 	bl	80128d0 <dir_register>
 8014668:	4603      	mov	r3, r0
 801466a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 801466e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014672:	2b00      	cmp	r3, #0
 8014674:	d120      	bne.n	80146b8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8014676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014678:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801467c:	3316      	adds	r3, #22
 801467e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014680:	4618      	mov	r0, r3
 8014682:	f7fd f85b 	bl	801173c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801468a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801468c:	4618      	mov	r0, r3
 801468e:	f7fe f84d 	bl	801272c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8014692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014694:	330b      	adds	r3, #11
 8014696:	2210      	movs	r2, #16
 8014698:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801469a:	68bb      	ldr	r3, [r7, #8]
 801469c:	2201      	movs	r2, #1
 801469e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80146a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d10e      	bne.n	80146c6 <f_mkdir+0x226>
					res = sync_fs(fs);
 80146a8:	68bb      	ldr	r3, [r7, #8]
 80146aa:	4618      	mov	r0, r3
 80146ac:	f7fd face 	bl	8011c4c <sync_fs>
 80146b0:	4603      	mov	r3, r0
 80146b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80146b6:	e006      	b.n	80146c6 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80146b8:	f107 030c 	add.w	r3, r7, #12
 80146bc:	2200      	movs	r2, #0
 80146be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fd fd39 	bl	8012138 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80146c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 80146ca:	4618      	mov	r0, r3
 80146cc:	3758      	adds	r7, #88	; 0x58
 80146ce:	46bd      	mov	sp, r7
 80146d0:	bd80      	pop	{r7, pc}
 80146d2:	bf00      	nop
 80146d4:	274a0000 	.word	0x274a0000

080146d8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b088      	sub	sp, #32
 80146dc:	af00      	add	r7, sp, #0
 80146de:	60f8      	str	r0, [r7, #12]
 80146e0:	60b9      	str	r1, [r7, #8]
 80146e2:	607a      	str	r2, [r7, #4]
	int n = 0;
 80146e4:	2300      	movs	r3, #0
 80146e6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80146ec:	e017      	b.n	801471e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80146ee:	f107 0310 	add.w	r3, r7, #16
 80146f2:	f107 0114 	add.w	r1, r7, #20
 80146f6:	2201      	movs	r2, #1
 80146f8:	6878      	ldr	r0, [r7, #4]
 80146fa:	f7ff f803 	bl	8013704 <f_read>
		if (rc != 1) break;
 80146fe:	693b      	ldr	r3, [r7, #16]
 8014700:	2b01      	cmp	r3, #1
 8014702:	d112      	bne.n	801472a <f_gets+0x52>
		c = s[0];
 8014704:	7d3b      	ldrb	r3, [r7, #20]
 8014706:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	1c5a      	adds	r2, r3, #1
 801470c:	61ba      	str	r2, [r7, #24]
 801470e:	7dfa      	ldrb	r2, [r7, #23]
 8014710:	701a      	strb	r2, [r3, #0]
		n++;
 8014712:	69fb      	ldr	r3, [r7, #28]
 8014714:	3301      	adds	r3, #1
 8014716:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014718:	7dfb      	ldrb	r3, [r7, #23]
 801471a:	2b0a      	cmp	r3, #10
 801471c:	d007      	beq.n	801472e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	3b01      	subs	r3, #1
 8014722:	69fa      	ldr	r2, [r7, #28]
 8014724:	429a      	cmp	r2, r3
 8014726:	dbe2      	blt.n	80146ee <f_gets+0x16>
 8014728:	e002      	b.n	8014730 <f_gets+0x58>
		if (rc != 1) break;
 801472a:	bf00      	nop
 801472c:	e000      	b.n	8014730 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801472e:	bf00      	nop
	}
	*p = 0;
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	2200      	movs	r2, #0
 8014734:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d001      	beq.n	8014740 <f_gets+0x68>
 801473c:	68fb      	ldr	r3, [r7, #12]
 801473e:	e000      	b.n	8014742 <f_gets+0x6a>
 8014740:	2300      	movs	r3, #0
}
 8014742:	4618      	mov	r0, r3
 8014744:	3720      	adds	r7, #32
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
	...

0801474c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801474c:	b480      	push	{r7}
 801474e:	b087      	sub	sp, #28
 8014750:	af00      	add	r7, sp, #0
 8014752:	60f8      	str	r0, [r7, #12]
 8014754:	60b9      	str	r1, [r7, #8]
 8014756:	4613      	mov	r3, r2
 8014758:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801475a:	2301      	movs	r3, #1
 801475c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801475e:	2300      	movs	r3, #0
 8014760:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014762:	4b1f      	ldr	r3, [pc, #124]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 8014764:	7a5b      	ldrb	r3, [r3, #9]
 8014766:	b2db      	uxtb	r3, r3
 8014768:	2b00      	cmp	r3, #0
 801476a:	d131      	bne.n	80147d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801476c:	4b1c      	ldr	r3, [pc, #112]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 801476e:	7a5b      	ldrb	r3, [r3, #9]
 8014770:	b2db      	uxtb	r3, r3
 8014772:	461a      	mov	r2, r3
 8014774:	4b1a      	ldr	r3, [pc, #104]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 8014776:	2100      	movs	r1, #0
 8014778:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801477a:	4b19      	ldr	r3, [pc, #100]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 801477c:	7a5b      	ldrb	r3, [r3, #9]
 801477e:	b2db      	uxtb	r3, r3
 8014780:	4a17      	ldr	r2, [pc, #92]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 8014782:	009b      	lsls	r3, r3, #2
 8014784:	4413      	add	r3, r2
 8014786:	68fa      	ldr	r2, [r7, #12]
 8014788:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801478a:	4b15      	ldr	r3, [pc, #84]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 801478c:	7a5b      	ldrb	r3, [r3, #9]
 801478e:	b2db      	uxtb	r3, r3
 8014790:	461a      	mov	r2, r3
 8014792:	4b13      	ldr	r3, [pc, #76]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 8014794:	4413      	add	r3, r2
 8014796:	79fa      	ldrb	r2, [r7, #7]
 8014798:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801479a:	4b11      	ldr	r3, [pc, #68]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 801479c:	7a5b      	ldrb	r3, [r3, #9]
 801479e:	b2db      	uxtb	r3, r3
 80147a0:	1c5a      	adds	r2, r3, #1
 80147a2:	b2d1      	uxtb	r1, r2
 80147a4:	4a0e      	ldr	r2, [pc, #56]	; (80147e0 <FATFS_LinkDriverEx+0x94>)
 80147a6:	7251      	strb	r1, [r2, #9]
 80147a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80147aa:	7dbb      	ldrb	r3, [r7, #22]
 80147ac:	3330      	adds	r3, #48	; 0x30
 80147ae:	b2da      	uxtb	r2, r3
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	3301      	adds	r3, #1
 80147b8:	223a      	movs	r2, #58	; 0x3a
 80147ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80147bc:	68bb      	ldr	r3, [r7, #8]
 80147be:	3302      	adds	r3, #2
 80147c0:	222f      	movs	r2, #47	; 0x2f
 80147c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80147c4:	68bb      	ldr	r3, [r7, #8]
 80147c6:	3303      	adds	r3, #3
 80147c8:	2200      	movs	r2, #0
 80147ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80147cc:	2300      	movs	r3, #0
 80147ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80147d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80147d2:	4618      	mov	r0, r3
 80147d4:	371c      	adds	r7, #28
 80147d6:	46bd      	mov	sp, r7
 80147d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147dc:	4770      	bx	lr
 80147de:	bf00      	nop
 80147e0:	20042474 	.word	0x20042474

080147e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	6078      	str	r0, [r7, #4]
 80147ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80147ee:	2200      	movs	r2, #0
 80147f0:	6839      	ldr	r1, [r7, #0]
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f7ff ffaa 	bl	801474c <FATFS_LinkDriverEx>
 80147f8:	4603      	mov	r3, r0
}
 80147fa:	4618      	mov	r0, r3
 80147fc:	3708      	adds	r7, #8
 80147fe:	46bd      	mov	sp, r7
 8014800:	bd80      	pop	{r7, pc}

08014802 <__cxa_guard_acquire>:
 8014802:	6803      	ldr	r3, [r0, #0]
 8014804:	07db      	lsls	r3, r3, #31
 8014806:	d406      	bmi.n	8014816 <__cxa_guard_acquire+0x14>
 8014808:	7843      	ldrb	r3, [r0, #1]
 801480a:	b103      	cbz	r3, 801480e <__cxa_guard_acquire+0xc>
 801480c:	deff      	udf	#255	; 0xff
 801480e:	2301      	movs	r3, #1
 8014810:	7043      	strb	r3, [r0, #1]
 8014812:	4618      	mov	r0, r3
 8014814:	4770      	bx	lr
 8014816:	2000      	movs	r0, #0
 8014818:	4770      	bx	lr

0801481a <__cxa_guard_release>:
 801481a:	2301      	movs	r3, #1
 801481c:	6003      	str	r3, [r0, #0]
 801481e:	4770      	bx	lr

08014820 <cos>:
 8014820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014822:	ec51 0b10 	vmov	r0, r1, d0
 8014826:	4a1e      	ldr	r2, [pc, #120]	; (80148a0 <cos+0x80>)
 8014828:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801482c:	4293      	cmp	r3, r2
 801482e:	dc06      	bgt.n	801483e <cos+0x1e>
 8014830:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014898 <cos+0x78>
 8014834:	f000 fa74 	bl	8014d20 <__kernel_cos>
 8014838:	ec51 0b10 	vmov	r0, r1, d0
 801483c:	e007      	b.n	801484e <cos+0x2e>
 801483e:	4a19      	ldr	r2, [pc, #100]	; (80148a4 <cos+0x84>)
 8014840:	4293      	cmp	r3, r2
 8014842:	dd09      	ble.n	8014858 <cos+0x38>
 8014844:	ee10 2a10 	vmov	r2, s0
 8014848:	460b      	mov	r3, r1
 801484a:	f7eb fd35 	bl	80002b8 <__aeabi_dsub>
 801484e:	ec41 0b10 	vmov	d0, r0, r1
 8014852:	b005      	add	sp, #20
 8014854:	f85d fb04 	ldr.w	pc, [sp], #4
 8014858:	4668      	mov	r0, sp
 801485a:	f000 f86d 	bl	8014938 <__ieee754_rem_pio2>
 801485e:	f000 0003 	and.w	r0, r0, #3
 8014862:	2801      	cmp	r0, #1
 8014864:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014868:	ed9d 0b00 	vldr	d0, [sp]
 801486c:	d007      	beq.n	801487e <cos+0x5e>
 801486e:	2802      	cmp	r0, #2
 8014870:	d00e      	beq.n	8014890 <cos+0x70>
 8014872:	2800      	cmp	r0, #0
 8014874:	d0de      	beq.n	8014834 <cos+0x14>
 8014876:	2001      	movs	r0, #1
 8014878:	f000 fe5a 	bl	8015530 <__kernel_sin>
 801487c:	e7dc      	b.n	8014838 <cos+0x18>
 801487e:	f000 fe57 	bl	8015530 <__kernel_sin>
 8014882:	ec53 2b10 	vmov	r2, r3, d0
 8014886:	ee10 0a10 	vmov	r0, s0
 801488a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801488e:	e7de      	b.n	801484e <cos+0x2e>
 8014890:	f000 fa46 	bl	8014d20 <__kernel_cos>
 8014894:	e7f5      	b.n	8014882 <cos+0x62>
 8014896:	bf00      	nop
	...
 80148a0:	3fe921fb 	.word	0x3fe921fb
 80148a4:	7fefffff 	.word	0x7fefffff

080148a8 <sin>:
 80148a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148aa:	ec51 0b10 	vmov	r0, r1, d0
 80148ae:	4a20      	ldr	r2, [pc, #128]	; (8014930 <sin+0x88>)
 80148b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148b4:	4293      	cmp	r3, r2
 80148b6:	dc07      	bgt.n	80148c8 <sin+0x20>
 80148b8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014928 <sin+0x80>
 80148bc:	2000      	movs	r0, #0
 80148be:	f000 fe37 	bl	8015530 <__kernel_sin>
 80148c2:	ec51 0b10 	vmov	r0, r1, d0
 80148c6:	e007      	b.n	80148d8 <sin+0x30>
 80148c8:	4a1a      	ldr	r2, [pc, #104]	; (8014934 <sin+0x8c>)
 80148ca:	4293      	cmp	r3, r2
 80148cc:	dd09      	ble.n	80148e2 <sin+0x3a>
 80148ce:	ee10 2a10 	vmov	r2, s0
 80148d2:	460b      	mov	r3, r1
 80148d4:	f7eb fcf0 	bl	80002b8 <__aeabi_dsub>
 80148d8:	ec41 0b10 	vmov	d0, r0, r1
 80148dc:	b005      	add	sp, #20
 80148de:	f85d fb04 	ldr.w	pc, [sp], #4
 80148e2:	4668      	mov	r0, sp
 80148e4:	f000 f828 	bl	8014938 <__ieee754_rem_pio2>
 80148e8:	f000 0003 	and.w	r0, r0, #3
 80148ec:	2801      	cmp	r0, #1
 80148ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80148f2:	ed9d 0b00 	vldr	d0, [sp]
 80148f6:	d004      	beq.n	8014902 <sin+0x5a>
 80148f8:	2802      	cmp	r0, #2
 80148fa:	d005      	beq.n	8014908 <sin+0x60>
 80148fc:	b970      	cbnz	r0, 801491c <sin+0x74>
 80148fe:	2001      	movs	r0, #1
 8014900:	e7dd      	b.n	80148be <sin+0x16>
 8014902:	f000 fa0d 	bl	8014d20 <__kernel_cos>
 8014906:	e7dc      	b.n	80148c2 <sin+0x1a>
 8014908:	2001      	movs	r0, #1
 801490a:	f000 fe11 	bl	8015530 <__kernel_sin>
 801490e:	ec53 2b10 	vmov	r2, r3, d0
 8014912:	ee10 0a10 	vmov	r0, s0
 8014916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801491a:	e7dd      	b.n	80148d8 <sin+0x30>
 801491c:	f000 fa00 	bl	8014d20 <__kernel_cos>
 8014920:	e7f5      	b.n	801490e <sin+0x66>
 8014922:	bf00      	nop
 8014924:	f3af 8000 	nop.w
	...
 8014930:	3fe921fb 	.word	0x3fe921fb
 8014934:	7fefffff 	.word	0x7fefffff

08014938 <__ieee754_rem_pio2>:
 8014938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	ec57 6b10 	vmov	r6, r7, d0
 8014940:	4bc3      	ldr	r3, [pc, #780]	; (8014c50 <__ieee754_rem_pio2+0x318>)
 8014942:	b08d      	sub	sp, #52	; 0x34
 8014944:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014948:	4598      	cmp	r8, r3
 801494a:	4604      	mov	r4, r0
 801494c:	9704      	str	r7, [sp, #16]
 801494e:	dc07      	bgt.n	8014960 <__ieee754_rem_pio2+0x28>
 8014950:	2200      	movs	r2, #0
 8014952:	2300      	movs	r3, #0
 8014954:	ed84 0b00 	vstr	d0, [r4]
 8014958:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801495c:	2500      	movs	r5, #0
 801495e:	e027      	b.n	80149b0 <__ieee754_rem_pio2+0x78>
 8014960:	4bbc      	ldr	r3, [pc, #752]	; (8014c54 <__ieee754_rem_pio2+0x31c>)
 8014962:	4598      	cmp	r8, r3
 8014964:	dc75      	bgt.n	8014a52 <__ieee754_rem_pio2+0x11a>
 8014966:	9b04      	ldr	r3, [sp, #16]
 8014968:	4dbb      	ldr	r5, [pc, #748]	; (8014c58 <__ieee754_rem_pio2+0x320>)
 801496a:	2b00      	cmp	r3, #0
 801496c:	ee10 0a10 	vmov	r0, s0
 8014970:	a3a9      	add	r3, pc, #676	; (adr r3, 8014c18 <__ieee754_rem_pio2+0x2e0>)
 8014972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014976:	4639      	mov	r1, r7
 8014978:	dd36      	ble.n	80149e8 <__ieee754_rem_pio2+0xb0>
 801497a:	f7eb fc9d 	bl	80002b8 <__aeabi_dsub>
 801497e:	45a8      	cmp	r8, r5
 8014980:	4606      	mov	r6, r0
 8014982:	460f      	mov	r7, r1
 8014984:	d018      	beq.n	80149b8 <__ieee754_rem_pio2+0x80>
 8014986:	a3a6      	add	r3, pc, #664	; (adr r3, 8014c20 <__ieee754_rem_pio2+0x2e8>)
 8014988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801498c:	f7eb fc94 	bl	80002b8 <__aeabi_dsub>
 8014990:	4602      	mov	r2, r0
 8014992:	460b      	mov	r3, r1
 8014994:	e9c4 2300 	strd	r2, r3, [r4]
 8014998:	4630      	mov	r0, r6
 801499a:	4639      	mov	r1, r7
 801499c:	f7eb fc8c 	bl	80002b8 <__aeabi_dsub>
 80149a0:	a39f      	add	r3, pc, #636	; (adr r3, 8014c20 <__ieee754_rem_pio2+0x2e8>)
 80149a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a6:	f7eb fc87 	bl	80002b8 <__aeabi_dsub>
 80149aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80149ae:	2501      	movs	r5, #1
 80149b0:	4628      	mov	r0, r5
 80149b2:	b00d      	add	sp, #52	; 0x34
 80149b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149b8:	a39b      	add	r3, pc, #620	; (adr r3, 8014c28 <__ieee754_rem_pio2+0x2f0>)
 80149ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149be:	f7eb fc7b 	bl	80002b8 <__aeabi_dsub>
 80149c2:	a39b      	add	r3, pc, #620	; (adr r3, 8014c30 <__ieee754_rem_pio2+0x2f8>)
 80149c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c8:	4606      	mov	r6, r0
 80149ca:	460f      	mov	r7, r1
 80149cc:	f7eb fc74 	bl	80002b8 <__aeabi_dsub>
 80149d0:	4602      	mov	r2, r0
 80149d2:	460b      	mov	r3, r1
 80149d4:	e9c4 2300 	strd	r2, r3, [r4]
 80149d8:	4630      	mov	r0, r6
 80149da:	4639      	mov	r1, r7
 80149dc:	f7eb fc6c 	bl	80002b8 <__aeabi_dsub>
 80149e0:	a393      	add	r3, pc, #588	; (adr r3, 8014c30 <__ieee754_rem_pio2+0x2f8>)
 80149e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149e6:	e7de      	b.n	80149a6 <__ieee754_rem_pio2+0x6e>
 80149e8:	f7eb fc68 	bl	80002bc <__adddf3>
 80149ec:	45a8      	cmp	r8, r5
 80149ee:	4606      	mov	r6, r0
 80149f0:	460f      	mov	r7, r1
 80149f2:	d016      	beq.n	8014a22 <__ieee754_rem_pio2+0xea>
 80149f4:	a38a      	add	r3, pc, #552	; (adr r3, 8014c20 <__ieee754_rem_pio2+0x2e8>)
 80149f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fa:	f7eb fc5f 	bl	80002bc <__adddf3>
 80149fe:	4602      	mov	r2, r0
 8014a00:	460b      	mov	r3, r1
 8014a02:	e9c4 2300 	strd	r2, r3, [r4]
 8014a06:	4630      	mov	r0, r6
 8014a08:	4639      	mov	r1, r7
 8014a0a:	f7eb fc55 	bl	80002b8 <__aeabi_dsub>
 8014a0e:	a384      	add	r3, pc, #528	; (adr r3, 8014c20 <__ieee754_rem_pio2+0x2e8>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	f7eb fc52 	bl	80002bc <__adddf3>
 8014a18:	f04f 35ff 	mov.w	r5, #4294967295
 8014a1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a20:	e7c6      	b.n	80149b0 <__ieee754_rem_pio2+0x78>
 8014a22:	a381      	add	r3, pc, #516	; (adr r3, 8014c28 <__ieee754_rem_pio2+0x2f0>)
 8014a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a28:	f7eb fc48 	bl	80002bc <__adddf3>
 8014a2c:	a380      	add	r3, pc, #512	; (adr r3, 8014c30 <__ieee754_rem_pio2+0x2f8>)
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	4606      	mov	r6, r0
 8014a34:	460f      	mov	r7, r1
 8014a36:	f7eb fc41 	bl	80002bc <__adddf3>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	460b      	mov	r3, r1
 8014a3e:	e9c4 2300 	strd	r2, r3, [r4]
 8014a42:	4630      	mov	r0, r6
 8014a44:	4639      	mov	r1, r7
 8014a46:	f7eb fc37 	bl	80002b8 <__aeabi_dsub>
 8014a4a:	a379      	add	r3, pc, #484	; (adr r3, 8014c30 <__ieee754_rem_pio2+0x2f8>)
 8014a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a50:	e7e0      	b.n	8014a14 <__ieee754_rem_pio2+0xdc>
 8014a52:	4b82      	ldr	r3, [pc, #520]	; (8014c5c <__ieee754_rem_pio2+0x324>)
 8014a54:	4598      	cmp	r8, r3
 8014a56:	f300 80d0 	bgt.w	8014bfa <__ieee754_rem_pio2+0x2c2>
 8014a5a:	f000 fe23 	bl	80156a4 <fabs>
 8014a5e:	ec57 6b10 	vmov	r6, r7, d0
 8014a62:	ee10 0a10 	vmov	r0, s0
 8014a66:	a374      	add	r3, pc, #464	; (adr r3, 8014c38 <__ieee754_rem_pio2+0x300>)
 8014a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a6c:	4639      	mov	r1, r7
 8014a6e:	f7eb fddb 	bl	8000628 <__aeabi_dmul>
 8014a72:	2200      	movs	r2, #0
 8014a74:	4b7a      	ldr	r3, [pc, #488]	; (8014c60 <__ieee754_rem_pio2+0x328>)
 8014a76:	f7eb fc21 	bl	80002bc <__adddf3>
 8014a7a:	f7ec f885 	bl	8000b88 <__aeabi_d2iz>
 8014a7e:	4605      	mov	r5, r0
 8014a80:	f7eb fd68 	bl	8000554 <__aeabi_i2d>
 8014a84:	a364      	add	r3, pc, #400	; (adr r3, 8014c18 <__ieee754_rem_pio2+0x2e0>)
 8014a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a8e:	f7eb fdcb 	bl	8000628 <__aeabi_dmul>
 8014a92:	4602      	mov	r2, r0
 8014a94:	460b      	mov	r3, r1
 8014a96:	4630      	mov	r0, r6
 8014a98:	4639      	mov	r1, r7
 8014a9a:	f7eb fc0d 	bl	80002b8 <__aeabi_dsub>
 8014a9e:	a360      	add	r3, pc, #384	; (adr r3, 8014c20 <__ieee754_rem_pio2+0x2e8>)
 8014aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aa4:	4682      	mov	sl, r0
 8014aa6:	468b      	mov	fp, r1
 8014aa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014aac:	f7eb fdbc 	bl	8000628 <__aeabi_dmul>
 8014ab0:	2d1f      	cmp	r5, #31
 8014ab2:	4606      	mov	r6, r0
 8014ab4:	460f      	mov	r7, r1
 8014ab6:	dc0c      	bgt.n	8014ad2 <__ieee754_rem_pio2+0x19a>
 8014ab8:	1e6a      	subs	r2, r5, #1
 8014aba:	4b6a      	ldr	r3, [pc, #424]	; (8014c64 <__ieee754_rem_pio2+0x32c>)
 8014abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ac0:	4543      	cmp	r3, r8
 8014ac2:	d006      	beq.n	8014ad2 <__ieee754_rem_pio2+0x19a>
 8014ac4:	4632      	mov	r2, r6
 8014ac6:	463b      	mov	r3, r7
 8014ac8:	4650      	mov	r0, sl
 8014aca:	4659      	mov	r1, fp
 8014acc:	f7eb fbf4 	bl	80002b8 <__aeabi_dsub>
 8014ad0:	e00e      	b.n	8014af0 <__ieee754_rem_pio2+0x1b8>
 8014ad2:	4632      	mov	r2, r6
 8014ad4:	463b      	mov	r3, r7
 8014ad6:	4650      	mov	r0, sl
 8014ad8:	4659      	mov	r1, fp
 8014ada:	f7eb fbed 	bl	80002b8 <__aeabi_dsub>
 8014ade:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014ae2:	9305      	str	r3, [sp, #20]
 8014ae4:	9a05      	ldr	r2, [sp, #20]
 8014ae6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	2b10      	cmp	r3, #16
 8014aee:	dc02      	bgt.n	8014af6 <__ieee754_rem_pio2+0x1be>
 8014af0:	e9c4 0100 	strd	r0, r1, [r4]
 8014af4:	e039      	b.n	8014b6a <__ieee754_rem_pio2+0x232>
 8014af6:	a34c      	add	r3, pc, #304	; (adr r3, 8014c28 <__ieee754_rem_pio2+0x2f0>)
 8014af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b00:	f7eb fd92 	bl	8000628 <__aeabi_dmul>
 8014b04:	4606      	mov	r6, r0
 8014b06:	460f      	mov	r7, r1
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	4650      	mov	r0, sl
 8014b0e:	4659      	mov	r1, fp
 8014b10:	f7eb fbd2 	bl	80002b8 <__aeabi_dsub>
 8014b14:	4602      	mov	r2, r0
 8014b16:	460b      	mov	r3, r1
 8014b18:	4680      	mov	r8, r0
 8014b1a:	4689      	mov	r9, r1
 8014b1c:	4650      	mov	r0, sl
 8014b1e:	4659      	mov	r1, fp
 8014b20:	f7eb fbca 	bl	80002b8 <__aeabi_dsub>
 8014b24:	4632      	mov	r2, r6
 8014b26:	463b      	mov	r3, r7
 8014b28:	f7eb fbc6 	bl	80002b8 <__aeabi_dsub>
 8014b2c:	a340      	add	r3, pc, #256	; (adr r3, 8014c30 <__ieee754_rem_pio2+0x2f8>)
 8014b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b32:	4606      	mov	r6, r0
 8014b34:	460f      	mov	r7, r1
 8014b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014b3a:	f7eb fd75 	bl	8000628 <__aeabi_dmul>
 8014b3e:	4632      	mov	r2, r6
 8014b40:	463b      	mov	r3, r7
 8014b42:	f7eb fbb9 	bl	80002b8 <__aeabi_dsub>
 8014b46:	4602      	mov	r2, r0
 8014b48:	460b      	mov	r3, r1
 8014b4a:	4606      	mov	r6, r0
 8014b4c:	460f      	mov	r7, r1
 8014b4e:	4640      	mov	r0, r8
 8014b50:	4649      	mov	r1, r9
 8014b52:	f7eb fbb1 	bl	80002b8 <__aeabi_dsub>
 8014b56:	9a05      	ldr	r2, [sp, #20]
 8014b58:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014b5c:	1ad3      	subs	r3, r2, r3
 8014b5e:	2b31      	cmp	r3, #49	; 0x31
 8014b60:	dc20      	bgt.n	8014ba4 <__ieee754_rem_pio2+0x26c>
 8014b62:	e9c4 0100 	strd	r0, r1, [r4]
 8014b66:	46c2      	mov	sl, r8
 8014b68:	46cb      	mov	fp, r9
 8014b6a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014b6e:	4650      	mov	r0, sl
 8014b70:	4642      	mov	r2, r8
 8014b72:	464b      	mov	r3, r9
 8014b74:	4659      	mov	r1, fp
 8014b76:	f7eb fb9f 	bl	80002b8 <__aeabi_dsub>
 8014b7a:	463b      	mov	r3, r7
 8014b7c:	4632      	mov	r2, r6
 8014b7e:	f7eb fb9b 	bl	80002b8 <__aeabi_dsub>
 8014b82:	9b04      	ldr	r3, [sp, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014b8a:	f6bf af11 	bge.w	80149b0 <__ieee754_rem_pio2+0x78>
 8014b8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014b92:	6063      	str	r3, [r4, #4]
 8014b94:	f8c4 8000 	str.w	r8, [r4]
 8014b98:	60a0      	str	r0, [r4, #8]
 8014b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014b9e:	60e3      	str	r3, [r4, #12]
 8014ba0:	426d      	negs	r5, r5
 8014ba2:	e705      	b.n	80149b0 <__ieee754_rem_pio2+0x78>
 8014ba4:	a326      	add	r3, pc, #152	; (adr r3, 8014c40 <__ieee754_rem_pio2+0x308>)
 8014ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014baa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014bae:	f7eb fd3b 	bl	8000628 <__aeabi_dmul>
 8014bb2:	4606      	mov	r6, r0
 8014bb4:	460f      	mov	r7, r1
 8014bb6:	4602      	mov	r2, r0
 8014bb8:	460b      	mov	r3, r1
 8014bba:	4640      	mov	r0, r8
 8014bbc:	4649      	mov	r1, r9
 8014bbe:	f7eb fb7b 	bl	80002b8 <__aeabi_dsub>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	4682      	mov	sl, r0
 8014bc8:	468b      	mov	fp, r1
 8014bca:	4640      	mov	r0, r8
 8014bcc:	4649      	mov	r1, r9
 8014bce:	f7eb fb73 	bl	80002b8 <__aeabi_dsub>
 8014bd2:	4632      	mov	r2, r6
 8014bd4:	463b      	mov	r3, r7
 8014bd6:	f7eb fb6f 	bl	80002b8 <__aeabi_dsub>
 8014bda:	a31b      	add	r3, pc, #108	; (adr r3, 8014c48 <__ieee754_rem_pio2+0x310>)
 8014bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be0:	4606      	mov	r6, r0
 8014be2:	460f      	mov	r7, r1
 8014be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014be8:	f7eb fd1e 	bl	8000628 <__aeabi_dmul>
 8014bec:	4632      	mov	r2, r6
 8014bee:	463b      	mov	r3, r7
 8014bf0:	f7eb fb62 	bl	80002b8 <__aeabi_dsub>
 8014bf4:	4606      	mov	r6, r0
 8014bf6:	460f      	mov	r7, r1
 8014bf8:	e764      	b.n	8014ac4 <__ieee754_rem_pio2+0x18c>
 8014bfa:	4b1b      	ldr	r3, [pc, #108]	; (8014c68 <__ieee754_rem_pio2+0x330>)
 8014bfc:	4598      	cmp	r8, r3
 8014bfe:	dd35      	ble.n	8014c6c <__ieee754_rem_pio2+0x334>
 8014c00:	ee10 2a10 	vmov	r2, s0
 8014c04:	463b      	mov	r3, r7
 8014c06:	4630      	mov	r0, r6
 8014c08:	4639      	mov	r1, r7
 8014c0a:	f7eb fb55 	bl	80002b8 <__aeabi_dsub>
 8014c0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014c12:	e9c4 0100 	strd	r0, r1, [r4]
 8014c16:	e6a1      	b.n	801495c <__ieee754_rem_pio2+0x24>
 8014c18:	54400000 	.word	0x54400000
 8014c1c:	3ff921fb 	.word	0x3ff921fb
 8014c20:	1a626331 	.word	0x1a626331
 8014c24:	3dd0b461 	.word	0x3dd0b461
 8014c28:	1a600000 	.word	0x1a600000
 8014c2c:	3dd0b461 	.word	0x3dd0b461
 8014c30:	2e037073 	.word	0x2e037073
 8014c34:	3ba3198a 	.word	0x3ba3198a
 8014c38:	6dc9c883 	.word	0x6dc9c883
 8014c3c:	3fe45f30 	.word	0x3fe45f30
 8014c40:	2e000000 	.word	0x2e000000
 8014c44:	3ba3198a 	.word	0x3ba3198a
 8014c48:	252049c1 	.word	0x252049c1
 8014c4c:	397b839a 	.word	0x397b839a
 8014c50:	3fe921fb 	.word	0x3fe921fb
 8014c54:	4002d97b 	.word	0x4002d97b
 8014c58:	3ff921fb 	.word	0x3ff921fb
 8014c5c:	413921fb 	.word	0x413921fb
 8014c60:	3fe00000 	.word	0x3fe00000
 8014c64:	0801a1dc 	.word	0x0801a1dc
 8014c68:	7fefffff 	.word	0x7fefffff
 8014c6c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014c70:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014c74:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014c78:	4630      	mov	r0, r6
 8014c7a:	460f      	mov	r7, r1
 8014c7c:	f7eb ff84 	bl	8000b88 <__aeabi_d2iz>
 8014c80:	f7eb fc68 	bl	8000554 <__aeabi_i2d>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	4630      	mov	r0, r6
 8014c8a:	4639      	mov	r1, r7
 8014c8c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c90:	f7eb fb12 	bl	80002b8 <__aeabi_dsub>
 8014c94:	2200      	movs	r2, #0
 8014c96:	4b1f      	ldr	r3, [pc, #124]	; (8014d14 <__ieee754_rem_pio2+0x3dc>)
 8014c98:	f7eb fcc6 	bl	8000628 <__aeabi_dmul>
 8014c9c:	460f      	mov	r7, r1
 8014c9e:	4606      	mov	r6, r0
 8014ca0:	f7eb ff72 	bl	8000b88 <__aeabi_d2iz>
 8014ca4:	f7eb fc56 	bl	8000554 <__aeabi_i2d>
 8014ca8:	4602      	mov	r2, r0
 8014caa:	460b      	mov	r3, r1
 8014cac:	4630      	mov	r0, r6
 8014cae:	4639      	mov	r1, r7
 8014cb0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014cb4:	f7eb fb00 	bl	80002b8 <__aeabi_dsub>
 8014cb8:	2200      	movs	r2, #0
 8014cba:	4b16      	ldr	r3, [pc, #88]	; (8014d14 <__ieee754_rem_pio2+0x3dc>)
 8014cbc:	f7eb fcb4 	bl	8000628 <__aeabi_dmul>
 8014cc0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014cc4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014cc8:	f04f 0803 	mov.w	r8, #3
 8014ccc:	2600      	movs	r6, #0
 8014cce:	2700      	movs	r7, #0
 8014cd0:	4632      	mov	r2, r6
 8014cd2:	463b      	mov	r3, r7
 8014cd4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8014cdc:	f7eb ff0c 	bl	8000af8 <__aeabi_dcmpeq>
 8014ce0:	b9b0      	cbnz	r0, 8014d10 <__ieee754_rem_pio2+0x3d8>
 8014ce2:	4b0d      	ldr	r3, [pc, #52]	; (8014d18 <__ieee754_rem_pio2+0x3e0>)
 8014ce4:	9301      	str	r3, [sp, #4]
 8014ce6:	2302      	movs	r3, #2
 8014ce8:	9300      	str	r3, [sp, #0]
 8014cea:	462a      	mov	r2, r5
 8014cec:	4643      	mov	r3, r8
 8014cee:	4621      	mov	r1, r4
 8014cf0:	a806      	add	r0, sp, #24
 8014cf2:	f000 f8dd 	bl	8014eb0 <__kernel_rem_pio2>
 8014cf6:	9b04      	ldr	r3, [sp, #16]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	4605      	mov	r5, r0
 8014cfc:	f6bf ae58 	bge.w	80149b0 <__ieee754_rem_pio2+0x78>
 8014d00:	6863      	ldr	r3, [r4, #4]
 8014d02:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014d06:	6063      	str	r3, [r4, #4]
 8014d08:	68e3      	ldr	r3, [r4, #12]
 8014d0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014d0e:	e746      	b.n	8014b9e <__ieee754_rem_pio2+0x266>
 8014d10:	46d0      	mov	r8, sl
 8014d12:	e7dd      	b.n	8014cd0 <__ieee754_rem_pio2+0x398>
 8014d14:	41700000 	.word	0x41700000
 8014d18:	0801a25c 	.word	0x0801a25c
 8014d1c:	00000000 	.word	0x00000000

08014d20 <__kernel_cos>:
 8014d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d24:	ec59 8b10 	vmov	r8, r9, d0
 8014d28:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014d2c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014d30:	ed2d 8b02 	vpush	{d8}
 8014d34:	eeb0 8a41 	vmov.f32	s16, s2
 8014d38:	eef0 8a61 	vmov.f32	s17, s3
 8014d3c:	da07      	bge.n	8014d4e <__kernel_cos+0x2e>
 8014d3e:	ee10 0a10 	vmov	r0, s0
 8014d42:	4649      	mov	r1, r9
 8014d44:	f7eb ff20 	bl	8000b88 <__aeabi_d2iz>
 8014d48:	2800      	cmp	r0, #0
 8014d4a:	f000 8089 	beq.w	8014e60 <__kernel_cos+0x140>
 8014d4e:	4642      	mov	r2, r8
 8014d50:	464b      	mov	r3, r9
 8014d52:	4640      	mov	r0, r8
 8014d54:	4649      	mov	r1, r9
 8014d56:	f7eb fc67 	bl	8000628 <__aeabi_dmul>
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	4b4e      	ldr	r3, [pc, #312]	; (8014e98 <__kernel_cos+0x178>)
 8014d5e:	4604      	mov	r4, r0
 8014d60:	460d      	mov	r5, r1
 8014d62:	f7eb fc61 	bl	8000628 <__aeabi_dmul>
 8014d66:	a340      	add	r3, pc, #256	; (adr r3, 8014e68 <__kernel_cos+0x148>)
 8014d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6c:	4682      	mov	sl, r0
 8014d6e:	468b      	mov	fp, r1
 8014d70:	4620      	mov	r0, r4
 8014d72:	4629      	mov	r1, r5
 8014d74:	f7eb fc58 	bl	8000628 <__aeabi_dmul>
 8014d78:	a33d      	add	r3, pc, #244	; (adr r3, 8014e70 <__kernel_cos+0x150>)
 8014d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7e:	f7eb fa9d 	bl	80002bc <__adddf3>
 8014d82:	4622      	mov	r2, r4
 8014d84:	462b      	mov	r3, r5
 8014d86:	f7eb fc4f 	bl	8000628 <__aeabi_dmul>
 8014d8a:	a33b      	add	r3, pc, #236	; (adr r3, 8014e78 <__kernel_cos+0x158>)
 8014d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d90:	f7eb fa92 	bl	80002b8 <__aeabi_dsub>
 8014d94:	4622      	mov	r2, r4
 8014d96:	462b      	mov	r3, r5
 8014d98:	f7eb fc46 	bl	8000628 <__aeabi_dmul>
 8014d9c:	a338      	add	r3, pc, #224	; (adr r3, 8014e80 <__kernel_cos+0x160>)
 8014d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da2:	f7eb fa8b 	bl	80002bc <__adddf3>
 8014da6:	4622      	mov	r2, r4
 8014da8:	462b      	mov	r3, r5
 8014daa:	f7eb fc3d 	bl	8000628 <__aeabi_dmul>
 8014dae:	a336      	add	r3, pc, #216	; (adr r3, 8014e88 <__kernel_cos+0x168>)
 8014db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db4:	f7eb fa80 	bl	80002b8 <__aeabi_dsub>
 8014db8:	4622      	mov	r2, r4
 8014dba:	462b      	mov	r3, r5
 8014dbc:	f7eb fc34 	bl	8000628 <__aeabi_dmul>
 8014dc0:	a333      	add	r3, pc, #204	; (adr r3, 8014e90 <__kernel_cos+0x170>)
 8014dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dc6:	f7eb fa79 	bl	80002bc <__adddf3>
 8014dca:	4622      	mov	r2, r4
 8014dcc:	462b      	mov	r3, r5
 8014dce:	f7eb fc2b 	bl	8000628 <__aeabi_dmul>
 8014dd2:	4622      	mov	r2, r4
 8014dd4:	462b      	mov	r3, r5
 8014dd6:	f7eb fc27 	bl	8000628 <__aeabi_dmul>
 8014dda:	ec53 2b18 	vmov	r2, r3, d8
 8014dde:	4604      	mov	r4, r0
 8014de0:	460d      	mov	r5, r1
 8014de2:	4640      	mov	r0, r8
 8014de4:	4649      	mov	r1, r9
 8014de6:	f7eb fc1f 	bl	8000628 <__aeabi_dmul>
 8014dea:	460b      	mov	r3, r1
 8014dec:	4602      	mov	r2, r0
 8014dee:	4629      	mov	r1, r5
 8014df0:	4620      	mov	r0, r4
 8014df2:	f7eb fa61 	bl	80002b8 <__aeabi_dsub>
 8014df6:	4b29      	ldr	r3, [pc, #164]	; (8014e9c <__kernel_cos+0x17c>)
 8014df8:	429e      	cmp	r6, r3
 8014dfa:	4680      	mov	r8, r0
 8014dfc:	4689      	mov	r9, r1
 8014dfe:	dc11      	bgt.n	8014e24 <__kernel_cos+0x104>
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	4650      	mov	r0, sl
 8014e06:	4659      	mov	r1, fp
 8014e08:	f7eb fa56 	bl	80002b8 <__aeabi_dsub>
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	4924      	ldr	r1, [pc, #144]	; (8014ea0 <__kernel_cos+0x180>)
 8014e10:	4602      	mov	r2, r0
 8014e12:	2000      	movs	r0, #0
 8014e14:	f7eb fa50 	bl	80002b8 <__aeabi_dsub>
 8014e18:	ecbd 8b02 	vpop	{d8}
 8014e1c:	ec41 0b10 	vmov	d0, r0, r1
 8014e20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e24:	4b1f      	ldr	r3, [pc, #124]	; (8014ea4 <__kernel_cos+0x184>)
 8014e26:	491e      	ldr	r1, [pc, #120]	; (8014ea0 <__kernel_cos+0x180>)
 8014e28:	429e      	cmp	r6, r3
 8014e2a:	bfcc      	ite	gt
 8014e2c:	4d1e      	ldrgt	r5, [pc, #120]	; (8014ea8 <__kernel_cos+0x188>)
 8014e2e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014e32:	2400      	movs	r4, #0
 8014e34:	4622      	mov	r2, r4
 8014e36:	462b      	mov	r3, r5
 8014e38:	2000      	movs	r0, #0
 8014e3a:	f7eb fa3d 	bl	80002b8 <__aeabi_dsub>
 8014e3e:	4622      	mov	r2, r4
 8014e40:	4606      	mov	r6, r0
 8014e42:	460f      	mov	r7, r1
 8014e44:	462b      	mov	r3, r5
 8014e46:	4650      	mov	r0, sl
 8014e48:	4659      	mov	r1, fp
 8014e4a:	f7eb fa35 	bl	80002b8 <__aeabi_dsub>
 8014e4e:	4642      	mov	r2, r8
 8014e50:	464b      	mov	r3, r9
 8014e52:	f7eb fa31 	bl	80002b8 <__aeabi_dsub>
 8014e56:	4602      	mov	r2, r0
 8014e58:	460b      	mov	r3, r1
 8014e5a:	4630      	mov	r0, r6
 8014e5c:	4639      	mov	r1, r7
 8014e5e:	e7d9      	b.n	8014e14 <__kernel_cos+0xf4>
 8014e60:	2000      	movs	r0, #0
 8014e62:	490f      	ldr	r1, [pc, #60]	; (8014ea0 <__kernel_cos+0x180>)
 8014e64:	e7d8      	b.n	8014e18 <__kernel_cos+0xf8>
 8014e66:	bf00      	nop
 8014e68:	be8838d4 	.word	0xbe8838d4
 8014e6c:	bda8fae9 	.word	0xbda8fae9
 8014e70:	bdb4b1c4 	.word	0xbdb4b1c4
 8014e74:	3e21ee9e 	.word	0x3e21ee9e
 8014e78:	809c52ad 	.word	0x809c52ad
 8014e7c:	3e927e4f 	.word	0x3e927e4f
 8014e80:	19cb1590 	.word	0x19cb1590
 8014e84:	3efa01a0 	.word	0x3efa01a0
 8014e88:	16c15177 	.word	0x16c15177
 8014e8c:	3f56c16c 	.word	0x3f56c16c
 8014e90:	5555554c 	.word	0x5555554c
 8014e94:	3fa55555 	.word	0x3fa55555
 8014e98:	3fe00000 	.word	0x3fe00000
 8014e9c:	3fd33332 	.word	0x3fd33332
 8014ea0:	3ff00000 	.word	0x3ff00000
 8014ea4:	3fe90000 	.word	0x3fe90000
 8014ea8:	3fd20000 	.word	0x3fd20000
 8014eac:	00000000 	.word	0x00000000

08014eb0 <__kernel_rem_pio2>:
 8014eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb4:	ed2d 8b02 	vpush	{d8}
 8014eb8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014ebc:	1ed4      	subs	r4, r2, #3
 8014ebe:	9308      	str	r3, [sp, #32]
 8014ec0:	9101      	str	r1, [sp, #4]
 8014ec2:	4bc5      	ldr	r3, [pc, #788]	; (80151d8 <__kernel_rem_pio2+0x328>)
 8014ec4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014ec6:	9009      	str	r0, [sp, #36]	; 0x24
 8014ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014ecc:	9304      	str	r3, [sp, #16]
 8014ece:	9b08      	ldr	r3, [sp, #32]
 8014ed0:	3b01      	subs	r3, #1
 8014ed2:	9307      	str	r3, [sp, #28]
 8014ed4:	2318      	movs	r3, #24
 8014ed6:	fb94 f4f3 	sdiv	r4, r4, r3
 8014eda:	f06f 0317 	mvn.w	r3, #23
 8014ede:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014ee2:	fb04 3303 	mla	r3, r4, r3, r3
 8014ee6:	eb03 0a02 	add.w	sl, r3, r2
 8014eea:	9b04      	ldr	r3, [sp, #16]
 8014eec:	9a07      	ldr	r2, [sp, #28]
 8014eee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80151c8 <__kernel_rem_pio2+0x318>
 8014ef2:	eb03 0802 	add.w	r8, r3, r2
 8014ef6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014ef8:	1aa7      	subs	r7, r4, r2
 8014efa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014efe:	ae22      	add	r6, sp, #136	; 0x88
 8014f00:	2500      	movs	r5, #0
 8014f02:	4545      	cmp	r5, r8
 8014f04:	dd13      	ble.n	8014f2e <__kernel_rem_pio2+0x7e>
 8014f06:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80151c8 <__kernel_rem_pio2+0x318>
 8014f0a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014f0e:	2600      	movs	r6, #0
 8014f10:	9b04      	ldr	r3, [sp, #16]
 8014f12:	429e      	cmp	r6, r3
 8014f14:	dc32      	bgt.n	8014f7c <__kernel_rem_pio2+0xcc>
 8014f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f18:	9302      	str	r3, [sp, #8]
 8014f1a:	9b08      	ldr	r3, [sp, #32]
 8014f1c:	199d      	adds	r5, r3, r6
 8014f1e:	ab22      	add	r3, sp, #136	; 0x88
 8014f20:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014f24:	9306      	str	r3, [sp, #24]
 8014f26:	ec59 8b18 	vmov	r8, r9, d8
 8014f2a:	2700      	movs	r7, #0
 8014f2c:	e01f      	b.n	8014f6e <__kernel_rem_pio2+0xbe>
 8014f2e:	42ef      	cmn	r7, r5
 8014f30:	d407      	bmi.n	8014f42 <__kernel_rem_pio2+0x92>
 8014f32:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014f36:	f7eb fb0d 	bl	8000554 <__aeabi_i2d>
 8014f3a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014f3e:	3501      	adds	r5, #1
 8014f40:	e7df      	b.n	8014f02 <__kernel_rem_pio2+0x52>
 8014f42:	ec51 0b18 	vmov	r0, r1, d8
 8014f46:	e7f8      	b.n	8014f3a <__kernel_rem_pio2+0x8a>
 8014f48:	9906      	ldr	r1, [sp, #24]
 8014f4a:	9d02      	ldr	r5, [sp, #8]
 8014f4c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014f50:	9106      	str	r1, [sp, #24]
 8014f52:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014f56:	9502      	str	r5, [sp, #8]
 8014f58:	f7eb fb66 	bl	8000628 <__aeabi_dmul>
 8014f5c:	4602      	mov	r2, r0
 8014f5e:	460b      	mov	r3, r1
 8014f60:	4640      	mov	r0, r8
 8014f62:	4649      	mov	r1, r9
 8014f64:	f7eb f9aa 	bl	80002bc <__adddf3>
 8014f68:	3701      	adds	r7, #1
 8014f6a:	4680      	mov	r8, r0
 8014f6c:	4689      	mov	r9, r1
 8014f6e:	9b07      	ldr	r3, [sp, #28]
 8014f70:	429f      	cmp	r7, r3
 8014f72:	dde9      	ble.n	8014f48 <__kernel_rem_pio2+0x98>
 8014f74:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014f78:	3601      	adds	r6, #1
 8014f7a:	e7c9      	b.n	8014f10 <__kernel_rem_pio2+0x60>
 8014f7c:	9b04      	ldr	r3, [sp, #16]
 8014f7e:	aa0e      	add	r2, sp, #56	; 0x38
 8014f80:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014f84:	930c      	str	r3, [sp, #48]	; 0x30
 8014f86:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014f88:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014f8c:	9c04      	ldr	r4, [sp, #16]
 8014f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f90:	ab9a      	add	r3, sp, #616	; 0x268
 8014f92:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014f96:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014f9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f9e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014fa2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014fa6:	ab9a      	add	r3, sp, #616	; 0x268
 8014fa8:	445b      	add	r3, fp
 8014faa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014fae:	2500      	movs	r5, #0
 8014fb0:	1b63      	subs	r3, r4, r5
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	dc78      	bgt.n	80150a8 <__kernel_rem_pio2+0x1f8>
 8014fb6:	4650      	mov	r0, sl
 8014fb8:	ec49 8b10 	vmov	d0, r8, r9
 8014fbc:	f000 fc00 	bl	80157c0 <scalbn>
 8014fc0:	ec57 6b10 	vmov	r6, r7, d0
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014fca:	ee10 0a10 	vmov	r0, s0
 8014fce:	4639      	mov	r1, r7
 8014fd0:	f7eb fb2a 	bl	8000628 <__aeabi_dmul>
 8014fd4:	ec41 0b10 	vmov	d0, r0, r1
 8014fd8:	f000 fb6e 	bl	80156b8 <floor>
 8014fdc:	2200      	movs	r2, #0
 8014fde:	ec51 0b10 	vmov	r0, r1, d0
 8014fe2:	4b7e      	ldr	r3, [pc, #504]	; (80151dc <__kernel_rem_pio2+0x32c>)
 8014fe4:	f7eb fb20 	bl	8000628 <__aeabi_dmul>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	460b      	mov	r3, r1
 8014fec:	4630      	mov	r0, r6
 8014fee:	4639      	mov	r1, r7
 8014ff0:	f7eb f962 	bl	80002b8 <__aeabi_dsub>
 8014ff4:	460f      	mov	r7, r1
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	f7eb fdc6 	bl	8000b88 <__aeabi_d2iz>
 8014ffc:	9006      	str	r0, [sp, #24]
 8014ffe:	f7eb faa9 	bl	8000554 <__aeabi_i2d>
 8015002:	4602      	mov	r2, r0
 8015004:	460b      	mov	r3, r1
 8015006:	4630      	mov	r0, r6
 8015008:	4639      	mov	r1, r7
 801500a:	f7eb f955 	bl	80002b8 <__aeabi_dsub>
 801500e:	f1ba 0f00 	cmp.w	sl, #0
 8015012:	4606      	mov	r6, r0
 8015014:	460f      	mov	r7, r1
 8015016:	dd6c      	ble.n	80150f2 <__kernel_rem_pio2+0x242>
 8015018:	1e62      	subs	r2, r4, #1
 801501a:	ab0e      	add	r3, sp, #56	; 0x38
 801501c:	f1ca 0118 	rsb	r1, sl, #24
 8015020:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8015024:	9d06      	ldr	r5, [sp, #24]
 8015026:	fa40 f301 	asr.w	r3, r0, r1
 801502a:	441d      	add	r5, r3
 801502c:	408b      	lsls	r3, r1
 801502e:	1ac0      	subs	r0, r0, r3
 8015030:	ab0e      	add	r3, sp, #56	; 0x38
 8015032:	9506      	str	r5, [sp, #24]
 8015034:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8015038:	f1ca 0317 	rsb	r3, sl, #23
 801503c:	fa40 f303 	asr.w	r3, r0, r3
 8015040:	9302      	str	r3, [sp, #8]
 8015042:	9b02      	ldr	r3, [sp, #8]
 8015044:	2b00      	cmp	r3, #0
 8015046:	dd62      	ble.n	801510e <__kernel_rem_pio2+0x25e>
 8015048:	9b06      	ldr	r3, [sp, #24]
 801504a:	2200      	movs	r2, #0
 801504c:	3301      	adds	r3, #1
 801504e:	9306      	str	r3, [sp, #24]
 8015050:	4615      	mov	r5, r2
 8015052:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8015056:	4294      	cmp	r4, r2
 8015058:	f300 8095 	bgt.w	8015186 <__kernel_rem_pio2+0x2d6>
 801505c:	f1ba 0f00 	cmp.w	sl, #0
 8015060:	dd07      	ble.n	8015072 <__kernel_rem_pio2+0x1c2>
 8015062:	f1ba 0f01 	cmp.w	sl, #1
 8015066:	f000 80a2 	beq.w	80151ae <__kernel_rem_pio2+0x2fe>
 801506a:	f1ba 0f02 	cmp.w	sl, #2
 801506e:	f000 80c1 	beq.w	80151f4 <__kernel_rem_pio2+0x344>
 8015072:	9b02      	ldr	r3, [sp, #8]
 8015074:	2b02      	cmp	r3, #2
 8015076:	d14a      	bne.n	801510e <__kernel_rem_pio2+0x25e>
 8015078:	4632      	mov	r2, r6
 801507a:	463b      	mov	r3, r7
 801507c:	2000      	movs	r0, #0
 801507e:	4958      	ldr	r1, [pc, #352]	; (80151e0 <__kernel_rem_pio2+0x330>)
 8015080:	f7eb f91a 	bl	80002b8 <__aeabi_dsub>
 8015084:	4606      	mov	r6, r0
 8015086:	460f      	mov	r7, r1
 8015088:	2d00      	cmp	r5, #0
 801508a:	d040      	beq.n	801510e <__kernel_rem_pio2+0x25e>
 801508c:	4650      	mov	r0, sl
 801508e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80151d0 <__kernel_rem_pio2+0x320>
 8015092:	f000 fb95 	bl	80157c0 <scalbn>
 8015096:	4630      	mov	r0, r6
 8015098:	4639      	mov	r1, r7
 801509a:	ec53 2b10 	vmov	r2, r3, d0
 801509e:	f7eb f90b 	bl	80002b8 <__aeabi_dsub>
 80150a2:	4606      	mov	r6, r0
 80150a4:	460f      	mov	r7, r1
 80150a6:	e032      	b.n	801510e <__kernel_rem_pio2+0x25e>
 80150a8:	2200      	movs	r2, #0
 80150aa:	4b4e      	ldr	r3, [pc, #312]	; (80151e4 <__kernel_rem_pio2+0x334>)
 80150ac:	4640      	mov	r0, r8
 80150ae:	4649      	mov	r1, r9
 80150b0:	f7eb faba 	bl	8000628 <__aeabi_dmul>
 80150b4:	f7eb fd68 	bl	8000b88 <__aeabi_d2iz>
 80150b8:	f7eb fa4c 	bl	8000554 <__aeabi_i2d>
 80150bc:	2200      	movs	r2, #0
 80150be:	4b4a      	ldr	r3, [pc, #296]	; (80151e8 <__kernel_rem_pio2+0x338>)
 80150c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80150c4:	f7eb fab0 	bl	8000628 <__aeabi_dmul>
 80150c8:	4602      	mov	r2, r0
 80150ca:	460b      	mov	r3, r1
 80150cc:	4640      	mov	r0, r8
 80150ce:	4649      	mov	r1, r9
 80150d0:	f7eb f8f2 	bl	80002b8 <__aeabi_dsub>
 80150d4:	f7eb fd58 	bl	8000b88 <__aeabi_d2iz>
 80150d8:	ab0e      	add	r3, sp, #56	; 0x38
 80150da:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80150de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80150e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80150e6:	f7eb f8e9 	bl	80002bc <__adddf3>
 80150ea:	3501      	adds	r5, #1
 80150ec:	4680      	mov	r8, r0
 80150ee:	4689      	mov	r9, r1
 80150f0:	e75e      	b.n	8014fb0 <__kernel_rem_pio2+0x100>
 80150f2:	d105      	bne.n	8015100 <__kernel_rem_pio2+0x250>
 80150f4:	1e63      	subs	r3, r4, #1
 80150f6:	aa0e      	add	r2, sp, #56	; 0x38
 80150f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80150fc:	15c3      	asrs	r3, r0, #23
 80150fe:	e79f      	b.n	8015040 <__kernel_rem_pio2+0x190>
 8015100:	2200      	movs	r2, #0
 8015102:	4b3a      	ldr	r3, [pc, #232]	; (80151ec <__kernel_rem_pio2+0x33c>)
 8015104:	f7eb fd16 	bl	8000b34 <__aeabi_dcmpge>
 8015108:	2800      	cmp	r0, #0
 801510a:	d139      	bne.n	8015180 <__kernel_rem_pio2+0x2d0>
 801510c:	9002      	str	r0, [sp, #8]
 801510e:	2200      	movs	r2, #0
 8015110:	2300      	movs	r3, #0
 8015112:	4630      	mov	r0, r6
 8015114:	4639      	mov	r1, r7
 8015116:	f7eb fcef 	bl	8000af8 <__aeabi_dcmpeq>
 801511a:	2800      	cmp	r0, #0
 801511c:	f000 80c7 	beq.w	80152ae <__kernel_rem_pio2+0x3fe>
 8015120:	1e65      	subs	r5, r4, #1
 8015122:	462b      	mov	r3, r5
 8015124:	2200      	movs	r2, #0
 8015126:	9904      	ldr	r1, [sp, #16]
 8015128:	428b      	cmp	r3, r1
 801512a:	da6a      	bge.n	8015202 <__kernel_rem_pio2+0x352>
 801512c:	2a00      	cmp	r2, #0
 801512e:	f000 8088 	beq.w	8015242 <__kernel_rem_pio2+0x392>
 8015132:	ab0e      	add	r3, sp, #56	; 0x38
 8015134:	f1aa 0a18 	sub.w	sl, sl, #24
 8015138:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801513c:	2b00      	cmp	r3, #0
 801513e:	f000 80b4 	beq.w	80152aa <__kernel_rem_pio2+0x3fa>
 8015142:	4650      	mov	r0, sl
 8015144:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80151d0 <__kernel_rem_pio2+0x320>
 8015148:	f000 fb3a 	bl	80157c0 <scalbn>
 801514c:	00ec      	lsls	r4, r5, #3
 801514e:	ab72      	add	r3, sp, #456	; 0x1c8
 8015150:	191e      	adds	r6, r3, r4
 8015152:	ec59 8b10 	vmov	r8, r9, d0
 8015156:	f106 0a08 	add.w	sl, r6, #8
 801515a:	462f      	mov	r7, r5
 801515c:	2f00      	cmp	r7, #0
 801515e:	f280 80df 	bge.w	8015320 <__kernel_rem_pio2+0x470>
 8015162:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80151c8 <__kernel_rem_pio2+0x318>
 8015166:	f04f 0a00 	mov.w	sl, #0
 801516a:	eba5 030a 	sub.w	r3, r5, sl
 801516e:	2b00      	cmp	r3, #0
 8015170:	f2c0 810a 	blt.w	8015388 <__kernel_rem_pio2+0x4d8>
 8015174:	f8df b078 	ldr.w	fp, [pc, #120]	; 80151f0 <__kernel_rem_pio2+0x340>
 8015178:	ec59 8b18 	vmov	r8, r9, d8
 801517c:	2700      	movs	r7, #0
 801517e:	e0f5      	b.n	801536c <__kernel_rem_pio2+0x4bc>
 8015180:	2302      	movs	r3, #2
 8015182:	9302      	str	r3, [sp, #8]
 8015184:	e760      	b.n	8015048 <__kernel_rem_pio2+0x198>
 8015186:	ab0e      	add	r3, sp, #56	; 0x38
 8015188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801518c:	b94d      	cbnz	r5, 80151a2 <__kernel_rem_pio2+0x2f2>
 801518e:	b12b      	cbz	r3, 801519c <__kernel_rem_pio2+0x2ec>
 8015190:	a80e      	add	r0, sp, #56	; 0x38
 8015192:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8015196:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801519a:	2301      	movs	r3, #1
 801519c:	3201      	adds	r2, #1
 801519e:	461d      	mov	r5, r3
 80151a0:	e759      	b.n	8015056 <__kernel_rem_pio2+0x1a6>
 80151a2:	a80e      	add	r0, sp, #56	; 0x38
 80151a4:	1acb      	subs	r3, r1, r3
 80151a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80151aa:	462b      	mov	r3, r5
 80151ac:	e7f6      	b.n	801519c <__kernel_rem_pio2+0x2ec>
 80151ae:	1e62      	subs	r2, r4, #1
 80151b0:	ab0e      	add	r3, sp, #56	; 0x38
 80151b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80151ba:	a90e      	add	r1, sp, #56	; 0x38
 80151bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80151c0:	e757      	b.n	8015072 <__kernel_rem_pio2+0x1c2>
 80151c2:	bf00      	nop
 80151c4:	f3af 8000 	nop.w
	...
 80151d4:	3ff00000 	.word	0x3ff00000
 80151d8:	0801a3a8 	.word	0x0801a3a8
 80151dc:	40200000 	.word	0x40200000
 80151e0:	3ff00000 	.word	0x3ff00000
 80151e4:	3e700000 	.word	0x3e700000
 80151e8:	41700000 	.word	0x41700000
 80151ec:	3fe00000 	.word	0x3fe00000
 80151f0:	0801a368 	.word	0x0801a368
 80151f4:	1e62      	subs	r2, r4, #1
 80151f6:	ab0e      	add	r3, sp, #56	; 0x38
 80151f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015200:	e7db      	b.n	80151ba <__kernel_rem_pio2+0x30a>
 8015202:	a90e      	add	r1, sp, #56	; 0x38
 8015204:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015208:	3b01      	subs	r3, #1
 801520a:	430a      	orrs	r2, r1
 801520c:	e78b      	b.n	8015126 <__kernel_rem_pio2+0x276>
 801520e:	3301      	adds	r3, #1
 8015210:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8015214:	2900      	cmp	r1, #0
 8015216:	d0fa      	beq.n	801520e <__kernel_rem_pio2+0x35e>
 8015218:	9a08      	ldr	r2, [sp, #32]
 801521a:	4422      	add	r2, r4
 801521c:	00d2      	lsls	r2, r2, #3
 801521e:	a922      	add	r1, sp, #136	; 0x88
 8015220:	18e3      	adds	r3, r4, r3
 8015222:	9206      	str	r2, [sp, #24]
 8015224:	440a      	add	r2, r1
 8015226:	9302      	str	r3, [sp, #8]
 8015228:	f10b 0108 	add.w	r1, fp, #8
 801522c:	f102 0308 	add.w	r3, r2, #8
 8015230:	1c66      	adds	r6, r4, #1
 8015232:	910a      	str	r1, [sp, #40]	; 0x28
 8015234:	2500      	movs	r5, #0
 8015236:	930d      	str	r3, [sp, #52]	; 0x34
 8015238:	9b02      	ldr	r3, [sp, #8]
 801523a:	42b3      	cmp	r3, r6
 801523c:	da04      	bge.n	8015248 <__kernel_rem_pio2+0x398>
 801523e:	461c      	mov	r4, r3
 8015240:	e6a6      	b.n	8014f90 <__kernel_rem_pio2+0xe0>
 8015242:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015244:	2301      	movs	r3, #1
 8015246:	e7e3      	b.n	8015210 <__kernel_rem_pio2+0x360>
 8015248:	9b06      	ldr	r3, [sp, #24]
 801524a:	18ef      	adds	r7, r5, r3
 801524c:	ab22      	add	r3, sp, #136	; 0x88
 801524e:	441f      	add	r7, r3
 8015250:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015252:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015256:	f7eb f97d 	bl	8000554 <__aeabi_i2d>
 801525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801525c:	461c      	mov	r4, r3
 801525e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015260:	e9c7 0100 	strd	r0, r1, [r7]
 8015264:	eb03 0b05 	add.w	fp, r3, r5
 8015268:	2700      	movs	r7, #0
 801526a:	f04f 0800 	mov.w	r8, #0
 801526e:	f04f 0900 	mov.w	r9, #0
 8015272:	9b07      	ldr	r3, [sp, #28]
 8015274:	429f      	cmp	r7, r3
 8015276:	dd08      	ble.n	801528a <__kernel_rem_pio2+0x3da>
 8015278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801527a:	aa72      	add	r2, sp, #456	; 0x1c8
 801527c:	18eb      	adds	r3, r5, r3
 801527e:	4413      	add	r3, r2
 8015280:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8015284:	3601      	adds	r6, #1
 8015286:	3508      	adds	r5, #8
 8015288:	e7d6      	b.n	8015238 <__kernel_rem_pio2+0x388>
 801528a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801528e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8015292:	f7eb f9c9 	bl	8000628 <__aeabi_dmul>
 8015296:	4602      	mov	r2, r0
 8015298:	460b      	mov	r3, r1
 801529a:	4640      	mov	r0, r8
 801529c:	4649      	mov	r1, r9
 801529e:	f7eb f80d 	bl	80002bc <__adddf3>
 80152a2:	3701      	adds	r7, #1
 80152a4:	4680      	mov	r8, r0
 80152a6:	4689      	mov	r9, r1
 80152a8:	e7e3      	b.n	8015272 <__kernel_rem_pio2+0x3c2>
 80152aa:	3d01      	subs	r5, #1
 80152ac:	e741      	b.n	8015132 <__kernel_rem_pio2+0x282>
 80152ae:	f1ca 0000 	rsb	r0, sl, #0
 80152b2:	ec47 6b10 	vmov	d0, r6, r7
 80152b6:	f000 fa83 	bl	80157c0 <scalbn>
 80152ba:	ec57 6b10 	vmov	r6, r7, d0
 80152be:	2200      	movs	r2, #0
 80152c0:	4b99      	ldr	r3, [pc, #612]	; (8015528 <__kernel_rem_pio2+0x678>)
 80152c2:	ee10 0a10 	vmov	r0, s0
 80152c6:	4639      	mov	r1, r7
 80152c8:	f7eb fc34 	bl	8000b34 <__aeabi_dcmpge>
 80152cc:	b1f8      	cbz	r0, 801530e <__kernel_rem_pio2+0x45e>
 80152ce:	2200      	movs	r2, #0
 80152d0:	4b96      	ldr	r3, [pc, #600]	; (801552c <__kernel_rem_pio2+0x67c>)
 80152d2:	4630      	mov	r0, r6
 80152d4:	4639      	mov	r1, r7
 80152d6:	f7eb f9a7 	bl	8000628 <__aeabi_dmul>
 80152da:	f7eb fc55 	bl	8000b88 <__aeabi_d2iz>
 80152de:	4680      	mov	r8, r0
 80152e0:	f7eb f938 	bl	8000554 <__aeabi_i2d>
 80152e4:	2200      	movs	r2, #0
 80152e6:	4b90      	ldr	r3, [pc, #576]	; (8015528 <__kernel_rem_pio2+0x678>)
 80152e8:	f7eb f99e 	bl	8000628 <__aeabi_dmul>
 80152ec:	460b      	mov	r3, r1
 80152ee:	4602      	mov	r2, r0
 80152f0:	4639      	mov	r1, r7
 80152f2:	4630      	mov	r0, r6
 80152f4:	f7ea ffe0 	bl	80002b8 <__aeabi_dsub>
 80152f8:	f7eb fc46 	bl	8000b88 <__aeabi_d2iz>
 80152fc:	1c65      	adds	r5, r4, #1
 80152fe:	ab0e      	add	r3, sp, #56	; 0x38
 8015300:	f10a 0a18 	add.w	sl, sl, #24
 8015304:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015308:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801530c:	e719      	b.n	8015142 <__kernel_rem_pio2+0x292>
 801530e:	4630      	mov	r0, r6
 8015310:	4639      	mov	r1, r7
 8015312:	f7eb fc39 	bl	8000b88 <__aeabi_d2iz>
 8015316:	ab0e      	add	r3, sp, #56	; 0x38
 8015318:	4625      	mov	r5, r4
 801531a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801531e:	e710      	b.n	8015142 <__kernel_rem_pio2+0x292>
 8015320:	ab0e      	add	r3, sp, #56	; 0x38
 8015322:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8015326:	f7eb f915 	bl	8000554 <__aeabi_i2d>
 801532a:	4642      	mov	r2, r8
 801532c:	464b      	mov	r3, r9
 801532e:	f7eb f97b 	bl	8000628 <__aeabi_dmul>
 8015332:	2200      	movs	r2, #0
 8015334:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8015338:	4b7c      	ldr	r3, [pc, #496]	; (801552c <__kernel_rem_pio2+0x67c>)
 801533a:	4640      	mov	r0, r8
 801533c:	4649      	mov	r1, r9
 801533e:	f7eb f973 	bl	8000628 <__aeabi_dmul>
 8015342:	3f01      	subs	r7, #1
 8015344:	4680      	mov	r8, r0
 8015346:	4689      	mov	r9, r1
 8015348:	e708      	b.n	801515c <__kernel_rem_pio2+0x2ac>
 801534a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801534e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015352:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8015356:	f7eb f967 	bl	8000628 <__aeabi_dmul>
 801535a:	4602      	mov	r2, r0
 801535c:	460b      	mov	r3, r1
 801535e:	4640      	mov	r0, r8
 8015360:	4649      	mov	r1, r9
 8015362:	f7ea ffab 	bl	80002bc <__adddf3>
 8015366:	3701      	adds	r7, #1
 8015368:	4680      	mov	r8, r0
 801536a:	4689      	mov	r9, r1
 801536c:	9b04      	ldr	r3, [sp, #16]
 801536e:	429f      	cmp	r7, r3
 8015370:	dc01      	bgt.n	8015376 <__kernel_rem_pio2+0x4c6>
 8015372:	45ba      	cmp	sl, r7
 8015374:	dae9      	bge.n	801534a <__kernel_rem_pio2+0x49a>
 8015376:	ab4a      	add	r3, sp, #296	; 0x128
 8015378:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801537c:	e9c3 8900 	strd	r8, r9, [r3]
 8015380:	f10a 0a01 	add.w	sl, sl, #1
 8015384:	3e08      	subs	r6, #8
 8015386:	e6f0      	b.n	801516a <__kernel_rem_pio2+0x2ba>
 8015388:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801538a:	2b03      	cmp	r3, #3
 801538c:	d85b      	bhi.n	8015446 <__kernel_rem_pio2+0x596>
 801538e:	e8df f003 	tbb	[pc, r3]
 8015392:	264a      	.short	0x264a
 8015394:	0226      	.short	0x0226
 8015396:	ab9a      	add	r3, sp, #616	; 0x268
 8015398:	441c      	add	r4, r3
 801539a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801539e:	46a2      	mov	sl, r4
 80153a0:	46ab      	mov	fp, r5
 80153a2:	f1bb 0f00 	cmp.w	fp, #0
 80153a6:	dc6c      	bgt.n	8015482 <__kernel_rem_pio2+0x5d2>
 80153a8:	46a2      	mov	sl, r4
 80153aa:	46ab      	mov	fp, r5
 80153ac:	f1bb 0f01 	cmp.w	fp, #1
 80153b0:	f300 8086 	bgt.w	80154c0 <__kernel_rem_pio2+0x610>
 80153b4:	2000      	movs	r0, #0
 80153b6:	2100      	movs	r1, #0
 80153b8:	2d01      	cmp	r5, #1
 80153ba:	f300 80a0 	bgt.w	80154fe <__kernel_rem_pio2+0x64e>
 80153be:	9b02      	ldr	r3, [sp, #8]
 80153c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80153c4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	f040 809e 	bne.w	801550a <__kernel_rem_pio2+0x65a>
 80153ce:	9b01      	ldr	r3, [sp, #4]
 80153d0:	e9c3 7800 	strd	r7, r8, [r3]
 80153d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80153d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80153dc:	e033      	b.n	8015446 <__kernel_rem_pio2+0x596>
 80153de:	3408      	adds	r4, #8
 80153e0:	ab4a      	add	r3, sp, #296	; 0x128
 80153e2:	441c      	add	r4, r3
 80153e4:	462e      	mov	r6, r5
 80153e6:	2000      	movs	r0, #0
 80153e8:	2100      	movs	r1, #0
 80153ea:	2e00      	cmp	r6, #0
 80153ec:	da3a      	bge.n	8015464 <__kernel_rem_pio2+0x5b4>
 80153ee:	9b02      	ldr	r3, [sp, #8]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d03d      	beq.n	8015470 <__kernel_rem_pio2+0x5c0>
 80153f4:	4602      	mov	r2, r0
 80153f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153fa:	9c01      	ldr	r4, [sp, #4]
 80153fc:	e9c4 2300 	strd	r2, r3, [r4]
 8015400:	4602      	mov	r2, r0
 8015402:	460b      	mov	r3, r1
 8015404:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015408:	f7ea ff56 	bl	80002b8 <__aeabi_dsub>
 801540c:	ae4c      	add	r6, sp, #304	; 0x130
 801540e:	2401      	movs	r4, #1
 8015410:	42a5      	cmp	r5, r4
 8015412:	da30      	bge.n	8015476 <__kernel_rem_pio2+0x5c6>
 8015414:	9b02      	ldr	r3, [sp, #8]
 8015416:	b113      	cbz	r3, 801541e <__kernel_rem_pio2+0x56e>
 8015418:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801541c:	4619      	mov	r1, r3
 801541e:	9b01      	ldr	r3, [sp, #4]
 8015420:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015424:	e00f      	b.n	8015446 <__kernel_rem_pio2+0x596>
 8015426:	ab9a      	add	r3, sp, #616	; 0x268
 8015428:	441c      	add	r4, r3
 801542a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801542e:	2000      	movs	r0, #0
 8015430:	2100      	movs	r1, #0
 8015432:	2d00      	cmp	r5, #0
 8015434:	da10      	bge.n	8015458 <__kernel_rem_pio2+0x5a8>
 8015436:	9b02      	ldr	r3, [sp, #8]
 8015438:	b113      	cbz	r3, 8015440 <__kernel_rem_pio2+0x590>
 801543a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801543e:	4619      	mov	r1, r3
 8015440:	9b01      	ldr	r3, [sp, #4]
 8015442:	e9c3 0100 	strd	r0, r1, [r3]
 8015446:	9b06      	ldr	r3, [sp, #24]
 8015448:	f003 0007 	and.w	r0, r3, #7
 801544c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8015450:	ecbd 8b02 	vpop	{d8}
 8015454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015458:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801545c:	f7ea ff2e 	bl	80002bc <__adddf3>
 8015460:	3d01      	subs	r5, #1
 8015462:	e7e6      	b.n	8015432 <__kernel_rem_pio2+0x582>
 8015464:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015468:	f7ea ff28 	bl	80002bc <__adddf3>
 801546c:	3e01      	subs	r6, #1
 801546e:	e7bc      	b.n	80153ea <__kernel_rem_pio2+0x53a>
 8015470:	4602      	mov	r2, r0
 8015472:	460b      	mov	r3, r1
 8015474:	e7c1      	b.n	80153fa <__kernel_rem_pio2+0x54a>
 8015476:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801547a:	f7ea ff1f 	bl	80002bc <__adddf3>
 801547e:	3401      	adds	r4, #1
 8015480:	e7c6      	b.n	8015410 <__kernel_rem_pio2+0x560>
 8015482:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8015486:	ed3a 7b02 	vldmdb	sl!, {d7}
 801548a:	4640      	mov	r0, r8
 801548c:	ec53 2b17 	vmov	r2, r3, d7
 8015490:	4649      	mov	r1, r9
 8015492:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015496:	f7ea ff11 	bl	80002bc <__adddf3>
 801549a:	4602      	mov	r2, r0
 801549c:	460b      	mov	r3, r1
 801549e:	4606      	mov	r6, r0
 80154a0:	460f      	mov	r7, r1
 80154a2:	4640      	mov	r0, r8
 80154a4:	4649      	mov	r1, r9
 80154a6:	f7ea ff07 	bl	80002b8 <__aeabi_dsub>
 80154aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154ae:	f7ea ff05 	bl	80002bc <__adddf3>
 80154b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80154b6:	e9ca 0100 	strd	r0, r1, [sl]
 80154ba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80154be:	e770      	b.n	80153a2 <__kernel_rem_pio2+0x4f2>
 80154c0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80154c4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80154c8:	4630      	mov	r0, r6
 80154ca:	ec53 2b17 	vmov	r2, r3, d7
 80154ce:	4639      	mov	r1, r7
 80154d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80154d4:	f7ea fef2 	bl	80002bc <__adddf3>
 80154d8:	4602      	mov	r2, r0
 80154da:	460b      	mov	r3, r1
 80154dc:	4680      	mov	r8, r0
 80154de:	4689      	mov	r9, r1
 80154e0:	4630      	mov	r0, r6
 80154e2:	4639      	mov	r1, r7
 80154e4:	f7ea fee8 	bl	80002b8 <__aeabi_dsub>
 80154e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154ec:	f7ea fee6 	bl	80002bc <__adddf3>
 80154f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80154f4:	e9ca 0100 	strd	r0, r1, [sl]
 80154f8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80154fc:	e756      	b.n	80153ac <__kernel_rem_pio2+0x4fc>
 80154fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8015502:	f7ea fedb 	bl	80002bc <__adddf3>
 8015506:	3d01      	subs	r5, #1
 8015508:	e756      	b.n	80153b8 <__kernel_rem_pio2+0x508>
 801550a:	9b01      	ldr	r3, [sp, #4]
 801550c:	9a01      	ldr	r2, [sp, #4]
 801550e:	601f      	str	r7, [r3, #0]
 8015510:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8015514:	605c      	str	r4, [r3, #4]
 8015516:	609d      	str	r5, [r3, #8]
 8015518:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801551c:	60d3      	str	r3, [r2, #12]
 801551e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015522:	6110      	str	r0, [r2, #16]
 8015524:	6153      	str	r3, [r2, #20]
 8015526:	e78e      	b.n	8015446 <__kernel_rem_pio2+0x596>
 8015528:	41700000 	.word	0x41700000
 801552c:	3e700000 	.word	0x3e700000

08015530 <__kernel_sin>:
 8015530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015534:	ec55 4b10 	vmov	r4, r5, d0
 8015538:	b085      	sub	sp, #20
 801553a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801553e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8015542:	ed8d 1b00 	vstr	d1, [sp]
 8015546:	9002      	str	r0, [sp, #8]
 8015548:	da06      	bge.n	8015558 <__kernel_sin+0x28>
 801554a:	ee10 0a10 	vmov	r0, s0
 801554e:	4629      	mov	r1, r5
 8015550:	f7eb fb1a 	bl	8000b88 <__aeabi_d2iz>
 8015554:	2800      	cmp	r0, #0
 8015556:	d051      	beq.n	80155fc <__kernel_sin+0xcc>
 8015558:	4622      	mov	r2, r4
 801555a:	462b      	mov	r3, r5
 801555c:	4620      	mov	r0, r4
 801555e:	4629      	mov	r1, r5
 8015560:	f7eb f862 	bl	8000628 <__aeabi_dmul>
 8015564:	4682      	mov	sl, r0
 8015566:	468b      	mov	fp, r1
 8015568:	4602      	mov	r2, r0
 801556a:	460b      	mov	r3, r1
 801556c:	4620      	mov	r0, r4
 801556e:	4629      	mov	r1, r5
 8015570:	f7eb f85a 	bl	8000628 <__aeabi_dmul>
 8015574:	a341      	add	r3, pc, #260	; (adr r3, 801567c <__kernel_sin+0x14c>)
 8015576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801557a:	4680      	mov	r8, r0
 801557c:	4689      	mov	r9, r1
 801557e:	4650      	mov	r0, sl
 8015580:	4659      	mov	r1, fp
 8015582:	f7eb f851 	bl	8000628 <__aeabi_dmul>
 8015586:	a33f      	add	r3, pc, #252	; (adr r3, 8015684 <__kernel_sin+0x154>)
 8015588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801558c:	f7ea fe94 	bl	80002b8 <__aeabi_dsub>
 8015590:	4652      	mov	r2, sl
 8015592:	465b      	mov	r3, fp
 8015594:	f7eb f848 	bl	8000628 <__aeabi_dmul>
 8015598:	a33c      	add	r3, pc, #240	; (adr r3, 801568c <__kernel_sin+0x15c>)
 801559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801559e:	f7ea fe8d 	bl	80002bc <__adddf3>
 80155a2:	4652      	mov	r2, sl
 80155a4:	465b      	mov	r3, fp
 80155a6:	f7eb f83f 	bl	8000628 <__aeabi_dmul>
 80155aa:	a33a      	add	r3, pc, #232	; (adr r3, 8015694 <__kernel_sin+0x164>)
 80155ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155b0:	f7ea fe82 	bl	80002b8 <__aeabi_dsub>
 80155b4:	4652      	mov	r2, sl
 80155b6:	465b      	mov	r3, fp
 80155b8:	f7eb f836 	bl	8000628 <__aeabi_dmul>
 80155bc:	a337      	add	r3, pc, #220	; (adr r3, 801569c <__kernel_sin+0x16c>)
 80155be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155c2:	f7ea fe7b 	bl	80002bc <__adddf3>
 80155c6:	9b02      	ldr	r3, [sp, #8]
 80155c8:	4606      	mov	r6, r0
 80155ca:	460f      	mov	r7, r1
 80155cc:	b9db      	cbnz	r3, 8015606 <__kernel_sin+0xd6>
 80155ce:	4602      	mov	r2, r0
 80155d0:	460b      	mov	r3, r1
 80155d2:	4650      	mov	r0, sl
 80155d4:	4659      	mov	r1, fp
 80155d6:	f7eb f827 	bl	8000628 <__aeabi_dmul>
 80155da:	a325      	add	r3, pc, #148	; (adr r3, 8015670 <__kernel_sin+0x140>)
 80155dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155e0:	f7ea fe6a 	bl	80002b8 <__aeabi_dsub>
 80155e4:	4642      	mov	r2, r8
 80155e6:	464b      	mov	r3, r9
 80155e8:	f7eb f81e 	bl	8000628 <__aeabi_dmul>
 80155ec:	4602      	mov	r2, r0
 80155ee:	460b      	mov	r3, r1
 80155f0:	4620      	mov	r0, r4
 80155f2:	4629      	mov	r1, r5
 80155f4:	f7ea fe62 	bl	80002bc <__adddf3>
 80155f8:	4604      	mov	r4, r0
 80155fa:	460d      	mov	r5, r1
 80155fc:	ec45 4b10 	vmov	d0, r4, r5
 8015600:	b005      	add	sp, #20
 8015602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015606:	2200      	movs	r2, #0
 8015608:	4b1b      	ldr	r3, [pc, #108]	; (8015678 <__kernel_sin+0x148>)
 801560a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801560e:	f7eb f80b 	bl	8000628 <__aeabi_dmul>
 8015612:	4632      	mov	r2, r6
 8015614:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015618:	463b      	mov	r3, r7
 801561a:	4640      	mov	r0, r8
 801561c:	4649      	mov	r1, r9
 801561e:	f7eb f803 	bl	8000628 <__aeabi_dmul>
 8015622:	4602      	mov	r2, r0
 8015624:	460b      	mov	r3, r1
 8015626:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801562a:	f7ea fe45 	bl	80002b8 <__aeabi_dsub>
 801562e:	4652      	mov	r2, sl
 8015630:	465b      	mov	r3, fp
 8015632:	f7ea fff9 	bl	8000628 <__aeabi_dmul>
 8015636:	e9dd 2300 	ldrd	r2, r3, [sp]
 801563a:	f7ea fe3d 	bl	80002b8 <__aeabi_dsub>
 801563e:	a30c      	add	r3, pc, #48	; (adr r3, 8015670 <__kernel_sin+0x140>)
 8015640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015644:	4606      	mov	r6, r0
 8015646:	460f      	mov	r7, r1
 8015648:	4640      	mov	r0, r8
 801564a:	4649      	mov	r1, r9
 801564c:	f7ea ffec 	bl	8000628 <__aeabi_dmul>
 8015650:	4602      	mov	r2, r0
 8015652:	460b      	mov	r3, r1
 8015654:	4630      	mov	r0, r6
 8015656:	4639      	mov	r1, r7
 8015658:	f7ea fe30 	bl	80002bc <__adddf3>
 801565c:	4602      	mov	r2, r0
 801565e:	460b      	mov	r3, r1
 8015660:	4620      	mov	r0, r4
 8015662:	4629      	mov	r1, r5
 8015664:	f7ea fe28 	bl	80002b8 <__aeabi_dsub>
 8015668:	e7c6      	b.n	80155f8 <__kernel_sin+0xc8>
 801566a:	bf00      	nop
 801566c:	f3af 8000 	nop.w
 8015670:	55555549 	.word	0x55555549
 8015674:	3fc55555 	.word	0x3fc55555
 8015678:	3fe00000 	.word	0x3fe00000
 801567c:	5acfd57c 	.word	0x5acfd57c
 8015680:	3de5d93a 	.word	0x3de5d93a
 8015684:	8a2b9ceb 	.word	0x8a2b9ceb
 8015688:	3e5ae5e6 	.word	0x3e5ae5e6
 801568c:	57b1fe7d 	.word	0x57b1fe7d
 8015690:	3ec71de3 	.word	0x3ec71de3
 8015694:	19c161d5 	.word	0x19c161d5
 8015698:	3f2a01a0 	.word	0x3f2a01a0
 801569c:	1110f8a6 	.word	0x1110f8a6
 80156a0:	3f811111 	.word	0x3f811111

080156a4 <fabs>:
 80156a4:	ec51 0b10 	vmov	r0, r1, d0
 80156a8:	ee10 2a10 	vmov	r2, s0
 80156ac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80156b0:	ec43 2b10 	vmov	d0, r2, r3
 80156b4:	4770      	bx	lr
	...

080156b8 <floor>:
 80156b8:	ec51 0b10 	vmov	r0, r1, d0
 80156bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80156c4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80156c8:	2e13      	cmp	r6, #19
 80156ca:	460c      	mov	r4, r1
 80156cc:	ee10 5a10 	vmov	r5, s0
 80156d0:	4680      	mov	r8, r0
 80156d2:	dc34      	bgt.n	801573e <floor+0x86>
 80156d4:	2e00      	cmp	r6, #0
 80156d6:	da16      	bge.n	8015706 <floor+0x4e>
 80156d8:	a335      	add	r3, pc, #212	; (adr r3, 80157b0 <floor+0xf8>)
 80156da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156de:	f7ea fded 	bl	80002bc <__adddf3>
 80156e2:	2200      	movs	r2, #0
 80156e4:	2300      	movs	r3, #0
 80156e6:	f7eb fa2f 	bl	8000b48 <__aeabi_dcmpgt>
 80156ea:	b148      	cbz	r0, 8015700 <floor+0x48>
 80156ec:	2c00      	cmp	r4, #0
 80156ee:	da59      	bge.n	80157a4 <floor+0xec>
 80156f0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80156f4:	4a30      	ldr	r2, [pc, #192]	; (80157b8 <floor+0x100>)
 80156f6:	432b      	orrs	r3, r5
 80156f8:	2500      	movs	r5, #0
 80156fa:	42ab      	cmp	r3, r5
 80156fc:	bf18      	it	ne
 80156fe:	4614      	movne	r4, r2
 8015700:	4621      	mov	r1, r4
 8015702:	4628      	mov	r0, r5
 8015704:	e025      	b.n	8015752 <floor+0x9a>
 8015706:	4f2d      	ldr	r7, [pc, #180]	; (80157bc <floor+0x104>)
 8015708:	4137      	asrs	r7, r6
 801570a:	ea01 0307 	and.w	r3, r1, r7
 801570e:	4303      	orrs	r3, r0
 8015710:	d01f      	beq.n	8015752 <floor+0x9a>
 8015712:	a327      	add	r3, pc, #156	; (adr r3, 80157b0 <floor+0xf8>)
 8015714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015718:	f7ea fdd0 	bl	80002bc <__adddf3>
 801571c:	2200      	movs	r2, #0
 801571e:	2300      	movs	r3, #0
 8015720:	f7eb fa12 	bl	8000b48 <__aeabi_dcmpgt>
 8015724:	2800      	cmp	r0, #0
 8015726:	d0eb      	beq.n	8015700 <floor+0x48>
 8015728:	2c00      	cmp	r4, #0
 801572a:	bfbe      	ittt	lt
 801572c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015730:	fa43 f606 	asrlt.w	r6, r3, r6
 8015734:	19a4      	addlt	r4, r4, r6
 8015736:	ea24 0407 	bic.w	r4, r4, r7
 801573a:	2500      	movs	r5, #0
 801573c:	e7e0      	b.n	8015700 <floor+0x48>
 801573e:	2e33      	cmp	r6, #51	; 0x33
 8015740:	dd0b      	ble.n	801575a <floor+0xa2>
 8015742:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015746:	d104      	bne.n	8015752 <floor+0x9a>
 8015748:	ee10 2a10 	vmov	r2, s0
 801574c:	460b      	mov	r3, r1
 801574e:	f7ea fdb5 	bl	80002bc <__adddf3>
 8015752:	ec41 0b10 	vmov	d0, r0, r1
 8015756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801575a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801575e:	f04f 33ff 	mov.w	r3, #4294967295
 8015762:	fa23 f707 	lsr.w	r7, r3, r7
 8015766:	4207      	tst	r7, r0
 8015768:	d0f3      	beq.n	8015752 <floor+0x9a>
 801576a:	a311      	add	r3, pc, #68	; (adr r3, 80157b0 <floor+0xf8>)
 801576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015770:	f7ea fda4 	bl	80002bc <__adddf3>
 8015774:	2200      	movs	r2, #0
 8015776:	2300      	movs	r3, #0
 8015778:	f7eb f9e6 	bl	8000b48 <__aeabi_dcmpgt>
 801577c:	2800      	cmp	r0, #0
 801577e:	d0bf      	beq.n	8015700 <floor+0x48>
 8015780:	2c00      	cmp	r4, #0
 8015782:	da02      	bge.n	801578a <floor+0xd2>
 8015784:	2e14      	cmp	r6, #20
 8015786:	d103      	bne.n	8015790 <floor+0xd8>
 8015788:	3401      	adds	r4, #1
 801578a:	ea25 0507 	bic.w	r5, r5, r7
 801578e:	e7b7      	b.n	8015700 <floor+0x48>
 8015790:	2301      	movs	r3, #1
 8015792:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8015796:	fa03 f606 	lsl.w	r6, r3, r6
 801579a:	4435      	add	r5, r6
 801579c:	4545      	cmp	r5, r8
 801579e:	bf38      	it	cc
 80157a0:	18e4      	addcc	r4, r4, r3
 80157a2:	e7f2      	b.n	801578a <floor+0xd2>
 80157a4:	2500      	movs	r5, #0
 80157a6:	462c      	mov	r4, r5
 80157a8:	e7aa      	b.n	8015700 <floor+0x48>
 80157aa:	bf00      	nop
 80157ac:	f3af 8000 	nop.w
 80157b0:	8800759c 	.word	0x8800759c
 80157b4:	7e37e43c 	.word	0x7e37e43c
 80157b8:	bff00000 	.word	0xbff00000
 80157bc:	000fffff 	.word	0x000fffff

080157c0 <scalbn>:
 80157c0:	b570      	push	{r4, r5, r6, lr}
 80157c2:	ec55 4b10 	vmov	r4, r5, d0
 80157c6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80157ca:	4606      	mov	r6, r0
 80157cc:	462b      	mov	r3, r5
 80157ce:	b9aa      	cbnz	r2, 80157fc <scalbn+0x3c>
 80157d0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80157d4:	4323      	orrs	r3, r4
 80157d6:	d03b      	beq.n	8015850 <scalbn+0x90>
 80157d8:	4b31      	ldr	r3, [pc, #196]	; (80158a0 <scalbn+0xe0>)
 80157da:	4629      	mov	r1, r5
 80157dc:	2200      	movs	r2, #0
 80157de:	ee10 0a10 	vmov	r0, s0
 80157e2:	f7ea ff21 	bl	8000628 <__aeabi_dmul>
 80157e6:	4b2f      	ldr	r3, [pc, #188]	; (80158a4 <scalbn+0xe4>)
 80157e8:	429e      	cmp	r6, r3
 80157ea:	4604      	mov	r4, r0
 80157ec:	460d      	mov	r5, r1
 80157ee:	da12      	bge.n	8015816 <scalbn+0x56>
 80157f0:	a327      	add	r3, pc, #156	; (adr r3, 8015890 <scalbn+0xd0>)
 80157f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157f6:	f7ea ff17 	bl	8000628 <__aeabi_dmul>
 80157fa:	e009      	b.n	8015810 <scalbn+0x50>
 80157fc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015800:	428a      	cmp	r2, r1
 8015802:	d10c      	bne.n	801581e <scalbn+0x5e>
 8015804:	ee10 2a10 	vmov	r2, s0
 8015808:	4620      	mov	r0, r4
 801580a:	4629      	mov	r1, r5
 801580c:	f7ea fd56 	bl	80002bc <__adddf3>
 8015810:	4604      	mov	r4, r0
 8015812:	460d      	mov	r5, r1
 8015814:	e01c      	b.n	8015850 <scalbn+0x90>
 8015816:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801581a:	460b      	mov	r3, r1
 801581c:	3a36      	subs	r2, #54	; 0x36
 801581e:	4432      	add	r2, r6
 8015820:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015824:	428a      	cmp	r2, r1
 8015826:	dd0b      	ble.n	8015840 <scalbn+0x80>
 8015828:	ec45 4b11 	vmov	d1, r4, r5
 801582c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015898 <scalbn+0xd8>
 8015830:	f000 f83c 	bl	80158ac <copysign>
 8015834:	a318      	add	r3, pc, #96	; (adr r3, 8015898 <scalbn+0xd8>)
 8015836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583a:	ec51 0b10 	vmov	r0, r1, d0
 801583e:	e7da      	b.n	80157f6 <scalbn+0x36>
 8015840:	2a00      	cmp	r2, #0
 8015842:	dd08      	ble.n	8015856 <scalbn+0x96>
 8015844:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015848:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801584c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015850:	ec45 4b10 	vmov	d0, r4, r5
 8015854:	bd70      	pop	{r4, r5, r6, pc}
 8015856:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801585a:	da0d      	bge.n	8015878 <scalbn+0xb8>
 801585c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015860:	429e      	cmp	r6, r3
 8015862:	ec45 4b11 	vmov	d1, r4, r5
 8015866:	dce1      	bgt.n	801582c <scalbn+0x6c>
 8015868:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015890 <scalbn+0xd0>
 801586c:	f000 f81e 	bl	80158ac <copysign>
 8015870:	a307      	add	r3, pc, #28	; (adr r3, 8015890 <scalbn+0xd0>)
 8015872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015876:	e7e0      	b.n	801583a <scalbn+0x7a>
 8015878:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801587c:	3236      	adds	r2, #54	; 0x36
 801587e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015882:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015886:	4620      	mov	r0, r4
 8015888:	4629      	mov	r1, r5
 801588a:	2200      	movs	r2, #0
 801588c:	4b06      	ldr	r3, [pc, #24]	; (80158a8 <scalbn+0xe8>)
 801588e:	e7b2      	b.n	80157f6 <scalbn+0x36>
 8015890:	c2f8f359 	.word	0xc2f8f359
 8015894:	01a56e1f 	.word	0x01a56e1f
 8015898:	8800759c 	.word	0x8800759c
 801589c:	7e37e43c 	.word	0x7e37e43c
 80158a0:	43500000 	.word	0x43500000
 80158a4:	ffff3cb0 	.word	0xffff3cb0
 80158a8:	3c900000 	.word	0x3c900000

080158ac <copysign>:
 80158ac:	ec51 0b10 	vmov	r0, r1, d0
 80158b0:	ee11 0a90 	vmov	r0, s3
 80158b4:	ee10 2a10 	vmov	r2, s0
 80158b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80158bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80158c0:	ea41 0300 	orr.w	r3, r1, r0
 80158c4:	ec43 2b10 	vmov	d0, r2, r3
 80158c8:	4770      	bx	lr
	...

080158cc <__errno>:
 80158cc:	4b01      	ldr	r3, [pc, #4]	; (80158d4 <__errno+0x8>)
 80158ce:	6818      	ldr	r0, [r3, #0]
 80158d0:	4770      	bx	lr
 80158d2:	bf00      	nop
 80158d4:	2000000c 	.word	0x2000000c

080158d8 <__libc_init_array>:
 80158d8:	b570      	push	{r4, r5, r6, lr}
 80158da:	4e0d      	ldr	r6, [pc, #52]	; (8015910 <__libc_init_array+0x38>)
 80158dc:	4c0d      	ldr	r4, [pc, #52]	; (8015914 <__libc_init_array+0x3c>)
 80158de:	1ba4      	subs	r4, r4, r6
 80158e0:	10a4      	asrs	r4, r4, #2
 80158e2:	2500      	movs	r5, #0
 80158e4:	42a5      	cmp	r5, r4
 80158e6:	d109      	bne.n	80158fc <__libc_init_array+0x24>
 80158e8:	4e0b      	ldr	r6, [pc, #44]	; (8015918 <__libc_init_array+0x40>)
 80158ea:	4c0c      	ldr	r4, [pc, #48]	; (801591c <__libc_init_array+0x44>)
 80158ec:	f004 f9e6 	bl	8019cbc <_init>
 80158f0:	1ba4      	subs	r4, r4, r6
 80158f2:	10a4      	asrs	r4, r4, #2
 80158f4:	2500      	movs	r5, #0
 80158f6:	42a5      	cmp	r5, r4
 80158f8:	d105      	bne.n	8015906 <__libc_init_array+0x2e>
 80158fa:	bd70      	pop	{r4, r5, r6, pc}
 80158fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015900:	4798      	blx	r3
 8015902:	3501      	adds	r5, #1
 8015904:	e7ee      	b.n	80158e4 <__libc_init_array+0xc>
 8015906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801590a:	4798      	blx	r3
 801590c:	3501      	adds	r5, #1
 801590e:	e7f2      	b.n	80158f6 <__libc_init_array+0x1e>
 8015910:	0801a6ec 	.word	0x0801a6ec
 8015914:	0801a6ec 	.word	0x0801a6ec
 8015918:	0801a6ec 	.word	0x0801a6ec
 801591c:	0801a6f4 	.word	0x0801a6f4

08015920 <memset>:
 8015920:	4402      	add	r2, r0
 8015922:	4603      	mov	r3, r0
 8015924:	4293      	cmp	r3, r2
 8015926:	d100      	bne.n	801592a <memset+0xa>
 8015928:	4770      	bx	lr
 801592a:	f803 1b01 	strb.w	r1, [r3], #1
 801592e:	e7f9      	b.n	8015924 <memset+0x4>

08015930 <__cvt>:
 8015930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015934:	ec55 4b10 	vmov	r4, r5, d0
 8015938:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801593a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801593e:	2d00      	cmp	r5, #0
 8015940:	460e      	mov	r6, r1
 8015942:	4691      	mov	r9, r2
 8015944:	4619      	mov	r1, r3
 8015946:	bfb8      	it	lt
 8015948:	4622      	movlt	r2, r4
 801594a:	462b      	mov	r3, r5
 801594c:	f027 0720 	bic.w	r7, r7, #32
 8015950:	bfbb      	ittet	lt
 8015952:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015956:	461d      	movlt	r5, r3
 8015958:	2300      	movge	r3, #0
 801595a:	232d      	movlt	r3, #45	; 0x2d
 801595c:	bfb8      	it	lt
 801595e:	4614      	movlt	r4, r2
 8015960:	2f46      	cmp	r7, #70	; 0x46
 8015962:	700b      	strb	r3, [r1, #0]
 8015964:	d004      	beq.n	8015970 <__cvt+0x40>
 8015966:	2f45      	cmp	r7, #69	; 0x45
 8015968:	d100      	bne.n	801596c <__cvt+0x3c>
 801596a:	3601      	adds	r6, #1
 801596c:	2102      	movs	r1, #2
 801596e:	e000      	b.n	8015972 <__cvt+0x42>
 8015970:	2103      	movs	r1, #3
 8015972:	ab03      	add	r3, sp, #12
 8015974:	9301      	str	r3, [sp, #4]
 8015976:	ab02      	add	r3, sp, #8
 8015978:	9300      	str	r3, [sp, #0]
 801597a:	4632      	mov	r2, r6
 801597c:	4653      	mov	r3, sl
 801597e:	ec45 4b10 	vmov	d0, r4, r5
 8015982:	f001 fdfd 	bl	8017580 <_dtoa_r>
 8015986:	2f47      	cmp	r7, #71	; 0x47
 8015988:	4680      	mov	r8, r0
 801598a:	d102      	bne.n	8015992 <__cvt+0x62>
 801598c:	f019 0f01 	tst.w	r9, #1
 8015990:	d026      	beq.n	80159e0 <__cvt+0xb0>
 8015992:	2f46      	cmp	r7, #70	; 0x46
 8015994:	eb08 0906 	add.w	r9, r8, r6
 8015998:	d111      	bne.n	80159be <__cvt+0x8e>
 801599a:	f898 3000 	ldrb.w	r3, [r8]
 801599e:	2b30      	cmp	r3, #48	; 0x30
 80159a0:	d10a      	bne.n	80159b8 <__cvt+0x88>
 80159a2:	2200      	movs	r2, #0
 80159a4:	2300      	movs	r3, #0
 80159a6:	4620      	mov	r0, r4
 80159a8:	4629      	mov	r1, r5
 80159aa:	f7eb f8a5 	bl	8000af8 <__aeabi_dcmpeq>
 80159ae:	b918      	cbnz	r0, 80159b8 <__cvt+0x88>
 80159b0:	f1c6 0601 	rsb	r6, r6, #1
 80159b4:	f8ca 6000 	str.w	r6, [sl]
 80159b8:	f8da 3000 	ldr.w	r3, [sl]
 80159bc:	4499      	add	r9, r3
 80159be:	2200      	movs	r2, #0
 80159c0:	2300      	movs	r3, #0
 80159c2:	4620      	mov	r0, r4
 80159c4:	4629      	mov	r1, r5
 80159c6:	f7eb f897 	bl	8000af8 <__aeabi_dcmpeq>
 80159ca:	b938      	cbnz	r0, 80159dc <__cvt+0xac>
 80159cc:	2230      	movs	r2, #48	; 0x30
 80159ce:	9b03      	ldr	r3, [sp, #12]
 80159d0:	454b      	cmp	r3, r9
 80159d2:	d205      	bcs.n	80159e0 <__cvt+0xb0>
 80159d4:	1c59      	adds	r1, r3, #1
 80159d6:	9103      	str	r1, [sp, #12]
 80159d8:	701a      	strb	r2, [r3, #0]
 80159da:	e7f8      	b.n	80159ce <__cvt+0x9e>
 80159dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80159e0:	9b03      	ldr	r3, [sp, #12]
 80159e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80159e4:	eba3 0308 	sub.w	r3, r3, r8
 80159e8:	4640      	mov	r0, r8
 80159ea:	6013      	str	r3, [r2, #0]
 80159ec:	b004      	add	sp, #16
 80159ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080159f2 <__exponent>:
 80159f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80159f4:	2900      	cmp	r1, #0
 80159f6:	4604      	mov	r4, r0
 80159f8:	bfba      	itte	lt
 80159fa:	4249      	neglt	r1, r1
 80159fc:	232d      	movlt	r3, #45	; 0x2d
 80159fe:	232b      	movge	r3, #43	; 0x2b
 8015a00:	2909      	cmp	r1, #9
 8015a02:	f804 2b02 	strb.w	r2, [r4], #2
 8015a06:	7043      	strb	r3, [r0, #1]
 8015a08:	dd20      	ble.n	8015a4c <__exponent+0x5a>
 8015a0a:	f10d 0307 	add.w	r3, sp, #7
 8015a0e:	461f      	mov	r7, r3
 8015a10:	260a      	movs	r6, #10
 8015a12:	fb91 f5f6 	sdiv	r5, r1, r6
 8015a16:	fb06 1115 	mls	r1, r6, r5, r1
 8015a1a:	3130      	adds	r1, #48	; 0x30
 8015a1c:	2d09      	cmp	r5, #9
 8015a1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015a22:	f103 32ff 	add.w	r2, r3, #4294967295
 8015a26:	4629      	mov	r1, r5
 8015a28:	dc09      	bgt.n	8015a3e <__exponent+0x4c>
 8015a2a:	3130      	adds	r1, #48	; 0x30
 8015a2c:	3b02      	subs	r3, #2
 8015a2e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015a32:	42bb      	cmp	r3, r7
 8015a34:	4622      	mov	r2, r4
 8015a36:	d304      	bcc.n	8015a42 <__exponent+0x50>
 8015a38:	1a10      	subs	r0, r2, r0
 8015a3a:	b003      	add	sp, #12
 8015a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a3e:	4613      	mov	r3, r2
 8015a40:	e7e7      	b.n	8015a12 <__exponent+0x20>
 8015a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a46:	f804 2b01 	strb.w	r2, [r4], #1
 8015a4a:	e7f2      	b.n	8015a32 <__exponent+0x40>
 8015a4c:	2330      	movs	r3, #48	; 0x30
 8015a4e:	4419      	add	r1, r3
 8015a50:	7083      	strb	r3, [r0, #2]
 8015a52:	1d02      	adds	r2, r0, #4
 8015a54:	70c1      	strb	r1, [r0, #3]
 8015a56:	e7ef      	b.n	8015a38 <__exponent+0x46>

08015a58 <_printf_float>:
 8015a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a5c:	b08d      	sub	sp, #52	; 0x34
 8015a5e:	460c      	mov	r4, r1
 8015a60:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015a64:	4616      	mov	r6, r2
 8015a66:	461f      	mov	r7, r3
 8015a68:	4605      	mov	r5, r0
 8015a6a:	f002 fe7b 	bl	8018764 <_localeconv_r>
 8015a6e:	6803      	ldr	r3, [r0, #0]
 8015a70:	9304      	str	r3, [sp, #16]
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7ea fbc4 	bl	8000200 <strlen>
 8015a78:	2300      	movs	r3, #0
 8015a7a:	930a      	str	r3, [sp, #40]	; 0x28
 8015a7c:	f8d8 3000 	ldr.w	r3, [r8]
 8015a80:	9005      	str	r0, [sp, #20]
 8015a82:	3307      	adds	r3, #7
 8015a84:	f023 0307 	bic.w	r3, r3, #7
 8015a88:	f103 0208 	add.w	r2, r3, #8
 8015a8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015a90:	f8d4 b000 	ldr.w	fp, [r4]
 8015a94:	f8c8 2000 	str.w	r2, [r8]
 8015a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015aa0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015aa4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015aa8:	9307      	str	r3, [sp, #28]
 8015aaa:	f8cd 8018 	str.w	r8, [sp, #24]
 8015aae:	f04f 32ff 	mov.w	r2, #4294967295
 8015ab2:	4ba7      	ldr	r3, [pc, #668]	; (8015d50 <_printf_float+0x2f8>)
 8015ab4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ab8:	f7eb f850 	bl	8000b5c <__aeabi_dcmpun>
 8015abc:	bb70      	cbnz	r0, 8015b1c <_printf_float+0xc4>
 8015abe:	f04f 32ff 	mov.w	r2, #4294967295
 8015ac2:	4ba3      	ldr	r3, [pc, #652]	; (8015d50 <_printf_float+0x2f8>)
 8015ac4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015ac8:	f7eb f82a 	bl	8000b20 <__aeabi_dcmple>
 8015acc:	bb30      	cbnz	r0, 8015b1c <_printf_float+0xc4>
 8015ace:	2200      	movs	r2, #0
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	4640      	mov	r0, r8
 8015ad4:	4649      	mov	r1, r9
 8015ad6:	f7eb f819 	bl	8000b0c <__aeabi_dcmplt>
 8015ada:	b110      	cbz	r0, 8015ae2 <_printf_float+0x8a>
 8015adc:	232d      	movs	r3, #45	; 0x2d
 8015ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ae2:	4a9c      	ldr	r2, [pc, #624]	; (8015d54 <_printf_float+0x2fc>)
 8015ae4:	4b9c      	ldr	r3, [pc, #624]	; (8015d58 <_printf_float+0x300>)
 8015ae6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015aea:	bf8c      	ite	hi
 8015aec:	4690      	movhi	r8, r2
 8015aee:	4698      	movls	r8, r3
 8015af0:	2303      	movs	r3, #3
 8015af2:	f02b 0204 	bic.w	r2, fp, #4
 8015af6:	6123      	str	r3, [r4, #16]
 8015af8:	6022      	str	r2, [r4, #0]
 8015afa:	f04f 0900 	mov.w	r9, #0
 8015afe:	9700      	str	r7, [sp, #0]
 8015b00:	4633      	mov	r3, r6
 8015b02:	aa0b      	add	r2, sp, #44	; 0x2c
 8015b04:	4621      	mov	r1, r4
 8015b06:	4628      	mov	r0, r5
 8015b08:	f000 f9e6 	bl	8015ed8 <_printf_common>
 8015b0c:	3001      	adds	r0, #1
 8015b0e:	f040 808d 	bne.w	8015c2c <_printf_float+0x1d4>
 8015b12:	f04f 30ff 	mov.w	r0, #4294967295
 8015b16:	b00d      	add	sp, #52	; 0x34
 8015b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b1c:	4642      	mov	r2, r8
 8015b1e:	464b      	mov	r3, r9
 8015b20:	4640      	mov	r0, r8
 8015b22:	4649      	mov	r1, r9
 8015b24:	f7eb f81a 	bl	8000b5c <__aeabi_dcmpun>
 8015b28:	b110      	cbz	r0, 8015b30 <_printf_float+0xd8>
 8015b2a:	4a8c      	ldr	r2, [pc, #560]	; (8015d5c <_printf_float+0x304>)
 8015b2c:	4b8c      	ldr	r3, [pc, #560]	; (8015d60 <_printf_float+0x308>)
 8015b2e:	e7da      	b.n	8015ae6 <_printf_float+0x8e>
 8015b30:	6861      	ldr	r1, [r4, #4]
 8015b32:	1c4b      	adds	r3, r1, #1
 8015b34:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015b38:	a80a      	add	r0, sp, #40	; 0x28
 8015b3a:	d13e      	bne.n	8015bba <_printf_float+0x162>
 8015b3c:	2306      	movs	r3, #6
 8015b3e:	6063      	str	r3, [r4, #4]
 8015b40:	2300      	movs	r3, #0
 8015b42:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015b46:	ab09      	add	r3, sp, #36	; 0x24
 8015b48:	9300      	str	r3, [sp, #0]
 8015b4a:	ec49 8b10 	vmov	d0, r8, r9
 8015b4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015b52:	6022      	str	r2, [r4, #0]
 8015b54:	f8cd a004 	str.w	sl, [sp, #4]
 8015b58:	6861      	ldr	r1, [r4, #4]
 8015b5a:	4628      	mov	r0, r5
 8015b5c:	f7ff fee8 	bl	8015930 <__cvt>
 8015b60:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015b64:	2b47      	cmp	r3, #71	; 0x47
 8015b66:	4680      	mov	r8, r0
 8015b68:	d109      	bne.n	8015b7e <_printf_float+0x126>
 8015b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b6c:	1cd8      	adds	r0, r3, #3
 8015b6e:	db02      	blt.n	8015b76 <_printf_float+0x11e>
 8015b70:	6862      	ldr	r2, [r4, #4]
 8015b72:	4293      	cmp	r3, r2
 8015b74:	dd47      	ble.n	8015c06 <_printf_float+0x1ae>
 8015b76:	f1aa 0a02 	sub.w	sl, sl, #2
 8015b7a:	fa5f fa8a 	uxtb.w	sl, sl
 8015b7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015b84:	d824      	bhi.n	8015bd0 <_printf_float+0x178>
 8015b86:	3901      	subs	r1, #1
 8015b88:	4652      	mov	r2, sl
 8015b8a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015b8e:	9109      	str	r1, [sp, #36]	; 0x24
 8015b90:	f7ff ff2f 	bl	80159f2 <__exponent>
 8015b94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015b96:	1813      	adds	r3, r2, r0
 8015b98:	2a01      	cmp	r2, #1
 8015b9a:	4681      	mov	r9, r0
 8015b9c:	6123      	str	r3, [r4, #16]
 8015b9e:	dc02      	bgt.n	8015ba6 <_printf_float+0x14e>
 8015ba0:	6822      	ldr	r2, [r4, #0]
 8015ba2:	07d1      	lsls	r1, r2, #31
 8015ba4:	d501      	bpl.n	8015baa <_printf_float+0x152>
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	6123      	str	r3, [r4, #16]
 8015baa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d0a5      	beq.n	8015afe <_printf_float+0xa6>
 8015bb2:	232d      	movs	r3, #45	; 0x2d
 8015bb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015bb8:	e7a1      	b.n	8015afe <_printf_float+0xa6>
 8015bba:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015bbe:	f000 8177 	beq.w	8015eb0 <_printf_float+0x458>
 8015bc2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015bc6:	d1bb      	bne.n	8015b40 <_printf_float+0xe8>
 8015bc8:	2900      	cmp	r1, #0
 8015bca:	d1b9      	bne.n	8015b40 <_printf_float+0xe8>
 8015bcc:	2301      	movs	r3, #1
 8015bce:	e7b6      	b.n	8015b3e <_printf_float+0xe6>
 8015bd0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015bd4:	d119      	bne.n	8015c0a <_printf_float+0x1b2>
 8015bd6:	2900      	cmp	r1, #0
 8015bd8:	6863      	ldr	r3, [r4, #4]
 8015bda:	dd0c      	ble.n	8015bf6 <_printf_float+0x19e>
 8015bdc:	6121      	str	r1, [r4, #16]
 8015bde:	b913      	cbnz	r3, 8015be6 <_printf_float+0x18e>
 8015be0:	6822      	ldr	r2, [r4, #0]
 8015be2:	07d2      	lsls	r2, r2, #31
 8015be4:	d502      	bpl.n	8015bec <_printf_float+0x194>
 8015be6:	3301      	adds	r3, #1
 8015be8:	440b      	add	r3, r1
 8015bea:	6123      	str	r3, [r4, #16]
 8015bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bee:	65a3      	str	r3, [r4, #88]	; 0x58
 8015bf0:	f04f 0900 	mov.w	r9, #0
 8015bf4:	e7d9      	b.n	8015baa <_printf_float+0x152>
 8015bf6:	b913      	cbnz	r3, 8015bfe <_printf_float+0x1a6>
 8015bf8:	6822      	ldr	r2, [r4, #0]
 8015bfa:	07d0      	lsls	r0, r2, #31
 8015bfc:	d501      	bpl.n	8015c02 <_printf_float+0x1aa>
 8015bfe:	3302      	adds	r3, #2
 8015c00:	e7f3      	b.n	8015bea <_printf_float+0x192>
 8015c02:	2301      	movs	r3, #1
 8015c04:	e7f1      	b.n	8015bea <_printf_float+0x192>
 8015c06:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015c0a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015c0e:	4293      	cmp	r3, r2
 8015c10:	db05      	blt.n	8015c1e <_printf_float+0x1c6>
 8015c12:	6822      	ldr	r2, [r4, #0]
 8015c14:	6123      	str	r3, [r4, #16]
 8015c16:	07d1      	lsls	r1, r2, #31
 8015c18:	d5e8      	bpl.n	8015bec <_printf_float+0x194>
 8015c1a:	3301      	adds	r3, #1
 8015c1c:	e7e5      	b.n	8015bea <_printf_float+0x192>
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	bfd4      	ite	le
 8015c22:	f1c3 0302 	rsble	r3, r3, #2
 8015c26:	2301      	movgt	r3, #1
 8015c28:	4413      	add	r3, r2
 8015c2a:	e7de      	b.n	8015bea <_printf_float+0x192>
 8015c2c:	6823      	ldr	r3, [r4, #0]
 8015c2e:	055a      	lsls	r2, r3, #21
 8015c30:	d407      	bmi.n	8015c42 <_printf_float+0x1ea>
 8015c32:	6923      	ldr	r3, [r4, #16]
 8015c34:	4642      	mov	r2, r8
 8015c36:	4631      	mov	r1, r6
 8015c38:	4628      	mov	r0, r5
 8015c3a:	47b8      	blx	r7
 8015c3c:	3001      	adds	r0, #1
 8015c3e:	d12b      	bne.n	8015c98 <_printf_float+0x240>
 8015c40:	e767      	b.n	8015b12 <_printf_float+0xba>
 8015c42:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015c46:	f240 80dc 	bls.w	8015e02 <_printf_float+0x3aa>
 8015c4a:	2200      	movs	r2, #0
 8015c4c:	2300      	movs	r3, #0
 8015c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015c52:	f7ea ff51 	bl	8000af8 <__aeabi_dcmpeq>
 8015c56:	2800      	cmp	r0, #0
 8015c58:	d033      	beq.n	8015cc2 <_printf_float+0x26a>
 8015c5a:	2301      	movs	r3, #1
 8015c5c:	4a41      	ldr	r2, [pc, #260]	; (8015d64 <_printf_float+0x30c>)
 8015c5e:	4631      	mov	r1, r6
 8015c60:	4628      	mov	r0, r5
 8015c62:	47b8      	blx	r7
 8015c64:	3001      	adds	r0, #1
 8015c66:	f43f af54 	beq.w	8015b12 <_printf_float+0xba>
 8015c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	db02      	blt.n	8015c78 <_printf_float+0x220>
 8015c72:	6823      	ldr	r3, [r4, #0]
 8015c74:	07d8      	lsls	r0, r3, #31
 8015c76:	d50f      	bpl.n	8015c98 <_printf_float+0x240>
 8015c78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c7c:	4631      	mov	r1, r6
 8015c7e:	4628      	mov	r0, r5
 8015c80:	47b8      	blx	r7
 8015c82:	3001      	adds	r0, #1
 8015c84:	f43f af45 	beq.w	8015b12 <_printf_float+0xba>
 8015c88:	f04f 0800 	mov.w	r8, #0
 8015c8c:	f104 091a 	add.w	r9, r4, #26
 8015c90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c92:	3b01      	subs	r3, #1
 8015c94:	4543      	cmp	r3, r8
 8015c96:	dc09      	bgt.n	8015cac <_printf_float+0x254>
 8015c98:	6823      	ldr	r3, [r4, #0]
 8015c9a:	079b      	lsls	r3, r3, #30
 8015c9c:	f100 8103 	bmi.w	8015ea6 <_printf_float+0x44e>
 8015ca0:	68e0      	ldr	r0, [r4, #12]
 8015ca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ca4:	4298      	cmp	r0, r3
 8015ca6:	bfb8      	it	lt
 8015ca8:	4618      	movlt	r0, r3
 8015caa:	e734      	b.n	8015b16 <_printf_float+0xbe>
 8015cac:	2301      	movs	r3, #1
 8015cae:	464a      	mov	r2, r9
 8015cb0:	4631      	mov	r1, r6
 8015cb2:	4628      	mov	r0, r5
 8015cb4:	47b8      	blx	r7
 8015cb6:	3001      	adds	r0, #1
 8015cb8:	f43f af2b 	beq.w	8015b12 <_printf_float+0xba>
 8015cbc:	f108 0801 	add.w	r8, r8, #1
 8015cc0:	e7e6      	b.n	8015c90 <_printf_float+0x238>
 8015cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	dc2b      	bgt.n	8015d20 <_printf_float+0x2c8>
 8015cc8:	2301      	movs	r3, #1
 8015cca:	4a26      	ldr	r2, [pc, #152]	; (8015d64 <_printf_float+0x30c>)
 8015ccc:	4631      	mov	r1, r6
 8015cce:	4628      	mov	r0, r5
 8015cd0:	47b8      	blx	r7
 8015cd2:	3001      	adds	r0, #1
 8015cd4:	f43f af1d 	beq.w	8015b12 <_printf_float+0xba>
 8015cd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015cda:	b923      	cbnz	r3, 8015ce6 <_printf_float+0x28e>
 8015cdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cde:	b913      	cbnz	r3, 8015ce6 <_printf_float+0x28e>
 8015ce0:	6823      	ldr	r3, [r4, #0]
 8015ce2:	07d9      	lsls	r1, r3, #31
 8015ce4:	d5d8      	bpl.n	8015c98 <_printf_float+0x240>
 8015ce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015cea:	4631      	mov	r1, r6
 8015cec:	4628      	mov	r0, r5
 8015cee:	47b8      	blx	r7
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	f43f af0e 	beq.w	8015b12 <_printf_float+0xba>
 8015cf6:	f04f 0900 	mov.w	r9, #0
 8015cfa:	f104 0a1a 	add.w	sl, r4, #26
 8015cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d00:	425b      	negs	r3, r3
 8015d02:	454b      	cmp	r3, r9
 8015d04:	dc01      	bgt.n	8015d0a <_printf_float+0x2b2>
 8015d06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d08:	e794      	b.n	8015c34 <_printf_float+0x1dc>
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	4652      	mov	r2, sl
 8015d0e:	4631      	mov	r1, r6
 8015d10:	4628      	mov	r0, r5
 8015d12:	47b8      	blx	r7
 8015d14:	3001      	adds	r0, #1
 8015d16:	f43f aefc 	beq.w	8015b12 <_printf_float+0xba>
 8015d1a:	f109 0901 	add.w	r9, r9, #1
 8015d1e:	e7ee      	b.n	8015cfe <_printf_float+0x2a6>
 8015d20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015d22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015d24:	429a      	cmp	r2, r3
 8015d26:	bfa8      	it	ge
 8015d28:	461a      	movge	r2, r3
 8015d2a:	2a00      	cmp	r2, #0
 8015d2c:	4691      	mov	r9, r2
 8015d2e:	dd07      	ble.n	8015d40 <_printf_float+0x2e8>
 8015d30:	4613      	mov	r3, r2
 8015d32:	4631      	mov	r1, r6
 8015d34:	4642      	mov	r2, r8
 8015d36:	4628      	mov	r0, r5
 8015d38:	47b8      	blx	r7
 8015d3a:	3001      	adds	r0, #1
 8015d3c:	f43f aee9 	beq.w	8015b12 <_printf_float+0xba>
 8015d40:	f104 031a 	add.w	r3, r4, #26
 8015d44:	f04f 0b00 	mov.w	fp, #0
 8015d48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015d4c:	9306      	str	r3, [sp, #24]
 8015d4e:	e015      	b.n	8015d7c <_printf_float+0x324>
 8015d50:	7fefffff 	.word	0x7fefffff
 8015d54:	0801a3bc 	.word	0x0801a3bc
 8015d58:	0801a3b8 	.word	0x0801a3b8
 8015d5c:	0801a3c4 	.word	0x0801a3c4
 8015d60:	0801a3c0 	.word	0x0801a3c0
 8015d64:	0801a57b 	.word	0x0801a57b
 8015d68:	2301      	movs	r3, #1
 8015d6a:	9a06      	ldr	r2, [sp, #24]
 8015d6c:	4631      	mov	r1, r6
 8015d6e:	4628      	mov	r0, r5
 8015d70:	47b8      	blx	r7
 8015d72:	3001      	adds	r0, #1
 8015d74:	f43f aecd 	beq.w	8015b12 <_printf_float+0xba>
 8015d78:	f10b 0b01 	add.w	fp, fp, #1
 8015d7c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015d80:	ebaa 0309 	sub.w	r3, sl, r9
 8015d84:	455b      	cmp	r3, fp
 8015d86:	dcef      	bgt.n	8015d68 <_printf_float+0x310>
 8015d88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	44d0      	add	r8, sl
 8015d90:	db15      	blt.n	8015dbe <_printf_float+0x366>
 8015d92:	6823      	ldr	r3, [r4, #0]
 8015d94:	07da      	lsls	r2, r3, #31
 8015d96:	d412      	bmi.n	8015dbe <_printf_float+0x366>
 8015d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015d9c:	eba3 020a 	sub.w	r2, r3, sl
 8015da0:	eba3 0a01 	sub.w	sl, r3, r1
 8015da4:	4592      	cmp	sl, r2
 8015da6:	bfa8      	it	ge
 8015da8:	4692      	movge	sl, r2
 8015daa:	f1ba 0f00 	cmp.w	sl, #0
 8015dae:	dc0e      	bgt.n	8015dce <_printf_float+0x376>
 8015db0:	f04f 0800 	mov.w	r8, #0
 8015db4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015db8:	f104 091a 	add.w	r9, r4, #26
 8015dbc:	e019      	b.n	8015df2 <_printf_float+0x39a>
 8015dbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015dc2:	4631      	mov	r1, r6
 8015dc4:	4628      	mov	r0, r5
 8015dc6:	47b8      	blx	r7
 8015dc8:	3001      	adds	r0, #1
 8015dca:	d1e5      	bne.n	8015d98 <_printf_float+0x340>
 8015dcc:	e6a1      	b.n	8015b12 <_printf_float+0xba>
 8015dce:	4653      	mov	r3, sl
 8015dd0:	4642      	mov	r2, r8
 8015dd2:	4631      	mov	r1, r6
 8015dd4:	4628      	mov	r0, r5
 8015dd6:	47b8      	blx	r7
 8015dd8:	3001      	adds	r0, #1
 8015dda:	d1e9      	bne.n	8015db0 <_printf_float+0x358>
 8015ddc:	e699      	b.n	8015b12 <_printf_float+0xba>
 8015dde:	2301      	movs	r3, #1
 8015de0:	464a      	mov	r2, r9
 8015de2:	4631      	mov	r1, r6
 8015de4:	4628      	mov	r0, r5
 8015de6:	47b8      	blx	r7
 8015de8:	3001      	adds	r0, #1
 8015dea:	f43f ae92 	beq.w	8015b12 <_printf_float+0xba>
 8015dee:	f108 0801 	add.w	r8, r8, #1
 8015df2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015df6:	1a9b      	subs	r3, r3, r2
 8015df8:	eba3 030a 	sub.w	r3, r3, sl
 8015dfc:	4543      	cmp	r3, r8
 8015dfe:	dcee      	bgt.n	8015dde <_printf_float+0x386>
 8015e00:	e74a      	b.n	8015c98 <_printf_float+0x240>
 8015e02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e04:	2a01      	cmp	r2, #1
 8015e06:	dc01      	bgt.n	8015e0c <_printf_float+0x3b4>
 8015e08:	07db      	lsls	r3, r3, #31
 8015e0a:	d53a      	bpl.n	8015e82 <_printf_float+0x42a>
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	4642      	mov	r2, r8
 8015e10:	4631      	mov	r1, r6
 8015e12:	4628      	mov	r0, r5
 8015e14:	47b8      	blx	r7
 8015e16:	3001      	adds	r0, #1
 8015e18:	f43f ae7b 	beq.w	8015b12 <_printf_float+0xba>
 8015e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015e20:	4631      	mov	r1, r6
 8015e22:	4628      	mov	r0, r5
 8015e24:	47b8      	blx	r7
 8015e26:	3001      	adds	r0, #1
 8015e28:	f108 0801 	add.w	r8, r8, #1
 8015e2c:	f43f ae71 	beq.w	8015b12 <_printf_float+0xba>
 8015e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e32:	2200      	movs	r2, #0
 8015e34:	f103 3aff 	add.w	sl, r3, #4294967295
 8015e38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	f7ea fe5b 	bl	8000af8 <__aeabi_dcmpeq>
 8015e42:	b9c8      	cbnz	r0, 8015e78 <_printf_float+0x420>
 8015e44:	4653      	mov	r3, sl
 8015e46:	4642      	mov	r2, r8
 8015e48:	4631      	mov	r1, r6
 8015e4a:	4628      	mov	r0, r5
 8015e4c:	47b8      	blx	r7
 8015e4e:	3001      	adds	r0, #1
 8015e50:	d10e      	bne.n	8015e70 <_printf_float+0x418>
 8015e52:	e65e      	b.n	8015b12 <_printf_float+0xba>
 8015e54:	2301      	movs	r3, #1
 8015e56:	4652      	mov	r2, sl
 8015e58:	4631      	mov	r1, r6
 8015e5a:	4628      	mov	r0, r5
 8015e5c:	47b8      	blx	r7
 8015e5e:	3001      	adds	r0, #1
 8015e60:	f43f ae57 	beq.w	8015b12 <_printf_float+0xba>
 8015e64:	f108 0801 	add.w	r8, r8, #1
 8015e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e6a:	3b01      	subs	r3, #1
 8015e6c:	4543      	cmp	r3, r8
 8015e6e:	dcf1      	bgt.n	8015e54 <_printf_float+0x3fc>
 8015e70:	464b      	mov	r3, r9
 8015e72:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015e76:	e6de      	b.n	8015c36 <_printf_float+0x1de>
 8015e78:	f04f 0800 	mov.w	r8, #0
 8015e7c:	f104 0a1a 	add.w	sl, r4, #26
 8015e80:	e7f2      	b.n	8015e68 <_printf_float+0x410>
 8015e82:	2301      	movs	r3, #1
 8015e84:	e7df      	b.n	8015e46 <_printf_float+0x3ee>
 8015e86:	2301      	movs	r3, #1
 8015e88:	464a      	mov	r2, r9
 8015e8a:	4631      	mov	r1, r6
 8015e8c:	4628      	mov	r0, r5
 8015e8e:	47b8      	blx	r7
 8015e90:	3001      	adds	r0, #1
 8015e92:	f43f ae3e 	beq.w	8015b12 <_printf_float+0xba>
 8015e96:	f108 0801 	add.w	r8, r8, #1
 8015e9a:	68e3      	ldr	r3, [r4, #12]
 8015e9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015e9e:	1a9b      	subs	r3, r3, r2
 8015ea0:	4543      	cmp	r3, r8
 8015ea2:	dcf0      	bgt.n	8015e86 <_printf_float+0x42e>
 8015ea4:	e6fc      	b.n	8015ca0 <_printf_float+0x248>
 8015ea6:	f04f 0800 	mov.w	r8, #0
 8015eaa:	f104 0919 	add.w	r9, r4, #25
 8015eae:	e7f4      	b.n	8015e9a <_printf_float+0x442>
 8015eb0:	2900      	cmp	r1, #0
 8015eb2:	f43f ae8b 	beq.w	8015bcc <_printf_float+0x174>
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015ebc:	ab09      	add	r3, sp, #36	; 0x24
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	ec49 8b10 	vmov	d0, r8, r9
 8015ec4:	6022      	str	r2, [r4, #0]
 8015ec6:	f8cd a004 	str.w	sl, [sp, #4]
 8015eca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015ece:	4628      	mov	r0, r5
 8015ed0:	f7ff fd2e 	bl	8015930 <__cvt>
 8015ed4:	4680      	mov	r8, r0
 8015ed6:	e648      	b.n	8015b6a <_printf_float+0x112>

08015ed8 <_printf_common>:
 8015ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015edc:	4691      	mov	r9, r2
 8015ede:	461f      	mov	r7, r3
 8015ee0:	688a      	ldr	r2, [r1, #8]
 8015ee2:	690b      	ldr	r3, [r1, #16]
 8015ee4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	bfb8      	it	lt
 8015eec:	4613      	movlt	r3, r2
 8015eee:	f8c9 3000 	str.w	r3, [r9]
 8015ef2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015ef6:	4606      	mov	r6, r0
 8015ef8:	460c      	mov	r4, r1
 8015efa:	b112      	cbz	r2, 8015f02 <_printf_common+0x2a>
 8015efc:	3301      	adds	r3, #1
 8015efe:	f8c9 3000 	str.w	r3, [r9]
 8015f02:	6823      	ldr	r3, [r4, #0]
 8015f04:	0699      	lsls	r1, r3, #26
 8015f06:	bf42      	ittt	mi
 8015f08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015f0c:	3302      	addmi	r3, #2
 8015f0e:	f8c9 3000 	strmi.w	r3, [r9]
 8015f12:	6825      	ldr	r5, [r4, #0]
 8015f14:	f015 0506 	ands.w	r5, r5, #6
 8015f18:	d107      	bne.n	8015f2a <_printf_common+0x52>
 8015f1a:	f104 0a19 	add.w	sl, r4, #25
 8015f1e:	68e3      	ldr	r3, [r4, #12]
 8015f20:	f8d9 2000 	ldr.w	r2, [r9]
 8015f24:	1a9b      	subs	r3, r3, r2
 8015f26:	42ab      	cmp	r3, r5
 8015f28:	dc28      	bgt.n	8015f7c <_printf_common+0xa4>
 8015f2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015f2e:	6822      	ldr	r2, [r4, #0]
 8015f30:	3300      	adds	r3, #0
 8015f32:	bf18      	it	ne
 8015f34:	2301      	movne	r3, #1
 8015f36:	0692      	lsls	r2, r2, #26
 8015f38:	d42d      	bmi.n	8015f96 <_printf_common+0xbe>
 8015f3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f3e:	4639      	mov	r1, r7
 8015f40:	4630      	mov	r0, r6
 8015f42:	47c0      	blx	r8
 8015f44:	3001      	adds	r0, #1
 8015f46:	d020      	beq.n	8015f8a <_printf_common+0xb2>
 8015f48:	6823      	ldr	r3, [r4, #0]
 8015f4a:	68e5      	ldr	r5, [r4, #12]
 8015f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8015f50:	f003 0306 	and.w	r3, r3, #6
 8015f54:	2b04      	cmp	r3, #4
 8015f56:	bf08      	it	eq
 8015f58:	1aad      	subeq	r5, r5, r2
 8015f5a:	68a3      	ldr	r3, [r4, #8]
 8015f5c:	6922      	ldr	r2, [r4, #16]
 8015f5e:	bf0c      	ite	eq
 8015f60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015f64:	2500      	movne	r5, #0
 8015f66:	4293      	cmp	r3, r2
 8015f68:	bfc4      	itt	gt
 8015f6a:	1a9b      	subgt	r3, r3, r2
 8015f6c:	18ed      	addgt	r5, r5, r3
 8015f6e:	f04f 0900 	mov.w	r9, #0
 8015f72:	341a      	adds	r4, #26
 8015f74:	454d      	cmp	r5, r9
 8015f76:	d11a      	bne.n	8015fae <_printf_common+0xd6>
 8015f78:	2000      	movs	r0, #0
 8015f7a:	e008      	b.n	8015f8e <_printf_common+0xb6>
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	4652      	mov	r2, sl
 8015f80:	4639      	mov	r1, r7
 8015f82:	4630      	mov	r0, r6
 8015f84:	47c0      	blx	r8
 8015f86:	3001      	adds	r0, #1
 8015f88:	d103      	bne.n	8015f92 <_printf_common+0xba>
 8015f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f92:	3501      	adds	r5, #1
 8015f94:	e7c3      	b.n	8015f1e <_printf_common+0x46>
 8015f96:	18e1      	adds	r1, r4, r3
 8015f98:	1c5a      	adds	r2, r3, #1
 8015f9a:	2030      	movs	r0, #48	; 0x30
 8015f9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015fa0:	4422      	add	r2, r4
 8015fa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015fa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015faa:	3302      	adds	r3, #2
 8015fac:	e7c5      	b.n	8015f3a <_printf_common+0x62>
 8015fae:	2301      	movs	r3, #1
 8015fb0:	4622      	mov	r2, r4
 8015fb2:	4639      	mov	r1, r7
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	47c0      	blx	r8
 8015fb8:	3001      	adds	r0, #1
 8015fba:	d0e6      	beq.n	8015f8a <_printf_common+0xb2>
 8015fbc:	f109 0901 	add.w	r9, r9, #1
 8015fc0:	e7d8      	b.n	8015f74 <_printf_common+0x9c>
	...

08015fc4 <_printf_i>:
 8015fc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015fc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015fcc:	460c      	mov	r4, r1
 8015fce:	7e09      	ldrb	r1, [r1, #24]
 8015fd0:	b085      	sub	sp, #20
 8015fd2:	296e      	cmp	r1, #110	; 0x6e
 8015fd4:	4617      	mov	r7, r2
 8015fd6:	4606      	mov	r6, r0
 8015fd8:	4698      	mov	r8, r3
 8015fda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015fdc:	f000 80b3 	beq.w	8016146 <_printf_i+0x182>
 8015fe0:	d822      	bhi.n	8016028 <_printf_i+0x64>
 8015fe2:	2963      	cmp	r1, #99	; 0x63
 8015fe4:	d036      	beq.n	8016054 <_printf_i+0x90>
 8015fe6:	d80a      	bhi.n	8015ffe <_printf_i+0x3a>
 8015fe8:	2900      	cmp	r1, #0
 8015fea:	f000 80b9 	beq.w	8016160 <_printf_i+0x19c>
 8015fee:	2958      	cmp	r1, #88	; 0x58
 8015ff0:	f000 8083 	beq.w	80160fa <_printf_i+0x136>
 8015ff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ff8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015ffc:	e032      	b.n	8016064 <_printf_i+0xa0>
 8015ffe:	2964      	cmp	r1, #100	; 0x64
 8016000:	d001      	beq.n	8016006 <_printf_i+0x42>
 8016002:	2969      	cmp	r1, #105	; 0x69
 8016004:	d1f6      	bne.n	8015ff4 <_printf_i+0x30>
 8016006:	6820      	ldr	r0, [r4, #0]
 8016008:	6813      	ldr	r3, [r2, #0]
 801600a:	0605      	lsls	r5, r0, #24
 801600c:	f103 0104 	add.w	r1, r3, #4
 8016010:	d52a      	bpl.n	8016068 <_printf_i+0xa4>
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	6011      	str	r1, [r2, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	da03      	bge.n	8016022 <_printf_i+0x5e>
 801601a:	222d      	movs	r2, #45	; 0x2d
 801601c:	425b      	negs	r3, r3
 801601e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016022:	486f      	ldr	r0, [pc, #444]	; (80161e0 <_printf_i+0x21c>)
 8016024:	220a      	movs	r2, #10
 8016026:	e039      	b.n	801609c <_printf_i+0xd8>
 8016028:	2973      	cmp	r1, #115	; 0x73
 801602a:	f000 809d 	beq.w	8016168 <_printf_i+0x1a4>
 801602e:	d808      	bhi.n	8016042 <_printf_i+0x7e>
 8016030:	296f      	cmp	r1, #111	; 0x6f
 8016032:	d020      	beq.n	8016076 <_printf_i+0xb2>
 8016034:	2970      	cmp	r1, #112	; 0x70
 8016036:	d1dd      	bne.n	8015ff4 <_printf_i+0x30>
 8016038:	6823      	ldr	r3, [r4, #0]
 801603a:	f043 0320 	orr.w	r3, r3, #32
 801603e:	6023      	str	r3, [r4, #0]
 8016040:	e003      	b.n	801604a <_printf_i+0x86>
 8016042:	2975      	cmp	r1, #117	; 0x75
 8016044:	d017      	beq.n	8016076 <_printf_i+0xb2>
 8016046:	2978      	cmp	r1, #120	; 0x78
 8016048:	d1d4      	bne.n	8015ff4 <_printf_i+0x30>
 801604a:	2378      	movs	r3, #120	; 0x78
 801604c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016050:	4864      	ldr	r0, [pc, #400]	; (80161e4 <_printf_i+0x220>)
 8016052:	e055      	b.n	8016100 <_printf_i+0x13c>
 8016054:	6813      	ldr	r3, [r2, #0]
 8016056:	1d19      	adds	r1, r3, #4
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	6011      	str	r1, [r2, #0]
 801605c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016060:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016064:	2301      	movs	r3, #1
 8016066:	e08c      	b.n	8016182 <_printf_i+0x1be>
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	6011      	str	r1, [r2, #0]
 801606c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8016070:	bf18      	it	ne
 8016072:	b21b      	sxthne	r3, r3
 8016074:	e7cf      	b.n	8016016 <_printf_i+0x52>
 8016076:	6813      	ldr	r3, [r2, #0]
 8016078:	6825      	ldr	r5, [r4, #0]
 801607a:	1d18      	adds	r0, r3, #4
 801607c:	6010      	str	r0, [r2, #0]
 801607e:	0628      	lsls	r0, r5, #24
 8016080:	d501      	bpl.n	8016086 <_printf_i+0xc2>
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	e002      	b.n	801608c <_printf_i+0xc8>
 8016086:	0668      	lsls	r0, r5, #25
 8016088:	d5fb      	bpl.n	8016082 <_printf_i+0xbe>
 801608a:	881b      	ldrh	r3, [r3, #0]
 801608c:	4854      	ldr	r0, [pc, #336]	; (80161e0 <_printf_i+0x21c>)
 801608e:	296f      	cmp	r1, #111	; 0x6f
 8016090:	bf14      	ite	ne
 8016092:	220a      	movne	r2, #10
 8016094:	2208      	moveq	r2, #8
 8016096:	2100      	movs	r1, #0
 8016098:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801609c:	6865      	ldr	r5, [r4, #4]
 801609e:	60a5      	str	r5, [r4, #8]
 80160a0:	2d00      	cmp	r5, #0
 80160a2:	f2c0 8095 	blt.w	80161d0 <_printf_i+0x20c>
 80160a6:	6821      	ldr	r1, [r4, #0]
 80160a8:	f021 0104 	bic.w	r1, r1, #4
 80160ac:	6021      	str	r1, [r4, #0]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d13d      	bne.n	801612e <_printf_i+0x16a>
 80160b2:	2d00      	cmp	r5, #0
 80160b4:	f040 808e 	bne.w	80161d4 <_printf_i+0x210>
 80160b8:	4665      	mov	r5, ip
 80160ba:	2a08      	cmp	r2, #8
 80160bc:	d10b      	bne.n	80160d6 <_printf_i+0x112>
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	07db      	lsls	r3, r3, #31
 80160c2:	d508      	bpl.n	80160d6 <_printf_i+0x112>
 80160c4:	6923      	ldr	r3, [r4, #16]
 80160c6:	6862      	ldr	r2, [r4, #4]
 80160c8:	429a      	cmp	r2, r3
 80160ca:	bfde      	ittt	le
 80160cc:	2330      	movle	r3, #48	; 0x30
 80160ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80160d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80160d6:	ebac 0305 	sub.w	r3, ip, r5
 80160da:	6123      	str	r3, [r4, #16]
 80160dc:	f8cd 8000 	str.w	r8, [sp]
 80160e0:	463b      	mov	r3, r7
 80160e2:	aa03      	add	r2, sp, #12
 80160e4:	4621      	mov	r1, r4
 80160e6:	4630      	mov	r0, r6
 80160e8:	f7ff fef6 	bl	8015ed8 <_printf_common>
 80160ec:	3001      	adds	r0, #1
 80160ee:	d14d      	bne.n	801618c <_printf_i+0x1c8>
 80160f0:	f04f 30ff 	mov.w	r0, #4294967295
 80160f4:	b005      	add	sp, #20
 80160f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80160fa:	4839      	ldr	r0, [pc, #228]	; (80161e0 <_printf_i+0x21c>)
 80160fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8016100:	6813      	ldr	r3, [r2, #0]
 8016102:	6821      	ldr	r1, [r4, #0]
 8016104:	1d1d      	adds	r5, r3, #4
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	6015      	str	r5, [r2, #0]
 801610a:	060a      	lsls	r2, r1, #24
 801610c:	d50b      	bpl.n	8016126 <_printf_i+0x162>
 801610e:	07ca      	lsls	r2, r1, #31
 8016110:	bf44      	itt	mi
 8016112:	f041 0120 	orrmi.w	r1, r1, #32
 8016116:	6021      	strmi	r1, [r4, #0]
 8016118:	b91b      	cbnz	r3, 8016122 <_printf_i+0x15e>
 801611a:	6822      	ldr	r2, [r4, #0]
 801611c:	f022 0220 	bic.w	r2, r2, #32
 8016120:	6022      	str	r2, [r4, #0]
 8016122:	2210      	movs	r2, #16
 8016124:	e7b7      	b.n	8016096 <_printf_i+0xd2>
 8016126:	064d      	lsls	r5, r1, #25
 8016128:	bf48      	it	mi
 801612a:	b29b      	uxthmi	r3, r3
 801612c:	e7ef      	b.n	801610e <_printf_i+0x14a>
 801612e:	4665      	mov	r5, ip
 8016130:	fbb3 f1f2 	udiv	r1, r3, r2
 8016134:	fb02 3311 	mls	r3, r2, r1, r3
 8016138:	5cc3      	ldrb	r3, [r0, r3]
 801613a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801613e:	460b      	mov	r3, r1
 8016140:	2900      	cmp	r1, #0
 8016142:	d1f5      	bne.n	8016130 <_printf_i+0x16c>
 8016144:	e7b9      	b.n	80160ba <_printf_i+0xf6>
 8016146:	6813      	ldr	r3, [r2, #0]
 8016148:	6825      	ldr	r5, [r4, #0]
 801614a:	6961      	ldr	r1, [r4, #20]
 801614c:	1d18      	adds	r0, r3, #4
 801614e:	6010      	str	r0, [r2, #0]
 8016150:	0628      	lsls	r0, r5, #24
 8016152:	681b      	ldr	r3, [r3, #0]
 8016154:	d501      	bpl.n	801615a <_printf_i+0x196>
 8016156:	6019      	str	r1, [r3, #0]
 8016158:	e002      	b.n	8016160 <_printf_i+0x19c>
 801615a:	066a      	lsls	r2, r5, #25
 801615c:	d5fb      	bpl.n	8016156 <_printf_i+0x192>
 801615e:	8019      	strh	r1, [r3, #0]
 8016160:	2300      	movs	r3, #0
 8016162:	6123      	str	r3, [r4, #16]
 8016164:	4665      	mov	r5, ip
 8016166:	e7b9      	b.n	80160dc <_printf_i+0x118>
 8016168:	6813      	ldr	r3, [r2, #0]
 801616a:	1d19      	adds	r1, r3, #4
 801616c:	6011      	str	r1, [r2, #0]
 801616e:	681d      	ldr	r5, [r3, #0]
 8016170:	6862      	ldr	r2, [r4, #4]
 8016172:	2100      	movs	r1, #0
 8016174:	4628      	mov	r0, r5
 8016176:	f7ea f84b 	bl	8000210 <memchr>
 801617a:	b108      	cbz	r0, 8016180 <_printf_i+0x1bc>
 801617c:	1b40      	subs	r0, r0, r5
 801617e:	6060      	str	r0, [r4, #4]
 8016180:	6863      	ldr	r3, [r4, #4]
 8016182:	6123      	str	r3, [r4, #16]
 8016184:	2300      	movs	r3, #0
 8016186:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801618a:	e7a7      	b.n	80160dc <_printf_i+0x118>
 801618c:	6923      	ldr	r3, [r4, #16]
 801618e:	462a      	mov	r2, r5
 8016190:	4639      	mov	r1, r7
 8016192:	4630      	mov	r0, r6
 8016194:	47c0      	blx	r8
 8016196:	3001      	adds	r0, #1
 8016198:	d0aa      	beq.n	80160f0 <_printf_i+0x12c>
 801619a:	6823      	ldr	r3, [r4, #0]
 801619c:	079b      	lsls	r3, r3, #30
 801619e:	d413      	bmi.n	80161c8 <_printf_i+0x204>
 80161a0:	68e0      	ldr	r0, [r4, #12]
 80161a2:	9b03      	ldr	r3, [sp, #12]
 80161a4:	4298      	cmp	r0, r3
 80161a6:	bfb8      	it	lt
 80161a8:	4618      	movlt	r0, r3
 80161aa:	e7a3      	b.n	80160f4 <_printf_i+0x130>
 80161ac:	2301      	movs	r3, #1
 80161ae:	464a      	mov	r2, r9
 80161b0:	4639      	mov	r1, r7
 80161b2:	4630      	mov	r0, r6
 80161b4:	47c0      	blx	r8
 80161b6:	3001      	adds	r0, #1
 80161b8:	d09a      	beq.n	80160f0 <_printf_i+0x12c>
 80161ba:	3501      	adds	r5, #1
 80161bc:	68e3      	ldr	r3, [r4, #12]
 80161be:	9a03      	ldr	r2, [sp, #12]
 80161c0:	1a9b      	subs	r3, r3, r2
 80161c2:	42ab      	cmp	r3, r5
 80161c4:	dcf2      	bgt.n	80161ac <_printf_i+0x1e8>
 80161c6:	e7eb      	b.n	80161a0 <_printf_i+0x1dc>
 80161c8:	2500      	movs	r5, #0
 80161ca:	f104 0919 	add.w	r9, r4, #25
 80161ce:	e7f5      	b.n	80161bc <_printf_i+0x1f8>
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d1ac      	bne.n	801612e <_printf_i+0x16a>
 80161d4:	7803      	ldrb	r3, [r0, #0]
 80161d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80161da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80161de:	e76c      	b.n	80160ba <_printf_i+0xf6>
 80161e0:	0801a3c8 	.word	0x0801a3c8
 80161e4:	0801a3d9 	.word	0x0801a3d9

080161e8 <_scanf_float>:
 80161e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ec:	469a      	mov	sl, r3
 80161ee:	688b      	ldr	r3, [r1, #8]
 80161f0:	4616      	mov	r6, r2
 80161f2:	1e5a      	subs	r2, r3, #1
 80161f4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80161f8:	b087      	sub	sp, #28
 80161fa:	bf83      	ittte	hi
 80161fc:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016200:	189b      	addhi	r3, r3, r2
 8016202:	9301      	strhi	r3, [sp, #4]
 8016204:	2300      	movls	r3, #0
 8016206:	bf86      	itte	hi
 8016208:	f240 135d 	movwhi	r3, #349	; 0x15d
 801620c:	608b      	strhi	r3, [r1, #8]
 801620e:	9301      	strls	r3, [sp, #4]
 8016210:	680b      	ldr	r3, [r1, #0]
 8016212:	4688      	mov	r8, r1
 8016214:	f04f 0b00 	mov.w	fp, #0
 8016218:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801621c:	f848 3b1c 	str.w	r3, [r8], #28
 8016220:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8016224:	4607      	mov	r7, r0
 8016226:	460c      	mov	r4, r1
 8016228:	4645      	mov	r5, r8
 801622a:	465a      	mov	r2, fp
 801622c:	46d9      	mov	r9, fp
 801622e:	f8cd b008 	str.w	fp, [sp, #8]
 8016232:	68a1      	ldr	r1, [r4, #8]
 8016234:	b181      	cbz	r1, 8016258 <_scanf_float+0x70>
 8016236:	6833      	ldr	r3, [r6, #0]
 8016238:	781b      	ldrb	r3, [r3, #0]
 801623a:	2b49      	cmp	r3, #73	; 0x49
 801623c:	d071      	beq.n	8016322 <_scanf_float+0x13a>
 801623e:	d84d      	bhi.n	80162dc <_scanf_float+0xf4>
 8016240:	2b39      	cmp	r3, #57	; 0x39
 8016242:	d840      	bhi.n	80162c6 <_scanf_float+0xde>
 8016244:	2b31      	cmp	r3, #49	; 0x31
 8016246:	f080 8088 	bcs.w	801635a <_scanf_float+0x172>
 801624a:	2b2d      	cmp	r3, #45	; 0x2d
 801624c:	f000 8090 	beq.w	8016370 <_scanf_float+0x188>
 8016250:	d815      	bhi.n	801627e <_scanf_float+0x96>
 8016252:	2b2b      	cmp	r3, #43	; 0x2b
 8016254:	f000 808c 	beq.w	8016370 <_scanf_float+0x188>
 8016258:	f1b9 0f00 	cmp.w	r9, #0
 801625c:	d003      	beq.n	8016266 <_scanf_float+0x7e>
 801625e:	6823      	ldr	r3, [r4, #0]
 8016260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016264:	6023      	str	r3, [r4, #0]
 8016266:	3a01      	subs	r2, #1
 8016268:	2a01      	cmp	r2, #1
 801626a:	f200 80ea 	bhi.w	8016442 <_scanf_float+0x25a>
 801626e:	4545      	cmp	r5, r8
 8016270:	f200 80dc 	bhi.w	801642c <_scanf_float+0x244>
 8016274:	2601      	movs	r6, #1
 8016276:	4630      	mov	r0, r6
 8016278:	b007      	add	sp, #28
 801627a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801627e:	2b2e      	cmp	r3, #46	; 0x2e
 8016280:	f000 809f 	beq.w	80163c2 <_scanf_float+0x1da>
 8016284:	2b30      	cmp	r3, #48	; 0x30
 8016286:	d1e7      	bne.n	8016258 <_scanf_float+0x70>
 8016288:	6820      	ldr	r0, [r4, #0]
 801628a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801628e:	d064      	beq.n	801635a <_scanf_float+0x172>
 8016290:	9b01      	ldr	r3, [sp, #4]
 8016292:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8016296:	6020      	str	r0, [r4, #0]
 8016298:	f109 0901 	add.w	r9, r9, #1
 801629c:	b11b      	cbz	r3, 80162a6 <_scanf_float+0xbe>
 801629e:	3b01      	subs	r3, #1
 80162a0:	3101      	adds	r1, #1
 80162a2:	9301      	str	r3, [sp, #4]
 80162a4:	60a1      	str	r1, [r4, #8]
 80162a6:	68a3      	ldr	r3, [r4, #8]
 80162a8:	3b01      	subs	r3, #1
 80162aa:	60a3      	str	r3, [r4, #8]
 80162ac:	6923      	ldr	r3, [r4, #16]
 80162ae:	3301      	adds	r3, #1
 80162b0:	6123      	str	r3, [r4, #16]
 80162b2:	6873      	ldr	r3, [r6, #4]
 80162b4:	3b01      	subs	r3, #1
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	6073      	str	r3, [r6, #4]
 80162ba:	f340 80ac 	ble.w	8016416 <_scanf_float+0x22e>
 80162be:	6833      	ldr	r3, [r6, #0]
 80162c0:	3301      	adds	r3, #1
 80162c2:	6033      	str	r3, [r6, #0]
 80162c4:	e7b5      	b.n	8016232 <_scanf_float+0x4a>
 80162c6:	2b45      	cmp	r3, #69	; 0x45
 80162c8:	f000 8085 	beq.w	80163d6 <_scanf_float+0x1ee>
 80162cc:	2b46      	cmp	r3, #70	; 0x46
 80162ce:	d06a      	beq.n	80163a6 <_scanf_float+0x1be>
 80162d0:	2b41      	cmp	r3, #65	; 0x41
 80162d2:	d1c1      	bne.n	8016258 <_scanf_float+0x70>
 80162d4:	2a01      	cmp	r2, #1
 80162d6:	d1bf      	bne.n	8016258 <_scanf_float+0x70>
 80162d8:	2202      	movs	r2, #2
 80162da:	e046      	b.n	801636a <_scanf_float+0x182>
 80162dc:	2b65      	cmp	r3, #101	; 0x65
 80162de:	d07a      	beq.n	80163d6 <_scanf_float+0x1ee>
 80162e0:	d818      	bhi.n	8016314 <_scanf_float+0x12c>
 80162e2:	2b54      	cmp	r3, #84	; 0x54
 80162e4:	d066      	beq.n	80163b4 <_scanf_float+0x1cc>
 80162e6:	d811      	bhi.n	801630c <_scanf_float+0x124>
 80162e8:	2b4e      	cmp	r3, #78	; 0x4e
 80162ea:	d1b5      	bne.n	8016258 <_scanf_float+0x70>
 80162ec:	2a00      	cmp	r2, #0
 80162ee:	d146      	bne.n	801637e <_scanf_float+0x196>
 80162f0:	f1b9 0f00 	cmp.w	r9, #0
 80162f4:	d145      	bne.n	8016382 <_scanf_float+0x19a>
 80162f6:	6821      	ldr	r1, [r4, #0]
 80162f8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80162fc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016300:	d13f      	bne.n	8016382 <_scanf_float+0x19a>
 8016302:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016306:	6021      	str	r1, [r4, #0]
 8016308:	2201      	movs	r2, #1
 801630a:	e02e      	b.n	801636a <_scanf_float+0x182>
 801630c:	2b59      	cmp	r3, #89	; 0x59
 801630e:	d01e      	beq.n	801634e <_scanf_float+0x166>
 8016310:	2b61      	cmp	r3, #97	; 0x61
 8016312:	e7de      	b.n	80162d2 <_scanf_float+0xea>
 8016314:	2b6e      	cmp	r3, #110	; 0x6e
 8016316:	d0e9      	beq.n	80162ec <_scanf_float+0x104>
 8016318:	d815      	bhi.n	8016346 <_scanf_float+0x15e>
 801631a:	2b66      	cmp	r3, #102	; 0x66
 801631c:	d043      	beq.n	80163a6 <_scanf_float+0x1be>
 801631e:	2b69      	cmp	r3, #105	; 0x69
 8016320:	d19a      	bne.n	8016258 <_scanf_float+0x70>
 8016322:	f1bb 0f00 	cmp.w	fp, #0
 8016326:	d138      	bne.n	801639a <_scanf_float+0x1b2>
 8016328:	f1b9 0f00 	cmp.w	r9, #0
 801632c:	d197      	bne.n	801625e <_scanf_float+0x76>
 801632e:	6821      	ldr	r1, [r4, #0]
 8016330:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016334:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016338:	d195      	bne.n	8016266 <_scanf_float+0x7e>
 801633a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801633e:	6021      	str	r1, [r4, #0]
 8016340:	f04f 0b01 	mov.w	fp, #1
 8016344:	e011      	b.n	801636a <_scanf_float+0x182>
 8016346:	2b74      	cmp	r3, #116	; 0x74
 8016348:	d034      	beq.n	80163b4 <_scanf_float+0x1cc>
 801634a:	2b79      	cmp	r3, #121	; 0x79
 801634c:	d184      	bne.n	8016258 <_scanf_float+0x70>
 801634e:	f1bb 0f07 	cmp.w	fp, #7
 8016352:	d181      	bne.n	8016258 <_scanf_float+0x70>
 8016354:	f04f 0b08 	mov.w	fp, #8
 8016358:	e007      	b.n	801636a <_scanf_float+0x182>
 801635a:	eb12 0f0b 	cmn.w	r2, fp
 801635e:	f47f af7b 	bne.w	8016258 <_scanf_float+0x70>
 8016362:	6821      	ldr	r1, [r4, #0]
 8016364:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8016368:	6021      	str	r1, [r4, #0]
 801636a:	702b      	strb	r3, [r5, #0]
 801636c:	3501      	adds	r5, #1
 801636e:	e79a      	b.n	80162a6 <_scanf_float+0xbe>
 8016370:	6821      	ldr	r1, [r4, #0]
 8016372:	0608      	lsls	r0, r1, #24
 8016374:	f57f af70 	bpl.w	8016258 <_scanf_float+0x70>
 8016378:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801637c:	e7f4      	b.n	8016368 <_scanf_float+0x180>
 801637e:	2a02      	cmp	r2, #2
 8016380:	d047      	beq.n	8016412 <_scanf_float+0x22a>
 8016382:	f1bb 0f01 	cmp.w	fp, #1
 8016386:	d003      	beq.n	8016390 <_scanf_float+0x1a8>
 8016388:	f1bb 0f04 	cmp.w	fp, #4
 801638c:	f47f af64 	bne.w	8016258 <_scanf_float+0x70>
 8016390:	f10b 0b01 	add.w	fp, fp, #1
 8016394:	fa5f fb8b 	uxtb.w	fp, fp
 8016398:	e7e7      	b.n	801636a <_scanf_float+0x182>
 801639a:	f1bb 0f03 	cmp.w	fp, #3
 801639e:	d0f7      	beq.n	8016390 <_scanf_float+0x1a8>
 80163a0:	f1bb 0f05 	cmp.w	fp, #5
 80163a4:	e7f2      	b.n	801638c <_scanf_float+0x1a4>
 80163a6:	f1bb 0f02 	cmp.w	fp, #2
 80163aa:	f47f af55 	bne.w	8016258 <_scanf_float+0x70>
 80163ae:	f04f 0b03 	mov.w	fp, #3
 80163b2:	e7da      	b.n	801636a <_scanf_float+0x182>
 80163b4:	f1bb 0f06 	cmp.w	fp, #6
 80163b8:	f47f af4e 	bne.w	8016258 <_scanf_float+0x70>
 80163bc:	f04f 0b07 	mov.w	fp, #7
 80163c0:	e7d3      	b.n	801636a <_scanf_float+0x182>
 80163c2:	6821      	ldr	r1, [r4, #0]
 80163c4:	0588      	lsls	r0, r1, #22
 80163c6:	f57f af47 	bpl.w	8016258 <_scanf_float+0x70>
 80163ca:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80163ce:	6021      	str	r1, [r4, #0]
 80163d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80163d4:	e7c9      	b.n	801636a <_scanf_float+0x182>
 80163d6:	6821      	ldr	r1, [r4, #0]
 80163d8:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80163dc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80163e0:	d006      	beq.n	80163f0 <_scanf_float+0x208>
 80163e2:	0548      	lsls	r0, r1, #21
 80163e4:	f57f af38 	bpl.w	8016258 <_scanf_float+0x70>
 80163e8:	f1b9 0f00 	cmp.w	r9, #0
 80163ec:	f43f af3b 	beq.w	8016266 <_scanf_float+0x7e>
 80163f0:	0588      	lsls	r0, r1, #22
 80163f2:	bf58      	it	pl
 80163f4:	9802      	ldrpl	r0, [sp, #8]
 80163f6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80163fa:	bf58      	it	pl
 80163fc:	eba9 0000 	subpl.w	r0, r9, r0
 8016400:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8016404:	bf58      	it	pl
 8016406:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801640a:	6021      	str	r1, [r4, #0]
 801640c:	f04f 0900 	mov.w	r9, #0
 8016410:	e7ab      	b.n	801636a <_scanf_float+0x182>
 8016412:	2203      	movs	r2, #3
 8016414:	e7a9      	b.n	801636a <_scanf_float+0x182>
 8016416:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801641a:	9205      	str	r2, [sp, #20]
 801641c:	4631      	mov	r1, r6
 801641e:	4638      	mov	r0, r7
 8016420:	4798      	blx	r3
 8016422:	9a05      	ldr	r2, [sp, #20]
 8016424:	2800      	cmp	r0, #0
 8016426:	f43f af04 	beq.w	8016232 <_scanf_float+0x4a>
 801642a:	e715      	b.n	8016258 <_scanf_float+0x70>
 801642c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016430:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016434:	4632      	mov	r2, r6
 8016436:	4638      	mov	r0, r7
 8016438:	4798      	blx	r3
 801643a:	6923      	ldr	r3, [r4, #16]
 801643c:	3b01      	subs	r3, #1
 801643e:	6123      	str	r3, [r4, #16]
 8016440:	e715      	b.n	801626e <_scanf_float+0x86>
 8016442:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016446:	2b06      	cmp	r3, #6
 8016448:	d80a      	bhi.n	8016460 <_scanf_float+0x278>
 801644a:	f1bb 0f02 	cmp.w	fp, #2
 801644e:	d968      	bls.n	8016522 <_scanf_float+0x33a>
 8016450:	f1ab 0b03 	sub.w	fp, fp, #3
 8016454:	fa5f fb8b 	uxtb.w	fp, fp
 8016458:	eba5 0b0b 	sub.w	fp, r5, fp
 801645c:	455d      	cmp	r5, fp
 801645e:	d14b      	bne.n	80164f8 <_scanf_float+0x310>
 8016460:	6823      	ldr	r3, [r4, #0]
 8016462:	05da      	lsls	r2, r3, #23
 8016464:	d51f      	bpl.n	80164a6 <_scanf_float+0x2be>
 8016466:	055b      	lsls	r3, r3, #21
 8016468:	d468      	bmi.n	801653c <_scanf_float+0x354>
 801646a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801646e:	6923      	ldr	r3, [r4, #16]
 8016470:	2965      	cmp	r1, #101	; 0x65
 8016472:	f103 33ff 	add.w	r3, r3, #4294967295
 8016476:	f105 3bff 	add.w	fp, r5, #4294967295
 801647a:	6123      	str	r3, [r4, #16]
 801647c:	d00d      	beq.n	801649a <_scanf_float+0x2b2>
 801647e:	2945      	cmp	r1, #69	; 0x45
 8016480:	d00b      	beq.n	801649a <_scanf_float+0x2b2>
 8016482:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016486:	4632      	mov	r2, r6
 8016488:	4638      	mov	r0, r7
 801648a:	4798      	blx	r3
 801648c:	6923      	ldr	r3, [r4, #16]
 801648e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8016492:	3b01      	subs	r3, #1
 8016494:	f1a5 0b02 	sub.w	fp, r5, #2
 8016498:	6123      	str	r3, [r4, #16]
 801649a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801649e:	4632      	mov	r2, r6
 80164a0:	4638      	mov	r0, r7
 80164a2:	4798      	blx	r3
 80164a4:	465d      	mov	r5, fp
 80164a6:	6826      	ldr	r6, [r4, #0]
 80164a8:	f016 0610 	ands.w	r6, r6, #16
 80164ac:	d17a      	bne.n	80165a4 <_scanf_float+0x3bc>
 80164ae:	702e      	strb	r6, [r5, #0]
 80164b0:	6823      	ldr	r3, [r4, #0]
 80164b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80164b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80164ba:	d142      	bne.n	8016542 <_scanf_float+0x35a>
 80164bc:	9b02      	ldr	r3, [sp, #8]
 80164be:	eba9 0303 	sub.w	r3, r9, r3
 80164c2:	425a      	negs	r2, r3
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d149      	bne.n	801655c <_scanf_float+0x374>
 80164c8:	2200      	movs	r2, #0
 80164ca:	4641      	mov	r1, r8
 80164cc:	4638      	mov	r0, r7
 80164ce:	f000 ff0b 	bl	80172e8 <_strtod_r>
 80164d2:	6825      	ldr	r5, [r4, #0]
 80164d4:	f8da 3000 	ldr.w	r3, [sl]
 80164d8:	f015 0f02 	tst.w	r5, #2
 80164dc:	f103 0204 	add.w	r2, r3, #4
 80164e0:	ec59 8b10 	vmov	r8, r9, d0
 80164e4:	f8ca 2000 	str.w	r2, [sl]
 80164e8:	d043      	beq.n	8016572 <_scanf_float+0x38a>
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	e9c3 8900 	strd	r8, r9, [r3]
 80164f0:	68e3      	ldr	r3, [r4, #12]
 80164f2:	3301      	adds	r3, #1
 80164f4:	60e3      	str	r3, [r4, #12]
 80164f6:	e6be      	b.n	8016276 <_scanf_float+0x8e>
 80164f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80164fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016500:	4632      	mov	r2, r6
 8016502:	4638      	mov	r0, r7
 8016504:	4798      	blx	r3
 8016506:	6923      	ldr	r3, [r4, #16]
 8016508:	3b01      	subs	r3, #1
 801650a:	6123      	str	r3, [r4, #16]
 801650c:	e7a6      	b.n	801645c <_scanf_float+0x274>
 801650e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016512:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016516:	4632      	mov	r2, r6
 8016518:	4638      	mov	r0, r7
 801651a:	4798      	blx	r3
 801651c:	6923      	ldr	r3, [r4, #16]
 801651e:	3b01      	subs	r3, #1
 8016520:	6123      	str	r3, [r4, #16]
 8016522:	4545      	cmp	r5, r8
 8016524:	d8f3      	bhi.n	801650e <_scanf_float+0x326>
 8016526:	e6a5      	b.n	8016274 <_scanf_float+0x8c>
 8016528:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801652c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016530:	4632      	mov	r2, r6
 8016532:	4638      	mov	r0, r7
 8016534:	4798      	blx	r3
 8016536:	6923      	ldr	r3, [r4, #16]
 8016538:	3b01      	subs	r3, #1
 801653a:	6123      	str	r3, [r4, #16]
 801653c:	4545      	cmp	r5, r8
 801653e:	d8f3      	bhi.n	8016528 <_scanf_float+0x340>
 8016540:	e698      	b.n	8016274 <_scanf_float+0x8c>
 8016542:	9b03      	ldr	r3, [sp, #12]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d0bf      	beq.n	80164c8 <_scanf_float+0x2e0>
 8016548:	9904      	ldr	r1, [sp, #16]
 801654a:	230a      	movs	r3, #10
 801654c:	4632      	mov	r2, r6
 801654e:	3101      	adds	r1, #1
 8016550:	4638      	mov	r0, r7
 8016552:	f000 ff55 	bl	8017400 <_strtol_r>
 8016556:	9b03      	ldr	r3, [sp, #12]
 8016558:	9d04      	ldr	r5, [sp, #16]
 801655a:	1ac2      	subs	r2, r0, r3
 801655c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016560:	429d      	cmp	r5, r3
 8016562:	bf28      	it	cs
 8016564:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8016568:	490f      	ldr	r1, [pc, #60]	; (80165a8 <_scanf_float+0x3c0>)
 801656a:	4628      	mov	r0, r5
 801656c:	f000 f858 	bl	8016620 <siprintf>
 8016570:	e7aa      	b.n	80164c8 <_scanf_float+0x2e0>
 8016572:	f015 0504 	ands.w	r5, r5, #4
 8016576:	d1b8      	bne.n	80164ea <_scanf_float+0x302>
 8016578:	681f      	ldr	r7, [r3, #0]
 801657a:	ee10 2a10 	vmov	r2, s0
 801657e:	464b      	mov	r3, r9
 8016580:	ee10 0a10 	vmov	r0, s0
 8016584:	4649      	mov	r1, r9
 8016586:	f7ea fae9 	bl	8000b5c <__aeabi_dcmpun>
 801658a:	b128      	cbz	r0, 8016598 <_scanf_float+0x3b0>
 801658c:	4628      	mov	r0, r5
 801658e:	f000 f80d 	bl	80165ac <nanf>
 8016592:	ed87 0a00 	vstr	s0, [r7]
 8016596:	e7ab      	b.n	80164f0 <_scanf_float+0x308>
 8016598:	4640      	mov	r0, r8
 801659a:	4649      	mov	r1, r9
 801659c:	f7ea fb3c 	bl	8000c18 <__aeabi_d2f>
 80165a0:	6038      	str	r0, [r7, #0]
 80165a2:	e7a5      	b.n	80164f0 <_scanf_float+0x308>
 80165a4:	2600      	movs	r6, #0
 80165a6:	e666      	b.n	8016276 <_scanf_float+0x8e>
 80165a8:	0801a3ea 	.word	0x0801a3ea

080165ac <nanf>:
 80165ac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80165b4 <nanf+0x8>
 80165b0:	4770      	bx	lr
 80165b2:	bf00      	nop
 80165b4:	7fc00000 	.word	0x7fc00000

080165b8 <sniprintf>:
 80165b8:	b40c      	push	{r2, r3}
 80165ba:	b530      	push	{r4, r5, lr}
 80165bc:	4b17      	ldr	r3, [pc, #92]	; (801661c <sniprintf+0x64>)
 80165be:	1e0c      	subs	r4, r1, #0
 80165c0:	b09d      	sub	sp, #116	; 0x74
 80165c2:	681d      	ldr	r5, [r3, #0]
 80165c4:	da08      	bge.n	80165d8 <sniprintf+0x20>
 80165c6:	238b      	movs	r3, #139	; 0x8b
 80165c8:	602b      	str	r3, [r5, #0]
 80165ca:	f04f 30ff 	mov.w	r0, #4294967295
 80165ce:	b01d      	add	sp, #116	; 0x74
 80165d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80165d4:	b002      	add	sp, #8
 80165d6:	4770      	bx	lr
 80165d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80165dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80165e0:	bf14      	ite	ne
 80165e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80165e6:	4623      	moveq	r3, r4
 80165e8:	9304      	str	r3, [sp, #16]
 80165ea:	9307      	str	r3, [sp, #28]
 80165ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165f0:	9002      	str	r0, [sp, #8]
 80165f2:	9006      	str	r0, [sp, #24]
 80165f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80165fa:	ab21      	add	r3, sp, #132	; 0x84
 80165fc:	a902      	add	r1, sp, #8
 80165fe:	4628      	mov	r0, r5
 8016600:	9301      	str	r3, [sp, #4]
 8016602:	f002 fdf1 	bl	80191e8 <_svfiprintf_r>
 8016606:	1c43      	adds	r3, r0, #1
 8016608:	bfbc      	itt	lt
 801660a:	238b      	movlt	r3, #139	; 0x8b
 801660c:	602b      	strlt	r3, [r5, #0]
 801660e:	2c00      	cmp	r4, #0
 8016610:	d0dd      	beq.n	80165ce <sniprintf+0x16>
 8016612:	9b02      	ldr	r3, [sp, #8]
 8016614:	2200      	movs	r2, #0
 8016616:	701a      	strb	r2, [r3, #0]
 8016618:	e7d9      	b.n	80165ce <sniprintf+0x16>
 801661a:	bf00      	nop
 801661c:	2000000c 	.word	0x2000000c

08016620 <siprintf>:
 8016620:	b40e      	push	{r1, r2, r3}
 8016622:	b500      	push	{lr}
 8016624:	b09c      	sub	sp, #112	; 0x70
 8016626:	ab1d      	add	r3, sp, #116	; 0x74
 8016628:	9002      	str	r0, [sp, #8]
 801662a:	9006      	str	r0, [sp, #24]
 801662c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016630:	4809      	ldr	r0, [pc, #36]	; (8016658 <siprintf+0x38>)
 8016632:	9107      	str	r1, [sp, #28]
 8016634:	9104      	str	r1, [sp, #16]
 8016636:	4909      	ldr	r1, [pc, #36]	; (801665c <siprintf+0x3c>)
 8016638:	f853 2b04 	ldr.w	r2, [r3], #4
 801663c:	9105      	str	r1, [sp, #20]
 801663e:	6800      	ldr	r0, [r0, #0]
 8016640:	9301      	str	r3, [sp, #4]
 8016642:	a902      	add	r1, sp, #8
 8016644:	f002 fdd0 	bl	80191e8 <_svfiprintf_r>
 8016648:	9b02      	ldr	r3, [sp, #8]
 801664a:	2200      	movs	r2, #0
 801664c:	701a      	strb	r2, [r3, #0]
 801664e:	b01c      	add	sp, #112	; 0x70
 8016650:	f85d eb04 	ldr.w	lr, [sp], #4
 8016654:	b003      	add	sp, #12
 8016656:	4770      	bx	lr
 8016658:	2000000c 	.word	0x2000000c
 801665c:	ffff0208 	.word	0xffff0208

08016660 <siscanf>:
 8016660:	b40e      	push	{r1, r2, r3}
 8016662:	b530      	push	{r4, r5, lr}
 8016664:	b09c      	sub	sp, #112	; 0x70
 8016666:	ac1f      	add	r4, sp, #124	; 0x7c
 8016668:	f44f 7201 	mov.w	r2, #516	; 0x204
 801666c:	f854 5b04 	ldr.w	r5, [r4], #4
 8016670:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016674:	9002      	str	r0, [sp, #8]
 8016676:	9006      	str	r0, [sp, #24]
 8016678:	f7e9 fdc2 	bl	8000200 <strlen>
 801667c:	4b0b      	ldr	r3, [pc, #44]	; (80166ac <siscanf+0x4c>)
 801667e:	9003      	str	r0, [sp, #12]
 8016680:	9007      	str	r0, [sp, #28]
 8016682:	930b      	str	r3, [sp, #44]	; 0x2c
 8016684:	480a      	ldr	r0, [pc, #40]	; (80166b0 <siscanf+0x50>)
 8016686:	9401      	str	r4, [sp, #4]
 8016688:	2300      	movs	r3, #0
 801668a:	930f      	str	r3, [sp, #60]	; 0x3c
 801668c:	9314      	str	r3, [sp, #80]	; 0x50
 801668e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016692:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016696:	462a      	mov	r2, r5
 8016698:	4623      	mov	r3, r4
 801669a:	a902      	add	r1, sp, #8
 801669c:	6800      	ldr	r0, [r0, #0]
 801669e:	f002 fef5 	bl	801948c <__ssvfiscanf_r>
 80166a2:	b01c      	add	sp, #112	; 0x70
 80166a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80166a8:	b003      	add	sp, #12
 80166aa:	4770      	bx	lr
 80166ac:	080166b5 	.word	0x080166b5
 80166b0:	2000000c 	.word	0x2000000c

080166b4 <__seofread>:
 80166b4:	2000      	movs	r0, #0
 80166b6:	4770      	bx	lr

080166b8 <strcpy>:
 80166b8:	4603      	mov	r3, r0
 80166ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80166be:	f803 2b01 	strb.w	r2, [r3], #1
 80166c2:	2a00      	cmp	r2, #0
 80166c4:	d1f9      	bne.n	80166ba <strcpy+0x2>
 80166c6:	4770      	bx	lr

080166c8 <sulp>:
 80166c8:	b570      	push	{r4, r5, r6, lr}
 80166ca:	4604      	mov	r4, r0
 80166cc:	460d      	mov	r5, r1
 80166ce:	ec45 4b10 	vmov	d0, r4, r5
 80166d2:	4616      	mov	r6, r2
 80166d4:	f002 fb44 	bl	8018d60 <__ulp>
 80166d8:	ec51 0b10 	vmov	r0, r1, d0
 80166dc:	b17e      	cbz	r6, 80166fe <sulp+0x36>
 80166de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80166e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	dd09      	ble.n	80166fe <sulp+0x36>
 80166ea:	051b      	lsls	r3, r3, #20
 80166ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80166f0:	2400      	movs	r4, #0
 80166f2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80166f6:	4622      	mov	r2, r4
 80166f8:	462b      	mov	r3, r5
 80166fa:	f7e9 ff95 	bl	8000628 <__aeabi_dmul>
 80166fe:	bd70      	pop	{r4, r5, r6, pc}

08016700 <_strtod_l>:
 8016700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016704:	461f      	mov	r7, r3
 8016706:	b0a1      	sub	sp, #132	; 0x84
 8016708:	2300      	movs	r3, #0
 801670a:	4681      	mov	r9, r0
 801670c:	4638      	mov	r0, r7
 801670e:	460e      	mov	r6, r1
 8016710:	9217      	str	r2, [sp, #92]	; 0x5c
 8016712:	931c      	str	r3, [sp, #112]	; 0x70
 8016714:	f002 f824 	bl	8018760 <__localeconv_l>
 8016718:	4680      	mov	r8, r0
 801671a:	6800      	ldr	r0, [r0, #0]
 801671c:	f7e9 fd70 	bl	8000200 <strlen>
 8016720:	f04f 0a00 	mov.w	sl, #0
 8016724:	4604      	mov	r4, r0
 8016726:	f04f 0b00 	mov.w	fp, #0
 801672a:	961b      	str	r6, [sp, #108]	; 0x6c
 801672c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801672e:	781a      	ldrb	r2, [r3, #0]
 8016730:	2a0d      	cmp	r2, #13
 8016732:	d832      	bhi.n	801679a <_strtod_l+0x9a>
 8016734:	2a09      	cmp	r2, #9
 8016736:	d236      	bcs.n	80167a6 <_strtod_l+0xa6>
 8016738:	2a00      	cmp	r2, #0
 801673a:	d03e      	beq.n	80167ba <_strtod_l+0xba>
 801673c:	2300      	movs	r3, #0
 801673e:	930d      	str	r3, [sp, #52]	; 0x34
 8016740:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016742:	782b      	ldrb	r3, [r5, #0]
 8016744:	2b30      	cmp	r3, #48	; 0x30
 8016746:	f040 80ac 	bne.w	80168a2 <_strtod_l+0x1a2>
 801674a:	786b      	ldrb	r3, [r5, #1]
 801674c:	2b58      	cmp	r3, #88	; 0x58
 801674e:	d001      	beq.n	8016754 <_strtod_l+0x54>
 8016750:	2b78      	cmp	r3, #120	; 0x78
 8016752:	d167      	bne.n	8016824 <_strtod_l+0x124>
 8016754:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016756:	9301      	str	r3, [sp, #4]
 8016758:	ab1c      	add	r3, sp, #112	; 0x70
 801675a:	9300      	str	r3, [sp, #0]
 801675c:	9702      	str	r7, [sp, #8]
 801675e:	ab1d      	add	r3, sp, #116	; 0x74
 8016760:	4a88      	ldr	r2, [pc, #544]	; (8016984 <_strtod_l+0x284>)
 8016762:	a91b      	add	r1, sp, #108	; 0x6c
 8016764:	4648      	mov	r0, r9
 8016766:	f001 fd12 	bl	801818e <__gethex>
 801676a:	f010 0407 	ands.w	r4, r0, #7
 801676e:	4606      	mov	r6, r0
 8016770:	d005      	beq.n	801677e <_strtod_l+0x7e>
 8016772:	2c06      	cmp	r4, #6
 8016774:	d12b      	bne.n	80167ce <_strtod_l+0xce>
 8016776:	3501      	adds	r5, #1
 8016778:	2300      	movs	r3, #0
 801677a:	951b      	str	r5, [sp, #108]	; 0x6c
 801677c:	930d      	str	r3, [sp, #52]	; 0x34
 801677e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016780:	2b00      	cmp	r3, #0
 8016782:	f040 859a 	bne.w	80172ba <_strtod_l+0xbba>
 8016786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016788:	b1e3      	cbz	r3, 80167c4 <_strtod_l+0xc4>
 801678a:	4652      	mov	r2, sl
 801678c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016790:	ec43 2b10 	vmov	d0, r2, r3
 8016794:	b021      	add	sp, #132	; 0x84
 8016796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679a:	2a2b      	cmp	r2, #43	; 0x2b
 801679c:	d015      	beq.n	80167ca <_strtod_l+0xca>
 801679e:	2a2d      	cmp	r2, #45	; 0x2d
 80167a0:	d004      	beq.n	80167ac <_strtod_l+0xac>
 80167a2:	2a20      	cmp	r2, #32
 80167a4:	d1ca      	bne.n	801673c <_strtod_l+0x3c>
 80167a6:	3301      	adds	r3, #1
 80167a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80167aa:	e7bf      	b.n	801672c <_strtod_l+0x2c>
 80167ac:	2201      	movs	r2, #1
 80167ae:	920d      	str	r2, [sp, #52]	; 0x34
 80167b0:	1c5a      	adds	r2, r3, #1
 80167b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80167b4:	785b      	ldrb	r3, [r3, #1]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d1c2      	bne.n	8016740 <_strtod_l+0x40>
 80167ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80167bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80167be:	2b00      	cmp	r3, #0
 80167c0:	f040 8579 	bne.w	80172b6 <_strtod_l+0xbb6>
 80167c4:	4652      	mov	r2, sl
 80167c6:	465b      	mov	r3, fp
 80167c8:	e7e2      	b.n	8016790 <_strtod_l+0x90>
 80167ca:	2200      	movs	r2, #0
 80167cc:	e7ef      	b.n	80167ae <_strtod_l+0xae>
 80167ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80167d0:	b13a      	cbz	r2, 80167e2 <_strtod_l+0xe2>
 80167d2:	2135      	movs	r1, #53	; 0x35
 80167d4:	a81e      	add	r0, sp, #120	; 0x78
 80167d6:	f002 fbbb 	bl	8018f50 <__copybits>
 80167da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167dc:	4648      	mov	r0, r9
 80167de:	f002 f828 	bl	8018832 <_Bfree>
 80167e2:	3c01      	subs	r4, #1
 80167e4:	2c04      	cmp	r4, #4
 80167e6:	d806      	bhi.n	80167f6 <_strtod_l+0xf6>
 80167e8:	e8df f004 	tbb	[pc, r4]
 80167ec:	1714030a 	.word	0x1714030a
 80167f0:	0a          	.byte	0x0a
 80167f1:	00          	.byte	0x00
 80167f2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80167f6:	0730      	lsls	r0, r6, #28
 80167f8:	d5c1      	bpl.n	801677e <_strtod_l+0x7e>
 80167fa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80167fe:	e7be      	b.n	801677e <_strtod_l+0x7e>
 8016800:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8016804:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8016806:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801680a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801680e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8016812:	e7f0      	b.n	80167f6 <_strtod_l+0xf6>
 8016814:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016988 <_strtod_l+0x288>
 8016818:	e7ed      	b.n	80167f6 <_strtod_l+0xf6>
 801681a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801681e:	f04f 3aff 	mov.w	sl, #4294967295
 8016822:	e7e8      	b.n	80167f6 <_strtod_l+0xf6>
 8016824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016826:	1c5a      	adds	r2, r3, #1
 8016828:	921b      	str	r2, [sp, #108]	; 0x6c
 801682a:	785b      	ldrb	r3, [r3, #1]
 801682c:	2b30      	cmp	r3, #48	; 0x30
 801682e:	d0f9      	beq.n	8016824 <_strtod_l+0x124>
 8016830:	2b00      	cmp	r3, #0
 8016832:	d0a4      	beq.n	801677e <_strtod_l+0x7e>
 8016834:	2301      	movs	r3, #1
 8016836:	2500      	movs	r5, #0
 8016838:	9306      	str	r3, [sp, #24]
 801683a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801683c:	9308      	str	r3, [sp, #32]
 801683e:	9507      	str	r5, [sp, #28]
 8016840:	9505      	str	r5, [sp, #20]
 8016842:	220a      	movs	r2, #10
 8016844:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8016846:	7807      	ldrb	r7, [r0, #0]
 8016848:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801684c:	b2d9      	uxtb	r1, r3
 801684e:	2909      	cmp	r1, #9
 8016850:	d929      	bls.n	80168a6 <_strtod_l+0x1a6>
 8016852:	4622      	mov	r2, r4
 8016854:	f8d8 1000 	ldr.w	r1, [r8]
 8016858:	f003 f902 	bl	8019a60 <strncmp>
 801685c:	2800      	cmp	r0, #0
 801685e:	d031      	beq.n	80168c4 <_strtod_l+0x1c4>
 8016860:	2000      	movs	r0, #0
 8016862:	9c05      	ldr	r4, [sp, #20]
 8016864:	9004      	str	r0, [sp, #16]
 8016866:	463b      	mov	r3, r7
 8016868:	4602      	mov	r2, r0
 801686a:	2b65      	cmp	r3, #101	; 0x65
 801686c:	d001      	beq.n	8016872 <_strtod_l+0x172>
 801686e:	2b45      	cmp	r3, #69	; 0x45
 8016870:	d114      	bne.n	801689c <_strtod_l+0x19c>
 8016872:	b924      	cbnz	r4, 801687e <_strtod_l+0x17e>
 8016874:	b910      	cbnz	r0, 801687c <_strtod_l+0x17c>
 8016876:	9b06      	ldr	r3, [sp, #24]
 8016878:	2b00      	cmp	r3, #0
 801687a:	d09e      	beq.n	80167ba <_strtod_l+0xba>
 801687c:	2400      	movs	r4, #0
 801687e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016880:	1c73      	adds	r3, r6, #1
 8016882:	931b      	str	r3, [sp, #108]	; 0x6c
 8016884:	7873      	ldrb	r3, [r6, #1]
 8016886:	2b2b      	cmp	r3, #43	; 0x2b
 8016888:	d078      	beq.n	801697c <_strtod_l+0x27c>
 801688a:	2b2d      	cmp	r3, #45	; 0x2d
 801688c:	d070      	beq.n	8016970 <_strtod_l+0x270>
 801688e:	f04f 0c00 	mov.w	ip, #0
 8016892:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8016896:	2f09      	cmp	r7, #9
 8016898:	d97c      	bls.n	8016994 <_strtod_l+0x294>
 801689a:	961b      	str	r6, [sp, #108]	; 0x6c
 801689c:	f04f 0e00 	mov.w	lr, #0
 80168a0:	e09a      	b.n	80169d8 <_strtod_l+0x2d8>
 80168a2:	2300      	movs	r3, #0
 80168a4:	e7c7      	b.n	8016836 <_strtod_l+0x136>
 80168a6:	9905      	ldr	r1, [sp, #20]
 80168a8:	2908      	cmp	r1, #8
 80168aa:	bfdd      	ittte	le
 80168ac:	9907      	ldrle	r1, [sp, #28]
 80168ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80168b2:	9307      	strle	r3, [sp, #28]
 80168b4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80168b8:	9b05      	ldr	r3, [sp, #20]
 80168ba:	3001      	adds	r0, #1
 80168bc:	3301      	adds	r3, #1
 80168be:	9305      	str	r3, [sp, #20]
 80168c0:	901b      	str	r0, [sp, #108]	; 0x6c
 80168c2:	e7bf      	b.n	8016844 <_strtod_l+0x144>
 80168c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168c6:	191a      	adds	r2, r3, r4
 80168c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80168ca:	9a05      	ldr	r2, [sp, #20]
 80168cc:	5d1b      	ldrb	r3, [r3, r4]
 80168ce:	2a00      	cmp	r2, #0
 80168d0:	d037      	beq.n	8016942 <_strtod_l+0x242>
 80168d2:	9c05      	ldr	r4, [sp, #20]
 80168d4:	4602      	mov	r2, r0
 80168d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80168da:	2909      	cmp	r1, #9
 80168dc:	d913      	bls.n	8016906 <_strtod_l+0x206>
 80168de:	2101      	movs	r1, #1
 80168e0:	9104      	str	r1, [sp, #16]
 80168e2:	e7c2      	b.n	801686a <_strtod_l+0x16a>
 80168e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168e6:	1c5a      	adds	r2, r3, #1
 80168e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80168ea:	785b      	ldrb	r3, [r3, #1]
 80168ec:	3001      	adds	r0, #1
 80168ee:	2b30      	cmp	r3, #48	; 0x30
 80168f0:	d0f8      	beq.n	80168e4 <_strtod_l+0x1e4>
 80168f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80168f6:	2a08      	cmp	r2, #8
 80168f8:	f200 84e4 	bhi.w	80172c4 <_strtod_l+0xbc4>
 80168fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80168fe:	9208      	str	r2, [sp, #32]
 8016900:	4602      	mov	r2, r0
 8016902:	2000      	movs	r0, #0
 8016904:	4604      	mov	r4, r0
 8016906:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801690a:	f100 0101 	add.w	r1, r0, #1
 801690e:	d012      	beq.n	8016936 <_strtod_l+0x236>
 8016910:	440a      	add	r2, r1
 8016912:	eb00 0c04 	add.w	ip, r0, r4
 8016916:	4621      	mov	r1, r4
 8016918:	270a      	movs	r7, #10
 801691a:	458c      	cmp	ip, r1
 801691c:	d113      	bne.n	8016946 <_strtod_l+0x246>
 801691e:	1821      	adds	r1, r4, r0
 8016920:	2908      	cmp	r1, #8
 8016922:	f104 0401 	add.w	r4, r4, #1
 8016926:	4404      	add	r4, r0
 8016928:	dc19      	bgt.n	801695e <_strtod_l+0x25e>
 801692a:	9b07      	ldr	r3, [sp, #28]
 801692c:	210a      	movs	r1, #10
 801692e:	fb01 e303 	mla	r3, r1, r3, lr
 8016932:	9307      	str	r3, [sp, #28]
 8016934:	2100      	movs	r1, #0
 8016936:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016938:	1c58      	adds	r0, r3, #1
 801693a:	901b      	str	r0, [sp, #108]	; 0x6c
 801693c:	785b      	ldrb	r3, [r3, #1]
 801693e:	4608      	mov	r0, r1
 8016940:	e7c9      	b.n	80168d6 <_strtod_l+0x1d6>
 8016942:	9805      	ldr	r0, [sp, #20]
 8016944:	e7d3      	b.n	80168ee <_strtod_l+0x1ee>
 8016946:	2908      	cmp	r1, #8
 8016948:	f101 0101 	add.w	r1, r1, #1
 801694c:	dc03      	bgt.n	8016956 <_strtod_l+0x256>
 801694e:	9b07      	ldr	r3, [sp, #28]
 8016950:	437b      	muls	r3, r7
 8016952:	9307      	str	r3, [sp, #28]
 8016954:	e7e1      	b.n	801691a <_strtod_l+0x21a>
 8016956:	2910      	cmp	r1, #16
 8016958:	bfd8      	it	le
 801695a:	437d      	mulle	r5, r7
 801695c:	e7dd      	b.n	801691a <_strtod_l+0x21a>
 801695e:	2c10      	cmp	r4, #16
 8016960:	bfdc      	itt	le
 8016962:	210a      	movle	r1, #10
 8016964:	fb01 e505 	mlale	r5, r1, r5, lr
 8016968:	e7e4      	b.n	8016934 <_strtod_l+0x234>
 801696a:	2301      	movs	r3, #1
 801696c:	9304      	str	r3, [sp, #16]
 801696e:	e781      	b.n	8016874 <_strtod_l+0x174>
 8016970:	f04f 0c01 	mov.w	ip, #1
 8016974:	1cb3      	adds	r3, r6, #2
 8016976:	931b      	str	r3, [sp, #108]	; 0x6c
 8016978:	78b3      	ldrb	r3, [r6, #2]
 801697a:	e78a      	b.n	8016892 <_strtod_l+0x192>
 801697c:	f04f 0c00 	mov.w	ip, #0
 8016980:	e7f8      	b.n	8016974 <_strtod_l+0x274>
 8016982:	bf00      	nop
 8016984:	0801a3f0 	.word	0x0801a3f0
 8016988:	7ff00000 	.word	0x7ff00000
 801698c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801698e:	1c5f      	adds	r7, r3, #1
 8016990:	971b      	str	r7, [sp, #108]	; 0x6c
 8016992:	785b      	ldrb	r3, [r3, #1]
 8016994:	2b30      	cmp	r3, #48	; 0x30
 8016996:	d0f9      	beq.n	801698c <_strtod_l+0x28c>
 8016998:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801699c:	2f08      	cmp	r7, #8
 801699e:	f63f af7d 	bhi.w	801689c <_strtod_l+0x19c>
 80169a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80169a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169a8:	930a      	str	r3, [sp, #40]	; 0x28
 80169aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80169ac:	1c5f      	adds	r7, r3, #1
 80169ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80169b0:	785b      	ldrb	r3, [r3, #1]
 80169b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80169b6:	f1b8 0f09 	cmp.w	r8, #9
 80169ba:	d937      	bls.n	8016a2c <_strtod_l+0x32c>
 80169bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80169be:	1a7f      	subs	r7, r7, r1
 80169c0:	2f08      	cmp	r7, #8
 80169c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80169c6:	dc37      	bgt.n	8016a38 <_strtod_l+0x338>
 80169c8:	45be      	cmp	lr, r7
 80169ca:	bfa8      	it	ge
 80169cc:	46be      	movge	lr, r7
 80169ce:	f1bc 0f00 	cmp.w	ip, #0
 80169d2:	d001      	beq.n	80169d8 <_strtod_l+0x2d8>
 80169d4:	f1ce 0e00 	rsb	lr, lr, #0
 80169d8:	2c00      	cmp	r4, #0
 80169da:	d151      	bne.n	8016a80 <_strtod_l+0x380>
 80169dc:	2800      	cmp	r0, #0
 80169de:	f47f aece 	bne.w	801677e <_strtod_l+0x7e>
 80169e2:	9a06      	ldr	r2, [sp, #24]
 80169e4:	2a00      	cmp	r2, #0
 80169e6:	f47f aeca 	bne.w	801677e <_strtod_l+0x7e>
 80169ea:	9a04      	ldr	r2, [sp, #16]
 80169ec:	2a00      	cmp	r2, #0
 80169ee:	f47f aee4 	bne.w	80167ba <_strtod_l+0xba>
 80169f2:	2b4e      	cmp	r3, #78	; 0x4e
 80169f4:	d027      	beq.n	8016a46 <_strtod_l+0x346>
 80169f6:	dc21      	bgt.n	8016a3c <_strtod_l+0x33c>
 80169f8:	2b49      	cmp	r3, #73	; 0x49
 80169fa:	f47f aede 	bne.w	80167ba <_strtod_l+0xba>
 80169fe:	49a0      	ldr	r1, [pc, #640]	; (8016c80 <_strtod_l+0x580>)
 8016a00:	a81b      	add	r0, sp, #108	; 0x6c
 8016a02:	f001 fdf7 	bl	80185f4 <__match>
 8016a06:	2800      	cmp	r0, #0
 8016a08:	f43f aed7 	beq.w	80167ba <_strtod_l+0xba>
 8016a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a0e:	499d      	ldr	r1, [pc, #628]	; (8016c84 <_strtod_l+0x584>)
 8016a10:	3b01      	subs	r3, #1
 8016a12:	a81b      	add	r0, sp, #108	; 0x6c
 8016a14:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a16:	f001 fded 	bl	80185f4 <__match>
 8016a1a:	b910      	cbnz	r0, 8016a22 <_strtod_l+0x322>
 8016a1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a1e:	3301      	adds	r3, #1
 8016a20:	931b      	str	r3, [sp, #108]	; 0x6c
 8016a22:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016c98 <_strtod_l+0x598>
 8016a26:	f04f 0a00 	mov.w	sl, #0
 8016a2a:	e6a8      	b.n	801677e <_strtod_l+0x7e>
 8016a2c:	210a      	movs	r1, #10
 8016a2e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8016a32:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8016a36:	e7b8      	b.n	80169aa <_strtod_l+0x2aa>
 8016a38:	46be      	mov	lr, r7
 8016a3a:	e7c8      	b.n	80169ce <_strtod_l+0x2ce>
 8016a3c:	2b69      	cmp	r3, #105	; 0x69
 8016a3e:	d0de      	beq.n	80169fe <_strtod_l+0x2fe>
 8016a40:	2b6e      	cmp	r3, #110	; 0x6e
 8016a42:	f47f aeba 	bne.w	80167ba <_strtod_l+0xba>
 8016a46:	4990      	ldr	r1, [pc, #576]	; (8016c88 <_strtod_l+0x588>)
 8016a48:	a81b      	add	r0, sp, #108	; 0x6c
 8016a4a:	f001 fdd3 	bl	80185f4 <__match>
 8016a4e:	2800      	cmp	r0, #0
 8016a50:	f43f aeb3 	beq.w	80167ba <_strtod_l+0xba>
 8016a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	2b28      	cmp	r3, #40	; 0x28
 8016a5a:	d10e      	bne.n	8016a7a <_strtod_l+0x37a>
 8016a5c:	aa1e      	add	r2, sp, #120	; 0x78
 8016a5e:	498b      	ldr	r1, [pc, #556]	; (8016c8c <_strtod_l+0x58c>)
 8016a60:	a81b      	add	r0, sp, #108	; 0x6c
 8016a62:	f001 fddb 	bl	801861c <__hexnan>
 8016a66:	2805      	cmp	r0, #5
 8016a68:	d107      	bne.n	8016a7a <_strtod_l+0x37a>
 8016a6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8016a6c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016a70:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016a74:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016a78:	e681      	b.n	801677e <_strtod_l+0x7e>
 8016a7a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016ca0 <_strtod_l+0x5a0>
 8016a7e:	e7d2      	b.n	8016a26 <_strtod_l+0x326>
 8016a80:	ebae 0302 	sub.w	r3, lr, r2
 8016a84:	9306      	str	r3, [sp, #24]
 8016a86:	9b05      	ldr	r3, [sp, #20]
 8016a88:	9807      	ldr	r0, [sp, #28]
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	bf08      	it	eq
 8016a8e:	4623      	moveq	r3, r4
 8016a90:	2c10      	cmp	r4, #16
 8016a92:	9305      	str	r3, [sp, #20]
 8016a94:	46a0      	mov	r8, r4
 8016a96:	bfa8      	it	ge
 8016a98:	f04f 0810 	movge.w	r8, #16
 8016a9c:	f7e9 fd4a 	bl	8000534 <__aeabi_ui2d>
 8016aa0:	2c09      	cmp	r4, #9
 8016aa2:	4682      	mov	sl, r0
 8016aa4:	468b      	mov	fp, r1
 8016aa6:	dc13      	bgt.n	8016ad0 <_strtod_l+0x3d0>
 8016aa8:	9b06      	ldr	r3, [sp, #24]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	f43f ae67 	beq.w	801677e <_strtod_l+0x7e>
 8016ab0:	9b06      	ldr	r3, [sp, #24]
 8016ab2:	dd7a      	ble.n	8016baa <_strtod_l+0x4aa>
 8016ab4:	2b16      	cmp	r3, #22
 8016ab6:	dc61      	bgt.n	8016b7c <_strtod_l+0x47c>
 8016ab8:	4a75      	ldr	r2, [pc, #468]	; (8016c90 <_strtod_l+0x590>)
 8016aba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016abe:	e9de 0100 	ldrd	r0, r1, [lr]
 8016ac2:	4652      	mov	r2, sl
 8016ac4:	465b      	mov	r3, fp
 8016ac6:	f7e9 fdaf 	bl	8000628 <__aeabi_dmul>
 8016aca:	4682      	mov	sl, r0
 8016acc:	468b      	mov	fp, r1
 8016ace:	e656      	b.n	801677e <_strtod_l+0x7e>
 8016ad0:	4b6f      	ldr	r3, [pc, #444]	; (8016c90 <_strtod_l+0x590>)
 8016ad2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016ad6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016ada:	f7e9 fda5 	bl	8000628 <__aeabi_dmul>
 8016ade:	4606      	mov	r6, r0
 8016ae0:	4628      	mov	r0, r5
 8016ae2:	460f      	mov	r7, r1
 8016ae4:	f7e9 fd26 	bl	8000534 <__aeabi_ui2d>
 8016ae8:	4602      	mov	r2, r0
 8016aea:	460b      	mov	r3, r1
 8016aec:	4630      	mov	r0, r6
 8016aee:	4639      	mov	r1, r7
 8016af0:	f7e9 fbe4 	bl	80002bc <__adddf3>
 8016af4:	2c0f      	cmp	r4, #15
 8016af6:	4682      	mov	sl, r0
 8016af8:	468b      	mov	fp, r1
 8016afa:	ddd5      	ble.n	8016aa8 <_strtod_l+0x3a8>
 8016afc:	9b06      	ldr	r3, [sp, #24]
 8016afe:	eba4 0808 	sub.w	r8, r4, r8
 8016b02:	4498      	add	r8, r3
 8016b04:	f1b8 0f00 	cmp.w	r8, #0
 8016b08:	f340 8096 	ble.w	8016c38 <_strtod_l+0x538>
 8016b0c:	f018 030f 	ands.w	r3, r8, #15
 8016b10:	d00a      	beq.n	8016b28 <_strtod_l+0x428>
 8016b12:	495f      	ldr	r1, [pc, #380]	; (8016c90 <_strtod_l+0x590>)
 8016b14:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016b18:	4652      	mov	r2, sl
 8016b1a:	465b      	mov	r3, fp
 8016b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b20:	f7e9 fd82 	bl	8000628 <__aeabi_dmul>
 8016b24:	4682      	mov	sl, r0
 8016b26:	468b      	mov	fp, r1
 8016b28:	f038 080f 	bics.w	r8, r8, #15
 8016b2c:	d073      	beq.n	8016c16 <_strtod_l+0x516>
 8016b2e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8016b32:	dd47      	ble.n	8016bc4 <_strtod_l+0x4c4>
 8016b34:	2400      	movs	r4, #0
 8016b36:	46a0      	mov	r8, r4
 8016b38:	9407      	str	r4, [sp, #28]
 8016b3a:	9405      	str	r4, [sp, #20]
 8016b3c:	2322      	movs	r3, #34	; 0x22
 8016b3e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016c98 <_strtod_l+0x598>
 8016b42:	f8c9 3000 	str.w	r3, [r9]
 8016b46:	f04f 0a00 	mov.w	sl, #0
 8016b4a:	9b07      	ldr	r3, [sp, #28]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	f43f ae16 	beq.w	801677e <_strtod_l+0x7e>
 8016b52:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016b54:	4648      	mov	r0, r9
 8016b56:	f001 fe6c 	bl	8018832 <_Bfree>
 8016b5a:	9905      	ldr	r1, [sp, #20]
 8016b5c:	4648      	mov	r0, r9
 8016b5e:	f001 fe68 	bl	8018832 <_Bfree>
 8016b62:	4641      	mov	r1, r8
 8016b64:	4648      	mov	r0, r9
 8016b66:	f001 fe64 	bl	8018832 <_Bfree>
 8016b6a:	9907      	ldr	r1, [sp, #28]
 8016b6c:	4648      	mov	r0, r9
 8016b6e:	f001 fe60 	bl	8018832 <_Bfree>
 8016b72:	4621      	mov	r1, r4
 8016b74:	4648      	mov	r0, r9
 8016b76:	f001 fe5c 	bl	8018832 <_Bfree>
 8016b7a:	e600      	b.n	801677e <_strtod_l+0x7e>
 8016b7c:	9a06      	ldr	r2, [sp, #24]
 8016b7e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016b82:	4293      	cmp	r3, r2
 8016b84:	dbba      	blt.n	8016afc <_strtod_l+0x3fc>
 8016b86:	4d42      	ldr	r5, [pc, #264]	; (8016c90 <_strtod_l+0x590>)
 8016b88:	f1c4 040f 	rsb	r4, r4, #15
 8016b8c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016b90:	4652      	mov	r2, sl
 8016b92:	465b      	mov	r3, fp
 8016b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b98:	f7e9 fd46 	bl	8000628 <__aeabi_dmul>
 8016b9c:	9b06      	ldr	r3, [sp, #24]
 8016b9e:	1b1c      	subs	r4, r3, r4
 8016ba0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016ba4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ba8:	e78d      	b.n	8016ac6 <_strtod_l+0x3c6>
 8016baa:	f113 0f16 	cmn.w	r3, #22
 8016bae:	dba5      	blt.n	8016afc <_strtod_l+0x3fc>
 8016bb0:	4a37      	ldr	r2, [pc, #220]	; (8016c90 <_strtod_l+0x590>)
 8016bb2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016bb6:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016bba:	4650      	mov	r0, sl
 8016bbc:	4659      	mov	r1, fp
 8016bbe:	f7e9 fe5d 	bl	800087c <__aeabi_ddiv>
 8016bc2:	e782      	b.n	8016aca <_strtod_l+0x3ca>
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	4e33      	ldr	r6, [pc, #204]	; (8016c94 <_strtod_l+0x594>)
 8016bc8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016bcc:	4650      	mov	r0, sl
 8016bce:	4659      	mov	r1, fp
 8016bd0:	461d      	mov	r5, r3
 8016bd2:	f1b8 0f01 	cmp.w	r8, #1
 8016bd6:	dc21      	bgt.n	8016c1c <_strtod_l+0x51c>
 8016bd8:	b10b      	cbz	r3, 8016bde <_strtod_l+0x4de>
 8016bda:	4682      	mov	sl, r0
 8016bdc:	468b      	mov	fp, r1
 8016bde:	4b2d      	ldr	r3, [pc, #180]	; (8016c94 <_strtod_l+0x594>)
 8016be0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016be4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016be8:	4652      	mov	r2, sl
 8016bea:	465b      	mov	r3, fp
 8016bec:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016bf0:	f7e9 fd1a 	bl	8000628 <__aeabi_dmul>
 8016bf4:	4b28      	ldr	r3, [pc, #160]	; (8016c98 <_strtod_l+0x598>)
 8016bf6:	460a      	mov	r2, r1
 8016bf8:	400b      	ands	r3, r1
 8016bfa:	4928      	ldr	r1, [pc, #160]	; (8016c9c <_strtod_l+0x59c>)
 8016bfc:	428b      	cmp	r3, r1
 8016bfe:	4682      	mov	sl, r0
 8016c00:	d898      	bhi.n	8016b34 <_strtod_l+0x434>
 8016c02:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016c06:	428b      	cmp	r3, r1
 8016c08:	bf86      	itte	hi
 8016c0a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016ca4 <_strtod_l+0x5a4>
 8016c0e:	f04f 3aff 	movhi.w	sl, #4294967295
 8016c12:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016c16:	2300      	movs	r3, #0
 8016c18:	9304      	str	r3, [sp, #16]
 8016c1a:	e077      	b.n	8016d0c <_strtod_l+0x60c>
 8016c1c:	f018 0f01 	tst.w	r8, #1
 8016c20:	d006      	beq.n	8016c30 <_strtod_l+0x530>
 8016c22:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c2a:	f7e9 fcfd 	bl	8000628 <__aeabi_dmul>
 8016c2e:	2301      	movs	r3, #1
 8016c30:	3501      	adds	r5, #1
 8016c32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016c36:	e7cc      	b.n	8016bd2 <_strtod_l+0x4d2>
 8016c38:	d0ed      	beq.n	8016c16 <_strtod_l+0x516>
 8016c3a:	f1c8 0800 	rsb	r8, r8, #0
 8016c3e:	f018 020f 	ands.w	r2, r8, #15
 8016c42:	d00a      	beq.n	8016c5a <_strtod_l+0x55a>
 8016c44:	4b12      	ldr	r3, [pc, #72]	; (8016c90 <_strtod_l+0x590>)
 8016c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016c4a:	4650      	mov	r0, sl
 8016c4c:	4659      	mov	r1, fp
 8016c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c52:	f7e9 fe13 	bl	800087c <__aeabi_ddiv>
 8016c56:	4682      	mov	sl, r0
 8016c58:	468b      	mov	fp, r1
 8016c5a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016c5e:	d0da      	beq.n	8016c16 <_strtod_l+0x516>
 8016c60:	f1b8 0f1f 	cmp.w	r8, #31
 8016c64:	dd20      	ble.n	8016ca8 <_strtod_l+0x5a8>
 8016c66:	2400      	movs	r4, #0
 8016c68:	46a0      	mov	r8, r4
 8016c6a:	9407      	str	r4, [sp, #28]
 8016c6c:	9405      	str	r4, [sp, #20]
 8016c6e:	2322      	movs	r3, #34	; 0x22
 8016c70:	f04f 0a00 	mov.w	sl, #0
 8016c74:	f04f 0b00 	mov.w	fp, #0
 8016c78:	f8c9 3000 	str.w	r3, [r9]
 8016c7c:	e765      	b.n	8016b4a <_strtod_l+0x44a>
 8016c7e:	bf00      	nop
 8016c80:	0801a3bd 	.word	0x0801a3bd
 8016c84:	0801a443 	.word	0x0801a443
 8016c88:	0801a3c5 	.word	0x0801a3c5
 8016c8c:	0801a404 	.word	0x0801a404
 8016c90:	0801a480 	.word	0x0801a480
 8016c94:	0801a458 	.word	0x0801a458
 8016c98:	7ff00000 	.word	0x7ff00000
 8016c9c:	7ca00000 	.word	0x7ca00000
 8016ca0:	fff80000 	.word	0xfff80000
 8016ca4:	7fefffff 	.word	0x7fefffff
 8016ca8:	f018 0310 	ands.w	r3, r8, #16
 8016cac:	bf18      	it	ne
 8016cae:	236a      	movne	r3, #106	; 0x6a
 8016cb0:	4da0      	ldr	r5, [pc, #640]	; (8016f34 <_strtod_l+0x834>)
 8016cb2:	9304      	str	r3, [sp, #16]
 8016cb4:	4650      	mov	r0, sl
 8016cb6:	4659      	mov	r1, fp
 8016cb8:	2300      	movs	r3, #0
 8016cba:	f1b8 0f00 	cmp.w	r8, #0
 8016cbe:	f300 810a 	bgt.w	8016ed6 <_strtod_l+0x7d6>
 8016cc2:	b10b      	cbz	r3, 8016cc8 <_strtod_l+0x5c8>
 8016cc4:	4682      	mov	sl, r0
 8016cc6:	468b      	mov	fp, r1
 8016cc8:	9b04      	ldr	r3, [sp, #16]
 8016cca:	b1bb      	cbz	r3, 8016cfc <_strtod_l+0x5fc>
 8016ccc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016cd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	4659      	mov	r1, fp
 8016cd8:	dd10      	ble.n	8016cfc <_strtod_l+0x5fc>
 8016cda:	2b1f      	cmp	r3, #31
 8016cdc:	f340 8107 	ble.w	8016eee <_strtod_l+0x7ee>
 8016ce0:	2b34      	cmp	r3, #52	; 0x34
 8016ce2:	bfde      	ittt	le
 8016ce4:	3b20      	suble	r3, #32
 8016ce6:	f04f 32ff 	movle.w	r2, #4294967295
 8016cea:	fa02 f303 	lslle.w	r3, r2, r3
 8016cee:	f04f 0a00 	mov.w	sl, #0
 8016cf2:	bfcc      	ite	gt
 8016cf4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016cf8:	ea03 0b01 	andle.w	fp, r3, r1
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	2300      	movs	r3, #0
 8016d00:	4650      	mov	r0, sl
 8016d02:	4659      	mov	r1, fp
 8016d04:	f7e9 fef8 	bl	8000af8 <__aeabi_dcmpeq>
 8016d08:	2800      	cmp	r0, #0
 8016d0a:	d1ac      	bne.n	8016c66 <_strtod_l+0x566>
 8016d0c:	9b07      	ldr	r3, [sp, #28]
 8016d0e:	9300      	str	r3, [sp, #0]
 8016d10:	9a05      	ldr	r2, [sp, #20]
 8016d12:	9908      	ldr	r1, [sp, #32]
 8016d14:	4623      	mov	r3, r4
 8016d16:	4648      	mov	r0, r9
 8016d18:	f001 fddd 	bl	80188d6 <__s2b>
 8016d1c:	9007      	str	r0, [sp, #28]
 8016d1e:	2800      	cmp	r0, #0
 8016d20:	f43f af08 	beq.w	8016b34 <_strtod_l+0x434>
 8016d24:	9a06      	ldr	r2, [sp, #24]
 8016d26:	9b06      	ldr	r3, [sp, #24]
 8016d28:	2a00      	cmp	r2, #0
 8016d2a:	f1c3 0300 	rsb	r3, r3, #0
 8016d2e:	bfa8      	it	ge
 8016d30:	2300      	movge	r3, #0
 8016d32:	930e      	str	r3, [sp, #56]	; 0x38
 8016d34:	2400      	movs	r4, #0
 8016d36:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016d3a:	9316      	str	r3, [sp, #88]	; 0x58
 8016d3c:	46a0      	mov	r8, r4
 8016d3e:	9b07      	ldr	r3, [sp, #28]
 8016d40:	4648      	mov	r0, r9
 8016d42:	6859      	ldr	r1, [r3, #4]
 8016d44:	f001 fd41 	bl	80187ca <_Balloc>
 8016d48:	9005      	str	r0, [sp, #20]
 8016d4a:	2800      	cmp	r0, #0
 8016d4c:	f43f aef6 	beq.w	8016b3c <_strtod_l+0x43c>
 8016d50:	9b07      	ldr	r3, [sp, #28]
 8016d52:	691a      	ldr	r2, [r3, #16]
 8016d54:	3202      	adds	r2, #2
 8016d56:	f103 010c 	add.w	r1, r3, #12
 8016d5a:	0092      	lsls	r2, r2, #2
 8016d5c:	300c      	adds	r0, #12
 8016d5e:	f001 fd29 	bl	80187b4 <memcpy>
 8016d62:	aa1e      	add	r2, sp, #120	; 0x78
 8016d64:	a91d      	add	r1, sp, #116	; 0x74
 8016d66:	ec4b ab10 	vmov	d0, sl, fp
 8016d6a:	4648      	mov	r0, r9
 8016d6c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016d70:	f002 f86c 	bl	8018e4c <__d2b>
 8016d74:	901c      	str	r0, [sp, #112]	; 0x70
 8016d76:	2800      	cmp	r0, #0
 8016d78:	f43f aee0 	beq.w	8016b3c <_strtod_l+0x43c>
 8016d7c:	2101      	movs	r1, #1
 8016d7e:	4648      	mov	r0, r9
 8016d80:	f001 fe35 	bl	80189ee <__i2b>
 8016d84:	4680      	mov	r8, r0
 8016d86:	2800      	cmp	r0, #0
 8016d88:	f43f aed8 	beq.w	8016b3c <_strtod_l+0x43c>
 8016d8c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016d8e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016d90:	2e00      	cmp	r6, #0
 8016d92:	bfab      	itete	ge
 8016d94:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016d96:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016d98:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016d9a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016d9c:	bfac      	ite	ge
 8016d9e:	18f7      	addge	r7, r6, r3
 8016da0:	1b9d      	sublt	r5, r3, r6
 8016da2:	9b04      	ldr	r3, [sp, #16]
 8016da4:	1af6      	subs	r6, r6, r3
 8016da6:	4416      	add	r6, r2
 8016da8:	4b63      	ldr	r3, [pc, #396]	; (8016f38 <_strtod_l+0x838>)
 8016daa:	3e01      	subs	r6, #1
 8016dac:	429e      	cmp	r6, r3
 8016dae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016db2:	f280 80af 	bge.w	8016f14 <_strtod_l+0x814>
 8016db6:	1b9b      	subs	r3, r3, r6
 8016db8:	2b1f      	cmp	r3, #31
 8016dba:	eba2 0203 	sub.w	r2, r2, r3
 8016dbe:	f04f 0101 	mov.w	r1, #1
 8016dc2:	f300 809b 	bgt.w	8016efc <_strtod_l+0x7fc>
 8016dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8016dca:	930f      	str	r3, [sp, #60]	; 0x3c
 8016dcc:	2300      	movs	r3, #0
 8016dce:	930a      	str	r3, [sp, #40]	; 0x28
 8016dd0:	18be      	adds	r6, r7, r2
 8016dd2:	9b04      	ldr	r3, [sp, #16]
 8016dd4:	42b7      	cmp	r7, r6
 8016dd6:	4415      	add	r5, r2
 8016dd8:	441d      	add	r5, r3
 8016dda:	463b      	mov	r3, r7
 8016ddc:	bfa8      	it	ge
 8016dde:	4633      	movge	r3, r6
 8016de0:	42ab      	cmp	r3, r5
 8016de2:	bfa8      	it	ge
 8016de4:	462b      	movge	r3, r5
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	bfc2      	ittt	gt
 8016dea:	1af6      	subgt	r6, r6, r3
 8016dec:	1aed      	subgt	r5, r5, r3
 8016dee:	1aff      	subgt	r7, r7, r3
 8016df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016df2:	b1bb      	cbz	r3, 8016e24 <_strtod_l+0x724>
 8016df4:	4641      	mov	r1, r8
 8016df6:	461a      	mov	r2, r3
 8016df8:	4648      	mov	r0, r9
 8016dfa:	f001 fe97 	bl	8018b2c <__pow5mult>
 8016dfe:	4680      	mov	r8, r0
 8016e00:	2800      	cmp	r0, #0
 8016e02:	f43f ae9b 	beq.w	8016b3c <_strtod_l+0x43c>
 8016e06:	4601      	mov	r1, r0
 8016e08:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016e0a:	4648      	mov	r0, r9
 8016e0c:	f001 fdf8 	bl	8018a00 <__multiply>
 8016e10:	900c      	str	r0, [sp, #48]	; 0x30
 8016e12:	2800      	cmp	r0, #0
 8016e14:	f43f ae92 	beq.w	8016b3c <_strtod_l+0x43c>
 8016e18:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e1a:	4648      	mov	r0, r9
 8016e1c:	f001 fd09 	bl	8018832 <_Bfree>
 8016e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e22:	931c      	str	r3, [sp, #112]	; 0x70
 8016e24:	2e00      	cmp	r6, #0
 8016e26:	dc7a      	bgt.n	8016f1e <_strtod_l+0x81e>
 8016e28:	9b06      	ldr	r3, [sp, #24]
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	dd08      	ble.n	8016e40 <_strtod_l+0x740>
 8016e2e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016e30:	9905      	ldr	r1, [sp, #20]
 8016e32:	4648      	mov	r0, r9
 8016e34:	f001 fe7a 	bl	8018b2c <__pow5mult>
 8016e38:	9005      	str	r0, [sp, #20]
 8016e3a:	2800      	cmp	r0, #0
 8016e3c:	f43f ae7e 	beq.w	8016b3c <_strtod_l+0x43c>
 8016e40:	2d00      	cmp	r5, #0
 8016e42:	dd08      	ble.n	8016e56 <_strtod_l+0x756>
 8016e44:	462a      	mov	r2, r5
 8016e46:	9905      	ldr	r1, [sp, #20]
 8016e48:	4648      	mov	r0, r9
 8016e4a:	f001 febd 	bl	8018bc8 <__lshift>
 8016e4e:	9005      	str	r0, [sp, #20]
 8016e50:	2800      	cmp	r0, #0
 8016e52:	f43f ae73 	beq.w	8016b3c <_strtod_l+0x43c>
 8016e56:	2f00      	cmp	r7, #0
 8016e58:	dd08      	ble.n	8016e6c <_strtod_l+0x76c>
 8016e5a:	4641      	mov	r1, r8
 8016e5c:	463a      	mov	r2, r7
 8016e5e:	4648      	mov	r0, r9
 8016e60:	f001 feb2 	bl	8018bc8 <__lshift>
 8016e64:	4680      	mov	r8, r0
 8016e66:	2800      	cmp	r0, #0
 8016e68:	f43f ae68 	beq.w	8016b3c <_strtod_l+0x43c>
 8016e6c:	9a05      	ldr	r2, [sp, #20]
 8016e6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016e70:	4648      	mov	r0, r9
 8016e72:	f001 ff17 	bl	8018ca4 <__mdiff>
 8016e76:	4604      	mov	r4, r0
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	f43f ae5f 	beq.w	8016b3c <_strtod_l+0x43c>
 8016e7e:	68c3      	ldr	r3, [r0, #12]
 8016e80:	930c      	str	r3, [sp, #48]	; 0x30
 8016e82:	2300      	movs	r3, #0
 8016e84:	60c3      	str	r3, [r0, #12]
 8016e86:	4641      	mov	r1, r8
 8016e88:	f001 fef2 	bl	8018c70 <__mcmp>
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	da55      	bge.n	8016f3c <_strtod_l+0x83c>
 8016e90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e92:	b9e3      	cbnz	r3, 8016ece <_strtod_l+0x7ce>
 8016e94:	f1ba 0f00 	cmp.w	sl, #0
 8016e98:	d119      	bne.n	8016ece <_strtod_l+0x7ce>
 8016e9a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016e9e:	b9b3      	cbnz	r3, 8016ece <_strtod_l+0x7ce>
 8016ea0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016ea4:	0d1b      	lsrs	r3, r3, #20
 8016ea6:	051b      	lsls	r3, r3, #20
 8016ea8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016eac:	d90f      	bls.n	8016ece <_strtod_l+0x7ce>
 8016eae:	6963      	ldr	r3, [r4, #20]
 8016eb0:	b913      	cbnz	r3, 8016eb8 <_strtod_l+0x7b8>
 8016eb2:	6923      	ldr	r3, [r4, #16]
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	dd0a      	ble.n	8016ece <_strtod_l+0x7ce>
 8016eb8:	4621      	mov	r1, r4
 8016eba:	2201      	movs	r2, #1
 8016ebc:	4648      	mov	r0, r9
 8016ebe:	f001 fe83 	bl	8018bc8 <__lshift>
 8016ec2:	4641      	mov	r1, r8
 8016ec4:	4604      	mov	r4, r0
 8016ec6:	f001 fed3 	bl	8018c70 <__mcmp>
 8016eca:	2800      	cmp	r0, #0
 8016ecc:	dc67      	bgt.n	8016f9e <_strtod_l+0x89e>
 8016ece:	9b04      	ldr	r3, [sp, #16]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d171      	bne.n	8016fb8 <_strtod_l+0x8b8>
 8016ed4:	e63d      	b.n	8016b52 <_strtod_l+0x452>
 8016ed6:	f018 0f01 	tst.w	r8, #1
 8016eda:	d004      	beq.n	8016ee6 <_strtod_l+0x7e6>
 8016edc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016ee0:	f7e9 fba2 	bl	8000628 <__aeabi_dmul>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016eea:	3508      	adds	r5, #8
 8016eec:	e6e5      	b.n	8016cba <_strtod_l+0x5ba>
 8016eee:	f04f 32ff 	mov.w	r2, #4294967295
 8016ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8016ef6:	ea03 0a0a 	and.w	sl, r3, sl
 8016efa:	e6ff      	b.n	8016cfc <_strtod_l+0x5fc>
 8016efc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016f00:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016f04:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016f08:	36e2      	adds	r6, #226	; 0xe2
 8016f0a:	fa01 f306 	lsl.w	r3, r1, r6
 8016f0e:	930a      	str	r3, [sp, #40]	; 0x28
 8016f10:	910f      	str	r1, [sp, #60]	; 0x3c
 8016f12:	e75d      	b.n	8016dd0 <_strtod_l+0x6d0>
 8016f14:	2300      	movs	r3, #0
 8016f16:	930a      	str	r3, [sp, #40]	; 0x28
 8016f18:	2301      	movs	r3, #1
 8016f1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f1c:	e758      	b.n	8016dd0 <_strtod_l+0x6d0>
 8016f1e:	4632      	mov	r2, r6
 8016f20:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f22:	4648      	mov	r0, r9
 8016f24:	f001 fe50 	bl	8018bc8 <__lshift>
 8016f28:	901c      	str	r0, [sp, #112]	; 0x70
 8016f2a:	2800      	cmp	r0, #0
 8016f2c:	f47f af7c 	bne.w	8016e28 <_strtod_l+0x728>
 8016f30:	e604      	b.n	8016b3c <_strtod_l+0x43c>
 8016f32:	bf00      	nop
 8016f34:	0801a418 	.word	0x0801a418
 8016f38:	fffffc02 	.word	0xfffffc02
 8016f3c:	465d      	mov	r5, fp
 8016f3e:	f040 8086 	bne.w	801704e <_strtod_l+0x94e>
 8016f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016f44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f48:	b32a      	cbz	r2, 8016f96 <_strtod_l+0x896>
 8016f4a:	4aaf      	ldr	r2, [pc, #700]	; (8017208 <_strtod_l+0xb08>)
 8016f4c:	4293      	cmp	r3, r2
 8016f4e:	d153      	bne.n	8016ff8 <_strtod_l+0x8f8>
 8016f50:	9b04      	ldr	r3, [sp, #16]
 8016f52:	4650      	mov	r0, sl
 8016f54:	b1d3      	cbz	r3, 8016f8c <_strtod_l+0x88c>
 8016f56:	4aad      	ldr	r2, [pc, #692]	; (801720c <_strtod_l+0xb0c>)
 8016f58:	402a      	ands	r2, r5
 8016f5a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8016f62:	d816      	bhi.n	8016f92 <_strtod_l+0x892>
 8016f64:	0d12      	lsrs	r2, r2, #20
 8016f66:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8016f6e:	4298      	cmp	r0, r3
 8016f70:	d142      	bne.n	8016ff8 <_strtod_l+0x8f8>
 8016f72:	4ba7      	ldr	r3, [pc, #668]	; (8017210 <_strtod_l+0xb10>)
 8016f74:	429d      	cmp	r5, r3
 8016f76:	d102      	bne.n	8016f7e <_strtod_l+0x87e>
 8016f78:	3001      	adds	r0, #1
 8016f7a:	f43f addf 	beq.w	8016b3c <_strtod_l+0x43c>
 8016f7e:	4ba3      	ldr	r3, [pc, #652]	; (801720c <_strtod_l+0xb0c>)
 8016f80:	402b      	ands	r3, r5
 8016f82:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016f86:	f04f 0a00 	mov.w	sl, #0
 8016f8a:	e7a0      	b.n	8016ece <_strtod_l+0x7ce>
 8016f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8016f90:	e7ed      	b.n	8016f6e <_strtod_l+0x86e>
 8016f92:	460b      	mov	r3, r1
 8016f94:	e7eb      	b.n	8016f6e <_strtod_l+0x86e>
 8016f96:	bb7b      	cbnz	r3, 8016ff8 <_strtod_l+0x8f8>
 8016f98:	f1ba 0f00 	cmp.w	sl, #0
 8016f9c:	d12c      	bne.n	8016ff8 <_strtod_l+0x8f8>
 8016f9e:	9904      	ldr	r1, [sp, #16]
 8016fa0:	4a9a      	ldr	r2, [pc, #616]	; (801720c <_strtod_l+0xb0c>)
 8016fa2:	465b      	mov	r3, fp
 8016fa4:	b1f1      	cbz	r1, 8016fe4 <_strtod_l+0x8e4>
 8016fa6:	ea02 010b 	and.w	r1, r2, fp
 8016faa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016fae:	dc19      	bgt.n	8016fe4 <_strtod_l+0x8e4>
 8016fb0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016fb4:	f77f ae5b 	ble.w	8016c6e <_strtod_l+0x56e>
 8016fb8:	4a96      	ldr	r2, [pc, #600]	; (8017214 <_strtod_l+0xb14>)
 8016fba:	2300      	movs	r3, #0
 8016fbc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016fc0:	4650      	mov	r0, sl
 8016fc2:	4659      	mov	r1, fp
 8016fc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016fc8:	f7e9 fb2e 	bl	8000628 <__aeabi_dmul>
 8016fcc:	4682      	mov	sl, r0
 8016fce:	468b      	mov	fp, r1
 8016fd0:	2900      	cmp	r1, #0
 8016fd2:	f47f adbe 	bne.w	8016b52 <_strtod_l+0x452>
 8016fd6:	2800      	cmp	r0, #0
 8016fd8:	f47f adbb 	bne.w	8016b52 <_strtod_l+0x452>
 8016fdc:	2322      	movs	r3, #34	; 0x22
 8016fde:	f8c9 3000 	str.w	r3, [r9]
 8016fe2:	e5b6      	b.n	8016b52 <_strtod_l+0x452>
 8016fe4:	4013      	ands	r3, r2
 8016fe6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016fea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016fee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016ff2:	f04f 3aff 	mov.w	sl, #4294967295
 8016ff6:	e76a      	b.n	8016ece <_strtod_l+0x7ce>
 8016ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ffa:	b193      	cbz	r3, 8017022 <_strtod_l+0x922>
 8016ffc:	422b      	tst	r3, r5
 8016ffe:	f43f af66 	beq.w	8016ece <_strtod_l+0x7ce>
 8017002:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017004:	9a04      	ldr	r2, [sp, #16]
 8017006:	4650      	mov	r0, sl
 8017008:	4659      	mov	r1, fp
 801700a:	b173      	cbz	r3, 801702a <_strtod_l+0x92a>
 801700c:	f7ff fb5c 	bl	80166c8 <sulp>
 8017010:	4602      	mov	r2, r0
 8017012:	460b      	mov	r3, r1
 8017014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017018:	f7e9 f950 	bl	80002bc <__adddf3>
 801701c:	4682      	mov	sl, r0
 801701e:	468b      	mov	fp, r1
 8017020:	e755      	b.n	8016ece <_strtod_l+0x7ce>
 8017022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017024:	ea13 0f0a 	tst.w	r3, sl
 8017028:	e7e9      	b.n	8016ffe <_strtod_l+0x8fe>
 801702a:	f7ff fb4d 	bl	80166c8 <sulp>
 801702e:	4602      	mov	r2, r0
 8017030:	460b      	mov	r3, r1
 8017032:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017036:	f7e9 f93f 	bl	80002b8 <__aeabi_dsub>
 801703a:	2200      	movs	r2, #0
 801703c:	2300      	movs	r3, #0
 801703e:	4682      	mov	sl, r0
 8017040:	468b      	mov	fp, r1
 8017042:	f7e9 fd59 	bl	8000af8 <__aeabi_dcmpeq>
 8017046:	2800      	cmp	r0, #0
 8017048:	f47f ae11 	bne.w	8016c6e <_strtod_l+0x56e>
 801704c:	e73f      	b.n	8016ece <_strtod_l+0x7ce>
 801704e:	4641      	mov	r1, r8
 8017050:	4620      	mov	r0, r4
 8017052:	f001 ff4a 	bl	8018eea <__ratio>
 8017056:	ec57 6b10 	vmov	r6, r7, d0
 801705a:	2200      	movs	r2, #0
 801705c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017060:	ee10 0a10 	vmov	r0, s0
 8017064:	4639      	mov	r1, r7
 8017066:	f7e9 fd5b 	bl	8000b20 <__aeabi_dcmple>
 801706a:	2800      	cmp	r0, #0
 801706c:	d077      	beq.n	801715e <_strtod_l+0xa5e>
 801706e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017070:	2b00      	cmp	r3, #0
 8017072:	d04a      	beq.n	801710a <_strtod_l+0xa0a>
 8017074:	4b68      	ldr	r3, [pc, #416]	; (8017218 <_strtod_l+0xb18>)
 8017076:	2200      	movs	r2, #0
 8017078:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801707c:	4f66      	ldr	r7, [pc, #408]	; (8017218 <_strtod_l+0xb18>)
 801707e:	2600      	movs	r6, #0
 8017080:	4b62      	ldr	r3, [pc, #392]	; (801720c <_strtod_l+0xb0c>)
 8017082:	402b      	ands	r3, r5
 8017084:	930f      	str	r3, [sp, #60]	; 0x3c
 8017086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017088:	4b64      	ldr	r3, [pc, #400]	; (801721c <_strtod_l+0xb1c>)
 801708a:	429a      	cmp	r2, r3
 801708c:	f040 80ce 	bne.w	801722c <_strtod_l+0xb2c>
 8017090:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017094:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8017098:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801709c:	ec4b ab10 	vmov	d0, sl, fp
 80170a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80170a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80170a8:	f001 fe5a 	bl	8018d60 <__ulp>
 80170ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80170b0:	ec53 2b10 	vmov	r2, r3, d0
 80170b4:	f7e9 fab8 	bl	8000628 <__aeabi_dmul>
 80170b8:	4652      	mov	r2, sl
 80170ba:	465b      	mov	r3, fp
 80170bc:	f7e9 f8fe 	bl	80002bc <__adddf3>
 80170c0:	460b      	mov	r3, r1
 80170c2:	4952      	ldr	r1, [pc, #328]	; (801720c <_strtod_l+0xb0c>)
 80170c4:	4a56      	ldr	r2, [pc, #344]	; (8017220 <_strtod_l+0xb20>)
 80170c6:	4019      	ands	r1, r3
 80170c8:	4291      	cmp	r1, r2
 80170ca:	4682      	mov	sl, r0
 80170cc:	d95b      	bls.n	8017186 <_strtod_l+0xa86>
 80170ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80170d4:	4293      	cmp	r3, r2
 80170d6:	d103      	bne.n	80170e0 <_strtod_l+0x9e0>
 80170d8:	9b08      	ldr	r3, [sp, #32]
 80170da:	3301      	adds	r3, #1
 80170dc:	f43f ad2e 	beq.w	8016b3c <_strtod_l+0x43c>
 80170e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017210 <_strtod_l+0xb10>
 80170e4:	f04f 3aff 	mov.w	sl, #4294967295
 80170e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80170ea:	4648      	mov	r0, r9
 80170ec:	f001 fba1 	bl	8018832 <_Bfree>
 80170f0:	9905      	ldr	r1, [sp, #20]
 80170f2:	4648      	mov	r0, r9
 80170f4:	f001 fb9d 	bl	8018832 <_Bfree>
 80170f8:	4641      	mov	r1, r8
 80170fa:	4648      	mov	r0, r9
 80170fc:	f001 fb99 	bl	8018832 <_Bfree>
 8017100:	4621      	mov	r1, r4
 8017102:	4648      	mov	r0, r9
 8017104:	f001 fb95 	bl	8018832 <_Bfree>
 8017108:	e619      	b.n	8016d3e <_strtod_l+0x63e>
 801710a:	f1ba 0f00 	cmp.w	sl, #0
 801710e:	d11a      	bne.n	8017146 <_strtod_l+0xa46>
 8017110:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8017114:	b9eb      	cbnz	r3, 8017152 <_strtod_l+0xa52>
 8017116:	2200      	movs	r2, #0
 8017118:	4b3f      	ldr	r3, [pc, #252]	; (8017218 <_strtod_l+0xb18>)
 801711a:	4630      	mov	r0, r6
 801711c:	4639      	mov	r1, r7
 801711e:	f7e9 fcf5 	bl	8000b0c <__aeabi_dcmplt>
 8017122:	b9c8      	cbnz	r0, 8017158 <_strtod_l+0xa58>
 8017124:	4630      	mov	r0, r6
 8017126:	4639      	mov	r1, r7
 8017128:	2200      	movs	r2, #0
 801712a:	4b3e      	ldr	r3, [pc, #248]	; (8017224 <_strtod_l+0xb24>)
 801712c:	f7e9 fa7c 	bl	8000628 <__aeabi_dmul>
 8017130:	4606      	mov	r6, r0
 8017132:	460f      	mov	r7, r1
 8017134:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8017138:	9618      	str	r6, [sp, #96]	; 0x60
 801713a:	9319      	str	r3, [sp, #100]	; 0x64
 801713c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8017140:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017144:	e79c      	b.n	8017080 <_strtod_l+0x980>
 8017146:	f1ba 0f01 	cmp.w	sl, #1
 801714a:	d102      	bne.n	8017152 <_strtod_l+0xa52>
 801714c:	2d00      	cmp	r5, #0
 801714e:	f43f ad8e 	beq.w	8016c6e <_strtod_l+0x56e>
 8017152:	2200      	movs	r2, #0
 8017154:	4b34      	ldr	r3, [pc, #208]	; (8017228 <_strtod_l+0xb28>)
 8017156:	e78f      	b.n	8017078 <_strtod_l+0x978>
 8017158:	2600      	movs	r6, #0
 801715a:	4f32      	ldr	r7, [pc, #200]	; (8017224 <_strtod_l+0xb24>)
 801715c:	e7ea      	b.n	8017134 <_strtod_l+0xa34>
 801715e:	4b31      	ldr	r3, [pc, #196]	; (8017224 <_strtod_l+0xb24>)
 8017160:	4630      	mov	r0, r6
 8017162:	4639      	mov	r1, r7
 8017164:	2200      	movs	r2, #0
 8017166:	f7e9 fa5f 	bl	8000628 <__aeabi_dmul>
 801716a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801716c:	4606      	mov	r6, r0
 801716e:	460f      	mov	r7, r1
 8017170:	b933      	cbnz	r3, 8017180 <_strtod_l+0xa80>
 8017172:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017176:	9010      	str	r0, [sp, #64]	; 0x40
 8017178:	9311      	str	r3, [sp, #68]	; 0x44
 801717a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801717e:	e7df      	b.n	8017140 <_strtod_l+0xa40>
 8017180:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8017184:	e7f9      	b.n	801717a <_strtod_l+0xa7a>
 8017186:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801718a:	9b04      	ldr	r3, [sp, #16]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1ab      	bne.n	80170e8 <_strtod_l+0x9e8>
 8017190:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017194:	0d1b      	lsrs	r3, r3, #20
 8017196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017198:	051b      	lsls	r3, r3, #20
 801719a:	429a      	cmp	r2, r3
 801719c:	465d      	mov	r5, fp
 801719e:	d1a3      	bne.n	80170e8 <_strtod_l+0x9e8>
 80171a0:	4639      	mov	r1, r7
 80171a2:	4630      	mov	r0, r6
 80171a4:	f7e9 fcf0 	bl	8000b88 <__aeabi_d2iz>
 80171a8:	f7e9 f9d4 	bl	8000554 <__aeabi_i2d>
 80171ac:	460b      	mov	r3, r1
 80171ae:	4602      	mov	r2, r0
 80171b0:	4639      	mov	r1, r7
 80171b2:	4630      	mov	r0, r6
 80171b4:	f7e9 f880 	bl	80002b8 <__aeabi_dsub>
 80171b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80171ba:	4606      	mov	r6, r0
 80171bc:	460f      	mov	r7, r1
 80171be:	b933      	cbnz	r3, 80171ce <_strtod_l+0xace>
 80171c0:	f1ba 0f00 	cmp.w	sl, #0
 80171c4:	d103      	bne.n	80171ce <_strtod_l+0xace>
 80171c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80171ca:	2d00      	cmp	r5, #0
 80171cc:	d06d      	beq.n	80172aa <_strtod_l+0xbaa>
 80171ce:	a30a      	add	r3, pc, #40	; (adr r3, 80171f8 <_strtod_l+0xaf8>)
 80171d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d4:	4630      	mov	r0, r6
 80171d6:	4639      	mov	r1, r7
 80171d8:	f7e9 fc98 	bl	8000b0c <__aeabi_dcmplt>
 80171dc:	2800      	cmp	r0, #0
 80171de:	f47f acb8 	bne.w	8016b52 <_strtod_l+0x452>
 80171e2:	a307      	add	r3, pc, #28	; (adr r3, 8017200 <_strtod_l+0xb00>)
 80171e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e8:	4630      	mov	r0, r6
 80171ea:	4639      	mov	r1, r7
 80171ec:	f7e9 fcac 	bl	8000b48 <__aeabi_dcmpgt>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	f43f af79 	beq.w	80170e8 <_strtod_l+0x9e8>
 80171f6:	e4ac      	b.n	8016b52 <_strtod_l+0x452>
 80171f8:	94a03595 	.word	0x94a03595
 80171fc:	3fdfffff 	.word	0x3fdfffff
 8017200:	35afe535 	.word	0x35afe535
 8017204:	3fe00000 	.word	0x3fe00000
 8017208:	000fffff 	.word	0x000fffff
 801720c:	7ff00000 	.word	0x7ff00000
 8017210:	7fefffff 	.word	0x7fefffff
 8017214:	39500000 	.word	0x39500000
 8017218:	3ff00000 	.word	0x3ff00000
 801721c:	7fe00000 	.word	0x7fe00000
 8017220:	7c9fffff 	.word	0x7c9fffff
 8017224:	3fe00000 	.word	0x3fe00000
 8017228:	bff00000 	.word	0xbff00000
 801722c:	9b04      	ldr	r3, [sp, #16]
 801722e:	b333      	cbz	r3, 801727e <_strtod_l+0xb7e>
 8017230:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017232:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017236:	d822      	bhi.n	801727e <_strtod_l+0xb7e>
 8017238:	a327      	add	r3, pc, #156	; (adr r3, 80172d8 <_strtod_l+0xbd8>)
 801723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801723e:	4630      	mov	r0, r6
 8017240:	4639      	mov	r1, r7
 8017242:	f7e9 fc6d 	bl	8000b20 <__aeabi_dcmple>
 8017246:	b1a0      	cbz	r0, 8017272 <_strtod_l+0xb72>
 8017248:	4639      	mov	r1, r7
 801724a:	4630      	mov	r0, r6
 801724c:	f7e9 fcc4 	bl	8000bd8 <__aeabi_d2uiz>
 8017250:	2800      	cmp	r0, #0
 8017252:	bf08      	it	eq
 8017254:	2001      	moveq	r0, #1
 8017256:	f7e9 f96d 	bl	8000534 <__aeabi_ui2d>
 801725a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801725c:	4606      	mov	r6, r0
 801725e:	460f      	mov	r7, r1
 8017260:	bb03      	cbnz	r3, 80172a4 <_strtod_l+0xba4>
 8017262:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017266:	9012      	str	r0, [sp, #72]	; 0x48
 8017268:	9313      	str	r3, [sp, #76]	; 0x4c
 801726a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801726e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8017272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017274:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017276:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801727a:	1a9b      	subs	r3, r3, r2
 801727c:	930b      	str	r3, [sp, #44]	; 0x2c
 801727e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8017282:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8017286:	f001 fd6b 	bl	8018d60 <__ulp>
 801728a:	4650      	mov	r0, sl
 801728c:	ec53 2b10 	vmov	r2, r3, d0
 8017290:	4659      	mov	r1, fp
 8017292:	f7e9 f9c9 	bl	8000628 <__aeabi_dmul>
 8017296:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801729a:	f7e9 f80f 	bl	80002bc <__adddf3>
 801729e:	4682      	mov	sl, r0
 80172a0:	468b      	mov	fp, r1
 80172a2:	e772      	b.n	801718a <_strtod_l+0xa8a>
 80172a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80172a8:	e7df      	b.n	801726a <_strtod_l+0xb6a>
 80172aa:	a30d      	add	r3, pc, #52	; (adr r3, 80172e0 <_strtod_l+0xbe0>)
 80172ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b0:	f7e9 fc2c 	bl	8000b0c <__aeabi_dcmplt>
 80172b4:	e79c      	b.n	80171f0 <_strtod_l+0xaf0>
 80172b6:	2300      	movs	r3, #0
 80172b8:	930d      	str	r3, [sp, #52]	; 0x34
 80172ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80172bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80172be:	6013      	str	r3, [r2, #0]
 80172c0:	f7ff ba61 	b.w	8016786 <_strtod_l+0x86>
 80172c4:	2b65      	cmp	r3, #101	; 0x65
 80172c6:	f04f 0200 	mov.w	r2, #0
 80172ca:	f43f ab4e 	beq.w	801696a <_strtod_l+0x26a>
 80172ce:	2101      	movs	r1, #1
 80172d0:	4614      	mov	r4, r2
 80172d2:	9104      	str	r1, [sp, #16]
 80172d4:	f7ff bacb 	b.w	801686e <_strtod_l+0x16e>
 80172d8:	ffc00000 	.word	0xffc00000
 80172dc:	41dfffff 	.word	0x41dfffff
 80172e0:	94a03595 	.word	0x94a03595
 80172e4:	3fcfffff 	.word	0x3fcfffff

080172e8 <_strtod_r>:
 80172e8:	4b05      	ldr	r3, [pc, #20]	; (8017300 <_strtod_r+0x18>)
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	b410      	push	{r4}
 80172ee:	6a1b      	ldr	r3, [r3, #32]
 80172f0:	4c04      	ldr	r4, [pc, #16]	; (8017304 <_strtod_r+0x1c>)
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	bf08      	it	eq
 80172f6:	4623      	moveq	r3, r4
 80172f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80172fc:	f7ff ba00 	b.w	8016700 <_strtod_l>
 8017300:	2000000c 	.word	0x2000000c
 8017304:	20000070 	.word	0x20000070

08017308 <_strtol_l.isra.0>:
 8017308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801730c:	4680      	mov	r8, r0
 801730e:	4689      	mov	r9, r1
 8017310:	4692      	mov	sl, r2
 8017312:	461e      	mov	r6, r3
 8017314:	460f      	mov	r7, r1
 8017316:	463d      	mov	r5, r7
 8017318:	9808      	ldr	r0, [sp, #32]
 801731a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801731e:	f001 fa0d 	bl	801873c <__locale_ctype_ptr_l>
 8017322:	4420      	add	r0, r4
 8017324:	7843      	ldrb	r3, [r0, #1]
 8017326:	f013 0308 	ands.w	r3, r3, #8
 801732a:	d132      	bne.n	8017392 <_strtol_l.isra.0+0x8a>
 801732c:	2c2d      	cmp	r4, #45	; 0x2d
 801732e:	d132      	bne.n	8017396 <_strtol_l.isra.0+0x8e>
 8017330:	787c      	ldrb	r4, [r7, #1]
 8017332:	1cbd      	adds	r5, r7, #2
 8017334:	2201      	movs	r2, #1
 8017336:	2e00      	cmp	r6, #0
 8017338:	d05d      	beq.n	80173f6 <_strtol_l.isra.0+0xee>
 801733a:	2e10      	cmp	r6, #16
 801733c:	d109      	bne.n	8017352 <_strtol_l.isra.0+0x4a>
 801733e:	2c30      	cmp	r4, #48	; 0x30
 8017340:	d107      	bne.n	8017352 <_strtol_l.isra.0+0x4a>
 8017342:	782b      	ldrb	r3, [r5, #0]
 8017344:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017348:	2b58      	cmp	r3, #88	; 0x58
 801734a:	d14f      	bne.n	80173ec <_strtol_l.isra.0+0xe4>
 801734c:	786c      	ldrb	r4, [r5, #1]
 801734e:	2610      	movs	r6, #16
 8017350:	3502      	adds	r5, #2
 8017352:	2a00      	cmp	r2, #0
 8017354:	bf14      	ite	ne
 8017356:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801735a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801735e:	2700      	movs	r7, #0
 8017360:	fbb1 fcf6 	udiv	ip, r1, r6
 8017364:	4638      	mov	r0, r7
 8017366:	fb06 1e1c 	mls	lr, r6, ip, r1
 801736a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801736e:	2b09      	cmp	r3, #9
 8017370:	d817      	bhi.n	80173a2 <_strtol_l.isra.0+0x9a>
 8017372:	461c      	mov	r4, r3
 8017374:	42a6      	cmp	r6, r4
 8017376:	dd23      	ble.n	80173c0 <_strtol_l.isra.0+0xb8>
 8017378:	1c7b      	adds	r3, r7, #1
 801737a:	d007      	beq.n	801738c <_strtol_l.isra.0+0x84>
 801737c:	4584      	cmp	ip, r0
 801737e:	d31c      	bcc.n	80173ba <_strtol_l.isra.0+0xb2>
 8017380:	d101      	bne.n	8017386 <_strtol_l.isra.0+0x7e>
 8017382:	45a6      	cmp	lr, r4
 8017384:	db19      	blt.n	80173ba <_strtol_l.isra.0+0xb2>
 8017386:	fb00 4006 	mla	r0, r0, r6, r4
 801738a:	2701      	movs	r7, #1
 801738c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017390:	e7eb      	b.n	801736a <_strtol_l.isra.0+0x62>
 8017392:	462f      	mov	r7, r5
 8017394:	e7bf      	b.n	8017316 <_strtol_l.isra.0+0xe>
 8017396:	2c2b      	cmp	r4, #43	; 0x2b
 8017398:	bf04      	itt	eq
 801739a:	1cbd      	addeq	r5, r7, #2
 801739c:	787c      	ldrbeq	r4, [r7, #1]
 801739e:	461a      	mov	r2, r3
 80173a0:	e7c9      	b.n	8017336 <_strtol_l.isra.0+0x2e>
 80173a2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80173a6:	2b19      	cmp	r3, #25
 80173a8:	d801      	bhi.n	80173ae <_strtol_l.isra.0+0xa6>
 80173aa:	3c37      	subs	r4, #55	; 0x37
 80173ac:	e7e2      	b.n	8017374 <_strtol_l.isra.0+0x6c>
 80173ae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80173b2:	2b19      	cmp	r3, #25
 80173b4:	d804      	bhi.n	80173c0 <_strtol_l.isra.0+0xb8>
 80173b6:	3c57      	subs	r4, #87	; 0x57
 80173b8:	e7dc      	b.n	8017374 <_strtol_l.isra.0+0x6c>
 80173ba:	f04f 37ff 	mov.w	r7, #4294967295
 80173be:	e7e5      	b.n	801738c <_strtol_l.isra.0+0x84>
 80173c0:	1c7b      	adds	r3, r7, #1
 80173c2:	d108      	bne.n	80173d6 <_strtol_l.isra.0+0xce>
 80173c4:	2322      	movs	r3, #34	; 0x22
 80173c6:	f8c8 3000 	str.w	r3, [r8]
 80173ca:	4608      	mov	r0, r1
 80173cc:	f1ba 0f00 	cmp.w	sl, #0
 80173d0:	d107      	bne.n	80173e2 <_strtol_l.isra.0+0xda>
 80173d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173d6:	b102      	cbz	r2, 80173da <_strtol_l.isra.0+0xd2>
 80173d8:	4240      	negs	r0, r0
 80173da:	f1ba 0f00 	cmp.w	sl, #0
 80173de:	d0f8      	beq.n	80173d2 <_strtol_l.isra.0+0xca>
 80173e0:	b10f      	cbz	r7, 80173e6 <_strtol_l.isra.0+0xde>
 80173e2:	f105 39ff 	add.w	r9, r5, #4294967295
 80173e6:	f8ca 9000 	str.w	r9, [sl]
 80173ea:	e7f2      	b.n	80173d2 <_strtol_l.isra.0+0xca>
 80173ec:	2430      	movs	r4, #48	; 0x30
 80173ee:	2e00      	cmp	r6, #0
 80173f0:	d1af      	bne.n	8017352 <_strtol_l.isra.0+0x4a>
 80173f2:	2608      	movs	r6, #8
 80173f4:	e7ad      	b.n	8017352 <_strtol_l.isra.0+0x4a>
 80173f6:	2c30      	cmp	r4, #48	; 0x30
 80173f8:	d0a3      	beq.n	8017342 <_strtol_l.isra.0+0x3a>
 80173fa:	260a      	movs	r6, #10
 80173fc:	e7a9      	b.n	8017352 <_strtol_l.isra.0+0x4a>
	...

08017400 <_strtol_r>:
 8017400:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017402:	4c06      	ldr	r4, [pc, #24]	; (801741c <_strtol_r+0x1c>)
 8017404:	4d06      	ldr	r5, [pc, #24]	; (8017420 <_strtol_r+0x20>)
 8017406:	6824      	ldr	r4, [r4, #0]
 8017408:	6a24      	ldr	r4, [r4, #32]
 801740a:	2c00      	cmp	r4, #0
 801740c:	bf08      	it	eq
 801740e:	462c      	moveq	r4, r5
 8017410:	9400      	str	r4, [sp, #0]
 8017412:	f7ff ff79 	bl	8017308 <_strtol_l.isra.0>
 8017416:	b003      	add	sp, #12
 8017418:	bd30      	pop	{r4, r5, pc}
 801741a:	bf00      	nop
 801741c:	2000000c 	.word	0x2000000c
 8017420:	20000070 	.word	0x20000070

08017424 <_vsiprintf_r>:
 8017424:	b500      	push	{lr}
 8017426:	b09b      	sub	sp, #108	; 0x6c
 8017428:	9100      	str	r1, [sp, #0]
 801742a:	9104      	str	r1, [sp, #16]
 801742c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017430:	9105      	str	r1, [sp, #20]
 8017432:	9102      	str	r1, [sp, #8]
 8017434:	4905      	ldr	r1, [pc, #20]	; (801744c <_vsiprintf_r+0x28>)
 8017436:	9103      	str	r1, [sp, #12]
 8017438:	4669      	mov	r1, sp
 801743a:	f001 fed5 	bl	80191e8 <_svfiprintf_r>
 801743e:	9b00      	ldr	r3, [sp, #0]
 8017440:	2200      	movs	r2, #0
 8017442:	701a      	strb	r2, [r3, #0]
 8017444:	b01b      	add	sp, #108	; 0x6c
 8017446:	f85d fb04 	ldr.w	pc, [sp], #4
 801744a:	bf00      	nop
 801744c:	ffff0208 	.word	0xffff0208

08017450 <vsiprintf>:
 8017450:	4613      	mov	r3, r2
 8017452:	460a      	mov	r2, r1
 8017454:	4601      	mov	r1, r0
 8017456:	4802      	ldr	r0, [pc, #8]	; (8017460 <vsiprintf+0x10>)
 8017458:	6800      	ldr	r0, [r0, #0]
 801745a:	f7ff bfe3 	b.w	8017424 <_vsiprintf_r>
 801745e:	bf00      	nop
 8017460:	2000000c 	.word	0x2000000c

08017464 <quorem>:
 8017464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017468:	6903      	ldr	r3, [r0, #16]
 801746a:	690c      	ldr	r4, [r1, #16]
 801746c:	42a3      	cmp	r3, r4
 801746e:	4680      	mov	r8, r0
 8017470:	f2c0 8082 	blt.w	8017578 <quorem+0x114>
 8017474:	3c01      	subs	r4, #1
 8017476:	f101 0714 	add.w	r7, r1, #20
 801747a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801747e:	f100 0614 	add.w	r6, r0, #20
 8017482:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8017486:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801748a:	eb06 030c 	add.w	r3, r6, ip
 801748e:	3501      	adds	r5, #1
 8017490:	eb07 090c 	add.w	r9, r7, ip
 8017494:	9301      	str	r3, [sp, #4]
 8017496:	fbb0 f5f5 	udiv	r5, r0, r5
 801749a:	b395      	cbz	r5, 8017502 <quorem+0x9e>
 801749c:	f04f 0a00 	mov.w	sl, #0
 80174a0:	4638      	mov	r0, r7
 80174a2:	46b6      	mov	lr, r6
 80174a4:	46d3      	mov	fp, sl
 80174a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80174aa:	b293      	uxth	r3, r2
 80174ac:	fb05 a303 	mla	r3, r5, r3, sl
 80174b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	ebab 0303 	sub.w	r3, fp, r3
 80174ba:	0c12      	lsrs	r2, r2, #16
 80174bc:	f8de b000 	ldr.w	fp, [lr]
 80174c0:	fb05 a202 	mla	r2, r5, r2, sl
 80174c4:	fa13 f38b 	uxtah	r3, r3, fp
 80174c8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80174cc:	fa1f fb82 	uxth.w	fp, r2
 80174d0:	f8de 2000 	ldr.w	r2, [lr]
 80174d4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80174d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174dc:	b29b      	uxth	r3, r3
 80174de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174e2:	4581      	cmp	r9, r0
 80174e4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80174e8:	f84e 3b04 	str.w	r3, [lr], #4
 80174ec:	d2db      	bcs.n	80174a6 <quorem+0x42>
 80174ee:	f856 300c 	ldr.w	r3, [r6, ip]
 80174f2:	b933      	cbnz	r3, 8017502 <quorem+0x9e>
 80174f4:	9b01      	ldr	r3, [sp, #4]
 80174f6:	3b04      	subs	r3, #4
 80174f8:	429e      	cmp	r6, r3
 80174fa:	461a      	mov	r2, r3
 80174fc:	d330      	bcc.n	8017560 <quorem+0xfc>
 80174fe:	f8c8 4010 	str.w	r4, [r8, #16]
 8017502:	4640      	mov	r0, r8
 8017504:	f001 fbb4 	bl	8018c70 <__mcmp>
 8017508:	2800      	cmp	r0, #0
 801750a:	db25      	blt.n	8017558 <quorem+0xf4>
 801750c:	3501      	adds	r5, #1
 801750e:	4630      	mov	r0, r6
 8017510:	f04f 0c00 	mov.w	ip, #0
 8017514:	f857 2b04 	ldr.w	r2, [r7], #4
 8017518:	f8d0 e000 	ldr.w	lr, [r0]
 801751c:	b293      	uxth	r3, r2
 801751e:	ebac 0303 	sub.w	r3, ip, r3
 8017522:	0c12      	lsrs	r2, r2, #16
 8017524:	fa13 f38e 	uxtah	r3, r3, lr
 8017528:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801752c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017530:	b29b      	uxth	r3, r3
 8017532:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017536:	45b9      	cmp	r9, r7
 8017538:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801753c:	f840 3b04 	str.w	r3, [r0], #4
 8017540:	d2e8      	bcs.n	8017514 <quorem+0xb0>
 8017542:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8017546:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801754a:	b92a      	cbnz	r2, 8017558 <quorem+0xf4>
 801754c:	3b04      	subs	r3, #4
 801754e:	429e      	cmp	r6, r3
 8017550:	461a      	mov	r2, r3
 8017552:	d30b      	bcc.n	801756c <quorem+0x108>
 8017554:	f8c8 4010 	str.w	r4, [r8, #16]
 8017558:	4628      	mov	r0, r5
 801755a:	b003      	add	sp, #12
 801755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017560:	6812      	ldr	r2, [r2, #0]
 8017562:	3b04      	subs	r3, #4
 8017564:	2a00      	cmp	r2, #0
 8017566:	d1ca      	bne.n	80174fe <quorem+0x9a>
 8017568:	3c01      	subs	r4, #1
 801756a:	e7c5      	b.n	80174f8 <quorem+0x94>
 801756c:	6812      	ldr	r2, [r2, #0]
 801756e:	3b04      	subs	r3, #4
 8017570:	2a00      	cmp	r2, #0
 8017572:	d1ef      	bne.n	8017554 <quorem+0xf0>
 8017574:	3c01      	subs	r4, #1
 8017576:	e7ea      	b.n	801754e <quorem+0xea>
 8017578:	2000      	movs	r0, #0
 801757a:	e7ee      	b.n	801755a <quorem+0xf6>
 801757c:	0000      	movs	r0, r0
	...

08017580 <_dtoa_r>:
 8017580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017584:	ec57 6b10 	vmov	r6, r7, d0
 8017588:	b097      	sub	sp, #92	; 0x5c
 801758a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801758c:	9106      	str	r1, [sp, #24]
 801758e:	4604      	mov	r4, r0
 8017590:	920b      	str	r2, [sp, #44]	; 0x2c
 8017592:	9312      	str	r3, [sp, #72]	; 0x48
 8017594:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017598:	e9cd 6700 	strd	r6, r7, [sp]
 801759c:	b93d      	cbnz	r5, 80175ae <_dtoa_r+0x2e>
 801759e:	2010      	movs	r0, #16
 80175a0:	f001 f8ee 	bl	8018780 <malloc>
 80175a4:	6260      	str	r0, [r4, #36]	; 0x24
 80175a6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80175aa:	6005      	str	r5, [r0, #0]
 80175ac:	60c5      	str	r5, [r0, #12]
 80175ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175b0:	6819      	ldr	r1, [r3, #0]
 80175b2:	b151      	cbz	r1, 80175ca <_dtoa_r+0x4a>
 80175b4:	685a      	ldr	r2, [r3, #4]
 80175b6:	604a      	str	r2, [r1, #4]
 80175b8:	2301      	movs	r3, #1
 80175ba:	4093      	lsls	r3, r2
 80175bc:	608b      	str	r3, [r1, #8]
 80175be:	4620      	mov	r0, r4
 80175c0:	f001 f937 	bl	8018832 <_Bfree>
 80175c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80175c6:	2200      	movs	r2, #0
 80175c8:	601a      	str	r2, [r3, #0]
 80175ca:	1e3b      	subs	r3, r7, #0
 80175cc:	bfbb      	ittet	lt
 80175ce:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80175d2:	9301      	strlt	r3, [sp, #4]
 80175d4:	2300      	movge	r3, #0
 80175d6:	2201      	movlt	r2, #1
 80175d8:	bfac      	ite	ge
 80175da:	f8c8 3000 	strge.w	r3, [r8]
 80175de:	f8c8 2000 	strlt.w	r2, [r8]
 80175e2:	4baf      	ldr	r3, [pc, #700]	; (80178a0 <_dtoa_r+0x320>)
 80175e4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80175e8:	ea33 0308 	bics.w	r3, r3, r8
 80175ec:	d114      	bne.n	8017618 <_dtoa_r+0x98>
 80175ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80175f0:	f242 730f 	movw	r3, #9999	; 0x270f
 80175f4:	6013      	str	r3, [r2, #0]
 80175f6:	9b00      	ldr	r3, [sp, #0]
 80175f8:	b923      	cbnz	r3, 8017604 <_dtoa_r+0x84>
 80175fa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80175fe:	2800      	cmp	r0, #0
 8017600:	f000 8542 	beq.w	8018088 <_dtoa_r+0xb08>
 8017604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017606:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80178b4 <_dtoa_r+0x334>
 801760a:	2b00      	cmp	r3, #0
 801760c:	f000 8544 	beq.w	8018098 <_dtoa_r+0xb18>
 8017610:	f10b 0303 	add.w	r3, fp, #3
 8017614:	f000 bd3e 	b.w	8018094 <_dtoa_r+0xb14>
 8017618:	e9dd 6700 	ldrd	r6, r7, [sp]
 801761c:	2200      	movs	r2, #0
 801761e:	2300      	movs	r3, #0
 8017620:	4630      	mov	r0, r6
 8017622:	4639      	mov	r1, r7
 8017624:	f7e9 fa68 	bl	8000af8 <__aeabi_dcmpeq>
 8017628:	4681      	mov	r9, r0
 801762a:	b168      	cbz	r0, 8017648 <_dtoa_r+0xc8>
 801762c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801762e:	2301      	movs	r3, #1
 8017630:	6013      	str	r3, [r2, #0]
 8017632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017634:	2b00      	cmp	r3, #0
 8017636:	f000 8524 	beq.w	8018082 <_dtoa_r+0xb02>
 801763a:	4b9a      	ldr	r3, [pc, #616]	; (80178a4 <_dtoa_r+0x324>)
 801763c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801763e:	f103 3bff 	add.w	fp, r3, #4294967295
 8017642:	6013      	str	r3, [r2, #0]
 8017644:	f000 bd28 	b.w	8018098 <_dtoa_r+0xb18>
 8017648:	aa14      	add	r2, sp, #80	; 0x50
 801764a:	a915      	add	r1, sp, #84	; 0x54
 801764c:	ec47 6b10 	vmov	d0, r6, r7
 8017650:	4620      	mov	r0, r4
 8017652:	f001 fbfb 	bl	8018e4c <__d2b>
 8017656:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801765a:	9004      	str	r0, [sp, #16]
 801765c:	2d00      	cmp	r5, #0
 801765e:	d07c      	beq.n	801775a <_dtoa_r+0x1da>
 8017660:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017664:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8017668:	46b2      	mov	sl, r6
 801766a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801766e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017672:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8017676:	2200      	movs	r2, #0
 8017678:	4b8b      	ldr	r3, [pc, #556]	; (80178a8 <_dtoa_r+0x328>)
 801767a:	4650      	mov	r0, sl
 801767c:	4659      	mov	r1, fp
 801767e:	f7e8 fe1b 	bl	80002b8 <__aeabi_dsub>
 8017682:	a381      	add	r3, pc, #516	; (adr r3, 8017888 <_dtoa_r+0x308>)
 8017684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017688:	f7e8 ffce 	bl	8000628 <__aeabi_dmul>
 801768c:	a380      	add	r3, pc, #512	; (adr r3, 8017890 <_dtoa_r+0x310>)
 801768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017692:	f7e8 fe13 	bl	80002bc <__adddf3>
 8017696:	4606      	mov	r6, r0
 8017698:	4628      	mov	r0, r5
 801769a:	460f      	mov	r7, r1
 801769c:	f7e8 ff5a 	bl	8000554 <__aeabi_i2d>
 80176a0:	a37d      	add	r3, pc, #500	; (adr r3, 8017898 <_dtoa_r+0x318>)
 80176a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176a6:	f7e8 ffbf 	bl	8000628 <__aeabi_dmul>
 80176aa:	4602      	mov	r2, r0
 80176ac:	460b      	mov	r3, r1
 80176ae:	4630      	mov	r0, r6
 80176b0:	4639      	mov	r1, r7
 80176b2:	f7e8 fe03 	bl	80002bc <__adddf3>
 80176b6:	4606      	mov	r6, r0
 80176b8:	460f      	mov	r7, r1
 80176ba:	f7e9 fa65 	bl	8000b88 <__aeabi_d2iz>
 80176be:	2200      	movs	r2, #0
 80176c0:	4682      	mov	sl, r0
 80176c2:	2300      	movs	r3, #0
 80176c4:	4630      	mov	r0, r6
 80176c6:	4639      	mov	r1, r7
 80176c8:	f7e9 fa20 	bl	8000b0c <__aeabi_dcmplt>
 80176cc:	b148      	cbz	r0, 80176e2 <_dtoa_r+0x162>
 80176ce:	4650      	mov	r0, sl
 80176d0:	f7e8 ff40 	bl	8000554 <__aeabi_i2d>
 80176d4:	4632      	mov	r2, r6
 80176d6:	463b      	mov	r3, r7
 80176d8:	f7e9 fa0e 	bl	8000af8 <__aeabi_dcmpeq>
 80176dc:	b908      	cbnz	r0, 80176e2 <_dtoa_r+0x162>
 80176de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80176e2:	f1ba 0f16 	cmp.w	sl, #22
 80176e6:	d859      	bhi.n	801779c <_dtoa_r+0x21c>
 80176e8:	4970      	ldr	r1, [pc, #448]	; (80178ac <_dtoa_r+0x32c>)
 80176ea:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80176ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80176f6:	f7e9 fa27 	bl	8000b48 <__aeabi_dcmpgt>
 80176fa:	2800      	cmp	r0, #0
 80176fc:	d050      	beq.n	80177a0 <_dtoa_r+0x220>
 80176fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017702:	2300      	movs	r3, #0
 8017704:	930f      	str	r3, [sp, #60]	; 0x3c
 8017706:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017708:	1b5d      	subs	r5, r3, r5
 801770a:	f1b5 0801 	subs.w	r8, r5, #1
 801770e:	bf49      	itett	mi
 8017710:	f1c5 0301 	rsbmi	r3, r5, #1
 8017714:	2300      	movpl	r3, #0
 8017716:	9305      	strmi	r3, [sp, #20]
 8017718:	f04f 0800 	movmi.w	r8, #0
 801771c:	bf58      	it	pl
 801771e:	9305      	strpl	r3, [sp, #20]
 8017720:	f1ba 0f00 	cmp.w	sl, #0
 8017724:	db3e      	blt.n	80177a4 <_dtoa_r+0x224>
 8017726:	2300      	movs	r3, #0
 8017728:	44d0      	add	r8, sl
 801772a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801772e:	9307      	str	r3, [sp, #28]
 8017730:	9b06      	ldr	r3, [sp, #24]
 8017732:	2b09      	cmp	r3, #9
 8017734:	f200 8090 	bhi.w	8017858 <_dtoa_r+0x2d8>
 8017738:	2b05      	cmp	r3, #5
 801773a:	bfc4      	itt	gt
 801773c:	3b04      	subgt	r3, #4
 801773e:	9306      	strgt	r3, [sp, #24]
 8017740:	9b06      	ldr	r3, [sp, #24]
 8017742:	f1a3 0302 	sub.w	r3, r3, #2
 8017746:	bfcc      	ite	gt
 8017748:	2500      	movgt	r5, #0
 801774a:	2501      	movle	r5, #1
 801774c:	2b03      	cmp	r3, #3
 801774e:	f200 808f 	bhi.w	8017870 <_dtoa_r+0x2f0>
 8017752:	e8df f003 	tbb	[pc, r3]
 8017756:	7f7d      	.short	0x7f7d
 8017758:	7131      	.short	0x7131
 801775a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801775e:	441d      	add	r5, r3
 8017760:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8017764:	2820      	cmp	r0, #32
 8017766:	dd13      	ble.n	8017790 <_dtoa_r+0x210>
 8017768:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801776c:	9b00      	ldr	r3, [sp, #0]
 801776e:	fa08 f800 	lsl.w	r8, r8, r0
 8017772:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8017776:	fa23 f000 	lsr.w	r0, r3, r0
 801777a:	ea48 0000 	orr.w	r0, r8, r0
 801777e:	f7e8 fed9 	bl	8000534 <__aeabi_ui2d>
 8017782:	2301      	movs	r3, #1
 8017784:	4682      	mov	sl, r0
 8017786:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801778a:	3d01      	subs	r5, #1
 801778c:	9313      	str	r3, [sp, #76]	; 0x4c
 801778e:	e772      	b.n	8017676 <_dtoa_r+0xf6>
 8017790:	9b00      	ldr	r3, [sp, #0]
 8017792:	f1c0 0020 	rsb	r0, r0, #32
 8017796:	fa03 f000 	lsl.w	r0, r3, r0
 801779a:	e7f0      	b.n	801777e <_dtoa_r+0x1fe>
 801779c:	2301      	movs	r3, #1
 801779e:	e7b1      	b.n	8017704 <_dtoa_r+0x184>
 80177a0:	900f      	str	r0, [sp, #60]	; 0x3c
 80177a2:	e7b0      	b.n	8017706 <_dtoa_r+0x186>
 80177a4:	9b05      	ldr	r3, [sp, #20]
 80177a6:	eba3 030a 	sub.w	r3, r3, sl
 80177aa:	9305      	str	r3, [sp, #20]
 80177ac:	f1ca 0300 	rsb	r3, sl, #0
 80177b0:	9307      	str	r3, [sp, #28]
 80177b2:	2300      	movs	r3, #0
 80177b4:	930e      	str	r3, [sp, #56]	; 0x38
 80177b6:	e7bb      	b.n	8017730 <_dtoa_r+0x1b0>
 80177b8:	2301      	movs	r3, #1
 80177ba:	930a      	str	r3, [sp, #40]	; 0x28
 80177bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177be:	2b00      	cmp	r3, #0
 80177c0:	dd59      	ble.n	8017876 <_dtoa_r+0x2f6>
 80177c2:	9302      	str	r3, [sp, #8]
 80177c4:	4699      	mov	r9, r3
 80177c6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80177c8:	2200      	movs	r2, #0
 80177ca:	6072      	str	r2, [r6, #4]
 80177cc:	2204      	movs	r2, #4
 80177ce:	f102 0014 	add.w	r0, r2, #20
 80177d2:	4298      	cmp	r0, r3
 80177d4:	6871      	ldr	r1, [r6, #4]
 80177d6:	d953      	bls.n	8017880 <_dtoa_r+0x300>
 80177d8:	4620      	mov	r0, r4
 80177da:	f000 fff6 	bl	80187ca <_Balloc>
 80177de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80177e0:	6030      	str	r0, [r6, #0]
 80177e2:	f1b9 0f0e 	cmp.w	r9, #14
 80177e6:	f8d3 b000 	ldr.w	fp, [r3]
 80177ea:	f200 80e6 	bhi.w	80179ba <_dtoa_r+0x43a>
 80177ee:	2d00      	cmp	r5, #0
 80177f0:	f000 80e3 	beq.w	80179ba <_dtoa_r+0x43a>
 80177f4:	ed9d 7b00 	vldr	d7, [sp]
 80177f8:	f1ba 0f00 	cmp.w	sl, #0
 80177fc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017800:	dd74      	ble.n	80178ec <_dtoa_r+0x36c>
 8017802:	4a2a      	ldr	r2, [pc, #168]	; (80178ac <_dtoa_r+0x32c>)
 8017804:	f00a 030f 	and.w	r3, sl, #15
 8017808:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801780c:	ed93 7b00 	vldr	d7, [r3]
 8017810:	ea4f 162a 	mov.w	r6, sl, asr #4
 8017814:	06f0      	lsls	r0, r6, #27
 8017816:	ed8d 7b08 	vstr	d7, [sp, #32]
 801781a:	d565      	bpl.n	80178e8 <_dtoa_r+0x368>
 801781c:	4b24      	ldr	r3, [pc, #144]	; (80178b0 <_dtoa_r+0x330>)
 801781e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017822:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017826:	f7e9 f829 	bl	800087c <__aeabi_ddiv>
 801782a:	e9cd 0100 	strd	r0, r1, [sp]
 801782e:	f006 060f 	and.w	r6, r6, #15
 8017832:	2503      	movs	r5, #3
 8017834:	4f1e      	ldr	r7, [pc, #120]	; (80178b0 <_dtoa_r+0x330>)
 8017836:	e04c      	b.n	80178d2 <_dtoa_r+0x352>
 8017838:	2301      	movs	r3, #1
 801783a:	930a      	str	r3, [sp, #40]	; 0x28
 801783c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801783e:	4453      	add	r3, sl
 8017840:	f103 0901 	add.w	r9, r3, #1
 8017844:	9302      	str	r3, [sp, #8]
 8017846:	464b      	mov	r3, r9
 8017848:	2b01      	cmp	r3, #1
 801784a:	bfb8      	it	lt
 801784c:	2301      	movlt	r3, #1
 801784e:	e7ba      	b.n	80177c6 <_dtoa_r+0x246>
 8017850:	2300      	movs	r3, #0
 8017852:	e7b2      	b.n	80177ba <_dtoa_r+0x23a>
 8017854:	2300      	movs	r3, #0
 8017856:	e7f0      	b.n	801783a <_dtoa_r+0x2ba>
 8017858:	2501      	movs	r5, #1
 801785a:	2300      	movs	r3, #0
 801785c:	9306      	str	r3, [sp, #24]
 801785e:	950a      	str	r5, [sp, #40]	; 0x28
 8017860:	f04f 33ff 	mov.w	r3, #4294967295
 8017864:	9302      	str	r3, [sp, #8]
 8017866:	4699      	mov	r9, r3
 8017868:	2200      	movs	r2, #0
 801786a:	2312      	movs	r3, #18
 801786c:	920b      	str	r2, [sp, #44]	; 0x2c
 801786e:	e7aa      	b.n	80177c6 <_dtoa_r+0x246>
 8017870:	2301      	movs	r3, #1
 8017872:	930a      	str	r3, [sp, #40]	; 0x28
 8017874:	e7f4      	b.n	8017860 <_dtoa_r+0x2e0>
 8017876:	2301      	movs	r3, #1
 8017878:	9302      	str	r3, [sp, #8]
 801787a:	4699      	mov	r9, r3
 801787c:	461a      	mov	r2, r3
 801787e:	e7f5      	b.n	801786c <_dtoa_r+0x2ec>
 8017880:	3101      	adds	r1, #1
 8017882:	6071      	str	r1, [r6, #4]
 8017884:	0052      	lsls	r2, r2, #1
 8017886:	e7a2      	b.n	80177ce <_dtoa_r+0x24e>
 8017888:	636f4361 	.word	0x636f4361
 801788c:	3fd287a7 	.word	0x3fd287a7
 8017890:	8b60c8b3 	.word	0x8b60c8b3
 8017894:	3fc68a28 	.word	0x3fc68a28
 8017898:	509f79fb 	.word	0x509f79fb
 801789c:	3fd34413 	.word	0x3fd34413
 80178a0:	7ff00000 	.word	0x7ff00000
 80178a4:	0801a57c 	.word	0x0801a57c
 80178a8:	3ff80000 	.word	0x3ff80000
 80178ac:	0801a480 	.word	0x0801a480
 80178b0:	0801a458 	.word	0x0801a458
 80178b4:	0801a449 	.word	0x0801a449
 80178b8:	07f1      	lsls	r1, r6, #31
 80178ba:	d508      	bpl.n	80178ce <_dtoa_r+0x34e>
 80178bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80178c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80178c4:	f7e8 feb0 	bl	8000628 <__aeabi_dmul>
 80178c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80178cc:	3501      	adds	r5, #1
 80178ce:	1076      	asrs	r6, r6, #1
 80178d0:	3708      	adds	r7, #8
 80178d2:	2e00      	cmp	r6, #0
 80178d4:	d1f0      	bne.n	80178b8 <_dtoa_r+0x338>
 80178d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80178da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178de:	f7e8 ffcd 	bl	800087c <__aeabi_ddiv>
 80178e2:	e9cd 0100 	strd	r0, r1, [sp]
 80178e6:	e01a      	b.n	801791e <_dtoa_r+0x39e>
 80178e8:	2502      	movs	r5, #2
 80178ea:	e7a3      	b.n	8017834 <_dtoa_r+0x2b4>
 80178ec:	f000 80a0 	beq.w	8017a30 <_dtoa_r+0x4b0>
 80178f0:	f1ca 0600 	rsb	r6, sl, #0
 80178f4:	4b9f      	ldr	r3, [pc, #636]	; (8017b74 <_dtoa_r+0x5f4>)
 80178f6:	4fa0      	ldr	r7, [pc, #640]	; (8017b78 <_dtoa_r+0x5f8>)
 80178f8:	f006 020f 	and.w	r2, r6, #15
 80178fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017904:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017908:	f7e8 fe8e 	bl	8000628 <__aeabi_dmul>
 801790c:	e9cd 0100 	strd	r0, r1, [sp]
 8017910:	1136      	asrs	r6, r6, #4
 8017912:	2300      	movs	r3, #0
 8017914:	2502      	movs	r5, #2
 8017916:	2e00      	cmp	r6, #0
 8017918:	d17f      	bne.n	8017a1a <_dtoa_r+0x49a>
 801791a:	2b00      	cmp	r3, #0
 801791c:	d1e1      	bne.n	80178e2 <_dtoa_r+0x362>
 801791e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017920:	2b00      	cmp	r3, #0
 8017922:	f000 8087 	beq.w	8017a34 <_dtoa_r+0x4b4>
 8017926:	e9dd 6700 	ldrd	r6, r7, [sp]
 801792a:	2200      	movs	r2, #0
 801792c:	4b93      	ldr	r3, [pc, #588]	; (8017b7c <_dtoa_r+0x5fc>)
 801792e:	4630      	mov	r0, r6
 8017930:	4639      	mov	r1, r7
 8017932:	f7e9 f8eb 	bl	8000b0c <__aeabi_dcmplt>
 8017936:	2800      	cmp	r0, #0
 8017938:	d07c      	beq.n	8017a34 <_dtoa_r+0x4b4>
 801793a:	f1b9 0f00 	cmp.w	r9, #0
 801793e:	d079      	beq.n	8017a34 <_dtoa_r+0x4b4>
 8017940:	9b02      	ldr	r3, [sp, #8]
 8017942:	2b00      	cmp	r3, #0
 8017944:	dd35      	ble.n	80179b2 <_dtoa_r+0x432>
 8017946:	f10a 33ff 	add.w	r3, sl, #4294967295
 801794a:	9308      	str	r3, [sp, #32]
 801794c:	4639      	mov	r1, r7
 801794e:	2200      	movs	r2, #0
 8017950:	4b8b      	ldr	r3, [pc, #556]	; (8017b80 <_dtoa_r+0x600>)
 8017952:	4630      	mov	r0, r6
 8017954:	f7e8 fe68 	bl	8000628 <__aeabi_dmul>
 8017958:	e9cd 0100 	strd	r0, r1, [sp]
 801795c:	9f02      	ldr	r7, [sp, #8]
 801795e:	3501      	adds	r5, #1
 8017960:	4628      	mov	r0, r5
 8017962:	f7e8 fdf7 	bl	8000554 <__aeabi_i2d>
 8017966:	e9dd 2300 	ldrd	r2, r3, [sp]
 801796a:	f7e8 fe5d 	bl	8000628 <__aeabi_dmul>
 801796e:	2200      	movs	r2, #0
 8017970:	4b84      	ldr	r3, [pc, #528]	; (8017b84 <_dtoa_r+0x604>)
 8017972:	f7e8 fca3 	bl	80002bc <__adddf3>
 8017976:	4605      	mov	r5, r0
 8017978:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801797c:	2f00      	cmp	r7, #0
 801797e:	d15d      	bne.n	8017a3c <_dtoa_r+0x4bc>
 8017980:	2200      	movs	r2, #0
 8017982:	4b81      	ldr	r3, [pc, #516]	; (8017b88 <_dtoa_r+0x608>)
 8017984:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017988:	f7e8 fc96 	bl	80002b8 <__aeabi_dsub>
 801798c:	462a      	mov	r2, r5
 801798e:	4633      	mov	r3, r6
 8017990:	e9cd 0100 	strd	r0, r1, [sp]
 8017994:	f7e9 f8d8 	bl	8000b48 <__aeabi_dcmpgt>
 8017998:	2800      	cmp	r0, #0
 801799a:	f040 8288 	bne.w	8017eae <_dtoa_r+0x92e>
 801799e:	462a      	mov	r2, r5
 80179a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80179a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179a8:	f7e9 f8b0 	bl	8000b0c <__aeabi_dcmplt>
 80179ac:	2800      	cmp	r0, #0
 80179ae:	f040 827c 	bne.w	8017eaa <_dtoa_r+0x92a>
 80179b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80179b6:	e9cd 2300 	strd	r2, r3, [sp]
 80179ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80179bc:	2b00      	cmp	r3, #0
 80179be:	f2c0 8150 	blt.w	8017c62 <_dtoa_r+0x6e2>
 80179c2:	f1ba 0f0e 	cmp.w	sl, #14
 80179c6:	f300 814c 	bgt.w	8017c62 <_dtoa_r+0x6e2>
 80179ca:	4b6a      	ldr	r3, [pc, #424]	; (8017b74 <_dtoa_r+0x5f4>)
 80179cc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80179d0:	ed93 7b00 	vldr	d7, [r3]
 80179d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80179dc:	f280 80d8 	bge.w	8017b90 <_dtoa_r+0x610>
 80179e0:	f1b9 0f00 	cmp.w	r9, #0
 80179e4:	f300 80d4 	bgt.w	8017b90 <_dtoa_r+0x610>
 80179e8:	f040 825e 	bne.w	8017ea8 <_dtoa_r+0x928>
 80179ec:	2200      	movs	r2, #0
 80179ee:	4b66      	ldr	r3, [pc, #408]	; (8017b88 <_dtoa_r+0x608>)
 80179f0:	ec51 0b17 	vmov	r0, r1, d7
 80179f4:	f7e8 fe18 	bl	8000628 <__aeabi_dmul>
 80179f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80179fc:	f7e9 f89a 	bl	8000b34 <__aeabi_dcmpge>
 8017a00:	464f      	mov	r7, r9
 8017a02:	464e      	mov	r6, r9
 8017a04:	2800      	cmp	r0, #0
 8017a06:	f040 8234 	bne.w	8017e72 <_dtoa_r+0x8f2>
 8017a0a:	2331      	movs	r3, #49	; 0x31
 8017a0c:	f10b 0501 	add.w	r5, fp, #1
 8017a10:	f88b 3000 	strb.w	r3, [fp]
 8017a14:	f10a 0a01 	add.w	sl, sl, #1
 8017a18:	e22f      	b.n	8017e7a <_dtoa_r+0x8fa>
 8017a1a:	07f2      	lsls	r2, r6, #31
 8017a1c:	d505      	bpl.n	8017a2a <_dtoa_r+0x4aa>
 8017a1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017a22:	f7e8 fe01 	bl	8000628 <__aeabi_dmul>
 8017a26:	3501      	adds	r5, #1
 8017a28:	2301      	movs	r3, #1
 8017a2a:	1076      	asrs	r6, r6, #1
 8017a2c:	3708      	adds	r7, #8
 8017a2e:	e772      	b.n	8017916 <_dtoa_r+0x396>
 8017a30:	2502      	movs	r5, #2
 8017a32:	e774      	b.n	801791e <_dtoa_r+0x39e>
 8017a34:	f8cd a020 	str.w	sl, [sp, #32]
 8017a38:	464f      	mov	r7, r9
 8017a3a:	e791      	b.n	8017960 <_dtoa_r+0x3e0>
 8017a3c:	4b4d      	ldr	r3, [pc, #308]	; (8017b74 <_dtoa_r+0x5f4>)
 8017a3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8017a42:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8017a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d047      	beq.n	8017adc <_dtoa_r+0x55c>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	460b      	mov	r3, r1
 8017a50:	2000      	movs	r0, #0
 8017a52:	494e      	ldr	r1, [pc, #312]	; (8017b8c <_dtoa_r+0x60c>)
 8017a54:	f7e8 ff12 	bl	800087c <__aeabi_ddiv>
 8017a58:	462a      	mov	r2, r5
 8017a5a:	4633      	mov	r3, r6
 8017a5c:	f7e8 fc2c 	bl	80002b8 <__aeabi_dsub>
 8017a60:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017a64:	465d      	mov	r5, fp
 8017a66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a6a:	f7e9 f88d 	bl	8000b88 <__aeabi_d2iz>
 8017a6e:	4606      	mov	r6, r0
 8017a70:	f7e8 fd70 	bl	8000554 <__aeabi_i2d>
 8017a74:	4602      	mov	r2, r0
 8017a76:	460b      	mov	r3, r1
 8017a78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a7c:	f7e8 fc1c 	bl	80002b8 <__aeabi_dsub>
 8017a80:	3630      	adds	r6, #48	; 0x30
 8017a82:	f805 6b01 	strb.w	r6, [r5], #1
 8017a86:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017a8a:	e9cd 0100 	strd	r0, r1, [sp]
 8017a8e:	f7e9 f83d 	bl	8000b0c <__aeabi_dcmplt>
 8017a92:	2800      	cmp	r0, #0
 8017a94:	d163      	bne.n	8017b5e <_dtoa_r+0x5de>
 8017a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a9a:	2000      	movs	r0, #0
 8017a9c:	4937      	ldr	r1, [pc, #220]	; (8017b7c <_dtoa_r+0x5fc>)
 8017a9e:	f7e8 fc0b 	bl	80002b8 <__aeabi_dsub>
 8017aa2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017aa6:	f7e9 f831 	bl	8000b0c <__aeabi_dcmplt>
 8017aaa:	2800      	cmp	r0, #0
 8017aac:	f040 80b7 	bne.w	8017c1e <_dtoa_r+0x69e>
 8017ab0:	eba5 030b 	sub.w	r3, r5, fp
 8017ab4:	429f      	cmp	r7, r3
 8017ab6:	f77f af7c 	ble.w	80179b2 <_dtoa_r+0x432>
 8017aba:	2200      	movs	r2, #0
 8017abc:	4b30      	ldr	r3, [pc, #192]	; (8017b80 <_dtoa_r+0x600>)
 8017abe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017ac2:	f7e8 fdb1 	bl	8000628 <__aeabi_dmul>
 8017ac6:	2200      	movs	r2, #0
 8017ac8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017acc:	4b2c      	ldr	r3, [pc, #176]	; (8017b80 <_dtoa_r+0x600>)
 8017ace:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ad2:	f7e8 fda9 	bl	8000628 <__aeabi_dmul>
 8017ad6:	e9cd 0100 	strd	r0, r1, [sp]
 8017ada:	e7c4      	b.n	8017a66 <_dtoa_r+0x4e6>
 8017adc:	462a      	mov	r2, r5
 8017ade:	4633      	mov	r3, r6
 8017ae0:	f7e8 fda2 	bl	8000628 <__aeabi_dmul>
 8017ae4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017ae8:	eb0b 0507 	add.w	r5, fp, r7
 8017aec:	465e      	mov	r6, fp
 8017aee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017af2:	f7e9 f849 	bl	8000b88 <__aeabi_d2iz>
 8017af6:	4607      	mov	r7, r0
 8017af8:	f7e8 fd2c 	bl	8000554 <__aeabi_i2d>
 8017afc:	3730      	adds	r7, #48	; 0x30
 8017afe:	4602      	mov	r2, r0
 8017b00:	460b      	mov	r3, r1
 8017b02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b06:	f7e8 fbd7 	bl	80002b8 <__aeabi_dsub>
 8017b0a:	f806 7b01 	strb.w	r7, [r6], #1
 8017b0e:	42ae      	cmp	r6, r5
 8017b10:	e9cd 0100 	strd	r0, r1, [sp]
 8017b14:	f04f 0200 	mov.w	r2, #0
 8017b18:	d126      	bne.n	8017b68 <_dtoa_r+0x5e8>
 8017b1a:	4b1c      	ldr	r3, [pc, #112]	; (8017b8c <_dtoa_r+0x60c>)
 8017b1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017b20:	f7e8 fbcc 	bl	80002bc <__adddf3>
 8017b24:	4602      	mov	r2, r0
 8017b26:	460b      	mov	r3, r1
 8017b28:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b2c:	f7e9 f80c 	bl	8000b48 <__aeabi_dcmpgt>
 8017b30:	2800      	cmp	r0, #0
 8017b32:	d174      	bne.n	8017c1e <_dtoa_r+0x69e>
 8017b34:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017b38:	2000      	movs	r0, #0
 8017b3a:	4914      	ldr	r1, [pc, #80]	; (8017b8c <_dtoa_r+0x60c>)
 8017b3c:	f7e8 fbbc 	bl	80002b8 <__aeabi_dsub>
 8017b40:	4602      	mov	r2, r0
 8017b42:	460b      	mov	r3, r1
 8017b44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b48:	f7e8 ffe0 	bl	8000b0c <__aeabi_dcmplt>
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	f43f af30 	beq.w	80179b2 <_dtoa_r+0x432>
 8017b52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b56:	2b30      	cmp	r3, #48	; 0x30
 8017b58:	f105 32ff 	add.w	r2, r5, #4294967295
 8017b5c:	d002      	beq.n	8017b64 <_dtoa_r+0x5e4>
 8017b5e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017b62:	e04a      	b.n	8017bfa <_dtoa_r+0x67a>
 8017b64:	4615      	mov	r5, r2
 8017b66:	e7f4      	b.n	8017b52 <_dtoa_r+0x5d2>
 8017b68:	4b05      	ldr	r3, [pc, #20]	; (8017b80 <_dtoa_r+0x600>)
 8017b6a:	f7e8 fd5d 	bl	8000628 <__aeabi_dmul>
 8017b6e:	e9cd 0100 	strd	r0, r1, [sp]
 8017b72:	e7bc      	b.n	8017aee <_dtoa_r+0x56e>
 8017b74:	0801a480 	.word	0x0801a480
 8017b78:	0801a458 	.word	0x0801a458
 8017b7c:	3ff00000 	.word	0x3ff00000
 8017b80:	40240000 	.word	0x40240000
 8017b84:	401c0000 	.word	0x401c0000
 8017b88:	40140000 	.word	0x40140000
 8017b8c:	3fe00000 	.word	0x3fe00000
 8017b90:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017b94:	465d      	mov	r5, fp
 8017b96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017b9a:	4630      	mov	r0, r6
 8017b9c:	4639      	mov	r1, r7
 8017b9e:	f7e8 fe6d 	bl	800087c <__aeabi_ddiv>
 8017ba2:	f7e8 fff1 	bl	8000b88 <__aeabi_d2iz>
 8017ba6:	4680      	mov	r8, r0
 8017ba8:	f7e8 fcd4 	bl	8000554 <__aeabi_i2d>
 8017bac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bb0:	f7e8 fd3a 	bl	8000628 <__aeabi_dmul>
 8017bb4:	4602      	mov	r2, r0
 8017bb6:	460b      	mov	r3, r1
 8017bb8:	4630      	mov	r0, r6
 8017bba:	4639      	mov	r1, r7
 8017bbc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017bc0:	f7e8 fb7a 	bl	80002b8 <__aeabi_dsub>
 8017bc4:	f805 6b01 	strb.w	r6, [r5], #1
 8017bc8:	eba5 060b 	sub.w	r6, r5, fp
 8017bcc:	45b1      	cmp	r9, r6
 8017bce:	4602      	mov	r2, r0
 8017bd0:	460b      	mov	r3, r1
 8017bd2:	d139      	bne.n	8017c48 <_dtoa_r+0x6c8>
 8017bd4:	f7e8 fb72 	bl	80002bc <__adddf3>
 8017bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bdc:	4606      	mov	r6, r0
 8017bde:	460f      	mov	r7, r1
 8017be0:	f7e8 ffb2 	bl	8000b48 <__aeabi_dcmpgt>
 8017be4:	b9c8      	cbnz	r0, 8017c1a <_dtoa_r+0x69a>
 8017be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017bea:	4630      	mov	r0, r6
 8017bec:	4639      	mov	r1, r7
 8017bee:	f7e8 ff83 	bl	8000af8 <__aeabi_dcmpeq>
 8017bf2:	b110      	cbz	r0, 8017bfa <_dtoa_r+0x67a>
 8017bf4:	f018 0f01 	tst.w	r8, #1
 8017bf8:	d10f      	bne.n	8017c1a <_dtoa_r+0x69a>
 8017bfa:	9904      	ldr	r1, [sp, #16]
 8017bfc:	4620      	mov	r0, r4
 8017bfe:	f000 fe18 	bl	8018832 <_Bfree>
 8017c02:	2300      	movs	r3, #0
 8017c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c06:	702b      	strb	r3, [r5, #0]
 8017c08:	f10a 0301 	add.w	r3, sl, #1
 8017c0c:	6013      	str	r3, [r2, #0]
 8017c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	f000 8241 	beq.w	8018098 <_dtoa_r+0xb18>
 8017c16:	601d      	str	r5, [r3, #0]
 8017c18:	e23e      	b.n	8018098 <_dtoa_r+0xb18>
 8017c1a:	f8cd a020 	str.w	sl, [sp, #32]
 8017c1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017c22:	2a39      	cmp	r2, #57	; 0x39
 8017c24:	f105 33ff 	add.w	r3, r5, #4294967295
 8017c28:	d108      	bne.n	8017c3c <_dtoa_r+0x6bc>
 8017c2a:	459b      	cmp	fp, r3
 8017c2c:	d10a      	bne.n	8017c44 <_dtoa_r+0x6c4>
 8017c2e:	9b08      	ldr	r3, [sp, #32]
 8017c30:	3301      	adds	r3, #1
 8017c32:	9308      	str	r3, [sp, #32]
 8017c34:	2330      	movs	r3, #48	; 0x30
 8017c36:	f88b 3000 	strb.w	r3, [fp]
 8017c3a:	465b      	mov	r3, fp
 8017c3c:	781a      	ldrb	r2, [r3, #0]
 8017c3e:	3201      	adds	r2, #1
 8017c40:	701a      	strb	r2, [r3, #0]
 8017c42:	e78c      	b.n	8017b5e <_dtoa_r+0x5de>
 8017c44:	461d      	mov	r5, r3
 8017c46:	e7ea      	b.n	8017c1e <_dtoa_r+0x69e>
 8017c48:	2200      	movs	r2, #0
 8017c4a:	4b9b      	ldr	r3, [pc, #620]	; (8017eb8 <_dtoa_r+0x938>)
 8017c4c:	f7e8 fcec 	bl	8000628 <__aeabi_dmul>
 8017c50:	2200      	movs	r2, #0
 8017c52:	2300      	movs	r3, #0
 8017c54:	4606      	mov	r6, r0
 8017c56:	460f      	mov	r7, r1
 8017c58:	f7e8 ff4e 	bl	8000af8 <__aeabi_dcmpeq>
 8017c5c:	2800      	cmp	r0, #0
 8017c5e:	d09a      	beq.n	8017b96 <_dtoa_r+0x616>
 8017c60:	e7cb      	b.n	8017bfa <_dtoa_r+0x67a>
 8017c62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017c64:	2a00      	cmp	r2, #0
 8017c66:	f000 808b 	beq.w	8017d80 <_dtoa_r+0x800>
 8017c6a:	9a06      	ldr	r2, [sp, #24]
 8017c6c:	2a01      	cmp	r2, #1
 8017c6e:	dc6e      	bgt.n	8017d4e <_dtoa_r+0x7ce>
 8017c70:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c72:	2a00      	cmp	r2, #0
 8017c74:	d067      	beq.n	8017d46 <_dtoa_r+0x7c6>
 8017c76:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017c7a:	9f07      	ldr	r7, [sp, #28]
 8017c7c:	9d05      	ldr	r5, [sp, #20]
 8017c7e:	9a05      	ldr	r2, [sp, #20]
 8017c80:	2101      	movs	r1, #1
 8017c82:	441a      	add	r2, r3
 8017c84:	4620      	mov	r0, r4
 8017c86:	9205      	str	r2, [sp, #20]
 8017c88:	4498      	add	r8, r3
 8017c8a:	f000 feb0 	bl	80189ee <__i2b>
 8017c8e:	4606      	mov	r6, r0
 8017c90:	2d00      	cmp	r5, #0
 8017c92:	dd0c      	ble.n	8017cae <_dtoa_r+0x72e>
 8017c94:	f1b8 0f00 	cmp.w	r8, #0
 8017c98:	dd09      	ble.n	8017cae <_dtoa_r+0x72e>
 8017c9a:	4545      	cmp	r5, r8
 8017c9c:	9a05      	ldr	r2, [sp, #20]
 8017c9e:	462b      	mov	r3, r5
 8017ca0:	bfa8      	it	ge
 8017ca2:	4643      	movge	r3, r8
 8017ca4:	1ad2      	subs	r2, r2, r3
 8017ca6:	9205      	str	r2, [sp, #20]
 8017ca8:	1aed      	subs	r5, r5, r3
 8017caa:	eba8 0803 	sub.w	r8, r8, r3
 8017cae:	9b07      	ldr	r3, [sp, #28]
 8017cb0:	b1eb      	cbz	r3, 8017cee <_dtoa_r+0x76e>
 8017cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d067      	beq.n	8017d88 <_dtoa_r+0x808>
 8017cb8:	b18f      	cbz	r7, 8017cde <_dtoa_r+0x75e>
 8017cba:	4631      	mov	r1, r6
 8017cbc:	463a      	mov	r2, r7
 8017cbe:	4620      	mov	r0, r4
 8017cc0:	f000 ff34 	bl	8018b2c <__pow5mult>
 8017cc4:	9a04      	ldr	r2, [sp, #16]
 8017cc6:	4601      	mov	r1, r0
 8017cc8:	4606      	mov	r6, r0
 8017cca:	4620      	mov	r0, r4
 8017ccc:	f000 fe98 	bl	8018a00 <__multiply>
 8017cd0:	9904      	ldr	r1, [sp, #16]
 8017cd2:	9008      	str	r0, [sp, #32]
 8017cd4:	4620      	mov	r0, r4
 8017cd6:	f000 fdac 	bl	8018832 <_Bfree>
 8017cda:	9b08      	ldr	r3, [sp, #32]
 8017cdc:	9304      	str	r3, [sp, #16]
 8017cde:	9b07      	ldr	r3, [sp, #28]
 8017ce0:	1bda      	subs	r2, r3, r7
 8017ce2:	d004      	beq.n	8017cee <_dtoa_r+0x76e>
 8017ce4:	9904      	ldr	r1, [sp, #16]
 8017ce6:	4620      	mov	r0, r4
 8017ce8:	f000 ff20 	bl	8018b2c <__pow5mult>
 8017cec:	9004      	str	r0, [sp, #16]
 8017cee:	2101      	movs	r1, #1
 8017cf0:	4620      	mov	r0, r4
 8017cf2:	f000 fe7c 	bl	80189ee <__i2b>
 8017cf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cf8:	4607      	mov	r7, r0
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f000 81d0 	beq.w	80180a0 <_dtoa_r+0xb20>
 8017d00:	461a      	mov	r2, r3
 8017d02:	4601      	mov	r1, r0
 8017d04:	4620      	mov	r0, r4
 8017d06:	f000 ff11 	bl	8018b2c <__pow5mult>
 8017d0a:	9b06      	ldr	r3, [sp, #24]
 8017d0c:	2b01      	cmp	r3, #1
 8017d0e:	4607      	mov	r7, r0
 8017d10:	dc40      	bgt.n	8017d94 <_dtoa_r+0x814>
 8017d12:	9b00      	ldr	r3, [sp, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d139      	bne.n	8017d8c <_dtoa_r+0x80c>
 8017d18:	9b01      	ldr	r3, [sp, #4]
 8017d1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d136      	bne.n	8017d90 <_dtoa_r+0x810>
 8017d22:	9b01      	ldr	r3, [sp, #4]
 8017d24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017d28:	0d1b      	lsrs	r3, r3, #20
 8017d2a:	051b      	lsls	r3, r3, #20
 8017d2c:	b12b      	cbz	r3, 8017d3a <_dtoa_r+0x7ba>
 8017d2e:	9b05      	ldr	r3, [sp, #20]
 8017d30:	3301      	adds	r3, #1
 8017d32:	9305      	str	r3, [sp, #20]
 8017d34:	f108 0801 	add.w	r8, r8, #1
 8017d38:	2301      	movs	r3, #1
 8017d3a:	9307      	str	r3, [sp, #28]
 8017d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d12a      	bne.n	8017d98 <_dtoa_r+0x818>
 8017d42:	2001      	movs	r0, #1
 8017d44:	e030      	b.n	8017da8 <_dtoa_r+0x828>
 8017d46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d48:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017d4c:	e795      	b.n	8017c7a <_dtoa_r+0x6fa>
 8017d4e:	9b07      	ldr	r3, [sp, #28]
 8017d50:	f109 37ff 	add.w	r7, r9, #4294967295
 8017d54:	42bb      	cmp	r3, r7
 8017d56:	bfbf      	itttt	lt
 8017d58:	9b07      	ldrlt	r3, [sp, #28]
 8017d5a:	9707      	strlt	r7, [sp, #28]
 8017d5c:	1afa      	sublt	r2, r7, r3
 8017d5e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017d60:	bfbb      	ittet	lt
 8017d62:	189b      	addlt	r3, r3, r2
 8017d64:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017d66:	1bdf      	subge	r7, r3, r7
 8017d68:	2700      	movlt	r7, #0
 8017d6a:	f1b9 0f00 	cmp.w	r9, #0
 8017d6e:	bfb5      	itete	lt
 8017d70:	9b05      	ldrlt	r3, [sp, #20]
 8017d72:	9d05      	ldrge	r5, [sp, #20]
 8017d74:	eba3 0509 	sublt.w	r5, r3, r9
 8017d78:	464b      	movge	r3, r9
 8017d7a:	bfb8      	it	lt
 8017d7c:	2300      	movlt	r3, #0
 8017d7e:	e77e      	b.n	8017c7e <_dtoa_r+0x6fe>
 8017d80:	9f07      	ldr	r7, [sp, #28]
 8017d82:	9d05      	ldr	r5, [sp, #20]
 8017d84:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017d86:	e783      	b.n	8017c90 <_dtoa_r+0x710>
 8017d88:	9a07      	ldr	r2, [sp, #28]
 8017d8a:	e7ab      	b.n	8017ce4 <_dtoa_r+0x764>
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	e7d4      	b.n	8017d3a <_dtoa_r+0x7ba>
 8017d90:	9b00      	ldr	r3, [sp, #0]
 8017d92:	e7d2      	b.n	8017d3a <_dtoa_r+0x7ba>
 8017d94:	2300      	movs	r3, #0
 8017d96:	9307      	str	r3, [sp, #28]
 8017d98:	693b      	ldr	r3, [r7, #16]
 8017d9a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017d9e:	6918      	ldr	r0, [r3, #16]
 8017da0:	f000 fdd7 	bl	8018952 <__hi0bits>
 8017da4:	f1c0 0020 	rsb	r0, r0, #32
 8017da8:	4440      	add	r0, r8
 8017daa:	f010 001f 	ands.w	r0, r0, #31
 8017dae:	d047      	beq.n	8017e40 <_dtoa_r+0x8c0>
 8017db0:	f1c0 0320 	rsb	r3, r0, #32
 8017db4:	2b04      	cmp	r3, #4
 8017db6:	dd3b      	ble.n	8017e30 <_dtoa_r+0x8b0>
 8017db8:	9b05      	ldr	r3, [sp, #20]
 8017dba:	f1c0 001c 	rsb	r0, r0, #28
 8017dbe:	4403      	add	r3, r0
 8017dc0:	9305      	str	r3, [sp, #20]
 8017dc2:	4405      	add	r5, r0
 8017dc4:	4480      	add	r8, r0
 8017dc6:	9b05      	ldr	r3, [sp, #20]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	dd05      	ble.n	8017dd8 <_dtoa_r+0x858>
 8017dcc:	461a      	mov	r2, r3
 8017dce:	9904      	ldr	r1, [sp, #16]
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f000 fef9 	bl	8018bc8 <__lshift>
 8017dd6:	9004      	str	r0, [sp, #16]
 8017dd8:	f1b8 0f00 	cmp.w	r8, #0
 8017ddc:	dd05      	ble.n	8017dea <_dtoa_r+0x86a>
 8017dde:	4639      	mov	r1, r7
 8017de0:	4642      	mov	r2, r8
 8017de2:	4620      	mov	r0, r4
 8017de4:	f000 fef0 	bl	8018bc8 <__lshift>
 8017de8:	4607      	mov	r7, r0
 8017dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017dec:	b353      	cbz	r3, 8017e44 <_dtoa_r+0x8c4>
 8017dee:	4639      	mov	r1, r7
 8017df0:	9804      	ldr	r0, [sp, #16]
 8017df2:	f000 ff3d 	bl	8018c70 <__mcmp>
 8017df6:	2800      	cmp	r0, #0
 8017df8:	da24      	bge.n	8017e44 <_dtoa_r+0x8c4>
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	220a      	movs	r2, #10
 8017dfe:	9904      	ldr	r1, [sp, #16]
 8017e00:	4620      	mov	r0, r4
 8017e02:	f000 fd2d 	bl	8018860 <__multadd>
 8017e06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e08:	9004      	str	r0, [sp, #16]
 8017e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	f000 814d 	beq.w	80180ae <_dtoa_r+0xb2e>
 8017e14:	2300      	movs	r3, #0
 8017e16:	4631      	mov	r1, r6
 8017e18:	220a      	movs	r2, #10
 8017e1a:	4620      	mov	r0, r4
 8017e1c:	f000 fd20 	bl	8018860 <__multadd>
 8017e20:	9b02      	ldr	r3, [sp, #8]
 8017e22:	2b00      	cmp	r3, #0
 8017e24:	4606      	mov	r6, r0
 8017e26:	dc4f      	bgt.n	8017ec8 <_dtoa_r+0x948>
 8017e28:	9b06      	ldr	r3, [sp, #24]
 8017e2a:	2b02      	cmp	r3, #2
 8017e2c:	dd4c      	ble.n	8017ec8 <_dtoa_r+0x948>
 8017e2e:	e011      	b.n	8017e54 <_dtoa_r+0x8d4>
 8017e30:	d0c9      	beq.n	8017dc6 <_dtoa_r+0x846>
 8017e32:	9a05      	ldr	r2, [sp, #20]
 8017e34:	331c      	adds	r3, #28
 8017e36:	441a      	add	r2, r3
 8017e38:	9205      	str	r2, [sp, #20]
 8017e3a:	441d      	add	r5, r3
 8017e3c:	4498      	add	r8, r3
 8017e3e:	e7c2      	b.n	8017dc6 <_dtoa_r+0x846>
 8017e40:	4603      	mov	r3, r0
 8017e42:	e7f6      	b.n	8017e32 <_dtoa_r+0x8b2>
 8017e44:	f1b9 0f00 	cmp.w	r9, #0
 8017e48:	dc38      	bgt.n	8017ebc <_dtoa_r+0x93c>
 8017e4a:	9b06      	ldr	r3, [sp, #24]
 8017e4c:	2b02      	cmp	r3, #2
 8017e4e:	dd35      	ble.n	8017ebc <_dtoa_r+0x93c>
 8017e50:	f8cd 9008 	str.w	r9, [sp, #8]
 8017e54:	9b02      	ldr	r3, [sp, #8]
 8017e56:	b963      	cbnz	r3, 8017e72 <_dtoa_r+0x8f2>
 8017e58:	4639      	mov	r1, r7
 8017e5a:	2205      	movs	r2, #5
 8017e5c:	4620      	mov	r0, r4
 8017e5e:	f000 fcff 	bl	8018860 <__multadd>
 8017e62:	4601      	mov	r1, r0
 8017e64:	4607      	mov	r7, r0
 8017e66:	9804      	ldr	r0, [sp, #16]
 8017e68:	f000 ff02 	bl	8018c70 <__mcmp>
 8017e6c:	2800      	cmp	r0, #0
 8017e6e:	f73f adcc 	bgt.w	8017a0a <_dtoa_r+0x48a>
 8017e72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e74:	465d      	mov	r5, fp
 8017e76:	ea6f 0a03 	mvn.w	sl, r3
 8017e7a:	f04f 0900 	mov.w	r9, #0
 8017e7e:	4639      	mov	r1, r7
 8017e80:	4620      	mov	r0, r4
 8017e82:	f000 fcd6 	bl	8018832 <_Bfree>
 8017e86:	2e00      	cmp	r6, #0
 8017e88:	f43f aeb7 	beq.w	8017bfa <_dtoa_r+0x67a>
 8017e8c:	f1b9 0f00 	cmp.w	r9, #0
 8017e90:	d005      	beq.n	8017e9e <_dtoa_r+0x91e>
 8017e92:	45b1      	cmp	r9, r6
 8017e94:	d003      	beq.n	8017e9e <_dtoa_r+0x91e>
 8017e96:	4649      	mov	r1, r9
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f000 fcca 	bl	8018832 <_Bfree>
 8017e9e:	4631      	mov	r1, r6
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f000 fcc6 	bl	8018832 <_Bfree>
 8017ea6:	e6a8      	b.n	8017bfa <_dtoa_r+0x67a>
 8017ea8:	2700      	movs	r7, #0
 8017eaa:	463e      	mov	r6, r7
 8017eac:	e7e1      	b.n	8017e72 <_dtoa_r+0x8f2>
 8017eae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017eb2:	463e      	mov	r6, r7
 8017eb4:	e5a9      	b.n	8017a0a <_dtoa_r+0x48a>
 8017eb6:	bf00      	nop
 8017eb8:	40240000 	.word	0x40240000
 8017ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ebe:	f8cd 9008 	str.w	r9, [sp, #8]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	f000 80fa 	beq.w	80180bc <_dtoa_r+0xb3c>
 8017ec8:	2d00      	cmp	r5, #0
 8017eca:	dd05      	ble.n	8017ed8 <_dtoa_r+0x958>
 8017ecc:	4631      	mov	r1, r6
 8017ece:	462a      	mov	r2, r5
 8017ed0:	4620      	mov	r0, r4
 8017ed2:	f000 fe79 	bl	8018bc8 <__lshift>
 8017ed6:	4606      	mov	r6, r0
 8017ed8:	9b07      	ldr	r3, [sp, #28]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d04c      	beq.n	8017f78 <_dtoa_r+0x9f8>
 8017ede:	6871      	ldr	r1, [r6, #4]
 8017ee0:	4620      	mov	r0, r4
 8017ee2:	f000 fc72 	bl	80187ca <_Balloc>
 8017ee6:	6932      	ldr	r2, [r6, #16]
 8017ee8:	3202      	adds	r2, #2
 8017eea:	4605      	mov	r5, r0
 8017eec:	0092      	lsls	r2, r2, #2
 8017eee:	f106 010c 	add.w	r1, r6, #12
 8017ef2:	300c      	adds	r0, #12
 8017ef4:	f000 fc5e 	bl	80187b4 <memcpy>
 8017ef8:	2201      	movs	r2, #1
 8017efa:	4629      	mov	r1, r5
 8017efc:	4620      	mov	r0, r4
 8017efe:	f000 fe63 	bl	8018bc8 <__lshift>
 8017f02:	9b00      	ldr	r3, [sp, #0]
 8017f04:	f8cd b014 	str.w	fp, [sp, #20]
 8017f08:	f003 0301 	and.w	r3, r3, #1
 8017f0c:	46b1      	mov	r9, r6
 8017f0e:	9307      	str	r3, [sp, #28]
 8017f10:	4606      	mov	r6, r0
 8017f12:	4639      	mov	r1, r7
 8017f14:	9804      	ldr	r0, [sp, #16]
 8017f16:	f7ff faa5 	bl	8017464 <quorem>
 8017f1a:	4649      	mov	r1, r9
 8017f1c:	4605      	mov	r5, r0
 8017f1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017f22:	9804      	ldr	r0, [sp, #16]
 8017f24:	f000 fea4 	bl	8018c70 <__mcmp>
 8017f28:	4632      	mov	r2, r6
 8017f2a:	9000      	str	r0, [sp, #0]
 8017f2c:	4639      	mov	r1, r7
 8017f2e:	4620      	mov	r0, r4
 8017f30:	f000 feb8 	bl	8018ca4 <__mdiff>
 8017f34:	68c3      	ldr	r3, [r0, #12]
 8017f36:	4602      	mov	r2, r0
 8017f38:	bb03      	cbnz	r3, 8017f7c <_dtoa_r+0x9fc>
 8017f3a:	4601      	mov	r1, r0
 8017f3c:	9008      	str	r0, [sp, #32]
 8017f3e:	9804      	ldr	r0, [sp, #16]
 8017f40:	f000 fe96 	bl	8018c70 <__mcmp>
 8017f44:	9a08      	ldr	r2, [sp, #32]
 8017f46:	4603      	mov	r3, r0
 8017f48:	4611      	mov	r1, r2
 8017f4a:	4620      	mov	r0, r4
 8017f4c:	9308      	str	r3, [sp, #32]
 8017f4e:	f000 fc70 	bl	8018832 <_Bfree>
 8017f52:	9b08      	ldr	r3, [sp, #32]
 8017f54:	b9a3      	cbnz	r3, 8017f80 <_dtoa_r+0xa00>
 8017f56:	9a06      	ldr	r2, [sp, #24]
 8017f58:	b992      	cbnz	r2, 8017f80 <_dtoa_r+0xa00>
 8017f5a:	9a07      	ldr	r2, [sp, #28]
 8017f5c:	b982      	cbnz	r2, 8017f80 <_dtoa_r+0xa00>
 8017f5e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017f62:	d029      	beq.n	8017fb8 <_dtoa_r+0xa38>
 8017f64:	9b00      	ldr	r3, [sp, #0]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	dd01      	ble.n	8017f6e <_dtoa_r+0x9ee>
 8017f6a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017f6e:	9b05      	ldr	r3, [sp, #20]
 8017f70:	1c5d      	adds	r5, r3, #1
 8017f72:	f883 8000 	strb.w	r8, [r3]
 8017f76:	e782      	b.n	8017e7e <_dtoa_r+0x8fe>
 8017f78:	4630      	mov	r0, r6
 8017f7a:	e7c2      	b.n	8017f02 <_dtoa_r+0x982>
 8017f7c:	2301      	movs	r3, #1
 8017f7e:	e7e3      	b.n	8017f48 <_dtoa_r+0x9c8>
 8017f80:	9a00      	ldr	r2, [sp, #0]
 8017f82:	2a00      	cmp	r2, #0
 8017f84:	db04      	blt.n	8017f90 <_dtoa_r+0xa10>
 8017f86:	d125      	bne.n	8017fd4 <_dtoa_r+0xa54>
 8017f88:	9a06      	ldr	r2, [sp, #24]
 8017f8a:	bb1a      	cbnz	r2, 8017fd4 <_dtoa_r+0xa54>
 8017f8c:	9a07      	ldr	r2, [sp, #28]
 8017f8e:	bb0a      	cbnz	r2, 8017fd4 <_dtoa_r+0xa54>
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	ddec      	ble.n	8017f6e <_dtoa_r+0x9ee>
 8017f94:	2201      	movs	r2, #1
 8017f96:	9904      	ldr	r1, [sp, #16]
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f000 fe15 	bl	8018bc8 <__lshift>
 8017f9e:	4639      	mov	r1, r7
 8017fa0:	9004      	str	r0, [sp, #16]
 8017fa2:	f000 fe65 	bl	8018c70 <__mcmp>
 8017fa6:	2800      	cmp	r0, #0
 8017fa8:	dc03      	bgt.n	8017fb2 <_dtoa_r+0xa32>
 8017faa:	d1e0      	bne.n	8017f6e <_dtoa_r+0x9ee>
 8017fac:	f018 0f01 	tst.w	r8, #1
 8017fb0:	d0dd      	beq.n	8017f6e <_dtoa_r+0x9ee>
 8017fb2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017fb6:	d1d8      	bne.n	8017f6a <_dtoa_r+0x9ea>
 8017fb8:	9b05      	ldr	r3, [sp, #20]
 8017fba:	9a05      	ldr	r2, [sp, #20]
 8017fbc:	1c5d      	adds	r5, r3, #1
 8017fbe:	2339      	movs	r3, #57	; 0x39
 8017fc0:	7013      	strb	r3, [r2, #0]
 8017fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017fc6:	2b39      	cmp	r3, #57	; 0x39
 8017fc8:	f105 32ff 	add.w	r2, r5, #4294967295
 8017fcc:	d04f      	beq.n	801806e <_dtoa_r+0xaee>
 8017fce:	3301      	adds	r3, #1
 8017fd0:	7013      	strb	r3, [r2, #0]
 8017fd2:	e754      	b.n	8017e7e <_dtoa_r+0x8fe>
 8017fd4:	9a05      	ldr	r2, [sp, #20]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	f102 0501 	add.w	r5, r2, #1
 8017fdc:	dd06      	ble.n	8017fec <_dtoa_r+0xa6c>
 8017fde:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017fe2:	d0e9      	beq.n	8017fb8 <_dtoa_r+0xa38>
 8017fe4:	f108 0801 	add.w	r8, r8, #1
 8017fe8:	9b05      	ldr	r3, [sp, #20]
 8017fea:	e7c2      	b.n	8017f72 <_dtoa_r+0x9f2>
 8017fec:	9a02      	ldr	r2, [sp, #8]
 8017fee:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017ff2:	eba5 030b 	sub.w	r3, r5, fp
 8017ff6:	4293      	cmp	r3, r2
 8017ff8:	d021      	beq.n	801803e <_dtoa_r+0xabe>
 8017ffa:	2300      	movs	r3, #0
 8017ffc:	220a      	movs	r2, #10
 8017ffe:	9904      	ldr	r1, [sp, #16]
 8018000:	4620      	mov	r0, r4
 8018002:	f000 fc2d 	bl	8018860 <__multadd>
 8018006:	45b1      	cmp	r9, r6
 8018008:	9004      	str	r0, [sp, #16]
 801800a:	f04f 0300 	mov.w	r3, #0
 801800e:	f04f 020a 	mov.w	r2, #10
 8018012:	4649      	mov	r1, r9
 8018014:	4620      	mov	r0, r4
 8018016:	d105      	bne.n	8018024 <_dtoa_r+0xaa4>
 8018018:	f000 fc22 	bl	8018860 <__multadd>
 801801c:	4681      	mov	r9, r0
 801801e:	4606      	mov	r6, r0
 8018020:	9505      	str	r5, [sp, #20]
 8018022:	e776      	b.n	8017f12 <_dtoa_r+0x992>
 8018024:	f000 fc1c 	bl	8018860 <__multadd>
 8018028:	4631      	mov	r1, r6
 801802a:	4681      	mov	r9, r0
 801802c:	2300      	movs	r3, #0
 801802e:	220a      	movs	r2, #10
 8018030:	4620      	mov	r0, r4
 8018032:	f000 fc15 	bl	8018860 <__multadd>
 8018036:	4606      	mov	r6, r0
 8018038:	e7f2      	b.n	8018020 <_dtoa_r+0xaa0>
 801803a:	f04f 0900 	mov.w	r9, #0
 801803e:	2201      	movs	r2, #1
 8018040:	9904      	ldr	r1, [sp, #16]
 8018042:	4620      	mov	r0, r4
 8018044:	f000 fdc0 	bl	8018bc8 <__lshift>
 8018048:	4639      	mov	r1, r7
 801804a:	9004      	str	r0, [sp, #16]
 801804c:	f000 fe10 	bl	8018c70 <__mcmp>
 8018050:	2800      	cmp	r0, #0
 8018052:	dcb6      	bgt.n	8017fc2 <_dtoa_r+0xa42>
 8018054:	d102      	bne.n	801805c <_dtoa_r+0xadc>
 8018056:	f018 0f01 	tst.w	r8, #1
 801805a:	d1b2      	bne.n	8017fc2 <_dtoa_r+0xa42>
 801805c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018060:	2b30      	cmp	r3, #48	; 0x30
 8018062:	f105 32ff 	add.w	r2, r5, #4294967295
 8018066:	f47f af0a 	bne.w	8017e7e <_dtoa_r+0x8fe>
 801806a:	4615      	mov	r5, r2
 801806c:	e7f6      	b.n	801805c <_dtoa_r+0xadc>
 801806e:	4593      	cmp	fp, r2
 8018070:	d105      	bne.n	801807e <_dtoa_r+0xafe>
 8018072:	2331      	movs	r3, #49	; 0x31
 8018074:	f10a 0a01 	add.w	sl, sl, #1
 8018078:	f88b 3000 	strb.w	r3, [fp]
 801807c:	e6ff      	b.n	8017e7e <_dtoa_r+0x8fe>
 801807e:	4615      	mov	r5, r2
 8018080:	e79f      	b.n	8017fc2 <_dtoa_r+0xa42>
 8018082:	f8df b064 	ldr.w	fp, [pc, #100]	; 80180e8 <_dtoa_r+0xb68>
 8018086:	e007      	b.n	8018098 <_dtoa_r+0xb18>
 8018088:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801808a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80180ec <_dtoa_r+0xb6c>
 801808e:	b11b      	cbz	r3, 8018098 <_dtoa_r+0xb18>
 8018090:	f10b 0308 	add.w	r3, fp, #8
 8018094:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018096:	6013      	str	r3, [r2, #0]
 8018098:	4658      	mov	r0, fp
 801809a:	b017      	add	sp, #92	; 0x5c
 801809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180a0:	9b06      	ldr	r3, [sp, #24]
 80180a2:	2b01      	cmp	r3, #1
 80180a4:	f77f ae35 	ble.w	8017d12 <_dtoa_r+0x792>
 80180a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180aa:	9307      	str	r3, [sp, #28]
 80180ac:	e649      	b.n	8017d42 <_dtoa_r+0x7c2>
 80180ae:	9b02      	ldr	r3, [sp, #8]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	dc03      	bgt.n	80180bc <_dtoa_r+0xb3c>
 80180b4:	9b06      	ldr	r3, [sp, #24]
 80180b6:	2b02      	cmp	r3, #2
 80180b8:	f73f aecc 	bgt.w	8017e54 <_dtoa_r+0x8d4>
 80180bc:	465d      	mov	r5, fp
 80180be:	4639      	mov	r1, r7
 80180c0:	9804      	ldr	r0, [sp, #16]
 80180c2:	f7ff f9cf 	bl	8017464 <quorem>
 80180c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80180ca:	f805 8b01 	strb.w	r8, [r5], #1
 80180ce:	9a02      	ldr	r2, [sp, #8]
 80180d0:	eba5 030b 	sub.w	r3, r5, fp
 80180d4:	429a      	cmp	r2, r3
 80180d6:	ddb0      	ble.n	801803a <_dtoa_r+0xaba>
 80180d8:	2300      	movs	r3, #0
 80180da:	220a      	movs	r2, #10
 80180dc:	9904      	ldr	r1, [sp, #16]
 80180de:	4620      	mov	r0, r4
 80180e0:	f000 fbbe 	bl	8018860 <__multadd>
 80180e4:	9004      	str	r0, [sp, #16]
 80180e6:	e7ea      	b.n	80180be <_dtoa_r+0xb3e>
 80180e8:	0801a57b 	.word	0x0801a57b
 80180ec:	0801a440 	.word	0x0801a440

080180f0 <rshift>:
 80180f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80180f2:	6906      	ldr	r6, [r0, #16]
 80180f4:	114b      	asrs	r3, r1, #5
 80180f6:	429e      	cmp	r6, r3
 80180f8:	f100 0414 	add.w	r4, r0, #20
 80180fc:	dd30      	ble.n	8018160 <rshift+0x70>
 80180fe:	f011 011f 	ands.w	r1, r1, #31
 8018102:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8018106:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801810a:	d108      	bne.n	801811e <rshift+0x2e>
 801810c:	4621      	mov	r1, r4
 801810e:	42b2      	cmp	r2, r6
 8018110:	460b      	mov	r3, r1
 8018112:	d211      	bcs.n	8018138 <rshift+0x48>
 8018114:	f852 3b04 	ldr.w	r3, [r2], #4
 8018118:	f841 3b04 	str.w	r3, [r1], #4
 801811c:	e7f7      	b.n	801810e <rshift+0x1e>
 801811e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8018122:	f1c1 0c20 	rsb	ip, r1, #32
 8018126:	40cd      	lsrs	r5, r1
 8018128:	3204      	adds	r2, #4
 801812a:	4623      	mov	r3, r4
 801812c:	42b2      	cmp	r2, r6
 801812e:	4617      	mov	r7, r2
 8018130:	d30c      	bcc.n	801814c <rshift+0x5c>
 8018132:	601d      	str	r5, [r3, #0]
 8018134:	b105      	cbz	r5, 8018138 <rshift+0x48>
 8018136:	3304      	adds	r3, #4
 8018138:	1b1a      	subs	r2, r3, r4
 801813a:	42a3      	cmp	r3, r4
 801813c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018140:	bf08      	it	eq
 8018142:	2300      	moveq	r3, #0
 8018144:	6102      	str	r2, [r0, #16]
 8018146:	bf08      	it	eq
 8018148:	6143      	streq	r3, [r0, #20]
 801814a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801814c:	683f      	ldr	r7, [r7, #0]
 801814e:	fa07 f70c 	lsl.w	r7, r7, ip
 8018152:	433d      	orrs	r5, r7
 8018154:	f843 5b04 	str.w	r5, [r3], #4
 8018158:	f852 5b04 	ldr.w	r5, [r2], #4
 801815c:	40cd      	lsrs	r5, r1
 801815e:	e7e5      	b.n	801812c <rshift+0x3c>
 8018160:	4623      	mov	r3, r4
 8018162:	e7e9      	b.n	8018138 <rshift+0x48>

08018164 <__hexdig_fun>:
 8018164:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8018168:	2b09      	cmp	r3, #9
 801816a:	d802      	bhi.n	8018172 <__hexdig_fun+0xe>
 801816c:	3820      	subs	r0, #32
 801816e:	b2c0      	uxtb	r0, r0
 8018170:	4770      	bx	lr
 8018172:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018176:	2b05      	cmp	r3, #5
 8018178:	d801      	bhi.n	801817e <__hexdig_fun+0x1a>
 801817a:	3847      	subs	r0, #71	; 0x47
 801817c:	e7f7      	b.n	801816e <__hexdig_fun+0xa>
 801817e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018182:	2b05      	cmp	r3, #5
 8018184:	d801      	bhi.n	801818a <__hexdig_fun+0x26>
 8018186:	3827      	subs	r0, #39	; 0x27
 8018188:	e7f1      	b.n	801816e <__hexdig_fun+0xa>
 801818a:	2000      	movs	r0, #0
 801818c:	4770      	bx	lr

0801818e <__gethex>:
 801818e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018192:	b08b      	sub	sp, #44	; 0x2c
 8018194:	468a      	mov	sl, r1
 8018196:	9002      	str	r0, [sp, #8]
 8018198:	9816      	ldr	r0, [sp, #88]	; 0x58
 801819a:	9306      	str	r3, [sp, #24]
 801819c:	4690      	mov	r8, r2
 801819e:	f000 fadf 	bl	8018760 <__localeconv_l>
 80181a2:	6803      	ldr	r3, [r0, #0]
 80181a4:	9303      	str	r3, [sp, #12]
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7e8 f82a 	bl	8000200 <strlen>
 80181ac:	9b03      	ldr	r3, [sp, #12]
 80181ae:	9001      	str	r0, [sp, #4]
 80181b0:	4403      	add	r3, r0
 80181b2:	f04f 0b00 	mov.w	fp, #0
 80181b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80181ba:	9307      	str	r3, [sp, #28]
 80181bc:	f8da 3000 	ldr.w	r3, [sl]
 80181c0:	3302      	adds	r3, #2
 80181c2:	461f      	mov	r7, r3
 80181c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80181c8:	2830      	cmp	r0, #48	; 0x30
 80181ca:	d06c      	beq.n	80182a6 <__gethex+0x118>
 80181cc:	f7ff ffca 	bl	8018164 <__hexdig_fun>
 80181d0:	4604      	mov	r4, r0
 80181d2:	2800      	cmp	r0, #0
 80181d4:	d16a      	bne.n	80182ac <__gethex+0x11e>
 80181d6:	9a01      	ldr	r2, [sp, #4]
 80181d8:	9903      	ldr	r1, [sp, #12]
 80181da:	4638      	mov	r0, r7
 80181dc:	f001 fc40 	bl	8019a60 <strncmp>
 80181e0:	2800      	cmp	r0, #0
 80181e2:	d166      	bne.n	80182b2 <__gethex+0x124>
 80181e4:	9b01      	ldr	r3, [sp, #4]
 80181e6:	5cf8      	ldrb	r0, [r7, r3]
 80181e8:	18fe      	adds	r6, r7, r3
 80181ea:	f7ff ffbb 	bl	8018164 <__hexdig_fun>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d062      	beq.n	80182b8 <__gethex+0x12a>
 80181f2:	4633      	mov	r3, r6
 80181f4:	7818      	ldrb	r0, [r3, #0]
 80181f6:	2830      	cmp	r0, #48	; 0x30
 80181f8:	461f      	mov	r7, r3
 80181fa:	f103 0301 	add.w	r3, r3, #1
 80181fe:	d0f9      	beq.n	80181f4 <__gethex+0x66>
 8018200:	f7ff ffb0 	bl	8018164 <__hexdig_fun>
 8018204:	fab0 f580 	clz	r5, r0
 8018208:	096d      	lsrs	r5, r5, #5
 801820a:	4634      	mov	r4, r6
 801820c:	f04f 0b01 	mov.w	fp, #1
 8018210:	463a      	mov	r2, r7
 8018212:	4616      	mov	r6, r2
 8018214:	3201      	adds	r2, #1
 8018216:	7830      	ldrb	r0, [r6, #0]
 8018218:	f7ff ffa4 	bl	8018164 <__hexdig_fun>
 801821c:	2800      	cmp	r0, #0
 801821e:	d1f8      	bne.n	8018212 <__gethex+0x84>
 8018220:	9a01      	ldr	r2, [sp, #4]
 8018222:	9903      	ldr	r1, [sp, #12]
 8018224:	4630      	mov	r0, r6
 8018226:	f001 fc1b 	bl	8019a60 <strncmp>
 801822a:	b950      	cbnz	r0, 8018242 <__gethex+0xb4>
 801822c:	b954      	cbnz	r4, 8018244 <__gethex+0xb6>
 801822e:	9b01      	ldr	r3, [sp, #4]
 8018230:	18f4      	adds	r4, r6, r3
 8018232:	4622      	mov	r2, r4
 8018234:	4616      	mov	r6, r2
 8018236:	3201      	adds	r2, #1
 8018238:	7830      	ldrb	r0, [r6, #0]
 801823a:	f7ff ff93 	bl	8018164 <__hexdig_fun>
 801823e:	2800      	cmp	r0, #0
 8018240:	d1f8      	bne.n	8018234 <__gethex+0xa6>
 8018242:	b10c      	cbz	r4, 8018248 <__gethex+0xba>
 8018244:	1ba4      	subs	r4, r4, r6
 8018246:	00a4      	lsls	r4, r4, #2
 8018248:	7833      	ldrb	r3, [r6, #0]
 801824a:	2b50      	cmp	r3, #80	; 0x50
 801824c:	d001      	beq.n	8018252 <__gethex+0xc4>
 801824e:	2b70      	cmp	r3, #112	; 0x70
 8018250:	d140      	bne.n	80182d4 <__gethex+0x146>
 8018252:	7873      	ldrb	r3, [r6, #1]
 8018254:	2b2b      	cmp	r3, #43	; 0x2b
 8018256:	d031      	beq.n	80182bc <__gethex+0x12e>
 8018258:	2b2d      	cmp	r3, #45	; 0x2d
 801825a:	d033      	beq.n	80182c4 <__gethex+0x136>
 801825c:	1c71      	adds	r1, r6, #1
 801825e:	f04f 0900 	mov.w	r9, #0
 8018262:	7808      	ldrb	r0, [r1, #0]
 8018264:	f7ff ff7e 	bl	8018164 <__hexdig_fun>
 8018268:	1e43      	subs	r3, r0, #1
 801826a:	b2db      	uxtb	r3, r3
 801826c:	2b18      	cmp	r3, #24
 801826e:	d831      	bhi.n	80182d4 <__gethex+0x146>
 8018270:	f1a0 0210 	sub.w	r2, r0, #16
 8018274:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018278:	f7ff ff74 	bl	8018164 <__hexdig_fun>
 801827c:	1e43      	subs	r3, r0, #1
 801827e:	b2db      	uxtb	r3, r3
 8018280:	2b18      	cmp	r3, #24
 8018282:	d922      	bls.n	80182ca <__gethex+0x13c>
 8018284:	f1b9 0f00 	cmp.w	r9, #0
 8018288:	d000      	beq.n	801828c <__gethex+0xfe>
 801828a:	4252      	negs	r2, r2
 801828c:	4414      	add	r4, r2
 801828e:	f8ca 1000 	str.w	r1, [sl]
 8018292:	b30d      	cbz	r5, 80182d8 <__gethex+0x14a>
 8018294:	f1bb 0f00 	cmp.w	fp, #0
 8018298:	bf0c      	ite	eq
 801829a:	2706      	moveq	r7, #6
 801829c:	2700      	movne	r7, #0
 801829e:	4638      	mov	r0, r7
 80182a0:	b00b      	add	sp, #44	; 0x2c
 80182a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182a6:	f10b 0b01 	add.w	fp, fp, #1
 80182aa:	e78a      	b.n	80181c2 <__gethex+0x34>
 80182ac:	2500      	movs	r5, #0
 80182ae:	462c      	mov	r4, r5
 80182b0:	e7ae      	b.n	8018210 <__gethex+0x82>
 80182b2:	463e      	mov	r6, r7
 80182b4:	2501      	movs	r5, #1
 80182b6:	e7c7      	b.n	8018248 <__gethex+0xba>
 80182b8:	4604      	mov	r4, r0
 80182ba:	e7fb      	b.n	80182b4 <__gethex+0x126>
 80182bc:	f04f 0900 	mov.w	r9, #0
 80182c0:	1cb1      	adds	r1, r6, #2
 80182c2:	e7ce      	b.n	8018262 <__gethex+0xd4>
 80182c4:	f04f 0901 	mov.w	r9, #1
 80182c8:	e7fa      	b.n	80182c0 <__gethex+0x132>
 80182ca:	230a      	movs	r3, #10
 80182cc:	fb03 0202 	mla	r2, r3, r2, r0
 80182d0:	3a10      	subs	r2, #16
 80182d2:	e7cf      	b.n	8018274 <__gethex+0xe6>
 80182d4:	4631      	mov	r1, r6
 80182d6:	e7da      	b.n	801828e <__gethex+0x100>
 80182d8:	1bf3      	subs	r3, r6, r7
 80182da:	3b01      	subs	r3, #1
 80182dc:	4629      	mov	r1, r5
 80182de:	2b07      	cmp	r3, #7
 80182e0:	dc49      	bgt.n	8018376 <__gethex+0x1e8>
 80182e2:	9802      	ldr	r0, [sp, #8]
 80182e4:	f000 fa71 	bl	80187ca <_Balloc>
 80182e8:	9b01      	ldr	r3, [sp, #4]
 80182ea:	f100 0914 	add.w	r9, r0, #20
 80182ee:	f04f 0b00 	mov.w	fp, #0
 80182f2:	f1c3 0301 	rsb	r3, r3, #1
 80182f6:	4605      	mov	r5, r0
 80182f8:	f8cd 9010 	str.w	r9, [sp, #16]
 80182fc:	46da      	mov	sl, fp
 80182fe:	9308      	str	r3, [sp, #32]
 8018300:	42b7      	cmp	r7, r6
 8018302:	d33b      	bcc.n	801837c <__gethex+0x1ee>
 8018304:	9804      	ldr	r0, [sp, #16]
 8018306:	f840 ab04 	str.w	sl, [r0], #4
 801830a:	eba0 0009 	sub.w	r0, r0, r9
 801830e:	1080      	asrs	r0, r0, #2
 8018310:	6128      	str	r0, [r5, #16]
 8018312:	0147      	lsls	r7, r0, #5
 8018314:	4650      	mov	r0, sl
 8018316:	f000 fb1c 	bl	8018952 <__hi0bits>
 801831a:	f8d8 6000 	ldr.w	r6, [r8]
 801831e:	1a3f      	subs	r7, r7, r0
 8018320:	42b7      	cmp	r7, r6
 8018322:	dd64      	ble.n	80183ee <__gethex+0x260>
 8018324:	1bbf      	subs	r7, r7, r6
 8018326:	4639      	mov	r1, r7
 8018328:	4628      	mov	r0, r5
 801832a:	f000 fe2b 	bl	8018f84 <__any_on>
 801832e:	4682      	mov	sl, r0
 8018330:	b178      	cbz	r0, 8018352 <__gethex+0x1c4>
 8018332:	1e7b      	subs	r3, r7, #1
 8018334:	1159      	asrs	r1, r3, #5
 8018336:	f003 021f 	and.w	r2, r3, #31
 801833a:	f04f 0a01 	mov.w	sl, #1
 801833e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018342:	fa0a f202 	lsl.w	r2, sl, r2
 8018346:	420a      	tst	r2, r1
 8018348:	d003      	beq.n	8018352 <__gethex+0x1c4>
 801834a:	4553      	cmp	r3, sl
 801834c:	dc46      	bgt.n	80183dc <__gethex+0x24e>
 801834e:	f04f 0a02 	mov.w	sl, #2
 8018352:	4639      	mov	r1, r7
 8018354:	4628      	mov	r0, r5
 8018356:	f7ff fecb 	bl	80180f0 <rshift>
 801835a:	443c      	add	r4, r7
 801835c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018360:	42a3      	cmp	r3, r4
 8018362:	da52      	bge.n	801840a <__gethex+0x27c>
 8018364:	4629      	mov	r1, r5
 8018366:	9802      	ldr	r0, [sp, #8]
 8018368:	f000 fa63 	bl	8018832 <_Bfree>
 801836c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801836e:	2300      	movs	r3, #0
 8018370:	6013      	str	r3, [r2, #0]
 8018372:	27a3      	movs	r7, #163	; 0xa3
 8018374:	e793      	b.n	801829e <__gethex+0x110>
 8018376:	3101      	adds	r1, #1
 8018378:	105b      	asrs	r3, r3, #1
 801837a:	e7b0      	b.n	80182de <__gethex+0x150>
 801837c:	1e73      	subs	r3, r6, #1
 801837e:	9305      	str	r3, [sp, #20]
 8018380:	9a07      	ldr	r2, [sp, #28]
 8018382:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018386:	4293      	cmp	r3, r2
 8018388:	d018      	beq.n	80183bc <__gethex+0x22e>
 801838a:	f1bb 0f20 	cmp.w	fp, #32
 801838e:	d107      	bne.n	80183a0 <__gethex+0x212>
 8018390:	9b04      	ldr	r3, [sp, #16]
 8018392:	f8c3 a000 	str.w	sl, [r3]
 8018396:	3304      	adds	r3, #4
 8018398:	f04f 0a00 	mov.w	sl, #0
 801839c:	9304      	str	r3, [sp, #16]
 801839e:	46d3      	mov	fp, sl
 80183a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80183a4:	f7ff fede 	bl	8018164 <__hexdig_fun>
 80183a8:	f000 000f 	and.w	r0, r0, #15
 80183ac:	fa00 f00b 	lsl.w	r0, r0, fp
 80183b0:	ea4a 0a00 	orr.w	sl, sl, r0
 80183b4:	f10b 0b04 	add.w	fp, fp, #4
 80183b8:	9b05      	ldr	r3, [sp, #20]
 80183ba:	e00d      	b.n	80183d8 <__gethex+0x24a>
 80183bc:	9b05      	ldr	r3, [sp, #20]
 80183be:	9a08      	ldr	r2, [sp, #32]
 80183c0:	4413      	add	r3, r2
 80183c2:	42bb      	cmp	r3, r7
 80183c4:	d3e1      	bcc.n	801838a <__gethex+0x1fc>
 80183c6:	4618      	mov	r0, r3
 80183c8:	9a01      	ldr	r2, [sp, #4]
 80183ca:	9903      	ldr	r1, [sp, #12]
 80183cc:	9309      	str	r3, [sp, #36]	; 0x24
 80183ce:	f001 fb47 	bl	8019a60 <strncmp>
 80183d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183d4:	2800      	cmp	r0, #0
 80183d6:	d1d8      	bne.n	801838a <__gethex+0x1fc>
 80183d8:	461e      	mov	r6, r3
 80183da:	e791      	b.n	8018300 <__gethex+0x172>
 80183dc:	1eb9      	subs	r1, r7, #2
 80183de:	4628      	mov	r0, r5
 80183e0:	f000 fdd0 	bl	8018f84 <__any_on>
 80183e4:	2800      	cmp	r0, #0
 80183e6:	d0b2      	beq.n	801834e <__gethex+0x1c0>
 80183e8:	f04f 0a03 	mov.w	sl, #3
 80183ec:	e7b1      	b.n	8018352 <__gethex+0x1c4>
 80183ee:	da09      	bge.n	8018404 <__gethex+0x276>
 80183f0:	1bf7      	subs	r7, r6, r7
 80183f2:	4629      	mov	r1, r5
 80183f4:	463a      	mov	r2, r7
 80183f6:	9802      	ldr	r0, [sp, #8]
 80183f8:	f000 fbe6 	bl	8018bc8 <__lshift>
 80183fc:	1be4      	subs	r4, r4, r7
 80183fe:	4605      	mov	r5, r0
 8018400:	f100 0914 	add.w	r9, r0, #20
 8018404:	f04f 0a00 	mov.w	sl, #0
 8018408:	e7a8      	b.n	801835c <__gethex+0x1ce>
 801840a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801840e:	42a0      	cmp	r0, r4
 8018410:	dd6a      	ble.n	80184e8 <__gethex+0x35a>
 8018412:	1b04      	subs	r4, r0, r4
 8018414:	42a6      	cmp	r6, r4
 8018416:	dc2e      	bgt.n	8018476 <__gethex+0x2e8>
 8018418:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801841c:	2b02      	cmp	r3, #2
 801841e:	d022      	beq.n	8018466 <__gethex+0x2d8>
 8018420:	2b03      	cmp	r3, #3
 8018422:	d024      	beq.n	801846e <__gethex+0x2e0>
 8018424:	2b01      	cmp	r3, #1
 8018426:	d115      	bne.n	8018454 <__gethex+0x2c6>
 8018428:	42a6      	cmp	r6, r4
 801842a:	d113      	bne.n	8018454 <__gethex+0x2c6>
 801842c:	2e01      	cmp	r6, #1
 801842e:	dc0b      	bgt.n	8018448 <__gethex+0x2ba>
 8018430:	9a06      	ldr	r2, [sp, #24]
 8018432:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018436:	6013      	str	r3, [r2, #0]
 8018438:	2301      	movs	r3, #1
 801843a:	612b      	str	r3, [r5, #16]
 801843c:	f8c9 3000 	str.w	r3, [r9]
 8018440:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018442:	2762      	movs	r7, #98	; 0x62
 8018444:	601d      	str	r5, [r3, #0]
 8018446:	e72a      	b.n	801829e <__gethex+0x110>
 8018448:	1e71      	subs	r1, r6, #1
 801844a:	4628      	mov	r0, r5
 801844c:	f000 fd9a 	bl	8018f84 <__any_on>
 8018450:	2800      	cmp	r0, #0
 8018452:	d1ed      	bne.n	8018430 <__gethex+0x2a2>
 8018454:	4629      	mov	r1, r5
 8018456:	9802      	ldr	r0, [sp, #8]
 8018458:	f000 f9eb 	bl	8018832 <_Bfree>
 801845c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801845e:	2300      	movs	r3, #0
 8018460:	6013      	str	r3, [r2, #0]
 8018462:	2750      	movs	r7, #80	; 0x50
 8018464:	e71b      	b.n	801829e <__gethex+0x110>
 8018466:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018468:	2b00      	cmp	r3, #0
 801846a:	d0e1      	beq.n	8018430 <__gethex+0x2a2>
 801846c:	e7f2      	b.n	8018454 <__gethex+0x2c6>
 801846e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018470:	2b00      	cmp	r3, #0
 8018472:	d1dd      	bne.n	8018430 <__gethex+0x2a2>
 8018474:	e7ee      	b.n	8018454 <__gethex+0x2c6>
 8018476:	1e67      	subs	r7, r4, #1
 8018478:	f1ba 0f00 	cmp.w	sl, #0
 801847c:	d131      	bne.n	80184e2 <__gethex+0x354>
 801847e:	b127      	cbz	r7, 801848a <__gethex+0x2fc>
 8018480:	4639      	mov	r1, r7
 8018482:	4628      	mov	r0, r5
 8018484:	f000 fd7e 	bl	8018f84 <__any_on>
 8018488:	4682      	mov	sl, r0
 801848a:	117a      	asrs	r2, r7, #5
 801848c:	2301      	movs	r3, #1
 801848e:	f007 071f 	and.w	r7, r7, #31
 8018492:	fa03 f707 	lsl.w	r7, r3, r7
 8018496:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801849a:	4621      	mov	r1, r4
 801849c:	421f      	tst	r7, r3
 801849e:	4628      	mov	r0, r5
 80184a0:	bf18      	it	ne
 80184a2:	f04a 0a02 	orrne.w	sl, sl, #2
 80184a6:	1b36      	subs	r6, r6, r4
 80184a8:	f7ff fe22 	bl	80180f0 <rshift>
 80184ac:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80184b0:	2702      	movs	r7, #2
 80184b2:	f1ba 0f00 	cmp.w	sl, #0
 80184b6:	d048      	beq.n	801854a <__gethex+0x3bc>
 80184b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80184bc:	2b02      	cmp	r3, #2
 80184be:	d015      	beq.n	80184ec <__gethex+0x35e>
 80184c0:	2b03      	cmp	r3, #3
 80184c2:	d017      	beq.n	80184f4 <__gethex+0x366>
 80184c4:	2b01      	cmp	r3, #1
 80184c6:	d109      	bne.n	80184dc <__gethex+0x34e>
 80184c8:	f01a 0f02 	tst.w	sl, #2
 80184cc:	d006      	beq.n	80184dc <__gethex+0x34e>
 80184ce:	f8d9 3000 	ldr.w	r3, [r9]
 80184d2:	ea4a 0a03 	orr.w	sl, sl, r3
 80184d6:	f01a 0f01 	tst.w	sl, #1
 80184da:	d10e      	bne.n	80184fa <__gethex+0x36c>
 80184dc:	f047 0710 	orr.w	r7, r7, #16
 80184e0:	e033      	b.n	801854a <__gethex+0x3bc>
 80184e2:	f04f 0a01 	mov.w	sl, #1
 80184e6:	e7d0      	b.n	801848a <__gethex+0x2fc>
 80184e8:	2701      	movs	r7, #1
 80184ea:	e7e2      	b.n	80184b2 <__gethex+0x324>
 80184ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184ee:	f1c3 0301 	rsb	r3, r3, #1
 80184f2:	9315      	str	r3, [sp, #84]	; 0x54
 80184f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d0f0      	beq.n	80184dc <__gethex+0x34e>
 80184fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80184fe:	f105 0314 	add.w	r3, r5, #20
 8018502:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8018506:	eb03 010a 	add.w	r1, r3, sl
 801850a:	f04f 0c00 	mov.w	ip, #0
 801850e:	4618      	mov	r0, r3
 8018510:	f853 2b04 	ldr.w	r2, [r3], #4
 8018514:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018518:	d01c      	beq.n	8018554 <__gethex+0x3c6>
 801851a:	3201      	adds	r2, #1
 801851c:	6002      	str	r2, [r0, #0]
 801851e:	2f02      	cmp	r7, #2
 8018520:	f105 0314 	add.w	r3, r5, #20
 8018524:	d138      	bne.n	8018598 <__gethex+0x40a>
 8018526:	f8d8 2000 	ldr.w	r2, [r8]
 801852a:	3a01      	subs	r2, #1
 801852c:	42b2      	cmp	r2, r6
 801852e:	d10a      	bne.n	8018546 <__gethex+0x3b8>
 8018530:	1171      	asrs	r1, r6, #5
 8018532:	2201      	movs	r2, #1
 8018534:	f006 061f 	and.w	r6, r6, #31
 8018538:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801853c:	fa02 f606 	lsl.w	r6, r2, r6
 8018540:	421e      	tst	r6, r3
 8018542:	bf18      	it	ne
 8018544:	4617      	movne	r7, r2
 8018546:	f047 0720 	orr.w	r7, r7, #32
 801854a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801854c:	601d      	str	r5, [r3, #0]
 801854e:	9b06      	ldr	r3, [sp, #24]
 8018550:	601c      	str	r4, [r3, #0]
 8018552:	e6a4      	b.n	801829e <__gethex+0x110>
 8018554:	4299      	cmp	r1, r3
 8018556:	f843 cc04 	str.w	ip, [r3, #-4]
 801855a:	d8d8      	bhi.n	801850e <__gethex+0x380>
 801855c:	68ab      	ldr	r3, [r5, #8]
 801855e:	4599      	cmp	r9, r3
 8018560:	db12      	blt.n	8018588 <__gethex+0x3fa>
 8018562:	6869      	ldr	r1, [r5, #4]
 8018564:	9802      	ldr	r0, [sp, #8]
 8018566:	3101      	adds	r1, #1
 8018568:	f000 f92f 	bl	80187ca <_Balloc>
 801856c:	692a      	ldr	r2, [r5, #16]
 801856e:	3202      	adds	r2, #2
 8018570:	f105 010c 	add.w	r1, r5, #12
 8018574:	4683      	mov	fp, r0
 8018576:	0092      	lsls	r2, r2, #2
 8018578:	300c      	adds	r0, #12
 801857a:	f000 f91b 	bl	80187b4 <memcpy>
 801857e:	4629      	mov	r1, r5
 8018580:	9802      	ldr	r0, [sp, #8]
 8018582:	f000 f956 	bl	8018832 <_Bfree>
 8018586:	465d      	mov	r5, fp
 8018588:	692b      	ldr	r3, [r5, #16]
 801858a:	1c5a      	adds	r2, r3, #1
 801858c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018590:	612a      	str	r2, [r5, #16]
 8018592:	2201      	movs	r2, #1
 8018594:	615a      	str	r2, [r3, #20]
 8018596:	e7c2      	b.n	801851e <__gethex+0x390>
 8018598:	692a      	ldr	r2, [r5, #16]
 801859a:	454a      	cmp	r2, r9
 801859c:	dd0b      	ble.n	80185b6 <__gethex+0x428>
 801859e:	2101      	movs	r1, #1
 80185a0:	4628      	mov	r0, r5
 80185a2:	f7ff fda5 	bl	80180f0 <rshift>
 80185a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80185aa:	3401      	adds	r4, #1
 80185ac:	42a3      	cmp	r3, r4
 80185ae:	f6ff aed9 	blt.w	8018364 <__gethex+0x1d6>
 80185b2:	2701      	movs	r7, #1
 80185b4:	e7c7      	b.n	8018546 <__gethex+0x3b8>
 80185b6:	f016 061f 	ands.w	r6, r6, #31
 80185ba:	d0fa      	beq.n	80185b2 <__gethex+0x424>
 80185bc:	449a      	add	sl, r3
 80185be:	f1c6 0620 	rsb	r6, r6, #32
 80185c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80185c6:	f000 f9c4 	bl	8018952 <__hi0bits>
 80185ca:	42b0      	cmp	r0, r6
 80185cc:	dbe7      	blt.n	801859e <__gethex+0x410>
 80185ce:	e7f0      	b.n	80185b2 <__gethex+0x424>

080185d0 <L_shift>:
 80185d0:	f1c2 0208 	rsb	r2, r2, #8
 80185d4:	0092      	lsls	r2, r2, #2
 80185d6:	b570      	push	{r4, r5, r6, lr}
 80185d8:	f1c2 0620 	rsb	r6, r2, #32
 80185dc:	6843      	ldr	r3, [r0, #4]
 80185de:	6804      	ldr	r4, [r0, #0]
 80185e0:	fa03 f506 	lsl.w	r5, r3, r6
 80185e4:	432c      	orrs	r4, r5
 80185e6:	40d3      	lsrs	r3, r2
 80185e8:	6004      	str	r4, [r0, #0]
 80185ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80185ee:	4288      	cmp	r0, r1
 80185f0:	d3f4      	bcc.n	80185dc <L_shift+0xc>
 80185f2:	bd70      	pop	{r4, r5, r6, pc}

080185f4 <__match>:
 80185f4:	b530      	push	{r4, r5, lr}
 80185f6:	6803      	ldr	r3, [r0, #0]
 80185f8:	3301      	adds	r3, #1
 80185fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80185fe:	b914      	cbnz	r4, 8018606 <__match+0x12>
 8018600:	6003      	str	r3, [r0, #0]
 8018602:	2001      	movs	r0, #1
 8018604:	bd30      	pop	{r4, r5, pc}
 8018606:	f813 2b01 	ldrb.w	r2, [r3], #1
 801860a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801860e:	2d19      	cmp	r5, #25
 8018610:	bf98      	it	ls
 8018612:	3220      	addls	r2, #32
 8018614:	42a2      	cmp	r2, r4
 8018616:	d0f0      	beq.n	80185fa <__match+0x6>
 8018618:	2000      	movs	r0, #0
 801861a:	e7f3      	b.n	8018604 <__match+0x10>

0801861c <__hexnan>:
 801861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018620:	680b      	ldr	r3, [r1, #0]
 8018622:	6801      	ldr	r1, [r0, #0]
 8018624:	115f      	asrs	r7, r3, #5
 8018626:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801862a:	f013 031f 	ands.w	r3, r3, #31
 801862e:	b087      	sub	sp, #28
 8018630:	bf18      	it	ne
 8018632:	3704      	addne	r7, #4
 8018634:	2500      	movs	r5, #0
 8018636:	1f3e      	subs	r6, r7, #4
 8018638:	4682      	mov	sl, r0
 801863a:	4690      	mov	r8, r2
 801863c:	9301      	str	r3, [sp, #4]
 801863e:	f847 5c04 	str.w	r5, [r7, #-4]
 8018642:	46b1      	mov	r9, r6
 8018644:	4634      	mov	r4, r6
 8018646:	9502      	str	r5, [sp, #8]
 8018648:	46ab      	mov	fp, r5
 801864a:	784a      	ldrb	r2, [r1, #1]
 801864c:	1c4b      	adds	r3, r1, #1
 801864e:	9303      	str	r3, [sp, #12]
 8018650:	b342      	cbz	r2, 80186a4 <__hexnan+0x88>
 8018652:	4610      	mov	r0, r2
 8018654:	9105      	str	r1, [sp, #20]
 8018656:	9204      	str	r2, [sp, #16]
 8018658:	f7ff fd84 	bl	8018164 <__hexdig_fun>
 801865c:	2800      	cmp	r0, #0
 801865e:	d143      	bne.n	80186e8 <__hexnan+0xcc>
 8018660:	9a04      	ldr	r2, [sp, #16]
 8018662:	9905      	ldr	r1, [sp, #20]
 8018664:	2a20      	cmp	r2, #32
 8018666:	d818      	bhi.n	801869a <__hexnan+0x7e>
 8018668:	9b02      	ldr	r3, [sp, #8]
 801866a:	459b      	cmp	fp, r3
 801866c:	dd13      	ble.n	8018696 <__hexnan+0x7a>
 801866e:	454c      	cmp	r4, r9
 8018670:	d206      	bcs.n	8018680 <__hexnan+0x64>
 8018672:	2d07      	cmp	r5, #7
 8018674:	dc04      	bgt.n	8018680 <__hexnan+0x64>
 8018676:	462a      	mov	r2, r5
 8018678:	4649      	mov	r1, r9
 801867a:	4620      	mov	r0, r4
 801867c:	f7ff ffa8 	bl	80185d0 <L_shift>
 8018680:	4544      	cmp	r4, r8
 8018682:	d944      	bls.n	801870e <__hexnan+0xf2>
 8018684:	2300      	movs	r3, #0
 8018686:	f1a4 0904 	sub.w	r9, r4, #4
 801868a:	f844 3c04 	str.w	r3, [r4, #-4]
 801868e:	f8cd b008 	str.w	fp, [sp, #8]
 8018692:	464c      	mov	r4, r9
 8018694:	461d      	mov	r5, r3
 8018696:	9903      	ldr	r1, [sp, #12]
 8018698:	e7d7      	b.n	801864a <__hexnan+0x2e>
 801869a:	2a29      	cmp	r2, #41	; 0x29
 801869c:	d14a      	bne.n	8018734 <__hexnan+0x118>
 801869e:	3102      	adds	r1, #2
 80186a0:	f8ca 1000 	str.w	r1, [sl]
 80186a4:	f1bb 0f00 	cmp.w	fp, #0
 80186a8:	d044      	beq.n	8018734 <__hexnan+0x118>
 80186aa:	454c      	cmp	r4, r9
 80186ac:	d206      	bcs.n	80186bc <__hexnan+0xa0>
 80186ae:	2d07      	cmp	r5, #7
 80186b0:	dc04      	bgt.n	80186bc <__hexnan+0xa0>
 80186b2:	462a      	mov	r2, r5
 80186b4:	4649      	mov	r1, r9
 80186b6:	4620      	mov	r0, r4
 80186b8:	f7ff ff8a 	bl	80185d0 <L_shift>
 80186bc:	4544      	cmp	r4, r8
 80186be:	d928      	bls.n	8018712 <__hexnan+0xf6>
 80186c0:	4643      	mov	r3, r8
 80186c2:	f854 2b04 	ldr.w	r2, [r4], #4
 80186c6:	f843 2b04 	str.w	r2, [r3], #4
 80186ca:	42a6      	cmp	r6, r4
 80186cc:	d2f9      	bcs.n	80186c2 <__hexnan+0xa6>
 80186ce:	2200      	movs	r2, #0
 80186d0:	f843 2b04 	str.w	r2, [r3], #4
 80186d4:	429e      	cmp	r6, r3
 80186d6:	d2fb      	bcs.n	80186d0 <__hexnan+0xb4>
 80186d8:	6833      	ldr	r3, [r6, #0]
 80186da:	b91b      	cbnz	r3, 80186e4 <__hexnan+0xc8>
 80186dc:	4546      	cmp	r6, r8
 80186de:	d127      	bne.n	8018730 <__hexnan+0x114>
 80186e0:	2301      	movs	r3, #1
 80186e2:	6033      	str	r3, [r6, #0]
 80186e4:	2005      	movs	r0, #5
 80186e6:	e026      	b.n	8018736 <__hexnan+0x11a>
 80186e8:	3501      	adds	r5, #1
 80186ea:	2d08      	cmp	r5, #8
 80186ec:	f10b 0b01 	add.w	fp, fp, #1
 80186f0:	dd06      	ble.n	8018700 <__hexnan+0xe4>
 80186f2:	4544      	cmp	r4, r8
 80186f4:	d9cf      	bls.n	8018696 <__hexnan+0x7a>
 80186f6:	2300      	movs	r3, #0
 80186f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80186fc:	2501      	movs	r5, #1
 80186fe:	3c04      	subs	r4, #4
 8018700:	6822      	ldr	r2, [r4, #0]
 8018702:	f000 000f 	and.w	r0, r0, #15
 8018706:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801870a:	6020      	str	r0, [r4, #0]
 801870c:	e7c3      	b.n	8018696 <__hexnan+0x7a>
 801870e:	2508      	movs	r5, #8
 8018710:	e7c1      	b.n	8018696 <__hexnan+0x7a>
 8018712:	9b01      	ldr	r3, [sp, #4]
 8018714:	2b00      	cmp	r3, #0
 8018716:	d0df      	beq.n	80186d8 <__hexnan+0xbc>
 8018718:	f04f 32ff 	mov.w	r2, #4294967295
 801871c:	f1c3 0320 	rsb	r3, r3, #32
 8018720:	fa22 f303 	lsr.w	r3, r2, r3
 8018724:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018728:	401a      	ands	r2, r3
 801872a:	f847 2c04 	str.w	r2, [r7, #-4]
 801872e:	e7d3      	b.n	80186d8 <__hexnan+0xbc>
 8018730:	3e04      	subs	r6, #4
 8018732:	e7d1      	b.n	80186d8 <__hexnan+0xbc>
 8018734:	2004      	movs	r0, #4
 8018736:	b007      	add	sp, #28
 8018738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801873c <__locale_ctype_ptr_l>:
 801873c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018740:	4770      	bx	lr
	...

08018744 <__locale_ctype_ptr>:
 8018744:	4b04      	ldr	r3, [pc, #16]	; (8018758 <__locale_ctype_ptr+0x14>)
 8018746:	4a05      	ldr	r2, [pc, #20]	; (801875c <__locale_ctype_ptr+0x18>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	6a1b      	ldr	r3, [r3, #32]
 801874c:	2b00      	cmp	r3, #0
 801874e:	bf08      	it	eq
 8018750:	4613      	moveq	r3, r2
 8018752:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8018756:	4770      	bx	lr
 8018758:	2000000c 	.word	0x2000000c
 801875c:	20000070 	.word	0x20000070

08018760 <__localeconv_l>:
 8018760:	30f0      	adds	r0, #240	; 0xf0
 8018762:	4770      	bx	lr

08018764 <_localeconv_r>:
 8018764:	4b04      	ldr	r3, [pc, #16]	; (8018778 <_localeconv_r+0x14>)
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	6a18      	ldr	r0, [r3, #32]
 801876a:	4b04      	ldr	r3, [pc, #16]	; (801877c <_localeconv_r+0x18>)
 801876c:	2800      	cmp	r0, #0
 801876e:	bf08      	it	eq
 8018770:	4618      	moveq	r0, r3
 8018772:	30f0      	adds	r0, #240	; 0xf0
 8018774:	4770      	bx	lr
 8018776:	bf00      	nop
 8018778:	2000000c 	.word	0x2000000c
 801877c:	20000070 	.word	0x20000070

08018780 <malloc>:
 8018780:	4b02      	ldr	r3, [pc, #8]	; (801878c <malloc+0xc>)
 8018782:	4601      	mov	r1, r0
 8018784:	6818      	ldr	r0, [r3, #0]
 8018786:	f000 bc7b 	b.w	8019080 <_malloc_r>
 801878a:	bf00      	nop
 801878c:	2000000c 	.word	0x2000000c

08018790 <__ascii_mbtowc>:
 8018790:	b082      	sub	sp, #8
 8018792:	b901      	cbnz	r1, 8018796 <__ascii_mbtowc+0x6>
 8018794:	a901      	add	r1, sp, #4
 8018796:	b142      	cbz	r2, 80187aa <__ascii_mbtowc+0x1a>
 8018798:	b14b      	cbz	r3, 80187ae <__ascii_mbtowc+0x1e>
 801879a:	7813      	ldrb	r3, [r2, #0]
 801879c:	600b      	str	r3, [r1, #0]
 801879e:	7812      	ldrb	r2, [r2, #0]
 80187a0:	1c10      	adds	r0, r2, #0
 80187a2:	bf18      	it	ne
 80187a4:	2001      	movne	r0, #1
 80187a6:	b002      	add	sp, #8
 80187a8:	4770      	bx	lr
 80187aa:	4610      	mov	r0, r2
 80187ac:	e7fb      	b.n	80187a6 <__ascii_mbtowc+0x16>
 80187ae:	f06f 0001 	mvn.w	r0, #1
 80187b2:	e7f8      	b.n	80187a6 <__ascii_mbtowc+0x16>

080187b4 <memcpy>:
 80187b4:	b510      	push	{r4, lr}
 80187b6:	1e43      	subs	r3, r0, #1
 80187b8:	440a      	add	r2, r1
 80187ba:	4291      	cmp	r1, r2
 80187bc:	d100      	bne.n	80187c0 <memcpy+0xc>
 80187be:	bd10      	pop	{r4, pc}
 80187c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80187c8:	e7f7      	b.n	80187ba <memcpy+0x6>

080187ca <_Balloc>:
 80187ca:	b570      	push	{r4, r5, r6, lr}
 80187cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80187ce:	4604      	mov	r4, r0
 80187d0:	460e      	mov	r6, r1
 80187d2:	b93d      	cbnz	r5, 80187e4 <_Balloc+0x1a>
 80187d4:	2010      	movs	r0, #16
 80187d6:	f7ff ffd3 	bl	8018780 <malloc>
 80187da:	6260      	str	r0, [r4, #36]	; 0x24
 80187dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80187e0:	6005      	str	r5, [r0, #0]
 80187e2:	60c5      	str	r5, [r0, #12]
 80187e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80187e6:	68eb      	ldr	r3, [r5, #12]
 80187e8:	b183      	cbz	r3, 801880c <_Balloc+0x42>
 80187ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187ec:	68db      	ldr	r3, [r3, #12]
 80187ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80187f2:	b9b8      	cbnz	r0, 8018824 <_Balloc+0x5a>
 80187f4:	2101      	movs	r1, #1
 80187f6:	fa01 f506 	lsl.w	r5, r1, r6
 80187fa:	1d6a      	adds	r2, r5, #5
 80187fc:	0092      	lsls	r2, r2, #2
 80187fe:	4620      	mov	r0, r4
 8018800:	f000 fbe1 	bl	8018fc6 <_calloc_r>
 8018804:	b160      	cbz	r0, 8018820 <_Balloc+0x56>
 8018806:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801880a:	e00e      	b.n	801882a <_Balloc+0x60>
 801880c:	2221      	movs	r2, #33	; 0x21
 801880e:	2104      	movs	r1, #4
 8018810:	4620      	mov	r0, r4
 8018812:	f000 fbd8 	bl	8018fc6 <_calloc_r>
 8018816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018818:	60e8      	str	r0, [r5, #12]
 801881a:	68db      	ldr	r3, [r3, #12]
 801881c:	2b00      	cmp	r3, #0
 801881e:	d1e4      	bne.n	80187ea <_Balloc+0x20>
 8018820:	2000      	movs	r0, #0
 8018822:	bd70      	pop	{r4, r5, r6, pc}
 8018824:	6802      	ldr	r2, [r0, #0]
 8018826:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801882a:	2300      	movs	r3, #0
 801882c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018830:	e7f7      	b.n	8018822 <_Balloc+0x58>

08018832 <_Bfree>:
 8018832:	b570      	push	{r4, r5, r6, lr}
 8018834:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018836:	4606      	mov	r6, r0
 8018838:	460d      	mov	r5, r1
 801883a:	b93c      	cbnz	r4, 801884c <_Bfree+0x1a>
 801883c:	2010      	movs	r0, #16
 801883e:	f7ff ff9f 	bl	8018780 <malloc>
 8018842:	6270      	str	r0, [r6, #36]	; 0x24
 8018844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018848:	6004      	str	r4, [r0, #0]
 801884a:	60c4      	str	r4, [r0, #12]
 801884c:	b13d      	cbz	r5, 801885e <_Bfree+0x2c>
 801884e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018850:	686a      	ldr	r2, [r5, #4]
 8018852:	68db      	ldr	r3, [r3, #12]
 8018854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018858:	6029      	str	r1, [r5, #0]
 801885a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801885e:	bd70      	pop	{r4, r5, r6, pc}

08018860 <__multadd>:
 8018860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018864:	690d      	ldr	r5, [r1, #16]
 8018866:	461f      	mov	r7, r3
 8018868:	4606      	mov	r6, r0
 801886a:	460c      	mov	r4, r1
 801886c:	f101 0c14 	add.w	ip, r1, #20
 8018870:	2300      	movs	r3, #0
 8018872:	f8dc 0000 	ldr.w	r0, [ip]
 8018876:	b281      	uxth	r1, r0
 8018878:	fb02 7101 	mla	r1, r2, r1, r7
 801887c:	0c0f      	lsrs	r7, r1, #16
 801887e:	0c00      	lsrs	r0, r0, #16
 8018880:	fb02 7000 	mla	r0, r2, r0, r7
 8018884:	b289      	uxth	r1, r1
 8018886:	3301      	adds	r3, #1
 8018888:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801888c:	429d      	cmp	r5, r3
 801888e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8018892:	f84c 1b04 	str.w	r1, [ip], #4
 8018896:	dcec      	bgt.n	8018872 <__multadd+0x12>
 8018898:	b1d7      	cbz	r7, 80188d0 <__multadd+0x70>
 801889a:	68a3      	ldr	r3, [r4, #8]
 801889c:	42ab      	cmp	r3, r5
 801889e:	dc12      	bgt.n	80188c6 <__multadd+0x66>
 80188a0:	6861      	ldr	r1, [r4, #4]
 80188a2:	4630      	mov	r0, r6
 80188a4:	3101      	adds	r1, #1
 80188a6:	f7ff ff90 	bl	80187ca <_Balloc>
 80188aa:	6922      	ldr	r2, [r4, #16]
 80188ac:	3202      	adds	r2, #2
 80188ae:	f104 010c 	add.w	r1, r4, #12
 80188b2:	4680      	mov	r8, r0
 80188b4:	0092      	lsls	r2, r2, #2
 80188b6:	300c      	adds	r0, #12
 80188b8:	f7ff ff7c 	bl	80187b4 <memcpy>
 80188bc:	4621      	mov	r1, r4
 80188be:	4630      	mov	r0, r6
 80188c0:	f7ff ffb7 	bl	8018832 <_Bfree>
 80188c4:	4644      	mov	r4, r8
 80188c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80188ca:	3501      	adds	r5, #1
 80188cc:	615f      	str	r7, [r3, #20]
 80188ce:	6125      	str	r5, [r4, #16]
 80188d0:	4620      	mov	r0, r4
 80188d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188d6 <__s2b>:
 80188d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188da:	460c      	mov	r4, r1
 80188dc:	4615      	mov	r5, r2
 80188de:	461f      	mov	r7, r3
 80188e0:	2209      	movs	r2, #9
 80188e2:	3308      	adds	r3, #8
 80188e4:	4606      	mov	r6, r0
 80188e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80188ea:	2100      	movs	r1, #0
 80188ec:	2201      	movs	r2, #1
 80188ee:	429a      	cmp	r2, r3
 80188f0:	db20      	blt.n	8018934 <__s2b+0x5e>
 80188f2:	4630      	mov	r0, r6
 80188f4:	f7ff ff69 	bl	80187ca <_Balloc>
 80188f8:	9b08      	ldr	r3, [sp, #32]
 80188fa:	6143      	str	r3, [r0, #20]
 80188fc:	2d09      	cmp	r5, #9
 80188fe:	f04f 0301 	mov.w	r3, #1
 8018902:	6103      	str	r3, [r0, #16]
 8018904:	dd19      	ble.n	801893a <__s2b+0x64>
 8018906:	f104 0809 	add.w	r8, r4, #9
 801890a:	46c1      	mov	r9, r8
 801890c:	442c      	add	r4, r5
 801890e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018912:	4601      	mov	r1, r0
 8018914:	3b30      	subs	r3, #48	; 0x30
 8018916:	220a      	movs	r2, #10
 8018918:	4630      	mov	r0, r6
 801891a:	f7ff ffa1 	bl	8018860 <__multadd>
 801891e:	45a1      	cmp	r9, r4
 8018920:	d1f5      	bne.n	801890e <__s2b+0x38>
 8018922:	eb08 0405 	add.w	r4, r8, r5
 8018926:	3c08      	subs	r4, #8
 8018928:	1b2d      	subs	r5, r5, r4
 801892a:	1963      	adds	r3, r4, r5
 801892c:	42bb      	cmp	r3, r7
 801892e:	db07      	blt.n	8018940 <__s2b+0x6a>
 8018930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018934:	0052      	lsls	r2, r2, #1
 8018936:	3101      	adds	r1, #1
 8018938:	e7d9      	b.n	80188ee <__s2b+0x18>
 801893a:	340a      	adds	r4, #10
 801893c:	2509      	movs	r5, #9
 801893e:	e7f3      	b.n	8018928 <__s2b+0x52>
 8018940:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018944:	4601      	mov	r1, r0
 8018946:	3b30      	subs	r3, #48	; 0x30
 8018948:	220a      	movs	r2, #10
 801894a:	4630      	mov	r0, r6
 801894c:	f7ff ff88 	bl	8018860 <__multadd>
 8018950:	e7eb      	b.n	801892a <__s2b+0x54>

08018952 <__hi0bits>:
 8018952:	0c02      	lsrs	r2, r0, #16
 8018954:	0412      	lsls	r2, r2, #16
 8018956:	4603      	mov	r3, r0
 8018958:	b9b2      	cbnz	r2, 8018988 <__hi0bits+0x36>
 801895a:	0403      	lsls	r3, r0, #16
 801895c:	2010      	movs	r0, #16
 801895e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8018962:	bf04      	itt	eq
 8018964:	021b      	lsleq	r3, r3, #8
 8018966:	3008      	addeq	r0, #8
 8018968:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801896c:	bf04      	itt	eq
 801896e:	011b      	lsleq	r3, r3, #4
 8018970:	3004      	addeq	r0, #4
 8018972:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018976:	bf04      	itt	eq
 8018978:	009b      	lsleq	r3, r3, #2
 801897a:	3002      	addeq	r0, #2
 801897c:	2b00      	cmp	r3, #0
 801897e:	db06      	blt.n	801898e <__hi0bits+0x3c>
 8018980:	005b      	lsls	r3, r3, #1
 8018982:	d503      	bpl.n	801898c <__hi0bits+0x3a>
 8018984:	3001      	adds	r0, #1
 8018986:	4770      	bx	lr
 8018988:	2000      	movs	r0, #0
 801898a:	e7e8      	b.n	801895e <__hi0bits+0xc>
 801898c:	2020      	movs	r0, #32
 801898e:	4770      	bx	lr

08018990 <__lo0bits>:
 8018990:	6803      	ldr	r3, [r0, #0]
 8018992:	f013 0207 	ands.w	r2, r3, #7
 8018996:	4601      	mov	r1, r0
 8018998:	d00b      	beq.n	80189b2 <__lo0bits+0x22>
 801899a:	07da      	lsls	r2, r3, #31
 801899c:	d423      	bmi.n	80189e6 <__lo0bits+0x56>
 801899e:	0798      	lsls	r0, r3, #30
 80189a0:	bf49      	itett	mi
 80189a2:	085b      	lsrmi	r3, r3, #1
 80189a4:	089b      	lsrpl	r3, r3, #2
 80189a6:	2001      	movmi	r0, #1
 80189a8:	600b      	strmi	r3, [r1, #0]
 80189aa:	bf5c      	itt	pl
 80189ac:	600b      	strpl	r3, [r1, #0]
 80189ae:	2002      	movpl	r0, #2
 80189b0:	4770      	bx	lr
 80189b2:	b298      	uxth	r0, r3
 80189b4:	b9a8      	cbnz	r0, 80189e2 <__lo0bits+0x52>
 80189b6:	0c1b      	lsrs	r3, r3, #16
 80189b8:	2010      	movs	r0, #16
 80189ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80189be:	bf04      	itt	eq
 80189c0:	0a1b      	lsreq	r3, r3, #8
 80189c2:	3008      	addeq	r0, #8
 80189c4:	071a      	lsls	r2, r3, #28
 80189c6:	bf04      	itt	eq
 80189c8:	091b      	lsreq	r3, r3, #4
 80189ca:	3004      	addeq	r0, #4
 80189cc:	079a      	lsls	r2, r3, #30
 80189ce:	bf04      	itt	eq
 80189d0:	089b      	lsreq	r3, r3, #2
 80189d2:	3002      	addeq	r0, #2
 80189d4:	07da      	lsls	r2, r3, #31
 80189d6:	d402      	bmi.n	80189de <__lo0bits+0x4e>
 80189d8:	085b      	lsrs	r3, r3, #1
 80189da:	d006      	beq.n	80189ea <__lo0bits+0x5a>
 80189dc:	3001      	adds	r0, #1
 80189de:	600b      	str	r3, [r1, #0]
 80189e0:	4770      	bx	lr
 80189e2:	4610      	mov	r0, r2
 80189e4:	e7e9      	b.n	80189ba <__lo0bits+0x2a>
 80189e6:	2000      	movs	r0, #0
 80189e8:	4770      	bx	lr
 80189ea:	2020      	movs	r0, #32
 80189ec:	4770      	bx	lr

080189ee <__i2b>:
 80189ee:	b510      	push	{r4, lr}
 80189f0:	460c      	mov	r4, r1
 80189f2:	2101      	movs	r1, #1
 80189f4:	f7ff fee9 	bl	80187ca <_Balloc>
 80189f8:	2201      	movs	r2, #1
 80189fa:	6144      	str	r4, [r0, #20]
 80189fc:	6102      	str	r2, [r0, #16]
 80189fe:	bd10      	pop	{r4, pc}

08018a00 <__multiply>:
 8018a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a04:	4614      	mov	r4, r2
 8018a06:	690a      	ldr	r2, [r1, #16]
 8018a08:	6923      	ldr	r3, [r4, #16]
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	bfb8      	it	lt
 8018a0e:	460b      	movlt	r3, r1
 8018a10:	4688      	mov	r8, r1
 8018a12:	bfbc      	itt	lt
 8018a14:	46a0      	movlt	r8, r4
 8018a16:	461c      	movlt	r4, r3
 8018a18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8018a1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018a20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018a28:	eb07 0609 	add.w	r6, r7, r9
 8018a2c:	42b3      	cmp	r3, r6
 8018a2e:	bfb8      	it	lt
 8018a30:	3101      	addlt	r1, #1
 8018a32:	f7ff feca 	bl	80187ca <_Balloc>
 8018a36:	f100 0514 	add.w	r5, r0, #20
 8018a3a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018a3e:	462b      	mov	r3, r5
 8018a40:	2200      	movs	r2, #0
 8018a42:	4573      	cmp	r3, lr
 8018a44:	d316      	bcc.n	8018a74 <__multiply+0x74>
 8018a46:	f104 0214 	add.w	r2, r4, #20
 8018a4a:	f108 0114 	add.w	r1, r8, #20
 8018a4e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018a52:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018a56:	9300      	str	r3, [sp, #0]
 8018a58:	9b00      	ldr	r3, [sp, #0]
 8018a5a:	9201      	str	r2, [sp, #4]
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	d80c      	bhi.n	8018a7a <__multiply+0x7a>
 8018a60:	2e00      	cmp	r6, #0
 8018a62:	dd03      	ble.n	8018a6c <__multiply+0x6c>
 8018a64:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018a68:	2b00      	cmp	r3, #0
 8018a6a:	d05d      	beq.n	8018b28 <__multiply+0x128>
 8018a6c:	6106      	str	r6, [r0, #16]
 8018a6e:	b003      	add	sp, #12
 8018a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a74:	f843 2b04 	str.w	r2, [r3], #4
 8018a78:	e7e3      	b.n	8018a42 <__multiply+0x42>
 8018a7a:	f8b2 b000 	ldrh.w	fp, [r2]
 8018a7e:	f1bb 0f00 	cmp.w	fp, #0
 8018a82:	d023      	beq.n	8018acc <__multiply+0xcc>
 8018a84:	4689      	mov	r9, r1
 8018a86:	46ac      	mov	ip, r5
 8018a88:	f04f 0800 	mov.w	r8, #0
 8018a8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018a90:	f8dc a000 	ldr.w	sl, [ip]
 8018a94:	b2a3      	uxth	r3, r4
 8018a96:	fa1f fa8a 	uxth.w	sl, sl
 8018a9a:	fb0b a303 	mla	r3, fp, r3, sl
 8018a9e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018aa2:	f8dc 4000 	ldr.w	r4, [ip]
 8018aa6:	4443      	add	r3, r8
 8018aa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018aac:	fb0b 840a 	mla	r4, fp, sl, r8
 8018ab0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8018ab4:	46e2      	mov	sl, ip
 8018ab6:	b29b      	uxth	r3, r3
 8018ab8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018abc:	454f      	cmp	r7, r9
 8018abe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8018ac6:	d82b      	bhi.n	8018b20 <__multiply+0x120>
 8018ac8:	f8cc 8004 	str.w	r8, [ip, #4]
 8018acc:	9b01      	ldr	r3, [sp, #4]
 8018ace:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018ad2:	3204      	adds	r2, #4
 8018ad4:	f1ba 0f00 	cmp.w	sl, #0
 8018ad8:	d020      	beq.n	8018b1c <__multiply+0x11c>
 8018ada:	682b      	ldr	r3, [r5, #0]
 8018adc:	4689      	mov	r9, r1
 8018ade:	46a8      	mov	r8, r5
 8018ae0:	f04f 0b00 	mov.w	fp, #0
 8018ae4:	f8b9 c000 	ldrh.w	ip, [r9]
 8018ae8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018aec:	fb0a 440c 	mla	r4, sl, ip, r4
 8018af0:	445c      	add	r4, fp
 8018af2:	46c4      	mov	ip, r8
 8018af4:	b29b      	uxth	r3, r3
 8018af6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018afa:	f84c 3b04 	str.w	r3, [ip], #4
 8018afe:	f859 3b04 	ldr.w	r3, [r9], #4
 8018b02:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018b06:	0c1b      	lsrs	r3, r3, #16
 8018b08:	fb0a b303 	mla	r3, sl, r3, fp
 8018b0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018b10:	454f      	cmp	r7, r9
 8018b12:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018b16:	d805      	bhi.n	8018b24 <__multiply+0x124>
 8018b18:	f8c8 3004 	str.w	r3, [r8, #4]
 8018b1c:	3504      	adds	r5, #4
 8018b1e:	e79b      	b.n	8018a58 <__multiply+0x58>
 8018b20:	46d4      	mov	ip, sl
 8018b22:	e7b3      	b.n	8018a8c <__multiply+0x8c>
 8018b24:	46e0      	mov	r8, ip
 8018b26:	e7dd      	b.n	8018ae4 <__multiply+0xe4>
 8018b28:	3e01      	subs	r6, #1
 8018b2a:	e799      	b.n	8018a60 <__multiply+0x60>

08018b2c <__pow5mult>:
 8018b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018b30:	4615      	mov	r5, r2
 8018b32:	f012 0203 	ands.w	r2, r2, #3
 8018b36:	4606      	mov	r6, r0
 8018b38:	460f      	mov	r7, r1
 8018b3a:	d007      	beq.n	8018b4c <__pow5mult+0x20>
 8018b3c:	3a01      	subs	r2, #1
 8018b3e:	4c21      	ldr	r4, [pc, #132]	; (8018bc4 <__pow5mult+0x98>)
 8018b40:	2300      	movs	r3, #0
 8018b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018b46:	f7ff fe8b 	bl	8018860 <__multadd>
 8018b4a:	4607      	mov	r7, r0
 8018b4c:	10ad      	asrs	r5, r5, #2
 8018b4e:	d035      	beq.n	8018bbc <__pow5mult+0x90>
 8018b50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018b52:	b93c      	cbnz	r4, 8018b64 <__pow5mult+0x38>
 8018b54:	2010      	movs	r0, #16
 8018b56:	f7ff fe13 	bl	8018780 <malloc>
 8018b5a:	6270      	str	r0, [r6, #36]	; 0x24
 8018b5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018b60:	6004      	str	r4, [r0, #0]
 8018b62:	60c4      	str	r4, [r0, #12]
 8018b64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018b6c:	b94c      	cbnz	r4, 8018b82 <__pow5mult+0x56>
 8018b6e:	f240 2171 	movw	r1, #625	; 0x271
 8018b72:	4630      	mov	r0, r6
 8018b74:	f7ff ff3b 	bl	80189ee <__i2b>
 8018b78:	2300      	movs	r3, #0
 8018b7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8018b7e:	4604      	mov	r4, r0
 8018b80:	6003      	str	r3, [r0, #0]
 8018b82:	f04f 0800 	mov.w	r8, #0
 8018b86:	07eb      	lsls	r3, r5, #31
 8018b88:	d50a      	bpl.n	8018ba0 <__pow5mult+0x74>
 8018b8a:	4639      	mov	r1, r7
 8018b8c:	4622      	mov	r2, r4
 8018b8e:	4630      	mov	r0, r6
 8018b90:	f7ff ff36 	bl	8018a00 <__multiply>
 8018b94:	4639      	mov	r1, r7
 8018b96:	4681      	mov	r9, r0
 8018b98:	4630      	mov	r0, r6
 8018b9a:	f7ff fe4a 	bl	8018832 <_Bfree>
 8018b9e:	464f      	mov	r7, r9
 8018ba0:	106d      	asrs	r5, r5, #1
 8018ba2:	d00b      	beq.n	8018bbc <__pow5mult+0x90>
 8018ba4:	6820      	ldr	r0, [r4, #0]
 8018ba6:	b938      	cbnz	r0, 8018bb8 <__pow5mult+0x8c>
 8018ba8:	4622      	mov	r2, r4
 8018baa:	4621      	mov	r1, r4
 8018bac:	4630      	mov	r0, r6
 8018bae:	f7ff ff27 	bl	8018a00 <__multiply>
 8018bb2:	6020      	str	r0, [r4, #0]
 8018bb4:	f8c0 8000 	str.w	r8, [r0]
 8018bb8:	4604      	mov	r4, r0
 8018bba:	e7e4      	b.n	8018b86 <__pow5mult+0x5a>
 8018bbc:	4638      	mov	r0, r7
 8018bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bc2:	bf00      	nop
 8018bc4:	0801a548 	.word	0x0801a548

08018bc8 <__lshift>:
 8018bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018bcc:	460c      	mov	r4, r1
 8018bce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018bd2:	6923      	ldr	r3, [r4, #16]
 8018bd4:	6849      	ldr	r1, [r1, #4]
 8018bd6:	eb0a 0903 	add.w	r9, sl, r3
 8018bda:	68a3      	ldr	r3, [r4, #8]
 8018bdc:	4607      	mov	r7, r0
 8018bde:	4616      	mov	r6, r2
 8018be0:	f109 0501 	add.w	r5, r9, #1
 8018be4:	42ab      	cmp	r3, r5
 8018be6:	db32      	blt.n	8018c4e <__lshift+0x86>
 8018be8:	4638      	mov	r0, r7
 8018bea:	f7ff fdee 	bl	80187ca <_Balloc>
 8018bee:	2300      	movs	r3, #0
 8018bf0:	4680      	mov	r8, r0
 8018bf2:	f100 0114 	add.w	r1, r0, #20
 8018bf6:	461a      	mov	r2, r3
 8018bf8:	4553      	cmp	r3, sl
 8018bfa:	db2b      	blt.n	8018c54 <__lshift+0x8c>
 8018bfc:	6920      	ldr	r0, [r4, #16]
 8018bfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018c02:	f104 0314 	add.w	r3, r4, #20
 8018c06:	f016 021f 	ands.w	r2, r6, #31
 8018c0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018c12:	d025      	beq.n	8018c60 <__lshift+0x98>
 8018c14:	f1c2 0e20 	rsb	lr, r2, #32
 8018c18:	2000      	movs	r0, #0
 8018c1a:	681e      	ldr	r6, [r3, #0]
 8018c1c:	468a      	mov	sl, r1
 8018c1e:	4096      	lsls	r6, r2
 8018c20:	4330      	orrs	r0, r6
 8018c22:	f84a 0b04 	str.w	r0, [sl], #4
 8018c26:	f853 0b04 	ldr.w	r0, [r3], #4
 8018c2a:	459c      	cmp	ip, r3
 8018c2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8018c30:	d814      	bhi.n	8018c5c <__lshift+0x94>
 8018c32:	6048      	str	r0, [r1, #4]
 8018c34:	b108      	cbz	r0, 8018c3a <__lshift+0x72>
 8018c36:	f109 0502 	add.w	r5, r9, #2
 8018c3a:	3d01      	subs	r5, #1
 8018c3c:	4638      	mov	r0, r7
 8018c3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8018c42:	4621      	mov	r1, r4
 8018c44:	f7ff fdf5 	bl	8018832 <_Bfree>
 8018c48:	4640      	mov	r0, r8
 8018c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018c4e:	3101      	adds	r1, #1
 8018c50:	005b      	lsls	r3, r3, #1
 8018c52:	e7c7      	b.n	8018be4 <__lshift+0x1c>
 8018c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018c58:	3301      	adds	r3, #1
 8018c5a:	e7cd      	b.n	8018bf8 <__lshift+0x30>
 8018c5c:	4651      	mov	r1, sl
 8018c5e:	e7dc      	b.n	8018c1a <__lshift+0x52>
 8018c60:	3904      	subs	r1, #4
 8018c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c66:	f841 2f04 	str.w	r2, [r1, #4]!
 8018c6a:	459c      	cmp	ip, r3
 8018c6c:	d8f9      	bhi.n	8018c62 <__lshift+0x9a>
 8018c6e:	e7e4      	b.n	8018c3a <__lshift+0x72>

08018c70 <__mcmp>:
 8018c70:	6903      	ldr	r3, [r0, #16]
 8018c72:	690a      	ldr	r2, [r1, #16]
 8018c74:	1a9b      	subs	r3, r3, r2
 8018c76:	b530      	push	{r4, r5, lr}
 8018c78:	d10c      	bne.n	8018c94 <__mcmp+0x24>
 8018c7a:	0092      	lsls	r2, r2, #2
 8018c7c:	3014      	adds	r0, #20
 8018c7e:	3114      	adds	r1, #20
 8018c80:	1884      	adds	r4, r0, r2
 8018c82:	4411      	add	r1, r2
 8018c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018c8c:	4295      	cmp	r5, r2
 8018c8e:	d003      	beq.n	8018c98 <__mcmp+0x28>
 8018c90:	d305      	bcc.n	8018c9e <__mcmp+0x2e>
 8018c92:	2301      	movs	r3, #1
 8018c94:	4618      	mov	r0, r3
 8018c96:	bd30      	pop	{r4, r5, pc}
 8018c98:	42a0      	cmp	r0, r4
 8018c9a:	d3f3      	bcc.n	8018c84 <__mcmp+0x14>
 8018c9c:	e7fa      	b.n	8018c94 <__mcmp+0x24>
 8018c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018ca2:	e7f7      	b.n	8018c94 <__mcmp+0x24>

08018ca4 <__mdiff>:
 8018ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018ca8:	460d      	mov	r5, r1
 8018caa:	4607      	mov	r7, r0
 8018cac:	4611      	mov	r1, r2
 8018cae:	4628      	mov	r0, r5
 8018cb0:	4614      	mov	r4, r2
 8018cb2:	f7ff ffdd 	bl	8018c70 <__mcmp>
 8018cb6:	1e06      	subs	r6, r0, #0
 8018cb8:	d108      	bne.n	8018ccc <__mdiff+0x28>
 8018cba:	4631      	mov	r1, r6
 8018cbc:	4638      	mov	r0, r7
 8018cbe:	f7ff fd84 	bl	80187ca <_Balloc>
 8018cc2:	2301      	movs	r3, #1
 8018cc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ccc:	bfa4      	itt	ge
 8018cce:	4623      	movge	r3, r4
 8018cd0:	462c      	movge	r4, r5
 8018cd2:	4638      	mov	r0, r7
 8018cd4:	6861      	ldr	r1, [r4, #4]
 8018cd6:	bfa6      	itte	ge
 8018cd8:	461d      	movge	r5, r3
 8018cda:	2600      	movge	r6, #0
 8018cdc:	2601      	movlt	r6, #1
 8018cde:	f7ff fd74 	bl	80187ca <_Balloc>
 8018ce2:	692b      	ldr	r3, [r5, #16]
 8018ce4:	60c6      	str	r6, [r0, #12]
 8018ce6:	6926      	ldr	r6, [r4, #16]
 8018ce8:	f105 0914 	add.w	r9, r5, #20
 8018cec:	f104 0214 	add.w	r2, r4, #20
 8018cf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018cf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018cf8:	f100 0514 	add.w	r5, r0, #20
 8018cfc:	f04f 0e00 	mov.w	lr, #0
 8018d00:	f852 ab04 	ldr.w	sl, [r2], #4
 8018d04:	f859 4b04 	ldr.w	r4, [r9], #4
 8018d08:	fa1e f18a 	uxtah	r1, lr, sl
 8018d0c:	b2a3      	uxth	r3, r4
 8018d0e:	1ac9      	subs	r1, r1, r3
 8018d10:	0c23      	lsrs	r3, r4, #16
 8018d12:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018d16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018d1a:	b289      	uxth	r1, r1
 8018d1c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018d20:	45c8      	cmp	r8, r9
 8018d22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018d26:	4694      	mov	ip, r2
 8018d28:	f845 3b04 	str.w	r3, [r5], #4
 8018d2c:	d8e8      	bhi.n	8018d00 <__mdiff+0x5c>
 8018d2e:	45bc      	cmp	ip, r7
 8018d30:	d304      	bcc.n	8018d3c <__mdiff+0x98>
 8018d32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018d36:	b183      	cbz	r3, 8018d5a <__mdiff+0xb6>
 8018d38:	6106      	str	r6, [r0, #16]
 8018d3a:	e7c5      	b.n	8018cc8 <__mdiff+0x24>
 8018d3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018d40:	fa1e f381 	uxtah	r3, lr, r1
 8018d44:	141a      	asrs	r2, r3, #16
 8018d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018d4a:	b29b      	uxth	r3, r3
 8018d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018d54:	f845 3b04 	str.w	r3, [r5], #4
 8018d58:	e7e9      	b.n	8018d2e <__mdiff+0x8a>
 8018d5a:	3e01      	subs	r6, #1
 8018d5c:	e7e9      	b.n	8018d32 <__mdiff+0x8e>
	...

08018d60 <__ulp>:
 8018d60:	4b12      	ldr	r3, [pc, #72]	; (8018dac <__ulp+0x4c>)
 8018d62:	ee10 2a90 	vmov	r2, s1
 8018d66:	401a      	ands	r2, r3
 8018d68:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	dd04      	ble.n	8018d7a <__ulp+0x1a>
 8018d70:	2000      	movs	r0, #0
 8018d72:	4619      	mov	r1, r3
 8018d74:	ec41 0b10 	vmov	d0, r0, r1
 8018d78:	4770      	bx	lr
 8018d7a:	425b      	negs	r3, r3
 8018d7c:	151b      	asrs	r3, r3, #20
 8018d7e:	2b13      	cmp	r3, #19
 8018d80:	f04f 0000 	mov.w	r0, #0
 8018d84:	f04f 0100 	mov.w	r1, #0
 8018d88:	dc04      	bgt.n	8018d94 <__ulp+0x34>
 8018d8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018d8e:	fa42 f103 	asr.w	r1, r2, r3
 8018d92:	e7ef      	b.n	8018d74 <__ulp+0x14>
 8018d94:	3b14      	subs	r3, #20
 8018d96:	2b1e      	cmp	r3, #30
 8018d98:	f04f 0201 	mov.w	r2, #1
 8018d9c:	bfda      	itte	le
 8018d9e:	f1c3 031f 	rsble	r3, r3, #31
 8018da2:	fa02 f303 	lslle.w	r3, r2, r3
 8018da6:	4613      	movgt	r3, r2
 8018da8:	4618      	mov	r0, r3
 8018daa:	e7e3      	b.n	8018d74 <__ulp+0x14>
 8018dac:	7ff00000 	.word	0x7ff00000

08018db0 <__b2d>:
 8018db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018db2:	6905      	ldr	r5, [r0, #16]
 8018db4:	f100 0714 	add.w	r7, r0, #20
 8018db8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018dbc:	1f2e      	subs	r6, r5, #4
 8018dbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018dc2:	4620      	mov	r0, r4
 8018dc4:	f7ff fdc5 	bl	8018952 <__hi0bits>
 8018dc8:	f1c0 0320 	rsb	r3, r0, #32
 8018dcc:	280a      	cmp	r0, #10
 8018dce:	600b      	str	r3, [r1, #0]
 8018dd0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018e48 <__b2d+0x98>
 8018dd4:	dc14      	bgt.n	8018e00 <__b2d+0x50>
 8018dd6:	f1c0 0e0b 	rsb	lr, r0, #11
 8018dda:	fa24 f10e 	lsr.w	r1, r4, lr
 8018dde:	42b7      	cmp	r7, r6
 8018de0:	ea41 030c 	orr.w	r3, r1, ip
 8018de4:	bf34      	ite	cc
 8018de6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018dea:	2100      	movcs	r1, #0
 8018dec:	3015      	adds	r0, #21
 8018dee:	fa04 f000 	lsl.w	r0, r4, r0
 8018df2:	fa21 f10e 	lsr.w	r1, r1, lr
 8018df6:	ea40 0201 	orr.w	r2, r0, r1
 8018dfa:	ec43 2b10 	vmov	d0, r2, r3
 8018dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018e00:	42b7      	cmp	r7, r6
 8018e02:	bf3a      	itte	cc
 8018e04:	f1a5 0608 	subcc.w	r6, r5, #8
 8018e08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018e0c:	2100      	movcs	r1, #0
 8018e0e:	380b      	subs	r0, #11
 8018e10:	d015      	beq.n	8018e3e <__b2d+0x8e>
 8018e12:	4084      	lsls	r4, r0
 8018e14:	f1c0 0520 	rsb	r5, r0, #32
 8018e18:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018e1c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018e20:	42be      	cmp	r6, r7
 8018e22:	fa21 fc05 	lsr.w	ip, r1, r5
 8018e26:	ea44 030c 	orr.w	r3, r4, ip
 8018e2a:	bf8c      	ite	hi
 8018e2c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018e30:	2400      	movls	r4, #0
 8018e32:	fa01 f000 	lsl.w	r0, r1, r0
 8018e36:	40ec      	lsrs	r4, r5
 8018e38:	ea40 0204 	orr.w	r2, r0, r4
 8018e3c:	e7dd      	b.n	8018dfa <__b2d+0x4a>
 8018e3e:	ea44 030c 	orr.w	r3, r4, ip
 8018e42:	460a      	mov	r2, r1
 8018e44:	e7d9      	b.n	8018dfa <__b2d+0x4a>
 8018e46:	bf00      	nop
 8018e48:	3ff00000 	.word	0x3ff00000

08018e4c <__d2b>:
 8018e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018e50:	460e      	mov	r6, r1
 8018e52:	2101      	movs	r1, #1
 8018e54:	ec59 8b10 	vmov	r8, r9, d0
 8018e58:	4615      	mov	r5, r2
 8018e5a:	f7ff fcb6 	bl	80187ca <_Balloc>
 8018e5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018e62:	4607      	mov	r7, r0
 8018e64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e68:	bb34      	cbnz	r4, 8018eb8 <__d2b+0x6c>
 8018e6a:	9301      	str	r3, [sp, #4]
 8018e6c:	f1b8 0300 	subs.w	r3, r8, #0
 8018e70:	d027      	beq.n	8018ec2 <__d2b+0x76>
 8018e72:	a802      	add	r0, sp, #8
 8018e74:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018e78:	f7ff fd8a 	bl	8018990 <__lo0bits>
 8018e7c:	9900      	ldr	r1, [sp, #0]
 8018e7e:	b1f0      	cbz	r0, 8018ebe <__d2b+0x72>
 8018e80:	9a01      	ldr	r2, [sp, #4]
 8018e82:	f1c0 0320 	rsb	r3, r0, #32
 8018e86:	fa02 f303 	lsl.w	r3, r2, r3
 8018e8a:	430b      	orrs	r3, r1
 8018e8c:	40c2      	lsrs	r2, r0
 8018e8e:	617b      	str	r3, [r7, #20]
 8018e90:	9201      	str	r2, [sp, #4]
 8018e92:	9b01      	ldr	r3, [sp, #4]
 8018e94:	61bb      	str	r3, [r7, #24]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	bf14      	ite	ne
 8018e9a:	2102      	movne	r1, #2
 8018e9c:	2101      	moveq	r1, #1
 8018e9e:	6139      	str	r1, [r7, #16]
 8018ea0:	b1c4      	cbz	r4, 8018ed4 <__d2b+0x88>
 8018ea2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018ea6:	4404      	add	r4, r0
 8018ea8:	6034      	str	r4, [r6, #0]
 8018eaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018eae:	6028      	str	r0, [r5, #0]
 8018eb0:	4638      	mov	r0, r7
 8018eb2:	b003      	add	sp, #12
 8018eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018ebc:	e7d5      	b.n	8018e6a <__d2b+0x1e>
 8018ebe:	6179      	str	r1, [r7, #20]
 8018ec0:	e7e7      	b.n	8018e92 <__d2b+0x46>
 8018ec2:	a801      	add	r0, sp, #4
 8018ec4:	f7ff fd64 	bl	8018990 <__lo0bits>
 8018ec8:	9b01      	ldr	r3, [sp, #4]
 8018eca:	617b      	str	r3, [r7, #20]
 8018ecc:	2101      	movs	r1, #1
 8018ece:	6139      	str	r1, [r7, #16]
 8018ed0:	3020      	adds	r0, #32
 8018ed2:	e7e5      	b.n	8018ea0 <__d2b+0x54>
 8018ed4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018ed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018edc:	6030      	str	r0, [r6, #0]
 8018ede:	6918      	ldr	r0, [r3, #16]
 8018ee0:	f7ff fd37 	bl	8018952 <__hi0bits>
 8018ee4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018ee8:	e7e1      	b.n	8018eae <__d2b+0x62>

08018eea <__ratio>:
 8018eea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eee:	4688      	mov	r8, r1
 8018ef0:	4669      	mov	r1, sp
 8018ef2:	4681      	mov	r9, r0
 8018ef4:	f7ff ff5c 	bl	8018db0 <__b2d>
 8018ef8:	a901      	add	r1, sp, #4
 8018efa:	4640      	mov	r0, r8
 8018efc:	ec57 6b10 	vmov	r6, r7, d0
 8018f00:	f7ff ff56 	bl	8018db0 <__b2d>
 8018f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018f08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018f0c:	eba3 0c02 	sub.w	ip, r3, r2
 8018f10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018f14:	1a9b      	subs	r3, r3, r2
 8018f16:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018f1a:	ec5b ab10 	vmov	sl, fp, d0
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	bfce      	itee	gt
 8018f22:	463a      	movgt	r2, r7
 8018f24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018f28:	465a      	movle	r2, fp
 8018f2a:	4659      	mov	r1, fp
 8018f2c:	463d      	mov	r5, r7
 8018f2e:	bfd4      	ite	le
 8018f30:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018f34:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018f38:	4630      	mov	r0, r6
 8018f3a:	ee10 2a10 	vmov	r2, s0
 8018f3e:	460b      	mov	r3, r1
 8018f40:	4629      	mov	r1, r5
 8018f42:	f7e7 fc9b 	bl	800087c <__aeabi_ddiv>
 8018f46:	ec41 0b10 	vmov	d0, r0, r1
 8018f4a:	b003      	add	sp, #12
 8018f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018f50 <__copybits>:
 8018f50:	3901      	subs	r1, #1
 8018f52:	b510      	push	{r4, lr}
 8018f54:	1149      	asrs	r1, r1, #5
 8018f56:	6914      	ldr	r4, [r2, #16]
 8018f58:	3101      	adds	r1, #1
 8018f5a:	f102 0314 	add.w	r3, r2, #20
 8018f5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018f62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018f66:	42a3      	cmp	r3, r4
 8018f68:	4602      	mov	r2, r0
 8018f6a:	d303      	bcc.n	8018f74 <__copybits+0x24>
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	428a      	cmp	r2, r1
 8018f70:	d305      	bcc.n	8018f7e <__copybits+0x2e>
 8018f72:	bd10      	pop	{r4, pc}
 8018f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8018f78:	f840 2b04 	str.w	r2, [r0], #4
 8018f7c:	e7f3      	b.n	8018f66 <__copybits+0x16>
 8018f7e:	f842 3b04 	str.w	r3, [r2], #4
 8018f82:	e7f4      	b.n	8018f6e <__copybits+0x1e>

08018f84 <__any_on>:
 8018f84:	f100 0214 	add.w	r2, r0, #20
 8018f88:	6900      	ldr	r0, [r0, #16]
 8018f8a:	114b      	asrs	r3, r1, #5
 8018f8c:	4298      	cmp	r0, r3
 8018f8e:	b510      	push	{r4, lr}
 8018f90:	db11      	blt.n	8018fb6 <__any_on+0x32>
 8018f92:	dd0a      	ble.n	8018faa <__any_on+0x26>
 8018f94:	f011 011f 	ands.w	r1, r1, #31
 8018f98:	d007      	beq.n	8018faa <__any_on+0x26>
 8018f9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018f9e:	fa24 f001 	lsr.w	r0, r4, r1
 8018fa2:	fa00 f101 	lsl.w	r1, r0, r1
 8018fa6:	428c      	cmp	r4, r1
 8018fa8:	d10b      	bne.n	8018fc2 <__any_on+0x3e>
 8018faa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	d803      	bhi.n	8018fba <__any_on+0x36>
 8018fb2:	2000      	movs	r0, #0
 8018fb4:	bd10      	pop	{r4, pc}
 8018fb6:	4603      	mov	r3, r0
 8018fb8:	e7f7      	b.n	8018faa <__any_on+0x26>
 8018fba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018fbe:	2900      	cmp	r1, #0
 8018fc0:	d0f5      	beq.n	8018fae <__any_on+0x2a>
 8018fc2:	2001      	movs	r0, #1
 8018fc4:	e7f6      	b.n	8018fb4 <__any_on+0x30>

08018fc6 <_calloc_r>:
 8018fc6:	b538      	push	{r3, r4, r5, lr}
 8018fc8:	fb02 f401 	mul.w	r4, r2, r1
 8018fcc:	4621      	mov	r1, r4
 8018fce:	f000 f857 	bl	8019080 <_malloc_r>
 8018fd2:	4605      	mov	r5, r0
 8018fd4:	b118      	cbz	r0, 8018fde <_calloc_r+0x18>
 8018fd6:	4622      	mov	r2, r4
 8018fd8:	2100      	movs	r1, #0
 8018fda:	f7fc fca1 	bl	8015920 <memset>
 8018fde:	4628      	mov	r0, r5
 8018fe0:	bd38      	pop	{r3, r4, r5, pc}
	...

08018fe4 <_free_r>:
 8018fe4:	b538      	push	{r3, r4, r5, lr}
 8018fe6:	4605      	mov	r5, r0
 8018fe8:	2900      	cmp	r1, #0
 8018fea:	d045      	beq.n	8019078 <_free_r+0x94>
 8018fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018ff0:	1f0c      	subs	r4, r1, #4
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	bfb8      	it	lt
 8018ff6:	18e4      	addlt	r4, r4, r3
 8018ff8:	f000 fe30 	bl	8019c5c <__malloc_lock>
 8018ffc:	4a1f      	ldr	r2, [pc, #124]	; (801907c <_free_r+0x98>)
 8018ffe:	6813      	ldr	r3, [r2, #0]
 8019000:	4610      	mov	r0, r2
 8019002:	b933      	cbnz	r3, 8019012 <_free_r+0x2e>
 8019004:	6063      	str	r3, [r4, #4]
 8019006:	6014      	str	r4, [r2, #0]
 8019008:	4628      	mov	r0, r5
 801900a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801900e:	f000 be26 	b.w	8019c5e <__malloc_unlock>
 8019012:	42a3      	cmp	r3, r4
 8019014:	d90c      	bls.n	8019030 <_free_r+0x4c>
 8019016:	6821      	ldr	r1, [r4, #0]
 8019018:	1862      	adds	r2, r4, r1
 801901a:	4293      	cmp	r3, r2
 801901c:	bf04      	itt	eq
 801901e:	681a      	ldreq	r2, [r3, #0]
 8019020:	685b      	ldreq	r3, [r3, #4]
 8019022:	6063      	str	r3, [r4, #4]
 8019024:	bf04      	itt	eq
 8019026:	1852      	addeq	r2, r2, r1
 8019028:	6022      	streq	r2, [r4, #0]
 801902a:	6004      	str	r4, [r0, #0]
 801902c:	e7ec      	b.n	8019008 <_free_r+0x24>
 801902e:	4613      	mov	r3, r2
 8019030:	685a      	ldr	r2, [r3, #4]
 8019032:	b10a      	cbz	r2, 8019038 <_free_r+0x54>
 8019034:	42a2      	cmp	r2, r4
 8019036:	d9fa      	bls.n	801902e <_free_r+0x4a>
 8019038:	6819      	ldr	r1, [r3, #0]
 801903a:	1858      	adds	r0, r3, r1
 801903c:	42a0      	cmp	r0, r4
 801903e:	d10b      	bne.n	8019058 <_free_r+0x74>
 8019040:	6820      	ldr	r0, [r4, #0]
 8019042:	4401      	add	r1, r0
 8019044:	1858      	adds	r0, r3, r1
 8019046:	4282      	cmp	r2, r0
 8019048:	6019      	str	r1, [r3, #0]
 801904a:	d1dd      	bne.n	8019008 <_free_r+0x24>
 801904c:	6810      	ldr	r0, [r2, #0]
 801904e:	6852      	ldr	r2, [r2, #4]
 8019050:	605a      	str	r2, [r3, #4]
 8019052:	4401      	add	r1, r0
 8019054:	6019      	str	r1, [r3, #0]
 8019056:	e7d7      	b.n	8019008 <_free_r+0x24>
 8019058:	d902      	bls.n	8019060 <_free_r+0x7c>
 801905a:	230c      	movs	r3, #12
 801905c:	602b      	str	r3, [r5, #0]
 801905e:	e7d3      	b.n	8019008 <_free_r+0x24>
 8019060:	6820      	ldr	r0, [r4, #0]
 8019062:	1821      	adds	r1, r4, r0
 8019064:	428a      	cmp	r2, r1
 8019066:	bf04      	itt	eq
 8019068:	6811      	ldreq	r1, [r2, #0]
 801906a:	6852      	ldreq	r2, [r2, #4]
 801906c:	6062      	str	r2, [r4, #4]
 801906e:	bf04      	itt	eq
 8019070:	1809      	addeq	r1, r1, r0
 8019072:	6021      	streq	r1, [r4, #0]
 8019074:	605c      	str	r4, [r3, #4]
 8019076:	e7c7      	b.n	8019008 <_free_r+0x24>
 8019078:	bd38      	pop	{r3, r4, r5, pc}
 801907a:	bf00      	nop
 801907c:	20042480 	.word	0x20042480

08019080 <_malloc_r>:
 8019080:	b570      	push	{r4, r5, r6, lr}
 8019082:	1ccd      	adds	r5, r1, #3
 8019084:	f025 0503 	bic.w	r5, r5, #3
 8019088:	3508      	adds	r5, #8
 801908a:	2d0c      	cmp	r5, #12
 801908c:	bf38      	it	cc
 801908e:	250c      	movcc	r5, #12
 8019090:	2d00      	cmp	r5, #0
 8019092:	4606      	mov	r6, r0
 8019094:	db01      	blt.n	801909a <_malloc_r+0x1a>
 8019096:	42a9      	cmp	r1, r5
 8019098:	d903      	bls.n	80190a2 <_malloc_r+0x22>
 801909a:	230c      	movs	r3, #12
 801909c:	6033      	str	r3, [r6, #0]
 801909e:	2000      	movs	r0, #0
 80190a0:	bd70      	pop	{r4, r5, r6, pc}
 80190a2:	f000 fddb 	bl	8019c5c <__malloc_lock>
 80190a6:	4a21      	ldr	r2, [pc, #132]	; (801912c <_malloc_r+0xac>)
 80190a8:	6814      	ldr	r4, [r2, #0]
 80190aa:	4621      	mov	r1, r4
 80190ac:	b991      	cbnz	r1, 80190d4 <_malloc_r+0x54>
 80190ae:	4c20      	ldr	r4, [pc, #128]	; (8019130 <_malloc_r+0xb0>)
 80190b0:	6823      	ldr	r3, [r4, #0]
 80190b2:	b91b      	cbnz	r3, 80190bc <_malloc_r+0x3c>
 80190b4:	4630      	mov	r0, r6
 80190b6:	f000 fc91 	bl	80199dc <_sbrk_r>
 80190ba:	6020      	str	r0, [r4, #0]
 80190bc:	4629      	mov	r1, r5
 80190be:	4630      	mov	r0, r6
 80190c0:	f000 fc8c 	bl	80199dc <_sbrk_r>
 80190c4:	1c43      	adds	r3, r0, #1
 80190c6:	d124      	bne.n	8019112 <_malloc_r+0x92>
 80190c8:	230c      	movs	r3, #12
 80190ca:	6033      	str	r3, [r6, #0]
 80190cc:	4630      	mov	r0, r6
 80190ce:	f000 fdc6 	bl	8019c5e <__malloc_unlock>
 80190d2:	e7e4      	b.n	801909e <_malloc_r+0x1e>
 80190d4:	680b      	ldr	r3, [r1, #0]
 80190d6:	1b5b      	subs	r3, r3, r5
 80190d8:	d418      	bmi.n	801910c <_malloc_r+0x8c>
 80190da:	2b0b      	cmp	r3, #11
 80190dc:	d90f      	bls.n	80190fe <_malloc_r+0x7e>
 80190de:	600b      	str	r3, [r1, #0]
 80190e0:	50cd      	str	r5, [r1, r3]
 80190e2:	18cc      	adds	r4, r1, r3
 80190e4:	4630      	mov	r0, r6
 80190e6:	f000 fdba 	bl	8019c5e <__malloc_unlock>
 80190ea:	f104 000b 	add.w	r0, r4, #11
 80190ee:	1d23      	adds	r3, r4, #4
 80190f0:	f020 0007 	bic.w	r0, r0, #7
 80190f4:	1ac3      	subs	r3, r0, r3
 80190f6:	d0d3      	beq.n	80190a0 <_malloc_r+0x20>
 80190f8:	425a      	negs	r2, r3
 80190fa:	50e2      	str	r2, [r4, r3]
 80190fc:	e7d0      	b.n	80190a0 <_malloc_r+0x20>
 80190fe:	428c      	cmp	r4, r1
 8019100:	684b      	ldr	r3, [r1, #4]
 8019102:	bf16      	itet	ne
 8019104:	6063      	strne	r3, [r4, #4]
 8019106:	6013      	streq	r3, [r2, #0]
 8019108:	460c      	movne	r4, r1
 801910a:	e7eb      	b.n	80190e4 <_malloc_r+0x64>
 801910c:	460c      	mov	r4, r1
 801910e:	6849      	ldr	r1, [r1, #4]
 8019110:	e7cc      	b.n	80190ac <_malloc_r+0x2c>
 8019112:	1cc4      	adds	r4, r0, #3
 8019114:	f024 0403 	bic.w	r4, r4, #3
 8019118:	42a0      	cmp	r0, r4
 801911a:	d005      	beq.n	8019128 <_malloc_r+0xa8>
 801911c:	1a21      	subs	r1, r4, r0
 801911e:	4630      	mov	r0, r6
 8019120:	f000 fc5c 	bl	80199dc <_sbrk_r>
 8019124:	3001      	adds	r0, #1
 8019126:	d0cf      	beq.n	80190c8 <_malloc_r+0x48>
 8019128:	6025      	str	r5, [r4, #0]
 801912a:	e7db      	b.n	80190e4 <_malloc_r+0x64>
 801912c:	20042480 	.word	0x20042480
 8019130:	20042484 	.word	0x20042484

08019134 <__ssputs_r>:
 8019134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019138:	688e      	ldr	r6, [r1, #8]
 801913a:	429e      	cmp	r6, r3
 801913c:	4682      	mov	sl, r0
 801913e:	460c      	mov	r4, r1
 8019140:	4690      	mov	r8, r2
 8019142:	4699      	mov	r9, r3
 8019144:	d837      	bhi.n	80191b6 <__ssputs_r+0x82>
 8019146:	898a      	ldrh	r2, [r1, #12]
 8019148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801914c:	d031      	beq.n	80191b2 <__ssputs_r+0x7e>
 801914e:	6825      	ldr	r5, [r4, #0]
 8019150:	6909      	ldr	r1, [r1, #16]
 8019152:	1a6f      	subs	r7, r5, r1
 8019154:	6965      	ldr	r5, [r4, #20]
 8019156:	2302      	movs	r3, #2
 8019158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801915c:	fb95 f5f3 	sdiv	r5, r5, r3
 8019160:	f109 0301 	add.w	r3, r9, #1
 8019164:	443b      	add	r3, r7
 8019166:	429d      	cmp	r5, r3
 8019168:	bf38      	it	cc
 801916a:	461d      	movcc	r5, r3
 801916c:	0553      	lsls	r3, r2, #21
 801916e:	d530      	bpl.n	80191d2 <__ssputs_r+0x9e>
 8019170:	4629      	mov	r1, r5
 8019172:	f7ff ff85 	bl	8019080 <_malloc_r>
 8019176:	4606      	mov	r6, r0
 8019178:	b950      	cbnz	r0, 8019190 <__ssputs_r+0x5c>
 801917a:	230c      	movs	r3, #12
 801917c:	f8ca 3000 	str.w	r3, [sl]
 8019180:	89a3      	ldrh	r3, [r4, #12]
 8019182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019186:	81a3      	strh	r3, [r4, #12]
 8019188:	f04f 30ff 	mov.w	r0, #4294967295
 801918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019190:	463a      	mov	r2, r7
 8019192:	6921      	ldr	r1, [r4, #16]
 8019194:	f7ff fb0e 	bl	80187b4 <memcpy>
 8019198:	89a3      	ldrh	r3, [r4, #12]
 801919a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801919e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80191a2:	81a3      	strh	r3, [r4, #12]
 80191a4:	6126      	str	r6, [r4, #16]
 80191a6:	6165      	str	r5, [r4, #20]
 80191a8:	443e      	add	r6, r7
 80191aa:	1bed      	subs	r5, r5, r7
 80191ac:	6026      	str	r6, [r4, #0]
 80191ae:	60a5      	str	r5, [r4, #8]
 80191b0:	464e      	mov	r6, r9
 80191b2:	454e      	cmp	r6, r9
 80191b4:	d900      	bls.n	80191b8 <__ssputs_r+0x84>
 80191b6:	464e      	mov	r6, r9
 80191b8:	4632      	mov	r2, r6
 80191ba:	4641      	mov	r1, r8
 80191bc:	6820      	ldr	r0, [r4, #0]
 80191be:	f000 fd34 	bl	8019c2a <memmove>
 80191c2:	68a3      	ldr	r3, [r4, #8]
 80191c4:	1b9b      	subs	r3, r3, r6
 80191c6:	60a3      	str	r3, [r4, #8]
 80191c8:	6823      	ldr	r3, [r4, #0]
 80191ca:	441e      	add	r6, r3
 80191cc:	6026      	str	r6, [r4, #0]
 80191ce:	2000      	movs	r0, #0
 80191d0:	e7dc      	b.n	801918c <__ssputs_r+0x58>
 80191d2:	462a      	mov	r2, r5
 80191d4:	f000 fd44 	bl	8019c60 <_realloc_r>
 80191d8:	4606      	mov	r6, r0
 80191da:	2800      	cmp	r0, #0
 80191dc:	d1e2      	bne.n	80191a4 <__ssputs_r+0x70>
 80191de:	6921      	ldr	r1, [r4, #16]
 80191e0:	4650      	mov	r0, sl
 80191e2:	f7ff feff 	bl	8018fe4 <_free_r>
 80191e6:	e7c8      	b.n	801917a <__ssputs_r+0x46>

080191e8 <_svfiprintf_r>:
 80191e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191ec:	461d      	mov	r5, r3
 80191ee:	898b      	ldrh	r3, [r1, #12]
 80191f0:	061f      	lsls	r7, r3, #24
 80191f2:	b09d      	sub	sp, #116	; 0x74
 80191f4:	4680      	mov	r8, r0
 80191f6:	460c      	mov	r4, r1
 80191f8:	4616      	mov	r6, r2
 80191fa:	d50f      	bpl.n	801921c <_svfiprintf_r+0x34>
 80191fc:	690b      	ldr	r3, [r1, #16]
 80191fe:	b96b      	cbnz	r3, 801921c <_svfiprintf_r+0x34>
 8019200:	2140      	movs	r1, #64	; 0x40
 8019202:	f7ff ff3d 	bl	8019080 <_malloc_r>
 8019206:	6020      	str	r0, [r4, #0]
 8019208:	6120      	str	r0, [r4, #16]
 801920a:	b928      	cbnz	r0, 8019218 <_svfiprintf_r+0x30>
 801920c:	230c      	movs	r3, #12
 801920e:	f8c8 3000 	str.w	r3, [r8]
 8019212:	f04f 30ff 	mov.w	r0, #4294967295
 8019216:	e0c8      	b.n	80193aa <_svfiprintf_r+0x1c2>
 8019218:	2340      	movs	r3, #64	; 0x40
 801921a:	6163      	str	r3, [r4, #20]
 801921c:	2300      	movs	r3, #0
 801921e:	9309      	str	r3, [sp, #36]	; 0x24
 8019220:	2320      	movs	r3, #32
 8019222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019226:	2330      	movs	r3, #48	; 0x30
 8019228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801922c:	9503      	str	r5, [sp, #12]
 801922e:	f04f 0b01 	mov.w	fp, #1
 8019232:	4637      	mov	r7, r6
 8019234:	463d      	mov	r5, r7
 8019236:	f815 3b01 	ldrb.w	r3, [r5], #1
 801923a:	b10b      	cbz	r3, 8019240 <_svfiprintf_r+0x58>
 801923c:	2b25      	cmp	r3, #37	; 0x25
 801923e:	d13e      	bne.n	80192be <_svfiprintf_r+0xd6>
 8019240:	ebb7 0a06 	subs.w	sl, r7, r6
 8019244:	d00b      	beq.n	801925e <_svfiprintf_r+0x76>
 8019246:	4653      	mov	r3, sl
 8019248:	4632      	mov	r2, r6
 801924a:	4621      	mov	r1, r4
 801924c:	4640      	mov	r0, r8
 801924e:	f7ff ff71 	bl	8019134 <__ssputs_r>
 8019252:	3001      	adds	r0, #1
 8019254:	f000 80a4 	beq.w	80193a0 <_svfiprintf_r+0x1b8>
 8019258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801925a:	4453      	add	r3, sl
 801925c:	9309      	str	r3, [sp, #36]	; 0x24
 801925e:	783b      	ldrb	r3, [r7, #0]
 8019260:	2b00      	cmp	r3, #0
 8019262:	f000 809d 	beq.w	80193a0 <_svfiprintf_r+0x1b8>
 8019266:	2300      	movs	r3, #0
 8019268:	f04f 32ff 	mov.w	r2, #4294967295
 801926c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019270:	9304      	str	r3, [sp, #16]
 8019272:	9307      	str	r3, [sp, #28]
 8019274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019278:	931a      	str	r3, [sp, #104]	; 0x68
 801927a:	462f      	mov	r7, r5
 801927c:	2205      	movs	r2, #5
 801927e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019282:	4850      	ldr	r0, [pc, #320]	; (80193c4 <_svfiprintf_r+0x1dc>)
 8019284:	f7e6 ffc4 	bl	8000210 <memchr>
 8019288:	9b04      	ldr	r3, [sp, #16]
 801928a:	b9d0      	cbnz	r0, 80192c2 <_svfiprintf_r+0xda>
 801928c:	06d9      	lsls	r1, r3, #27
 801928e:	bf44      	itt	mi
 8019290:	2220      	movmi	r2, #32
 8019292:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019296:	071a      	lsls	r2, r3, #28
 8019298:	bf44      	itt	mi
 801929a:	222b      	movmi	r2, #43	; 0x2b
 801929c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80192a0:	782a      	ldrb	r2, [r5, #0]
 80192a2:	2a2a      	cmp	r2, #42	; 0x2a
 80192a4:	d015      	beq.n	80192d2 <_svfiprintf_r+0xea>
 80192a6:	9a07      	ldr	r2, [sp, #28]
 80192a8:	462f      	mov	r7, r5
 80192aa:	2000      	movs	r0, #0
 80192ac:	250a      	movs	r5, #10
 80192ae:	4639      	mov	r1, r7
 80192b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80192b4:	3b30      	subs	r3, #48	; 0x30
 80192b6:	2b09      	cmp	r3, #9
 80192b8:	d94d      	bls.n	8019356 <_svfiprintf_r+0x16e>
 80192ba:	b1b8      	cbz	r0, 80192ec <_svfiprintf_r+0x104>
 80192bc:	e00f      	b.n	80192de <_svfiprintf_r+0xf6>
 80192be:	462f      	mov	r7, r5
 80192c0:	e7b8      	b.n	8019234 <_svfiprintf_r+0x4c>
 80192c2:	4a40      	ldr	r2, [pc, #256]	; (80193c4 <_svfiprintf_r+0x1dc>)
 80192c4:	1a80      	subs	r0, r0, r2
 80192c6:	fa0b f000 	lsl.w	r0, fp, r0
 80192ca:	4318      	orrs	r0, r3
 80192cc:	9004      	str	r0, [sp, #16]
 80192ce:	463d      	mov	r5, r7
 80192d0:	e7d3      	b.n	801927a <_svfiprintf_r+0x92>
 80192d2:	9a03      	ldr	r2, [sp, #12]
 80192d4:	1d11      	adds	r1, r2, #4
 80192d6:	6812      	ldr	r2, [r2, #0]
 80192d8:	9103      	str	r1, [sp, #12]
 80192da:	2a00      	cmp	r2, #0
 80192dc:	db01      	blt.n	80192e2 <_svfiprintf_r+0xfa>
 80192de:	9207      	str	r2, [sp, #28]
 80192e0:	e004      	b.n	80192ec <_svfiprintf_r+0x104>
 80192e2:	4252      	negs	r2, r2
 80192e4:	f043 0302 	orr.w	r3, r3, #2
 80192e8:	9207      	str	r2, [sp, #28]
 80192ea:	9304      	str	r3, [sp, #16]
 80192ec:	783b      	ldrb	r3, [r7, #0]
 80192ee:	2b2e      	cmp	r3, #46	; 0x2e
 80192f0:	d10c      	bne.n	801930c <_svfiprintf_r+0x124>
 80192f2:	787b      	ldrb	r3, [r7, #1]
 80192f4:	2b2a      	cmp	r3, #42	; 0x2a
 80192f6:	d133      	bne.n	8019360 <_svfiprintf_r+0x178>
 80192f8:	9b03      	ldr	r3, [sp, #12]
 80192fa:	1d1a      	adds	r2, r3, #4
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	9203      	str	r2, [sp, #12]
 8019300:	2b00      	cmp	r3, #0
 8019302:	bfb8      	it	lt
 8019304:	f04f 33ff 	movlt.w	r3, #4294967295
 8019308:	3702      	adds	r7, #2
 801930a:	9305      	str	r3, [sp, #20]
 801930c:	4d2e      	ldr	r5, [pc, #184]	; (80193c8 <_svfiprintf_r+0x1e0>)
 801930e:	7839      	ldrb	r1, [r7, #0]
 8019310:	2203      	movs	r2, #3
 8019312:	4628      	mov	r0, r5
 8019314:	f7e6 ff7c 	bl	8000210 <memchr>
 8019318:	b138      	cbz	r0, 801932a <_svfiprintf_r+0x142>
 801931a:	2340      	movs	r3, #64	; 0x40
 801931c:	1b40      	subs	r0, r0, r5
 801931e:	fa03 f000 	lsl.w	r0, r3, r0
 8019322:	9b04      	ldr	r3, [sp, #16]
 8019324:	4303      	orrs	r3, r0
 8019326:	3701      	adds	r7, #1
 8019328:	9304      	str	r3, [sp, #16]
 801932a:	7839      	ldrb	r1, [r7, #0]
 801932c:	4827      	ldr	r0, [pc, #156]	; (80193cc <_svfiprintf_r+0x1e4>)
 801932e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019332:	2206      	movs	r2, #6
 8019334:	1c7e      	adds	r6, r7, #1
 8019336:	f7e6 ff6b 	bl	8000210 <memchr>
 801933a:	2800      	cmp	r0, #0
 801933c:	d038      	beq.n	80193b0 <_svfiprintf_r+0x1c8>
 801933e:	4b24      	ldr	r3, [pc, #144]	; (80193d0 <_svfiprintf_r+0x1e8>)
 8019340:	bb13      	cbnz	r3, 8019388 <_svfiprintf_r+0x1a0>
 8019342:	9b03      	ldr	r3, [sp, #12]
 8019344:	3307      	adds	r3, #7
 8019346:	f023 0307 	bic.w	r3, r3, #7
 801934a:	3308      	adds	r3, #8
 801934c:	9303      	str	r3, [sp, #12]
 801934e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019350:	444b      	add	r3, r9
 8019352:	9309      	str	r3, [sp, #36]	; 0x24
 8019354:	e76d      	b.n	8019232 <_svfiprintf_r+0x4a>
 8019356:	fb05 3202 	mla	r2, r5, r2, r3
 801935a:	2001      	movs	r0, #1
 801935c:	460f      	mov	r7, r1
 801935e:	e7a6      	b.n	80192ae <_svfiprintf_r+0xc6>
 8019360:	2300      	movs	r3, #0
 8019362:	3701      	adds	r7, #1
 8019364:	9305      	str	r3, [sp, #20]
 8019366:	4619      	mov	r1, r3
 8019368:	250a      	movs	r5, #10
 801936a:	4638      	mov	r0, r7
 801936c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019370:	3a30      	subs	r2, #48	; 0x30
 8019372:	2a09      	cmp	r2, #9
 8019374:	d903      	bls.n	801937e <_svfiprintf_r+0x196>
 8019376:	2b00      	cmp	r3, #0
 8019378:	d0c8      	beq.n	801930c <_svfiprintf_r+0x124>
 801937a:	9105      	str	r1, [sp, #20]
 801937c:	e7c6      	b.n	801930c <_svfiprintf_r+0x124>
 801937e:	fb05 2101 	mla	r1, r5, r1, r2
 8019382:	2301      	movs	r3, #1
 8019384:	4607      	mov	r7, r0
 8019386:	e7f0      	b.n	801936a <_svfiprintf_r+0x182>
 8019388:	ab03      	add	r3, sp, #12
 801938a:	9300      	str	r3, [sp, #0]
 801938c:	4622      	mov	r2, r4
 801938e:	4b11      	ldr	r3, [pc, #68]	; (80193d4 <_svfiprintf_r+0x1ec>)
 8019390:	a904      	add	r1, sp, #16
 8019392:	4640      	mov	r0, r8
 8019394:	f7fc fb60 	bl	8015a58 <_printf_float>
 8019398:	f1b0 3fff 	cmp.w	r0, #4294967295
 801939c:	4681      	mov	r9, r0
 801939e:	d1d6      	bne.n	801934e <_svfiprintf_r+0x166>
 80193a0:	89a3      	ldrh	r3, [r4, #12]
 80193a2:	065b      	lsls	r3, r3, #25
 80193a4:	f53f af35 	bmi.w	8019212 <_svfiprintf_r+0x2a>
 80193a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80193aa:	b01d      	add	sp, #116	; 0x74
 80193ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193b0:	ab03      	add	r3, sp, #12
 80193b2:	9300      	str	r3, [sp, #0]
 80193b4:	4622      	mov	r2, r4
 80193b6:	4b07      	ldr	r3, [pc, #28]	; (80193d4 <_svfiprintf_r+0x1ec>)
 80193b8:	a904      	add	r1, sp, #16
 80193ba:	4640      	mov	r0, r8
 80193bc:	f7fc fe02 	bl	8015fc4 <_printf_i>
 80193c0:	e7ea      	b.n	8019398 <_svfiprintf_r+0x1b0>
 80193c2:	bf00      	nop
 80193c4:	0801a554 	.word	0x0801a554
 80193c8:	0801a55a 	.word	0x0801a55a
 80193cc:	0801a55e 	.word	0x0801a55e
 80193d0:	08015a59 	.word	0x08015a59
 80193d4:	08019135 	.word	0x08019135

080193d8 <_sungetc_r>:
 80193d8:	b538      	push	{r3, r4, r5, lr}
 80193da:	1c4b      	adds	r3, r1, #1
 80193dc:	4614      	mov	r4, r2
 80193de:	d103      	bne.n	80193e8 <_sungetc_r+0x10>
 80193e0:	f04f 35ff 	mov.w	r5, #4294967295
 80193e4:	4628      	mov	r0, r5
 80193e6:	bd38      	pop	{r3, r4, r5, pc}
 80193e8:	8993      	ldrh	r3, [r2, #12]
 80193ea:	f023 0320 	bic.w	r3, r3, #32
 80193ee:	8193      	strh	r3, [r2, #12]
 80193f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80193f2:	6852      	ldr	r2, [r2, #4]
 80193f4:	b2cd      	uxtb	r5, r1
 80193f6:	b18b      	cbz	r3, 801941c <_sungetc_r+0x44>
 80193f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80193fa:	4293      	cmp	r3, r2
 80193fc:	dd08      	ble.n	8019410 <_sungetc_r+0x38>
 80193fe:	6823      	ldr	r3, [r4, #0]
 8019400:	1e5a      	subs	r2, r3, #1
 8019402:	6022      	str	r2, [r4, #0]
 8019404:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019408:	6863      	ldr	r3, [r4, #4]
 801940a:	3301      	adds	r3, #1
 801940c:	6063      	str	r3, [r4, #4]
 801940e:	e7e9      	b.n	80193e4 <_sungetc_r+0xc>
 8019410:	4621      	mov	r1, r4
 8019412:	f000 fbc3 	bl	8019b9c <__submore>
 8019416:	2800      	cmp	r0, #0
 8019418:	d0f1      	beq.n	80193fe <_sungetc_r+0x26>
 801941a:	e7e1      	b.n	80193e0 <_sungetc_r+0x8>
 801941c:	6921      	ldr	r1, [r4, #16]
 801941e:	6823      	ldr	r3, [r4, #0]
 8019420:	b151      	cbz	r1, 8019438 <_sungetc_r+0x60>
 8019422:	4299      	cmp	r1, r3
 8019424:	d208      	bcs.n	8019438 <_sungetc_r+0x60>
 8019426:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801942a:	42a9      	cmp	r1, r5
 801942c:	d104      	bne.n	8019438 <_sungetc_r+0x60>
 801942e:	3b01      	subs	r3, #1
 8019430:	3201      	adds	r2, #1
 8019432:	6023      	str	r3, [r4, #0]
 8019434:	6062      	str	r2, [r4, #4]
 8019436:	e7d5      	b.n	80193e4 <_sungetc_r+0xc>
 8019438:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801943c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019440:	6363      	str	r3, [r4, #52]	; 0x34
 8019442:	2303      	movs	r3, #3
 8019444:	63a3      	str	r3, [r4, #56]	; 0x38
 8019446:	4623      	mov	r3, r4
 8019448:	f803 5f46 	strb.w	r5, [r3, #70]!
 801944c:	6023      	str	r3, [r4, #0]
 801944e:	2301      	movs	r3, #1
 8019450:	e7dc      	b.n	801940c <_sungetc_r+0x34>

08019452 <__ssrefill_r>:
 8019452:	b510      	push	{r4, lr}
 8019454:	460c      	mov	r4, r1
 8019456:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019458:	b169      	cbz	r1, 8019476 <__ssrefill_r+0x24>
 801945a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801945e:	4299      	cmp	r1, r3
 8019460:	d001      	beq.n	8019466 <__ssrefill_r+0x14>
 8019462:	f7ff fdbf 	bl	8018fe4 <_free_r>
 8019466:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019468:	6063      	str	r3, [r4, #4]
 801946a:	2000      	movs	r0, #0
 801946c:	6360      	str	r0, [r4, #52]	; 0x34
 801946e:	b113      	cbz	r3, 8019476 <__ssrefill_r+0x24>
 8019470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019472:	6023      	str	r3, [r4, #0]
 8019474:	bd10      	pop	{r4, pc}
 8019476:	6923      	ldr	r3, [r4, #16]
 8019478:	6023      	str	r3, [r4, #0]
 801947a:	2300      	movs	r3, #0
 801947c:	6063      	str	r3, [r4, #4]
 801947e:	89a3      	ldrh	r3, [r4, #12]
 8019480:	f043 0320 	orr.w	r3, r3, #32
 8019484:	81a3      	strh	r3, [r4, #12]
 8019486:	f04f 30ff 	mov.w	r0, #4294967295
 801948a:	e7f3      	b.n	8019474 <__ssrefill_r+0x22>

0801948c <__ssvfiscanf_r>:
 801948c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019490:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8019494:	460c      	mov	r4, r1
 8019496:	2100      	movs	r1, #0
 8019498:	9144      	str	r1, [sp, #272]	; 0x110
 801949a:	9145      	str	r1, [sp, #276]	; 0x114
 801949c:	499f      	ldr	r1, [pc, #636]	; (801971c <__ssvfiscanf_r+0x290>)
 801949e:	91a0      	str	r1, [sp, #640]	; 0x280
 80194a0:	f10d 0804 	add.w	r8, sp, #4
 80194a4:	499e      	ldr	r1, [pc, #632]	; (8019720 <__ssvfiscanf_r+0x294>)
 80194a6:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019724 <__ssvfiscanf_r+0x298>
 80194aa:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80194ae:	4606      	mov	r6, r0
 80194b0:	4692      	mov	sl, r2
 80194b2:	91a1      	str	r1, [sp, #644]	; 0x284
 80194b4:	9300      	str	r3, [sp, #0]
 80194b6:	270a      	movs	r7, #10
 80194b8:	f89a 3000 	ldrb.w	r3, [sl]
 80194bc:	2b00      	cmp	r3, #0
 80194be:	f000 812a 	beq.w	8019716 <__ssvfiscanf_r+0x28a>
 80194c2:	4655      	mov	r5, sl
 80194c4:	f7ff f93e 	bl	8018744 <__locale_ctype_ptr>
 80194c8:	f815 bb01 	ldrb.w	fp, [r5], #1
 80194cc:	4458      	add	r0, fp
 80194ce:	7843      	ldrb	r3, [r0, #1]
 80194d0:	f013 0308 	ands.w	r3, r3, #8
 80194d4:	d01c      	beq.n	8019510 <__ssvfiscanf_r+0x84>
 80194d6:	6863      	ldr	r3, [r4, #4]
 80194d8:	2b00      	cmp	r3, #0
 80194da:	dd12      	ble.n	8019502 <__ssvfiscanf_r+0x76>
 80194dc:	f7ff f932 	bl	8018744 <__locale_ctype_ptr>
 80194e0:	6823      	ldr	r3, [r4, #0]
 80194e2:	781a      	ldrb	r2, [r3, #0]
 80194e4:	4410      	add	r0, r2
 80194e6:	7842      	ldrb	r2, [r0, #1]
 80194e8:	0712      	lsls	r2, r2, #28
 80194ea:	d401      	bmi.n	80194f0 <__ssvfiscanf_r+0x64>
 80194ec:	46aa      	mov	sl, r5
 80194ee:	e7e3      	b.n	80194b8 <__ssvfiscanf_r+0x2c>
 80194f0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80194f2:	3201      	adds	r2, #1
 80194f4:	9245      	str	r2, [sp, #276]	; 0x114
 80194f6:	6862      	ldr	r2, [r4, #4]
 80194f8:	3301      	adds	r3, #1
 80194fa:	3a01      	subs	r2, #1
 80194fc:	6062      	str	r2, [r4, #4]
 80194fe:	6023      	str	r3, [r4, #0]
 8019500:	e7e9      	b.n	80194d6 <__ssvfiscanf_r+0x4a>
 8019502:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019504:	4621      	mov	r1, r4
 8019506:	4630      	mov	r0, r6
 8019508:	4798      	blx	r3
 801950a:	2800      	cmp	r0, #0
 801950c:	d0e6      	beq.n	80194dc <__ssvfiscanf_r+0x50>
 801950e:	e7ed      	b.n	80194ec <__ssvfiscanf_r+0x60>
 8019510:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8019514:	f040 8082 	bne.w	801961c <__ssvfiscanf_r+0x190>
 8019518:	9343      	str	r3, [sp, #268]	; 0x10c
 801951a:	9341      	str	r3, [sp, #260]	; 0x104
 801951c:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8019520:	2b2a      	cmp	r3, #42	; 0x2a
 8019522:	d103      	bne.n	801952c <__ssvfiscanf_r+0xa0>
 8019524:	2310      	movs	r3, #16
 8019526:	9341      	str	r3, [sp, #260]	; 0x104
 8019528:	f10a 0502 	add.w	r5, sl, #2
 801952c:	46aa      	mov	sl, r5
 801952e:	f815 1b01 	ldrb.w	r1, [r5], #1
 8019532:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019536:	2a09      	cmp	r2, #9
 8019538:	d922      	bls.n	8019580 <__ssvfiscanf_r+0xf4>
 801953a:	2203      	movs	r2, #3
 801953c:	4879      	ldr	r0, [pc, #484]	; (8019724 <__ssvfiscanf_r+0x298>)
 801953e:	f7e6 fe67 	bl	8000210 <memchr>
 8019542:	b138      	cbz	r0, 8019554 <__ssvfiscanf_r+0xc8>
 8019544:	eba0 0309 	sub.w	r3, r0, r9
 8019548:	2001      	movs	r0, #1
 801954a:	4098      	lsls	r0, r3
 801954c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801954e:	4318      	orrs	r0, r3
 8019550:	9041      	str	r0, [sp, #260]	; 0x104
 8019552:	46aa      	mov	sl, r5
 8019554:	f89a 3000 	ldrb.w	r3, [sl]
 8019558:	2b67      	cmp	r3, #103	; 0x67
 801955a:	f10a 0501 	add.w	r5, sl, #1
 801955e:	d82b      	bhi.n	80195b8 <__ssvfiscanf_r+0x12c>
 8019560:	2b65      	cmp	r3, #101	; 0x65
 8019562:	f080 809f 	bcs.w	80196a4 <__ssvfiscanf_r+0x218>
 8019566:	2b47      	cmp	r3, #71	; 0x47
 8019568:	d810      	bhi.n	801958c <__ssvfiscanf_r+0x100>
 801956a:	2b45      	cmp	r3, #69	; 0x45
 801956c:	f080 809a 	bcs.w	80196a4 <__ssvfiscanf_r+0x218>
 8019570:	2b00      	cmp	r3, #0
 8019572:	d06c      	beq.n	801964e <__ssvfiscanf_r+0x1c2>
 8019574:	2b25      	cmp	r3, #37	; 0x25
 8019576:	d051      	beq.n	801961c <__ssvfiscanf_r+0x190>
 8019578:	2303      	movs	r3, #3
 801957a:	9347      	str	r3, [sp, #284]	; 0x11c
 801957c:	9742      	str	r7, [sp, #264]	; 0x108
 801957e:	e027      	b.n	80195d0 <__ssvfiscanf_r+0x144>
 8019580:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8019582:	fb07 1303 	mla	r3, r7, r3, r1
 8019586:	3b30      	subs	r3, #48	; 0x30
 8019588:	9343      	str	r3, [sp, #268]	; 0x10c
 801958a:	e7cf      	b.n	801952c <__ssvfiscanf_r+0xa0>
 801958c:	2b5b      	cmp	r3, #91	; 0x5b
 801958e:	d06a      	beq.n	8019666 <__ssvfiscanf_r+0x1da>
 8019590:	d80c      	bhi.n	80195ac <__ssvfiscanf_r+0x120>
 8019592:	2b58      	cmp	r3, #88	; 0x58
 8019594:	d1f0      	bne.n	8019578 <__ssvfiscanf_r+0xec>
 8019596:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801959c:	9241      	str	r2, [sp, #260]	; 0x104
 801959e:	2210      	movs	r2, #16
 80195a0:	9242      	str	r2, [sp, #264]	; 0x108
 80195a2:	2b6e      	cmp	r3, #110	; 0x6e
 80195a4:	bf8c      	ite	hi
 80195a6:	2304      	movhi	r3, #4
 80195a8:	2303      	movls	r3, #3
 80195aa:	e010      	b.n	80195ce <__ssvfiscanf_r+0x142>
 80195ac:	2b63      	cmp	r3, #99	; 0x63
 80195ae:	d065      	beq.n	801967c <__ssvfiscanf_r+0x1f0>
 80195b0:	2b64      	cmp	r3, #100	; 0x64
 80195b2:	d1e1      	bne.n	8019578 <__ssvfiscanf_r+0xec>
 80195b4:	9742      	str	r7, [sp, #264]	; 0x108
 80195b6:	e7f4      	b.n	80195a2 <__ssvfiscanf_r+0x116>
 80195b8:	2b70      	cmp	r3, #112	; 0x70
 80195ba:	d04b      	beq.n	8019654 <__ssvfiscanf_r+0x1c8>
 80195bc:	d826      	bhi.n	801960c <__ssvfiscanf_r+0x180>
 80195be:	2b6e      	cmp	r3, #110	; 0x6e
 80195c0:	d062      	beq.n	8019688 <__ssvfiscanf_r+0x1fc>
 80195c2:	d84c      	bhi.n	801965e <__ssvfiscanf_r+0x1d2>
 80195c4:	2b69      	cmp	r3, #105	; 0x69
 80195c6:	d1d7      	bne.n	8019578 <__ssvfiscanf_r+0xec>
 80195c8:	2300      	movs	r3, #0
 80195ca:	9342      	str	r3, [sp, #264]	; 0x108
 80195cc:	2303      	movs	r3, #3
 80195ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80195d0:	6863      	ldr	r3, [r4, #4]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	dd68      	ble.n	80196a8 <__ssvfiscanf_r+0x21c>
 80195d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80195d8:	0659      	lsls	r1, r3, #25
 80195da:	d407      	bmi.n	80195ec <__ssvfiscanf_r+0x160>
 80195dc:	f7ff f8b2 	bl	8018744 <__locale_ctype_ptr>
 80195e0:	6823      	ldr	r3, [r4, #0]
 80195e2:	781a      	ldrb	r2, [r3, #0]
 80195e4:	4410      	add	r0, r2
 80195e6:	7842      	ldrb	r2, [r0, #1]
 80195e8:	0712      	lsls	r2, r2, #28
 80195ea:	d464      	bmi.n	80196b6 <__ssvfiscanf_r+0x22a>
 80195ec:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80195ee:	2b02      	cmp	r3, #2
 80195f0:	dc73      	bgt.n	80196da <__ssvfiscanf_r+0x24e>
 80195f2:	466b      	mov	r3, sp
 80195f4:	4622      	mov	r2, r4
 80195f6:	a941      	add	r1, sp, #260	; 0x104
 80195f8:	4630      	mov	r0, r6
 80195fa:	f000 f897 	bl	801972c <_scanf_chars>
 80195fe:	2801      	cmp	r0, #1
 8019600:	f000 8089 	beq.w	8019716 <__ssvfiscanf_r+0x28a>
 8019604:	2802      	cmp	r0, #2
 8019606:	f47f af71 	bne.w	80194ec <__ssvfiscanf_r+0x60>
 801960a:	e01d      	b.n	8019648 <__ssvfiscanf_r+0x1bc>
 801960c:	2b75      	cmp	r3, #117	; 0x75
 801960e:	d0d1      	beq.n	80195b4 <__ssvfiscanf_r+0x128>
 8019610:	2b78      	cmp	r3, #120	; 0x78
 8019612:	d0c0      	beq.n	8019596 <__ssvfiscanf_r+0x10a>
 8019614:	2b73      	cmp	r3, #115	; 0x73
 8019616:	d1af      	bne.n	8019578 <__ssvfiscanf_r+0xec>
 8019618:	2302      	movs	r3, #2
 801961a:	e7d8      	b.n	80195ce <__ssvfiscanf_r+0x142>
 801961c:	6863      	ldr	r3, [r4, #4]
 801961e:	2b00      	cmp	r3, #0
 8019620:	dd0c      	ble.n	801963c <__ssvfiscanf_r+0x1b0>
 8019622:	6823      	ldr	r3, [r4, #0]
 8019624:	781a      	ldrb	r2, [r3, #0]
 8019626:	455a      	cmp	r2, fp
 8019628:	d175      	bne.n	8019716 <__ssvfiscanf_r+0x28a>
 801962a:	3301      	adds	r3, #1
 801962c:	6862      	ldr	r2, [r4, #4]
 801962e:	6023      	str	r3, [r4, #0]
 8019630:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8019632:	3a01      	subs	r2, #1
 8019634:	3301      	adds	r3, #1
 8019636:	6062      	str	r2, [r4, #4]
 8019638:	9345      	str	r3, [sp, #276]	; 0x114
 801963a:	e757      	b.n	80194ec <__ssvfiscanf_r+0x60>
 801963c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801963e:	4621      	mov	r1, r4
 8019640:	4630      	mov	r0, r6
 8019642:	4798      	blx	r3
 8019644:	2800      	cmp	r0, #0
 8019646:	d0ec      	beq.n	8019622 <__ssvfiscanf_r+0x196>
 8019648:	9844      	ldr	r0, [sp, #272]	; 0x110
 801964a:	2800      	cmp	r0, #0
 801964c:	d159      	bne.n	8019702 <__ssvfiscanf_r+0x276>
 801964e:	f04f 30ff 	mov.w	r0, #4294967295
 8019652:	e05c      	b.n	801970e <__ssvfiscanf_r+0x282>
 8019654:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019656:	f042 0220 	orr.w	r2, r2, #32
 801965a:	9241      	str	r2, [sp, #260]	; 0x104
 801965c:	e79b      	b.n	8019596 <__ssvfiscanf_r+0x10a>
 801965e:	2308      	movs	r3, #8
 8019660:	9342      	str	r3, [sp, #264]	; 0x108
 8019662:	2304      	movs	r3, #4
 8019664:	e7b3      	b.n	80195ce <__ssvfiscanf_r+0x142>
 8019666:	4629      	mov	r1, r5
 8019668:	4640      	mov	r0, r8
 801966a:	f000 f9c7 	bl	80199fc <__sccl>
 801966e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019674:	9341      	str	r3, [sp, #260]	; 0x104
 8019676:	4605      	mov	r5, r0
 8019678:	2301      	movs	r3, #1
 801967a:	e7a8      	b.n	80195ce <__ssvfiscanf_r+0x142>
 801967c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801967e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019682:	9341      	str	r3, [sp, #260]	; 0x104
 8019684:	2300      	movs	r3, #0
 8019686:	e7a2      	b.n	80195ce <__ssvfiscanf_r+0x142>
 8019688:	9841      	ldr	r0, [sp, #260]	; 0x104
 801968a:	06c3      	lsls	r3, r0, #27
 801968c:	f53f af2e 	bmi.w	80194ec <__ssvfiscanf_r+0x60>
 8019690:	9b00      	ldr	r3, [sp, #0]
 8019692:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019694:	1d19      	adds	r1, r3, #4
 8019696:	9100      	str	r1, [sp, #0]
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	07c0      	lsls	r0, r0, #31
 801969c:	bf4c      	ite	mi
 801969e:	801a      	strhmi	r2, [r3, #0]
 80196a0:	601a      	strpl	r2, [r3, #0]
 80196a2:	e723      	b.n	80194ec <__ssvfiscanf_r+0x60>
 80196a4:	2305      	movs	r3, #5
 80196a6:	e792      	b.n	80195ce <__ssvfiscanf_r+0x142>
 80196a8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196aa:	4621      	mov	r1, r4
 80196ac:	4630      	mov	r0, r6
 80196ae:	4798      	blx	r3
 80196b0:	2800      	cmp	r0, #0
 80196b2:	d090      	beq.n	80195d6 <__ssvfiscanf_r+0x14a>
 80196b4:	e7c8      	b.n	8019648 <__ssvfiscanf_r+0x1bc>
 80196b6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80196b8:	3201      	adds	r2, #1
 80196ba:	9245      	str	r2, [sp, #276]	; 0x114
 80196bc:	6862      	ldr	r2, [r4, #4]
 80196be:	3a01      	subs	r2, #1
 80196c0:	2a00      	cmp	r2, #0
 80196c2:	6062      	str	r2, [r4, #4]
 80196c4:	dd02      	ble.n	80196cc <__ssvfiscanf_r+0x240>
 80196c6:	3301      	adds	r3, #1
 80196c8:	6023      	str	r3, [r4, #0]
 80196ca:	e787      	b.n	80195dc <__ssvfiscanf_r+0x150>
 80196cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80196ce:	4621      	mov	r1, r4
 80196d0:	4630      	mov	r0, r6
 80196d2:	4798      	blx	r3
 80196d4:	2800      	cmp	r0, #0
 80196d6:	d081      	beq.n	80195dc <__ssvfiscanf_r+0x150>
 80196d8:	e7b6      	b.n	8019648 <__ssvfiscanf_r+0x1bc>
 80196da:	2b04      	cmp	r3, #4
 80196dc:	dc06      	bgt.n	80196ec <__ssvfiscanf_r+0x260>
 80196de:	466b      	mov	r3, sp
 80196e0:	4622      	mov	r2, r4
 80196e2:	a941      	add	r1, sp, #260	; 0x104
 80196e4:	4630      	mov	r0, r6
 80196e6:	f000 f885 	bl	80197f4 <_scanf_i>
 80196ea:	e788      	b.n	80195fe <__ssvfiscanf_r+0x172>
 80196ec:	4b0e      	ldr	r3, [pc, #56]	; (8019728 <__ssvfiscanf_r+0x29c>)
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	f43f aefc 	beq.w	80194ec <__ssvfiscanf_r+0x60>
 80196f4:	466b      	mov	r3, sp
 80196f6:	4622      	mov	r2, r4
 80196f8:	a941      	add	r1, sp, #260	; 0x104
 80196fa:	4630      	mov	r0, r6
 80196fc:	f7fc fd74 	bl	80161e8 <_scanf_float>
 8019700:	e77d      	b.n	80195fe <__ssvfiscanf_r+0x172>
 8019702:	89a3      	ldrh	r3, [r4, #12]
 8019704:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019708:	bf18      	it	ne
 801970a:	f04f 30ff 	movne.w	r0, #4294967295
 801970e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019716:	9844      	ldr	r0, [sp, #272]	; 0x110
 8019718:	e7f9      	b.n	801970e <__ssvfiscanf_r+0x282>
 801971a:	bf00      	nop
 801971c:	080193d9 	.word	0x080193d9
 8019720:	08019453 	.word	0x08019453
 8019724:	0801a55a 	.word	0x0801a55a
 8019728:	080161e9 	.word	0x080161e9

0801972c <_scanf_chars>:
 801972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019730:	4615      	mov	r5, r2
 8019732:	688a      	ldr	r2, [r1, #8]
 8019734:	4680      	mov	r8, r0
 8019736:	460c      	mov	r4, r1
 8019738:	b932      	cbnz	r2, 8019748 <_scanf_chars+0x1c>
 801973a:	698a      	ldr	r2, [r1, #24]
 801973c:	2a00      	cmp	r2, #0
 801973e:	bf14      	ite	ne
 8019740:	f04f 32ff 	movne.w	r2, #4294967295
 8019744:	2201      	moveq	r2, #1
 8019746:	608a      	str	r2, [r1, #8]
 8019748:	6822      	ldr	r2, [r4, #0]
 801974a:	06d1      	lsls	r1, r2, #27
 801974c:	bf5f      	itttt	pl
 801974e:	681a      	ldrpl	r2, [r3, #0]
 8019750:	1d11      	addpl	r1, r2, #4
 8019752:	6019      	strpl	r1, [r3, #0]
 8019754:	6817      	ldrpl	r7, [r2, #0]
 8019756:	2600      	movs	r6, #0
 8019758:	69a3      	ldr	r3, [r4, #24]
 801975a:	b1db      	cbz	r3, 8019794 <_scanf_chars+0x68>
 801975c:	2b01      	cmp	r3, #1
 801975e:	d107      	bne.n	8019770 <_scanf_chars+0x44>
 8019760:	682b      	ldr	r3, [r5, #0]
 8019762:	6962      	ldr	r2, [r4, #20]
 8019764:	781b      	ldrb	r3, [r3, #0]
 8019766:	5cd3      	ldrb	r3, [r2, r3]
 8019768:	b9a3      	cbnz	r3, 8019794 <_scanf_chars+0x68>
 801976a:	2e00      	cmp	r6, #0
 801976c:	d132      	bne.n	80197d4 <_scanf_chars+0xa8>
 801976e:	e006      	b.n	801977e <_scanf_chars+0x52>
 8019770:	2b02      	cmp	r3, #2
 8019772:	d007      	beq.n	8019784 <_scanf_chars+0x58>
 8019774:	2e00      	cmp	r6, #0
 8019776:	d12d      	bne.n	80197d4 <_scanf_chars+0xa8>
 8019778:	69a3      	ldr	r3, [r4, #24]
 801977a:	2b01      	cmp	r3, #1
 801977c:	d12a      	bne.n	80197d4 <_scanf_chars+0xa8>
 801977e:	2001      	movs	r0, #1
 8019780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019784:	f7fe ffde 	bl	8018744 <__locale_ctype_ptr>
 8019788:	682b      	ldr	r3, [r5, #0]
 801978a:	781b      	ldrb	r3, [r3, #0]
 801978c:	4418      	add	r0, r3
 801978e:	7843      	ldrb	r3, [r0, #1]
 8019790:	071b      	lsls	r3, r3, #28
 8019792:	d4ef      	bmi.n	8019774 <_scanf_chars+0x48>
 8019794:	6823      	ldr	r3, [r4, #0]
 8019796:	06da      	lsls	r2, r3, #27
 8019798:	bf5e      	ittt	pl
 801979a:	682b      	ldrpl	r3, [r5, #0]
 801979c:	781b      	ldrbpl	r3, [r3, #0]
 801979e:	703b      	strbpl	r3, [r7, #0]
 80197a0:	682a      	ldr	r2, [r5, #0]
 80197a2:	686b      	ldr	r3, [r5, #4]
 80197a4:	f102 0201 	add.w	r2, r2, #1
 80197a8:	602a      	str	r2, [r5, #0]
 80197aa:	68a2      	ldr	r2, [r4, #8]
 80197ac:	f103 33ff 	add.w	r3, r3, #4294967295
 80197b0:	f102 32ff 	add.w	r2, r2, #4294967295
 80197b4:	606b      	str	r3, [r5, #4]
 80197b6:	f106 0601 	add.w	r6, r6, #1
 80197ba:	bf58      	it	pl
 80197bc:	3701      	addpl	r7, #1
 80197be:	60a2      	str	r2, [r4, #8]
 80197c0:	b142      	cbz	r2, 80197d4 <_scanf_chars+0xa8>
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	dcc8      	bgt.n	8019758 <_scanf_chars+0x2c>
 80197c6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197ca:	4629      	mov	r1, r5
 80197cc:	4640      	mov	r0, r8
 80197ce:	4798      	blx	r3
 80197d0:	2800      	cmp	r0, #0
 80197d2:	d0c1      	beq.n	8019758 <_scanf_chars+0x2c>
 80197d4:	6823      	ldr	r3, [r4, #0]
 80197d6:	f013 0310 	ands.w	r3, r3, #16
 80197da:	d105      	bne.n	80197e8 <_scanf_chars+0xbc>
 80197dc:	68e2      	ldr	r2, [r4, #12]
 80197de:	3201      	adds	r2, #1
 80197e0:	60e2      	str	r2, [r4, #12]
 80197e2:	69a2      	ldr	r2, [r4, #24]
 80197e4:	b102      	cbz	r2, 80197e8 <_scanf_chars+0xbc>
 80197e6:	703b      	strb	r3, [r7, #0]
 80197e8:	6923      	ldr	r3, [r4, #16]
 80197ea:	441e      	add	r6, r3
 80197ec:	6126      	str	r6, [r4, #16]
 80197ee:	2000      	movs	r0, #0
 80197f0:	e7c6      	b.n	8019780 <_scanf_chars+0x54>
	...

080197f4 <_scanf_i>:
 80197f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197f8:	469a      	mov	sl, r3
 80197fa:	4b74      	ldr	r3, [pc, #464]	; (80199cc <_scanf_i+0x1d8>)
 80197fc:	460c      	mov	r4, r1
 80197fe:	4683      	mov	fp, r0
 8019800:	4616      	mov	r6, r2
 8019802:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8019806:	b087      	sub	sp, #28
 8019808:	ab03      	add	r3, sp, #12
 801980a:	68a7      	ldr	r7, [r4, #8]
 801980c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019810:	4b6f      	ldr	r3, [pc, #444]	; (80199d0 <_scanf_i+0x1dc>)
 8019812:	69a1      	ldr	r1, [r4, #24]
 8019814:	4a6f      	ldr	r2, [pc, #444]	; (80199d4 <_scanf_i+0x1e0>)
 8019816:	2903      	cmp	r1, #3
 8019818:	bf08      	it	eq
 801981a:	461a      	moveq	r2, r3
 801981c:	1e7b      	subs	r3, r7, #1
 801981e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019822:	bf84      	itt	hi
 8019824:	f240 135d 	movwhi	r3, #349	; 0x15d
 8019828:	60a3      	strhi	r3, [r4, #8]
 801982a:	6823      	ldr	r3, [r4, #0]
 801982c:	9200      	str	r2, [sp, #0]
 801982e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019832:	bf88      	it	hi
 8019834:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8019838:	f104 091c 	add.w	r9, r4, #28
 801983c:	6023      	str	r3, [r4, #0]
 801983e:	bf8c      	ite	hi
 8019840:	197f      	addhi	r7, r7, r5
 8019842:	2700      	movls	r7, #0
 8019844:	464b      	mov	r3, r9
 8019846:	f04f 0800 	mov.w	r8, #0
 801984a:	9301      	str	r3, [sp, #4]
 801984c:	6831      	ldr	r1, [r6, #0]
 801984e:	ab03      	add	r3, sp, #12
 8019850:	2202      	movs	r2, #2
 8019852:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019856:	7809      	ldrb	r1, [r1, #0]
 8019858:	f7e6 fcda 	bl	8000210 <memchr>
 801985c:	9b01      	ldr	r3, [sp, #4]
 801985e:	b330      	cbz	r0, 80198ae <_scanf_i+0xba>
 8019860:	f1b8 0f01 	cmp.w	r8, #1
 8019864:	d15a      	bne.n	801991c <_scanf_i+0x128>
 8019866:	6862      	ldr	r2, [r4, #4]
 8019868:	b92a      	cbnz	r2, 8019876 <_scanf_i+0x82>
 801986a:	6822      	ldr	r2, [r4, #0]
 801986c:	2108      	movs	r1, #8
 801986e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019872:	6061      	str	r1, [r4, #4]
 8019874:	6022      	str	r2, [r4, #0]
 8019876:	6822      	ldr	r2, [r4, #0]
 8019878:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801987c:	6022      	str	r2, [r4, #0]
 801987e:	68a2      	ldr	r2, [r4, #8]
 8019880:	1e51      	subs	r1, r2, #1
 8019882:	60a1      	str	r1, [r4, #8]
 8019884:	b19a      	cbz	r2, 80198ae <_scanf_i+0xba>
 8019886:	6832      	ldr	r2, [r6, #0]
 8019888:	1c51      	adds	r1, r2, #1
 801988a:	6031      	str	r1, [r6, #0]
 801988c:	7812      	ldrb	r2, [r2, #0]
 801988e:	701a      	strb	r2, [r3, #0]
 8019890:	1c5d      	adds	r5, r3, #1
 8019892:	6873      	ldr	r3, [r6, #4]
 8019894:	3b01      	subs	r3, #1
 8019896:	2b00      	cmp	r3, #0
 8019898:	6073      	str	r3, [r6, #4]
 801989a:	dc07      	bgt.n	80198ac <_scanf_i+0xb8>
 801989c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80198a0:	4631      	mov	r1, r6
 80198a2:	4658      	mov	r0, fp
 80198a4:	4798      	blx	r3
 80198a6:	2800      	cmp	r0, #0
 80198a8:	f040 8086 	bne.w	80199b8 <_scanf_i+0x1c4>
 80198ac:	462b      	mov	r3, r5
 80198ae:	f108 0801 	add.w	r8, r8, #1
 80198b2:	f1b8 0f03 	cmp.w	r8, #3
 80198b6:	d1c8      	bne.n	801984a <_scanf_i+0x56>
 80198b8:	6862      	ldr	r2, [r4, #4]
 80198ba:	b90a      	cbnz	r2, 80198c0 <_scanf_i+0xcc>
 80198bc:	220a      	movs	r2, #10
 80198be:	6062      	str	r2, [r4, #4]
 80198c0:	6862      	ldr	r2, [r4, #4]
 80198c2:	4945      	ldr	r1, [pc, #276]	; (80199d8 <_scanf_i+0x1e4>)
 80198c4:	6960      	ldr	r0, [r4, #20]
 80198c6:	9301      	str	r3, [sp, #4]
 80198c8:	1a89      	subs	r1, r1, r2
 80198ca:	f000 f897 	bl	80199fc <__sccl>
 80198ce:	9b01      	ldr	r3, [sp, #4]
 80198d0:	f04f 0800 	mov.w	r8, #0
 80198d4:	461d      	mov	r5, r3
 80198d6:	68a3      	ldr	r3, [r4, #8]
 80198d8:	6822      	ldr	r2, [r4, #0]
 80198da:	2b00      	cmp	r3, #0
 80198dc:	d03a      	beq.n	8019954 <_scanf_i+0x160>
 80198de:	6831      	ldr	r1, [r6, #0]
 80198e0:	6960      	ldr	r0, [r4, #20]
 80198e2:	f891 c000 	ldrb.w	ip, [r1]
 80198e6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80198ea:	2800      	cmp	r0, #0
 80198ec:	d032      	beq.n	8019954 <_scanf_i+0x160>
 80198ee:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80198f2:	d121      	bne.n	8019938 <_scanf_i+0x144>
 80198f4:	0510      	lsls	r0, r2, #20
 80198f6:	d51f      	bpl.n	8019938 <_scanf_i+0x144>
 80198f8:	f108 0801 	add.w	r8, r8, #1
 80198fc:	b117      	cbz	r7, 8019904 <_scanf_i+0x110>
 80198fe:	3301      	adds	r3, #1
 8019900:	3f01      	subs	r7, #1
 8019902:	60a3      	str	r3, [r4, #8]
 8019904:	6873      	ldr	r3, [r6, #4]
 8019906:	3b01      	subs	r3, #1
 8019908:	2b00      	cmp	r3, #0
 801990a:	6073      	str	r3, [r6, #4]
 801990c:	dd1b      	ble.n	8019946 <_scanf_i+0x152>
 801990e:	6833      	ldr	r3, [r6, #0]
 8019910:	3301      	adds	r3, #1
 8019912:	6033      	str	r3, [r6, #0]
 8019914:	68a3      	ldr	r3, [r4, #8]
 8019916:	3b01      	subs	r3, #1
 8019918:	60a3      	str	r3, [r4, #8]
 801991a:	e7dc      	b.n	80198d6 <_scanf_i+0xe2>
 801991c:	f1b8 0f02 	cmp.w	r8, #2
 8019920:	d1ad      	bne.n	801987e <_scanf_i+0x8a>
 8019922:	6822      	ldr	r2, [r4, #0]
 8019924:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8019928:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801992c:	d1bf      	bne.n	80198ae <_scanf_i+0xba>
 801992e:	2110      	movs	r1, #16
 8019930:	6061      	str	r1, [r4, #4]
 8019932:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8019936:	e7a1      	b.n	801987c <_scanf_i+0x88>
 8019938:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801993c:	6022      	str	r2, [r4, #0]
 801993e:	780b      	ldrb	r3, [r1, #0]
 8019940:	702b      	strb	r3, [r5, #0]
 8019942:	3501      	adds	r5, #1
 8019944:	e7de      	b.n	8019904 <_scanf_i+0x110>
 8019946:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801994a:	4631      	mov	r1, r6
 801994c:	4658      	mov	r0, fp
 801994e:	4798      	blx	r3
 8019950:	2800      	cmp	r0, #0
 8019952:	d0df      	beq.n	8019914 <_scanf_i+0x120>
 8019954:	6823      	ldr	r3, [r4, #0]
 8019956:	05d9      	lsls	r1, r3, #23
 8019958:	d50c      	bpl.n	8019974 <_scanf_i+0x180>
 801995a:	454d      	cmp	r5, r9
 801995c:	d908      	bls.n	8019970 <_scanf_i+0x17c>
 801995e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8019962:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019966:	4632      	mov	r2, r6
 8019968:	4658      	mov	r0, fp
 801996a:	4798      	blx	r3
 801996c:	1e6f      	subs	r7, r5, #1
 801996e:	463d      	mov	r5, r7
 8019970:	454d      	cmp	r5, r9
 8019972:	d029      	beq.n	80199c8 <_scanf_i+0x1d4>
 8019974:	6822      	ldr	r2, [r4, #0]
 8019976:	f012 0210 	ands.w	r2, r2, #16
 801997a:	d113      	bne.n	80199a4 <_scanf_i+0x1b0>
 801997c:	702a      	strb	r2, [r5, #0]
 801997e:	6863      	ldr	r3, [r4, #4]
 8019980:	9e00      	ldr	r6, [sp, #0]
 8019982:	4649      	mov	r1, r9
 8019984:	4658      	mov	r0, fp
 8019986:	47b0      	blx	r6
 8019988:	f8da 3000 	ldr.w	r3, [sl]
 801998c:	6821      	ldr	r1, [r4, #0]
 801998e:	1d1a      	adds	r2, r3, #4
 8019990:	f8ca 2000 	str.w	r2, [sl]
 8019994:	f011 0f20 	tst.w	r1, #32
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	d010      	beq.n	80199be <_scanf_i+0x1ca>
 801999c:	6018      	str	r0, [r3, #0]
 801999e:	68e3      	ldr	r3, [r4, #12]
 80199a0:	3301      	adds	r3, #1
 80199a2:	60e3      	str	r3, [r4, #12]
 80199a4:	eba5 0509 	sub.w	r5, r5, r9
 80199a8:	44a8      	add	r8, r5
 80199aa:	6925      	ldr	r5, [r4, #16]
 80199ac:	4445      	add	r5, r8
 80199ae:	6125      	str	r5, [r4, #16]
 80199b0:	2000      	movs	r0, #0
 80199b2:	b007      	add	sp, #28
 80199b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199b8:	f04f 0800 	mov.w	r8, #0
 80199bc:	e7ca      	b.n	8019954 <_scanf_i+0x160>
 80199be:	07ca      	lsls	r2, r1, #31
 80199c0:	bf4c      	ite	mi
 80199c2:	8018      	strhmi	r0, [r3, #0]
 80199c4:	6018      	strpl	r0, [r3, #0]
 80199c6:	e7ea      	b.n	801999e <_scanf_i+0x1aa>
 80199c8:	2001      	movs	r0, #1
 80199ca:	e7f2      	b.n	80199b2 <_scanf_i+0x1be>
 80199cc:	0801a11c 	.word	0x0801a11c
 80199d0:	08017401 	.word	0x08017401
 80199d4:	08019b79 	.word	0x08019b79
 80199d8:	0801a575 	.word	0x0801a575

080199dc <_sbrk_r>:
 80199dc:	b538      	push	{r3, r4, r5, lr}
 80199de:	4c06      	ldr	r4, [pc, #24]	; (80199f8 <_sbrk_r+0x1c>)
 80199e0:	2300      	movs	r3, #0
 80199e2:	4605      	mov	r5, r0
 80199e4:	4608      	mov	r0, r1
 80199e6:	6023      	str	r3, [r4, #0]
 80199e8:	f7ed ffd6 	bl	8007998 <_sbrk>
 80199ec:	1c43      	adds	r3, r0, #1
 80199ee:	d102      	bne.n	80199f6 <_sbrk_r+0x1a>
 80199f0:	6823      	ldr	r3, [r4, #0]
 80199f2:	b103      	cbz	r3, 80199f6 <_sbrk_r+0x1a>
 80199f4:	602b      	str	r3, [r5, #0]
 80199f6:	bd38      	pop	{r3, r4, r5, pc}
 80199f8:	20046e1c 	.word	0x20046e1c

080199fc <__sccl>:
 80199fc:	b570      	push	{r4, r5, r6, lr}
 80199fe:	780b      	ldrb	r3, [r1, #0]
 8019a00:	2b5e      	cmp	r3, #94	; 0x5e
 8019a02:	bf13      	iteet	ne
 8019a04:	1c4a      	addne	r2, r1, #1
 8019a06:	1c8a      	addeq	r2, r1, #2
 8019a08:	784b      	ldrbeq	r3, [r1, #1]
 8019a0a:	2100      	movne	r1, #0
 8019a0c:	bf08      	it	eq
 8019a0e:	2101      	moveq	r1, #1
 8019a10:	1e44      	subs	r4, r0, #1
 8019a12:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8019a16:	f804 1f01 	strb.w	r1, [r4, #1]!
 8019a1a:	42ac      	cmp	r4, r5
 8019a1c:	d1fb      	bne.n	8019a16 <__sccl+0x1a>
 8019a1e:	b913      	cbnz	r3, 8019a26 <__sccl+0x2a>
 8019a20:	3a01      	subs	r2, #1
 8019a22:	4610      	mov	r0, r2
 8019a24:	bd70      	pop	{r4, r5, r6, pc}
 8019a26:	f081 0401 	eor.w	r4, r1, #1
 8019a2a:	54c4      	strb	r4, [r0, r3]
 8019a2c:	1c51      	adds	r1, r2, #1
 8019a2e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019a32:	2d2d      	cmp	r5, #45	; 0x2d
 8019a34:	f101 36ff 	add.w	r6, r1, #4294967295
 8019a38:	460a      	mov	r2, r1
 8019a3a:	d006      	beq.n	8019a4a <__sccl+0x4e>
 8019a3c:	2d5d      	cmp	r5, #93	; 0x5d
 8019a3e:	d0f0      	beq.n	8019a22 <__sccl+0x26>
 8019a40:	b90d      	cbnz	r5, 8019a46 <__sccl+0x4a>
 8019a42:	4632      	mov	r2, r6
 8019a44:	e7ed      	b.n	8019a22 <__sccl+0x26>
 8019a46:	462b      	mov	r3, r5
 8019a48:	e7ef      	b.n	8019a2a <__sccl+0x2e>
 8019a4a:	780e      	ldrb	r6, [r1, #0]
 8019a4c:	2e5d      	cmp	r6, #93	; 0x5d
 8019a4e:	d0fa      	beq.n	8019a46 <__sccl+0x4a>
 8019a50:	42b3      	cmp	r3, r6
 8019a52:	dcf8      	bgt.n	8019a46 <__sccl+0x4a>
 8019a54:	3301      	adds	r3, #1
 8019a56:	429e      	cmp	r6, r3
 8019a58:	54c4      	strb	r4, [r0, r3]
 8019a5a:	dcfb      	bgt.n	8019a54 <__sccl+0x58>
 8019a5c:	3102      	adds	r1, #2
 8019a5e:	e7e6      	b.n	8019a2e <__sccl+0x32>

08019a60 <strncmp>:
 8019a60:	b510      	push	{r4, lr}
 8019a62:	b16a      	cbz	r2, 8019a80 <strncmp+0x20>
 8019a64:	3901      	subs	r1, #1
 8019a66:	1884      	adds	r4, r0, r2
 8019a68:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019a6c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019a70:	4293      	cmp	r3, r2
 8019a72:	d103      	bne.n	8019a7c <strncmp+0x1c>
 8019a74:	42a0      	cmp	r0, r4
 8019a76:	d001      	beq.n	8019a7c <strncmp+0x1c>
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d1f5      	bne.n	8019a68 <strncmp+0x8>
 8019a7c:	1a98      	subs	r0, r3, r2
 8019a7e:	bd10      	pop	{r4, pc}
 8019a80:	4610      	mov	r0, r2
 8019a82:	e7fc      	b.n	8019a7e <strncmp+0x1e>

08019a84 <_strtoul_l.isra.0>:
 8019a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a88:	4680      	mov	r8, r0
 8019a8a:	4689      	mov	r9, r1
 8019a8c:	4692      	mov	sl, r2
 8019a8e:	461e      	mov	r6, r3
 8019a90:	460f      	mov	r7, r1
 8019a92:	463d      	mov	r5, r7
 8019a94:	9808      	ldr	r0, [sp, #32]
 8019a96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019a9a:	f7fe fe4f 	bl	801873c <__locale_ctype_ptr_l>
 8019a9e:	4420      	add	r0, r4
 8019aa0:	7843      	ldrb	r3, [r0, #1]
 8019aa2:	f013 0308 	ands.w	r3, r3, #8
 8019aa6:	d130      	bne.n	8019b0a <_strtoul_l.isra.0+0x86>
 8019aa8:	2c2d      	cmp	r4, #45	; 0x2d
 8019aaa:	d130      	bne.n	8019b0e <_strtoul_l.isra.0+0x8a>
 8019aac:	787c      	ldrb	r4, [r7, #1]
 8019aae:	1cbd      	adds	r5, r7, #2
 8019ab0:	2101      	movs	r1, #1
 8019ab2:	2e00      	cmp	r6, #0
 8019ab4:	d05c      	beq.n	8019b70 <_strtoul_l.isra.0+0xec>
 8019ab6:	2e10      	cmp	r6, #16
 8019ab8:	d109      	bne.n	8019ace <_strtoul_l.isra.0+0x4a>
 8019aba:	2c30      	cmp	r4, #48	; 0x30
 8019abc:	d107      	bne.n	8019ace <_strtoul_l.isra.0+0x4a>
 8019abe:	782b      	ldrb	r3, [r5, #0]
 8019ac0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019ac4:	2b58      	cmp	r3, #88	; 0x58
 8019ac6:	d14e      	bne.n	8019b66 <_strtoul_l.isra.0+0xe2>
 8019ac8:	786c      	ldrb	r4, [r5, #1]
 8019aca:	2610      	movs	r6, #16
 8019acc:	3502      	adds	r5, #2
 8019ace:	f04f 32ff 	mov.w	r2, #4294967295
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	fbb2 f2f6 	udiv	r2, r2, r6
 8019ad8:	fb06 fc02 	mul.w	ip, r6, r2
 8019adc:	ea6f 0c0c 	mvn.w	ip, ip
 8019ae0:	4618      	mov	r0, r3
 8019ae2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019ae6:	2f09      	cmp	r7, #9
 8019ae8:	d817      	bhi.n	8019b1a <_strtoul_l.isra.0+0x96>
 8019aea:	463c      	mov	r4, r7
 8019aec:	42a6      	cmp	r6, r4
 8019aee:	dd23      	ble.n	8019b38 <_strtoul_l.isra.0+0xb4>
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	db1e      	blt.n	8019b32 <_strtoul_l.isra.0+0xae>
 8019af4:	4282      	cmp	r2, r0
 8019af6:	d31c      	bcc.n	8019b32 <_strtoul_l.isra.0+0xae>
 8019af8:	d101      	bne.n	8019afe <_strtoul_l.isra.0+0x7a>
 8019afa:	45a4      	cmp	ip, r4
 8019afc:	db19      	blt.n	8019b32 <_strtoul_l.isra.0+0xae>
 8019afe:	fb00 4006 	mla	r0, r0, r6, r4
 8019b02:	2301      	movs	r3, #1
 8019b04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019b08:	e7eb      	b.n	8019ae2 <_strtoul_l.isra.0+0x5e>
 8019b0a:	462f      	mov	r7, r5
 8019b0c:	e7c1      	b.n	8019a92 <_strtoul_l.isra.0+0xe>
 8019b0e:	2c2b      	cmp	r4, #43	; 0x2b
 8019b10:	bf04      	itt	eq
 8019b12:	1cbd      	addeq	r5, r7, #2
 8019b14:	787c      	ldrbeq	r4, [r7, #1]
 8019b16:	4619      	mov	r1, r3
 8019b18:	e7cb      	b.n	8019ab2 <_strtoul_l.isra.0+0x2e>
 8019b1a:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019b1e:	2f19      	cmp	r7, #25
 8019b20:	d801      	bhi.n	8019b26 <_strtoul_l.isra.0+0xa2>
 8019b22:	3c37      	subs	r4, #55	; 0x37
 8019b24:	e7e2      	b.n	8019aec <_strtoul_l.isra.0+0x68>
 8019b26:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8019b2a:	2f19      	cmp	r7, #25
 8019b2c:	d804      	bhi.n	8019b38 <_strtoul_l.isra.0+0xb4>
 8019b2e:	3c57      	subs	r4, #87	; 0x57
 8019b30:	e7dc      	b.n	8019aec <_strtoul_l.isra.0+0x68>
 8019b32:	f04f 33ff 	mov.w	r3, #4294967295
 8019b36:	e7e5      	b.n	8019b04 <_strtoul_l.isra.0+0x80>
 8019b38:	2b00      	cmp	r3, #0
 8019b3a:	da09      	bge.n	8019b50 <_strtoul_l.isra.0+0xcc>
 8019b3c:	2322      	movs	r3, #34	; 0x22
 8019b3e:	f8c8 3000 	str.w	r3, [r8]
 8019b42:	f04f 30ff 	mov.w	r0, #4294967295
 8019b46:	f1ba 0f00 	cmp.w	sl, #0
 8019b4a:	d107      	bne.n	8019b5c <_strtoul_l.isra.0+0xd8>
 8019b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b50:	b101      	cbz	r1, 8019b54 <_strtoul_l.isra.0+0xd0>
 8019b52:	4240      	negs	r0, r0
 8019b54:	f1ba 0f00 	cmp.w	sl, #0
 8019b58:	d0f8      	beq.n	8019b4c <_strtoul_l.isra.0+0xc8>
 8019b5a:	b10b      	cbz	r3, 8019b60 <_strtoul_l.isra.0+0xdc>
 8019b5c:	f105 39ff 	add.w	r9, r5, #4294967295
 8019b60:	f8ca 9000 	str.w	r9, [sl]
 8019b64:	e7f2      	b.n	8019b4c <_strtoul_l.isra.0+0xc8>
 8019b66:	2430      	movs	r4, #48	; 0x30
 8019b68:	2e00      	cmp	r6, #0
 8019b6a:	d1b0      	bne.n	8019ace <_strtoul_l.isra.0+0x4a>
 8019b6c:	2608      	movs	r6, #8
 8019b6e:	e7ae      	b.n	8019ace <_strtoul_l.isra.0+0x4a>
 8019b70:	2c30      	cmp	r4, #48	; 0x30
 8019b72:	d0a4      	beq.n	8019abe <_strtoul_l.isra.0+0x3a>
 8019b74:	260a      	movs	r6, #10
 8019b76:	e7aa      	b.n	8019ace <_strtoul_l.isra.0+0x4a>

08019b78 <_strtoul_r>:
 8019b78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b7a:	4c06      	ldr	r4, [pc, #24]	; (8019b94 <_strtoul_r+0x1c>)
 8019b7c:	4d06      	ldr	r5, [pc, #24]	; (8019b98 <_strtoul_r+0x20>)
 8019b7e:	6824      	ldr	r4, [r4, #0]
 8019b80:	6a24      	ldr	r4, [r4, #32]
 8019b82:	2c00      	cmp	r4, #0
 8019b84:	bf08      	it	eq
 8019b86:	462c      	moveq	r4, r5
 8019b88:	9400      	str	r4, [sp, #0]
 8019b8a:	f7ff ff7b 	bl	8019a84 <_strtoul_l.isra.0>
 8019b8e:	b003      	add	sp, #12
 8019b90:	bd30      	pop	{r4, r5, pc}
 8019b92:	bf00      	nop
 8019b94:	2000000c 	.word	0x2000000c
 8019b98:	20000070 	.word	0x20000070

08019b9c <__submore>:
 8019b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ba0:	460c      	mov	r4, r1
 8019ba2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019ba4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ba8:	4299      	cmp	r1, r3
 8019baa:	d11d      	bne.n	8019be8 <__submore+0x4c>
 8019bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019bb0:	f7ff fa66 	bl	8019080 <_malloc_r>
 8019bb4:	b918      	cbnz	r0, 8019bbe <__submore+0x22>
 8019bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8019bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019bc2:	63a3      	str	r3, [r4, #56]	; 0x38
 8019bc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019bc8:	6360      	str	r0, [r4, #52]	; 0x34
 8019bca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019bce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019bd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019bd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019bda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019bde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019be2:	6020      	str	r0, [r4, #0]
 8019be4:	2000      	movs	r0, #0
 8019be6:	e7e8      	b.n	8019bba <__submore+0x1e>
 8019be8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019bea:	0077      	lsls	r7, r6, #1
 8019bec:	463a      	mov	r2, r7
 8019bee:	f000 f837 	bl	8019c60 <_realloc_r>
 8019bf2:	4605      	mov	r5, r0
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	d0de      	beq.n	8019bb6 <__submore+0x1a>
 8019bf8:	eb00 0806 	add.w	r8, r0, r6
 8019bfc:	4601      	mov	r1, r0
 8019bfe:	4632      	mov	r2, r6
 8019c00:	4640      	mov	r0, r8
 8019c02:	f7fe fdd7 	bl	80187b4 <memcpy>
 8019c06:	f8c4 8000 	str.w	r8, [r4]
 8019c0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019c0e:	e7e9      	b.n	8019be4 <__submore+0x48>

08019c10 <__ascii_wctomb>:
 8019c10:	b149      	cbz	r1, 8019c26 <__ascii_wctomb+0x16>
 8019c12:	2aff      	cmp	r2, #255	; 0xff
 8019c14:	bf85      	ittet	hi
 8019c16:	238a      	movhi	r3, #138	; 0x8a
 8019c18:	6003      	strhi	r3, [r0, #0]
 8019c1a:	700a      	strbls	r2, [r1, #0]
 8019c1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8019c20:	bf98      	it	ls
 8019c22:	2001      	movls	r0, #1
 8019c24:	4770      	bx	lr
 8019c26:	4608      	mov	r0, r1
 8019c28:	4770      	bx	lr

08019c2a <memmove>:
 8019c2a:	4288      	cmp	r0, r1
 8019c2c:	b510      	push	{r4, lr}
 8019c2e:	eb01 0302 	add.w	r3, r1, r2
 8019c32:	d807      	bhi.n	8019c44 <memmove+0x1a>
 8019c34:	1e42      	subs	r2, r0, #1
 8019c36:	4299      	cmp	r1, r3
 8019c38:	d00a      	beq.n	8019c50 <memmove+0x26>
 8019c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019c42:	e7f8      	b.n	8019c36 <memmove+0xc>
 8019c44:	4283      	cmp	r3, r0
 8019c46:	d9f5      	bls.n	8019c34 <memmove+0xa>
 8019c48:	1881      	adds	r1, r0, r2
 8019c4a:	1ad2      	subs	r2, r2, r3
 8019c4c:	42d3      	cmn	r3, r2
 8019c4e:	d100      	bne.n	8019c52 <memmove+0x28>
 8019c50:	bd10      	pop	{r4, pc}
 8019c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019c56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019c5a:	e7f7      	b.n	8019c4c <memmove+0x22>

08019c5c <__malloc_lock>:
 8019c5c:	4770      	bx	lr

08019c5e <__malloc_unlock>:
 8019c5e:	4770      	bx	lr

08019c60 <_realloc_r>:
 8019c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c62:	4607      	mov	r7, r0
 8019c64:	4614      	mov	r4, r2
 8019c66:	460e      	mov	r6, r1
 8019c68:	b921      	cbnz	r1, 8019c74 <_realloc_r+0x14>
 8019c6a:	4611      	mov	r1, r2
 8019c6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019c70:	f7ff ba06 	b.w	8019080 <_malloc_r>
 8019c74:	b922      	cbnz	r2, 8019c80 <_realloc_r+0x20>
 8019c76:	f7ff f9b5 	bl	8018fe4 <_free_r>
 8019c7a:	4625      	mov	r5, r4
 8019c7c:	4628      	mov	r0, r5
 8019c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c80:	f000 f814 	bl	8019cac <_malloc_usable_size_r>
 8019c84:	42a0      	cmp	r0, r4
 8019c86:	d20f      	bcs.n	8019ca8 <_realloc_r+0x48>
 8019c88:	4621      	mov	r1, r4
 8019c8a:	4638      	mov	r0, r7
 8019c8c:	f7ff f9f8 	bl	8019080 <_malloc_r>
 8019c90:	4605      	mov	r5, r0
 8019c92:	2800      	cmp	r0, #0
 8019c94:	d0f2      	beq.n	8019c7c <_realloc_r+0x1c>
 8019c96:	4631      	mov	r1, r6
 8019c98:	4622      	mov	r2, r4
 8019c9a:	f7fe fd8b 	bl	80187b4 <memcpy>
 8019c9e:	4631      	mov	r1, r6
 8019ca0:	4638      	mov	r0, r7
 8019ca2:	f7ff f99f 	bl	8018fe4 <_free_r>
 8019ca6:	e7e9      	b.n	8019c7c <_realloc_r+0x1c>
 8019ca8:	4635      	mov	r5, r6
 8019caa:	e7e7      	b.n	8019c7c <_realloc_r+0x1c>

08019cac <_malloc_usable_size_r>:
 8019cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019cb0:	1f18      	subs	r0, r3, #4
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	bfbc      	itt	lt
 8019cb6:	580b      	ldrlt	r3, [r1, r0]
 8019cb8:	18c0      	addlt	r0, r0, r3
 8019cba:	4770      	bx	lr

08019cbc <_init>:
 8019cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cbe:	bf00      	nop
 8019cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cc2:	bc08      	pop	{r3}
 8019cc4:	469e      	mov	lr, r3
 8019cc6:	4770      	bx	lr

08019cc8 <_fini>:
 8019cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cca:	bf00      	nop
 8019ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019cce:	bc08      	pop	{r3}
 8019cd0:	469e      	mov	lr, r3
 8019cd2:	4770      	bx	lr
