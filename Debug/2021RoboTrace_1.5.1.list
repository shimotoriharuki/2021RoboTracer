
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001999c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009fc  08019b60  08019b60  00029b60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a55c  0801a55c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a55c  0801a55c  0002a55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a564  0801a564  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a564  0801a564  0002a564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a56c  0801a56c  0002a56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a570  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ab8  200001e0  0801a74c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046c98  0801a74c  00036c98  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003b145  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c2f  00000000  00000000  0006b351  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002340  00000000  00000000  00072f80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002070  00000000  00000000  000752c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354ae  00000000  00000000  00077330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000265b4  00000000  00000000  000ac7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011107b  00000000  00000000  000d2d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e3e0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a760  00000000  00000000  001e3e88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019b44 	.word	0x08019b44

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019b44 	.word	0x08019b44

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f00a fa5a 	bl	800b490 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20044790 	.word	0x20044790

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f00a fa42 	bl	800b490 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20044790 	.word	0x20044790

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f00a f8e3 	bl	800b1ec <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fe4a 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fe44 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fe3e 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fe38 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fe32 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fe2c 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fe26 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fe20 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fe1a 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fe14 	bl	8009cc0 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fe08 	bl	8009cc0 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fe02 	bl	8009cc0 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f016 f8d5 	bl	80172d8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d ff12 	bl	800f020 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d ff0e 	bl	800f020 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d ff0a 	bl	800f020 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d ff06 	bl	800f020 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2004487c 	.word	0x2004487c
 8001248:	200447e4 	.word	0x200447e4
 800124c:	20044904 	.word	0x20044904

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2004487c 	.word	0x2004487c
 800137c:	20044904 	.word	0x20044904
 8001380:	200447e4 	.word	0x200447e4

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	2004487c 	.word	0x2004487c
 80013c4:	200447e4 	.word	0x200447e4
 80013c8:	20044904 	.word	0x20044904

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fec6 	bl	800f1c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fec2 	bl	800f1c0 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	200449e4 	.word	0x200449e4
 8001458:	200446c8 	.word	0x200446c8
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	ee07 3a90 	vmov	s15, r3
}
 800174a:	eeb0 0a67 	vmov.f32	s0, s15
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f04f 0200 	mov.w	r2, #0
 8001766:	61da      	str	r2, [r3, #28]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001782:	6839      	ldr	r1, [r7, #0]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 f9d7 	bl	8001b38 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 800178a:	f000 f9eb 	bl	8001b64 <fopen_folder_and_file>

	return ret;
 800178e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017a2:	4804      	ldr	r0, [pc, #16]	; (80017b4 <user_fclose+0x1c>)
 80017a4:	f012 fa66 	bl	8013c74 <f_close>

	return ret;
 80017a8:	79fb      	ldrb	r3, [r7, #7]
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	200435d4 	.word	0x200435d4

080017b8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af02      	add	r7, sp, #8
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	80fb      	strh	r3, [r7, #6]
 80017c4:	4613      	mov	r3, r2
 80017c6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017cc:	2300      	movs	r3, #0
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	e030      	b.n	8001834 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feca 	bl	8000578 <__aeabi_f2d>
 80017e4:	4603      	mov	r3, r0
 80017e6:	460c      	mov	r4, r1
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
 80017ec:	4a17      	ldr	r2, [pc, #92]	; (800184c <sd_write_float+0x94>)
 80017ee:	2180      	movs	r1, #128	; 0x80
 80017f0:	4817      	ldr	r0, [pc, #92]	; (8001850 <sd_write_float+0x98>)
 80017f2:	f014 fe25 	bl	8016440 <sniprintf>

		if(state == ADD_WRITE){
 80017f6:	797b      	ldrb	r3, [r7, #5]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d106      	bne.n	800180a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <sd_write_float+0x9c>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	4619      	mov	r1, r3
 8001802:	4814      	ldr	r0, [pc, #80]	; (8001854 <sd_write_float+0x9c>)
 8001804:	f012 faaa 	bl	8013d5c <f_lseek>
 8001808:	e003      	b.n	8001812 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800180a:	2100      	movs	r1, #0
 800180c:	4811      	ldr	r0, [pc, #68]	; (8001854 <sd_write_float+0x9c>)
 800180e:	f012 faa5 	bl	8013d5c <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <sd_write_float+0x98>)
 8001814:	f7fe fcf4 	bl	8000200 <strlen>
 8001818:	4602      	mov	r2, r0
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <sd_write_float+0xa0>)
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <sd_write_float+0x98>)
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <sd_write_float+0x9c>)
 8001820:	f012 f813 	bl	801384a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001824:	f000 f9b8 	bl	8001b98 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001828:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182c:	b29b      	uxth	r3, r3
 800182e:	3301      	adds	r3, #1
 8001830:	b29b      	uxth	r3, r3
 8001832:	81fb      	strh	r3, [r7, #14]
 8001834:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800183c:	429a      	cmp	r2, r3
 800183e:	dbc8      	blt.n	80017d2 <sd_write_float+0x1a>
	}
	return ret;
 8001840:	7b7b      	ldrb	r3, [r7, #13]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	bd90      	pop	{r4, r7, pc}
 800184a:	bf00      	nop
 800184c:	08019b60 	.word	0x08019b60
 8001850:	20043544 	.word	0x20043544
 8001854:	200435d4 	.word	0x200435d4
 8001858:	200435c4 	.word	0x200435c4

0800185c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	603b      	str	r3, [r7, #0]
 8001868:	4613      	mov	r3, r2
 800186a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f000 f960 	bl	8001b38 <create_path>

	if(state == OVER_WRITE){
 8001878:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d108      	bne.n	8001892 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001880:	4822      	ldr	r0, [pc, #136]	; (800190c <sd_write_array_float+0xb0>)
 8001882:	f012 fa21 	bl	8013cc8 <f_chdir>
		f_unlink(filepath);	//	一回消す
 8001886:	4822      	ldr	r0, [pc, #136]	; (8001910 <sd_write_array_float+0xb4>)
 8001888:	f012 fc8c 	bl	80141a4 <f_unlink>
		f_chdir("..");
 800188c:	4821      	ldr	r0, [pc, #132]	; (8001914 <sd_write_array_float+0xb8>)
 800188e:	f012 fa1b 	bl	8013cc8 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 8001892:	f000 f967 	bl	8001b64 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001896:	2300      	movs	r3, #0
 8001898:	82fb      	strh	r3, [r7, #22]
 800189a:	e028      	b.n	80018ee <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800189c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	4413      	add	r3, r2
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fe65 	bl	8000578 <__aeabi_f2d>
 80018ae:	4603      	mov	r3, r0
 80018b0:	460c      	mov	r4, r1
 80018b2:	e9cd 3400 	strd	r3, r4, [sp]
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <sd_write_array_float+0xbc>)
 80018b8:	2180      	movs	r1, #128	; 0x80
 80018ba:	4818      	ldr	r0, [pc, #96]	; (800191c <sd_write_array_float+0xc0>)
 80018bc:	f014 fdc0 	bl	8016440 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018c0:	4b17      	ldr	r3, [pc, #92]	; (8001920 <sd_write_array_float+0xc4>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4619      	mov	r1, r3
 80018c6:	4816      	ldr	r0, [pc, #88]	; (8001920 <sd_write_array_float+0xc4>)
 80018c8:	f012 fa48 	bl	8013d5c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018cc:	4813      	ldr	r0, [pc, #76]	; (800191c <sd_write_array_float+0xc0>)
 80018ce:	f7fe fc97 	bl	8000200 <strlen>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <sd_write_array_float+0xc8>)
 80018d6:	4911      	ldr	r1, [pc, #68]	; (800191c <sd_write_array_float+0xc0>)
 80018d8:	4811      	ldr	r0, [pc, #68]	; (8001920 <sd_write_array_float+0xc4>)
 80018da:	f011 ffb6 	bl	801384a <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018de:	f000 f95b 	bl	8001b98 <bufclear>
	for(short i = 0 ; i < size; i++){
 80018e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	3301      	adds	r3, #1
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	82fb      	strh	r3, [r7, #22]
 80018ee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	dbd0      	blt.n	800189c <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80018fa:	4809      	ldr	r0, [pc, #36]	; (8001920 <sd_write_array_float+0xc4>)
 80018fc:	f012 f9ba 	bl	8013c74 <f_close>

	return ret;
 8001900:	7d7b      	ldrb	r3, [r7, #21]
}
 8001902:	4618      	mov	r0, r3
 8001904:	371c      	adds	r7, #28
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	20043444 	.word	0x20043444
 8001910:	20042304 	.word	0x20042304
 8001914:	08019b7c 	.word	0x08019b7c
 8001918:	08019b60 	.word	0x08019b60
 800191c:	20043544 	.word	0x20043544
 8001920:	200435d4 	.word	0x200435d4
 8001924:	200435c4 	.word	0x200435c4

08001928 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 f8f8 	bl	8001b38 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001948:	f000 f90c 	bl	8001b64 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800194c:	e019      	b.n	8001982 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800194e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	4413      	add	r3, r2
 8001958:	461a      	mov	r2, r3
 800195a:	4913      	ldr	r1, [pc, #76]	; (80019a8 <sd_read_array_float+0x80>)
 800195c:	4813      	ldr	r0, [pc, #76]	; (80019ac <sd_read_array_float+0x84>)
 800195e:	f014 fdc3 	bl	80164e8 <siscanf>
		i++;
 8001962:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001966:	b29b      	uxth	r3, r3
 8001968:	3301      	adds	r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800196e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001976:	429a      	cmp	r2, r3
 8001978:	db03      	blt.n	8001982 <sd_read_array_float+0x5a>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <sd_read_array_float+0x88>)
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	4809      	ldr	r0, [pc, #36]	; (80019ac <sd_read_array_float+0x84>)
 8001988:	f012 fdea 	bl	8014560 <f_gets>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1dd      	bne.n	800194e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001992:	f000 f901 	bl	8001b98 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <sd_read_array_float+0x88>)
 8001998:	f012 f96c 	bl	8013c74 <f_close>

	return ret;
 800199c:	7d7b      	ldrb	r3, [r7, #21]
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	08019b6c 	.word	0x08019b6c
 80019ac:	20043544 	.word	0x20043544
 80019b0:	200435d4 	.word	0x200435d4

080019b4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	603b      	str	r3, [r7, #0]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f8b2 	bl	8001b38 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019d4:	f000 f8c6 	bl	8001b64 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019d8:	e019      	b.n	8001a0e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	4413      	add	r3, r2
 80019e4:	461a      	mov	r2, r3
 80019e6:	4913      	ldr	r1, [pc, #76]	; (8001a34 <sd_read_array_double+0x80>)
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <sd_read_array_double+0x84>)
 80019ea:	f014 fd7d 	bl	80164e8 <siscanf>
		i++;
 80019ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80019fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80019fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	db03      	blt.n	8001a0e <sd_read_array_double+0x5a>
 8001a06:	88fb      	ldrh	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <sd_read_array_double+0x88>)
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <sd_read_array_double+0x84>)
 8001a14:	f012 fda4 	bl	8014560 <f_gets>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1dd      	bne.n	80019da <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a1e:	f000 f8bb 	bl	8001b98 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a22:	4806      	ldr	r0, [pc, #24]	; (8001a3c <sd_read_array_double+0x88>)
 8001a24:	f012 f926 	bl	8013c74 <f_close>

	return ret;
 8001a28:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08019b78 	.word	0x08019b78
 8001a38:	20043544 	.word	0x20043544
 8001a3c:	200435d4 	.word	0x200435d4

08001a40 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a50:	2300      	movs	r3, #0
 8001a52:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f86e 	bl	8001b38 <create_path>

	if(state == OVER_WRITE){
 8001a5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d108      	bne.n	8001a76 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a64:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <sd_write_array_int+0xa4>)
 8001a66:	f012 f92f 	bl	8013cc8 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <sd_write_array_int+0xa8>)
 8001a6c:	f012 fb9a 	bl	80141a4 <f_unlink>
		f_chdir("..");
 8001a70:	481e      	ldr	r0, [pc, #120]	; (8001aec <sd_write_array_int+0xac>)
 8001a72:	f012 f929 	bl	8013cc8 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a76:	f000 f875 	bl	8001b64 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	82fb      	strh	r3, [r7, #22]
 8001a7e:	e022      	b.n	8001ac6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001a80:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	4413      	add	r3, r2
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	4a18      	ldr	r2, [pc, #96]	; (8001af0 <sd_write_array_int+0xb0>)
 8001a90:	2180      	movs	r1, #128	; 0x80
 8001a92:	4818      	ldr	r0, [pc, #96]	; (8001af4 <sd_write_array_int+0xb4>)
 8001a94:	f014 fcd4 	bl	8016440 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <sd_write_array_int+0xb8>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4816      	ldr	r0, [pc, #88]	; (8001af8 <sd_write_array_int+0xb8>)
 8001aa0:	f012 f95c 	bl	8013d5c <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <sd_write_array_int+0xb4>)
 8001aa6:	f7fe fbab 	bl	8000200 <strlen>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <sd_write_array_int+0xbc>)
 8001aae:	4911      	ldr	r1, [pc, #68]	; (8001af4 <sd_write_array_int+0xb4>)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <sd_write_array_int+0xb8>)
 8001ab2:	f011 feca 	bl	801384a <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ab6:	f000 f86f 	bl	8001b98 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001aba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	82fb      	strh	r3, [r7, #22]
 8001ac6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbd6      	blt.n	8001a80 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001ad2:	4809      	ldr	r0, [pc, #36]	; (8001af8 <sd_write_array_int+0xb8>)
 8001ad4:	f012 f8ce 	bl	8013c74 <f_close>

	return ret;
 8001ad8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20043444 	.word	0x20043444
 8001ae8:	20042304 	.word	0x20042304
 8001aec:	08019b7c 	.word	0x08019b7c
 8001af0:	08019b80 	.word	0x08019b80
 8001af4:	20043544 	.word	0x20043544
 8001af8:	200435d4 	.word	0x200435d4
 8001afc:	200435c4 	.word	0x200435c4

08001b00 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4908      	ldr	r1, [pc, #32]	; (8001b30 <sd_mount+0x30>)
 8001b0e:	4809      	ldr	r0, [pc, #36]	; (8001b34 <sd_mount+0x34>)
 8001b10:	f011 fb28 	bl	8013164 <f_mount>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d102      	bne.n	8001b20 <sd_mount+0x20>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	e001      	b.n	8001b24 <sd_mount+0x24>
	else ret = 0;
 8001b20:	2300      	movs	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b24:	79fb      	ldrb	r3, [r7, #7]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	08019b88 	.word	0x08019b88
 8001b34:	20042404 	.word	0x20042404

08001b38 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <create_path+0x24>)
 8001b46:	f014 fcfb 	bl	8016540 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b4a:	6839      	ldr	r1, [r7, #0]
 8001b4c:	4804      	ldr	r0, [pc, #16]	; (8001b60 <create_path+0x28>)
 8001b4e:	f014 fcf7 	bl	8016540 <strcpy>

}
 8001b52:	bf00      	nop
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20043444 	.word	0x20043444
 8001b60:	20042304 	.word	0x20042304

08001b64 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b68:	4807      	ldr	r0, [pc, #28]	; (8001b88 <fopen_folder_and_file+0x24>)
 8001b6a:	f012 fbdd 	bl	8014328 <f_mkdir>

	f_chdir(dirpath);
 8001b6e:	4806      	ldr	r0, [pc, #24]	; (8001b88 <fopen_folder_and_file+0x24>)
 8001b70:	f012 f8aa 	bl	8013cc8 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b74:	2213      	movs	r2, #19
 8001b76:	4905      	ldr	r1, [pc, #20]	; (8001b8c <fopen_folder_and_file+0x28>)
 8001b78:	4805      	ldr	r0, [pc, #20]	; (8001b90 <fopen_folder_and_file+0x2c>)
 8001b7a:	f011 fb39 	bl	80131f0 <f_open>

	f_chdir("..");
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <fopen_folder_and_file+0x30>)
 8001b80:	f012 f8a2 	bl	8013cc8 <f_chdir>


}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20043444 	.word	0x20043444
 8001b8c:	20042304 	.word	0x20042304
 8001b90:	200435d4 	.word	0x200435d4
 8001b94:	08019b7c 	.word	0x08019b7c

08001b98 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	e007      	b.n	8001bb4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001ba4:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <bufclear+0x30>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bb8:	ddf4      	ble.n	8001ba4 <bufclear+0xc>
	}
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20043544 	.word	0x20043544

08001bcc <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001be0:	2200      	movs	r2, #0
 8001be2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001be6:	480e      	ldr	r0, [pc, #56]	; (8001c20 <read_byte+0x54>)
 8001be8:	f009 fb00 	bl	800b1ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bec:	f107 010f 	add.w	r1, r7, #15
 8001bf0:	2364      	movs	r3, #100	; 0x64
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	480b      	ldr	r0, [pc, #44]	; (8001c24 <read_byte+0x58>)
 8001bf6:	f00c fca9 	bl	800e54c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001bfa:	f107 010e 	add.w	r1, r7, #14
 8001bfe:	2364      	movs	r3, #100	; 0x64
 8001c00:	2201      	movs	r2, #1
 8001c02:	4808      	ldr	r0, [pc, #32]	; (8001c24 <read_byte+0x58>)
 8001c04:	f00c fdd6 	bl	800e7b4 <HAL_SPI_Receive>
	CS_SET;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c0e:	4804      	ldr	r0, [pc, #16]	; (8001c20 <read_byte+0x54>)
 8001c10:	f009 faec 	bl	800b1ec <HAL_GPIO_WritePin>

	return val;
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40020400 	.word	0x40020400
 8001c24:	20044670 	.word	0x20044670

08001c28 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460a      	mov	r2, r1
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	4613      	mov	r3, r2
 8001c36:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c48:	480c      	ldr	r0, [pc, #48]	; (8001c7c <write_byte+0x54>)
 8001c4a:	f009 facf 	bl	800b1ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c4e:	f107 010f 	add.w	r1, r7, #15
 8001c52:	2364      	movs	r3, #100	; 0x64
 8001c54:	2201      	movs	r2, #1
 8001c56:	480a      	ldr	r0, [pc, #40]	; (8001c80 <write_byte+0x58>)
 8001c58:	f00c fc78 	bl	800e54c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c5c:	1db9      	adds	r1, r7, #6
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	2201      	movs	r2, #1
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <write_byte+0x58>)
 8001c64:	f00c fc72 	bl	800e54c <HAL_SPI_Transmit>
	CS_SET;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6e:	4803      	ldr	r0, [pc, #12]	; (8001c7c <write_byte+0x54>)
 8001c70:	f009 fabc 	bl	800b1ec <HAL_GPIO_WritePin>
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	20044670 	.word	0x20044670

08001c84 <IMU_init>:

uint16_t IMU_init() {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f7ff ff9c 	bl	8001bcc <read_byte>
 8001c94:	4603      	mov	r3, r0
 8001c96:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001c98:	797b      	ldrb	r3, [r7, #5]
 8001c9a:	2be0      	cmp	r3, #224	; 0xe0
 8001c9c:	d119      	bne.n	8001cd2 <IMU_init+0x4e>
		ret = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2006      	movs	r0, #6
 8001ca6:	f7ff ffbf 	bl	8001c28 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001caa:	2110      	movs	r1, #16
 8001cac:	2003      	movs	r0, #3
 8001cae:	f7ff ffbb 	bl	8001c28 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	207f      	movs	r0, #127	; 0x7f
 8001cb6:	f7ff ffb7 	bl	8001c28 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cba:	2106      	movs	r1, #6
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff ffb3 	bl	8001c28 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001cc2:	2106      	movs	r1, #6
 8001cc4:	2014      	movs	r0, #20
 8001cc6:	f7ff ffaf 	bl	8001c28 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	207f      	movs	r0, #127	; 0x7f
 8001cce:	f7ff ffab 	bl	8001c28 <write_byte>
	}
	return ret;
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <read_gyro_data>:

void read_gyro_data() {
 8001cdc:	b598      	push	{r3, r4, r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001ce0:	2033      	movs	r0, #51	; 0x33
 8001ce2:	f7ff ff73 	bl	8001bcc <read_byte>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	b21c      	sxth	r4, r3
 8001cec:	2034      	movs	r0, #52	; 0x34
 8001cee:	f7ff ff6d 	bl	8001bcc <read_byte>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b21b      	sxth	r3, r3
 8001cf6:	4323      	orrs	r3, r4
 8001cf8:	b21a      	sxth	r2, r3
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <read_gyro_data+0x64>)
 8001cfc:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001cfe:	2035      	movs	r0, #53	; 0x35
 8001d00:	f7ff ff64 	bl	8001bcc <read_byte>
 8001d04:	4603      	mov	r3, r0
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	b21c      	sxth	r4, r3
 8001d0a:	2036      	movs	r0, #54	; 0x36
 8001d0c:	f7ff ff5e 	bl	8001bcc <read_byte>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b21b      	sxth	r3, r3
 8001d14:	4323      	orrs	r3, r4
 8001d16:	b21a      	sxth	r2, r3
 8001d18:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <read_gyro_data+0x68>)
 8001d1a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d1c:	2037      	movs	r0, #55	; 0x37
 8001d1e:	f7ff ff55 	bl	8001bcc <read_byte>
 8001d22:	4603      	mov	r3, r0
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b21c      	sxth	r4, r3
 8001d28:	2038      	movs	r0, #56	; 0x38
 8001d2a:	f7ff ff4f 	bl	8001bcc <read_byte>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	4323      	orrs	r3, r4
 8001d34:	b21a      	sxth	r2, r3
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <read_gyro_data+0x6c>)
 8001d38:	801a      	strh	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	bd98      	pop	{r3, r4, r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2004460c 	.word	0x2004460c
 8001d44:	2004460a 	.word	0x2004460a
 8001d48:	20044604 	.word	0x20044604

08001d4c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

float mon_zg;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	805a      	strh	r2, [r3, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	809a      	strh	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	80da      	strh	r2, [r3, #6]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	811a      	strh	r2, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	815a      	strh	r2, [r3, #10]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	60da      	str	r2, [r3, #12]
{

}
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
	...

08001d90 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001d98:	f7ff ff74 	bl	8001c84 <IMU_init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001da0:	f7ff f97e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001da4:	2100      	movs	r1, #0
 8001da6:	2000      	movs	r0, #0
 8001da8:	f7ff f98a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dac:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <_ZN3IMU4initEv+0x44>)
 8001dae:	f7ff f9b1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001db2:	2101      	movs	r1, #1
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff f983 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dba:	89fb      	ldrh	r3, [r7, #14]
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <_ZN3IMU4initEv+0x48>)
 8001dc0:	f7ff f9a8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001dc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dc8:	f007 ff7a 	bl	8009cc0 <HAL_Delay>

}
 8001dcc:	bf00      	nop
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	08019b8c 	.word	0x08019b8c
 8001dd8:	08019b98 	.word	0x08019b98

08001ddc <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001de4:	f7ff ff7a 	bl	8001cdc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001de8:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <_ZN3IMU12updateValuesEv+0x48>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <_ZN3IMU12updateValuesEv+0x4c>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001dfc:	4b0b      	ldr	r3, [pc, #44]	; (8001e2c <_ZN3IMU12updateValuesEv+0x50>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b21a      	sxth	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	815a      	strh	r2, [r3, #10]

	//static int16_t pre_zg;
	//zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter


	mon_zg= zg_;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <_ZN3IMU12updateValuesEv+0x54>)
 8001e16:	edc3 7a00 	vstr	s15, [r3]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2004460c 	.word	0x2004460c
 8001e28:	2004460a 	.word	0x2004460a
 8001e2c:	20044604 	.word	0x20044604
 8001e30:	20000210 	.word	0x20000210
 8001e34:	00000000 	.word	0x00000000

08001e38 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e58:	edc7 7a03 	vstr	s15, [r7, #12]
	float omega = -(corrected_zg / 16.4) * PI / 180;
 8001e5c:	68f8      	ldr	r0, [r7, #12]
 8001e5e:	f7fe fb8b 	bl	8000578 <__aeabi_f2d>
 8001e62:	a316      	add	r3, pc, #88	; (adr r3, 8001ebc <_ZN3IMU8getOmegaEv+0x84>)
 8001e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e68:	f7fe fd08 	bl	800087c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4614      	mov	r4, r2
 8001e72:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e76:	a313      	add	r3, pc, #76	; (adr r3, 8001ec4 <_ZN3IMU8getOmegaEv+0x8c>)
 8001e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fbd2 	bl	8000628 <__aeabi_dmul>
 8001e84:	4603      	mov	r3, r0
 8001e86:	460c      	mov	r4, r1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <_ZN3IMU8getOmegaEv+0x80>)
 8001e92:	f7fe fcf3 	bl	800087c <__aeabi_ddiv>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4621      	mov	r1, r4
 8001e9e:	f7fe febb 	bl	8000c18 <__aeabi_d2f>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	60bb      	str	r3, [r7, #8]

	return omega;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	ee07 3a90 	vmov	s15, r3
}
 8001eac:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40668000 	.word	0x40668000
 8001ebc:	66666666 	.word	0x66666666
 8001ec0:	40306666 	.word	0x40306666
 8001ec4:	54411744 	.word	0x54411744
 8001ec8:	400921fb 	.word	0x400921fb

08001ecc <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001ed4:	466b      	mov	r3, sp
 8001ed6:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001edc:	f007 fef0 	bl	8009cc0 <HAL_Delay>
	lcd_clear();
 8001ee0:	f7ff f8de 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff f8ea 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001eec:	4840      	ldr	r0, [pc, #256]	; (8001ff0 <_ZN3IMU11calibrationEv+0x124>)
 8001eee:	f7ff f911 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff f8e3 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001efa:	483e      	ldr	r0, [pc, #248]	; (8001ff4 <_ZN3IMU11calibrationEv+0x128>)
 8001efc:	f7ff f90a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f04:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f0a:	1e5d      	subs	r5, r3, #1
 8001f0c:	61bd      	str	r5, [r7, #24]
 8001f0e:	462b      	mov	r3, r5
 8001f10:	3301      	adds	r3, #1
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	f04f 0400 	mov.w	r4, #0
 8001f20:	0154      	lsls	r4, r2, #5
 8001f22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f26:	014b      	lsls	r3, r1, #5
 8001f28:	462b      	mov	r3, r5
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	f04f 0400 	mov.w	r4, #0
 8001f3a:	0154      	lsls	r4, r2, #5
 8001f3c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f40:	014b      	lsls	r3, r1, #5
 8001f42:	462b      	mov	r3, r5
 8001f44:	3301      	adds	r3, #1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	3303      	adds	r3, #3
 8001f4a:	3307      	adds	r3, #7
 8001f4c:	08db      	lsrs	r3, r3, #3
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	ebad 0d03 	sub.w	sp, sp, r3
 8001f54:	466b      	mov	r3, sp
 8001f56:	3303      	adds	r3, #3
 8001f58:	089b      	lsrs	r3, r3, #2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f5e:	2300      	movs	r3, #0
 8001f60:	83fb      	strh	r3, [r7, #30]
 8001f62:	8bfa      	ldrh	r2, [r7, #30]
 8001f64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	da13      	bge.n	8001f94 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f72:	8bfb      	ldrh	r3, [r7, #30]
 8001f74:	ee07 2a90 	vmov	s15, r2
 8001f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f86:	2002      	movs	r0, #2
 8001f88:	f007 fe9a 	bl	8009cc0 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f8c:	8bfb      	ldrh	r3, [r7, #30]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	83fb      	strh	r3, [r7, #30]
 8001f92:	e7e6      	b.n	8001f62 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d00e      	beq.n	8001fca <_ZN3IMU11calibrationEv+0xfe>
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fbe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc8:	e7ec      	b.n	8001fa4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001fca:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fce:	ee07 3a90 	vmov	s15, r3
 8001fd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd6:	edd7 6a08 	vldr	s13, [r7, #32]
 8001fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	edc3 7a03 	vstr	s15, [r3, #12]
 8001fe4:	46b5      	mov	sp, r6
}
 8001fe6:	bf00      	nop
 8001fe8:	372c      	adds	r7, #44	; 0x2c
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	08019b9c 	.word	0x08019b9c
 8001ff4:	08019ba8 	.word	0x08019ba8

08001ff8 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af02      	add	r7, sp, #8
 8001ffe:	4603      	mov	r3, r0
 8002000:	460a      	mov	r2, r1
 8002002:	71fb      	strb	r3, [r7, #7]
 8002004:	4613      	mov	r3, r2
 8002006:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002008:	79bb      	ldrb	r3, [r7, #6]
 800200a:	b299      	uxth	r1, r3
 800200c:	1dfa      	adds	r2, r7, #7
 800200e:	2364      	movs	r3, #100	; 0x64
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2301      	movs	r3, #1
 8002014:	480c      	ldr	r0, [pc, #48]	; (8002048 <INA260_read+0x50>)
 8002016:	f009 fa3b 	bl	800b490 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 800201a:	79bb      	ldrb	r3, [r7, #6]
 800201c:	b299      	uxth	r1, r3
 800201e:	f107 020c 	add.w	r2, r7, #12
 8002022:	2364      	movs	r3, #100	; 0x64
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2302      	movs	r3, #2
 8002028:	4807      	ldr	r0, [pc, #28]	; (8002048 <INA260_read+0x50>)
 800202a:	f009 fb2f 	bl	800b68c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 800202e:	7b3b      	ldrb	r3, [r7, #12]
 8002030:	021b      	lsls	r3, r3, #8
 8002032:	b21a      	sxth	r2, r3
 8002034:	7b7b      	ldrb	r3, [r7, #13]
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21b      	sxth	r3, r3
 800203c:	81fb      	strh	r3, [r7, #14]
	return val;
 800203e:	89fb      	ldrh	r3, [r7, #14]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20044824 	.word	0x20044824

0800204c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b087      	sub	sp, #28
 8002050:	af02      	add	r7, sp, #8
 8002052:	4604      	mov	r4, r0
 8002054:	4608      	mov	r0, r1
 8002056:	4611      	mov	r1, r2
 8002058:	461a      	mov	r2, r3
 800205a:	4623      	mov	r3, r4
 800205c:	71fb      	strb	r3, [r7, #7]
 800205e:	4603      	mov	r3, r0
 8002060:	71bb      	strb	r3, [r7, #6]
 8002062:	460b      	mov	r3, r1
 8002064:	717b      	strb	r3, [r7, #5]
 8002066:	4613      	mov	r3, r2
 8002068:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	733b      	strb	r3, [r7, #12]
 800206e:	79bb      	ldrb	r3, [r7, #6]
 8002070:	737b      	strb	r3, [r7, #13]
 8002072:	797b      	ldrb	r3, [r7, #5]
 8002074:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8002076:	793b      	ldrb	r3, [r7, #4]
 8002078:	b299      	uxth	r1, r3
 800207a:	f107 020c 	add.w	r2, r7, #12
 800207e:	2364      	movs	r3, #100	; 0x64
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	2303      	movs	r3, #3
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <INA260_write+0x48>)
 8002086:	f009 fa03 	bl	800b490 <HAL_I2C_Master_Transmit>
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	bd90      	pop	{r4, r7, pc}
 8002092:	bf00      	nop
 8002094:	20044824 	.word	0x20044824

08002098 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
 80020a2:	460b      	mov	r3, r1
 80020a4:	71bb      	strb	r3, [r7, #6]
 80020a6:	4613      	mov	r3, r2
 80020a8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 80020aa:	797b      	ldrb	r3, [r7, #5]
 80020ac:	79ba      	ldrb	r2, [r7, #6]
 80020ae:	79f9      	ldrb	r1, [r7, #7]
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff ffcb 	bl	800204c <INA260_write>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	461a      	mov	r2, r3
 80020cc:	21df      	movs	r1, #223	; 0xdf
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7ff ffe2 	bl	8002098 <setConfig>
}
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
{

}
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b084      	sub	sp, #16
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020fc:	2300      	movs	r3, #0
 80020fe:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002104:	482a      	ldr	r0, [pc, #168]	; (80021b0 <_ZN8JoyStick8getValueEv+0xbc>)
 8002106:	f009 f859 	bl	800b1bc <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	bf0c      	ite	eq
 8002110:	2301      	moveq	r3, #1
 8002112:	2300      	movne	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <_ZN8JoyStick8getValueEv+0x2e>
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8002122:	2101      	movs	r1, #1
 8002124:	4823      	ldr	r0, [pc, #140]	; (80021b4 <_ZN8JoyStick8getValueEv+0xc0>)
 8002126:	f009 f849 	bl	800b1bc <HAL_GPIO_ReadPin>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <_ZN8JoyStick8getValueEv+0x4e>
 800213a:	89fb      	ldrh	r3, [r7, #14]
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8002142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002146:	481a      	ldr	r0, [pc, #104]	; (80021b0 <_ZN8JoyStick8getValueEv+0xbc>)
 8002148:	f009 f838 	bl	800b1bc <HAL_GPIO_ReadPin>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	bf0c      	ite	eq
 8002152:	2301      	moveq	r3, #1
 8002154:	2300      	movne	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <_ZN8JoyStick8getValueEv+0x70>
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8002164:	2104      	movs	r1, #4
 8002166:	4814      	ldr	r0, [pc, #80]	; (80021b8 <_ZN8JoyStick8getValueEv+0xc4>)
 8002168:	f009 f828 	bl	800b1bc <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	bf0c      	ite	eq
 8002172:	2301      	moveq	r3, #1
 8002174:	2300      	movne	r3, #0
 8002176:	b2db      	uxtb	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <_ZN8JoyStick8getValueEv+0x90>
 800217c:	89fb      	ldrh	r3, [r7, #14]
 800217e:	f043 0308 	orr.w	r3, r3, #8
 8002182:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8002184:	2180      	movs	r1, #128	; 0x80
 8002186:	480a      	ldr	r0, [pc, #40]	; (80021b0 <_ZN8JoyStick8getValueEv+0xbc>)
 8002188:	f009 f818 	bl	800b1bc <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <_ZN8JoyStick8getValueEv+0xb0>
 800219c:	89fb      	ldrh	r3, [r7, #14]
 800219e:	f043 0310 	orr.w	r3, r3, #16
 80021a2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80021a4:	89fb      	ldrh	r3, [r7, #14]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40020400 	.word	0x40020400

080021bc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	460b      	mov	r3, r1
 80021c6:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b52      	cmp	r3, #82	; 0x52
 80021cc:	d112      	bne.n	80021f4 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80021ce:	2200      	movs	r2, #0
 80021d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d4:	4856      	ldr	r0, [pc, #344]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80021d6:	f009 f809 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021da:	2201      	movs	r2, #1
 80021dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e0:	4853      	ldr	r0, [pc, #332]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80021e2:	f009 f803 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021e6:	2201      	movs	r2, #1
 80021e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ec:	4850      	ldr	r0, [pc, #320]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80021ee:	f008 fffd 	bl	800b1ec <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021f2:	e098      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021f4:	78fb      	ldrb	r3, [r7, #3]
 80021f6:	2b47      	cmp	r3, #71	; 0x47
 80021f8:	d112      	bne.n	8002220 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021fa:	2201      	movs	r2, #1
 80021fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002200:	484b      	ldr	r0, [pc, #300]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002202:	f008 fff3 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220c:	4848      	ldr	r0, [pc, #288]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800220e:	f008 ffed 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002212:	2201      	movs	r2, #1
 8002214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002218:	4845      	ldr	r0, [pc, #276]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800221a:	f008 ffe7 	bl	800b1ec <HAL_GPIO_WritePin>
}
 800221e:	e082      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b42      	cmp	r3, #66	; 0x42
 8002224:	d112      	bne.n	800224c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800222c:	4840      	ldr	r0, [pc, #256]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800222e:	f008 ffdd 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002232:	2201      	movs	r2, #1
 8002234:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002238:	483d      	ldr	r0, [pc, #244]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800223a:	f008 ffd7 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800223e:	2200      	movs	r2, #0
 8002240:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002244:	483a      	ldr	r0, [pc, #232]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002246:	f008 ffd1 	bl	800b1ec <HAL_GPIO_WritePin>
}
 800224a:	e06c      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 800224c:	78fb      	ldrb	r3, [r7, #3]
 800224e:	2b43      	cmp	r3, #67	; 0x43
 8002250:	d112      	bne.n	8002278 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002258:	4835      	ldr	r0, [pc, #212]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 ffc7 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800225e:	2200      	movs	r2, #0
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4832      	ldr	r0, [pc, #200]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f008 ffc1 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002270:	482f      	ldr	r0, [pc, #188]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002272:	f008 ffbb 	bl	800b1ec <HAL_GPIO_WritePin>
}
 8002276:	e056      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	2b4d      	cmp	r3, #77	; 0x4d
 800227c:	d112      	bne.n	80022a4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002284:	482a      	ldr	r0, [pc, #168]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 ffb1 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002290:	4827      	ldr	r0, [pc, #156]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f008 ffab 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229c:	4824      	ldr	r0, [pc, #144]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800229e:	f008 ffa5 	bl	800b1ec <HAL_GPIO_WritePin>
}
 80022a2:	e040      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	2b59      	cmp	r3, #89	; 0x59
 80022a8:	d112      	bne.n	80022d0 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b0:	481f      	ldr	r0, [pc, #124]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 ff9b 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022bc:	481c      	ldr	r0, [pc, #112]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f008 ff95 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c8:	4819      	ldr	r0, [pc, #100]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80022ca:	f008 ff8f 	bl	800b1ec <HAL_GPIO_WritePin>
}
 80022ce:	e02a      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 80022d0:	78fb      	ldrb	r3, [r7, #3]
 80022d2:	2b57      	cmp	r3, #87	; 0x57
 80022d4:	d112      	bne.n	80022fc <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022dc:	4814      	ldr	r0, [pc, #80]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 ff85 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e8:	4811      	ldr	r0, [pc, #68]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f008 ff7f 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022ee:	2200      	movs	r2, #0
 80022f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f4:	480e      	ldr	r0, [pc, #56]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 80022f6:	f008 ff79 	bl	800b1ec <HAL_GPIO_WritePin>
}
 80022fa:	e014      	b.n	8002326 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	2b7e      	cmp	r3, #126	; 0x7e
 8002300:	d111      	bne.n	8002326 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002308:	4809      	ldr	r0, [pc, #36]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 ff6f 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800230e:	2201      	movs	r2, #1
 8002310:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002314:	4806      	ldr	r0, [pc, #24]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f008 ff69 	bl	800b1ec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800231a:	2201      	movs	r2, #1
 800231c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <_ZN3LED9fullColorEc+0x174>)
 8002322:	f008 ff63 	bl	800b1ec <HAL_GPIO_WritePin>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40020000 	.word	0x40020000

08002334 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
 8002340:	4613      	mov	r3, r2
 8002342:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002352:	4813      	ldr	r0, [pc, #76]	; (80023a0 <_ZN3LED2LREaa+0x6c>)
 8002354:	f008 ff4a 	bl	800b1ec <HAL_GPIO_WritePin>
 8002358:	e009      	b.n	800236e <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800235a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002368:	480d      	ldr	r0, [pc, #52]	; (80023a0 <_ZN3LED2LREaa+0x6c>)
 800236a:	f008 ff3f 	bl	800b1ec <HAL_GPIO_WritePin>

	if(r_status == 1)
 800236e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d106      	bne.n	8002384 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002376:	2201      	movs	r2, #1
 8002378:	f44f 7100 	mov.w	r1, #512	; 0x200
 800237c:	4808      	ldr	r0, [pc, #32]	; (80023a0 <_ZN3LED2LREaa+0x6c>)
 800237e:	f008 ff35 	bl	800b1ec <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8002382:	e009      	b.n	8002398 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8002384:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800238c:	2200      	movs	r2, #0
 800238e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <_ZN3LED2LREaa+0x6c>)
 8002394:	f008 ff2a 	bl	800b1ec <HAL_GPIO_WritePin>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40020000 	.word	0x40020000

080023a4 <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b092      	sub	sp, #72	; 0x48
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff fe92 	bl	80020dc <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	637b      	str	r3, [r7, #52]	; 0x34
 80023bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
 80023c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c2:	331c      	adds	r3, #28
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
 80023c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d008      	beq.n	80023e0 <_ZN10LineSensorC1Ev+0x3c>
 80023ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	2200      	movs	r2, #0
 80023d6:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 80023d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023da:	3302      	adds	r3, #2
 80023dc:	647b      	str	r3, [r7, #68]	; 0x44
 80023de:	e7f2      	b.n	80023c6 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80023e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80023e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ea:	643b      	str	r3, [r7, #64]	; 0x40
 80023ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ee:	3338      	adds	r3, #56	; 0x38
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
 80023f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d009      	beq.n	800240e <_ZN10LineSensorC1Ev+0x6a>
 80023fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fc:	623b      	str	r3, [r7, #32]
		s = 0;
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002408:	3304      	adds	r3, #4
 800240a:	643b      	str	r3, [r7, #64]	; 0x40
 800240c:	e7f1      	b.n	80023f2 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3338      	adds	r3, #56	; 0x38
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	429a      	cmp	r2, r3
 8002426:	d009      	beq.n	800243c <_ZN10LineSensorC1Ev+0x98>
 8002428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800242a:	617b      	str	r3, [r7, #20]
		m = 0;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002436:	3304      	adds	r3, #4
 8002438:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243a:	e7f1      	b.n	8002420 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	63bb      	str	r3, [r7, #56]	; 0x38
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	3338      	adds	r3, #56	; 0x38
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	429a      	cmp	r2, r3
 8002454:	d009      	beq.n	800246a <_ZN10LineSensorC1Ev+0xc6>
 8002456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002458:	60bb      	str	r3, [r7, #8]
		s = 1;
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002460:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8002462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002464:	3304      	adds	r3, #4
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
 8002468:	e7f1      	b.n	800244e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4618      	mov	r0, r3
 800246e:	3748      	adds	r7, #72	; 0x48
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	220e      	movs	r2, #14
 8002480:	4619      	mov	r1, r3
 8002482:	4803      	ldr	r0, [pc, #12]	; (8002490 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8002484:	f007 fc82 	bl	8009d8c <HAL_ADC_Start_DMA>
}
 8002488:	bf00      	nop
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20044748 	.word	0x20044748

08002494 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 800249c:	2300      	movs	r3, #0
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2b0d      	cmp	r3, #13
 80024a4:	dc2f      	bgt.n	8002506 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3392      	adds	r3, #146	; 0x92
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	ed93 7a00 	vldr	s14, [r3]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	33a0      	adds	r3, #160	; 0xa0
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	3304      	adds	r3, #4
 80024d2:	edd3 7a00 	vldr	s15, [r3]
 80024d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	4619      	mov	r1, r3
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	460b      	mov	r3, r1
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	1a5b      	subs	r3, r3, r1
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	68f9      	ldr	r1, [r7, #12]
 80024f0:	440b      	add	r3, r1
 80024f2:	3306      	adds	r3, #6
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	4413      	add	r3, r2
 80024f8:	3304      	adds	r3, #4
 80024fa:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3301      	adds	r3, #1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e7cc      	b.n	80024a0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	b2da      	uxtb	r2, r3
 800250e:	4b07      	ldr	r3, [pc, #28]	; (800252c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002510:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b09      	cmp	r3, #9
 8002518:	d902      	bls.n	8002520 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800251a:	4b04      	ldr	r3, [pc, #16]	; (800252c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]


}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	20000250 	.word	0x20000250

08002530 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002530:	b490      	push	{r4, r7}
 8002532:	b08e      	sub	sp, #56	; 0x38
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002538:	2300      	movs	r3, #0
 800253a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800253e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002542:	2b0d      	cmp	r3, #13
 8002544:	f200 8087 	bhi.w	8002656 <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800254e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002552:	2b09      	cmp	r3, #9
 8002554:	d81c      	bhi.n	8002590 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002556:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800255a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800255e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	4613      	mov	r3, r2
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	1a9b      	subs	r3, r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4423      	add	r3, r4
 800256e:	3306      	adds	r3, #6
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4403      	add	r3, r0
 8002574:	3304      	adds	r3, #4
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	008b      	lsls	r3, r1, #2
 800257a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800257e:	440b      	add	r3, r1
 8002580:	3b30      	subs	r3, #48	; 0x30
 8002582:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002584:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002588:	3301      	adds	r3, #1
 800258a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800258e:	e7de      	b.n	800254e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002590:	2300      	movs	r3, #0
 8002592:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002596:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800259a:	2b09      	cmp	r3, #9
 800259c:	d84d      	bhi.n	800263a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 800259e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025a2:	3301      	adds	r3, #1
 80025a4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ac:	2b09      	cmp	r3, #9
 80025ae:	d83e      	bhi.n	800262e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80025b0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025ba:	4413      	add	r3, r2
 80025bc:	3b30      	subs	r3, #48	; 0x30
 80025be:	ed93 7a00 	vldr	s14, [r3]
 80025c2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025cc:	4413      	add	r3, r2
 80025ce:	3b30      	subs	r3, #48	; 0x30
 80025d0:	edd3 7a00 	vldr	s15, [r3]
 80025d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025dc:	d521      	bpl.n	8002622 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80025de:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025e8:	4413      	add	r3, r2
 80025ea:	3b30      	subs	r3, #48	; 0x30
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025f0:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025f4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025f8:	0092      	lsls	r2, r2, #2
 80025fa:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025fe:	440a      	add	r2, r1
 8002600:	3a30      	subs	r2, #48	; 0x30
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800260a:	440b      	add	r3, r1
 800260c:	3b30      	subs	r3, #48	; 0x30
 800260e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002610:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800261a:	4413      	add	r3, r2
 800261c:	3b30      	subs	r3, #48	; 0x30
 800261e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002620:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002622:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002626:	3301      	adds	r3, #1
 8002628:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800262c:	e7bc      	b.n	80025a8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800262e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002632:	3301      	adds	r3, #1
 8002634:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002638:	e7ad      	b.n	8002596 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 800263a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	33b0      	adds	r3, #176	; 0xb0
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	440b      	add	r3, r1
 8002648:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800264a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800264e:	3301      	adds	r3, #1
 8002650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002654:	e773      	b.n	800253e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <_ZN10LineSensor18updateSensorValuesEv+0x1c8>)
 800265e:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002666:	4a25      	ldr	r2, [pc, #148]	; (80026fc <_ZN10LineSensor18updateSensorValuesEv+0x1cc>)
 8002668:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8002670:	4a23      	ldr	r2, [pc, #140]	; (8002700 <_ZN10LineSensor18updateSensorValuesEv+0x1d0>)
 8002672:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800267a:	4a22      	ldr	r2, [pc, #136]	; (8002704 <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 800267c:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8002684:	4a20      	ldr	r2, [pc, #128]	; (8002708 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 8002686:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800268e:	4a1f      	ldr	r2, [pc, #124]	; (800270c <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 8002690:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8002698:	4a1d      	ldr	r2, [pc, #116]	; (8002710 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 800269a:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 80026a4:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80026ac:	4a1a      	ldr	r2, [pc, #104]	; (8002718 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 80026ae:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 80026b8:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 80026c2:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 80026cc:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80026d4:	4a14      	ldr	r2, [pc, #80]	; (8002728 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 80026d6:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 80026e0:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 80026ea:	6013      	str	r3, [r2, #0]
}
 80026ec:	bf00      	nop
 80026ee:	3738      	adds	r7, #56	; 0x38
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc90      	pop	{r4, r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	20000214 	.word	0x20000214
 80026fc:	20000218 	.word	0x20000218
 8002700:	2000021c 	.word	0x2000021c
 8002704:	20000220 	.word	0x20000220
 8002708:	20000224 	.word	0x20000224
 800270c:	20000228 	.word	0x20000228
 8002710:	2000022c 	.word	0x2000022c
 8002714:	20000230 	.word	0x20000230
 8002718:	20000234 	.word	0x20000234
 800271c:	20000238 	.word	0x20000238
 8002720:	2000023c 	.word	0x2000023c
 8002724:	20000240 	.word	0x20000240
 8002728:	20000244 	.word	0x20000244
 800272c:	20000248 	.word	0x20000248
 8002730:	2000024c 	.word	0x2000024c

08002734 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0a0      	sub	sp, #128	; 0x80
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800273c:	2064      	movs	r0, #100	; 0x64
 800273e:	f007 fabf 	bl	8009cc0 <HAL_Delay>

	lcd_clear();
 8002742:	f7fe fcad 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002746:	2100      	movs	r1, #0
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe fcb9 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800274e:	4886      	ldr	r0, [pc, #536]	; (8002968 <_ZN10LineSensor11calibrationEv+0x234>)
 8002750:	f7fe fce0 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002754:	2101      	movs	r1, #1
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fcb2 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800275c:	4883      	ldr	r0, [pc, #524]	; (800296c <_ZN10LineSensor11calibrationEv+0x238>)
 800275e:	f7fe fcd9 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002762:	2300      	movs	r3, #0
 8002764:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002768:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800276c:	2b0d      	cmp	r3, #13
 800276e:	d823      	bhi.n	80027b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002770:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002774:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	32b0      	adds	r2, #176	; 0xb0
 800277c:	0092      	lsls	r2, r2, #2
 800277e:	440a      	add	r2, r1
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002788:	440b      	add	r3, r1
 800278a:	3b40      	subs	r3, #64	; 0x40
 800278c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800278e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002792:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	32b0      	adds	r2, #176	; 0xb0
 800279a:	0092      	lsls	r2, r2, #2
 800279c:	440a      	add	r2, r1
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027a6:	440b      	add	r3, r1
 80027a8:	3b78      	subs	r3, #120	; 0x78
 80027aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027b0:	3301      	adds	r3, #1
 80027b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027b6:	e7d7      	b.n	8002768 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fc98 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d079      	beq.n	80028c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027de:	2b0d      	cmp	r3, #13
 80027e0:	d850      	bhi.n	8002884 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80027e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027ec:	4413      	add	r3, r2
 80027ee:	3b40      	subs	r3, #64	; 0x40
 80027f0:	ed93 7a00 	vldr	s14, [r3]
 80027f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	33b0      	adds	r3, #176	; 0xb0
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	edd3 7a00 	vldr	s15, [r3]
 8002804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800280c:	d50f      	bpl.n	800282e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800280e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002812:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002816:	6879      	ldr	r1, [r7, #4]
 8002818:	32b0      	adds	r2, #176	; 0xb0
 800281a:	0092      	lsls	r2, r2, #2
 800281c:	440a      	add	r2, r1
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002826:	440b      	add	r3, r1
 8002828:	3b40      	subs	r3, #64	; 0x40
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e024      	b.n	8002878 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800282e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002838:	4413      	add	r3, r2
 800283a:	3b78      	subs	r3, #120	; 0x78
 800283c:	ed93 7a00 	vldr	s14, [r3]
 8002840:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	33b0      	adds	r3, #176	; 0xb0
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	edd3 7a00 	vldr	s15, [r3]
 8002850:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002858:	dd0e      	ble.n	8002878 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800285a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800285e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	32b0      	adds	r2, #176	; 0xb0
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	440a      	add	r2, r1
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002872:	440b      	add	r3, r1
 8002874:	3b78      	subs	r3, #120	; 0x78
 8002876:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002878:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800287c:	3301      	adds	r3, #1
 800287e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002882:	e7aa      	b.n	80027da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800288a:	4618      	mov	r0, r3
 800288c:	f002 fd12 	bl	80052b4 <_ZN12RotarySwitch8getValueEv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d009      	beq.n	80028b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028a6:	2201      	movs	r2, #1
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fd41 	bl	8002334 <_ZN3LED2LREaa>
 80028b2:	e781      	b.n	80027b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80028ba:	2200      	movs	r2, #0
 80028bc:	f04f 31ff 	mov.w	r1, #4294967295
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fd37 	bl	8002334 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80028c6:	e777      	b.n	80027b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028c8:	2300      	movs	r3, #0
 80028ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80028ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028d2:	2b0d      	cmp	r3, #13
 80028d4:	d826      	bhi.n	8002924 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80028d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028e0:	4413      	add	r3, r2
 80028e2:	3b40      	subs	r3, #64	; 0x40
 80028e4:	ed93 7a00 	vldr	s14, [r3]
 80028e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028f2:	4413      	add	r3, r2
 80028f4:	3b78      	subs	r3, #120	; 0x78
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002902:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002970 <_ZN10LineSensor11calibrationEv+0x23c>
 8002906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	3392      	adds	r3, #146	; 0x92
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3304      	adds	r3, #4
 8002914:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002918:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800291c:	3301      	adds	r3, #1
 800291e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002922:	e7d4      	b.n	80028ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002924:	2300      	movs	r3, #0
 8002926:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800292a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800292e:	2b0d      	cmp	r3, #13
 8002930:	d815      	bhi.n	800295e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002932:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002936:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002940:	440a      	add	r2, r1
 8002942:	3a78      	subs	r2, #120	; 0x78
 8002944:	6812      	ldr	r2, [r2, #0]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	33a0      	adds	r3, #160	; 0xa0
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3304      	adds	r3, #4
 8002950:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002952:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002956:	3301      	adds	r3, #1
 8002958:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800295c:	e7e5      	b.n	800292a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800295e:	bf00      	nop
 8002960:	3780      	adds	r7, #128	; 0x80
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	08019bb4 	.word	0x08019bb4
 800296c:	08019bc0 	.word	0x08019bc0
 8002970:	447a0000 	.word	0x447a0000

08002974 <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002980:	2303      	movs	r3, #3
 8002982:	81bb      	strh	r3, [r7, #12]
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	2b0a      	cmp	r3, #10
 8002988:	d814      	bhi.n	80029b4 <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 800298a:	89bb      	ldrh	r3, [r7, #12]
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	33b0      	adds	r3, #176	; 0xb0
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a08 <_ZN10LineSensor13emergencyStopEv+0x94>
 800299c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a4:	db02      	blt.n	80029ac <_ZN10LineSensor13emergencyStopEv+0x38>
 80029a6:	89fb      	ldrh	r3, [r7, #14]
 80029a8:	3301      	adds	r3, #1
 80029aa:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 80029ac:	89bb      	ldrh	r3, [r7, #12]
 80029ae:	3301      	adds	r3, #1
 80029b0:	81bb      	strh	r3, [r7, #12]
 80029b2:	e7e7      	b.n	8002984 <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 80029b4:	89fb      	ldrh	r3, [r7, #14]
 80029b6:	2b07      	cmp	r3, #7
 80029b8:	d906      	bls.n	80029c8 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029bc:	881b      	ldrh	r3, [r3, #0]
 80029be:	3301      	adds	r3, #1
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029c4:	801a      	strh	r2, [r3, #0]
 80029c6:	e002      	b.n	80029ce <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	2b63      	cmp	r3, #99	; 0x63
 80029d4:	d903      	bls.n	80029de <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 80029d6:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
 80029dc:	e002      	b.n	80029e4 <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	f242 720f 	movw	r2, #9999	; 0x270f
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d903      	bls.n	80029f8 <_ZN10LineSensor13emergencyStopEv+0x84>
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <_ZN10LineSensor13emergencyStopEv+0x98>)
 80029f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80029f6:	801a      	strh	r2, [r3, #0]

	return flag;
 80029f8:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]

}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr
 8002a08:	44098000 	.word	0x44098000
 8002a0c:	20000252 	.word	0x20000252
 8002a10:	20000254 	.word	0x20000254

08002a14 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a22:	eef0 7ae7 	vabs.f32	s15, s15
 8002a26:	eeb0 0a67 	vmov.f32	s0, s15
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	645a      	str	r2, [r3, #68]	; 0x44
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f04f 0200 	mov.w	r2, #0
 8002a8c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ac0:	3350      	adds	r3, #80	; 0x50
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002acc:	3352      	adds	r3, #82	; 0x52
 8002ace:	2200      	movs	r2, #0
 8002ad0:	801a      	strh	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002ad8:	3354      	adds	r3, #84	; 0x54
 8002ada:	2200      	movs	r2, #0
 8002adc:	801a      	strh	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ae4:	3388      	adds	r3, #136	; 0x88
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	801a      	strh	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002af0:	338a      	adds	r3, #138	; 0x8a
 8002af2:	2200      	movs	r2, #0
 8002af4:	801a      	strh	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002afc:	338c      	adds	r3, #140	; 0x8c
 8002afe:	2200      	movs	r2, #0
 8002b00:	801a      	strh	r2, [r3, #0]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b08:	338e      	adds	r3, #142	; 0x8e
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	701a      	strb	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b14:	338f      	adds	r3, #143	; 0x8f
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b20:	3390      	adds	r3, #144	; 0x90
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b2c:	3394      	adds	r3, #148	; 0x94
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b3a:	3398      	adds	r3, #152	; 0x98
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b48:	339c      	adds	r3, #156	; 0x9c
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b56:	33a0      	adds	r3, #160	; 0xa0
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b64:	33a4      	adds	r3, #164	; 0xa4
 8002b66:	2200      	movs	r2, #0
 8002b68:	801a      	strh	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b70:	33a6      	adds	r3, #166	; 0xa6
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a3a      	ldr	r2, [r7, #32]
 8002b8c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b92:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b98:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b9e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba4:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bac:	2300      	movs	r3, #0
 8002bae:	82fb      	strh	r3, [r7, #22]
 8002bb0:	8afb      	ldrh	r3, [r7, #22]
 8002bb2:	f241 726f 	movw	r2, #5999	; 0x176f
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d80d      	bhi.n	8002bd6 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a2>
		velocity_table_[i] = 0;
 8002bba:	8afb      	ldrh	r3, [r7, #22]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002bce:	8afb      	ldrh	r3, [r7, #22]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	82fb      	strh	r3, [r7, #22]
 8002bd4:	e7ec      	b.n	8002bb0 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17c>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	82bb      	strh	r3, [r7, #20]
 8002bda:	8abb      	ldrh	r3, [r7, #20]
 8002bdc:	2b63      	cmp	r3, #99	; 0x63
 8002bde:	d80d      	bhi.n	8002bfc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002be0:	8abb      	ldrh	r3, [r7, #20]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002be8:	3316      	adds	r3, #22
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002bf4:	8abb      	ldrh	r3, [r7, #20]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	82bb      	strh	r3, [r7, #20]
 8002bfa:	e7ee      	b.n	8002bda <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a6>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	827b      	strh	r3, [r7, #18]
 8002c00:	8a7b      	ldrh	r3, [r7, #18]
 8002c02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c06:	d20d      	bcs.n	8002c24 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f0>
		sideline_distance_[i] = 0;
 8002c08:	8a7b      	ldrh	r3, [r7, #18]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c10:	333a      	adds	r3, #58	; 0x3a
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c1c:	8a7b      	ldrh	r3, [r7, #18]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	827b      	strh	r3, [r7, #18]
 8002c22:	e7ed      	b.n	8002c00 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c24:	2300      	movs	r3, #0
 8002c26:	823b      	strh	r3, [r7, #16]
 8002c28:	8a3b      	ldrh	r3, [r7, #16]
 8002c2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c2e:	d20d      	bcs.n	8002c4c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x218>
		all_sideline_distance_[i] = 0;
 8002c30:	8a3b      	ldrh	r3, [r7, #16]
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002c38:	332e      	adds	r3, #46	; 0x2e
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c44:	8a3b      	ldrh	r3, [r7, #16]
 8002c46:	3301      	adds	r3, #1
 8002c48:	823b      	strh	r3, [r7, #16]
 8002c4a:	e7ed      	b.n	8002c28 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f4>
	}
}
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	371c      	adds	r7, #28
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002c80:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002c94:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002ca0:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002ca4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca8:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002cac:	4a06      	ldr	r2, [pc, #24]	; (8002cc8 <_ZN9LineTrace9calcErrorEv+0x6c>)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6013      	str	r3, [r2, #0]

	//diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
	//mon_diff_lpf = diff;

	return diff;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	ee07 3a90 	vmov	s15, r3

}
 8002cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000258 	.word	0x20000258
 8002ccc:	00000000 	.word	0x00000000

08002cd0 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ffbf 	bl	8002c5c <_ZN9LineTrace9calcErrorEv>
 8002cde:	ed87 0a03 	vstr	s0, [r7, #12]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d007      	beq.n	8002cfc <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002cec:	4b66      	ldr	r3, [pc, #408]	; (8002e88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}

	if(mode_selector_ == FIRST_RUNNING){
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d02:	3354      	adds	r3, #84	; 0x54
 8002d04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d14c      	bne.n	8002da6 <_ZN9LineTrace8pidTraceEv+0xd6>
		p = kp_slow_ * diff;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002d12:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1a:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_slow_ * (diff - pre_diff) / DELTA_T;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8002d24:	4b59      	ldr	r3, [pc, #356]	; (8002e8c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d36:	ee17 0a90 	vmov	r0, s15
 8002d3a:	f7fd fc1d 	bl	8000578 <__aeabi_f2d>
 8002d3e:	a350      	add	r3, pc, #320	; (adr r3, 8002e80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d44:	f7fd fd9a 	bl	800087c <__aeabi_ddiv>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4621      	mov	r1, r4
 8002d50:	f7fd ff62 	bl	8000c18 <__aeabi_d2f>
 8002d54:	4603      	mov	r3, r0
 8002d56:	613b      	str	r3, [r7, #16]
		i += ki_slow_ * diff * DELTA_T;
 8002d58:	4b4b      	ldr	r3, [pc, #300]	; (8002e88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc0b 	bl	8000578 <__aeabi_f2d>
 8002d62:	4604      	mov	r4, r0
 8002d64:	460d      	mov	r5, r1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002d6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d74:	ee17 0a90 	vmov	r0, s15
 8002d78:	f7fd fbfe 	bl	8000578 <__aeabi_f2d>
 8002d7c:	a340      	add	r3, pc, #256	; (adr r3, 8002e80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fc51 	bl	8000628 <__aeabi_dmul>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	4629      	mov	r1, r5
 8002d8e:	f7fd fa95 	bl	80002bc <__adddf3>
 8002d92:	4603      	mov	r3, r0
 8002d94:	460c      	mov	r4, r1
 8002d96:	4618      	mov	r0, r3
 8002d98:	4621      	mov	r1, r4
 8002d9a:	f7fd ff3d 	bl	8000c18 <__aeabi_d2f>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	4b39      	ldr	r3, [pc, #228]	; (8002e88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e04b      	b.n	8002e3e <_ZN9LineTrace8pidTraceEv+0x16e>
	}
	else{
		p = kp_ * diff;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dac:	ed97 7a03 	vldr	s14, [r7, #12]
 8002db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002db4:	edc7 7a05 	vstr	s15, [r7, #20]
		d = kd_ * (diff - pre_diff) / DELTA_T;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002dc0:	edd3 7a00 	vldr	s15, [r3]
 8002dc4:	edd7 6a03 	vldr	s13, [r7, #12]
 8002dc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd0:	ee17 0a90 	vmov	r0, s15
 8002dd4:	f7fd fbd0 	bl	8000578 <__aeabi_f2d>
 8002dd8:	a329      	add	r3, pc, #164	; (adr r3, 8002e80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dde:	f7fd fd4d 	bl	800087c <__aeabi_ddiv>
 8002de2:	4603      	mov	r3, r0
 8002de4:	460c      	mov	r4, r1
 8002de6:	4618      	mov	r0, r3
 8002de8:	4621      	mov	r1, r4
 8002dea:	f7fd ff15 	bl	8000c18 <__aeabi_d2f>
 8002dee:	4603      	mov	r3, r0
 8002df0:	613b      	str	r3, [r7, #16]
		i += ki_ * diff * DELTA_T;
 8002df2:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fd fbbe 	bl	8000578 <__aeabi_f2d>
 8002dfc:	4604      	mov	r4, r0
 8002dfe:	460d      	mov	r5, r1
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	ee17 0a90 	vmov	r0, s15
 8002e12:	f7fd fbb1 	bl	8000578 <__aeabi_f2d>
 8002e16:	a31a      	add	r3, pc, #104	; (adr r3, 8002e80 <_ZN9LineTrace8pidTraceEv+0x1b0>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fc04 	bl	8000628 <__aeabi_dmul>
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fa48 	bl	80002bc <__adddf3>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	460c      	mov	r4, r1
 8002e30:	4618      	mov	r0, r3
 8002e32:	4621      	mov	r1, r4
 8002e34:	f7fd fef0 	bl	8000c18 <__aeabi_d2f>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e3c:	601a      	str	r2, [r3, #0]
	}

	float rotation_ratio = p + d + i;
 8002e3e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e42:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <_ZN9LineTrace8pidTraceEv+0x1b8>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8002e62:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e66:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6a:	4610      	mov	r0, r2
 8002e6c:	f002 ff40 	bl	8005cf0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e70:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <_ZN9LineTrace8pidTraceEv+0x1bc>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6013      	str	r3, [r2, #0]

}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e84:	3f50624d 	.word	0x3f50624d
 8002e88:	2000027c 	.word	0x2000027c
 8002e8c:	20000278 	.word	0x20000278

08002e90 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fe fc30 	bl	8001702 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f002 f8c6 	bl	8005038 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f001 fddc 	bl	8004a6e <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ebe:	bf00      	nop
 8002ec0:	3708      	adds	r7, #8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b082      	sub	sp, #8
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f001 fe3d 	bl	8004b52 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002ee8:	b590      	push	{r4, r7, lr}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002efa:	3388      	adds	r3, #136	; 0x88
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	461c      	mov	r4, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f7fe fbef 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f06:	eef0 7a40 	vmov.f32	s15, s0
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f10:	3316      	adds	r3, #22
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f20:	3388      	adds	r3, #136	; 0x88
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f2e:	3388      	adds	r3, #136	; 0x88
 8002f30:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f38:	3388      	adds	r3, #136	; 0x88
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	2b63      	cmp	r3, #99	; 0x63
 8002f3e:	d905      	bls.n	8002f4c <_ZN9LineTrace22storeCrossLineDistanceEv+0x64>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f46:	3388      	adds	r3, #136	; 0x88
 8002f48:	2263      	movs	r2, #99	; 0x63
 8002f4a:	801a      	strh	r2, [r3, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd90      	pop	{r4, r7, pc}

08002f54 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f66:	338a      	adds	r3, #138	; 0x8a
 8002f68:	881b      	ldrh	r3, [r3, #0]
 8002f6a:	461c      	mov	r4, r3
 8002f6c:	4610      	mov	r0, r2
 8002f6e:	f7fe fbb9 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f72:	eef0 7a40 	vmov.f32	s15, s0
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f7c:	333a      	adds	r3, #58	; 0x3a
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f8c:	338a      	adds	r3, #138	; 0x8a
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	3301      	adds	r3, #1
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f9a:	338a      	adds	r3, #138	; 0x8a
 8002f9c:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fa4:	338a      	adds	r3, #138	; 0x8a
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fac:	d306      	bcc.n	8002fbc <_ZN9LineTrace21storeSideLineDistanceEv+0x68>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fb4:	338a      	adds	r3, #138	; 0x8a
 8002fb6:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002fba:	801a      	strh	r2, [r3, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd90      	pop	{r4, r7, pc}

08002fc4 <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	ed2d 8b02 	vpush	{d8}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d046      	beq.n	8003068 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002fe0:	3354      	adds	r3, #84	; 0x54
 8002fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d11c      	bne.n	8003024 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69dc      	ldr	r4, [r3, #28]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe fb67 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8002ff8:	eeb0 8a40 	vmov.f32	s16, s0
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699b      	ldr	r3, [r3, #24]
 8003000:	4618      	mov	r0, r3
 8003002:	f002 f808 	bl	8005016 <_ZN8Odometry8getThetaEv>
 8003006:	ec53 2b10 	vmov	r2, r3, d0
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fe03 	bl	8000c18 <__aeabi_d2f>
 8003012:	4603      	mov	r3, r0
 8003014:	ee00 3a90 	vmov	s1, r3
 8003018:	eeb0 0a48 	vmov.f32	s0, s16
 800301c:	4620      	mov	r0, r4
 800301e:	f001 fbdd 	bl	80047dc <_ZN6Logger21storeDistanceAndThetaEff>
 8003022:	e01b      	b.n	800305c <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69dc      	ldr	r4, [r3, #28]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fb4a 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003032:	eeb0 8a40 	vmov.f32	s16, s0
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	4618      	mov	r0, r3
 800303c:	f001 ffeb 	bl	8005016 <_ZN8Odometry8getThetaEv>
 8003040:	ec53 2b10 	vmov	r2, r3, d0
 8003044:	4610      	mov	r0, r2
 8003046:	4619      	mov	r1, r3
 8003048:	f7fd fde6 	bl	8000c18 <__aeabi_d2f>
 800304c:	4603      	mov	r3, r0
 800304e:	ee00 3a90 	vmov	s1, r3
 8003052:	eeb0 0a48 	vmov.f32	s0, s16
 8003056:	4620      	mov	r0, r4
 8003058:	f001 fc03 	bl	8004862 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800305e:	881b      	ldrh	r3, [r3, #0]
 8003060:	3301      	adds	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003066:	801a      	strh	r2, [r3, #0]
	}
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	ecbd 8b02 	vpop	{d8}
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	2000025c 	.word	0x2000025c

08003078 <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800308a:	3354      	adds	r3, #84	; 0x54
 800308c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d143      	bne.n	800311c <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8003094:	edd7 7a00 	vldr	s15, [r7]
 8003098:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80031b4 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 800309c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a4:	d504      	bpl.n	80030b0 <_ZN9LineTrace15radius2VelocityEf+0x38>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	e076      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 80030b0:	edd7 7a00 	vldr	s15, [r7]
 80030b4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80031b8 <_ZN9LineTrace15radius2VelocityEf+0x140>
 80030b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c0:	d502      	bpl.n	80030c8 <_ZN9LineTrace15radius2VelocityEf+0x50>
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <_ZN9LineTrace15radius2VelocityEf+0x144>)
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	e06a      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 80030c8:	edd7 7a00 	vldr	s15, [r7]
 80030cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80031c0 <_ZN9LineTrace15radius2VelocityEf+0x148>
 80030d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	d503      	bpl.n	80030e2 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 80030da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	e05d      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 80030e2:	edd7 7a00 	vldr	s15, [r7]
 80030e6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80031c4 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 80030ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	d502      	bpl.n	80030fa <_ZN9LineTrace15radius2VelocityEf+0x82>
 80030f4:	4b34      	ldr	r3, [pc, #208]	; (80031c8 <_ZN9LineTrace15radius2VelocityEf+0x150>)
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e051      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 80030fa:	edd7 7a00 	vldr	s15, [r7]
 80030fe:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80031cc <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	d502      	bpl.n	8003112 <_ZN9LineTrace15radius2VelocityEf+0x9a>
 800310c:	4b30      	ldr	r3, [pc, #192]	; (80031d0 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	e045      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	e040      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003122:	3354      	adds	r3, #84	; 0x54
 8003124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003128:	2b02      	cmp	r3, #2
 800312a:	d136      	bne.n	800319a <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 800312c:	edd7 7a00 	vldr	s15, [r7]
 8003130:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80031b4 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003134:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313c:	d504      	bpl.n	8003148 <_ZN9LineTrace15radius2VelocityEf+0xd0>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	e02a      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 8003148:	edd7 7a00 	vldr	s15, [r7]
 800314c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80031c4 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	d502      	bpl.n	8003160 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 800315a:	4b1e      	ldr	r3, [pc, #120]	; (80031d4 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 800315c:	60fb      	str	r3, [r7, #12]
 800315e:	e01e      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003160:	edd7 7a00 	vldr	s15, [r7]
 8003164:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80031cc <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003170:	d502      	bpl.n	8003178 <_ZN9LineTrace15radius2VelocityEf+0x100>
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	e012      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 8003178:	edd7 7a00 	vldr	s15, [r7]
 800317c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80031d8 <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003180:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003188:	d502      	bpl.n	8003190 <_ZN9LineTrace15radius2VelocityEf+0x118>
 800318a:	4b14      	ldr	r3, [pc, #80]	; (80031dc <_ZN9LineTrace15radius2VelocityEf+0x164>)
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	e006      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	e001      	b.n	800319e <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 800319a:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 800319c:	60fb      	str	r3, [r7, #12]

	return velocity;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	ee07 3a90 	vmov	s15, r3
}
 80031a4:	eeb0 0a67 	vmov.f32	s0, s15
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	43960000 	.word	0x43960000
 80031b8:	44480000 	.word	0x44480000
 80031bc:	3fd9999a 	.word	0x3fd9999a
 80031c0:	447a0000 	.word	0x447a0000
 80031c4:	44bb8000 	.word	0x44bb8000
 80031c8:	40133333 	.word	0x40133333
 80031cc:	44fa0000 	.word	0x44fa0000
 80031d0:	40200000 	.word	0x40200000
 80031d4:	40066666 	.word	0x40066666
 80031d8:	451c4000 	.word	0x451c4000
 80031dc:	40400000 	.word	0x40400000
 80031e0:	3fa66666 	.word	0x3fa66666
 80031e4:	00000000 	.word	0x00000000

080031e8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80031e8:	b5b0      	push	{r4, r5, r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80031f4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031f6:	f241 736f 	movw	r3, #5999	; 0x176f
 80031fa:	83fb      	strh	r3, [r7, #30]
 80031fc:	8bfb      	ldrh	r3, [r7, #30]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 808d 	beq.w	800331e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003204:	8bfb      	ldrh	r3, [r7, #30]
 8003206:	3b01      	subs	r3, #1
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800320e:	3304      	adds	r3, #4
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	ed93 7a00 	vldr	s14, [r3]
 8003218:	8bfb      	ldrh	r3, [r7, #30]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003220:	3304      	adds	r3, #4
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800322e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003232:	edd7 7a06 	vldr	s15, [r7, #24]
 8003236:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	dd6a      	ble.n	8003316 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003240:	8bfb      	ldrh	r3, [r7, #30]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	4413      	add	r3, r2
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd f994 	bl	8000578 <__aeabi_f2d>
 8003250:	a335      	add	r3, pc, #212	; (adr r3, 8003328 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f7fd f9e7 	bl	8000628 <__aeabi_dmul>
 800325a:	4603      	mov	r3, r0
 800325c:	460c      	mov	r4, r1
 800325e:	4625      	mov	r5, r4
 8003260:	461c      	mov	r4, r3
 8003262:	69b8      	ldr	r0, [r7, #24]
 8003264:	f7fd f988 	bl	8000578 <__aeabi_f2d>
 8003268:	4602      	mov	r2, r0
 800326a:	460b      	mov	r3, r1
 800326c:	4620      	mov	r0, r4
 800326e:	4629      	mov	r1, r5
 8003270:	f7fd fb04 	bl	800087c <__aeabi_ddiv>
 8003274:	4603      	mov	r3, r0
 8003276:	460c      	mov	r4, r1
 8003278:	4618      	mov	r0, r3
 800327a:	4621      	mov	r1, r4
 800327c:	f7fd fccc 	bl	8000c18 <__aeabi_d2f>
 8003280:	4603      	mov	r3, r0
 8003282:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003284:	edd7 6a06 	vldr	s13, [r7, #24]
 8003288:	ed97 7a05 	vldr	s14, [r7, #20]
 800328c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003290:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003294:	ed97 7a04 	vldr	s14, [r7, #16]
 8003298:	edd7 7a02 	vldr	s15, [r7, #8]
 800329c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	dd37      	ble.n	8003316 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80032a6:	8bfb      	ldrh	r3, [r7, #30]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032ae:	3304      	adds	r3, #4
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7fd f95e 	bl	8000578 <__aeabi_f2d>
 80032bc:	4604      	mov	r4, r0
 80032be:	460d      	mov	r5, r1
 80032c0:	8bfb      	ldrh	r3, [r7, #30]
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	4413      	add	r3, r2
 80032c8:	ed93 7a00 	vldr	s14, [r3]
 80032cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d4:	ee17 0a90 	vmov	r0, s15
 80032d8:	f7fd f94e 	bl	8000578 <__aeabi_f2d>
 80032dc:	a312      	add	r3, pc, #72	; (adr r3, 8003328 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	f7fd f9a1 	bl	8000628 <__aeabi_dmul>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4620      	mov	r0, r4
 80032ec:	4629      	mov	r1, r5
 80032ee:	f7fc ffe5 	bl	80002bc <__adddf3>
 80032f2:	4603      	mov	r3, r0
 80032f4:	460c      	mov	r4, r1
 80032f6:	4619      	mov	r1, r3
 80032f8:	4622      	mov	r2, r4
 80032fa:	8bfb      	ldrh	r3, [r7, #30]
 80032fc:	1e5c      	subs	r4, r3, #1
 80032fe:	4608      	mov	r0, r1
 8003300:	4611      	mov	r1, r2
 8003302:	f7fd fc89 	bl	8000c18 <__aeabi_d2f>
 8003306:	4601      	mov	r1, r0
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800330e:	3304      	adds	r3, #4
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003316:	8bfb      	ldrh	r3, [r7, #30]
 8003318:	3b01      	subs	r3, #1
 800331a:	83fb      	strh	r3, [r7, #30]
 800331c:	e76e      	b.n	80031fc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800331e:	bf00      	nop
 8003320:	3720      	adds	r7, #32
 8003322:	46bd      	mov	sp, r7
 8003324:	bdb0      	pop	{r4, r5, r7, pc}
 8003326:	bf00      	nop
 8003328:	d2f1a9fc 	.word	0xd2f1a9fc
 800332c:	3f50624d 	.word	0x3f50624d

08003330 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	ed87 0a02 	vstr	s0, [r7, #8]
 800333c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800333e:	2300      	movs	r3, #0
 8003340:	83fb      	strh	r3, [r7, #30]
 8003342:	8bfb      	ldrh	r3, [r7, #30]
 8003344:	f241 726f 	movw	r2, #5999	; 0x176f
 8003348:	4293      	cmp	r3, r2
 800334a:	f200 808d 	bhi.w	8003468 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800334e:	8bfb      	ldrh	r3, [r7, #30]
 8003350:	3301      	adds	r3, #1
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003358:	3304      	adds	r3, #4
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	ed93 7a00 	vldr	s14, [r3]
 8003362:	8bfb      	ldrh	r3, [r7, #30]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800336a:	3304      	adds	r3, #4
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	edd3 7a00 	vldr	s15, [r3]
 8003374:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003378:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800337c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003380:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003388:	dd6a      	ble.n	8003460 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800338a:	8bfb      	ldrh	r3, [r7, #30]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4413      	add	r3, r2
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8ef 	bl	8000578 <__aeabi_f2d>
 800339a:	a335      	add	r3, pc, #212	; (adr r3, 8003470 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fd f942 	bl	8000628 <__aeabi_dmul>
 80033a4:	4603      	mov	r3, r0
 80033a6:	460c      	mov	r4, r1
 80033a8:	4625      	mov	r5, r4
 80033aa:	461c      	mov	r4, r3
 80033ac:	69b8      	ldr	r0, [r7, #24]
 80033ae:	f7fd f8e3 	bl	8000578 <__aeabi_f2d>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4620      	mov	r0, r4
 80033b8:	4629      	mov	r1, r5
 80033ba:	f7fd fa5f 	bl	800087c <__aeabi_ddiv>
 80033be:	4603      	mov	r3, r0
 80033c0:	460c      	mov	r4, r1
 80033c2:	4618      	mov	r0, r3
 80033c4:	4621      	mov	r1, r4
 80033c6:	f7fd fc27 	bl	8000c18 <__aeabi_d2f>
 80033ca:	4603      	mov	r3, r0
 80033cc:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033ce:	edd7 6a06 	vldr	s13, [r7, #24]
 80033d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80033d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033da:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033de:	ed97 7a04 	vldr	s14, [r7, #16]
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	dd37      	ble.n	8003460 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80033f0:	8bfb      	ldrh	r3, [r7, #30]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80033f8:	3304      	adds	r3, #4
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd f8b9 	bl	8000578 <__aeabi_f2d>
 8003406:	4604      	mov	r4, r0
 8003408:	460d      	mov	r5, r1
 800340a:	8bfb      	ldrh	r3, [r7, #30]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	ed93 7a00 	vldr	s14, [r3]
 8003416:	edd7 7a02 	vldr	s15, [r7, #8]
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	ee17 0a90 	vmov	r0, s15
 8003422:	f7fd f8a9 	bl	8000578 <__aeabi_f2d>
 8003426:	a312      	add	r3, pc, #72	; (adr r3, 8003470 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342c:	f7fd f8fc 	bl	8000628 <__aeabi_dmul>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4620      	mov	r0, r4
 8003436:	4629      	mov	r1, r5
 8003438:	f7fc ff40 	bl	80002bc <__adddf3>
 800343c:	4603      	mov	r3, r0
 800343e:	460c      	mov	r4, r1
 8003440:	4619      	mov	r1, r3
 8003442:	4622      	mov	r2, r4
 8003444:	8bfb      	ldrh	r3, [r7, #30]
 8003446:	1c5c      	adds	r4, r3, #1
 8003448:	4608      	mov	r0, r1
 800344a:	4611      	mov	r1, r2
 800344c:	f7fd fbe4 	bl	8000c18 <__aeabi_d2f>
 8003450:	4601      	mov	r1, r0
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003458:	3304      	adds	r3, #4
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003460:	8bfb      	ldrh	r3, [r7, #30]
 8003462:	3301      	adds	r3, #1
 8003464:	83fb      	strh	r3, [r7, #30]
 8003466:	e76c      	b.n	8003342 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003468:	bf00      	nop
 800346a:	3720      	adds	r7, #32
 800346c:	46bd      	mov	sp, r7
 800346e:	bdb0      	pop	{r4, r5, r7, pc}
 8003470:	d2f1a9fc 	.word	0xd2f1a9fc
 8003474:	3f50624d 	.word	0x3f50624d

08003478 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	4618      	mov	r0, r3
 8003486:	f7fe f94a 	bl	800171e <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003490:	3350      	adds	r3, #80	; 0x50
 8003492:	2201      	movs	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034ac:	3350      	adds	r3, #80	; 0x50
 80034ae:	2200      	movs	r2, #0
 80034b0:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034b8:	3352      	adds	r3, #82	; 0x52
 80034ba:	2200      	movs	r2, #0
 80034bc:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80034c4:	330c      	adds	r3, #12
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 80034d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80034e6:	3350      	adds	r3, #80	; 0x50
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 809c 	beq.w	8003628 <_ZN9LineTrace20updateTargetVelocityEv+0x150>
		while(encoder_->getTotalDistance()*0.9527 >= ref_distance_){
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe f8f5 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80034fa:	ee10 3a10 	vmov	r3, s0
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fd f83a 	bl	8000578 <__aeabi_f2d>
 8003504:	a34e      	add	r3, pc, #312	; (adr r3, 8003640 <_ZN9LineTrace20updateTargetVelocityEv+0x168>)
 8003506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350a:	f7fd f88d 	bl	8000628 <__aeabi_dmul>
 800350e:	4603      	mov	r3, r0
 8003510:	460c      	mov	r4, r1
 8003512:	4625      	mov	r5, r4
 8003514:	461c      	mov	r4, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800351c:	330c      	adds	r3, #12
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f829 	bl	8000578 <__aeabi_f2d>
 8003526:	460a      	mov	r2, r1
 8003528:	4601      	mov	r1, r0
 800352a:	2301      	movs	r3, #1
 800352c:	461e      	mov	r6, r3
 800352e:	4613      	mov	r3, r2
 8003530:	460a      	mov	r2, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fd fafd 	bl	8000b34 <__aeabi_dcmpge>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <_ZN9LineTrace20updateTargetVelocityEv+0x6c>
 8003540:	2300      	movs	r3, #0
 8003542:	461e      	mov	r6, r3
 8003544:	b2f3      	uxtb	r3, r6
 8003546:	2b00      	cmp	r3, #0
 8003548:	d026      	beq.n	8003598 <_ZN9LineTrace20updateTargetVelocityEv+0xc0>
			ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003550:	330c      	adds	r3, #12
 8003552:	ed93 7a00 	vldr	s14, [r3]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800355c:	3352      	adds	r3, #82	; 0x52
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	3332      	adds	r3, #50	; 0x32
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3304      	adds	r3, #4
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003578:	330c      	adds	r3, #12
 800357a:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx_++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003584:	3352      	adds	r3, #82	; 0x52
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003592:	3352      	adds	r3, #82	; 0x52
 8003594:	801a      	strh	r2, [r3, #0]
		while(encoder_->getTotalDistance()*0.9527 >= ref_distance_){
 8003596:	e7ab      	b.n	80034f0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
		}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800359e:	3352      	adds	r3, #82	; 0x52
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	f241 726f 	movw	r2, #5999	; 0x176f
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d906      	bls.n	80035b8 <_ZN9LineTrace20updateTargetVelocityEv+0xe0>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035b0:	3352      	adds	r3, #82	; 0x52
 80035b2:	f241 726f 	movw	r2, #5999	; 0x176f
 80035b6:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035be:	330c      	adds	r3, #12
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1b      	ldr	r2, [pc, #108]	; (8003630 <_ZN9LineTrace20updateTargetVelocityEv+0x158>)
 80035c4:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f88a 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80035d0:	eef0 7a40 	vmov.f32	s15, s0
 80035d4:	4b17      	ldr	r3, [pc, #92]	; (8003634 <_ZN9LineTrace20updateTargetVelocityEv+0x15c>)
 80035d6:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035e0:	3352      	adds	r3, #82	; 0x52
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	4b14      	ldr	r3, [pc, #80]	; (8003638 <_ZN9LineTrace20updateTargetVelocityEv+0x160>)
 80035e6:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ee:	3352      	adds	r3, #82	; 0x52
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80035f8:	3304      	adds	r3, #4
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	eeb0 0a67 	vmov.f32	s0, s15
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 faeb 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003612:	3352      	adds	r3, #82	; 0x52
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800361c:	3304      	adds	r3, #4
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a05      	ldr	r2, [pc, #20]	; (800363c <_ZN9LineTrace20updateTargetVelocityEv+0x164>)
 8003626:	6013      	str	r3, [r2, #0]

	}
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003630:	20000268 	.word	0x20000268
 8003634:	2000026c 	.word	0x2000026c
 8003638:	20000270 	.word	0x20000270
 800363c:	20000274 	.word	0x20000274
 8003640:	b5dcc63f 	.word	0xb5dcc63f
 8003644:	3fee7c84 	.word	0x3fee7c84

08003648 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe f832 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003662:	eeb0 7a40 	vmov.f32	s14, s0
 8003666:	edd7 7a00 	vldr	s15, [r7]
 800366a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1]) / 2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80036a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036b0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	ed93 7abc 	vldr	s14, [r3, #752]	; 0x2f0
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 80036c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80036cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036d0:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 80036d4:	4a3e      	ldr	r2, [pc, #248]	; (80037d0 <_ZN9LineTrace11isCrossLineEv+0x144>)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 80036da:	4a3e      	ldr	r2, [pc, #248]	; (80037d4 <_ZN9LineTrace11isCrossLineEv+0x148>)
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 80036e0:	4b3d      	ldr	r3, [pc, #244]	; (80037d8 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	f083 0301 	eor.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d041      	beq.n	8003772 <_ZN9LineTrace11isCrossLineEv+0xe6>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 80036ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80036f2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80037dc <_ZN9LineTrace11isCrossLineEv+0x150>
 80036f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fe:	d50f      	bpl.n	8003720 <_ZN9LineTrace11isCrossLineEv+0x94>
 8003700:	edd7 7a02 	vldr	s15, [r7, #8]
 8003704:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80037dc <_ZN9LineTrace11isCrossLineEv+0x150>
 8003708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	d506      	bpl.n	8003720 <_ZN9LineTrace11isCrossLineEv+0x94>
			cnt++;
 8003712:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	b29a      	uxth	r2, r3
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	e002      	b.n	8003726 <_ZN9LineTrace11isCrossLineEv+0x9a>
		}
		else{
			cnt = 0;
 8003720:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003722:	2200      	movs	r2, #0
 8003724:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8003726:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003728:	881b      	ldrh	r3, [r3, #0]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d94a      	bls.n	80037c4 <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = true;
 800372e:	4b2d      	ldr	r3, [pc, #180]	; (80037e4 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8003730:	2201      	movs	r2, #1
 8003732:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003734:	4b28      	ldr	r3, [pc, #160]	; (80037d8 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 800373c:	2200      	movs	r2, #0
 800373e:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003746:	3390      	adds	r3, #144	; 0x90
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003752:	3354      	adds	r3, #84	; 0x54
 8003754:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d103      	bne.n	8003764 <_ZN9LineTrace11isCrossLineEv+0xd8>
				storeCrossLineDistance();
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff fbc3 	bl	8002ee8 <_ZN9LineTrace22storeCrossLineDistanceEv>
 8003762:	e02f      	b.n	80037c4 <_ZN9LineTrace11isCrossLineEv+0x138>
			}
			else{
				//errectionTotalDistanceFromCrossLine();
				correction_check_cnt_ = 0;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800376a:	33a4      	adds	r3, #164	; 0xa4
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]
 8003770:	e028      	b.n	80037c4 <_ZN9LineTrace11isCrossLineEv+0x138>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003772:	edd7 7a03 	vldr	s15, [r7, #12]
 8003776:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80037e8 <_ZN9LineTrace11isCrossLineEv+0x15c>
 800377a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800377e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003782:	dd0f      	ble.n	80037a4 <_ZN9LineTrace11isCrossLineEv+0x118>
 8003784:	edd7 7a02 	vldr	s15, [r7, #8]
 8003788:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80037e8 <_ZN9LineTrace11isCrossLineEv+0x15c>
 800378c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003794:	dd06      	ble.n	80037a4 <_ZN9LineTrace11isCrossLineEv+0x118>
			cnt++;
 8003796:	4b12      	ldr	r3, [pc, #72]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	3301      	adds	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	4b10      	ldr	r3, [pc, #64]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037a0:	801a      	strh	r2, [r3, #0]
 80037a2:	e002      	b.n	80037aa <_ZN9LineTrace11isCrossLineEv+0x11e>
		}
		else{
			cnt = 0;
 80037a4:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80037aa:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	2b09      	cmp	r3, #9
 80037b0:	d908      	bls.n	80037c4 <_ZN9LineTrace11isCrossLineEv+0x138>
			flag = false;
 80037b2:	4b0c      	ldr	r3, [pc, #48]	; (80037e4 <_ZN9LineTrace11isCrossLineEv+0x158>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80037b8:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <_ZN9LineTrace11isCrossLineEv+0x14c>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037be:	4b08      	ldr	r3, [pc, #32]	; (80037e0 <_ZN9LineTrace11isCrossLineEv+0x154>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 80037c4:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <_ZN9LineTrace11isCrossLineEv+0x158>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000260 	.word	0x20000260
 80037d4:	20000264 	.word	0x20000264
 80037d8:	20000283 	.word	0x20000283
 80037dc:	44160000 	.word	0x44160000
 80037e0:	20000280 	.word	0x20000280
 80037e4:	20000282 	.word	0x20000282
 80037e8:	43fa0000 	.word	0x43fa0000

080037ec <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 80037ec:	b590      	push	{r4, r7, lr}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80037f4:	2300      	movs	r3, #0
 80037f6:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fd ff62 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003802:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	4618      	mov	r0, r3
 800380c:	f001 fc03 	bl	8005016 <_ZN8Odometry8getThetaEv>
 8003810:	ec54 3b10 	vmov	r3, r4, d0
 8003814:	4618      	mov	r0, r3
 8003816:	4621      	mov	r1, r4
 8003818:	f7fd f9fe 	bl	8000c18 <__aeabi_d2f>
 800381c:	4603      	mov	r3, r0
 800381e:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003820:	edd7 7a04 	vldr	s15, [r7, #16]
 8003824:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382c:	d101      	bne.n	8003832 <_ZN9LineTrace8isStableEv+0x46>
 800382e:	4b23      	ldr	r3, [pc, #140]	; (80038bc <_ZN9LineTrace8isStableEv+0xd0>)
 8003830:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003832:	ed97 7a02 	vldr	s14, [r7, #8]
 8003836:	edd7 7a04 	vldr	s15, [r7, #16]
 800383a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800383e:	eeb0 0a66 	vmov.f32	s0, s13
 8003842:	f7ff f8e7 	bl	8002a14 <_ZSt3absf>
 8003846:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800384a:	edd7 7a03 	vldr	s15, [r7, #12]
 800384e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80038c0 <_ZN9LineTrace8isStableEv+0xd4>
 8003852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385a:	db01      	blt.n	8003860 <_ZN9LineTrace8isStableEv+0x74>
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <_ZN9LineTrace8isStableEv+0xd8>)
 800385e:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003866:	3390      	adds	r3, #144	; 0x90
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d008      	beq.n	8003880 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 800386e:	4b16      	ldr	r3, [pc, #88]	; (80038c8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003870:	2200      	movs	r2, #0
 8003872:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800387a:	3390      	adds	r3, #144	; 0x90
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003880:	edd7 7a03 	vldr	s15, [r7, #12]
 8003884:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80038cc <_ZN9LineTrace8isStableEv+0xe0>
 8003888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	db06      	blt.n	80038a0 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003892:	4b0d      	ldr	r3, [pc, #52]	; (80038c8 <_ZN9LineTrace8isStableEv+0xdc>)
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <_ZN9LineTrace8isStableEv+0xdc>)
 800389c:	801a      	strh	r2, [r3, #0]
 800389e:	e002      	b.n	80038a6 <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80038a0:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <_ZN9LineTrace8isStableEv+0xdc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 5){ //250mm
 80038a6:	4b08      	ldr	r3, [pc, #32]	; (80038c8 <_ZN9LineTrace8isStableEv+0xdc>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d901      	bls.n	80038b2 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80038ae:	2301      	movs	r3, #1
 80038b0:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	371c      	adds	r7, #28
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd90      	pop	{r4, r7, pc}
 80038bc:	3727c5ac 	.word	0x3727c5ac
 80038c0:	459c4000 	.word	0x459c4000
 80038c4:	459c4000 	.word	0x459c4000
 80038c8:	20000284 	.word	0x20000284
 80038cc:	44fa0000 	.word	0x44fa0000

080038d0 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b092      	sub	sp, #72	; 0x48
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 80038d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038dc:	2201      	movs	r2, #1
 80038de:	4963      	ldr	r1, [pc, #396]	; (8003a6c <_ZN9LineTrace4initEv+0x19c>)
 80038e0:	4863      	ldr	r0, [pc, #396]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 80038e2:	f7fe f821 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 80038e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038ea:	2201      	movs	r2, #1
 80038ec:	4961      	ldr	r1, [pc, #388]	; (8003a74 <_ZN9LineTrace4initEv+0x1a4>)
 80038ee:	4860      	ldr	r0, [pc, #384]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 80038f0:	f7fe f81a 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 80038f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80038f8:	2201      	movs	r2, #1
 80038fa:	495f      	ldr	r1, [pc, #380]	; (8003a78 <_ZN9LineTrace4initEv+0x1a8>)
 80038fc:	485c      	ldr	r0, [pc, #368]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 80038fe:	f7fe f813 	bl	8001928 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003902:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003906:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800390a:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 800390e:	eeb0 1a66 	vmov.f32	s2, s13
 8003912:	eef0 0a47 	vmov.f32	s1, s14
 8003916:	eeb0 0a67 	vmov.f32	s0, s15
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f8c6 	bl	8003aac <_ZN9LineTrace7setGainEfff>

	float temp_kp_slow, temp_ki_slow, temp_kd_slow;
	sd_read_array_float("PARAMS", "KP_SLOW.TXT", 1, &temp_kp_slow);
 8003920:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003924:	2201      	movs	r2, #1
 8003926:	4955      	ldr	r1, [pc, #340]	; (8003a7c <_ZN9LineTrace4initEv+0x1ac>)
 8003928:	4851      	ldr	r0, [pc, #324]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 800392a:	f7fd fffd 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI_SLOW.TXT", 1, &temp_ki_slow);
 800392e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003932:	2201      	movs	r2, #1
 8003934:	4952      	ldr	r1, [pc, #328]	; (8003a80 <_ZN9LineTrace4initEv+0x1b0>)
 8003936:	484e      	ldr	r0, [pc, #312]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003938:	f7fd fff6 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD_SLOW.TXT", 1, &temp_kd_slow);
 800393c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003940:	2201      	movs	r2, #1
 8003942:	4950      	ldr	r1, [pc, #320]	; (8003a84 <_ZN9LineTrace4initEv+0x1b4>)
 8003944:	484a      	ldr	r0, [pc, #296]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003946:	f7fd ffef 	bl	8001928 <sd_read_array_float>
	setGainSlow(temp_kp_slow, temp_ki_slow, temp_kd_slow);
 800394a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800394e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003952:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8003956:	eeb0 1a66 	vmov.f32	s2, s13
 800395a:	eef0 0a47 	vmov.f32	s1, s14
 800395e:	eeb0 0a67 	vmov.f32	s0, s15
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f8e8 	bl	8003b38 <_ZN9LineTrace11setGainSlowEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396c:	2201      	movs	r2, #1
 800396e:	4946      	ldr	r1, [pc, #280]	; (8003a88 <_ZN9LineTrace4initEv+0x1b8>)
 8003970:	483f      	ldr	r0, [pc, #252]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003972:	f7fd ffd9 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800397a:	2201      	movs	r2, #1
 800397c:	4943      	ldr	r1, [pc, #268]	; (8003a8c <_ZN9LineTrace4initEv+0x1bc>)
 800397e:	483c      	ldr	r0, [pc, #240]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003980:	f7fd ffd2 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003984:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003988:	2201      	movs	r2, #1
 800398a:	4941      	ldr	r1, [pc, #260]	; (8003a90 <_ZN9LineTrace4initEv+0x1c0>)
 800398c:	4838      	ldr	r0, [pc, #224]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 800398e:	f7fd ffcb 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003992:	f107 0320 	add.w	r3, r7, #32
 8003996:	2201      	movs	r2, #1
 8003998:	493e      	ldr	r1, [pc, #248]	; (8003a94 <_ZN9LineTrace4initEv+0x1c4>)
 800399a:	4835      	ldr	r0, [pc, #212]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 800399c:	f7fd ffc4 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80039a0:	f107 031c 	add.w	r3, r7, #28
 80039a4:	2201      	movs	r2, #1
 80039a6:	493c      	ldr	r1, [pc, #240]	; (8003a98 <_ZN9LineTrace4initEv+0x1c8>)
 80039a8:	4831      	ldr	r0, [pc, #196]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 80039aa:	f7fd ffbd 	bl	8001928 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80039ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80039b2:	eeb0 0a67 	vmov.f32	s0, s15
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f913 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80039bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80039c0:	eeb0 0a67 	vmov.f32	s0, s15
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f91c 	bl	8003c02 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80039ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80039ce:	eeb0 0a67 	vmov.f32	s0, s15
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f925 	bl	8003c22 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 80039d8:	edd7 7a08 	vldr	s15, [r7, #32]
 80039dc:	eeb0 0a67 	vmov.f32	s0, s15
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f92e 	bl	8003c42 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 80039e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80039ea:	eeb0 0a67 	vmov.f32	s0, s15
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f937 	bl	8003c62 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 80039f4:	f107 0318 	add.w	r3, r7, #24
 80039f8:	2201      	movs	r2, #1
 80039fa:	4928      	ldr	r1, [pc, #160]	; (8003a9c <_ZN9LineTrace4initEv+0x1cc>)
 80039fc:	481c      	ldr	r0, [pc, #112]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 80039fe:	f7fd ff93 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a02:	f107 0314 	add.w	r3, r7, #20
 8003a06:	2201      	movs	r2, #1
 8003a08:	4925      	ldr	r1, [pc, #148]	; (8003aa0 <_ZN9LineTrace4initEv+0x1d0>)
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003a0c:	f7fd ff8c 	bl	8001928 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003a10:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a14:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a18:	eef0 0a47 	vmov.f32	s1, s14
 8003a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f97e 	bl	8003d22 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	613b      	str	r3, [r7, #16]
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003a32:	f107 0310 	add.w	r3, r7, #16
 8003a36:	2201      	movs	r2, #1
 8003a38:	491a      	ldr	r1, [pc, #104]	; (8003aa4 <_ZN9LineTrace4initEv+0x1d4>)
 8003a3a:	480d      	ldr	r0, [pc, #52]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003a3c:	f7fd ff74 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003a40:	f107 030c 	add.w	r3, r7, #12
 8003a44:	2201      	movs	r2, #1
 8003a46:	4918      	ldr	r1, [pc, #96]	; (8003aa8 <_ZN9LineTrace4initEv+0x1d8>)
 8003a48:	4809      	ldr	r0, [pc, #36]	; (8003a70 <_ZN9LineTrace4initEv+0x1a0>)
 8003a4a:	f7fd ff6d 	bl	8001928 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a52:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a56:	eef0 0a47 	vmov.f32	s1, s14
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f979 	bl	8003d56 <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003a64:	bf00      	nop
 8003a66:	3748      	adds	r7, #72	; 0x48
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	08019c00 	.word	0x08019c00
 8003a70:	08019c08 	.word	0x08019c08
 8003a74:	08019c10 	.word	0x08019c10
 8003a78:	08019c18 	.word	0x08019c18
 8003a7c:	08019c20 	.word	0x08019c20
 8003a80:	08019c2c 	.word	0x08019c2c
 8003a84:	08019c38 	.word	0x08019c38
 8003a88:	08019c44 	.word	0x08019c44
 8003a8c:	08019c50 	.word	0x08019c50
 8003a90:	08019c5c 	.word	0x08019c5c
 8003a94:	08019c68 	.word	0x08019c68
 8003a98:	08019c74 	.word	0x08019c74
 8003a9c:	08019c80 	.word	0x08019c80
 8003aa0:	08019c88 	.word	0x08019c88
 8003aa4:	08019c90 	.word	0x08019c90
 8003aa8:	08019c9c 	.word	0x08019c9c

08003aac <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ab8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003abc:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	return kp_;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	ee07 3a90 	vmov	s15, r3
}
 8003aee:	eeb0 0a67 	vmov.f32	s0, s15
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	ee07 3a90 	vmov	s15, r3
}
 8003b0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b083      	sub	sp, #12
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
	return kd_;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	ee07 3a90 	vmov	s15, r3
}
 8003b2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZN9LineTrace11setGainSlowEfff>:

void LineTrace::setGainSlow(float kp, float ki, float kd)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b44:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b48:	ed87 1a00 	vstr	s2, [r7]
	kp_slow_ = kp;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	635a      	str	r2, [r3, #52]	; 0x34
	ki_slow_ = ki;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
	kd_slow_ = kd;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b5e:	bf00      	nop
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_ZN9LineTrace9getKpSlowEv>:

float LineTrace::getKpSlow()
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	return kp_slow_;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	ee07 3a90 	vmov	s15, r3
}
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_ZN9LineTrace9getKiSlowEv>:

float LineTrace::getKiSlow()
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	return ki_slow_;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	ee07 3a90 	vmov	s15, r3
}
 8003b98:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZN9LineTrace9getKdSlowEv>:

float LineTrace::getKdSlow()
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
	return kd_slow_;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	ee07 3a90 	vmov	s15, r3
}
 8003bb6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
 8003c0a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
 8003c2a:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003c36:	bf00      	nop
 8003c38:	370c      	adds	r7, #12
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c90:	ee07 3a90 	vmov	s15, r3
}
 8003c94:	eeb0 0a67 	vmov.f32	s0, s15
 8003c98:	370c      	adds	r7, #12
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003cb0:	ee07 3a90 	vmov	s15, r3
}
 8003cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003cd0:	ee07 3a90 	vmov	s15, r3
}
 8003cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cf0:	ee07 3a90 	vmov	s15, r3
}
 8003cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003d10:	ee07 3a90 	vmov	s15, r3
}
 8003d14:	eeb0 0a67 	vmov.f32	s0, s15
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b085      	sub	sp, #20
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d2e:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d38:	3394      	adds	r3, #148	; 0x94
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d44:	3398      	adds	r3, #152	; 0x98
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	601a      	str	r2, [r3, #0]
}
 8003d4a:	bf00      	nop
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr

08003d56 <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d56:	b480      	push	{r7}
 8003d58:	b085      	sub	sp, #20
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d62:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d6c:	339c      	adds	r3, #156	; 0x9c
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d78:	33a0      	adds	r3, #160	; 0xa0
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	3714      	adds	r7, #20
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d98:	3394      	adds	r3, #148	; 0x94
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	ee07 3a90 	vmov	s15, r3
}
 8003da0:	eeb0 0a67 	vmov.f32	s0, s15
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr

08003dae <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003dae:	b480      	push	{r7}
 8003db0:	b083      	sub	sp, #12
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dbc:	33a0      	adds	r3, #160	; 0xa0
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	ee07 3a90 	vmov	s15, r3
}
 8003dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003de0:	339c      	adds	r3, #156	; 0x9c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	ee07 3a90 	vmov	s15, r3
}
 8003de8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e04:	3398      	adds	r3, #152	; 0x98
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	ee07 3a90 	vmov	s15, r3
}
 8003e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 80fb 	beq.w	8004026 <_ZN9LineTrace4flipEv+0x20a>
		// ---- line following processing -----//
		pidTrace();
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fe ff4d 	bl	8002cd0 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f7ff fb4e 	bl	80034d8 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- Processing at regular distances -----//

		if(isTargetDistance(50) == true){
 8003e3c:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8004030 <_ZN9LineTrace4flipEv+0x214>
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff fc01 	bl	8003648 <_ZN9LineTrace16isTargetDistanceEf>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d028      	beq.n	8003e9e <_ZN9LineTrace4flipEv+0x82>
			// ---- Store Logs ------//
			storeLogs();
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff f8b9 	bl	8002fc4 <_ZN9LineTrace9storeLogsEv>
			//logger_->storeLog(imu_->getOmega());
			//logger_->storeLog2(target_omega_);

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff fcca 	bl	80037ec <_ZN9LineTrace8isStableEv>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00c      	beq.n	8003e78 <_ZN9LineTrace4flipEv+0x5c>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 fb94 	bl	8005590 <_ZN10SideSensor10getStatusLEv>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	f083 0301 	eor.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <_ZN9LineTrace4flipEv+0x5c>
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <_ZN9LineTrace4flipEv+0x5e>
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <_ZN9LineTrace4flipEv+0x6e>
				stable_flag_ = true;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e84:	338f      	adds	r3, #143	; 0x8f
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fd fc37 	bl	8001702 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f001 f8cd 	bl	8005038 <_ZN8Odometry13clearPotitionEv>
		}


		// ------- Store side line distance or correction distance------//

		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ea4:	338f      	adds	r3, #143	; 0x8f
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <_ZN9LineTrace4flipEv+0xa4>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 fb6d 	bl	8005590 <_ZN10SideSensor10getStatusLEv>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d001      	beq.n	8003ec0 <_ZN9LineTrace4flipEv+0xa4>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <_ZN9LineTrace4flipEv+0xa6>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d01d      	beq.n	8003f02 <_ZN9LineTrace4flipEv+0xe6>
			if(mode_selector_ == FIRST_RUNNING){
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ecc:	3354      	adds	r3, #84	; 0x54
 8003ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d103      	bne.n	8003ede <_ZN9LineTrace4flipEv+0xc2>
				storeSideLineDistance();
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff f83c 	bl	8002f54 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003edc:	e005      	b.n	8003eea <_ZN9LineTrace4flipEv+0xce>
			}
			else{
				//correctionTotalDistanceFromSideMarker();
				correction_check_cnt_ = 0;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ee4:	33a4      	adds	r3, #164	; 0xa4
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ef0:	338f      	adds	r3, #143	; 0x8f
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003efc:	3390      	adds	r3, #144	; 0x90
 8003efe:	2201      	movs	r2, #1
 8003f00:	701a      	strb	r2, [r3, #0]
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff fbc2 	bl	800368c <_ZN9LineTrace11isCrossLineEv>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <_ZN9LineTrace4flipEv+0x106>
			side_sensor_->enableIgnore();
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f001 fb64 	bl	80055e0 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	695b      	ldr	r3, [r3, #20]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7fd fc1b 	bl	8001758 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 70){
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f001 fb74 	bl	8005614 <_ZN10SideSensor13getIgnoreFlagEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00f      	beq.n	8003f52 <_ZN9LineTrace4flipEv+0x136>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fd fbff 	bl	800173a <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003f3c:	eeb0 7a40 	vmov.f32	s14, s0
 8003f40:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8004034 <_ZN9LineTrace4flipEv+0x218>
 8003f44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4c:	db01      	blt.n	8003f52 <_ZN9LineTrace4flipEv+0x136>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <_ZN9LineTrace4flipEv+0x138>
 8003f52:	2300      	movs	r3, #0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d004      	beq.n	8003f62 <_ZN9LineTrace4flipEv+0x146>
			side_sensor_->disableIgnore();
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fb4c 	bl	80055fa <_ZN10SideSensor13disableIgnoreEv>
		}



		if(stable_flag_ == true) led_.LR(-1, 1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f68:	338f      	adds	r3, #143	; 0x8f
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d008      	beq.n	8003f82 <_ZN9LineTrace4flipEv+0x166>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	330c      	adds	r3, #12
 8003f74:	2201      	movs	r2, #1
 8003f76:	f04f 31ff 	mov.w	r1, #4294967295
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7fe f9da 	bl	8002334 <_ZN3LED2LREaa>
 8003f80:	e007      	b.n	8003f92 <_ZN9LineTrace4flipEv+0x176>
		else led_.LR(-1, 0);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	330c      	adds	r3, #12
 8003f86:	2200      	movs	r2, #0
 8003f88:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe f9d1 	bl	8002334 <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fe fcec 	bl	8002974 <_ZN10LineSensor13emergencyStopEv>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <_ZN9LineTrace4flipEv+0x1a2>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	eddf 0a24 	vldr	s1, [pc, #144]	; 8004038 <_ZN9LineTrace4flipEv+0x21c>
 8003faa:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8004038 <_ZN9LineTrace4flipEv+0x21c>
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fe9e 	bl	8005cf0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7fd f9e3 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fc4:	33a4      	adds	r3, #164	; 0xa4
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fd2:	33a4      	adds	r3, #164	; 0xa4
 8003fd4:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fdc:	33a4      	adds	r3, #164	; 0xa4
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d906      	bls.n	8003ff6 <_ZN9LineTrace4flipEv+0x1da>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003fee:	33a4      	adds	r3, #164	; 0xa4
 8003ff0:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ff4:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ffc:	33a4      	adds	r3, #164	; 0xa4
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	2b50      	cmp	r3, #80	; 0x50
 8004002:	d808      	bhi.n	8004016 <_ZN9LineTrace4flipEv+0x1fa>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	330c      	adds	r3, #12
 8004008:	2201      	movs	r2, #1
 800400a:	f04f 31ff 	mov.w	r1, #4294967295
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe f990 	bl	8002334 <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8004014:	e007      	b.n	8004026 <_ZN9LineTrace4flipEv+0x20a>
		else led_.LR(-1, 0);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	330c      	adds	r3, #12
 800401a:	2200      	movs	r2, #0
 800401c:	f04f 31ff 	mov.w	r1, #4294967295
 8004020:	4618      	mov	r0, r3
 8004022:	f7fe f987 	bl	8002334 <_ZN3LED2LREaa>
}
 8004026:	bf00      	nop
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	42480000 	.word	0x42480000
 8004034:	428c0000 	.word	0x428c0000
 8004038:	00000000 	.word	0x00000000

0800403c <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800404e:	3354      	adds	r3, #84	; 0x54
 8004050:	887a      	ldrh	r2, [r7, #2]
 8004052:	801a      	strh	r2, [r3, #0]
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	i_reset_flag_ = true;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	velocity_ctrl_->start();
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f001 fe90 	bl	8005da2 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4618      	mov	r0, r3
 8004088:	f001 fa9a 	bl	80055c0 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004092:	3388      	adds	r3, #136	; 0x88
 8004094:	2200      	movs	r2, #0
 8004096:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800409e:	338a      	adds	r3, #138	; 0x8a
 80040a0:	2200      	movs	r2, #0
 80040a2:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80040aa:	338c      	adds	r3, #140	; 0x8c
 80040ac:	2200      	movs	r2, #0
 80040ae:	801a      	strh	r2, [r3, #0]
}
 80040b0:	bf00      	nop
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80040c0:	2300      	movs	r3, #0
 80040c2:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80040c4:	2300      	movs	r3, #0
 80040c6:	737b      	strb	r3, [r7, #13]
	start();
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7ff ffc9 	bl	8004060 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80040ce:	7b7b      	ldrb	r3, [r7, #13]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d15b      	bne.n	800418c <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80040d4:	89fb      	ldrh	r3, [r7, #14]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d002      	beq.n	80040e0 <_ZN9LineTrace7runningEv+0x28>
 80040da:	2b0a      	cmp	r3, #10
 80040dc:	d030      	beq.n	8004140 <_ZN9LineTrace7runningEv+0x88>
 80040de:	e054      	b.n	800418a <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 fa5f 	bl	80055a8 <_ZN10SideSensor16getWhiteLineCntREv>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d044      	beq.n	8004184 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7fe fec8 	bl	8002e90 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004106:	3354      	adds	r3, #84	; 0x54
 8004108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff f9b1 	bl	8003478 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd fb1c 	bl	8001758 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd fafa 	bl	800171e <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	330c      	adds	r3, #12
 800412e:	f04f 32ff 	mov.w	r2, #4294967295
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe f8fd 	bl	8002334 <_ZN3LED2LREaa>
				stage = 10;
 800413a:	230a      	movs	r3, #10
 800413c:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800413e:	e021      	b.n	8004184 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	4618      	mov	r0, r3
 8004146:	f001 fa2f 	bl	80055a8 <_ZN10SideSensor16getWhiteLineCntREv>
 800414a:	4603      	mov	r3, r0
 800414c:	2b02      	cmp	r3, #2
 800414e:	bf0c      	ite	eq
 8004150:	2301      	moveq	r3, #1
 8004152:	2300      	movne	r3, #0
 8004154:	b2db      	uxtb	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fe feb3 	bl	8002ec6 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7ff f99c 	bl	800349e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 8004166:	2064      	movs	r0, #100	; 0x64
 8004168:	f005 fdaa 	bl	8009cc0 <HAL_Delay>

				setTargetVelocity(0);
 800416c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800419c <_ZN9LineTrace7runningEv+0xe4>
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f7ff fd36 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 8004176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800417a:	f005 fda1 	bl	8009cc0 <HAL_Delay>

				goal_flag = true;
 800417e:	2301      	movs	r3, #1
 8004180:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004182:	e001      	b.n	8004188 <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004184:	bf00      	nop
 8004186:	e7a2      	b.n	80040ce <_ZN9LineTrace7runningEv+0x16>
			break;
 8004188:	bf00      	nop
	while(goal_flag == false){
 800418a:	e7a0      	b.n	80040ce <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f807 	bl	80041a0 <_ZN9LineTrace4stopEv>
}
 8004192:	bf00      	nop
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	00000000 	.word	0x00000000

080041a0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af02      	add	r7, sp, #8
 80041a6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	velocity_ctrl_->stop();
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fe07 	bl	8005dc8 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	330c      	adds	r3, #12
 80041be:	2201      	movs	r2, #1
 80041c0:	f04f 31ff 	mov.w	r1, #4294967295
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7fe f8b5 	bl	8002334 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041d0:	3354      	adds	r3, #84	; 0x54
 80041d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d107      	bne.n	80041ea <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69d8      	ldr	r0, [r3, #28]
 80041de:	4b23      	ldr	r3, [pc, #140]	; (800426c <_ZN9LineTrace4stopEv+0xcc>)
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <_ZN9LineTrace4stopEv+0xd0>)
 80041e2:	4924      	ldr	r1, [pc, #144]	; (8004274 <_ZN9LineTrace4stopEv+0xd4>)
 80041e4:	f000 fbdc 	bl	80049a0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80041e8:	e006      	b.n	80041f8 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69d8      	ldr	r0, [r3, #28]
 80041ee:	4b22      	ldr	r3, [pc, #136]	; (8004278 <_ZN9LineTrace4stopEv+0xd8>)
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <_ZN9LineTrace4stopEv+0xdc>)
 80041f2:	4920      	ldr	r1, [pc, #128]	; (8004274 <_ZN9LineTrace4stopEv+0xd4>)
 80041f4:	f000 fbf7 	bl	80049e6 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041fe:	3358      	adds	r3, #88	; 0x58
 8004200:	2200      	movs	r2, #0
 8004202:	9200      	str	r2, [sp, #0]
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	491e      	ldr	r1, [pc, #120]	; (8004280 <_ZN9LineTrace4stopEv+0xe0>)
 8004208:	481a      	ldr	r0, [pc, #104]	; (8004274 <_ZN9LineTrace4stopEv+0xd4>)
 800420a:	f7fd fb27 	bl	800185c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004214:	33e8      	adds	r3, #232	; 0xe8
 8004216:	2200      	movs	r2, #0
 8004218:	9200      	str	r2, [sp, #0]
 800421a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800421e:	4919      	ldr	r1, [pc, #100]	; (8004284 <_ZN9LineTrace4stopEv+0xe4>)
 8004220:	4814      	ldr	r0, [pc, #80]	; (8004274 <_ZN9LineTrace4stopEv+0xd4>)
 8004222:	f7fd fb1b 	bl	800185c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 800422c:	33b8      	adds	r3, #184	; 0xb8
 800422e:	2200      	movs	r2, #0
 8004230:	9200      	str	r2, [sp, #0]
 8004232:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004236:	4914      	ldr	r1, [pc, #80]	; (8004288 <_ZN9LineTrace4stopEv+0xe8>)
 8004238:	480e      	ldr	r0, [pc, #56]	; (8004274 <_ZN9LineTrace4stopEv+0xd4>)
 800423a:	f7fd fb0f 	bl	800185c <sd_write_array_float>

	led_.LR(-1, 0);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	330c      	adds	r3, #12
 8004242:	2200      	movs	r2, #0
 8004244:	f04f 31ff 	mov.w	r1, #4294967295
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe f873 	bl	8002334 <_ZN3LED2LREaa>

	logger_->resetIdx();
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fc57 	bl	8004b06 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69db      	ldr	r3, [r3, #28]
 800425c:	4618      	mov	r0, r3
 800425e:	f000 fc06 	bl	8004a6e <_ZN6Logger10resetLogs2Ev>
}
 8004262:	bf00      	nop
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	08019ca8 	.word	0x08019ca8
 8004270:	08019cb4 	.word	0x08019cb4
 8004274:	08019cc4 	.word	0x08019cc4
 8004278:	08019cd0 	.word	0x08019cd0
 800427c:	08019cdc 	.word	0x08019cdc
 8004280:	08019cec 	.word	0x08019cec
 8004284:	08019cfc 	.word	0x08019cfc
 8004288:	08019d08 	.word	0x08019d08

0800428c <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b08b      	sub	sp, #44	; 0x2c
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fb25 	bl	80048e8 <_ZN6Logger23getDistanceArrayPointerEv>
 800429e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	69db      	ldr	r3, [r3, #28]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fb2d 	bl	8004904 <_ZN6Logger20getThetaArrayPointerEv>
 80042aa:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80042ac:	2300      	movs	r3, #0
 80042ae:	837b      	strh	r3, [r7, #26]
 80042b0:	8b7b      	ldrh	r3, [r7, #26]
 80042b2:	f241 726f 	movw	r2, #5999	; 0x176f
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d84b      	bhi.n	8004352 <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 80042ba:	8b7b      	ldrh	r3, [r7, #26]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4413      	add	r3, r2
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80042c6:	8b7b      	ldrh	r3, [r7, #26]
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4413      	add	r3, r2
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80042d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80042d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d101      	bne.n	80042e4 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80042e2:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80042e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80042e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80042ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042f0:	eeb0 0a66 	vmov.f32	s0, s13
 80042f4:	f7fe fb8e 	bl	8002a14 <_ZSt3absf>
 80042f8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80042fc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004300:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004418 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004304:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430c:	db01      	blt.n	8004312 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 800430e:	4b43      	ldr	r3, [pc, #268]	; (800441c <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004310:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 8004312:	8b7c      	ldrh	r4, [r7, #26]
 8004314:	ed97 0a05 	vldr	s0, [r7, #20]
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7fe fead 	bl	8003078 <_ZN9LineTrace15radius2VelocityEf>
 800431e:	eef0 7a40 	vmov.f32	s15, s0
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004328:	3304      	adds	r3, #4
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004332:	8b7b      	ldrh	r3, [r7, #26]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	441a      	add	r2, r3
 800433a:	8b7b      	ldrh	r3, [r7, #26]
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	6879      	ldr	r1, [r7, #4]
 8004340:	3332      	adds	r3, #50	; 0x32
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3304      	adds	r3, #4
 8004348:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800434a:	8b7b      	ldrh	r3, [r7, #26]
 800434c:	3301      	adds	r3, #1
 800434e:	837b      	strh	r3, [r7, #26]
 8004350:	e7ae      	b.n	80042b0 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004358:	3354      	adds	r3, #84	; 0x54
 800435a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d120      	bne.n	80043a4 <_ZN9LineTrace20createVelocityTabeleEv+0x118>
		velocity_table_[0] = min_velocity_;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800436e:	3310      	adds	r3, #16
 8004370:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004378:	3398      	adds	r3, #152	; 0x98
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	6939      	ldr	r1, [r7, #16]
 8004380:	eeb0 0a67 	vmov.f32	s0, s15
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fe ff2f 	bl	80031e8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004390:	3394      	adds	r3, #148	; 0x94
 8004392:	edd3 7a00 	vldr	s15, [r3]
 8004396:	6939      	ldr	r1, [r7, #16]
 8004398:	eeb0 0a67 	vmov.f32	s0, s15
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7fe ffc7 	bl	8003330 <_ZN9LineTrace20accelerateProcessingEfPKf>
 80043a2:	e027      	b.n	80043f4 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043aa:	3354      	adds	r3, #84	; 0x54
 80043ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d11f      	bne.n	80043f4 <_ZN9LineTrace20createVelocityTabeleEv+0x168>
		velocity_table_[0] = min_velocity2_;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043c0:	3310      	adds	r3, #16
 80043c2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80043ca:	33a0      	adds	r3, #160	; 0xa0
 80043cc:	edd3 7a00 	vldr	s15, [r3]
 80043d0:	6939      	ldr	r1, [r7, #16]
 80043d2:	eeb0 0a67 	vmov.f32	s0, s15
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fe ff06 	bl	80031e8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80043e2:	339c      	adds	r3, #156	; 0x9c
 80043e4:	edd3 7a00 	vldr	s15, [r3]
 80043e8:	6939      	ldr	r1, [r7, #16]
 80043ea:	eeb0 0a67 	vmov.f32	s0, s15
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fe ff9e 	bl	8003330 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043fa:	3310      	adds	r3, #16
 80043fc:	2200      	movs	r2, #0
 80043fe:	9200      	str	r2, [sp, #0]
 8004400:	f241 7270 	movw	r2, #6000	; 0x1770
 8004404:	4906      	ldr	r1, [pc, #24]	; (8004420 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004406:	4807      	ldr	r0, [pc, #28]	; (8004424 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 8004408:	f7fd fa28 	bl	800185c <sd_write_array_float>

}
 800440c:	bf00      	nop
 800440e:	3724      	adds	r7, #36	; 0x24
 8004410:	46bd      	mov	sp, r7
 8004412:	bd90      	pop	{r4, r7, pc}
 8004414:	3727c5ac 	.word	0x3727c5ac
 8004418:	459c4000 	.word	0x459c4000
 800441c:	459c4000 	.word	0x459c4000
 8004420:	08019d18 	.word	0x08019d18
 8004424:	08019cc4 	.word	0x08019cc4

08004428 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b08b      	sub	sp, #44	; 0x2c
 800442c:	af02      	add	r7, sp, #8
 800442e:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69d8      	ldr	r0, [r3, #28]
 8004434:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 8004436:	4a6c      	ldr	r2, [pc, #432]	; (80045e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004438:	496c      	ldr	r1, [pc, #432]	; (80045ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800443a:	f000 faf9 	bl	8004a30 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004444:	3358      	adds	r3, #88	; 0x58
 8004446:	2264      	movs	r2, #100	; 0x64
 8004448:	4969      	ldr	r1, [pc, #420]	; (80045f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 800444a:	4868      	ldr	r0, [pc, #416]	; (80045ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800444c:	f7fd fa6c 	bl	8001928 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 8004456:	33e8      	adds	r3, #232	; 0xe8
 8004458:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800445c:	4965      	ldr	r1, [pc, #404]	; (80045f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 800445e:	4863      	ldr	r0, [pc, #396]	; (80045ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004460:	f7fd fa62 	bl	8001928 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fa3d 	bl	80048e8 <_ZN6Logger23getDistanceArrayPointerEv>
 800446e:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fa45 	bl	8004904 <_ZN6Logger20getThetaArrayPointerEv>
 800447a:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800447c:	2300      	movs	r3, #0
 800447e:	837b      	strh	r3, [r7, #26]
 8004480:	8b7b      	ldrh	r3, [r7, #26]
 8004482:	f241 726f 	movw	r2, #5999	; 0x176f
 8004486:	4293      	cmp	r3, r2
 8004488:	d84b      	bhi.n	8004522 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xfa>

		temp_distance = p_distance[i];
 800448a:	8b7b      	ldrh	r3, [r7, #26]
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4413      	add	r3, r2
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4413      	add	r3, r2
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80044a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80044a6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d101      	bne.n	80044b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80044b0:	4b51      	ldr	r3, [pc, #324]	; (80045f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80044b2:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80044b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80044b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80044bc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044c0:	eeb0 0a66 	vmov.f32	s0, s13
 80044c4:	f7fe faa6 	bl	8002a14 <_ZSt3absf>
 80044c8:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80044cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80044d0:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80045fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80044d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	db01      	blt.n	80044e2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80044de:	4b48      	ldr	r3, [pc, #288]	; (8004600 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80044e0:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80044e2:	8b7c      	ldrh	r4, [r7, #26]
 80044e4:	ed97 0a05 	vldr	s0, [r7, #20]
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f7fe fdc5 	bl	8003078 <_ZN9LineTrace15radius2VelocityEf>
 80044ee:	eef0 7a40 	vmov.f32	s15, s0
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80044f8:	3304      	adds	r3, #4
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4413      	add	r3, r2
 80044fe:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004502:	8b7b      	ldrh	r3, [r7, #26]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	441a      	add	r2, r3
 800450a:	8b7b      	ldrh	r3, [r7, #26]
 800450c:	6812      	ldr	r2, [r2, #0]
 800450e:	6879      	ldr	r1, [r7, #4]
 8004510:	3332      	adds	r3, #50	; 0x32
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	3304      	adds	r3, #4
 8004518:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800451a:	8b7b      	ldrh	r3, [r7, #26]
 800451c:	3301      	adds	r3, #1
 800451e:	837b      	strh	r3, [r7, #26]
 8004520:	e7ae      	b.n	8004480 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004528:	3354      	adds	r3, #84	; 0x54
 800452a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d120      	bne.n	8004574 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14c>
		velocity_table_[0] = min_velocity_;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800453e:	3310      	adds	r3, #16
 8004540:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004548:	3398      	adds	r3, #152	; 0x98
 800454a:	edd3 7a00 	vldr	s15, [r3]
 800454e:	6939      	ldr	r1, [r7, #16]
 8004550:	eeb0 0a67 	vmov.f32	s0, s15
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fe fe47 	bl	80031e8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004560:	3394      	adds	r3, #148	; 0x94
 8004562:	edd3 7a00 	vldr	s15, [r3]
 8004566:	6939      	ldr	r1, [r7, #16]
 8004568:	eeb0 0a67 	vmov.f32	s0, s15
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f7fe fedf 	bl	8003330 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004572:	e027      	b.n	80045c4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800457a:	3354      	adds	r3, #84	; 0x54
 800457c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d11f      	bne.n	80045c4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19c>
		velocity_table_[0] = min_velocity2_;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004590:	3310      	adds	r3, #16
 8004592:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800459a:	33a0      	adds	r3, #160	; 0xa0
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	6939      	ldr	r1, [r7, #16]
 80045a2:	eeb0 0a67 	vmov.f32	s0, s15
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe fe1e 	bl	80031e8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045b2:	339c      	adds	r3, #156	; 0x9c
 80045b4:	edd3 7a00 	vldr	s15, [r3]
 80045b8:	6939      	ldr	r1, [r7, #16]
 80045ba:	eeb0 0a67 	vmov.f32	s0, s15
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7fe feb6 	bl	8003330 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045ca:	3310      	adds	r3, #16
 80045cc:	2200      	movs	r2, #0
 80045ce:	9200      	str	r2, [sp, #0]
 80045d0:	f241 7270 	movw	r2, #6000	; 0x1770
 80045d4:	490b      	ldr	r1, [pc, #44]	; (8004604 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80045d6:	4805      	ldr	r0, [pc, #20]	; (80045ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045d8:	f7fd f940 	bl	800185c <sd_write_array_float>

}
 80045dc:	bf00      	nop
 80045de:	3724      	adds	r7, #36	; 0x24
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd90      	pop	{r4, r7, pc}
 80045e4:	08019ca8 	.word	0x08019ca8
 80045e8:	08019cb4 	.word	0x08019cb4
 80045ec:	08019cc4 	.word	0x08019cc4
 80045f0:	08019cec 	.word	0x08019cec
 80045f4:	08019cfc 	.word	0x08019cfc
 80045f8:	3727c5ac 	.word	0x3727c5ac
 80045fc:	459c4000 	.word	0x459c4000
 8004600:	459c4000 	.word	0x459c4000
 8004604:	08019d18 	.word	0x08019d18

08004608 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004616:	33c0      	adds	r3, #192	; 0xc0
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004622:	33c2      	adds	r3, #194	; 0xc2
 8004624:	2200      	movs	r2, #0
 8004626:	801a      	strh	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800462e:	33c4      	adds	r3, #196	; 0xc4
 8004630:	2200      	movs	r2, #0
 8004632:	801a      	strh	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800463a:	33c6      	adds	r3, #198	; 0xc6
 800463c:	2200      	movs	r2, #0
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004646:	33c8      	adds	r3, #200	; 0xc8
 8004648:	2200      	movs	r2, #0
 800464a:	801a      	strh	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004652:	33ca      	adds	r3, #202	; 0xca
 8004654:	2200      	movs	r2, #0
 8004656:	801a      	strh	r2, [r3, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004670:	2300      	movs	r3, #0
 8004672:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004674:	f7fd fa44 	bl	8001b00 <sd_mount>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b00      	cmp	r3, #0
 8004686:	d016      	beq.n	80046b6 <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004688:	f7fc fd0a 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800468c:	2100      	movs	r1, #0
 800468e:	2000      	movs	r0, #0
 8004690:	f7fc fd16 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004694:	4815      	ldr	r0, [pc, #84]	; (80046ec <_ZN6Logger10sdCardInitEv+0x84>)
 8004696:	f7fc fd3d 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800469a:	2101      	movs	r1, #1
 800469c:	2000      	movs	r0, #0
 800469e:	f7fc fd0f 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 80046a2:	4813      	ldr	r0, [pc, #76]	; (80046f0 <_ZN6Logger10sdCardInitEv+0x88>)
 80046a4:	f7fc fd36 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 80046a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046ac:	f005 fb08 	bl	8009cc0 <HAL_Delay>

	  ret = true;
 80046b0:	2301      	movs	r3, #1
 80046b2:	73fb      	strb	r3, [r7, #15]
 80046b4:	e015      	b.n	80046e2 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 80046b6:	f7fc fcf3 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046ba:	2100      	movs	r1, #0
 80046bc:	2000      	movs	r0, #0
 80046be:	f7fc fcff 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046c2:	480a      	ldr	r0, [pc, #40]	; (80046ec <_ZN6Logger10sdCardInitEv+0x84>)
 80046c4:	f7fc fd26 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80046c8:	2101      	movs	r1, #1
 80046ca:	2000      	movs	r0, #0
 80046cc:	f7fc fcf8 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80046d0:	4808      	ldr	r0, [pc, #32]	; (80046f4 <_ZN6Logger10sdCardInitEv+0x8c>)
 80046d2:	f7fc fd1f 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80046d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046da:	f005 faf1 	bl	8009cc0 <HAL_Delay>

	  ret = false;
 80046de:	2300      	movs	r3, #0
 80046e0:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	08019d28 	.word	0x08019d28
 80046f0:	08019d34 	.word	0x08019d34
 80046f4:	08019d3c 	.word	0x08019d3c

080046f8 <_ZN6Logger11storeLogIntEs>:
		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
	}
}

void Logger::storeLogInt(int16_t data)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	460b      	mov	r3, r1
 8004702:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800470a:	33c0      	adds	r3, #192	; 0xc0
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d025      	beq.n	800475e <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004718:	33c6      	adds	r3, #198	; 0xc6
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8004724:	8879      	ldrh	r1, [r7, #2]
 8004726:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004730:	33c6      	adds	r3, #198	; 0xc6
 8004732:	881b      	ldrh	r3, [r3, #0]
 8004734:	3301      	adds	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800473e:	33c6      	adds	r3, #198	; 0xc6
 8004740:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004748:	33c6      	adds	r3, #198	; 0xc6
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004750:	d305      	bcc.n	800475e <_ZN6Logger11storeLogIntEs+0x66>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004758:	33c6      	adds	r3, #198	; 0xc6
 800475a:	2200      	movs	r2, #0
 800475c:	801a      	strh	r2, [r3, #0]
	}

}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800477c:	33c0      	adds	r3, #192	; 0xc0
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d025      	beq.n	80047d0 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800478a:	33c8      	adds	r3, #200	; 0xc8
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004794:	3310      	adds	r3, #16
 8004796:	8879      	ldrh	r1, [r7, #2]
 8004798:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047a2:	33c8      	adds	r3, #200	; 0xc8
 80047a4:	881b      	ldrh	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047b0:	33c8      	adds	r3, #200	; 0xc8
 80047b2:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ba:	33c8      	adds	r3, #200	; 0xc8
 80047bc:	881b      	ldrh	r3, [r3, #0]
 80047be:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047c2:	d305      	bcc.n	80047d0 <_ZN6Logger12storeLog2IntEs+0x66>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ca:	33c8      	adds	r3, #200	; 0xc8
 80047cc:	2200      	movs	r2, #0
 80047ce:	801a      	strh	r2, [r3, #0]
	}

}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	ed87 0a02 	vstr	s0, [r7, #8]
 80047e8:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047f2:	33ca      	adds	r3, #202	; 0xca
 80047f4:	881b      	ldrh	r3, [r3, #0]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80047fc:	3310      	adds	r3, #16
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	4413      	add	r3, r2
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800480c:	33ca      	adds	r3, #202	; 0xca
 800480e:	881b      	ldrh	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8004816:	3320      	adds	r3, #32
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004826:	33ca      	adds	r3, #202	; 0xca
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004834:	33ca      	adds	r3, #202	; 0xca
 8004836:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800483e:	33ca      	adds	r3, #202	; 0xca
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	f241 726f 	movw	r2, #5999	; 0x176f
 8004846:	4293      	cmp	r3, r2
 8004848:	d905      	bls.n	8004856 <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004850:	33ca      	adds	r3, #202	; 0xca
 8004852:	2200      	movs	r2, #0
 8004854:	801a      	strh	r2, [r3, #0]
	//}
}
 8004856:	bf00      	nop
 8004858:	3714      	adds	r7, #20
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004862:	b480      	push	{r7}
 8004864:	b085      	sub	sp, #20
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	ed87 0a02 	vstr	s0, [r7, #8]
 800486e:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004878:	33ca      	adds	r3, #202	; 0xca
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 8004882:	3350      	adds	r3, #80	; 0x50
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004892:	33ca      	adds	r3, #202	; 0xca
 8004894:	881b      	ldrh	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800489c:	3340      	adds	r3, #64	; 0x40
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ac:	33ca      	adds	r3, #202	; 0xca
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	3301      	adds	r3, #1
 80048b2:	b29a      	uxth	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048ba:	33ca      	adds	r3, #202	; 0xca
 80048bc:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048c4:	33ca      	adds	r3, #202	; 0xca
 80048c6:	881b      	ldrh	r3, [r3, #0]
 80048c8:	f241 726f 	movw	r2, #5999	; 0x176f
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d905      	bls.n	80048dc <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048d6:	33ca      	adds	r3, #202	; 0xca
 80048d8:	2200      	movs	r2, #0
 80048da:	801a      	strh	r2, [r3, #0]
	//}
}
 80048dc:	bf00      	nop
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
	return store_distance_;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80048f6:	3340      	adds	r3, #64	; 0x40
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004912:	3380      	adds	r3, #128	; 0x80
}
 8004914:	4618      	mov	r0, r3
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	4613      	mov	r3, r2
 8004934:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	68b8      	ldr	r0, [r7, #8]
 800493c:	f7fc ff8e 	bl	800185c <sd_write_array_float>
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}

08004948 <_ZN6Logger11saveLogsIntEPKcS1_>:
{
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
}

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af02      	add	r7, sp, #8
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 800495a:	2300      	movs	r3, #0
 800495c:	9300      	str	r3, [sp, #0]
 800495e:	4613      	mov	r3, r2
 8004960:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004964:	6879      	ldr	r1, [r7, #4]
 8004966:	68b8      	ldr	r0, [r7, #8]
 8004968:	f7fd f86a 	bl	8001a40 <sd_write_array_int>
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af02      	add	r7, sp, #8
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004986:	3320      	adds	r3, #32
 8004988:	2200      	movs	r2, #0
 800498a:	9200      	str	r2, [sp, #0]
 800498c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	68b8      	ldr	r0, [r7, #8]
 8004994:	f7fd f854 	bl	8001a40 <sd_write_array_int>
}
 8004998:	bf00      	nop
 800499a:	3710      	adds	r7, #16
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80049b4:	3340      	adds	r3, #64	; 0x40
 80049b6:	2200      	movs	r2, #0
 80049b8:	9200      	str	r2, [sp, #0]
 80049ba:	f241 7270 	movw	r2, #6000	; 0x1770
 80049be:	6879      	ldr	r1, [r7, #4]
 80049c0:	68b8      	ldr	r0, [r7, #8]
 80049c2:	f7fc ff4b 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80049cc:	3380      	adds	r3, #128	; 0x80
 80049ce:	2200      	movs	r2, #0
 80049d0:	9200      	str	r2, [sp, #0]
 80049d2:	f241 7270 	movw	r2, #6000	; 0x1770
 80049d6:	6839      	ldr	r1, [r7, #0]
 80049d8:	68b8      	ldr	r0, [r7, #8]
 80049da:	f7fc ff3f 	bl	800185c <sd_write_array_float>
}
 80049de:	bf00      	nop
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b086      	sub	sp, #24
 80049ea:	af02      	add	r7, sp, #8
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80049fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80049fe:	2200      	movs	r2, #0
 8004a00:	9200      	str	r2, [sp, #0]
 8004a02:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a06:	6879      	ldr	r1, [r7, #4]
 8004a08:	68b8      	ldr	r0, [r7, #8]
 8004a0a:	f7fc ff27 	bl	800185c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004a14:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004a18:	2200      	movs	r2, #0
 8004a1a:	9200      	str	r2, [sp, #0]
 8004a1c:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a20:	6839      	ldr	r1, [r7, #0]
 8004a22:	68b8      	ldr	r0, [r7, #8]
 8004a24:	f7fc ff1a 	bl	800185c <sd_write_array_float>
}
 8004a28:	bf00      	nop
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b084      	sub	sp, #16
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a44:	3340      	adds	r3, #64	; 0x40
 8004a46:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a4a:	6879      	ldr	r1, [r7, #4]
 8004a4c:	68b8      	ldr	r0, [r7, #8]
 8004a4e:	f7fc ff6b 	bl	8001928 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a58:	3380      	adds	r3, #128	; 0x80
 8004a5a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	68b8      	ldr	r0, [r7, #8]
 8004a62:	f7fc ff61 	bl	8001928 <sd_read_array_float>
}
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b08b      	sub	sp, #44	; 0x2c
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004a7c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a8c:	3340      	adds	r3, #64	; 0x40
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d009      	beq.n	8004aac <_ZN6Logger10resetLogs2Ev+0x3e>
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	617b      	str	r3, [r7, #20]
		log = 0;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e7f1      	b.n	8004a90 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004ab2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004ab6:	613b      	str	r3, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	623b      	str	r3, [r7, #32]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004ac2:	3340      	adds	r3, #64	; 0x40
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	6a3a      	ldr	r2, [r7, #32]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d009      	beq.n	8004ae2 <_ZN6Logger10resetLogs2Ev+0x74>
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	3304      	adds	r3, #4
 8004ade:	623b      	str	r3, [r7, #32]
 8004ae0:	e7f1      	b.n	8004ac6 <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ae8:	33c2      	adds	r3, #194	; 0xc2
 8004aea:	2200      	movs	r2, #0
 8004aec:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004af4:	33ca      	adds	r3, #202	; 0xca
 8004af6:	2200      	movs	r2, #0
 8004af8:	801a      	strh	r2, [r3, #0]
}
 8004afa:	bf00      	nop
 8004afc:	372c      	adds	r7, #44	; 0x2c
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b14:	33c2      	adds	r3, #194	; 0xc2
 8004b16:	2200      	movs	r2, #0
 8004b18:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b20:	33ca      	adds	r3, #202	; 0xca
 8004b22:	2200      	movs	r2, #0
 8004b24:	801a      	strh	r2, [r3, #0]
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b40:	33c0      	adds	r3, #192	; 0xc0
 8004b42:	2201      	movs	r2, #1
 8004b44:	701a      	strb	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004b60:	33c0      	adds	r3, #192	; 0xc0
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr

08004b72 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004b72:	b480      	push	{r7}
 8004b74:	b083      	sub	sp, #12
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	6078      	str	r0, [r7, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	805a      	strh	r2, [r3, #2]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004b9c:	2108      	movs	r1, #8
 8004b9e:	4805      	ldr	r0, [pc, #20]	; (8004bb4 <_ZN5Motor4initEv+0x20>)
 8004ba0:	f00a fa3e 	bl	800f020 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004ba4:	210c      	movs	r1, #12
 8004ba6:	4803      	ldr	r0, [pc, #12]	; (8004bb4 <_ZN5Motor4initEv+0x20>)
 8004ba8:	f00a fa3a 	bl	800f020 <HAL_TIM_PWM_Start>

}
 8004bac:	bf00      	nop
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20044708 	.word	0x20044708

08004bb8 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	da0d      	bge.n	8004be6 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd0:	481f      	ldr	r0, [pc, #124]	; (8004c50 <_ZN5Motor9motorCtrlEv+0x98>)
 8004bd2:	f006 fb0b 	bl	800b1ec <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	425b      	negs	r3, r3
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	81fb      	strh	r3, [r7, #14]
 8004be4:	e00a      	b.n	8004bfc <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004be6:	2201      	movs	r2, #1
 8004be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bec:	4818      	ldr	r0, [pc, #96]	; (8004c50 <_ZN5Motor9motorCtrlEv+0x98>)
 8004bee:	f006 fafd 	bl	800b1ec <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da0d      	bge.n	8004c22 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004c06:	2201      	movs	r2, #1
 8004c08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c0c:	4810      	ldr	r0, [pc, #64]	; (8004c50 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c0e:	f006 faed 	bl	800b1ec <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	425b      	negs	r3, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	81bb      	strh	r3, [r7, #12]
 8004c20:	e00a      	b.n	8004c38 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004c22:	2200      	movs	r2, #0
 8004c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c28:	4809      	ldr	r0, [pc, #36]	; (8004c50 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c2a:	f006 fadf 	bl	800b1ec <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004c38:	89fa      	ldrh	r2, [r7, #14]
 8004c3a:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004c40:	89ba      	ldrh	r2, [r7, #12]
 8004c42:	4b04      	ldr	r3, [pc, #16]	; (8004c54 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c48:	bf00      	nop
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40020c00 	.word	0x40020c00
 8004c54:	20044708 	.word	0x20044708

08004c58 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004c58:	b590      	push	{r4, r7, lr}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6178      	str	r0, [r7, #20]
 8004c60:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c64:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	4b30      	ldr	r3, [pc, #192]	; (8004d30 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c72:	f7fb ff69 	bl	8000b48 <__aeabi_dcmpgt>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <_ZN5Motor8setRatioEdd+0x30>
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	4c2b      	ldr	r4, [pc, #172]	; (8004d30 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c82:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004c86:	e00e      	b.n	8004ca6 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004c88:	f04f 0200 	mov.w	r2, #0
 8004c8c:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <_ZN5Motor8setRatioEdd+0xdc>)
 8004c8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c92:	f7fb ff3b 	bl	8000b0c <__aeabi_dcmplt>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <_ZN5Motor8setRatioEdd+0x4e>
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	4c24      	ldr	r4, [pc, #144]	; (8004d34 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ca2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	4b21      	ldr	r3, [pc, #132]	; (8004d30 <_ZN5Motor8setRatioEdd+0xd8>)
 8004cac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb0:	f7fb ff4a 	bl	8000b48 <__aeabi_dcmpgt>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d005      	beq.n	8004cc6 <_ZN5Motor8setRatioEdd+0x6e>
 8004cba:	f04f 0300 	mov.w	r3, #0
 8004cbe:	4c1c      	ldr	r4, [pc, #112]	; (8004d30 <_ZN5Motor8setRatioEdd+0xd8>)
 8004cc0:	e9c7 3400 	strd	r3, r4, [r7]
 8004cc4:	e00e      	b.n	8004ce4 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	4b1a      	ldr	r3, [pc, #104]	; (8004d34 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ccc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cd0:	f7fb ff1c 	bl	8000b0c <__aeabi_dcmplt>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d004      	beq.n	8004ce4 <_ZN5Motor8setRatioEdd+0x8c>
 8004cda:	f04f 0300 	mov.w	r3, #0
 8004cde:	4c15      	ldr	r4, [pc, #84]	; (8004d34 <_ZN5Motor8setRatioEdd+0xdc>)
 8004ce0:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	4b13      	ldr	r3, [pc, #76]	; (8004d38 <_ZN5Motor8setRatioEdd+0xe0>)
 8004cea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cee:	f7fb fc9b 	bl	8000628 <__aeabi_dmul>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	460c      	mov	r4, r1
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	f7fb ff45 	bl	8000b88 <__aeabi_d2iz>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	b21a      	sxth	r2, r3
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004d06:	f04f 0200 	mov.w	r2, #0
 8004d0a:	4b0b      	ldr	r3, [pc, #44]	; (8004d38 <_ZN5Motor8setRatioEdd+0xe0>)
 8004d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d10:	f7fb fc8a 	bl	8000628 <__aeabi_dmul>
 8004d14:	4603      	mov	r3, r0
 8004d16:	460c      	mov	r4, r1
 8004d18:	4618      	mov	r0, r3
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	f7fb ff34 	bl	8000b88 <__aeabi_d2iz>
 8004d20:	4603      	mov	r3, r0
 8004d22:	b21a      	sxth	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	805a      	strh	r2, [r3, #2]

}
 8004d28:	bf00      	nop
 8004d2a:	371c      	adds	r7, #28
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd90      	pop	{r4, r7, pc}
 8004d30:	3ff00000 	.word	0x3ff00000
 8004d34:	bff00000 	.word	0xbff00000
 8004d38:	409c2000 	.word	0x409c2000

08004d3c <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004d56:	b480      	push	{r7}
 8004d58:	b083      	sub	sp, #12
 8004d5a:	af00      	add	r7, sp, #0
 8004d5c:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004d70:	b490      	push	{r4, r7}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	f04f 0400 	mov.w	r4, #0
 8004d88:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	f04f 0400 	mov.w	r4, #0
 8004d96:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	f04f 0400 	mov.w	r4, #0
 8004da4:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	f04f 0400 	mov.w	r4, #0
 8004db2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f04f 0400 	mov.w	r4, #0
 8004dc0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	609a      	str	r2, [r3, #8]
}
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc90      	pop	{r4, r7}
 8004de0:	4770      	bx	lr
 8004de2:	0000      	movs	r0, r0
 8004de4:	0000      	movs	r0, r0
	...

08004de8 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd f81e 	bl	8001e38 <_ZN3IMU8getOmegaEv>
 8004dfc:	ee10 3a10 	vmov	r3, s0
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb fbb9 	bl	8000578 <__aeabi_f2d>
 8004e06:	4603      	mov	r3, r0
 8004e08:	460c      	mov	r4, r1
 8004e0a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7fc fc48 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004e18:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004e1c:	a376      	add	r3, pc, #472	; (adr r3, 8004ff8 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e22:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004e26:	f7fb fbff 	bl	8000628 <__aeabi_dmul>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7fb fb9c 	bl	8000578 <__aeabi_f2d>
 8004e40:	4682      	mov	sl, r0
 8004e42:	468b      	mov	fp, r1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e58:	f7fb fd10 	bl	800087c <__aeabi_ddiv>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	460b      	mov	r3, r1
 8004e60:	4640      	mov	r0, r8
 8004e62:	4649      	mov	r1, r9
 8004e64:	f7fb fa2a 	bl	80002bc <__adddf3>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	ec43 2b17 	vmov	d7, r2, r3
 8004e70:	eeb0 0a47 	vmov.f32	s0, s14
 8004e74:	eef0 0a67 	vmov.f32	s1, s15
 8004e78:	f00f fc16 	bl	80146a8 <cos>
 8004e7c:	ec53 2b10 	vmov	r2, r3, d0
 8004e80:	4650      	mov	r0, sl
 8004e82:	4659      	mov	r1, fp
 8004e84:	f7fb fbd0 	bl	8000628 <__aeabi_dmul>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f7fb fa14 	bl	80002bc <__adddf3>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f7fb fb67 	bl	8000578 <__aeabi_f2d>
 8004eaa:	4682      	mov	sl, r0
 8004eac:	468b      	mov	fp, r1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ec2:	f7fb fcdb 	bl	800087c <__aeabi_ddiv>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4649      	mov	r1, r9
 8004ece:	f7fb f9f5 	bl	80002bc <__adddf3>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	ec43 2b17 	vmov	d7, r2, r3
 8004eda:	eeb0 0a47 	vmov.f32	s0, s14
 8004ede:	eef0 0a67 	vmov.f32	s1, s15
 8004ee2:	f00f fc25 	bl	8014730 <sin>
 8004ee6:	ec53 2b10 	vmov	r2, r3, d0
 8004eea:	4650      	mov	r0, sl
 8004eec:	4659      	mov	r1, fp
 8004eee:	f7fb fb9b 	bl	8000628 <__aeabi_dmul>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f7fb f9df 	bl	80002bc <__adddf3>
 8004efe:	4603      	mov	r3, r0
 8004f00:	460c      	mov	r4, r1
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004f14:	461a      	mov	r2, r3
 8004f16:	4623      	mov	r3, r4
 8004f18:	f7fb f9d0 	bl	80002bc <__adddf3>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	460c      	mov	r4, r1
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f32:	eeb0 0a47 	vmov.f32	s0, s14
 8004f36:	eef0 0a67 	vmov.f32	s1, s15
 8004f3a:	f00f fbb5 	bl	80146a8 <cos>
 8004f3e:	ec51 0b10 	vmov	r0, r1, d0
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	4b28      	ldr	r3, [pc, #160]	; (8004fe8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f48:	f7fb fb6e 	bl	8000628 <__aeabi_dmul>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	460b      	mov	r3, r1
 8004f50:	4620      	mov	r0, r4
 8004f52:	4629      	mov	r1, r5
 8004f54:	f7fb f9b2 	bl	80002bc <__adddf3>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	460c      	mov	r4, r1
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f6e:	eeb0 0a47 	vmov.f32	s0, s14
 8004f72:	eef0 0a67 	vmov.f32	s1, s15
 8004f76:	f00f fbdb 	bl	8014730 <sin>
 8004f7a:	ec51 0b10 	vmov	r0, r1, d0
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f84:	f7fb fb50 	bl	8000628 <__aeabi_dmul>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	4629      	mov	r1, r5
 8004f90:	f7fb f994 	bl	80002bc <__adddf3>
 8004f94:	4603      	mov	r3, r0
 8004f96:	460c      	mov	r4, r1
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	f7fb fe36 	bl	8000c18 <__aeabi_d2f>
 8004fac:	4602      	mov	r2, r0
 8004fae:	4b0f      	ldr	r3, [pc, #60]	; (8004fec <_ZN8Odometry12calcPotitionEv+0x204>)
 8004fb0:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004fb8:	4618      	mov	r0, r3
 8004fba:	4621      	mov	r1, r4
 8004fbc:	f7fb fe2c 	bl	8000c18 <__aeabi_d2f>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004fc4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	4621      	mov	r1, r4
 8004fd0:	f7fb fe22 	bl	8000c18 <__aeabi_d2f>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	405b8000 	.word	0x405b8000
 8004fec:	20000288 	.word	0x20000288
 8004ff0:	2000028c 	.word	0x2000028c
 8004ff4:	20000290 	.word	0x20000290
 8004ff8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004ffc:	3f50624d 	.word	0x3f50624d

08005000 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	calcPotition();
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7ff feed 	bl	8004de8 <_ZN8Odometry12calcPotitionEv>
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8005016:	b490      	push	{r4, r7}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
	return theta_;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8005024:	ec44 3b17 	vmov	d7, r3, r4
}
 8005028:	eeb0 0a47 	vmov.f32	s0, s14
 800502c:	eef0 0a67 	vmov.f32	s1, s15
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bc90      	pop	{r4, r7}
 8005036:	4770      	bx	lr

08005038 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8005038:	b490      	push	{r4, r7}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	f04f 0400 	mov.w	r4, #0
 8005066:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bc90      	pop	{r4, r7}
 8005072:	4770      	bx	lr

08005074 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005074:	b490      	push	{r4, r7}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	f04f 0400 	mov.w	r4, #0
 800508c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	f04f 0400 	mov.w	r4, #0
 800509a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f04f 0400 	mov.w	r4, #0
 80050a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80050b2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80050b6:	2200      	movs	r2, #0
 80050b8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80050ba:	4a29      	ldr	r2, [pc, #164]	; (8005160 <_ZN13PathFollowingC1Ev+0xec>)
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	f04f 0400 	mov.w	r4, #0
 80050c4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80050c8:	4a25      	ldr	r2, [pc, #148]	; (8005160 <_ZN13PathFollowingC1Ev+0xec>)
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	f04f 0400 	mov.w	r4, #0
 80050d2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80050d6:	4a22      	ldr	r2, [pc, #136]	; (8005160 <_ZN13PathFollowingC1Ev+0xec>)
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	f04f 0400 	mov.w	r4, #0
 80050e0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 80050e4:	4a1f      	ldr	r2, [pc, #124]	; (8005164 <_ZN13PathFollowingC1Ev+0xf0>)
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	f04f 0400 	mov.w	r4, #0
 80050ee:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80050f2:	4a1c      	ldr	r2, [pc, #112]	; (8005164 <_ZN13PathFollowingC1Ev+0xf0>)
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	f04f 0400 	mov.w	r4, #0
 80050fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8005100:	4a18      	ldr	r2, [pc, #96]	; (8005164 <_ZN13PathFollowingC1Ev+0xf0>)
 8005102:	f04f 0300 	mov.w	r3, #0
 8005106:	f04f 0400 	mov.w	r4, #0
 800510a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800510e:	4a15      	ldr	r2, [pc, #84]	; (8005164 <_ZN13PathFollowingC1Ev+0xf0>)
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	f04f 0400 	mov.w	r4, #0
 8005118:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800511c:	4a11      	ldr	r2, [pc, #68]	; (8005164 <_ZN13PathFollowingC1Ev+0xf0>)
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	f04f 0400 	mov.w	r4, #0
 8005126:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800512a:	4a0e      	ldr	r2, [pc, #56]	; (8005164 <_ZN13PathFollowingC1Ev+0xf0>)
 800512c:	f04f 0300 	mov.w	r3, #0
 8005130:	f04f 0400 	mov.w	r4, #0
 8005134:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8005138:	4a0b      	ldr	r2, [pc, #44]	; (8005168 <_ZN13PathFollowingC1Ev+0xf4>)
 800513a:	f04f 0300 	mov.w	r3, #0
 800513e:	f04f 0400 	mov.w	r4, #0
 8005142:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8005146:	4a08      	ldr	r2, [pc, #32]	; (8005168 <_ZN13PathFollowingC1Ev+0xf4>)
 8005148:	f04f 0300 	mov.w	r3, #0
 800514c:	f04f 0400 	mov.w	r4, #0
 8005150:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bc90      	pop	{r4, r7}
 800515e:	4770      	bx	lr
 8005160:	20044c08 	.word	0x20044c08
 8005164:	20044b98 	.word	0x20044b98
 8005168:	20044bf8 	.word	0x20044bf8

0800516c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005174:	f001 fdbe 	bl	8006cf4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005178:	f107 0318 	add.w	r3, r7, #24
 800517c:	2201      	movs	r2, #1
 800517e:	4915      	ldr	r1, [pc, #84]	; (80051d4 <_ZN13PathFollowing4initEv+0x68>)
 8005180:	4815      	ldr	r0, [pc, #84]	; (80051d8 <_ZN13PathFollowing4initEv+0x6c>)
 8005182:	f7fc fc17 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005186:	f107 0310 	add.w	r3, r7, #16
 800518a:	2201      	movs	r2, #1
 800518c:	4913      	ldr	r1, [pc, #76]	; (80051dc <_ZN13PathFollowing4initEv+0x70>)
 800518e:	4812      	ldr	r0, [pc, #72]	; (80051d8 <_ZN13PathFollowing4initEv+0x6c>)
 8005190:	f7fc fc10 	bl	80019b4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005194:	f107 0308 	add.w	r3, r7, #8
 8005198:	2201      	movs	r2, #1
 800519a:	4911      	ldr	r1, [pc, #68]	; (80051e0 <_ZN13PathFollowing4initEv+0x74>)
 800519c:	480e      	ldr	r0, [pc, #56]	; (80051d8 <_ZN13PathFollowing4initEv+0x6c>)
 800519e:	f7fc fc09 	bl	80019b4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80051a2:	ed97 7b06 	vldr	d7, [r7, #24]
 80051a6:	ed97 6b04 	vldr	d6, [r7, #16]
 80051aa:	ed97 5b02 	vldr	d5, [r7, #8]
 80051ae:	eeb0 2a45 	vmov.f32	s4, s10
 80051b2:	eef0 2a65 	vmov.f32	s5, s11
 80051b6:	eeb0 1a46 	vmov.f32	s2, s12
 80051ba:	eef0 1a66 	vmov.f32	s3, s13
 80051be:	eeb0 0a47 	vmov.f32	s0, s14
 80051c2:	eef0 0a67 	vmov.f32	s1, s15
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f80c 	bl	80051e4 <_ZN13PathFollowing7setGainEddd>
}
 80051cc:	bf00      	nop
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	08019d44 	.word	0x08019d44
 80051d8:	08019d4c 	.word	0x08019d4c
 80051dc:	08019d54 	.word	0x08019d54
 80051e0:	08019d5c 	.word	0x08019d5c

080051e4 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 80051e4:	b490      	push	{r4, r7}
 80051e6:	b088      	sub	sp, #32
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	61f8      	str	r0, [r7, #28]
 80051ec:	ed87 0b04 	vstr	d0, [r7, #16]
 80051f0:	ed87 1b02 	vstr	d1, [r7, #8]
 80051f4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80051fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051fe:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8005202:	4a07      	ldr	r2, [pc, #28]	; (8005220 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8005204:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005208:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800520c:	4a04      	ldr	r2, [pc, #16]	; (8005220 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800520e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005212:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8005216:	bf00      	nop
 8005218:	3720      	adds	r7, #32
 800521a:	46bd      	mov	sp, r7
 800521c:	bc90      	pop	{r4, r7}
 800521e:	4770      	bx	lr
 8005220:	20044c08 	.word	0x20044c08

08005224 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800522c:	2088      	movs	r0, #136	; 0x88
 800522e:	f7fc ff46 	bl	80020be <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8005232:	2080      	movs	r0, #128	; 0x80
 8005234:	f7fc ff43 	bl	80020be <INA260_init>
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8005248:	2188      	movs	r1, #136	; 0x88
 800524a:	2002      	movs	r0, #2
 800524c:	f7fc fed4 	bl	8001ff8 <INA260_read>
 8005250:	4603      	mov	r3, r0
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb f97e 	bl	8000554 <__aeabi_i2d>
 8005258:	a30c      	add	r3, pc, #48	; (adr r3, 800528c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800525a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525e:	f7fb f9e3 	bl	8000628 <__aeabi_dmul>
 8005262:	4603      	mov	r3, r0
 8005264:	460c      	mov	r4, r1
 8005266:	4618      	mov	r0, r3
 8005268:	4621      	mov	r1, r4
 800526a:	f7fb fcd5 	bl	8000c18 <__aeabi_d2f>
 800526e:	4602      	mov	r2, r0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	4a03      	ldr	r2, [pc, #12]	; (8005288 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800527a:	6013      	str	r3, [r2, #0]
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bd90      	pop	{r4, r7, pc}
 8005284:	f3af 8000 	nop.w
 8005288:	20000294 	.word	0x20000294
 800528c:	47ae147b 	.word	0x47ae147b
 8005290:	3f547ae1 	.word	0x3f547ae1

08005294 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	ee07 3a90 	vmov	s15, r3

}
 80052a4:	eeb0 0a67 	vmov.f32	s0, s15
 80052a8:	370c      	adds	r7, #12
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
	...

080052b4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80052c0:	2102      	movs	r1, #2
 80052c2:	4822      	ldr	r0, [pc, #136]	; (800534c <_ZN12RotarySwitch8getValueEv+0x98>)
 80052c4:	f005 ff7a 	bl	800b1bc <HAL_GPIO_ReadPin>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d003      	beq.n	80052e0 <_ZN12RotarySwitch8getValueEv+0x2c>
 80052d8:	89fb      	ldrh	r3, [r7, #14]
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 80052e0:	2108      	movs	r1, #8
 80052e2:	481a      	ldr	r0, [pc, #104]	; (800534c <_ZN12RotarySwitch8getValueEv+0x98>)
 80052e4:	f005 ff6a 	bl	800b1bc <HAL_GPIO_ReadPin>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	bf0c      	ite	eq
 80052ee:	2301      	moveq	r3, #1
 80052f0:	2300      	movne	r3, #0
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d003      	beq.n	8005300 <_ZN12RotarySwitch8getValueEv+0x4c>
 80052f8:	89fb      	ldrh	r3, [r7, #14]
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8005300:	2110      	movs	r1, #16
 8005302:	4812      	ldr	r0, [pc, #72]	; (800534c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005304:	f005 ff5a 	bl	800b1bc <HAL_GPIO_ReadPin>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <_ZN12RotarySwitch8getValueEv+0x6c>
 8005318:	89fb      	ldrh	r3, [r7, #14]
 800531a:	f043 0304 	orr.w	r3, r3, #4
 800531e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8005320:	2180      	movs	r1, #128	; 0x80
 8005322:	480a      	ldr	r0, [pc, #40]	; (800534c <_ZN12RotarySwitch8getValueEv+0x98>)
 8005324:	f005 ff4a 	bl	800b1bc <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	bf0c      	ite	eq
 800532e:	2301      	moveq	r3, #1
 8005330:	2300      	movne	r3, #0
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <_ZN12RotarySwitch8getValueEv+0x8c>
 8005338:	89fb      	ldrh	r3, [r7, #14]
 800533a:	f043 0308 	orr.w	r3, r3, #8
 800533e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8005340:	89fb      	ldrh	r3, [r7, #14]

}
 8005342:	4618      	mov	r0, r3
 8005344:	3710      	adds	r7, #16
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	40020c00 	.word	0x40020c00

08005350 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	801a      	strh	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	709a      	strb	r2, [r3, #2]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	70da      	strb	r2, [r3, #3]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	809a      	strh	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	80da      	strh	r2, [r3, #6]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	721a      	strb	r2, [r3, #8]
{

}
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	7a1b      	ldrb	r3, [r3, #8]
 8005398:	f083 0301 	eor.w	r3, r3, #1
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 80db 	beq.w	800555a <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 80053a4:	4b6f      	ldr	r3, [pc, #444]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	f083 0301 	eor.w	r3, r3, #1
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d02a      	beq.n	8005408 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80053b2:	2104      	movs	r1, #4
 80053b4:	486c      	ldr	r0, [pc, #432]	; (8005568 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 80053b6:	f005 ff01 	bl	800b1bc <HAL_GPIO_ReadPin>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d006      	beq.n	80053d8 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 80053ca:	4b68      	ldr	r3, [pc, #416]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	4b66      	ldr	r3, [pc, #408]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053d4:	801a      	strh	r2, [r3, #0]
 80053d6:	e002      	b.n	80053de <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 80053d8:	4b64      	ldr	r3, [pc, #400]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053da:	2200      	movs	r2, #0
 80053dc:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80053de:	4b63      	ldr	r3, [pc, #396]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	d945      	bls.n	8005472 <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 80053fa:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80053fc:	2201      	movs	r2, #1
 80053fe:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8005400:	4b5a      	ldr	r3, [pc, #360]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005402:	2200      	movs	r2, #0
 8005404:	801a      	strh	r2, [r3, #0]
 8005406:	e034      	b.n	8005472 <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 8005408:	4b56      	ldr	r3, [pc, #344]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d030      	beq.n	8005472 <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005410:	2104      	movs	r1, #4
 8005412:	4855      	ldr	r0, [pc, #340]	; (8005568 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8005414:	f005 fed2 	bl	800b1bc <HAL_GPIO_ReadPin>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	bf14      	ite	ne
 800541e:	2301      	movne	r3, #1
 8005420:	2300      	moveq	r3, #0
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b00      	cmp	r3, #0
 8005426:	d006      	beq.n	8005436 <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 8005428:	4b50      	ldr	r3, [pc, #320]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	3301      	adds	r3, #1
 800542e:	b29a      	uxth	r2, r3
 8005430:	4b4e      	ldr	r3, [pc, #312]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e002      	b.n	800543c <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 8005436:	4b4d      	ldr	r3, [pc, #308]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005438:	2200      	movs	r2, #0
 800543a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800543c:	4b4b      	ldr	r3, [pc, #300]	; (800556c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d916      	bls.n	8005472 <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	881b      	ldrh	r3, [r3, #0]
 8005448:	f083 0301 	eor.w	r3, r3, #1
 800544c:	b29a      	uxth	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 8005458:	4b42      	ldr	r3, [pc, #264]	; (8005564 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	88db      	ldrh	r3, [r3, #6]
 8005462:	3301      	adds	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	88da      	ldrh	r2, [r3, #6]
 800546e:	4b40      	ldr	r3, [pc, #256]	; (8005570 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8005470:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005472:	4b40      	ldr	r3, [pc, #256]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	f083 0301 	eor.w	r3, r3, #1
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d02a      	beq.n	80054d6 <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005484:	483c      	ldr	r0, [pc, #240]	; (8005578 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8005486:	f005 fe99 	bl	800b1bc <HAL_GPIO_ReadPin>
 800548a:	4603      	mov	r3, r0
 800548c:	2b00      	cmp	r3, #0
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d006      	beq.n	80054a8 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 800549a:	4b38      	ldr	r3, [pc, #224]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	3301      	adds	r3, #1
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	4b36      	ldr	r3, [pc, #216]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054a4:	801a      	strh	r2, [r3, #0]
 80054a6:	e002      	b.n	80054ae <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 80054a8:	4b34      	ldr	r3, [pc, #208]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80054ae:	4b33      	ldr	r3, [pc, #204]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	2b04      	cmp	r3, #4
 80054b4:	d90f      	bls.n	80054d6 <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	881b      	ldrh	r3, [r3, #0]
 80054ba:	f043 0302 	orr.w	r3, r3, #2
 80054be:	b29a      	uxth	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 80054ca:	4b2a      	ldr	r3, [pc, #168]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 80054d0:	4b2a      	ldr	r3, [pc, #168]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 80054d6:	4b27      	ldr	r3, [pc, #156]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d031      	beq.n	8005542 <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 80054de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054e2:	4825      	ldr	r0, [pc, #148]	; (8005578 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 80054e4:	f005 fe6a 	bl	800b1bc <HAL_GPIO_ReadPin>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d006      	beq.n	8005506 <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 80054f8:	4b20      	ldr	r3, [pc, #128]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	4b1e      	ldr	r3, [pc, #120]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	e002      	b.n	800550c <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 8005506:	4b1d      	ldr	r3, [pc, #116]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005508:	2200      	movs	r2, #0
 800550a:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800550c:	4b1b      	ldr	r3, [pc, #108]	; (800557c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	2b04      	cmp	r3, #4
 8005512:	d916      	bls.n	8005542 <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	881b      	ldrh	r3, [r3, #0]
 8005518:	f083 0302 	eor.w	r3, r3, #2
 800551c:	b29a      	uxth	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 8005528:	4b12      	ldr	r3, [pc, #72]	; (8005574 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	889b      	ldrh	r3, [r3, #4]
 8005532:	3301      	adds	r3, #1
 8005534:	b29a      	uxth	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	889a      	ldrh	r2, [r3, #4]
 800553e:	4b10      	ldr	r3, [pc, #64]	; (8005580 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 8005540:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	881a      	ldrh	r2, [r3, #0]
 8005546:	4b0f      	ldr	r3, [pc, #60]	; (8005584 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 8005548:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	789a      	ldrb	r2, [r3, #2]
 800554e:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 8005550:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	78da      	ldrb	r2, [r3, #3]
 8005556:	4b0d      	ldr	r3, [pc, #52]	; (800558c <_ZN10SideSensor12updateStatusEv+0x200>)
 8005558:	701a      	strb	r2, [r3, #0]
	}

}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	200002a0 	.word	0x200002a0
 8005568:	40021000 	.word	0x40021000
 800556c:	200002a4 	.word	0x200002a4
 8005570:	2000029e 	.word	0x2000029e
 8005574:	200002a1 	.word	0x200002a1
 8005578:	40020c00 	.word	0x40020c00
 800557c:	200002a2 	.word	0x200002a2
 8005580:	2000029c 	.word	0x2000029c
 8005584:	20000298 	.word	0x20000298
 8005588:	2000029a 	.word	0x2000029a
 800558c:	2000029b 	.word	0x2000029b

08005590 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	789b      	ldrb	r3, [r3, #2]
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	88db      	ldrh	r3, [r3, #6]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	80da      	strh	r2, [r3, #6]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	721a      	strb	r2, [r3, #8]
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 80055fa:	b480      	push	{r7}
 80055fc:	b083      	sub	sp, #12
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	721a      	strb	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	7a1b      	ldrb	r3, [r3, #8]
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3308      	adds	r3, #8
 800563c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005640:	2100      	movs	r1, #0
 8005642:	4618      	mov	r0, r3
 8005644:	f010 f8b0 	bl	80157a8 <memset>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800564e:	811a      	strh	r2, [r3, #8]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005656:	815a      	strh	r2, [r3, #10]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800565e:	819a      	strh	r2, [r3, #12]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005666:	81da      	strh	r2, [r3, #14]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566e:	821a      	strh	r2, [r3, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005676:	825a      	strh	r2, [r3, #18]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	829a      	strh	r2, [r3, #20]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	82da      	strh	r2, [r3, #22]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2201      	movs	r2, #1
 8005688:	831a      	strh	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2201      	movs	r2, #1
 800568e:	835a      	strh	r2, [r3, #26]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	839a      	strh	r2, [r3, #28]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	83da      	strh	r2, [r3, #30]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	841a      	strh	r2, [r3, #32]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056a8:	845a      	strh	r2, [r3, #34]	; 0x22
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2201      	movs	r2, #1
 80056ae:	849a      	strh	r2, [r3, #36]	; 0x24
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056b6:	84da      	strh	r2, [r3, #38]	; 0x26
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	859a      	strh	r2, [r3, #44]	; 0x2c
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056d2:	85da      	strh	r2, [r3, #46]	; 0x2e
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056da:	861a      	strh	r2, [r3, #48]	; 0x30
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2201      	movs	r2, #1
 80056e0:	865a      	strh	r2, [r3, #50]	; 0x32
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2201      	movs	r2, #1
 80056e6:	869a      	strh	r2, [r3, #52]	; 0x34
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f6:	871a      	strh	r2, [r3, #56]	; 0x38
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2201      	movs	r2, #1
 80056fc:	875a      	strh	r2, [r3, #58]	; 0x3a
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2201      	movs	r2, #1
 8005702:	879a      	strh	r2, [r3, #60]	; 0x3c
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2201      	movs	r2, #1
 8005708:	87da      	strh	r2, [r3, #62]	; 0x3e
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005710:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2201      	movs	r2, #1
 8005718:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2201      	movs	r2, #1
 8005720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005732:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005744:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800574e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005760:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2201      	movs	r2, #1
 8005770:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800577a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005784:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800578e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057d2:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2201      	movs	r2, #1
 80057da:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057ec:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057fe:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005818:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005832:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800583c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2201      	movs	r2, #1
 8005844:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800584e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005858:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800586a:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005874:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800587e:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2201      	movs	r2, #1
 8005886:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2201      	movs	r2, #1
 800588e:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a0:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058aa:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058b4:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058be:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d0:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2201      	movs	r2, #1
 80058e0:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005902:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800590c:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800591e:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2201      	movs	r2, #1
 8005926:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005930:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2201      	movs	r2, #1
 8005938:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2201      	movs	r2, #1
 8005948:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005952:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800595c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2201      	movs	r2, #1
 8005964:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005976:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005988:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 80059bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d042      	beq.n	8005a54 <_ZN20SystemIdentification10updateMsigEv+0x98>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80059da:	461a      	mov	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3204      	adds	r2, #4
 80059e0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80059e4:	ee07 3a90 	vmov	s15, r3
 80059e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80059fc:	3301      	adds	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a0c:	4a13      	ldr	r2, [pc, #76]	; (8005a5c <_ZN20SystemIdentification10updateMsigEv+0xa0>)
 8005a0e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005a16:	2bf9      	cmp	r3, #249	; 0xf9
 8005a18:	d903      	bls.n	8005a22 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	22fa      	movs	r2, #250	; 0xfa
 8005a1e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, inputVal_);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685c      	ldr	r4, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fa fda3 	bl	8000578 <__aeabi_f2d>
 8005a32:	4605      	mov	r5, r0
 8005a34:	460e      	mov	r6, r1
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fa fd9b 	bl	8000578 <__aeabi_f2d>
 8005a42:	4602      	mov	r2, r0
 8005a44:	460b      	mov	r3, r1
 8005a46:	ec43 2b11 	vmov	d1, r2, r3
 8005a4a:	ec46 5b10 	vmov	d0, r5, r6
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7ff f902 	bl	8004c58 <_ZN5Motor8setRatioEdd>

	}

}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a5c:	200002a8 	.word	0x200002a8

08005a60 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:
//#include "ICM_20648.h"
#include <stdio.h>

float mon_current_velocity;

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
 8005a6c:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f04f 0200 	mov.w	r2, #0
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	611a      	str	r2, [r3, #16]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f04f 0200 	mov.w	r2, #0
 8005a9c:	615a      	str	r2, [r3, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f04f 0200 	mov.w	r2, #0
 8005aa4:	619a      	str	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f04f 0200 	mov.w	r2, #0
 8005aac:	61da      	str	r2, [r3, #28]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	621a      	str	r2, [r3, #32]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f04f 0200 	mov.w	r2, #0
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
	...

08005af8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005af8:	b590      	push	{r4, r7, lr}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b04:	f107 020c 	add.w	r2, r7, #12
 8005b08:	f107 0110 	add.w	r1, r7, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fb fdb7 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005b12:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b16:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b26:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8005b2a:	6978      	ldr	r0, [r7, #20]
 8005b2c:	f7fa fd24 	bl	8000578 <__aeabi_f2d>
 8005b30:	a30e      	add	r3, pc, #56	; (adr r3, 8005b6c <_ZN12VelocityCtrl12calcVelocityEv+0x74>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	f7fa fd77 	bl	8000628 <__aeabi_dmul>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	460c      	mov	r4, r1
 8005b3e:	4618      	mov	r0, r3
 8005b40:	4621      	mov	r1, r4
 8005b42:	f7fb f869 	bl	8000c18 <__aeabi_d2f>
 8005b46:	4602      	mov	r2, r0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	609a      	str	r2, [r3, #8]
	mon_current_velocity = current_velocity_;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a05      	ldr	r2, [pc, #20]	; (8005b68 <_ZN12VelocityCtrl12calcVelocityEv+0x70>)
 8005b52:	6013      	str	r3, [r2, #0]

	return current_velocity_;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	ee07 3a90 	vmov	s15, r3
}
 8005b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8005b60:	371c      	adds	r7, #28
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd90      	pop	{r4, r7, pc}
 8005b66:	bf00      	nop
 8005b68:	200002ac 	.word	0x200002ac
 8005b6c:	1ab1d998 	.word	0x1ab1d998
 8005b70:	3f7830b5 	.word	0x3f7830b5
 8005b74:	00000000 	.word	0x00000000

08005b78 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	ed93 7a00 	vldr	s14, [r3]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	edd3 7a02 	vldr	s15, [r3, #8]
 8005b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b90:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005b9e:	4b48      	ldr	r3, [pc, #288]	; (8005cc0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005ba0:	f04f 0200 	mov.w	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8005bb4:	ed97 7a05 	vldr	s14, [r7, #20]
 8005bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bbc:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005bc0:	4b3f      	ldr	r3, [pc, #252]	; (8005cc0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7fa fcd7 	bl	8000578 <__aeabi_f2d>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	ed93 7a06 	vldr	s14, [r3, #24]
 8005bd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8005bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bdc:	ee17 0a90 	vmov	r0, s15
 8005be0:	f7fa fcca 	bl	8000578 <__aeabi_f2d>
 8005be4:	a334      	add	r3, pc, #208	; (adr r3, 8005cb8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fd1d 	bl	8000628 <__aeabi_dmul>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	f7fa fb61 	bl	80002bc <__adddf3>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	460c      	mov	r4, r1
 8005bfe:	4618      	mov	r0, r3
 8005c00:	4621      	mov	r1, r4
 8005c02:	f7fb f809 	bl	8000c18 <__aeabi_d2f>
 8005c06:	4602      	mov	r2, r0
 8005c08:	4b2d      	ldr	r3, [pc, #180]	; (8005cc0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c0a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005c12:	4b2c      	ldr	r3, [pc, #176]	; (8005cc4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005c14:	edd3 7a00 	vldr	s15, [r3]
 8005c18:	edd7 6a05 	vldr	s13, [r7, #20]
 8005c1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c24:	ee17 0a90 	vmov	r0, s15
 8005c28:	f7fa fca6 	bl	8000578 <__aeabi_f2d>
 8005c2c:	a322      	add	r3, pc, #136	; (adr r3, 8005cb8 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c32:	f7fa fe23 	bl	800087c <__aeabi_ddiv>
 8005c36:	4603      	mov	r3, r0
 8005c38:	460c      	mov	r4, r1
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	f7fa ffeb 	bl	8000c18 <__aeabi_d2f>
 8005c42:	4603      	mov	r3, r0
 8005c44:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005c46:	ed97 7a04 	vldr	s14, [r7, #16]
 8005c4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c52:	4b1b      	ldr	r3, [pc, #108]	; (8005cc0 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005c54:	edd3 7a00 	vldr	s15, [r3]
 8005c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c5c:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005c6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c72:	ee17 0a90 	vmov	r0, s15
 8005c76:	f7fa fc7f 	bl	8000578 <__aeabi_f2d>
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c84:	ed97 7a02 	vldr	s14, [r7, #8]
 8005c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8c:	ee17 0a90 	vmov	r0, s15
 8005c90:	f7fa fc72 	bl	8000578 <__aeabi_f2d>
 8005c94:	4602      	mov	r2, r0
 8005c96:	460b      	mov	r3, r1
 8005c98:	ec43 2b11 	vmov	d1, r2, r3
 8005c9c:	ec46 5b10 	vmov	d0, r5, r6
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7fe ffd9 	bl	8004c58 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005ca6:	4a07      	ldr	r2, [pc, #28]	; (8005cc4 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	6013      	str	r3, [r2, #0]
}
 8005cac:	bf00      	nop
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cb4:	f3af 8000 	nop.w
 8005cb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005cbc:	3f50624d 	.word	0x3f50624d
 8005cc0:	200002b4 	.word	0x200002b4
 8005cc4:	200002b0 	.word	0x200002b0

08005cc8 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b085      	sub	sp, #20
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cd4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	605a      	str	r2, [r3, #4]
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b085      	sub	sp, #20
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cfc:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005d0c:	bf00      	nop
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d24:	edc7 0a01 	vstr	s1, [r7, #4]
 8005d28:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	615a      	str	r2, [r3, #20]
}
 8005d3e:	bf00      	nop
 8005d40:	3714      	adds	r7, #20
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	ed87 0a02 	vstr	s0, [r7, #8]
 8005d56:	edc7 0a01 	vstr	s1, [r7, #4]
 8005d5a:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	621a      	str	r2, [r3, #32]
}
 8005d70:	bf00      	nop
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	f7ff feb7 	bl	8005af8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	f7ff feef 	bl	8005b78 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005d9a:	bf00      	nop
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005da2:	b480      	push	{r7}
 8005da4:	b083      	sub	sp, #12
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005dba:	bf00      	nop
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005df8 <_ZN12VelocityCtrl4stopEv+0x30>
 8005de0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005df8 <_ZN12VelocityCtrl4stopEv+0x30>
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fe ff37 	bl	8004c58 <_ZN5Motor8setRatioEdd>

}
 8005dea:	bf00      	nop
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	f3af 8000 	nop.w
	...

08005e00 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1e      	ldr	r2, [pc, #120]	; (8005e88 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10e      	bne.n	8005e30 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005e12:	f001 fe11 	bl	8007a38 <cppFlip100ns>

		tim7_timer++;
 8005e16:	4b1d      	ldr	r3, [pc, #116]	; (8005e8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	4a1b      	ldr	r2, [pc, #108]	; (8005e8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005e1e:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005e20:	4b1a      	ldr	r3, [pc, #104]	; (8005e8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a1a      	ldr	r2, [pc, #104]	; (8005e90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d902      	bls.n	8005e30 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a17      	ldr	r2, [pc, #92]	; (8005e94 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10e      	bne.n	8005e58 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005e3a:	f001 fdcd 	bl	80079d8 <cppFlip1ms>

		tim6_timer++;
 8005e3e:	4b16      	ldr	r3, [pc, #88]	; (8005e98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a14      	ldr	r2, [pc, #80]	; (8005e98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e46:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005e48:	4b13      	ldr	r3, [pc, #76]	; (8005e98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d902      	bls.n	8005e58 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a0f      	ldr	r2, [pc, #60]	; (8005e9c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10e      	bne.n	8005e80 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005e62:	f001 fdf3 	bl	8007a4c <cppFlip10ms>

		tim13_timer++;
 8005e66:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	4a0c      	ldr	r2, [pc, #48]	; (8005ea0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e6e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a06      	ldr	r2, [pc, #24]	; (8005e90 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d902      	bls.n	8005e80 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005e7a:	4b09      	ldr	r3, [pc, #36]	; (8005ea0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	601a      	str	r2, [r3, #0]
	}

}
 8005e80:	bf00      	nop
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	40001400 	.word	0x40001400
 8005e8c:	200448bc 	.word	0x200448bc
 8005e90:	0001869f 	.word	0x0001869f
 8005e94:	40001000 	.word	0x40001000
 8005e98:	20044878 	.word	0x20044878
 8005e9c:	40001c00 	.word	0x40001c00
 8005ea0:	200448c0 	.word	0x200448c0

08005ea4 <init>:

void init()
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eae:	4808      	ldr	r0, [pc, #32]	; (8005ed0 <init+0x2c>)
 8005eb0:	f005 f99c 	bl	800b1ec <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005eb4:	4807      	ldr	r0, [pc, #28]	; (8005ed4 <init+0x30>)
 8005eb6:	f009 f864 	bl	800ef82 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005eba:	4807      	ldr	r0, [pc, #28]	; (8005ed8 <init+0x34>)
 8005ebc:	f009 f861 	bl	800ef82 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005ec0:	4806      	ldr	r0, [pc, #24]	; (8005edc <init+0x38>)
 8005ec2:	f009 f85e 	bl	800ef82 <HAL_TIM_Base_Start_IT>

	cppInit();
 8005ec6:	f001 fce3 	bl	8007890 <cppInit>

	//path_following_initialize();

}
 8005eca:	bf00      	nop
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	200449a4 	.word	0x200449a4
 8005ed8:	20044b48 	.word	0x20044b48
 8005edc:	200448c4 	.word	0x200448c4

08005ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ee4:	f003 fe7a 	bl	8009bdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005ee8:	f000 f82a 	bl	8005f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005eec:	f000 fdbc 	bl	8006a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8005ef0:	f000 fd8a 	bl	8006a08 <MX_DMA_Init>
  MX_I2C2_Init();
 8005ef4:	f000 f9e8 	bl	80062c8 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005ef8:	f000 fa14 	bl	8006324 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005efc:	f000 fa32 	bl	8006364 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005f00:	f000 fa66 	bl	80063d0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005f04:	f000 fb70 	bl	80065e8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005f08:	f000 fc3c 	bl	8006784 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005f0c:	f000 fd52 	bl	80069b4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005f10:	f00b f80a 	bl	8010f28 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005f14:	f000 fbcc 	bl	80066b0 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005f18:	f000 f9a8 	bl	800626c <MX_I2C1_Init>
  MX_TIM3_Init();
 8005f1c:	f000 fb00 	bl	8006520 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005f20:	f000 fc88 	bl	8006834 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005f24:	f000 fcd4 	bl	80068d0 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005f28:	f000 f898 	bl	800605c <MX_ADC2_Init>
  MX_TIM7_Init();
 8005f2c:	f000 fbf6 	bl	800671c <MX_TIM7_Init>
  MX_TIM13_Init();
 8005f30:	f000 fd1c 	bl	800696c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005f34:	f7ff ffb6 	bl	8005ea4 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005f38:	f001 fdb6 	bl	8007aa8 <cppLoop>
 8005f3c:	e7fc      	b.n	8005f38 <main+0x58>
	...

08005f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b0a4      	sub	sp, #144	; 0x90
 8005f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f46:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005f4a:	2234      	movs	r2, #52	; 0x34
 8005f4c:	2100      	movs	r1, #0
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f00f fc2a 	bl	80157a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f54:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	60da      	str	r2, [r3, #12]
 8005f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005f64:	f107 030c 	add.w	r3, r7, #12
 8005f68:	223c      	movs	r2, #60	; 0x3c
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f00f fc1b 	bl	80157a8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	4b37      	ldr	r3, [pc, #220]	; (8006054 <SystemClock_Config+0x114>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	4a36      	ldr	r2, [pc, #216]	; (8006054 <SystemClock_Config+0x114>)
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6413      	str	r3, [r2, #64]	; 0x40
 8005f82:	4b34      	ldr	r3, [pc, #208]	; (8006054 <SystemClock_Config+0x114>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	60bb      	str	r3, [r7, #8]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f8e:	2300      	movs	r3, #0
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	4b31      	ldr	r3, [pc, #196]	; (8006058 <SystemClock_Config+0x118>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a30      	ldr	r2, [pc, #192]	; (8006058 <SystemClock_Config+0x118>)
 8005f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	4b2e      	ldr	r3, [pc, #184]	; (8006058 <SystemClock_Config+0x118>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005faa:	2301      	movs	r3, #1
 8005fac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005fae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005fb2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005fb8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005fbc:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005fbe:	2308      	movs	r3, #8
 8005fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005fc2:	23b4      	movs	r3, #180	; 0xb4
 8005fc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005fc8:	2302      	movs	r3, #2
 8005fca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005fce:	2308      	movs	r3, #8
 8005fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005fd4:	2302      	movs	r3, #2
 8005fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005fda:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f006 fd26 	bl	800ca30 <HAL_RCC_OscConfig>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005fea:	f000 fe7f 	bl	8006cec <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005fee:	f006 f8a1 	bl	800c134 <HAL_PWREx_EnableOverDrive>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005ff8:	f000 fe78 	bl	8006cec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ffc:	230f      	movs	r3, #15
 8005ffe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006000:	2302      	movs	r3, #2
 8006002:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006004:	2300      	movs	r3, #0
 8006006:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006008:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800600c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800600e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006012:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006014:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006018:	2105      	movs	r1, #5
 800601a:	4618      	mov	r0, r3
 800601c:	f006 f8da 	bl	800c1d4 <HAL_RCC_ClockConfig>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8006026:	f000 fe61 	bl	8006cec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800602a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800602e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006030:	2300      	movs	r3, #0
 8006032:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8006034:	2300      	movs	r3, #0
 8006036:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006038:	f107 030c 	add.w	r3, r7, #12
 800603c:	4618      	mov	r0, r3
 800603e:	f006 fab9 	bl	800c5b4 <HAL_RCCEx_PeriphCLKConfig>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8006048:	f000 fe50 	bl	8006cec <Error_Handler>
  }
}
 800604c:	bf00      	nop
 800604e:	3790      	adds	r7, #144	; 0x90
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40023800 	.word	0x40023800
 8006058:	40007000 	.word	0x40007000

0800605c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006062:	463b      	mov	r3, r7
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	609a      	str	r2, [r3, #8]
 800606c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800606e:	4b7c      	ldr	r3, [pc, #496]	; (8006260 <MX_ADC2_Init+0x204>)
 8006070:	4a7c      	ldr	r2, [pc, #496]	; (8006264 <MX_ADC2_Init+0x208>)
 8006072:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8006074:	4b7a      	ldr	r3, [pc, #488]	; (8006260 <MX_ADC2_Init+0x204>)
 8006076:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800607a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800607c:	4b78      	ldr	r3, [pc, #480]	; (8006260 <MX_ADC2_Init+0x204>)
 800607e:	2200      	movs	r2, #0
 8006080:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006082:	4b77      	ldr	r3, [pc, #476]	; (8006260 <MX_ADC2_Init+0x204>)
 8006084:	2201      	movs	r2, #1
 8006086:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8006088:	4b75      	ldr	r3, [pc, #468]	; (8006260 <MX_ADC2_Init+0x204>)
 800608a:	2201      	movs	r2, #1
 800608c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800608e:	4b74      	ldr	r3, [pc, #464]	; (8006260 <MX_ADC2_Init+0x204>)
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006096:	4b72      	ldr	r3, [pc, #456]	; (8006260 <MX_ADC2_Init+0x204>)
 8006098:	2200      	movs	r2, #0
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800609c:	4b70      	ldr	r3, [pc, #448]	; (8006260 <MX_ADC2_Init+0x204>)
 800609e:	4a72      	ldr	r2, [pc, #456]	; (8006268 <MX_ADC2_Init+0x20c>)
 80060a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80060a2:	4b6f      	ldr	r3, [pc, #444]	; (8006260 <MX_ADC2_Init+0x204>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80060a8:	4b6d      	ldr	r3, [pc, #436]	; (8006260 <MX_ADC2_Init+0x204>)
 80060aa:	220e      	movs	r2, #14
 80060ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80060ae:	4b6c      	ldr	r3, [pc, #432]	; (8006260 <MX_ADC2_Init+0x204>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80060b6:	4b6a      	ldr	r3, [pc, #424]	; (8006260 <MX_ADC2_Init+0x204>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80060bc:	4868      	ldr	r0, [pc, #416]	; (8006260 <MX_ADC2_Init+0x204>)
 80060be:	f003 fe21 	bl	8009d04 <HAL_ADC_Init>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80060c8:	f000 fe10 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80060cc:	230a      	movs	r3, #10
 80060ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80060d0:	2301      	movs	r3, #1
 80060d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80060d4:	2306      	movs	r3, #6
 80060d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060d8:	463b      	mov	r3, r7
 80060da:	4619      	mov	r1, r3
 80060dc:	4860      	ldr	r0, [pc, #384]	; (8006260 <MX_ADC2_Init+0x204>)
 80060de:	f003 ff65 	bl	8009fac <HAL_ADC_ConfigChannel>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d001      	beq.n	80060ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80060e8:	f000 fe00 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80060ec:	230b      	movs	r3, #11
 80060ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80060f0:	2302      	movs	r3, #2
 80060f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060f4:	463b      	mov	r3, r7
 80060f6:	4619      	mov	r1, r3
 80060f8:	4859      	ldr	r0, [pc, #356]	; (8006260 <MX_ADC2_Init+0x204>)
 80060fa:	f003 ff57 	bl	8009fac <HAL_ADC_ConfigChannel>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006104:	f000 fdf2 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006108:	230c      	movs	r3, #12
 800610a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800610c:	2303      	movs	r3, #3
 800610e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006110:	463b      	mov	r3, r7
 8006112:	4619      	mov	r1, r3
 8006114:	4852      	ldr	r0, [pc, #328]	; (8006260 <MX_ADC2_Init+0x204>)
 8006116:	f003 ff49 	bl	8009fac <HAL_ADC_ConfigChannel>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006120:	f000 fde4 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8006124:	230d      	movs	r3, #13
 8006126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006128:	2304      	movs	r3, #4
 800612a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800612c:	463b      	mov	r3, r7
 800612e:	4619      	mov	r1, r3
 8006130:	484b      	ldr	r0, [pc, #300]	; (8006260 <MX_ADC2_Init+0x204>)
 8006132:	f003 ff3b 	bl	8009fac <HAL_ADC_ConfigChannel>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800613c:	f000 fdd6 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006140:	2300      	movs	r3, #0
 8006142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006144:	2305      	movs	r3, #5
 8006146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006148:	463b      	mov	r3, r7
 800614a:	4619      	mov	r1, r3
 800614c:	4844      	ldr	r0, [pc, #272]	; (8006260 <MX_ADC2_Init+0x204>)
 800614e:	f003 ff2d 	bl	8009fac <HAL_ADC_ConfigChannel>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d001      	beq.n	800615c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006158:	f000 fdc8 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800615c:	2301      	movs	r3, #1
 800615e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006160:	2306      	movs	r3, #6
 8006162:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006164:	463b      	mov	r3, r7
 8006166:	4619      	mov	r1, r3
 8006168:	483d      	ldr	r0, [pc, #244]	; (8006260 <MX_ADC2_Init+0x204>)
 800616a:	f003 ff1f 	bl	8009fac <HAL_ADC_ConfigChannel>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006174:	f000 fdba 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006178:	2302      	movs	r3, #2
 800617a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800617c:	2307      	movs	r3, #7
 800617e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006180:	463b      	mov	r3, r7
 8006182:	4619      	mov	r1, r3
 8006184:	4836      	ldr	r0, [pc, #216]	; (8006260 <MX_ADC2_Init+0x204>)
 8006186:	f003 ff11 	bl	8009fac <HAL_ADC_ConfigChannel>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006190:	f000 fdac 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006194:	2303      	movs	r3, #3
 8006196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006198:	2308      	movs	r3, #8
 800619a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800619c:	463b      	mov	r3, r7
 800619e:	4619      	mov	r1, r3
 80061a0:	482f      	ldr	r0, [pc, #188]	; (8006260 <MX_ADC2_Init+0x204>)
 80061a2:	f003 ff03 	bl	8009fac <HAL_ADC_ConfigChannel>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d001      	beq.n	80061b0 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80061ac:	f000 fd9e 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80061b0:	2304      	movs	r3, #4
 80061b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80061b4:	2309      	movs	r3, #9
 80061b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061b8:	463b      	mov	r3, r7
 80061ba:	4619      	mov	r1, r3
 80061bc:	4828      	ldr	r0, [pc, #160]	; (8006260 <MX_ADC2_Init+0x204>)
 80061be:	f003 fef5 	bl	8009fac <HAL_ADC_ConfigChannel>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d001      	beq.n	80061cc <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80061c8:	f000 fd90 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80061cc:	2305      	movs	r3, #5
 80061ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80061d0:	230a      	movs	r3, #10
 80061d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061d4:	463b      	mov	r3, r7
 80061d6:	4619      	mov	r1, r3
 80061d8:	4821      	ldr	r0, [pc, #132]	; (8006260 <MX_ADC2_Init+0x204>)
 80061da:	f003 fee7 	bl	8009fac <HAL_ADC_ConfigChannel>
 80061de:	4603      	mov	r3, r0
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80061e4:	f000 fd82 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80061e8:	2306      	movs	r3, #6
 80061ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80061ec:	230b      	movs	r3, #11
 80061ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80061f0:	463b      	mov	r3, r7
 80061f2:	4619      	mov	r1, r3
 80061f4:	481a      	ldr	r0, [pc, #104]	; (8006260 <MX_ADC2_Init+0x204>)
 80061f6:	f003 fed9 	bl	8009fac <HAL_ADC_ConfigChannel>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8006200:	f000 fd74 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006204:	2307      	movs	r3, #7
 8006206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8006208:	230c      	movs	r3, #12
 800620a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800620c:	463b      	mov	r3, r7
 800620e:	4619      	mov	r1, r3
 8006210:	4813      	ldr	r0, [pc, #76]	; (8006260 <MX_ADC2_Init+0x204>)
 8006212:	f003 fecb 	bl	8009fac <HAL_ADC_ConfigChannel>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	d001      	beq.n	8006220 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 800621c:	f000 fd66 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8006220:	2308      	movs	r3, #8
 8006222:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8006224:	230d      	movs	r3, #13
 8006226:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006228:	463b      	mov	r3, r7
 800622a:	4619      	mov	r1, r3
 800622c:	480c      	ldr	r0, [pc, #48]	; (8006260 <MX_ADC2_Init+0x204>)
 800622e:	f003 febd 	bl	8009fac <HAL_ADC_ConfigChannel>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8006238:	f000 fd58 	bl	8006cec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800623c:	2309      	movs	r3, #9
 800623e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006240:	230e      	movs	r3, #14
 8006242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006244:	463b      	mov	r3, r7
 8006246:	4619      	mov	r1, r3
 8006248:	4805      	ldr	r0, [pc, #20]	; (8006260 <MX_ADC2_Init+0x204>)
 800624a:	f003 feaf 	bl	8009fac <HAL_ADC_ConfigChannel>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006254:	f000 fd4a 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006258:	bf00      	nop
 800625a:	3710      	adds	r7, #16
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	20044748 	.word	0x20044748
 8006264:	40012100 	.word	0x40012100
 8006268:	0f000001 	.word	0x0f000001

0800626c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006270:	4b12      	ldr	r3, [pc, #72]	; (80062bc <MX_I2C1_Init+0x50>)
 8006272:	4a13      	ldr	r2, [pc, #76]	; (80062c0 <MX_I2C1_Init+0x54>)
 8006274:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006276:	4b11      	ldr	r3, [pc, #68]	; (80062bc <MX_I2C1_Init+0x50>)
 8006278:	4a12      	ldr	r2, [pc, #72]	; (80062c4 <MX_I2C1_Init+0x58>)
 800627a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <MX_I2C1_Init+0x50>)
 800627e:	2200      	movs	r2, #0
 8006280:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006282:	4b0e      	ldr	r3, [pc, #56]	; (80062bc <MX_I2C1_Init+0x50>)
 8006284:	2200      	movs	r2, #0
 8006286:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006288:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <MX_I2C1_Init+0x50>)
 800628a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800628e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <MX_I2C1_Init+0x50>)
 8006292:	2200      	movs	r2, #0
 8006294:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006296:	4b09      	ldr	r3, [pc, #36]	; (80062bc <MX_I2C1_Init+0x50>)
 8006298:	2200      	movs	r2, #0
 800629a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800629c:	4b07      	ldr	r3, [pc, #28]	; (80062bc <MX_I2C1_Init+0x50>)
 800629e:	2200      	movs	r2, #0
 80062a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <MX_I2C1_Init+0x50>)
 80062a4:	2280      	movs	r2, #128	; 0x80
 80062a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80062a8:	4804      	ldr	r0, [pc, #16]	; (80062bc <MX_I2C1_Init+0x50>)
 80062aa:	f004 ffb9 	bl	800b220 <HAL_I2C_Init>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80062b4:	f000 fd1a 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	20044790 	.word	0x20044790
 80062c0:	40005400 	.word	0x40005400
 80062c4:	000186a0 	.word	0x000186a0

080062c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <MX_I2C2_Init+0x50>)
 80062ce:	4a13      	ldr	r2, [pc, #76]	; (800631c <MX_I2C2_Init+0x54>)
 80062d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <MX_I2C2_Init+0x50>)
 80062d4:	4a12      	ldr	r2, [pc, #72]	; (8006320 <MX_I2C2_Init+0x58>)
 80062d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <MX_I2C2_Init+0x50>)
 80062da:	2200      	movs	r2, #0
 80062dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80062de:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <MX_I2C2_Init+0x50>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <MX_I2C2_Init+0x50>)
 80062e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	; (8006318 <MX_I2C2_Init+0x50>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <MX_I2C2_Init+0x50>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <MX_I2C2_Init+0x50>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80062fe:	4b06      	ldr	r3, [pc, #24]	; (8006318 <MX_I2C2_Init+0x50>)
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006304:	4804      	ldr	r0, [pc, #16]	; (8006318 <MX_I2C2_Init+0x50>)
 8006306:	f004 ff8b 	bl	800b220 <HAL_I2C_Init>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8006310:	f000 fcec 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006314:	bf00      	nop
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20044824 	.word	0x20044824
 800631c:	40005800 	.word	0x40005800
 8006320:	000186a0 	.word	0x000186a0

08006324 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8006324:	b480      	push	{r7}
 8006326:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8006328:	4b0c      	ldr	r3, [pc, #48]	; (800635c <MX_SDIO_SD_Init+0x38>)
 800632a:	4a0d      	ldr	r2, [pc, #52]	; (8006360 <MX_SDIO_SD_Init+0x3c>)
 800632c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800632e:	4b0b      	ldr	r3, [pc, #44]	; (800635c <MX_SDIO_SD_Init+0x38>)
 8006330:	2200      	movs	r2, #0
 8006332:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <MX_SDIO_SD_Init+0x38>)
 8006336:	2200      	movs	r2, #0
 8006338:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800633a:	4b08      	ldr	r3, [pc, #32]	; (800635c <MX_SDIO_SD_Init+0x38>)
 800633c:	2200      	movs	r2, #0
 800633e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006340:	4b06      	ldr	r3, [pc, #24]	; (800635c <MX_SDIO_SD_Init+0x38>)
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006346:	4b05      	ldr	r3, [pc, #20]	; (800635c <MX_SDIO_SD_Init+0x38>)
 8006348:	2200      	movs	r2, #0
 800634a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800634c:	4b03      	ldr	r3, [pc, #12]	; (800635c <MX_SDIO_SD_Init+0x38>)
 800634e:	2202      	movs	r2, #2
 8006350:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20044a24 	.word	0x20044a24
 8006360:	40012c00 	.word	0x40012c00

08006364 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006368:	4b17      	ldr	r3, [pc, #92]	; (80063c8 <MX_SPI2_Init+0x64>)
 800636a:	4a18      	ldr	r2, [pc, #96]	; (80063cc <MX_SPI2_Init+0x68>)
 800636c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800636e:	4b16      	ldr	r3, [pc, #88]	; (80063c8 <MX_SPI2_Init+0x64>)
 8006370:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006374:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006376:	4b14      	ldr	r3, [pc, #80]	; (80063c8 <MX_SPI2_Init+0x64>)
 8006378:	2200      	movs	r2, #0
 800637a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800637c:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <MX_SPI2_Init+0x64>)
 800637e:	2200      	movs	r2, #0
 8006380:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006382:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <MX_SPI2_Init+0x64>)
 8006384:	2202      	movs	r2, #2
 8006386:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006388:	4b0f      	ldr	r3, [pc, #60]	; (80063c8 <MX_SPI2_Init+0x64>)
 800638a:	2201      	movs	r2, #1
 800638c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800638e:	4b0e      	ldr	r3, [pc, #56]	; (80063c8 <MX_SPI2_Init+0x64>)
 8006390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006394:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006396:	4b0c      	ldr	r3, [pc, #48]	; (80063c8 <MX_SPI2_Init+0x64>)
 8006398:	2228      	movs	r2, #40	; 0x28
 800639a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800639c:	4b0a      	ldr	r3, [pc, #40]	; (80063c8 <MX_SPI2_Init+0x64>)
 800639e:	2200      	movs	r2, #0
 80063a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80063a2:	4b09      	ldr	r3, [pc, #36]	; (80063c8 <MX_SPI2_Init+0x64>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063a8:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <MX_SPI2_Init+0x64>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80063ae:	4b06      	ldr	r3, [pc, #24]	; (80063c8 <MX_SPI2_Init+0x64>)
 80063b0:	220a      	movs	r2, #10
 80063b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80063b4:	4804      	ldr	r0, [pc, #16]	; (80063c8 <MX_SPI2_Init+0x64>)
 80063b6:	f008 f865 	bl	800e484 <HAL_SPI_Init>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80063c0:	f000 fc94 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	20044670 	.word	0x20044670
 80063cc:	40003800 	.word	0x40003800

080063d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b09a      	sub	sp, #104	; 0x68
 80063d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80063d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80063da:	2224      	movs	r2, #36	; 0x24
 80063dc:	2100      	movs	r1, #0
 80063de:	4618      	mov	r0, r3
 80063e0:	f00f f9e2 	bl	80157a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063e8:	2200      	movs	r2, #0
 80063ea:	601a      	str	r2, [r3, #0]
 80063ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063ee:	f107 0320 	add.w	r3, r7, #32
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	609a      	str	r2, [r3, #8]
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	611a      	str	r2, [r3, #16]
 80063fe:	615a      	str	r2, [r3, #20]
 8006400:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006402:	463b      	mov	r3, r7
 8006404:	2220      	movs	r2, #32
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f00f f9cd 	bl	80157a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800640e:	4b42      	ldr	r3, [pc, #264]	; (8006518 <MX_TIM1_Init+0x148>)
 8006410:	4a42      	ldr	r2, [pc, #264]	; (800651c <MX_TIM1_Init+0x14c>)
 8006412:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8006414:	4b40      	ldr	r3, [pc, #256]	; (8006518 <MX_TIM1_Init+0x148>)
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800641a:	4b3f      	ldr	r3, [pc, #252]	; (8006518 <MX_TIM1_Init+0x148>)
 800641c:	2200      	movs	r2, #0
 800641e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006420:	4b3d      	ldr	r3, [pc, #244]	; (8006518 <MX_TIM1_Init+0x148>)
 8006422:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006426:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006428:	4b3b      	ldr	r3, [pc, #236]	; (8006518 <MX_TIM1_Init+0x148>)
 800642a:	2200      	movs	r2, #0
 800642c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800642e:	4b3a      	ldr	r3, [pc, #232]	; (8006518 <MX_TIM1_Init+0x148>)
 8006430:	2200      	movs	r2, #0
 8006432:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006434:	4b38      	ldr	r3, [pc, #224]	; (8006518 <MX_TIM1_Init+0x148>)
 8006436:	2200      	movs	r2, #0
 8006438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800643a:	4837      	ldr	r0, [pc, #220]	; (8006518 <MX_TIM1_Init+0x148>)
 800643c:	f008 fdc5 	bl	800efca <HAL_TIM_PWM_Init>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006446:	f000 fc51 	bl	8006cec <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800644a:	2303      	movs	r3, #3
 800644c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800644e:	2300      	movs	r3, #0
 8006450:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006452:	2301      	movs	r3, #1
 8006454:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006456:	2300      	movs	r3, #0
 8006458:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800645e:	2300      	movs	r3, #0
 8006460:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006462:	2301      	movs	r3, #1
 8006464:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006466:	2300      	movs	r3, #0
 8006468:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800646a:	2300      	movs	r3, #0
 800646c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800646e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006472:	4619      	mov	r1, r3
 8006474:	4828      	ldr	r0, [pc, #160]	; (8006518 <MX_TIM1_Init+0x148>)
 8006476:	f008 fe11 	bl	800f09c <HAL_TIM_Encoder_Init>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006480:	f000 fc34 	bl	8006cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006484:	2300      	movs	r3, #0
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006488:	2300      	movs	r3, #0
 800648a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800648c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006490:	4619      	mov	r1, r3
 8006492:	4821      	ldr	r0, [pc, #132]	; (8006518 <MX_TIM1_Init+0x148>)
 8006494:	f009 fb38 	bl	800fb08 <HAL_TIMEx_MasterConfigSynchronization>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800649e:	f000 fc25 	bl	8006cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80064a2:	2360      	movs	r3, #96	; 0x60
 80064a4:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80064aa:	2300      	movs	r3, #0
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80064ae:	2300      	movs	r3, #0
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80064b6:	2300      	movs	r3, #0
 80064b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80064ba:	2300      	movs	r3, #0
 80064bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80064be:	f107 0320 	add.w	r3, r7, #32
 80064c2:	2208      	movs	r2, #8
 80064c4:	4619      	mov	r1, r3
 80064c6:	4814      	ldr	r0, [pc, #80]	; (8006518 <MX_TIM1_Init+0x148>)
 80064c8:	f008 ffba 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80064d2:	f000 fc0b 	bl	8006cec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80064d6:	2300      	movs	r3, #0
 80064d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80064da:	2300      	movs	r3, #0
 80064dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80064de:	2300      	movs	r3, #0
 80064e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80064e2:	2300      	movs	r3, #0
 80064e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80064ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80064f4:	463b      	mov	r3, r7
 80064f6:	4619      	mov	r1, r3
 80064f8:	4807      	ldr	r0, [pc, #28]	; (8006518 <MX_TIM1_Init+0x148>)
 80064fa:	f009 fb81 	bl	800fc00 <HAL_TIMEx_ConfigBreakDeadTime>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d001      	beq.n	8006508 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006504:	f000 fbf2 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006508:	4803      	ldr	r0, [pc, #12]	; (8006518 <MX_TIM1_Init+0x148>)
 800650a:	f000 ffdf 	bl	80074cc <HAL_TIM_MspPostInit>

}
 800650e:	bf00      	nop
 8006510:	3768      	adds	r7, #104	; 0x68
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200449e4 	.word	0x200449e4
 800651c:	40010000 	.word	0x40010000

08006520 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b08a      	sub	sp, #40	; 0x28
 8006524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006526:	f107 0320 	add.w	r3, r7, #32
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	605a      	str	r2, [r3, #4]
 8006538:	609a      	str	r2, [r3, #8]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	611a      	str	r2, [r3, #16]
 800653e:	615a      	str	r2, [r3, #20]
 8006540:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006542:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <MX_TIM3_Init+0xc0>)
 8006544:	4a27      	ldr	r2, [pc, #156]	; (80065e4 <MX_TIM3_Init+0xc4>)
 8006546:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006548:	4b25      	ldr	r3, [pc, #148]	; (80065e0 <MX_TIM3_Init+0xc0>)
 800654a:	2201      	movs	r2, #1
 800654c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800654e:	4b24      	ldr	r3, [pc, #144]	; (80065e0 <MX_TIM3_Init+0xc0>)
 8006550:	2200      	movs	r2, #0
 8006552:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006554:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <MX_TIM3_Init+0xc0>)
 8006556:	f241 1293 	movw	r2, #4499	; 0x1193
 800655a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800655c:	4b20      	ldr	r3, [pc, #128]	; (80065e0 <MX_TIM3_Init+0xc0>)
 800655e:	2200      	movs	r2, #0
 8006560:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006562:	4b1f      	ldr	r3, [pc, #124]	; (80065e0 <MX_TIM3_Init+0xc0>)
 8006564:	2200      	movs	r2, #0
 8006566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006568:	481d      	ldr	r0, [pc, #116]	; (80065e0 <MX_TIM3_Init+0xc0>)
 800656a:	f008 fd2e 	bl	800efca <HAL_TIM_PWM_Init>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d001      	beq.n	8006578 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006574:	f000 fbba 	bl	8006cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006578:	2300      	movs	r3, #0
 800657a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800657c:	2300      	movs	r3, #0
 800657e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006580:	f107 0320 	add.w	r3, r7, #32
 8006584:	4619      	mov	r1, r3
 8006586:	4816      	ldr	r0, [pc, #88]	; (80065e0 <MX_TIM3_Init+0xc0>)
 8006588:	f009 fabe 	bl	800fb08 <HAL_TIMEx_MasterConfigSynchronization>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d001      	beq.n	8006596 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006592:	f000 fbab 	bl	8006cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006596:	2360      	movs	r3, #96	; 0x60
 8006598:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	2200      	movs	r2, #0
 80065aa:	4619      	mov	r1, r3
 80065ac:	480c      	ldr	r0, [pc, #48]	; (80065e0 <MX_TIM3_Init+0xc0>)
 80065ae:	f008 ff47 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d001      	beq.n	80065bc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80065b8:	f000 fb98 	bl	8006cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80065bc:	1d3b      	adds	r3, r7, #4
 80065be:	2204      	movs	r2, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4807      	ldr	r0, [pc, #28]	; (80065e0 <MX_TIM3_Init+0xc0>)
 80065c4:	f008 ff3c 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d001      	beq.n	80065d2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80065ce:	f000 fb8d 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80065d2:	4803      	ldr	r0, [pc, #12]	; (80065e0 <MX_TIM3_Init+0xc0>)
 80065d4:	f000 ff7a 	bl	80074cc <HAL_TIM_MspPostInit>

}
 80065d8:	bf00      	nop
 80065da:	3728      	adds	r7, #40	; 0x28
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	2004487c 	.word	0x2004487c
 80065e4:	40000400 	.word	0x40000400

080065e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065ee:	f107 0320 	add.w	r3, r7, #32
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	605a      	str	r2, [r3, #4]
 8006600:	609a      	str	r2, [r3, #8]
 8006602:	60da      	str	r2, [r3, #12]
 8006604:	611a      	str	r2, [r3, #16]
 8006606:	615a      	str	r2, [r3, #20]
 8006608:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800660a:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <MX_TIM4_Init+0xc0>)
 800660c:	4a27      	ldr	r2, [pc, #156]	; (80066ac <MX_TIM4_Init+0xc4>)
 800660e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8006610:	4b25      	ldr	r3, [pc, #148]	; (80066a8 <MX_TIM4_Init+0xc0>)
 8006612:	2200      	movs	r2, #0
 8006614:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006616:	4b24      	ldr	r3, [pc, #144]	; (80066a8 <MX_TIM4_Init+0xc0>)
 8006618:	2200      	movs	r2, #0
 800661a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 800661c:	4b22      	ldr	r3, [pc, #136]	; (80066a8 <MX_TIM4_Init+0xc0>)
 800661e:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8006622:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006624:	4b20      	ldr	r3, [pc, #128]	; (80066a8 <MX_TIM4_Init+0xc0>)
 8006626:	2200      	movs	r2, #0
 8006628:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800662a:	4b1f      	ldr	r3, [pc, #124]	; (80066a8 <MX_TIM4_Init+0xc0>)
 800662c:	2200      	movs	r2, #0
 800662e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8006630:	481d      	ldr	r0, [pc, #116]	; (80066a8 <MX_TIM4_Init+0xc0>)
 8006632:	f008 fcca 	bl	800efca <HAL_TIM_PWM_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800663c:	f000 fb56 	bl	8006cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006640:	2300      	movs	r3, #0
 8006642:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006644:	2300      	movs	r3, #0
 8006646:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006648:	f107 0320 	add.w	r3, r7, #32
 800664c:	4619      	mov	r1, r3
 800664e:	4816      	ldr	r0, [pc, #88]	; (80066a8 <MX_TIM4_Init+0xc0>)
 8006650:	f009 fa5a 	bl	800fb08 <HAL_TIMEx_MasterConfigSynchronization>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800665a:	f000 fb47 	bl	8006cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800665e:	2360      	movs	r3, #96	; 0x60
 8006660:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006666:	2300      	movs	r3, #0
 8006668:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800666e:	1d3b      	adds	r3, r7, #4
 8006670:	2208      	movs	r2, #8
 8006672:	4619      	mov	r1, r3
 8006674:	480c      	ldr	r0, [pc, #48]	; (80066a8 <MX_TIM4_Init+0xc0>)
 8006676:	f008 fee3 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006680:	f000 fb34 	bl	8006cec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006684:	1d3b      	adds	r3, r7, #4
 8006686:	220c      	movs	r2, #12
 8006688:	4619      	mov	r1, r3
 800668a:	4807      	ldr	r0, [pc, #28]	; (80066a8 <MX_TIM4_Init+0xc0>)
 800668c:	f008 fed8 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006696:	f000 fb29 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800669a:	4803      	ldr	r0, [pc, #12]	; (80066a8 <MX_TIM4_Init+0xc0>)
 800669c:	f000 ff16 	bl	80074cc <HAL_TIM_MspPostInit>

}
 80066a0:	bf00      	nop
 80066a2:	3728      	adds	r7, #40	; 0x28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20044708 	.word	0x20044708
 80066ac:	40000800 	.word	0x40000800

080066b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066b6:	463b      	mov	r3, r7
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]
 80066bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80066be:	4b15      	ldr	r3, [pc, #84]	; (8006714 <MX_TIM6_Init+0x64>)
 80066c0:	4a15      	ldr	r2, [pc, #84]	; (8006718 <MX_TIM6_Init+0x68>)
 80066c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 80066c4:	4b13      	ldr	r3, [pc, #76]	; (8006714 <MX_TIM6_Init+0x64>)
 80066c6:	2259      	movs	r2, #89	; 0x59
 80066c8:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066ca:	4b12      	ldr	r3, [pc, #72]	; (8006714 <MX_TIM6_Init+0x64>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80066d0:	4b10      	ldr	r3, [pc, #64]	; (8006714 <MX_TIM6_Init+0x64>)
 80066d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80066d6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80066d8:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <MX_TIM6_Init+0x64>)
 80066da:	2280      	movs	r2, #128	; 0x80
 80066dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80066de:	480d      	ldr	r0, [pc, #52]	; (8006714 <MX_TIM6_Init+0x64>)
 80066e0:	f008 fc24 	bl	800ef2c <HAL_TIM_Base_Init>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80066ea:	f000 faff 	bl	8006cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066ee:	2300      	movs	r3, #0
 80066f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066f2:	2300      	movs	r3, #0
 80066f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80066f6:	463b      	mov	r3, r7
 80066f8:	4619      	mov	r1, r3
 80066fa:	4806      	ldr	r0, [pc, #24]	; (8006714 <MX_TIM6_Init+0x64>)
 80066fc:	f009 fa04 	bl	800fb08 <HAL_TIMEx_MasterConfigSynchronization>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006706:	f000 faf1 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	200449a4 	.word	0x200449a4
 8006718:	40001000 	.word	0x40001000

0800671c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006722:	463b      	mov	r3, r7
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <MX_TIM7_Init+0x60>)
 800672c:	4a14      	ldr	r2, [pc, #80]	; (8006780 <MX_TIM7_Init+0x64>)
 800672e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8006730:	4b12      	ldr	r3, [pc, #72]	; (800677c <MX_TIM7_Init+0x60>)
 8006732:	22b3      	movs	r2, #179	; 0xb3
 8006734:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006736:	4b11      	ldr	r3, [pc, #68]	; (800677c <MX_TIM7_Init+0x60>)
 8006738:	2200      	movs	r2, #0
 800673a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 800673c:	4b0f      	ldr	r3, [pc, #60]	; (800677c <MX_TIM7_Init+0x60>)
 800673e:	2231      	movs	r2, #49	; 0x31
 8006740:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006742:	4b0e      	ldr	r3, [pc, #56]	; (800677c <MX_TIM7_Init+0x60>)
 8006744:	2280      	movs	r2, #128	; 0x80
 8006746:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006748:	480c      	ldr	r0, [pc, #48]	; (800677c <MX_TIM7_Init+0x60>)
 800674a:	f008 fbef 	bl	800ef2c <HAL_TIM_Base_Init>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006754:	f000 faca 	bl	8006cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006758:	2300      	movs	r3, #0
 800675a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800675c:	2300      	movs	r3, #0
 800675e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006760:	463b      	mov	r3, r7
 8006762:	4619      	mov	r1, r3
 8006764:	4805      	ldr	r0, [pc, #20]	; (800677c <MX_TIM7_Init+0x60>)
 8006766:	f009 f9cf 	bl	800fb08 <HAL_TIMEx_MasterConfigSynchronization>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006770:	f000 fabc 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006774:	bf00      	nop
 8006776:	3708      	adds	r7, #8
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}
 800677c:	20044b48 	.word	0x20044b48
 8006780:	40001400 	.word	0x40001400

08006784 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08c      	sub	sp, #48	; 0x30
 8006788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800678a:	f107 030c 	add.w	r3, r7, #12
 800678e:	2224      	movs	r2, #36	; 0x24
 8006790:	2100      	movs	r1, #0
 8006792:	4618      	mov	r0, r3
 8006794:	f00f f808 	bl	80157a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	2200      	movs	r2, #0
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80067a0:	4b22      	ldr	r3, [pc, #136]	; (800682c <MX_TIM8_Init+0xa8>)
 80067a2:	4a23      	ldr	r2, [pc, #140]	; (8006830 <MX_TIM8_Init+0xac>)
 80067a4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80067a6:	4b21      	ldr	r3, [pc, #132]	; (800682c <MX_TIM8_Init+0xa8>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80067ac:	4b1f      	ldr	r3, [pc, #124]	; (800682c <MX_TIM8_Init+0xa8>)
 80067ae:	2210      	movs	r2, #16
 80067b0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80067b2:	4b1e      	ldr	r3, [pc, #120]	; (800682c <MX_TIM8_Init+0xa8>)
 80067b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80067b8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067ba:	4b1c      	ldr	r3, [pc, #112]	; (800682c <MX_TIM8_Init+0xa8>)
 80067bc:	2200      	movs	r2, #0
 80067be:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80067c0:	4b1a      	ldr	r3, [pc, #104]	; (800682c <MX_TIM8_Init+0xa8>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067c6:	4b19      	ldr	r3, [pc, #100]	; (800682c <MX_TIM8_Init+0xa8>)
 80067c8:	2200      	movs	r2, #0
 80067ca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80067cc:	2303      	movs	r3, #3
 80067ce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80067d0:	2300      	movs	r3, #0
 80067d2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80067d4:	2301      	movs	r3, #1
 80067d6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80067d8:	2300      	movs	r3, #0
 80067da:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80067e0:	2300      	movs	r3, #0
 80067e2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80067e4:	2301      	movs	r3, #1
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80067e8:	2300      	movs	r3, #0
 80067ea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80067ec:	2300      	movs	r3, #0
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	4619      	mov	r1, r3
 80067f6:	480d      	ldr	r0, [pc, #52]	; (800682c <MX_TIM8_Init+0xa8>)
 80067f8:	f008 fc50 	bl	800f09c <HAL_TIM_Encoder_Init>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006802:	f000 fa73 	bl	8006cec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006806:	2300      	movs	r3, #0
 8006808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800680a:	2300      	movs	r3, #0
 800680c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800680e:	1d3b      	adds	r3, r7, #4
 8006810:	4619      	mov	r1, r3
 8006812:	4806      	ldr	r0, [pc, #24]	; (800682c <MX_TIM8_Init+0xa8>)
 8006814:	f009 f978 	bl	800fb08 <HAL_TIMEx_MasterConfigSynchronization>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800681e:	f000 fa65 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8006822:	bf00      	nop
 8006824:	3730      	adds	r7, #48	; 0x30
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	200446c8 	.word	0x200446c8
 8006830:	40010400 	.word	0x40010400

08006834 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b088      	sub	sp, #32
 8006838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800683a:	1d3b      	adds	r3, r7, #4
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	605a      	str	r2, [r3, #4]
 8006842:	609a      	str	r2, [r3, #8]
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	611a      	str	r2, [r3, #16]
 8006848:	615a      	str	r2, [r3, #20]
 800684a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800684c:	4b1e      	ldr	r3, [pc, #120]	; (80068c8 <MX_TIM10_Init+0x94>)
 800684e:	4a1f      	ldr	r2, [pc, #124]	; (80068cc <MX_TIM10_Init+0x98>)
 8006850:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <MX_TIM10_Init+0x94>)
 8006854:	2201      	movs	r2, #1
 8006856:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006858:	4b1b      	ldr	r3, [pc, #108]	; (80068c8 <MX_TIM10_Init+0x94>)
 800685a:	2200      	movs	r2, #0
 800685c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 800685e:	4b1a      	ldr	r3, [pc, #104]	; (80068c8 <MX_TIM10_Init+0x94>)
 8006860:	f242 3227 	movw	r2, #8999	; 0x2327
 8006864:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <MX_TIM10_Init+0x94>)
 8006868:	2200      	movs	r2, #0
 800686a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800686c:	4b16      	ldr	r3, [pc, #88]	; (80068c8 <MX_TIM10_Init+0x94>)
 800686e:	2200      	movs	r2, #0
 8006870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006872:	4815      	ldr	r0, [pc, #84]	; (80068c8 <MX_TIM10_Init+0x94>)
 8006874:	f008 fb5a 	bl	800ef2c <HAL_TIM_Base_Init>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800687e:	f000 fa35 	bl	8006cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006882:	4811      	ldr	r0, [pc, #68]	; (80068c8 <MX_TIM10_Init+0x94>)
 8006884:	f008 fba1 	bl	800efca <HAL_TIM_PWM_Init>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800688e:	f000 fa2d 	bl	8006cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006892:	2360      	movs	r3, #96	; 0x60
 8006894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800689e:	2300      	movs	r3, #0
 80068a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80068a2:	1d3b      	adds	r3, r7, #4
 80068a4:	2200      	movs	r2, #0
 80068a6:	4619      	mov	r1, r3
 80068a8:	4807      	ldr	r0, [pc, #28]	; (80068c8 <MX_TIM10_Init+0x94>)
 80068aa:	f008 fdc9 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d001      	beq.n	80068b8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80068b4:	f000 fa1a 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80068b8:	4803      	ldr	r0, [pc, #12]	; (80068c8 <MX_TIM10_Init+0x94>)
 80068ba:	f000 fe07 	bl	80074cc <HAL_TIM_MspPostInit>

}
 80068be:	bf00      	nop
 80068c0:	3720      	adds	r7, #32
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200447e4 	.word	0x200447e4
 80068cc:	40014400 	.word	0x40014400

080068d0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80068d6:	1d3b      	adds	r3, r7, #4
 80068d8:	2200      	movs	r2, #0
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	609a      	str	r2, [r3, #8]
 80068e0:	60da      	str	r2, [r3, #12]
 80068e2:	611a      	str	r2, [r3, #16]
 80068e4:	615a      	str	r2, [r3, #20]
 80068e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80068e8:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <MX_TIM11_Init+0x94>)
 80068ea:	4a1f      	ldr	r2, [pc, #124]	; (8006968 <MX_TIM11_Init+0x98>)
 80068ec:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80068ee:	4b1d      	ldr	r3, [pc, #116]	; (8006964 <MX_TIM11_Init+0x94>)
 80068f0:	2201      	movs	r2, #1
 80068f2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80068f4:	4b1b      	ldr	r3, [pc, #108]	; (8006964 <MX_TIM11_Init+0x94>)
 80068f6:	2200      	movs	r2, #0
 80068f8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80068fa:	4b1a      	ldr	r3, [pc, #104]	; (8006964 <MX_TIM11_Init+0x94>)
 80068fc:	f242 3227 	movw	r2, #8999	; 0x2327
 8006900:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006902:	4b18      	ldr	r3, [pc, #96]	; (8006964 <MX_TIM11_Init+0x94>)
 8006904:	2200      	movs	r2, #0
 8006906:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006908:	4b16      	ldr	r3, [pc, #88]	; (8006964 <MX_TIM11_Init+0x94>)
 800690a:	2200      	movs	r2, #0
 800690c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800690e:	4815      	ldr	r0, [pc, #84]	; (8006964 <MX_TIM11_Init+0x94>)
 8006910:	f008 fb0c 	bl	800ef2c <HAL_TIM_Base_Init>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800691a:	f000 f9e7 	bl	8006cec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800691e:	4811      	ldr	r0, [pc, #68]	; (8006964 <MX_TIM11_Init+0x94>)
 8006920:	f008 fb53 	bl	800efca <HAL_TIM_PWM_Init>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800692a:	f000 f9df 	bl	8006cec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800692e:	2360      	movs	r3, #96	; 0x60
 8006930:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006932:	2300      	movs	r3, #0
 8006934:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800693a:	2300      	movs	r3, #0
 800693c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	2200      	movs	r2, #0
 8006942:	4619      	mov	r1, r3
 8006944:	4807      	ldr	r0, [pc, #28]	; (8006964 <MX_TIM11_Init+0x94>)
 8006946:	f008 fd7b 	bl	800f440 <HAL_TIM_PWM_ConfigChannel>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006950:	f000 f9cc 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006954:	4803      	ldr	r0, [pc, #12]	; (8006964 <MX_TIM11_Init+0x94>)
 8006956:	f000 fdb9 	bl	80074cc <HAL_TIM_MspPostInit>

}
 800695a:	bf00      	nop
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20044904 	.word	0x20044904
 8006968:	40014800 	.word	0x40014800

0800696c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006970:	4b0e      	ldr	r3, [pc, #56]	; (80069ac <MX_TIM13_Init+0x40>)
 8006972:	4a0f      	ldr	r2, [pc, #60]	; (80069b0 <MX_TIM13_Init+0x44>)
 8006974:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006976:	4b0d      	ldr	r3, [pc, #52]	; (80069ac <MX_TIM13_Init+0x40>)
 8006978:	2259      	movs	r2, #89	; 0x59
 800697a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800697c:	4b0b      	ldr	r3, [pc, #44]	; (80069ac <MX_TIM13_Init+0x40>)
 800697e:	2200      	movs	r2, #0
 8006980:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006982:	4b0a      	ldr	r3, [pc, #40]	; (80069ac <MX_TIM13_Init+0x40>)
 8006984:	f242 720f 	movw	r2, #9999	; 0x270f
 8006988:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800698a:	4b08      	ldr	r3, [pc, #32]	; (80069ac <MX_TIM13_Init+0x40>)
 800698c:	2200      	movs	r2, #0
 800698e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006990:	4b06      	ldr	r3, [pc, #24]	; (80069ac <MX_TIM13_Init+0x40>)
 8006992:	2280      	movs	r2, #128	; 0x80
 8006994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006996:	4805      	ldr	r0, [pc, #20]	; (80069ac <MX_TIM13_Init+0x40>)
 8006998:	f008 fac8 	bl	800ef2c <HAL_TIM_Base_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80069a2:	f000 f9a3 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80069a6:	bf00      	nop
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	200448c4 	.word	0x200448c4
 80069b0:	40001c00 	.word	0x40001c00

080069b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80069b8:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069ba:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <MX_USART2_UART_Init+0x50>)
 80069bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80069be:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80069c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80069c6:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069c8:	2200      	movs	r2, #0
 80069ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80069cc:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069d4:	2200      	movs	r2, #0
 80069d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80069d8:	4b09      	ldr	r3, [pc, #36]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069da:	220c      	movs	r2, #12
 80069dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80069ea:	4805      	ldr	r0, [pc, #20]	; (8006a00 <MX_USART2_UART_Init+0x4c>)
 80069ec:	f009 f96e 	bl	800fccc <HAL_UART_Init>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80069f6:	f000 f979 	bl	8006cec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80069fa:	bf00      	nop
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20044aa8 	.word	0x20044aa8
 8006a04:	40004400 	.word	0x40004400

08006a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8006a0e:	2300      	movs	r3, #0
 8006a10:	607b      	str	r3, [r7, #4]
 8006a12:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <MX_DMA_Init+0x5c>)
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	4a13      	ldr	r2, [pc, #76]	; (8006a64 <MX_DMA_Init+0x5c>)
 8006a18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a1e:	4b11      	ldr	r3, [pc, #68]	; (8006a64 <MX_DMA_Init+0x5c>)
 8006a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	203a      	movs	r0, #58	; 0x3a
 8006a30:	f003 fe47 	bl	800a6c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8006a34:	203a      	movs	r0, #58	; 0x3a
 8006a36:	f003 fe60 	bl	800a6fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	203b      	movs	r0, #59	; 0x3b
 8006a40:	f003 fe3f 	bl	800a6c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006a44:	203b      	movs	r0, #59	; 0x3b
 8006a46:	f003 fe58 	bl	800a6fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	2100      	movs	r1, #0
 8006a4e:	2045      	movs	r0, #69	; 0x45
 8006a50:	f003 fe37 	bl	800a6c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006a54:	2045      	movs	r0, #69	; 0x45
 8006a56:	f003 fe50 	bl	800a6fa <HAL_NVIC_EnableIRQ>

}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800

08006a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b08c      	sub	sp, #48	; 0x30
 8006a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a6e:	f107 031c 	add.w	r3, r7, #28
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
 8006a76:	605a      	str	r2, [r3, #4]
 8006a78:	609a      	str	r2, [r3, #8]
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a7e:	2300      	movs	r3, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	4b94      	ldr	r3, [pc, #592]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	4a93      	ldr	r2, [pc, #588]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006a88:	f043 0310 	orr.w	r3, r3, #16
 8006a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a8e:	4b91      	ldr	r3, [pc, #580]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a92:	f003 0310 	and.w	r3, r3, #16
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
 8006a9e:	4b8d      	ldr	r3, [pc, #564]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4a8c      	ldr	r2, [pc, #560]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aaa:	4b8a      	ldr	r3, [pc, #552]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	617b      	str	r3, [r7, #20]
 8006ab4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	613b      	str	r3, [r7, #16]
 8006aba:	4b86      	ldr	r3, [pc, #536]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	4a85      	ldr	r2, [pc, #532]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006ac0:	f043 0304 	orr.w	r3, r3, #4
 8006ac4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac6:	4b83      	ldr	r3, [pc, #524]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	613b      	str	r3, [r7, #16]
 8006ad0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	4b7f      	ldr	r3, [pc, #508]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ada:	4a7e      	ldr	r2, [pc, #504]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ae2:	4b7c      	ldr	r3, [pc, #496]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aee:	2300      	movs	r3, #0
 8006af0:	60bb      	str	r3, [r7, #8]
 8006af2:	4b78      	ldr	r3, [pc, #480]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af6:	4a77      	ldr	r2, [pc, #476]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006af8:	f043 0302 	orr.w	r3, r3, #2
 8006afc:	6313      	str	r3, [r2, #48]	; 0x30
 8006afe:	4b75      	ldr	r3, [pc, #468]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	60bb      	str	r3, [r7, #8]
 8006b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	607b      	str	r3, [r7, #4]
 8006b0e:	4b71      	ldr	r3, [pc, #452]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	4a70      	ldr	r2, [pc, #448]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006b14:	f043 0308 	orr.w	r3, r3, #8
 8006b18:	6313      	str	r3, [r2, #48]	; 0x30
 8006b1a:	4b6e      	ldr	r3, [pc, #440]	; (8006cd4 <MX_GPIO_Init+0x26c>)
 8006b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1e:	f003 0308 	and.w	r3, r3, #8
 8006b22:	607b      	str	r3, [r7, #4]
 8006b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8006b26:	2200      	movs	r2, #0
 8006b28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b2c:	486a      	ldr	r0, [pc, #424]	; (8006cd8 <MX_GPIO_Init+0x270>)
 8006b2e:	f004 fb5d 	bl	800b1ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8006b32:	2200      	movs	r2, #0
 8006b34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b38:	4868      	ldr	r0, [pc, #416]	; (8006cdc <MX_GPIO_Init+0x274>)
 8006b3a:	f004 fb57 	bl	800b1ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b44:	4866      	ldr	r0, [pc, #408]	; (8006ce0 <MX_GPIO_Init+0x278>)
 8006b46:	f004 fb51 	bl	800b1ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006b50:	4864      	ldr	r0, [pc, #400]	; (8006ce4 <MX_GPIO_Init+0x27c>)
 8006b52:	f004 fb4b 	bl	800b1ec <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b56:	2304      	movs	r3, #4
 8006b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006b62:	f107 031c 	add.w	r3, r7, #28
 8006b66:	4619      	mov	r1, r3
 8006b68:	485b      	ldr	r0, [pc, #364]	; (8006cd8 <MX_GPIO_Init+0x270>)
 8006b6a:	f004 f97d 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006b6e:	230f      	movs	r3, #15
 8006b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b72:	2303      	movs	r3, #3
 8006b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b76:	2300      	movs	r3, #0
 8006b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b7a:	f107 031c 	add.w	r3, r7, #28
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4859      	ldr	r0, [pc, #356]	; (8006ce8 <MX_GPIO_Init+0x280>)
 8006b82:	f004 f971 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006b86:	23e1      	movs	r3, #225	; 0xe1
 8006b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b92:	f107 031c 	add.w	r3, r7, #28
 8006b96:	4619      	mov	r1, r3
 8006b98:	4852      	ldr	r0, [pc, #328]	; (8006ce4 <MX_GPIO_Init+0x27c>)
 8006b9a:	f004 f965 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006baa:	f107 031c 	add.w	r3, r7, #28
 8006bae:	4619      	mov	r1, r3
 8006bb0:	484a      	ldr	r0, [pc, #296]	; (8006cdc <MX_GPIO_Init+0x274>)
 8006bb2:	f004 f959 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006bc2:	f107 031c 	add.w	r3, r7, #28
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4844      	ldr	r0, [pc, #272]	; (8006cdc <MX_GPIO_Init+0x274>)
 8006bca:	f004 f94d 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006bce:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bdc:	f107 031c 	add.w	r3, r7, #28
 8006be0:	4619      	mov	r1, r3
 8006be2:	483d      	ldr	r0, [pc, #244]	; (8006cd8 <MX_GPIO_Init+0x270>)
 8006be4:	f004 f940 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006be8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bfa:	f107 031c 	add.w	r3, r7, #28
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4835      	ldr	r0, [pc, #212]	; (8006cd8 <MX_GPIO_Init+0x270>)
 8006c02:	f004 f931 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c10:	2300      	movs	r3, #0
 8006c12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c14:	2300      	movs	r3, #0
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c18:	f107 031c 	add.w	r3, r7, #28
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	482f      	ldr	r0, [pc, #188]	; (8006cdc <MX_GPIO_Init+0x274>)
 8006c20:	f004 f922 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c32:	f107 031c 	add.w	r3, r7, #28
 8006c36:	4619      	mov	r1, r3
 8006c38:	4829      	ldr	r0, [pc, #164]	; (8006ce0 <MX_GPIO_Init+0x278>)
 8006c3a:	f004 f915 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c44:	2301      	movs	r3, #1
 8006c46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c50:	f107 031c 	add.w	r3, r7, #28
 8006c54:	4619      	mov	r1, r3
 8006c56:	4822      	ldr	r0, [pc, #136]	; (8006ce0 <MX_GPIO_Init+0x278>)
 8006c58:	f004 f906 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c62:	2301      	movs	r3, #1
 8006c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c66:	2301      	movs	r3, #1
 8006c68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c6e:	f107 031c 	add.w	r3, r7, #28
 8006c72:	4619      	mov	r1, r3
 8006c74:	481a      	ldr	r0, [pc, #104]	; (8006ce0 <MX_GPIO_Init+0x278>)
 8006c76:	f004 f8f7 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006c7a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006c7e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006c80:	2301      	movs	r3, #1
 8006c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c84:	2300      	movs	r3, #0
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c8c:	f107 031c 	add.w	r3, r7, #28
 8006c90:	4619      	mov	r1, r3
 8006c92:	4814      	ldr	r0, [pc, #80]	; (8006ce4 <MX_GPIO_Init+0x27c>)
 8006c94:	f004 f8e8 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006c98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ca6:	f107 031c 	add.w	r3, r7, #28
 8006caa:	4619      	mov	r1, r3
 8006cac:	480d      	ldr	r0, [pc, #52]	; (8006ce4 <MX_GPIO_Init+0x27c>)
 8006cae:	f004 f8db 	bl	800ae68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006cb2:	239b      	movs	r3, #155	; 0x9b
 8006cb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cbe:	f107 031c 	add.w	r3, r7, #28
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4806      	ldr	r0, [pc, #24]	; (8006ce0 <MX_GPIO_Init+0x278>)
 8006cc6:	f004 f8cf 	bl	800ae68 <HAL_GPIO_Init>

}
 8006cca:	bf00      	nop
 8006ccc:	3730      	adds	r7, #48	; 0x30
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023800 	.word	0x40023800
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40020400 	.word	0x40020400
 8006ce0:	40020c00 	.word	0x40020c00
 8006ce4:	40020000 	.word	0x40020000
 8006ce8:	40020800 	.word	0x40020800

08006cec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006cec:	b480      	push	{r7}
 8006cee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006cf0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006cf2:	e7fe      	b.n	8006cf2 <Error_Handler+0x6>

08006cf4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006cf8:	bf00      	nop
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	607b      	str	r3, [r7, #4]
 8006d0e:	4b10      	ldr	r3, [pc, #64]	; (8006d50 <HAL_MspInit+0x4c>)
 8006d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d12:	4a0f      	ldr	r2, [pc, #60]	; (8006d50 <HAL_MspInit+0x4c>)
 8006d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d18:	6453      	str	r3, [r2, #68]	; 0x44
 8006d1a:	4b0d      	ldr	r3, [pc, #52]	; (8006d50 <HAL_MspInit+0x4c>)
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d22:	607b      	str	r3, [r7, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d26:	2300      	movs	r3, #0
 8006d28:	603b      	str	r3, [r7, #0]
 8006d2a:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <HAL_MspInit+0x4c>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	4a08      	ldr	r2, [pc, #32]	; (8006d50 <HAL_MspInit+0x4c>)
 8006d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d34:	6413      	str	r3, [r2, #64]	; 0x40
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <HAL_MspInit+0x4c>)
 8006d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	40023800 	.word	0x40023800

08006d54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b08c      	sub	sp, #48	; 0x30
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d5c:	f107 031c 	add.w	r3, r7, #28
 8006d60:	2200      	movs	r2, #0
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	605a      	str	r2, [r3, #4]
 8006d66:	609a      	str	r2, [r3, #8]
 8006d68:	60da      	str	r2, [r3, #12]
 8006d6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a4a      	ldr	r2, [pc, #296]	; (8006e9c <HAL_ADC_MspInit+0x148>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	f040 808e 	bne.w	8006e94 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	4b48      	ldr	r3, [pc, #288]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d80:	4a47      	ldr	r2, [pc, #284]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006d82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d86:	6453      	str	r3, [r2, #68]	; 0x44
 8006d88:	4b45      	ldr	r3, [pc, #276]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d94:	2300      	movs	r3, #0
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	4b41      	ldr	r3, [pc, #260]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9c:	4a40      	ldr	r2, [pc, #256]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	6313      	str	r3, [r2, #48]	; 0x30
 8006da4:	4b3e      	ldr	r3, [pc, #248]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db0:	2300      	movs	r3, #0
 8006db2:	613b      	str	r3, [r7, #16]
 8006db4:	4b3a      	ldr	r3, [pc, #232]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db8:	4a39      	ldr	r2, [pc, #228]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8006dc0:	4b37      	ldr	r3, [pc, #220]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dcc:	2300      	movs	r3, #0
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	4b33      	ldr	r3, [pc, #204]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	4a32      	ldr	r2, [pc, #200]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006dd6:	f043 0302 	orr.w	r3, r3, #2
 8006dda:	6313      	str	r3, [r2, #48]	; 0x30
 8006ddc:	4b30      	ldr	r3, [pc, #192]	; (8006ea0 <HAL_ADC_MspInit+0x14c>)
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	60fb      	str	r3, [r7, #12]
 8006de6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006de8:	230f      	movs	r3, #15
 8006dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dec:	2303      	movs	r3, #3
 8006dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006df4:	f107 031c 	add.w	r3, r7, #28
 8006df8:	4619      	mov	r1, r3
 8006dfa:	482a      	ldr	r0, [pc, #168]	; (8006ea4 <HAL_ADC_MspInit+0x150>)
 8006dfc:	f004 f834 	bl	800ae68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006e00:	23ff      	movs	r3, #255	; 0xff
 8006e02:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e04:	2303      	movs	r3, #3
 8006e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e0c:	f107 031c 	add.w	r3, r7, #28
 8006e10:	4619      	mov	r1, r3
 8006e12:	4825      	ldr	r0, [pc, #148]	; (8006ea8 <HAL_ADC_MspInit+0x154>)
 8006e14:	f004 f828 	bl	800ae68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e24:	f107 031c 	add.w	r3, r7, #28
 8006e28:	4619      	mov	r1, r3
 8006e2a:	4820      	ldr	r0, [pc, #128]	; (8006eac <HAL_ADC_MspInit+0x158>)
 8006e2c:	f004 f81c 	bl	800ae68 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006e30:	4b1f      	ldr	r3, [pc, #124]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e32:	4a20      	ldr	r2, [pc, #128]	; (8006eb4 <HAL_ADC_MspInit+0x160>)
 8006e34:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006e36:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e3c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e3e:	4b1c      	ldr	r3, [pc, #112]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e44:	4b1a      	ldr	r3, [pc, #104]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006e4a:	4b19      	ldr	r3, [pc, #100]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e50:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e52:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e58:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e5a:	4b15      	ldr	r3, [pc, #84]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e60:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006e62:	4b13      	ldr	r3, [pc, #76]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e68:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e70:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e72:	4b0f      	ldr	r3, [pc, #60]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e74:	2200      	movs	r2, #0
 8006e76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006e78:	480d      	ldr	r0, [pc, #52]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e7a:	f003 fc59 	bl	800a730 <HAL_DMA_Init>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006e84:	f7ff ff32 	bl	8006cec <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e8e:	4a08      	ldr	r2, [pc, #32]	; (8006eb0 <HAL_ADC_MspInit+0x15c>)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006e94:	bf00      	nop
 8006e96:	3730      	adds	r7, #48	; 0x30
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40012100 	.word	0x40012100
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40020800 	.word	0x40020800
 8006ea8:	40020000 	.word	0x40020000
 8006eac:	40020400 	.word	0x40020400
 8006eb0:	20044ae8 	.word	0x20044ae8
 8006eb4:	40026440 	.word	0x40026440

08006eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08c      	sub	sp, #48	; 0x30
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec0:	f107 031c 	add.w	r3, r7, #28
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	605a      	str	r2, [r3, #4]
 8006eca:	609a      	str	r2, [r3, #8]
 8006ecc:	60da      	str	r2, [r3, #12]
 8006ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a32      	ldr	r2, [pc, #200]	; (8006fa0 <HAL_I2C_MspInit+0xe8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d12c      	bne.n	8006f34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	4b31      	ldr	r3, [pc, #196]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee2:	4a30      	ldr	r2, [pc, #192]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006ee4:	f043 0302 	orr.w	r3, r3, #2
 8006ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eea:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	61bb      	str	r3, [r7, #24]
 8006ef4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ef6:	23c0      	movs	r3, #192	; 0xc0
 8006ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006efa:	2312      	movs	r3, #18
 8006efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006efe:	2301      	movs	r3, #1
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f02:	2303      	movs	r3, #3
 8006f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006f06:	2304      	movs	r3, #4
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f0a:	f107 031c 	add.w	r3, r7, #28
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4825      	ldr	r0, [pc, #148]	; (8006fa8 <HAL_I2C_MspInit+0xf0>)
 8006f12:	f003 ffa9 	bl	800ae68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	4b22      	ldr	r3, [pc, #136]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1e:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f24:	6413      	str	r3, [r2, #64]	; 0x40
 8006f26:	4b1f      	ldr	r3, [pc, #124]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f2e:	617b      	str	r3, [r7, #20]
 8006f30:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006f32:	e031      	b.n	8006f98 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <HAL_I2C_MspInit+0xf4>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d12c      	bne.n	8006f98 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	4b18      	ldr	r3, [pc, #96]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f46:	4a17      	ldr	r2, [pc, #92]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f48:	f043 0302 	orr.w	r3, r3, #2
 8006f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4e:	4b15      	ldr	r3, [pc, #84]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f52:	f003 0302 	and.w	r3, r3, #2
 8006f56:	613b      	str	r3, [r7, #16]
 8006f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006f5a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006f60:	2312      	movs	r3, #18
 8006f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f64:	2301      	movs	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f70:	f107 031c 	add.w	r3, r7, #28
 8006f74:	4619      	mov	r1, r3
 8006f76:	480c      	ldr	r0, [pc, #48]	; (8006fa8 <HAL_I2C_MspInit+0xf0>)
 8006f78:	f003 ff76 	bl	800ae68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	4b08      	ldr	r3, [pc, #32]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f84:	4a07      	ldr	r2, [pc, #28]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f8c:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <HAL_I2C_MspInit+0xec>)
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
}
 8006f98:	bf00      	nop
 8006f9a:	3730      	adds	r7, #48	; 0x30
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	40005400 	.word	0x40005400
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40020400 	.word	0x40020400
 8006fac:	40005800 	.word	0x40005800

08006fb0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08a      	sub	sp, #40	; 0x28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fb8:	f107 0314 	add.w	r3, r7, #20
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	605a      	str	r2, [r3, #4]
 8006fc2:	609a      	str	r2, [r3, #8]
 8006fc4:	60da      	str	r2, [r3, #12]
 8006fc6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a69      	ldr	r2, [pc, #420]	; (8007174 <HAL_SD_MspInit+0x1c4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	f040 80cb 	bne.w	800716a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	613b      	str	r3, [r7, #16]
 8006fd8:	4b67      	ldr	r3, [pc, #412]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	4a66      	ldr	r2, [pc, #408]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8006fde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006fe2:	6453      	str	r3, [r2, #68]	; 0x44
 8006fe4:	4b64      	ldr	r3, [pc, #400]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8006fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fec:	613b      	str	r3, [r7, #16]
 8006fee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	4b60      	ldr	r3, [pc, #384]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8006ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff8:	4a5f      	ldr	r2, [pc, #380]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8006ffa:	f043 0304 	orr.w	r3, r3, #4
 8006ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8007000:	4b5d      	ldr	r3, [pc, #372]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8007002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	60fb      	str	r3, [r7, #12]
 800700a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800700c:	2300      	movs	r3, #0
 800700e:	60bb      	str	r3, [r7, #8]
 8007010:	4b59      	ldr	r3, [pc, #356]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8007012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007014:	4a58      	ldr	r2, [pc, #352]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 8007016:	f043 0308 	orr.w	r3, r3, #8
 800701a:	6313      	str	r3, [r2, #48]	; 0x30
 800701c:	4b56      	ldr	r3, [pc, #344]	; (8007178 <HAL_SD_MspInit+0x1c8>)
 800701e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	60bb      	str	r3, [r7, #8]
 8007026:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8007028:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800702c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702e:	2302      	movs	r3, #2
 8007030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007032:	2300      	movs	r3, #0
 8007034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007036:	2303      	movs	r3, #3
 8007038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800703a:	230c      	movs	r3, #12
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800703e:	f107 0314 	add.w	r3, r7, #20
 8007042:	4619      	mov	r1, r3
 8007044:	484d      	ldr	r0, [pc, #308]	; (800717c <HAL_SD_MspInit+0x1cc>)
 8007046:	f003 ff0f 	bl	800ae68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800704a:	2304      	movs	r3, #4
 800704c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800704e:	2302      	movs	r3, #2
 8007050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007056:	2303      	movs	r3, #3
 8007058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800705a:	230c      	movs	r3, #12
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800705e:	f107 0314 	add.w	r3, r7, #20
 8007062:	4619      	mov	r1, r3
 8007064:	4846      	ldr	r0, [pc, #280]	; (8007180 <HAL_SD_MspInit+0x1d0>)
 8007066:	f003 feff 	bl	800ae68 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800706a:	4b46      	ldr	r3, [pc, #280]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 800706c:	4a46      	ldr	r2, [pc, #280]	; (8007188 <HAL_SD_MspInit+0x1d8>)
 800706e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8007070:	4b44      	ldr	r3, [pc, #272]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 8007072:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007076:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007078:	4b42      	ldr	r3, [pc, #264]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 800707a:	2200      	movs	r2, #0
 800707c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800707e:	4b41      	ldr	r3, [pc, #260]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 8007080:	2200      	movs	r2, #0
 8007082:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007084:	4b3f      	ldr	r3, [pc, #252]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 8007086:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800708a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800708c:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 800708e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007092:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007094:	4b3b      	ldr	r3, [pc, #236]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 8007096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800709a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800709c:	4b39      	ldr	r3, [pc, #228]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 800709e:	2220      	movs	r2, #32
 80070a0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80070a2:	4b38      	ldr	r3, [pc, #224]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80070a8:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80070aa:	4b36      	ldr	r3, [pc, #216]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070ac:	2204      	movs	r2, #4
 80070ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80070b0:	4b34      	ldr	r3, [pc, #208]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070b2:	2203      	movs	r2, #3
 80070b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80070b6:	4b33      	ldr	r3, [pc, #204]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80070bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80070be:	4b31      	ldr	r3, [pc, #196]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80070c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80070c6:	482f      	ldr	r0, [pc, #188]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070c8:	f003 fb32 	bl	800a730 <HAL_DMA_Init>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d001      	beq.n	80070d6 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80070d2:	f7ff fe0b 	bl	8006cec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2a      	ldr	r2, [pc, #168]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070da:	641a      	str	r2, [r3, #64]	; 0x40
 80070dc:	4a29      	ldr	r2, [pc, #164]	; (8007184 <HAL_SD_MspInit+0x1d4>)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80070e2:	4b2a      	ldr	r3, [pc, #168]	; (800718c <HAL_SD_MspInit+0x1dc>)
 80070e4:	4a2a      	ldr	r2, [pc, #168]	; (8007190 <HAL_SD_MspInit+0x1e0>)
 80070e6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80070e8:	4b28      	ldr	r3, [pc, #160]	; (800718c <HAL_SD_MspInit+0x1dc>)
 80070ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80070ee:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80070f0:	4b26      	ldr	r3, [pc, #152]	; (800718c <HAL_SD_MspInit+0x1dc>)
 80070f2:	2240      	movs	r2, #64	; 0x40
 80070f4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80070f6:	4b25      	ldr	r3, [pc, #148]	; (800718c <HAL_SD_MspInit+0x1dc>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80070fc:	4b23      	ldr	r3, [pc, #140]	; (800718c <HAL_SD_MspInit+0x1dc>)
 80070fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007102:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007104:	4b21      	ldr	r3, [pc, #132]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800710a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800710c:	4b1f      	ldr	r3, [pc, #124]	; (800718c <HAL_SD_MspInit+0x1dc>)
 800710e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007112:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8007114:	4b1d      	ldr	r3, [pc, #116]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007116:	2220      	movs	r2, #32
 8007118:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800711a:	4b1c      	ldr	r3, [pc, #112]	; (800718c <HAL_SD_MspInit+0x1dc>)
 800711c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007120:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8007122:	4b1a      	ldr	r3, [pc, #104]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007124:	2204      	movs	r2, #4
 8007126:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8007128:	4b18      	ldr	r3, [pc, #96]	; (800718c <HAL_SD_MspInit+0x1dc>)
 800712a:	2203      	movs	r2, #3
 800712c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800712e:	4b17      	ldr	r3, [pc, #92]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007130:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8007136:	4b15      	ldr	r3, [pc, #84]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007138:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800713c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800713e:	4813      	ldr	r0, [pc, #76]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007140:	f003 faf6 	bl	800a730 <HAL_DMA_Init>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d001      	beq.n	800714e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800714a:	f7ff fdcf 	bl	8006cec <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a0e      	ldr	r2, [pc, #56]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007152:	63da      	str	r2, [r3, #60]	; 0x3c
 8007154:	4a0d      	ldr	r2, [pc, #52]	; (800718c <HAL_SD_MspInit+0x1dc>)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2100      	movs	r1, #0
 800715e:	2031      	movs	r0, #49	; 0x31
 8007160:	f003 faaf 	bl	800a6c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007164:	2031      	movs	r0, #49	; 0x31
 8007166:	f003 fac8 	bl	800a6fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800716a:	bf00      	nop
 800716c:	3728      	adds	r7, #40	; 0x28
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40023800 	.word	0x40023800
 800717c:	40020800 	.word	0x40020800
 8007180:	40020c00 	.word	0x40020c00
 8007184:	20044610 	.word	0x20044610
 8007188:	40026458 	.word	0x40026458
 800718c:	20044944 	.word	0x20044944
 8007190:	400264a0 	.word	0x400264a0

08007194 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b08a      	sub	sp, #40	; 0x28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800719c:	f107 0314 	add.w	r3, r7, #20
 80071a0:	2200      	movs	r2, #0
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	609a      	str	r2, [r3, #8]
 80071a8:	60da      	str	r2, [r3, #12]
 80071aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a19      	ldr	r2, [pc, #100]	; (8007218 <HAL_SPI_MspInit+0x84>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d12c      	bne.n	8007210 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80071b6:	2300      	movs	r3, #0
 80071b8:	613b      	str	r3, [r7, #16]
 80071ba:	4b18      	ldr	r3, [pc, #96]	; (800721c <HAL_SPI_MspInit+0x88>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a17      	ldr	r2, [pc, #92]	; (800721c <HAL_SPI_MspInit+0x88>)
 80071c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
 80071c6:	4b15      	ldr	r3, [pc, #84]	; (800721c <HAL_SPI_MspInit+0x88>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	4b11      	ldr	r3, [pc, #68]	; (800721c <HAL_SPI_MspInit+0x88>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	4a10      	ldr	r2, [pc, #64]	; (800721c <HAL_SPI_MspInit+0x88>)
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	6313      	str	r3, [r2, #48]	; 0x30
 80071e2:	4b0e      	ldr	r3, [pc, #56]	; (800721c <HAL_SPI_MspInit+0x88>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80071ee:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80071f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071f4:	2302      	movs	r3, #2
 80071f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f8:	2300      	movs	r3, #0
 80071fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071fc:	2303      	movs	r3, #3
 80071fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007200:	2305      	movs	r3, #5
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007204:	f107 0314 	add.w	r3, r7, #20
 8007208:	4619      	mov	r1, r3
 800720a:	4805      	ldr	r0, [pc, #20]	; (8007220 <HAL_SPI_MspInit+0x8c>)
 800720c:	f003 fe2c 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007210:	bf00      	nop
 8007212:	3728      	adds	r7, #40	; 0x28
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40003800 	.word	0x40003800
 800721c:	40023800 	.word	0x40023800
 8007220:	40020400 	.word	0x40020400

08007224 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b08c      	sub	sp, #48	; 0x30
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800722c:	f107 031c 	add.w	r3, r7, #28
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	605a      	str	r2, [r3, #4]
 8007236:	609a      	str	r2, [r3, #8]
 8007238:	60da      	str	r2, [r3, #12]
 800723a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a2d      	ldr	r2, [pc, #180]	; (80072f8 <HAL_TIM_PWM_MspInit+0xd4>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d12d      	bne.n	80072a2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007246:	2300      	movs	r3, #0
 8007248:	61bb      	str	r3, [r7, #24]
 800724a:	4b2c      	ldr	r3, [pc, #176]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	4a2b      	ldr	r2, [pc, #172]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 8007250:	f043 0301 	orr.w	r3, r3, #1
 8007254:	6453      	str	r3, [r2, #68]	; 0x44
 8007256:	4b29      	ldr	r3, [pc, #164]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 8007258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	61bb      	str	r3, [r7, #24]
 8007260:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
 8007266:	4b25      	ldr	r3, [pc, #148]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 8007268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726a:	4a24      	ldr	r2, [pc, #144]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 800726c:	f043 0310 	orr.w	r3, r3, #16
 8007270:	6313      	str	r3, [r2, #48]	; 0x30
 8007272:	4b22      	ldr	r3, [pc, #136]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 8007274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007276:	f003 0310 	and.w	r3, r3, #16
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800727e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007284:	2302      	movs	r3, #2
 8007286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007288:	2300      	movs	r3, #0
 800728a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800728c:	2300      	movs	r3, #0
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007290:	2301      	movs	r3, #1
 8007292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007294:	f107 031c 	add.w	r3, r7, #28
 8007298:	4619      	mov	r1, r3
 800729a:	4819      	ldr	r0, [pc, #100]	; (8007300 <HAL_TIM_PWM_MspInit+0xdc>)
 800729c:	f003 fde4 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80072a0:	e026      	b.n	80072f0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a17      	ldr	r2, [pc, #92]	; (8007304 <HAL_TIM_PWM_MspInit+0xe0>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d10e      	bne.n	80072ca <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80072ac:	2300      	movs	r3, #0
 80072ae:	613b      	str	r3, [r7, #16]
 80072b0:	4b12      	ldr	r3, [pc, #72]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 80072b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b4:	4a11      	ldr	r2, [pc, #68]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 80072b6:	f043 0302 	orr.w	r3, r3, #2
 80072ba:	6413      	str	r3, [r2, #64]	; 0x40
 80072bc:	4b0f      	ldr	r3, [pc, #60]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 80072be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	693b      	ldr	r3, [r7, #16]
}
 80072c8:	e012      	b.n	80072f0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a0e      	ldr	r2, [pc, #56]	; (8007308 <HAL_TIM_PWM_MspInit+0xe4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d10d      	bne.n	80072f0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80072d4:	2300      	movs	r3, #0
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	4a07      	ldr	r2, [pc, #28]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 80072de:	f043 0304 	orr.w	r3, r3, #4
 80072e2:	6413      	str	r3, [r2, #64]	; 0x40
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_TIM_PWM_MspInit+0xd8>)
 80072e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e8:	f003 0304 	and.w	r3, r3, #4
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	68fb      	ldr	r3, [r7, #12]
}
 80072f0:	bf00      	nop
 80072f2:	3730      	adds	r7, #48	; 0x30
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40023800 	.word	0x40023800
 8007300:	40021000 	.word	0x40021000
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800

0800730c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a3e      	ldr	r2, [pc, #248]	; (8007414 <HAL_TIM_Base_MspInit+0x108>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d116      	bne.n	800734c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	4b3d      	ldr	r3, [pc, #244]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	4a3c      	ldr	r2, [pc, #240]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007328:	f043 0310 	orr.w	r3, r3, #16
 800732c:	6413      	str	r3, [r2, #64]	; 0x40
 800732e:	4b3a      	ldr	r3, [pc, #232]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f003 0310 	and.w	r3, r3, #16
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800733a:	2200      	movs	r2, #0
 800733c:	2101      	movs	r1, #1
 800733e:	2036      	movs	r0, #54	; 0x36
 8007340:	f003 f9bf 	bl	800a6c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007344:	2036      	movs	r0, #54	; 0x36
 8007346:	f003 f9d8 	bl	800a6fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800734a:	e05e      	b.n	800740a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a32      	ldr	r2, [pc, #200]	; (800741c <HAL_TIM_Base_MspInit+0x110>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d116      	bne.n	8007384 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007356:	2300      	movs	r3, #0
 8007358:	61bb      	str	r3, [r7, #24]
 800735a:	4b2f      	ldr	r3, [pc, #188]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 800735c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735e:	4a2e      	ldr	r2, [pc, #184]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007360:	f043 0320 	orr.w	r3, r3, #32
 8007364:	6413      	str	r3, [r2, #64]	; 0x40
 8007366:	4b2c      	ldr	r3, [pc, #176]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	61bb      	str	r3, [r7, #24]
 8007370:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007372:	2200      	movs	r2, #0
 8007374:	2100      	movs	r1, #0
 8007376:	2037      	movs	r0, #55	; 0x37
 8007378:	f003 f9a3 	bl	800a6c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800737c:	2037      	movs	r0, #55	; 0x37
 800737e:	f003 f9bc 	bl	800a6fa <HAL_NVIC_EnableIRQ>
}
 8007382:	e042      	b.n	800740a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a25      	ldr	r2, [pc, #148]	; (8007420 <HAL_TIM_Base_MspInit+0x114>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d10e      	bne.n	80073ac <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	4b21      	ldr	r3, [pc, #132]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	4a20      	ldr	r2, [pc, #128]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 8007398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800739c:	6453      	str	r3, [r2, #68]	; 0x44
 800739e:	4b1e      	ldr	r3, [pc, #120]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	697b      	ldr	r3, [r7, #20]
}
 80073aa:	e02e      	b.n	800740a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a1c      	ldr	r2, [pc, #112]	; (8007424 <HAL_TIM_Base_MspInit+0x118>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d10e      	bne.n	80073d4 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80073b6:	2300      	movs	r3, #0
 80073b8:	613b      	str	r3, [r7, #16]
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073be:	4a16      	ldr	r2, [pc, #88]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073c4:	6453      	str	r3, [r2, #68]	; 0x44
 80073c6:	4b14      	ldr	r3, [pc, #80]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073ce:	613b      	str	r3, [r7, #16]
 80073d0:	693b      	ldr	r3, [r7, #16]
}
 80073d2:	e01a      	b.n	800740a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a13      	ldr	r2, [pc, #76]	; (8007428 <HAL_TIM_Base_MspInit+0x11c>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d115      	bne.n	800740a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80073de:	2300      	movs	r3, #0
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e6:	4a0c      	ldr	r2, [pc, #48]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073ec:	6413      	str	r3, [r2, #64]	; 0x40
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_TIM_Base_MspInit+0x10c>)
 80073f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	202c      	movs	r0, #44	; 0x2c
 8007400:	f003 f95f 	bl	800a6c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007404:	202c      	movs	r0, #44	; 0x2c
 8007406:	f003 f978 	bl	800a6fa <HAL_NVIC_EnableIRQ>
}
 800740a:	bf00      	nop
 800740c:	3720      	adds	r7, #32
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	40001000 	.word	0x40001000
 8007418:	40023800 	.word	0x40023800
 800741c:	40001400 	.word	0x40001400
 8007420:	40014400 	.word	0x40014400
 8007424:	40014800 	.word	0x40014800
 8007428:	40001c00 	.word	0x40001c00

0800742c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	; 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007434:	f107 0314 	add.w	r3, r7, #20
 8007438:	2200      	movs	r2, #0
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	609a      	str	r2, [r3, #8]
 8007440:	60da      	str	r2, [r3, #12]
 8007442:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a1d      	ldr	r2, [pc, #116]	; (80074c0 <HAL_TIM_Encoder_MspInit+0x94>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d133      	bne.n	80074b6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800744e:	2300      	movs	r3, #0
 8007450:	613b      	str	r3, [r7, #16]
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007458:	f043 0302 	orr.w	r3, r3, #2
 800745c:	6453      	str	r3, [r2, #68]	; 0x44
 800745e:	4b19      	ldr	r3, [pc, #100]	; (80074c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	613b      	str	r3, [r7, #16]
 8007468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800746a:	2300      	movs	r3, #0
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	4b15      	ldr	r3, [pc, #84]	; (80074c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007472:	4a14      	ldr	r2, [pc, #80]	; (80074c4 <HAL_TIM_Encoder_MspInit+0x98>)
 8007474:	f043 0304 	orr.w	r3, r3, #4
 8007478:	6313      	str	r3, [r2, #48]	; 0x30
 800747a:	4b12      	ldr	r3, [pc, #72]	; (80074c4 <HAL_TIM_Encoder_MspInit+0x98>)
 800747c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007486:	23c0      	movs	r3, #192	; 0xc0
 8007488:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800748a:	2302      	movs	r3, #2
 800748c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800748e:	2300      	movs	r3, #0
 8007490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007492:	2300      	movs	r3, #0
 8007494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007496:	2303      	movs	r3, #3
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800749a:	f107 0314 	add.w	r3, r7, #20
 800749e:	4619      	mov	r1, r3
 80074a0:	4809      	ldr	r0, [pc, #36]	; (80074c8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80074a2:	f003 fce1 	bl	800ae68 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80074a6:	2200      	movs	r2, #0
 80074a8:	2100      	movs	r1, #0
 80074aa:	202c      	movs	r0, #44	; 0x2c
 80074ac:	f003 f909 	bl	800a6c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80074b0:	202c      	movs	r0, #44	; 0x2c
 80074b2:	f003 f922 	bl	800a6fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80074b6:	bf00      	nop
 80074b8:	3728      	adds	r7, #40	; 0x28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	40010400 	.word	0x40010400
 80074c4:	40023800 	.word	0x40023800
 80074c8:	40020800 	.word	0x40020800

080074cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08c      	sub	sp, #48	; 0x30
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074d4:	f107 031c 	add.w	r3, r7, #28
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
 80074dc:	605a      	str	r2, [r3, #4]
 80074de:	609a      	str	r2, [r3, #8]
 80074e0:	60da      	str	r2, [r3, #12]
 80074e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a5c      	ldr	r2, [pc, #368]	; (800765c <HAL_TIM_MspPostInit+0x190>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d11f      	bne.n	800752e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80074ee:	2300      	movs	r3, #0
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	4b5b      	ldr	r3, [pc, #364]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 80074f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f6:	4a5a      	ldr	r2, [pc, #360]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 80074f8:	f043 0310 	orr.w	r3, r3, #16
 80074fc:	6313      	str	r3, [r2, #48]	; 0x30
 80074fe:	4b58      	ldr	r3, [pc, #352]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	61bb      	str	r3, [r7, #24]
 8007508:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800750a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800750e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007510:	2302      	movs	r3, #2
 8007512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007514:	2300      	movs	r3, #0
 8007516:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007518:	2300      	movs	r3, #0
 800751a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800751c:	2301      	movs	r3, #1
 800751e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007520:	f107 031c 	add.w	r3, r7, #28
 8007524:	4619      	mov	r1, r3
 8007526:	484f      	ldr	r0, [pc, #316]	; (8007664 <HAL_TIM_MspPostInit+0x198>)
 8007528:	f003 fc9e 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800752c:	e091      	b.n	8007652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a4d      	ldr	r2, [pc, #308]	; (8007668 <HAL_TIM_MspPostInit+0x19c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d11e      	bne.n	8007576 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
 800753c:	4b48      	ldr	r3, [pc, #288]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	4a47      	ldr	r2, [pc, #284]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 8007542:	f043 0302 	orr.w	r3, r3, #2
 8007546:	6313      	str	r3, [r2, #48]	; 0x30
 8007548:	4b45      	ldr	r3, [pc, #276]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	617b      	str	r3, [r7, #20]
 8007552:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007554:	2330      	movs	r3, #48	; 0x30
 8007556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007558:	2302      	movs	r3, #2
 800755a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755c:	2300      	movs	r3, #0
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007560:	2300      	movs	r3, #0
 8007562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007564:	2302      	movs	r3, #2
 8007566:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007568:	f107 031c 	add.w	r3, r7, #28
 800756c:	4619      	mov	r1, r3
 800756e:	483f      	ldr	r0, [pc, #252]	; (800766c <HAL_TIM_MspPostInit+0x1a0>)
 8007570:	f003 fc7a 	bl	800ae68 <HAL_GPIO_Init>
}
 8007574:	e06d      	b.n	8007652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a3d      	ldr	r2, [pc, #244]	; (8007670 <HAL_TIM_MspPostInit+0x1a4>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d11f      	bne.n	80075c0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007580:	2300      	movs	r3, #0
 8007582:	613b      	str	r3, [r7, #16]
 8007584:	4b36      	ldr	r3, [pc, #216]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 8007586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007588:	4a35      	ldr	r2, [pc, #212]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 800758a:	f043 0308 	orr.w	r3, r3, #8
 800758e:	6313      	str	r3, [r2, #48]	; 0x30
 8007590:	4b33      	ldr	r3, [pc, #204]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 8007592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007594:	f003 0308 	and.w	r3, r3, #8
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800759c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80075a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075a2:	2302      	movs	r3, #2
 80075a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075aa:	2300      	movs	r3, #0
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80075ae:	2302      	movs	r3, #2
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075b2:	f107 031c 	add.w	r3, r7, #28
 80075b6:	4619      	mov	r1, r3
 80075b8:	482e      	ldr	r0, [pc, #184]	; (8007674 <HAL_TIM_MspPostInit+0x1a8>)
 80075ba:	f003 fc55 	bl	800ae68 <HAL_GPIO_Init>
}
 80075be:	e048      	b.n	8007652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a2c      	ldr	r2, [pc, #176]	; (8007678 <HAL_TIM_MspPostInit+0x1ac>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d11f      	bne.n	800760a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	4b24      	ldr	r3, [pc, #144]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 80075d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d2:	4a23      	ldr	r2, [pc, #140]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 80075d4:	f043 0302 	orr.w	r3, r3, #2
 80075d8:	6313      	str	r3, [r2, #48]	; 0x30
 80075da:	4b21      	ldr	r3, [pc, #132]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	f003 0302 	and.w	r3, r3, #2
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80075e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80075ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ec:	2302      	movs	r3, #2
 80075ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075f0:	2300      	movs	r3, #0
 80075f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075f4:	2300      	movs	r3, #0
 80075f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80075f8:	2303      	movs	r3, #3
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80075fc:	f107 031c 	add.w	r3, r7, #28
 8007600:	4619      	mov	r1, r3
 8007602:	481a      	ldr	r0, [pc, #104]	; (800766c <HAL_TIM_MspPostInit+0x1a0>)
 8007604:	f003 fc30 	bl	800ae68 <HAL_GPIO_Init>
}
 8007608:	e023      	b.n	8007652 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a1b      	ldr	r2, [pc, #108]	; (800767c <HAL_TIM_MspPostInit+0x1b0>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d11e      	bne.n	8007652 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007614:	2300      	movs	r3, #0
 8007616:	60bb      	str	r3, [r7, #8]
 8007618:	4b11      	ldr	r3, [pc, #68]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761c:	4a10      	ldr	r2, [pc, #64]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 800761e:	f043 0302 	orr.w	r3, r3, #2
 8007622:	6313      	str	r3, [r2, #48]	; 0x30
 8007624:	4b0e      	ldr	r3, [pc, #56]	; (8007660 <HAL_TIM_MspPostInit+0x194>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f003 0302 	and.w	r3, r3, #2
 800762c:	60bb      	str	r3, [r7, #8]
 800762e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007636:	2302      	movs	r3, #2
 8007638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763a:	2300      	movs	r3, #0
 800763c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800763e:	2300      	movs	r3, #0
 8007640:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007642:	2303      	movs	r3, #3
 8007644:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007646:	f107 031c 	add.w	r3, r7, #28
 800764a:	4619      	mov	r1, r3
 800764c:	4807      	ldr	r0, [pc, #28]	; (800766c <HAL_TIM_MspPostInit+0x1a0>)
 800764e:	f003 fc0b 	bl	800ae68 <HAL_GPIO_Init>
}
 8007652:	bf00      	nop
 8007654:	3730      	adds	r7, #48	; 0x30
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40023800 	.word	0x40023800
 8007664:	40021000 	.word	0x40021000
 8007668:	40000400 	.word	0x40000400
 800766c:	40020400 	.word	0x40020400
 8007670:	40000800 	.word	0x40000800
 8007674:	40020c00 	.word	0x40020c00
 8007678:	40014400 	.word	0x40014400
 800767c:	40014800 	.word	0x40014800

08007680 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	; 0x28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007688:	f107 0314 	add.w	r3, r7, #20
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	605a      	str	r2, [r3, #4]
 8007692:	609a      	str	r2, [r3, #8]
 8007694:	60da      	str	r2, [r3, #12]
 8007696:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a19      	ldr	r2, [pc, #100]	; (8007704 <HAL_UART_MspInit+0x84>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d12b      	bne.n	80076fa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
 80076a6:	4b18      	ldr	r3, [pc, #96]	; (8007708 <HAL_UART_MspInit+0x88>)
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	4a17      	ldr	r2, [pc, #92]	; (8007708 <HAL_UART_MspInit+0x88>)
 80076ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076b0:	6413      	str	r3, [r2, #64]	; 0x40
 80076b2:	4b15      	ldr	r3, [pc, #84]	; (8007708 <HAL_UART_MspInit+0x88>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076ba:	613b      	str	r3, [r7, #16]
 80076bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <HAL_UART_MspInit+0x88>)
 80076c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c6:	4a10      	ldr	r2, [pc, #64]	; (8007708 <HAL_UART_MspInit+0x88>)
 80076c8:	f043 0308 	orr.w	r3, r3, #8
 80076cc:	6313      	str	r3, [r2, #48]	; 0x30
 80076ce:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <HAL_UART_MspInit+0x88>)
 80076d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d2:	f003 0308 	and.w	r3, r3, #8
 80076d6:	60fb      	str	r3, [r7, #12]
 80076d8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80076da:	2360      	movs	r3, #96	; 0x60
 80076dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076de:	2302      	movs	r3, #2
 80076e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e6:	2303      	movs	r3, #3
 80076e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80076ea:	2307      	movs	r3, #7
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80076ee:	f107 0314 	add.w	r3, r7, #20
 80076f2:	4619      	mov	r1, r3
 80076f4:	4805      	ldr	r0, [pc, #20]	; (800770c <HAL_UART_MspInit+0x8c>)
 80076f6:	f003 fbb7 	bl	800ae68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80076fa:	bf00      	nop
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	40004400 	.word	0x40004400
 8007708:	40023800 	.word	0x40023800
 800770c:	40020c00 	.word	0x40020c00

08007710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007710:	b480      	push	{r7}
 8007712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007714:	e7fe      	b.n	8007714 <NMI_Handler+0x4>

08007716 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007716:	b480      	push	{r7}
 8007718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800771a:	e7fe      	b.n	800771a <HardFault_Handler+0x4>

0800771c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007720:	e7fe      	b.n	8007720 <MemManage_Handler+0x4>

08007722 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007722:	b480      	push	{r7}
 8007724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007726:	e7fe      	b.n	8007726 <BusFault_Handler+0x4>

08007728 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800772c:	e7fe      	b.n	800772c <UsageFault_Handler+0x4>

0800772e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800772e:	b480      	push	{r7}
 8007730:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007732:	bf00      	nop
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007740:	bf00      	nop
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800774a:	b480      	push	{r7}
 800774c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800774e:	bf00      	nop
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800775c:	f002 fa90 	bl	8009c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007760:	bf00      	nop
 8007762:	bd80      	pop	{r7, pc}

08007764 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007768:	4803      	ldr	r0, [pc, #12]	; (8007778 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800776a:	f007 fd60 	bl	800f22e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800776e:	4803      	ldr	r0, [pc, #12]	; (800777c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007770:	f007 fd5d 	bl	800f22e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007774:	bf00      	nop
 8007776:	bd80      	pop	{r7, pc}
 8007778:	200446c8 	.word	0x200446c8
 800777c:	200448c4 	.word	0x200448c4

08007780 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007784:	4802      	ldr	r0, [pc, #8]	; (8007790 <SDIO_IRQHandler+0x10>)
 8007786:	f005 fdf9 	bl	800d37c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800778a:	bf00      	nop
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20044a24 	.word	0x20044a24

08007794 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007798:	4802      	ldr	r0, [pc, #8]	; (80077a4 <TIM6_DAC_IRQHandler+0x10>)
 800779a:	f007 fd48 	bl	800f22e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800779e:	bf00      	nop
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	200449a4 	.word	0x200449a4

080077a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80077ac:	4802      	ldr	r0, [pc, #8]	; (80077b8 <TIM7_IRQHandler+0x10>)
 80077ae:	f007 fd3e 	bl	800f22e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80077b2:	bf00      	nop
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	20044b48 	.word	0x20044b48

080077bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80077c0:	4802      	ldr	r0, [pc, #8]	; (80077cc <DMA2_Stream2_IRQHandler+0x10>)
 80077c2:	f003 f8dd 	bl	800a980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80077c6:	bf00      	nop
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20044ae8 	.word	0x20044ae8

080077d0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80077d4:	4802      	ldr	r0, [pc, #8]	; (80077e0 <DMA2_Stream3_IRQHandler+0x10>)
 80077d6:	f003 f8d3 	bl	800a980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80077da:	bf00      	nop
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20044610 	.word	0x20044610

080077e4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80077e8:	4802      	ldr	r0, [pc, #8]	; (80077f4 <DMA2_Stream6_IRQHandler+0x10>)
 80077ea:	f003 f8c9 	bl	800a980 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80077ee:	bf00      	nop
 80077f0:	bd80      	pop	{r7, pc}
 80077f2:	bf00      	nop
 80077f4:	20044944 	.word	0x20044944

080077f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007800:	4a14      	ldr	r2, [pc, #80]	; (8007854 <_sbrk+0x5c>)
 8007802:	4b15      	ldr	r3, [pc, #84]	; (8007858 <_sbrk+0x60>)
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <_sbrk+0x64>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d102      	bne.n	800781a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007814:	4b11      	ldr	r3, [pc, #68]	; (800785c <_sbrk+0x64>)
 8007816:	4a12      	ldr	r2, [pc, #72]	; (8007860 <_sbrk+0x68>)
 8007818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800781a:	4b10      	ldr	r3, [pc, #64]	; (800785c <_sbrk+0x64>)
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	429a      	cmp	r2, r3
 8007826:	d207      	bcs.n	8007838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007828:	f00d ff94 	bl	8015754 <__errno>
 800782c:	4602      	mov	r2, r0
 800782e:	230c      	movs	r3, #12
 8007830:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007832:	f04f 33ff 	mov.w	r3, #4294967295
 8007836:	e009      	b.n	800784c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007838:	4b08      	ldr	r3, [pc, #32]	; (800785c <_sbrk+0x64>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800783e:	4b07      	ldr	r3, [pc, #28]	; (800785c <_sbrk+0x64>)
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	4a05      	ldr	r2, [pc, #20]	; (800785c <_sbrk+0x64>)
 8007848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800784a:	68fb      	ldr	r3, [r7, #12]
}
 800784c:	4618      	mov	r0, r3
 800784e:	3718      	adds	r7, #24
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}
 8007854:	20050000 	.word	0x20050000
 8007858:	00000800 	.word	0x00000800
 800785c:	200002b8 	.word	0x200002b8
 8007860:	20046c98 	.word	0x20046c98

08007864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007868:	4b08      	ldr	r3, [pc, #32]	; (800788c <SystemInit+0x28>)
 800786a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800786e:	4a07      	ldr	r2, [pc, #28]	; (800788c <SystemInit+0x28>)
 8007870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <SystemInit+0x28>)
 800787a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800787e:	609a      	str	r2, [r3, #8]
#endif
}
 8007880:	bf00      	nop
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007890:	b598      	push	{r3, r4, r7, lr}
 8007892:	af00      	add	r7, sp, #0
	lcd_init();
 8007894:	f7f9 fbc0 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007898:	483b      	ldr	r0, [pc, #236]	; (8007988 <cppInit+0xf8>)
 800789a:	f7fd fcc3 	bl	8005224 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800789e:	2064      	movs	r0, #100	; 0x64
 80078a0:	f002 fa0e 	bl	8009cc0 <HAL_Delay>
	power_sensor.updateValues();
 80078a4:	4838      	ldr	r0, [pc, #224]	; (8007988 <cppInit+0xf8>)
 80078a6:	f7fd fccb 	bl	8005240 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 80078aa:	f7f9 fbf9 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80078ae:	2100      	movs	r1, #0
 80078b0:	2000      	movs	r0, #0
 80078b2:	f7f9 fc05 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 80078b6:	4835      	ldr	r0, [pc, #212]	; (800798c <cppInit+0xfc>)
 80078b8:	f7f9 fc2c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80078bc:	2101      	movs	r1, #1
 80078be:	2000      	movs	r0, #0
 80078c0:	f7f9 fbfe 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 80078c4:	4830      	ldr	r0, [pc, #192]	; (8007988 <cppInit+0xf8>)
 80078c6:	f7fd fce5 	bl	8005294 <_ZN11PowerSensor17getButteryVoltageEv>
 80078ca:	ee10 3a10 	vmov	r3, s0
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f8 fe52 	bl	8000578 <__aeabi_f2d>
 80078d4:	4603      	mov	r3, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	461a      	mov	r2, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	482c      	ldr	r0, [pc, #176]	; (8007990 <cppInit+0x100>)
 80078de:	f7f9 fc19 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80078e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80078e6:	f002 f9eb 	bl	8009cc0 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80078ea:	482a      	ldr	r0, [pc, #168]	; (8007994 <cppInit+0x104>)
 80078ec:	f7fc febc 	bl	8004668 <_ZN6Logger10sdCardInitEv>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d007      	beq.n	8007906 <cppInit+0x76>
		led.fullColor('G');
 80078f6:	2147      	movs	r1, #71	; 0x47
 80078f8:	4827      	ldr	r0, [pc, #156]	; (8007998 <cppInit+0x108>)
 80078fa:	f7fa fc5f 	bl	80021bc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80078fe:	2064      	movs	r0, #100	; 0x64
 8007900:	f002 f9de 	bl	8009cc0 <HAL_Delay>
 8007904:	e006      	b.n	8007914 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007906:	2152      	movs	r1, #82	; 0x52
 8007908:	4823      	ldr	r0, [pc, #140]	; (8007998 <cppInit+0x108>)
 800790a:	f7fa fc57 	bl	80021bc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800790e:	2064      	movs	r0, #100	; 0x64
 8007910:	f002 f9d6 	bl	8009cc0 <HAL_Delay>
	}

	line_sensor.ADCStart();
 8007914:	4821      	ldr	r0, [pc, #132]	; (800799c <cppInit+0x10c>)
 8007916:	f7fa fdad 	bl	8002474 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800791a:	4821      	ldr	r0, [pc, #132]	; (80079a0 <cppInit+0x110>)
 800791c:	f7fd f93a 	bl	8004b94 <_ZN5Motor4initEv>
	encoder.init();
 8007920:	4820      	ldr	r0, [pc, #128]	; (80079a4 <cppInit+0x114>)
 8007922:	f7f9 fd7f 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 8007926:	4820      	ldr	r0, [pc, #128]	; (80079a8 <cppInit+0x118>)
 8007928:	f7fa fa32 	bl	8001d90 <_ZN3IMU4initEv>
	line_trace.init();
 800792c:	481f      	ldr	r0, [pc, #124]	; (80079ac <cppInit+0x11c>)
 800792e:	f7fb ffcf 	bl	80038d0 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8007932:	481a      	ldr	r0, [pc, #104]	; (800799c <cppInit+0x10c>)
 8007934:	f7fa fefe 	bl	8002734 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8007938:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800793c:	f002 f9c0 	bl	8009cc0 <HAL_Delay>

	led.fullColor('M');
 8007940:	214d      	movs	r1, #77	; 0x4d
 8007942:	4815      	ldr	r0, [pc, #84]	; (8007998 <cppInit+0x108>)
 8007944:	f7fa fc3a 	bl	80021bc <_ZN3LED9fullColorEc>
	imu.calibration();
 8007948:	4817      	ldr	r0, [pc, #92]	; (80079a8 <cppInit+0x118>)
 800794a:	f7fa fabf 	bl	8001ecc <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.0154, 6.5511, 0.0010088); //3s
 800794e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 80079b0 <cppInit+0x120>
 8007952:	eddf 0a18 	vldr	s1, [pc, #96]	; 80079b4 <cppInit+0x124>
 8007956:	ed9f 0a18 	vldr	s0, [pc, #96]	; 80079b8 <cppInit+0x128>
 800795a:	4818      	ldr	r0, [pc, #96]	; (80079bc <cppInit+0x12c>)
 800795c:	f7fe f9dc 	bl	8005d18 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007960:	ed9f 1a17 	vldr	s2, [pc, #92]	; 80079c0 <cppInit+0x130>
 8007964:	eddf 0a17 	vldr	s1, [pc, #92]	; 80079c4 <cppInit+0x134>
 8007968:	ed9f 0a17 	vldr	s0, [pc, #92]	; 80079c8 <cppInit+0x138>
 800796c:	4813      	ldr	r0, [pc, #76]	; (80079bc <cppInit+0x12c>)
 800796e:	f7fe f9ec 	bl	8005d4a <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007972:	4816      	ldr	r0, [pc, #88]	; (80079cc <cppInit+0x13c>)
 8007974:	f7fd fb60 	bl	8005038 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007978:	4815      	ldr	r0, [pc, #84]	; (80079d0 <cppInit+0x140>)
 800797a:	f7fd fbf7 	bl	800516c <_ZN13PathFollowing4initEv>

	esc.init();
 800797e:	4815      	ldr	r0, [pc, #84]	; (80079d4 <cppInit+0x144>)
 8007980:	f7f9 fc34 	bl	80011ec <_ZN3ESC4initEv>

}
 8007984:	bf00      	nop
 8007986:	bd98      	pop	{r3, r4, r7, pc}
 8007988:	200005d0 	.word	0x200005d0
 800798c:	08019d8c 	.word	0x08019d8c
 8007990:	08019d94 	.word	0x08019d94
 8007994:	200005f0 	.word	0x200005f0
 8007998:	200005cc 	.word	0x200005cc
 800799c:	200002bc 	.word	0x200002bc
 80079a0:	200005c8 	.word	0x200005c8
 80079a4:	2001dabc 	.word	0x2001dabc
 80079a8:	200005dc 	.word	0x200005dc
 80079ac:	2001db5c 	.word	0x2001db5c
 80079b0:	3a8439b6 	.word	0x3a8439b6
 80079b4:	40d1a29c 	.word	0x40d1a29c
 80079b8:	3f81f8a1 	.word	0x3f81f8a1
 80079bc:	2001dadc 	.word	0x2001dadc
 80079c0:	00000000 	.word	0x00000000
 80079c4:	3f5e3fbc 	.word	0x3f5e3fbc
 80079c8:	3d75c28f 	.word	0x3d75c28f
 80079cc:	2001db18 	.word	0x2001db18
 80079d0:	2002ab10 	.word	0x2002ab10
 80079d4:	2001db58 	.word	0x2001db58

080079d8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80079dc:	480e      	ldr	r0, [pc, #56]	; (8007a18 <cppFlip1ms+0x40>)
 80079de:	f7fa fda7 	bl	8002530 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80079e2:	480e      	ldr	r0, [pc, #56]	; (8007a1c <cppFlip1ms+0x44>)
 80079e4:	f7fa f9fa 	bl	8001ddc <_ZN3IMU12updateValuesEv>
	encoder.update();
 80079e8:	480d      	ldr	r0, [pc, #52]	; (8007a20 <cppFlip1ms+0x48>)
 80079ea:	f7f9 fd3d 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80079ee:	480d      	ldr	r0, [pc, #52]	; (8007a24 <cppFlip1ms+0x4c>)
 80079f0:	f7fc fa14 	bl	8003e1c <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80079f4:	480c      	ldr	r0, [pc, #48]	; (8007a28 <cppFlip1ms+0x50>)
 80079f6:	f7fe f9c1 	bl	8005d7c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80079fa:	480c      	ldr	r0, [pc, #48]	; (8007a2c <cppFlip1ms+0x54>)
 80079fc:	f7fd fb00 	bl	8005000 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007a00:	480b      	ldr	r0, [pc, #44]	; (8007a30 <cppFlip1ms+0x58>)
 8007a02:	f7fd fcc3 	bl	800538c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007a06:	480b      	ldr	r0, [pc, #44]	; (8007a34 <cppFlip1ms+0x5c>)
 8007a08:	f7fd f8d6 	bl	8004bb8 <_ZN5Motor9motorCtrlEv>
*/
	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8007a0c:	4804      	ldr	r0, [pc, #16]	; (8007a20 <cppFlip1ms+0x48>)
 8007a0e:	f7f9 fe15 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007a12:	bf00      	nop
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	200002bc 	.word	0x200002bc
 8007a1c:	200005dc 	.word	0x200005dc
 8007a20:	2001dabc 	.word	0x2001dabc
 8007a24:	2001db5c 	.word	0x2001db5c
 8007a28:	2001dadc 	.word	0x2001dadc
 8007a2c:	2001db18 	.word	0x2001db18
 8007a30:	200005b4 	.word	0x200005b4
 8007a34:	200005c8 	.word	0x200005c8

08007a38 <cppFlip100ns>:

void cppFlip100ns(void)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007a3c:	4802      	ldr	r0, [pc, #8]	; (8007a48 <cppFlip100ns+0x10>)
 8007a3e:	f7fa fd29 	bl	8002494 <_ZN10LineSensor17storeSensorValuesEv>
}
 8007a42:	bf00      	nop
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	200002bc 	.word	0x200002bc

08007a4c <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007a50:	4b10      	ldr	r3, [pc, #64]	; (8007a94 <cppFlip10ms+0x48>)
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	4b0e      	ldr	r3, [pc, #56]	; (8007a94 <cppFlip10ms+0x48>)
 8007a5a:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 17){ //170ms
 8007a5c:	4b0d      	ldr	r3, [pc, #52]	; (8007a94 <cppFlip10ms+0x48>)
 8007a5e:	881b      	ldrh	r3, [r3, #0]
 8007a60:	2b10      	cmp	r3, #16
 8007a62:	d905      	bls.n	8007a70 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007a64:	480c      	ldr	r0, [pc, #48]	; (8007a98 <cppFlip10ms+0x4c>)
 8007a66:	f7fd ffa9 	bl	80059bc <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8007a6a:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <cppFlip10ms+0x48>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007a70:	480a      	ldr	r0, [pc, #40]	; (8007a9c <cppFlip10ms+0x50>)
 8007a72:	f7fd f963 	bl	8004d3c <_ZN5Motor20getLeftCounterPeriodEv>
 8007a76:	4603      	mov	r3, r0
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4809      	ldr	r0, [pc, #36]	; (8007aa0 <cppFlip10ms+0x54>)
 8007a7c:	f7fc fe3c 	bl	80046f8 <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007a80:	4806      	ldr	r0, [pc, #24]	; (8007a9c <cppFlip10ms+0x50>)
 8007a82:	f7fd f968 	bl	8004d56 <_ZN5Motor21getRightCounterPeriodEv>
 8007a86:	4603      	mov	r3, r0
 8007a88:	4619      	mov	r1, r3
 8007a8a:	4805      	ldr	r0, [pc, #20]	; (8007aa0 <cppFlip10ms+0x54>)
 8007a8c:	f7fc fe6d 	bl	800476a <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007a90:	bf00      	nop
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20042238 	.word	0x20042238
 8007a98:	2002a904 	.word	0x2002a904
 8007a9c:	200005c8 	.word	0x200005c8
 8007aa0:	200005f0 	.word	0x200005f0
 8007aa4:	00000000 	.word	0x00000000

08007aa8 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007aae:	4baf      	ldr	r3, [pc, #700]	; (8007d6c <cppLoop+0x2c4>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f3bf 8f5b 	dmb	ish
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bf0c      	ite	eq
 8007ac0:	2301      	moveq	r3, #1
 8007ac2:	2300      	movne	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d015      	beq.n	8007af6 <cppLoop+0x4e>
 8007aca:	48a8      	ldr	r0, [pc, #672]	; (8007d6c <cppLoop+0x2c4>)
 8007acc:	f00c fddd 	bl	801468a <__cxa_guard_acquire>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d00a      	beq.n	8007af6 <cppLoop+0x4e>
 8007ae0:	48a3      	ldr	r0, [pc, #652]	; (8007d70 <cppLoop+0x2c8>)
 8007ae2:	f7fb fffc 	bl	8003ade <_ZN9LineTrace5getKpEv>
 8007ae6:	eef0 7a40 	vmov.f32	s15, s0
 8007aea:	4ba2      	ldr	r3, [pc, #648]	; (8007d74 <cppLoop+0x2cc>)
 8007aec:	edc3 7a00 	vstr	s15, [r3]
 8007af0:	489e      	ldr	r0, [pc, #632]	; (8007d6c <cppLoop+0x2c4>)
 8007af2:	f00c fdd6 	bl	80146a2 <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8007af6:	4ba0      	ldr	r3, [pc, #640]	; (8007d78 <cppLoop+0x2d0>)
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	f3bf 8f5b 	dmb	ish
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d015      	beq.n	8007b3e <cppLoop+0x96>
 8007b12:	4899      	ldr	r0, [pc, #612]	; (8007d78 <cppLoop+0x2d0>)
 8007b14:	f00c fdb9 	bl	801468a <__cxa_guard_acquire>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bf14      	ite	ne
 8007b1e:	2301      	movne	r3, #1
 8007b20:	2300      	moveq	r3, #0
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <cppLoop+0x96>
 8007b28:	4891      	ldr	r0, [pc, #580]	; (8007d70 <cppLoop+0x2c8>)
 8007b2a:	f7fb ffe7 	bl	8003afc <_ZN9LineTrace5getKiEv>
 8007b2e:	eef0 7a40 	vmov.f32	s15, s0
 8007b32:	4b92      	ldr	r3, [pc, #584]	; (8007d7c <cppLoop+0x2d4>)
 8007b34:	edc3 7a00 	vstr	s15, [r3]
 8007b38:	488f      	ldr	r0, [pc, #572]	; (8007d78 <cppLoop+0x2d0>)
 8007b3a:	f00c fdb2 	bl	80146a2 <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007b3e:	4b90      	ldr	r3, [pc, #576]	; (8007d80 <cppLoop+0x2d8>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	f3bf 8f5b 	dmb	ish
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	bf0c      	ite	eq
 8007b50:	2301      	moveq	r3, #1
 8007b52:	2300      	movne	r3, #0
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d015      	beq.n	8007b86 <cppLoop+0xde>
 8007b5a:	4889      	ldr	r0, [pc, #548]	; (8007d80 <cppLoop+0x2d8>)
 8007b5c:	f00c fd95 	bl	801468a <__cxa_guard_acquire>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	bf14      	ite	ne
 8007b66:	2301      	movne	r3, #1
 8007b68:	2300      	moveq	r3, #0
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <cppLoop+0xde>
 8007b70:	487f      	ldr	r0, [pc, #508]	; (8007d70 <cppLoop+0x2c8>)
 8007b72:	f7fb ffd2 	bl	8003b1a <_ZN9LineTrace5getKdEv>
 8007b76:	eef0 7a40 	vmov.f32	s15, s0
 8007b7a:	4b82      	ldr	r3, [pc, #520]	; (8007d84 <cppLoop+0x2dc>)
 8007b7c:	edc3 7a00 	vstr	s15, [r3]
 8007b80:	487f      	ldr	r0, [pc, #508]	; (8007d80 <cppLoop+0x2d8>)
 8007b82:	f00c fd8e 	bl	80146a2 <__cxa_guard_release>

	static float adj_kp_slow = line_trace.getKpSlow();
 8007b86:	4b80      	ldr	r3, [pc, #512]	; (8007d88 <cppLoop+0x2e0>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f3bf 8f5b 	dmb	ish
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d015      	beq.n	8007bce <cppLoop+0x126>
 8007ba2:	4879      	ldr	r0, [pc, #484]	; (8007d88 <cppLoop+0x2e0>)
 8007ba4:	f00c fd71 	bl	801468a <__cxa_guard_acquire>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	bf14      	ite	ne
 8007bae:	2301      	movne	r3, #1
 8007bb0:	2300      	moveq	r3, #0
 8007bb2:	b2db      	uxtb	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <cppLoop+0x126>
 8007bb8:	486d      	ldr	r0, [pc, #436]	; (8007d70 <cppLoop+0x2c8>)
 8007bba:	f7fb ffd6 	bl	8003b6a <_ZN9LineTrace9getKpSlowEv>
 8007bbe:	eef0 7a40 	vmov.f32	s15, s0
 8007bc2:	4b72      	ldr	r3, [pc, #456]	; (8007d8c <cppLoop+0x2e4>)
 8007bc4:	edc3 7a00 	vstr	s15, [r3]
 8007bc8:	486f      	ldr	r0, [pc, #444]	; (8007d88 <cppLoop+0x2e0>)
 8007bca:	f00c fd6a 	bl	80146a2 <__cxa_guard_release>
	static float adj_ki_slow = line_trace.getKiSlow();
 8007bce:	4b70      	ldr	r3, [pc, #448]	; (8007d90 <cppLoop+0x2e8>)
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f3bf 8f5b 	dmb	ish
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0301 	and.w	r3, r3, #1
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	bf0c      	ite	eq
 8007be0:	2301      	moveq	r3, #1
 8007be2:	2300      	movne	r3, #0
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d015      	beq.n	8007c16 <cppLoop+0x16e>
 8007bea:	4869      	ldr	r0, [pc, #420]	; (8007d90 <cppLoop+0x2e8>)
 8007bec:	f00c fd4d 	bl	801468a <__cxa_guard_acquire>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	bf14      	ite	ne
 8007bf6:	2301      	movne	r3, #1
 8007bf8:	2300      	moveq	r3, #0
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <cppLoop+0x16e>
 8007c00:	485b      	ldr	r0, [pc, #364]	; (8007d70 <cppLoop+0x2c8>)
 8007c02:	f7fb ffc1 	bl	8003b88 <_ZN9LineTrace9getKiSlowEv>
 8007c06:	eef0 7a40 	vmov.f32	s15, s0
 8007c0a:	4b62      	ldr	r3, [pc, #392]	; (8007d94 <cppLoop+0x2ec>)
 8007c0c:	edc3 7a00 	vstr	s15, [r3]
 8007c10:	485f      	ldr	r0, [pc, #380]	; (8007d90 <cppLoop+0x2e8>)
 8007c12:	f00c fd46 	bl	80146a2 <__cxa_guard_release>
	static float adj_kd_slow = line_trace.getKdSlow();
 8007c16:	4b60      	ldr	r3, [pc, #384]	; (8007d98 <cppLoop+0x2f0>)
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	f3bf 8f5b 	dmb	ish
 8007c1e:	b2db      	uxtb	r3, r3
 8007c20:	f003 0301 	and.w	r3, r3, #1
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	bf0c      	ite	eq
 8007c28:	2301      	moveq	r3, #1
 8007c2a:	2300      	movne	r3, #0
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d015      	beq.n	8007c5e <cppLoop+0x1b6>
 8007c32:	4859      	ldr	r0, [pc, #356]	; (8007d98 <cppLoop+0x2f0>)
 8007c34:	f00c fd29 	bl	801468a <__cxa_guard_acquire>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	bf14      	ite	ne
 8007c3e:	2301      	movne	r3, #1
 8007c40:	2300      	moveq	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d00a      	beq.n	8007c5e <cppLoop+0x1b6>
 8007c48:	4849      	ldr	r0, [pc, #292]	; (8007d70 <cppLoop+0x2c8>)
 8007c4a:	f7fb ffac 	bl	8003ba6 <_ZN9LineTrace9getKdSlowEv>
 8007c4e:	eef0 7a40 	vmov.f32	s15, s0
 8007c52:	4b52      	ldr	r3, [pc, #328]	; (8007d9c <cppLoop+0x2f4>)
 8007c54:	edc3 7a00 	vstr	s15, [r3]
 8007c58:	484f      	ldr	r0, [pc, #316]	; (8007d98 <cppLoop+0x2f0>)
 8007c5a:	f00c fd22 	bl	80146a2 <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007c5e:	4b50      	ldr	r3, [pc, #320]	; (8007da0 <cppLoop+0x2f8>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	f3bf 8f5b 	dmb	ish
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	bf0c      	ite	eq
 8007c70:	2301      	moveq	r3, #1
 8007c72:	2300      	movne	r3, #0
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d015      	beq.n	8007ca6 <cppLoop+0x1fe>
 8007c7a:	4849      	ldr	r0, [pc, #292]	; (8007da0 <cppLoop+0x2f8>)
 8007c7c:	f00c fd05 	bl	801468a <__cxa_guard_acquire>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bf14      	ite	ne
 8007c86:	2301      	movne	r3, #1
 8007c88:	2300      	moveq	r3, #0
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <cppLoop+0x1fe>
 8007c90:	4837      	ldr	r0, [pc, #220]	; (8007d70 <cppLoop+0x2c8>)
 8007c92:	f7fb fff6 	bl	8003c82 <_ZN9LineTrace17getTargetVelocityEv>
 8007c96:	eef0 7a40 	vmov.f32	s15, s0
 8007c9a:	4b42      	ldr	r3, [pc, #264]	; (8007da4 <cppLoop+0x2fc>)
 8007c9c:	edc3 7a00 	vstr	s15, [r3]
 8007ca0:	483f      	ldr	r0, [pc, #252]	; (8007da0 <cppLoop+0x2f8>)
 8007ca2:	f00c fcfe 	bl	80146a2 <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007ca6:	4b40      	ldr	r3, [pc, #256]	; (8007da8 <cppLoop+0x300>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	f3bf 8f5b 	dmb	ish
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf0c      	ite	eq
 8007cb8:	2301      	moveq	r3, #1
 8007cba:	2300      	movne	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d015      	beq.n	8007cee <cppLoop+0x246>
 8007cc2:	4839      	ldr	r0, [pc, #228]	; (8007da8 <cppLoop+0x300>)
 8007cc4:	f00c fce1 	bl	801468a <__cxa_guard_acquire>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	bf14      	ite	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	2300      	moveq	r3, #0
 8007cd2:	b2db      	uxtb	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <cppLoop+0x246>
 8007cd8:	4825      	ldr	r0, [pc, #148]	; (8007d70 <cppLoop+0x2c8>)
 8007cda:	f7fb ffe2 	bl	8003ca2 <_ZN9LineTrace14getMaxVelocityEv>
 8007cde:	eef0 7a40 	vmov.f32	s15, s0
 8007ce2:	4b32      	ldr	r3, [pc, #200]	; (8007dac <cppLoop+0x304>)
 8007ce4:	edc3 7a00 	vstr	s15, [r3]
 8007ce8:	482f      	ldr	r0, [pc, #188]	; (8007da8 <cppLoop+0x300>)
 8007cea:	f00c fcda 	bl	80146a2 <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007cee:	4b30      	ldr	r3, [pc, #192]	; (8007db0 <cppLoop+0x308>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f3bf 8f5b 	dmb	ish
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0301 	and.w	r3, r3, #1
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bf0c      	ite	eq
 8007d00:	2301      	moveq	r3, #1
 8007d02:	2300      	movne	r3, #0
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d015      	beq.n	8007d36 <cppLoop+0x28e>
 8007d0a:	4829      	ldr	r0, [pc, #164]	; (8007db0 <cppLoop+0x308>)
 8007d0c:	f00c fcbd 	bl	801468a <__cxa_guard_acquire>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	bf14      	ite	ne
 8007d16:	2301      	movne	r3, #1
 8007d18:	2300      	moveq	r3, #0
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <cppLoop+0x28e>
 8007d20:	4813      	ldr	r0, [pc, #76]	; (8007d70 <cppLoop+0x2c8>)
 8007d22:	f7fb ffce 	bl	8003cc2 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007d26:	eef0 7a40 	vmov.f32	s15, s0
 8007d2a:	4b22      	ldr	r3, [pc, #136]	; (8007db4 <cppLoop+0x30c>)
 8007d2c:	edc3 7a00 	vstr	s15, [r3]
 8007d30:	481f      	ldr	r0, [pc, #124]	; (8007db0 <cppLoop+0x308>)
 8007d32:	f00c fcb6 	bl	80146a2 <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007d36:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <cppLoop+0x310>)
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f3bf 8f5b 	dmb	ish
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0301 	and.w	r3, r3, #1
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bf0c      	ite	eq
 8007d48:	2301      	moveq	r3, #1
 8007d4a:	2300      	movne	r3, #0
 8007d4c:	b2db      	uxtb	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d03f      	beq.n	8007dd2 <cppLoop+0x32a>
 8007d52:	4819      	ldr	r0, [pc, #100]	; (8007db8 <cppLoop+0x310>)
 8007d54:	f00c fc99 	bl	801468a <__cxa_guard_acquire>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	bf14      	ite	ne
 8007d5e:	2301      	movne	r3, #1
 8007d60:	2300      	moveq	r3, #0
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d034      	beq.n	8007dd2 <cppLoop+0x32a>
 8007d68:	e028      	b.n	8007dbc <cppLoop+0x314>
 8007d6a:	bf00      	nop
 8007d6c:	20042248 	.word	0x20042248
 8007d70:	2001db5c 	.word	0x2001db5c
 8007d74:	20042244 	.word	0x20042244
 8007d78:	20042250 	.word	0x20042250
 8007d7c:	2004224c 	.word	0x2004224c
 8007d80:	20042258 	.word	0x20042258
 8007d84:	20042254 	.word	0x20042254
 8007d88:	20042260 	.word	0x20042260
 8007d8c:	2004225c 	.word	0x2004225c
 8007d90:	20042268 	.word	0x20042268
 8007d94:	20042264 	.word	0x20042264
 8007d98:	20042270 	.word	0x20042270
 8007d9c:	2004226c 	.word	0x2004226c
 8007da0:	20042278 	.word	0x20042278
 8007da4:	20042274 	.word	0x20042274
 8007da8:	20042280 	.word	0x20042280
 8007dac:	2004227c 	.word	0x2004227c
 8007db0:	20042288 	.word	0x20042288
 8007db4:	20042284 	.word	0x20042284
 8007db8:	20042290 	.word	0x20042290
 8007dbc:	48b6      	ldr	r0, [pc, #728]	; (8008098 <cppLoop+0x5f0>)
 8007dbe:	f7fb ff90 	bl	8003ce2 <_ZN9LineTrace14getMinVelocityEv>
 8007dc2:	eef0 7a40 	vmov.f32	s15, s0
 8007dc6:	4bb5      	ldr	r3, [pc, #724]	; (800809c <cppLoop+0x5f4>)
 8007dc8:	edc3 7a00 	vstr	s15, [r3]
 8007dcc:	48b4      	ldr	r0, [pc, #720]	; (80080a0 <cppLoop+0x5f8>)
 8007dce:	f00c fc68 	bl	80146a2 <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007dd2:	4bb4      	ldr	r3, [pc, #720]	; (80080a4 <cppLoop+0x5fc>)
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	f3bf 8f5b 	dmb	ish
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	bf0c      	ite	eq
 8007de4:	2301      	moveq	r3, #1
 8007de6:	2300      	movne	r3, #0
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d015      	beq.n	8007e1a <cppLoop+0x372>
 8007dee:	48ad      	ldr	r0, [pc, #692]	; (80080a4 <cppLoop+0x5fc>)
 8007df0:	f00c fc4b 	bl	801468a <__cxa_guard_acquire>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	bf14      	ite	ne
 8007dfa:	2301      	movne	r3, #1
 8007dfc:	2300      	moveq	r3, #0
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <cppLoop+0x372>
 8007e04:	48a4      	ldr	r0, [pc, #656]	; (8008098 <cppLoop+0x5f0>)
 8007e06:	f7fb ff7c 	bl	8003d02 <_ZN9LineTrace15getMinVelocity2Ev>
 8007e0a:	eef0 7a40 	vmov.f32	s15, s0
 8007e0e:	4ba6      	ldr	r3, [pc, #664]	; (80080a8 <cppLoop+0x600>)
 8007e10:	edc3 7a00 	vstr	s15, [r3]
 8007e14:	48a3      	ldr	r0, [pc, #652]	; (80080a4 <cppLoop+0x5fc>)
 8007e16:	f00c fc44 	bl	80146a2 <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007e1a:	4ba4      	ldr	r3, [pc, #656]	; (80080ac <cppLoop+0x604>)
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	f3bf 8f5b 	dmb	ish
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	bf0c      	ite	eq
 8007e2c:	2301      	moveq	r3, #1
 8007e2e:	2300      	movne	r3, #0
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d015      	beq.n	8007e62 <cppLoop+0x3ba>
 8007e36:	489d      	ldr	r0, [pc, #628]	; (80080ac <cppLoop+0x604>)
 8007e38:	f00c fc27 	bl	801468a <__cxa_guard_acquire>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2301      	movne	r3, #1
 8007e44:	2300      	moveq	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <cppLoop+0x3ba>
 8007e4c:	4892      	ldr	r0, [pc, #584]	; (8008098 <cppLoop+0x5f0>)
 8007e4e:	f7fb ff9c 	bl	8003d8a <_ZN9LineTrace9getMaxAccEv>
 8007e52:	eef0 7a40 	vmov.f32	s15, s0
 8007e56:	4b96      	ldr	r3, [pc, #600]	; (80080b0 <cppLoop+0x608>)
 8007e58:	edc3 7a00 	vstr	s15, [r3]
 8007e5c:	4893      	ldr	r0, [pc, #588]	; (80080ac <cppLoop+0x604>)
 8007e5e:	f00c fc20 	bl	80146a2 <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007e62:	4b94      	ldr	r3, [pc, #592]	; (80080b4 <cppLoop+0x60c>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	f3bf 8f5b 	dmb	ish
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	f003 0301 	and.w	r3, r3, #1
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d015      	beq.n	8007eaa <cppLoop+0x402>
 8007e7e:	488d      	ldr	r0, [pc, #564]	; (80080b4 <cppLoop+0x60c>)
 8007e80:	f00c fc03 	bl	801468a <__cxa_guard_acquire>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bf14      	ite	ne
 8007e8a:	2301      	movne	r3, #1
 8007e8c:	2300      	moveq	r3, #0
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00a      	beq.n	8007eaa <cppLoop+0x402>
 8007e94:	4880      	ldr	r0, [pc, #512]	; (8008098 <cppLoop+0x5f0>)
 8007e96:	f7fb ffae 	bl	8003df6 <_ZN9LineTrace9getMaxDecEv>
 8007e9a:	eef0 7a40 	vmov.f32	s15, s0
 8007e9e:	4b86      	ldr	r3, [pc, #536]	; (80080b8 <cppLoop+0x610>)
 8007ea0:	edc3 7a00 	vstr	s15, [r3]
 8007ea4:	4883      	ldr	r0, [pc, #524]	; (80080b4 <cppLoop+0x60c>)
 8007ea6:	f00c fbfc 	bl	80146a2 <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007eaa:	4b84      	ldr	r3, [pc, #528]	; (80080bc <cppLoop+0x614>)
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	f3bf 8f5b 	dmb	ish
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d015      	beq.n	8007ef2 <cppLoop+0x44a>
 8007ec6:	487d      	ldr	r0, [pc, #500]	; (80080bc <cppLoop+0x614>)
 8007ec8:	f00c fbdf 	bl	801468a <__cxa_guard_acquire>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bf14      	ite	ne
 8007ed2:	2301      	movne	r3, #1
 8007ed4:	2300      	moveq	r3, #0
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00a      	beq.n	8007ef2 <cppLoop+0x44a>
 8007edc:	486e      	ldr	r0, [pc, #440]	; (8008098 <cppLoop+0x5f0>)
 8007ede:	f7fb ff78 	bl	8003dd2 <_ZN9LineTrace10getMaxAcc2Ev>
 8007ee2:	eef0 7a40 	vmov.f32	s15, s0
 8007ee6:	4b76      	ldr	r3, [pc, #472]	; (80080c0 <cppLoop+0x618>)
 8007ee8:	edc3 7a00 	vstr	s15, [r3]
 8007eec:	4873      	ldr	r0, [pc, #460]	; (80080bc <cppLoop+0x614>)
 8007eee:	f00c fbd8 	bl	80146a2 <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007ef2:	4b74      	ldr	r3, [pc, #464]	; (80080c4 <cppLoop+0x61c>)
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	f3bf 8f5b 	dmb	ish
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 0301 	and.w	r3, r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	bf0c      	ite	eq
 8007f04:	2301      	moveq	r3, #1
 8007f06:	2300      	movne	r3, #0
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d015      	beq.n	8007f3a <cppLoop+0x492>
 8007f0e:	486d      	ldr	r0, [pc, #436]	; (80080c4 <cppLoop+0x61c>)
 8007f10:	f00c fbbb 	bl	801468a <__cxa_guard_acquire>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	bf14      	ite	ne
 8007f1a:	2301      	movne	r3, #1
 8007f1c:	2300      	moveq	r3, #0
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <cppLoop+0x492>
 8007f24:	485c      	ldr	r0, [pc, #368]	; (8008098 <cppLoop+0x5f0>)
 8007f26:	f7fb ff42 	bl	8003dae <_ZN9LineTrace10getMaxDec2Ev>
 8007f2a:	eef0 7a40 	vmov.f32	s15, s0
 8007f2e:	4b66      	ldr	r3, [pc, #408]	; (80080c8 <cppLoop+0x620>)
 8007f30:	edc3 7a00 	vstr	s15, [r3]
 8007f34:	4863      	ldr	r0, [pc, #396]	; (80080c4 <cppLoop+0x61c>)
 8007f36:	f00c fbb4 	bl	80146a2 <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007f3a:	4864      	ldr	r0, [pc, #400]	; (80080cc <cppLoop+0x624>)
 8007f3c:	f7fd f9ba 	bl	80052b4 <_ZN12RotarySwitch8getValueEv>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b0f      	cmp	r3, #15
 8007f44:	f201 8572 	bhi.w	8009a2c <cppLoop+0x1f84>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <cppLoop+0x4a8>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007f91 	.word	0x08007f91
 8007f54:	08008315 	.word	0x08008315
 8007f58:	08008431 	.word	0x08008431
 8007f5c:	08008583 	.word	0x08008583
 8007f60:	0800867b 	.word	0x0800867b
 8007f64:	08008911 	.word	0x08008911
 8007f68:	08008a49 	.word	0x08008a49
 8007f6c:	08008ccd 	.word	0x08008ccd
 8007f70:	08008f17 	.word	0x08008f17
 8007f74:	080091a7 	.word	0x080091a7
 8007f78:	08009263 	.word	0x08009263
 8007f7c:	08009359 	.word	0x08009359
 8007f80:	080093df 	.word	0x080093df
 8007f84:	080094a5 	.word	0x080094a5
 8007f88:	08009589 	.word	0x08009589
 8007f8c:	080096c1 	.word	0x080096c1
	case 0:
		led.fullColor('W');
 8007f90:	2157      	movs	r1, #87	; 0x57
 8007f92:	484f      	ldr	r0, [pc, #316]	; (80080d0 <cppLoop+0x628>)
 8007f94:	f7fa f912 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f98:	f7f9 f882 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f7f9 f88e 	bl	80010c0 <lcd_locate>
		lcd_printf("Slow%4.2lf", abs(line_trace.getKpSlow()*1000));
 8007fa4:	483c      	ldr	r0, [pc, #240]	; (8008098 <cppLoop+0x5f0>)
 8007fa6:	f7fb fde0 	bl	8003b6a <_ZN9LineTrace9getKpSlowEv>
 8007faa:	eeb0 7a40 	vmov.f32	s14, s0
 8007fae:	eddf 7a49 	vldr	s15, [pc, #292]	; 80080d4 <cppLoop+0x62c>
 8007fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8007fba:	f7fa fd2b 	bl	8002a14 <_ZSt3absf>
 8007fbe:	ee10 3a10 	vmov	r3, s0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7f8 fad8 	bl	8000578 <__aeabi_f2d>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	460c      	mov	r4, r1
 8007fcc:	461a      	mov	r2, r3
 8007fce:	4623      	mov	r3, r4
 8007fd0:	4841      	ldr	r0, [pc, #260]	; (80080d8 <cppLoop+0x630>)
 8007fd2:	f7f9 f89f 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fd6:	2101      	movs	r1, #1
 8007fd8:	2000      	movs	r0, #0
 8007fda:	f7f9 f871 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKiSlow()*100), abs(line_trace.getKdSlow()*10000));
 8007fde:	482e      	ldr	r0, [pc, #184]	; (8008098 <cppLoop+0x5f0>)
 8007fe0:	f7fb fdd2 	bl	8003b88 <_ZN9LineTrace9getKiSlowEv>
 8007fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8007fe8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 80080dc <cppLoop+0x634>
 8007fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8007ff4:	f7fa fd0e 	bl	8002a14 <_ZSt3absf>
 8007ff8:	ee10 3a10 	vmov	r3, s0
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f7f8 fabb 	bl	8000578 <__aeabi_f2d>
 8008002:	4605      	mov	r5, r0
 8008004:	460e      	mov	r6, r1
 8008006:	4824      	ldr	r0, [pc, #144]	; (8008098 <cppLoop+0x5f0>)
 8008008:	f7fb fdcd 	bl	8003ba6 <_ZN9LineTrace9getKdSlowEv>
 800800c:	eeb0 7a40 	vmov.f32	s14, s0
 8008010:	eddf 7a33 	vldr	s15, [pc, #204]	; 80080e0 <cppLoop+0x638>
 8008014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008018:	eeb0 0a67 	vmov.f32	s0, s15
 800801c:	f7fa fcfa 	bl	8002a14 <_ZSt3absf>
 8008020:	ee10 3a10 	vmov	r3, s0
 8008024:	4618      	mov	r0, r3
 8008026:	f7f8 faa7 	bl	8000578 <__aeabi_f2d>
 800802a:	4603      	mov	r3, r0
 800802c:	460c      	mov	r4, r1
 800802e:	e9cd 3400 	strd	r3, r4, [sp]
 8008032:	462a      	mov	r2, r5
 8008034:	4633      	mov	r3, r6
 8008036:	482b      	ldr	r0, [pc, #172]	; (80080e4 <cppLoop+0x63c>)
 8008038:	f7f9 f86c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800803c:	482a      	ldr	r0, [pc, #168]	; (80080e8 <cppLoop+0x640>)
 800803e:	f7fa f859 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008042:	4603      	mov	r3, r0
 8008044:	2b08      	cmp	r3, #8
 8008046:	bf0c      	ite	eq
 8008048:	2301      	moveq	r3, #1
 800804a:	2300      	movne	r3, #0
 800804c:	b2db      	uxtb	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d04e      	beq.n	80080f0 <cppLoop+0x648>
			led.LR(-1, 1);
 8008052:	2201      	movs	r2, #1
 8008054:	f04f 31ff 	mov.w	r1, #4294967295
 8008058:	481d      	ldr	r0, [pc, #116]	; (80080d0 <cppLoop+0x628>)
 800805a:	f7fa f96b 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800805e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008062:	f001 fe2d 	bl	8009cc0 <HAL_Delay>

			selector++;
 8008066:	4b21      	ldr	r3, [pc, #132]	; (80080ec <cppLoop+0x644>)
 8008068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800806c:	b29b      	uxth	r3, r3
 800806e:	3301      	adds	r3, #1
 8008070:	b29b      	uxth	r3, r3
 8008072:	b21a      	sxth	r2, r3
 8008074:	4b1d      	ldr	r3, [pc, #116]	; (80080ec <cppLoop+0x644>)
 8008076:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8008078:	4b1c      	ldr	r3, [pc, #112]	; (80080ec <cppLoop+0x644>)
 800807a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800807e:	2b02      	cmp	r3, #2
 8008080:	dd02      	ble.n	8008088 <cppLoop+0x5e0>
 8008082:	4b1a      	ldr	r3, [pc, #104]	; (80080ec <cppLoop+0x644>)
 8008084:	2200      	movs	r2, #0
 8008086:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008088:	2200      	movs	r2, #0
 800808a:	f04f 31ff 	mov.w	r1, #4294967295
 800808e:	4810      	ldr	r0, [pc, #64]	; (80080d0 <cppLoop+0x628>)
 8008090:	f7fa f950 	bl	8002334 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);

			led.LR(-1, 0);
		}
		break;
 8008094:	f001 bccc 	b.w	8009a30 <cppLoop+0x1f88>
 8008098:	2001db5c 	.word	0x2001db5c
 800809c:	2004228c 	.word	0x2004228c
 80080a0:	20042290 	.word	0x20042290
 80080a4:	20042298 	.word	0x20042298
 80080a8:	20042294 	.word	0x20042294
 80080ac:	200422a0 	.word	0x200422a0
 80080b0:	2004229c 	.word	0x2004229c
 80080b4:	200422a8 	.word	0x200422a8
 80080b8:	200422a4 	.word	0x200422a4
 80080bc:	200422b0 	.word	0x200422b0
 80080c0:	200422ac 	.word	0x200422ac
 80080c4:	200422b8 	.word	0x200422b8
 80080c8:	200422b4 	.word	0x200422b4
 80080cc:	200005c4 	.word	0x200005c4
 80080d0:	200005cc 	.word	0x200005cc
 80080d4:	447a0000 	.word	0x447a0000
 80080d8:	08019d98 	.word	0x08019d98
 80080dc:	42c80000 	.word	0x42c80000
 80080e0:	461c4000 	.word	0x461c4000
 80080e4:	08019da4 	.word	0x08019da4
 80080e8:	200005c0 	.word	0x200005c0
 80080ec:	2004223a 	.word	0x2004223a
		else if(joy_stick.getValue() == JOY_R){
 80080f0:	48bd      	ldr	r0, [pc, #756]	; (80083e8 <cppLoop+0x940>)
 80080f2:	f7f9 ffff 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	bf0c      	ite	eq
 80080fc:	2301      	moveq	r3, #1
 80080fe:	2300      	movne	r3, #0
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b00      	cmp	r3, #0
 8008104:	d059      	beq.n	80081ba <cppLoop+0x712>
			led.LR(-1, 1);
 8008106:	2201      	movs	r2, #1
 8008108:	f04f 31ff 	mov.w	r1, #4294967295
 800810c:	48b7      	ldr	r0, [pc, #732]	; (80083ec <cppLoop+0x944>)
 800810e:	f7fa f911 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008112:	2064      	movs	r0, #100	; 0x64
 8008114:	f001 fdd4 	bl	8009cc0 <HAL_Delay>
			if(selector == 0){
 8008118:	4bb5      	ldr	r3, [pc, #724]	; (80083f0 <cppLoop+0x948>)
 800811a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d113      	bne.n	800814a <cppLoop+0x6a2>
				adj_kp_slow = adj_kp_slow + 0.00001;
 8008122:	4bb4      	ldr	r3, [pc, #720]	; (80083f4 <cppLoop+0x94c>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4618      	mov	r0, r3
 8008128:	f7f8 fa26 	bl	8000578 <__aeabi_f2d>
 800812c:	a3a8      	add	r3, pc, #672	; (adr r3, 80083d0 <cppLoop+0x928>)
 800812e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008132:	f7f8 f8c3 	bl	80002bc <__adddf3>
 8008136:	4603      	mov	r3, r0
 8008138:	460c      	mov	r4, r1
 800813a:	4618      	mov	r0, r3
 800813c:	4621      	mov	r1, r4
 800813e:	f7f8 fd6b 	bl	8000c18 <__aeabi_d2f>
 8008142:	4602      	mov	r2, r0
 8008144:	4bab      	ldr	r3, [pc, #684]	; (80083f4 <cppLoop+0x94c>)
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	e02b      	b.n	80081a2 <cppLoop+0x6fa>
			else if(selector == 1){
 800814a:	4ba9      	ldr	r3, [pc, #676]	; (80083f0 <cppLoop+0x948>)
 800814c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008150:	2b01      	cmp	r3, #1
 8008152:	d113      	bne.n	800817c <cppLoop+0x6d4>
				adj_ki_slow = adj_ki_slow + 0.0001;
 8008154:	4ba8      	ldr	r3, [pc, #672]	; (80083f8 <cppLoop+0x950>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4618      	mov	r0, r3
 800815a:	f7f8 fa0d 	bl	8000578 <__aeabi_f2d>
 800815e:	a39e      	add	r3, pc, #632	; (adr r3, 80083d8 <cppLoop+0x930>)
 8008160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008164:	f7f8 f8aa 	bl	80002bc <__adddf3>
 8008168:	4603      	mov	r3, r0
 800816a:	460c      	mov	r4, r1
 800816c:	4618      	mov	r0, r3
 800816e:	4621      	mov	r1, r4
 8008170:	f7f8 fd52 	bl	8000c18 <__aeabi_d2f>
 8008174:	4602      	mov	r2, r0
 8008176:	4ba0      	ldr	r3, [pc, #640]	; (80083f8 <cppLoop+0x950>)
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	e012      	b.n	80081a2 <cppLoop+0x6fa>
				adj_kd_slow = adj_kd_slow + 0.000001;
 800817c:	4b9f      	ldr	r3, [pc, #636]	; (80083fc <cppLoop+0x954>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4618      	mov	r0, r3
 8008182:	f7f8 f9f9 	bl	8000578 <__aeabi_f2d>
 8008186:	a396      	add	r3, pc, #600	; (adr r3, 80083e0 <cppLoop+0x938>)
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f7f8 f896 	bl	80002bc <__adddf3>
 8008190:	4603      	mov	r3, r0
 8008192:	460c      	mov	r4, r1
 8008194:	4618      	mov	r0, r3
 8008196:	4621      	mov	r1, r4
 8008198:	f7f8 fd3e 	bl	8000c18 <__aeabi_d2f>
 800819c:	4602      	mov	r2, r0
 800819e:	4b97      	ldr	r3, [pc, #604]	; (80083fc <cppLoop+0x954>)
 80081a0:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 80081a2:	2152      	movs	r1, #82	; 0x52
 80081a4:	4891      	ldr	r0, [pc, #580]	; (80083ec <cppLoop+0x944>)
 80081a6:	f7fa f809 	bl	80021bc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 80081aa:	2200      	movs	r2, #0
 80081ac:	f04f 31ff 	mov.w	r1, #4294967295
 80081b0:	488e      	ldr	r0, [pc, #568]	; (80083ec <cppLoop+0x944>)
 80081b2:	f7fa f8bf 	bl	8002334 <_ZN3LED2LREaa>
		break;
 80081b6:	f001 bc3b 	b.w	8009a30 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_L){
 80081ba:	488b      	ldr	r0, [pc, #556]	; (80083e8 <cppLoop+0x940>)
 80081bc:	f7f9 ff9a 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	bf0c      	ite	eq
 80081c6:	2301      	moveq	r3, #1
 80081c8:	2300      	movne	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d059      	beq.n	8008284 <cppLoop+0x7dc>
			led.LR(-1, 1);
 80081d0:	2201      	movs	r2, #1
 80081d2:	f04f 31ff 	mov.w	r1, #4294967295
 80081d6:	4885      	ldr	r0, [pc, #532]	; (80083ec <cppLoop+0x944>)
 80081d8:	f7fa f8ac 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80081dc:	2064      	movs	r0, #100	; 0x64
 80081de:	f001 fd6f 	bl	8009cc0 <HAL_Delay>
			if(selector == 0){
 80081e2:	4b83      	ldr	r3, [pc, #524]	; (80083f0 <cppLoop+0x948>)
 80081e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d113      	bne.n	8008214 <cppLoop+0x76c>
				adj_kp_slow = adj_kp_slow - 0.00001;
 80081ec:	4b81      	ldr	r3, [pc, #516]	; (80083f4 <cppLoop+0x94c>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7f8 f9c1 	bl	8000578 <__aeabi_f2d>
 80081f6:	a376      	add	r3, pc, #472	; (adr r3, 80083d0 <cppLoop+0x928>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f85c 	bl	80002b8 <__aeabi_dsub>
 8008200:	4603      	mov	r3, r0
 8008202:	460c      	mov	r4, r1
 8008204:	4618      	mov	r0, r3
 8008206:	4621      	mov	r1, r4
 8008208:	f7f8 fd06 	bl	8000c18 <__aeabi_d2f>
 800820c:	4602      	mov	r2, r0
 800820e:	4b79      	ldr	r3, [pc, #484]	; (80083f4 <cppLoop+0x94c>)
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e02b      	b.n	800826c <cppLoop+0x7c4>
			else if(selector == 1){
 8008214:	4b76      	ldr	r3, [pc, #472]	; (80083f0 <cppLoop+0x948>)
 8008216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800821a:	2b01      	cmp	r3, #1
 800821c:	d113      	bne.n	8008246 <cppLoop+0x79e>
				adj_ki_slow = adj_ki_slow - 0.0001;
 800821e:	4b76      	ldr	r3, [pc, #472]	; (80083f8 <cppLoop+0x950>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	4618      	mov	r0, r3
 8008224:	f7f8 f9a8 	bl	8000578 <__aeabi_f2d>
 8008228:	a36b      	add	r3, pc, #428	; (adr r3, 80083d8 <cppLoop+0x930>)
 800822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800822e:	f7f8 f843 	bl	80002b8 <__aeabi_dsub>
 8008232:	4603      	mov	r3, r0
 8008234:	460c      	mov	r4, r1
 8008236:	4618      	mov	r0, r3
 8008238:	4621      	mov	r1, r4
 800823a:	f7f8 fced 	bl	8000c18 <__aeabi_d2f>
 800823e:	4602      	mov	r2, r0
 8008240:	4b6d      	ldr	r3, [pc, #436]	; (80083f8 <cppLoop+0x950>)
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e012      	b.n	800826c <cppLoop+0x7c4>
				adj_kd_slow = adj_kd_slow - 0.000001;
 8008246:	4b6d      	ldr	r3, [pc, #436]	; (80083fc <cppLoop+0x954>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4618      	mov	r0, r3
 800824c:	f7f8 f994 	bl	8000578 <__aeabi_f2d>
 8008250:	a363      	add	r3, pc, #396	; (adr r3, 80083e0 <cppLoop+0x938>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f82f 	bl	80002b8 <__aeabi_dsub>
 800825a:	4603      	mov	r3, r0
 800825c:	460c      	mov	r4, r1
 800825e:	4618      	mov	r0, r3
 8008260:	4621      	mov	r1, r4
 8008262:	f7f8 fcd9 	bl	8000c18 <__aeabi_d2f>
 8008266:	4602      	mov	r2, r0
 8008268:	4b64      	ldr	r3, [pc, #400]	; (80083fc <cppLoop+0x954>)
 800826a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800826c:	2152      	movs	r1, #82	; 0x52
 800826e:	485f      	ldr	r0, [pc, #380]	; (80083ec <cppLoop+0x944>)
 8008270:	f7f9 ffa4 	bl	80021bc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8008274:	2200      	movs	r2, #0
 8008276:	f04f 31ff 	mov.w	r1, #4294967295
 800827a:	485c      	ldr	r0, [pc, #368]	; (80083ec <cppLoop+0x944>)
 800827c:	f7fa f85a 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008280:	f001 bbd6 	b.w	8009a30 <cppLoop+0x1f88>
		else if(joy_stick.getValue() == JOY_C){
 8008284:	4858      	ldr	r0, [pc, #352]	; (80083e8 <cppLoop+0x940>)
 8008286:	f7f9 ff35 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 800828a:	4603      	mov	r3, r0
 800828c:	2b02      	cmp	r3, #2
 800828e:	bf0c      	ite	eq
 8008290:	2301      	moveq	r3, #1
 8008292:	2300      	movne	r3, #0
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	f001 83ca 	beq.w	8009a30 <cppLoop+0x1f88>
			led.LR(-1, 1);
 800829c:	2201      	movs	r2, #1
 800829e:	f04f 31ff 	mov.w	r1, #4294967295
 80082a2:	4852      	ldr	r0, [pc, #328]	; (80083ec <cppLoop+0x944>)
 80082a4:	f7fa f846 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082a8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082ac:	f001 fd08 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP_SLOW.TXT", 1, &adj_kp_slow, OVER_WRITE);
 80082b0:	2300      	movs	r3, #0
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	4b4f      	ldr	r3, [pc, #316]	; (80083f4 <cppLoop+0x94c>)
 80082b6:	2201      	movs	r2, #1
 80082b8:	4951      	ldr	r1, [pc, #324]	; (8008400 <cppLoop+0x958>)
 80082ba:	4852      	ldr	r0, [pc, #328]	; (8008404 <cppLoop+0x95c>)
 80082bc:	f7f9 face 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI_SLOW.TXT", 1, &adj_ki_slow, OVER_WRITE);
 80082c0:	2300      	movs	r3, #0
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	4b4c      	ldr	r3, [pc, #304]	; (80083f8 <cppLoop+0x950>)
 80082c6:	2201      	movs	r2, #1
 80082c8:	494f      	ldr	r1, [pc, #316]	; (8008408 <cppLoop+0x960>)
 80082ca:	484e      	ldr	r0, [pc, #312]	; (8008404 <cppLoop+0x95c>)
 80082cc:	f7f9 fac6 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD_SLOW.TXT", 1, &adj_kd_slow, OVER_WRITE);
 80082d0:	2300      	movs	r3, #0
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	4b49      	ldr	r3, [pc, #292]	; (80083fc <cppLoop+0x954>)
 80082d6:	2201      	movs	r2, #1
 80082d8:	494c      	ldr	r1, [pc, #304]	; (800840c <cppLoop+0x964>)
 80082da:	484a      	ldr	r0, [pc, #296]	; (8008404 <cppLoop+0x95c>)
 80082dc:	f7f9 fabe 	bl	800185c <sd_write_array_float>
			line_trace.setGainSlow(adj_kp_slow, adj_ki_slow, adj_kd_slow);
 80082e0:	4b44      	ldr	r3, [pc, #272]	; (80083f4 <cppLoop+0x94c>)
 80082e2:	edd3 7a00 	vldr	s15, [r3]
 80082e6:	4b44      	ldr	r3, [pc, #272]	; (80083f8 <cppLoop+0x950>)
 80082e8:	ed93 7a00 	vldr	s14, [r3]
 80082ec:	4b43      	ldr	r3, [pc, #268]	; (80083fc <cppLoop+0x954>)
 80082ee:	edd3 6a00 	vldr	s13, [r3]
 80082f2:	eeb0 1a66 	vmov.f32	s2, s13
 80082f6:	eef0 0a47 	vmov.f32	s1, s14
 80082fa:	eeb0 0a67 	vmov.f32	s0, s15
 80082fe:	4844      	ldr	r0, [pc, #272]	; (8008410 <cppLoop+0x968>)
 8008300:	f7fb fc1a 	bl	8003b38 <_ZN9LineTrace11setGainSlowEfff>
			led.LR(-1, 0);
 8008304:	2200      	movs	r2, #0
 8008306:	f04f 31ff 	mov.w	r1, #4294967295
 800830a:	4838      	ldr	r0, [pc, #224]	; (80083ec <cppLoop+0x944>)
 800830c:	f7fa f812 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008310:	f001 bb8e 	b.w	8009a30 <cppLoop+0x1f88>

	case 1:
		led.fullColor('C');
 8008314:	2143      	movs	r1, #67	; 0x43
 8008316:	4835      	ldr	r0, [pc, #212]	; (80083ec <cppLoop+0x944>)
 8008318:	f7f9 ff50 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 800831c:	f7f8 fec0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008320:	2100      	movs	r1, #0
 8008322:	2000      	movs	r0, #0
 8008324:	f7f8 fecc 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008328:	483a      	ldr	r0, [pc, #232]	; (8008414 <cppLoop+0x96c>)
 800832a:	f7f8 fef3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800832e:	2101      	movs	r1, #1
 8008330:	2000      	movs	r0, #0
 8008332:	f7f8 fec5 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8008336:	4b38      	ldr	r3, [pc, #224]	; (8008418 <cppLoop+0x970>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f7f8 f91c 	bl	8000578 <__aeabi_f2d>
 8008340:	4603      	mov	r3, r0
 8008342:	460c      	mov	r4, r1
 8008344:	461a      	mov	r2, r3
 8008346:	4623      	mov	r3, r4
 8008348:	4834      	ldr	r0, [pc, #208]	; (800841c <cppLoop+0x974>)
 800834a:	f7f8 fee3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800834e:	4826      	ldr	r0, [pc, #152]	; (80083e8 <cppLoop+0x940>)
 8008350:	f7f9 fed0 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008354:	4603      	mov	r3, r0
 8008356:	2b02      	cmp	r3, #2
 8008358:	bf0c      	ite	eq
 800835a:	2301      	moveq	r3, #1
 800835c:	2300      	movne	r3, #0
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b00      	cmp	r3, #0
 8008362:	f001 8367 	beq.w	8009a34 <cppLoop+0x1f8c>
			HAL_Delay(500);
 8008366:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800836a:	f001 fca9 	bl	8009cc0 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 800836e:	4b2a      	ldr	r3, [pc, #168]	; (8008418 <cppLoop+0x970>)
 8008370:	edd3 7a00 	vldr	s15, [r3]
 8008374:	eeb0 0a67 	vmov.f32	s0, s15
 8008378:	4825      	ldr	r0, [pc, #148]	; (8008410 <cppLoop+0x968>)
 800837a:	f7fb fc32 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800837e:	f04f 32ff 	mov.w	r2, #4294967295
 8008382:	2101      	movs	r1, #1
 8008384:	4819      	ldr	r0, [pc, #100]	; (80083ec <cppLoop+0x944>)
 8008386:	f7f9 ffd5 	bl	8002334 <_ZN3LED2LREaa>
			//HAL_Delay(3000);
			//esc.on(BLCD_POWER, BLCD_POWER, BLDC_POWER, BLDC_POWER);
			//HAL_Delay(1000);

			// Record start
			HAL_Delay(1000);
 800838a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800838e:	f001 fc97 	bl	8009cc0 <HAL_Delay>
			logger.start();
 8008392:	4823      	ldr	r0, [pc, #140]	; (8008420 <cppLoop+0x978>)
 8008394:	f7fc fbcd 	bl	8004b32 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 8008398:	2100      	movs	r1, #0
 800839a:	481d      	ldr	r0, [pc, #116]	; (8008410 <cppLoop+0x968>)
 800839c:	f7fb fe4e 	bl	800403c <_ZN9LineTrace7setModeEs>
			line_trace.running();
 80083a0:	481b      	ldr	r0, [pc, #108]	; (8008410 <cppLoop+0x968>)
 80083a2:	f7fb fe89 	bl	80040b8 <_ZN9LineTrace7runningEv>

			// BLDC off
			//esc.off();

			// Record stop and save
			logger.stop();
 80083a6:	481e      	ldr	r0, [pc, #120]	; (8008420 <cppLoop+0x978>)
 80083a8:	f7fc fbd3 	bl	8004b52 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 80083ac:	4a1d      	ldr	r2, [pc, #116]	; (8008424 <cppLoop+0x97c>)
 80083ae:	491e      	ldr	r1, [pc, #120]	; (8008428 <cppLoop+0x980>)
 80083b0:	481b      	ldr	r0, [pc, #108]	; (8008420 <cppLoop+0x978>)
 80083b2:	f7fc fac9 	bl	8004948 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 80083b6:	4a1d      	ldr	r2, [pc, #116]	; (800842c <cppLoop+0x984>)
 80083b8:	491b      	ldr	r1, [pc, #108]	; (8008428 <cppLoop+0x980>)
 80083ba:	4819      	ldr	r0, [pc, #100]	; (8008420 <cppLoop+0x978>)
 80083bc:	f7fc fada 	bl	8004974 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	2100      	movs	r1, #0
 80083c6:	4809      	ldr	r0, [pc, #36]	; (80083ec <cppLoop+0x944>)
 80083c8:	f7f9 ffb4 	bl	8002334 <_ZN3LED2LREaa>
		}

		break;
 80083cc:	f001 bb32 	b.w	8009a34 <cppLoop+0x1f8c>
 80083d0:	88e368f1 	.word	0x88e368f1
 80083d4:	3ee4f8b5 	.word	0x3ee4f8b5
 80083d8:	eb1c432d 	.word	0xeb1c432d
 80083dc:	3f1a36e2 	.word	0x3f1a36e2
 80083e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80083e4:	3eb0c6f7 	.word	0x3eb0c6f7
 80083e8:	200005c0 	.word	0x200005c0
 80083ec:	200005cc 	.word	0x200005cc
 80083f0:	2004223a 	.word	0x2004223a
 80083f4:	2004225c 	.word	0x2004225c
 80083f8:	20042264 	.word	0x20042264
 80083fc:	2004226c 	.word	0x2004226c
 8008400:	08019db4 	.word	0x08019db4
 8008404:	08019dc0 	.word	0x08019dc0
 8008408:	08019dc8 	.word	0x08019dc8
 800840c:	08019dd4 	.word	0x08019dd4
 8008410:	2001db5c 	.word	0x2001db5c
 8008414:	08019de0 	.word	0x08019de0
 8008418:	20042274 	.word	0x20042274
 800841c:	08019dec 	.word	0x08019dec
 8008420:	200005f0 	.word	0x200005f0
 8008424:	08019df8 	.word	0x08019df8
 8008428:	08019e04 	.word	0x08019e04
 800842c:	08019e10 	.word	0x08019e10

	case 2:
		led.fullColor('B');
 8008430:	2142      	movs	r1, #66	; 0x42
 8008432:	48c1      	ldr	r0, [pc, #772]	; (8008738 <cppLoop+0xc90>)
 8008434:	f7f9 fec2 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008438:	f7f8 fe32 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800843c:	2100      	movs	r1, #0
 800843e:	2000      	movs	r0, #0
 8008440:	f7f8 fe3e 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8008444:	48bd      	ldr	r0, [pc, #756]	; (800873c <cppLoop+0xc94>)
 8008446:	f7f8 fe65 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800844a:	2101      	movs	r1, #1
 800844c:	2000      	movs	r0, #0
 800844e:	f7f8 fe37 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8008452:	4bbb      	ldr	r3, [pc, #748]	; (8008740 <cppLoop+0xc98>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4618      	mov	r0, r3
 8008458:	f7f8 f88e 	bl	8000578 <__aeabi_f2d>
 800845c:	4603      	mov	r3, r0
 800845e:	460c      	mov	r4, r1
 8008460:	461a      	mov	r2, r3
 8008462:	4623      	mov	r3, r4
 8008464:	48b7      	ldr	r0, [pc, #732]	; (8008744 <cppLoop+0xc9c>)
 8008466:	f7f8 fe55 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800846a:	48b7      	ldr	r0, [pc, #732]	; (8008748 <cppLoop+0xca0>)
 800846c:	f7f9 fe42 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008470:	4603      	mov	r3, r0
 8008472:	2b10      	cmp	r3, #16
 8008474:	bf0c      	ite	eq
 8008476:	2301      	moveq	r3, #1
 8008478:	2300      	movne	r3, #0
 800847a:	b2db      	uxtb	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d023      	beq.n	80084c8 <cppLoop+0xa20>
			led.LR(-1, 1);
 8008480:	2201      	movs	r2, #1
 8008482:	f04f 31ff 	mov.w	r1, #4294967295
 8008486:	48ac      	ldr	r0, [pc, #688]	; (8008738 <cppLoop+0xc90>)
 8008488:	f7f9 ff54 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800848c:	2064      	movs	r0, #100	; 0x64
 800848e:	f001 fc17 	bl	8009cc0 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008492:	4bab      	ldr	r3, [pc, #684]	; (8008740 <cppLoop+0xc98>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f7f8 f86e 	bl	8000578 <__aeabi_f2d>
 800849c:	a3a4      	add	r3, pc, #656	; (adr r3, 8008730 <cppLoop+0xc88>)
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 ff0b 	bl	80002bc <__adddf3>
 80084a6:	4603      	mov	r3, r0
 80084a8:	460c      	mov	r4, r1
 80084aa:	4618      	mov	r0, r3
 80084ac:	4621      	mov	r1, r4
 80084ae:	f7f8 fbb3 	bl	8000c18 <__aeabi_d2f>
 80084b2:	4602      	mov	r2, r0
 80084b4:	4ba2      	ldr	r3, [pc, #648]	; (8008740 <cppLoop+0xc98>)
 80084b6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80084b8:	2200      	movs	r2, #0
 80084ba:	f04f 31ff 	mov.w	r1, #4294967295
 80084be:	489e      	ldr	r0, [pc, #632]	; (8008738 <cppLoop+0xc90>)
 80084c0:	f7f9 ff38 	bl	8002334 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80084c4:	f001 bab8 	b.w	8009a38 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_L){
 80084c8:	489f      	ldr	r0, [pc, #636]	; (8008748 <cppLoop+0xca0>)
 80084ca:	f7f9 fe13 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	bf0c      	ite	eq
 80084d4:	2301      	moveq	r3, #1
 80084d6:	2300      	movne	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d023      	beq.n	8008526 <cppLoop+0xa7e>
			led.LR(-1, 1);
 80084de:	2201      	movs	r2, #1
 80084e0:	f04f 31ff 	mov.w	r1, #4294967295
 80084e4:	4894      	ldr	r0, [pc, #592]	; (8008738 <cppLoop+0xc90>)
 80084e6:	f7f9 ff25 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80084ea:	2064      	movs	r0, #100	; 0x64
 80084ec:	f001 fbe8 	bl	8009cc0 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80084f0:	4b93      	ldr	r3, [pc, #588]	; (8008740 <cppLoop+0xc98>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7f8 f83f 	bl	8000578 <__aeabi_f2d>
 80084fa:	a38d      	add	r3, pc, #564	; (adr r3, 8008730 <cppLoop+0xc88>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f7f7 feda 	bl	80002b8 <__aeabi_dsub>
 8008504:	4603      	mov	r3, r0
 8008506:	460c      	mov	r4, r1
 8008508:	4618      	mov	r0, r3
 800850a:	4621      	mov	r1, r4
 800850c:	f7f8 fb84 	bl	8000c18 <__aeabi_d2f>
 8008510:	4602      	mov	r2, r0
 8008512:	4b8b      	ldr	r3, [pc, #556]	; (8008740 <cppLoop+0xc98>)
 8008514:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008516:	2200      	movs	r2, #0
 8008518:	f04f 31ff 	mov.w	r1, #4294967295
 800851c:	4886      	ldr	r0, [pc, #536]	; (8008738 <cppLoop+0xc90>)
 800851e:	f7f9 ff09 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008522:	f001 ba89 	b.w	8009a38 <cppLoop+0x1f90>
		else if(joy_stick.getValue() == JOY_C){
 8008526:	4888      	ldr	r0, [pc, #544]	; (8008748 <cppLoop+0xca0>)
 8008528:	f7f9 fde4 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 800852c:	4603      	mov	r3, r0
 800852e:	2b02      	cmp	r3, #2
 8008530:	bf0c      	ite	eq
 8008532:	2301      	moveq	r3, #1
 8008534:	2300      	movne	r3, #0
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b00      	cmp	r3, #0
 800853a:	f001 827d 	beq.w	8009a38 <cppLoop+0x1f90>
			led.LR(-1, 1);
 800853e:	2201      	movs	r2, #1
 8008540:	f04f 31ff 	mov.w	r1, #4294967295
 8008544:	487c      	ldr	r0, [pc, #496]	; (8008738 <cppLoop+0xc90>)
 8008546:	f7f9 fef5 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800854a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800854e:	f001 fbb7 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8008552:	2300      	movs	r3, #0
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	4b7a      	ldr	r3, [pc, #488]	; (8008740 <cppLoop+0xc98>)
 8008558:	2201      	movs	r2, #1
 800855a:	497c      	ldr	r1, [pc, #496]	; (800874c <cppLoop+0xca4>)
 800855c:	487c      	ldr	r0, [pc, #496]	; (8008750 <cppLoop+0xca8>)
 800855e:	f7f9 f97d 	bl	800185c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8008562:	4b77      	ldr	r3, [pc, #476]	; (8008740 <cppLoop+0xc98>)
 8008564:	edd3 7a00 	vldr	s15, [r3]
 8008568:	eeb0 0a67 	vmov.f32	s0, s15
 800856c:	4879      	ldr	r0, [pc, #484]	; (8008754 <cppLoop+0xcac>)
 800856e:	f7fb fb38 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8008572:	2200      	movs	r2, #0
 8008574:	f04f 31ff 	mov.w	r1, #4294967295
 8008578:	486f      	ldr	r0, [pc, #444]	; (8008738 <cppLoop+0xc90>)
 800857a:	f7f9 fedb 	bl	8002334 <_ZN3LED2LREaa>
		break;
 800857e:	f001 ba5b 	b.w	8009a38 <cppLoop+0x1f90>

	case 3:
		led.fullColor('Y');
 8008582:	2159      	movs	r1, #89	; 0x59
 8008584:	486c      	ldr	r0, [pc, #432]	; (8008738 <cppLoop+0xc90>)
 8008586:	f7f9 fe19 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 800858a:	f7f8 fd89 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800858e:	2100      	movs	r1, #0
 8008590:	2000      	movs	r0, #0
 8008592:	f7f8 fd95 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008596:	4b70      	ldr	r3, [pc, #448]	; (8008758 <cppLoop+0xcb0>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7f7 ffec 	bl	8000578 <__aeabi_f2d>
 80085a0:	4603      	mov	r3, r0
 80085a2:	460c      	mov	r4, r1
 80085a4:	461a      	mov	r2, r3
 80085a6:	4623      	mov	r3, r4
 80085a8:	486c      	ldr	r0, [pc, #432]	; (800875c <cppLoop+0xcb4>)
 80085aa:	f7f8 fdb3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085ae:	2101      	movs	r1, #1
 80085b0:	2000      	movs	r0, #0
 80085b2:	f7f8 fd85 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 80085b6:	4b6a      	ldr	r3, [pc, #424]	; (8008760 <cppLoop+0xcb8>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7f7 ffdc 	bl	8000578 <__aeabi_f2d>
 80085c0:	4603      	mov	r3, r0
 80085c2:	460c      	mov	r4, r1
 80085c4:	461a      	mov	r2, r3
 80085c6:	4623      	mov	r3, r4
 80085c8:	4866      	ldr	r0, [pc, #408]	; (8008764 <cppLoop+0xcbc>)
 80085ca:	f7f8 fda3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80085ce:	485e      	ldr	r0, [pc, #376]	; (8008748 <cppLoop+0xca0>)
 80085d0:	f7f9 fd90 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	bf0c      	ite	eq
 80085da:	2301      	moveq	r3, #1
 80085dc:	2300      	movne	r3, #0
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f001 822b 	beq.w	8009a3c <cppLoop+0x1f94>
			HAL_Delay(500);
 80085e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085ea:	f001 fb69 	bl	8009cc0 <HAL_Delay>

			led.LR(1, -1);
 80085ee:	f04f 32ff 	mov.w	r2, #4294967295
 80085f2:	2101      	movs	r1, #1
 80085f4:	4850      	ldr	r0, [pc, #320]	; (8008738 <cppLoop+0xc90>)
 80085f6:	f7f9 fe9d 	bl	8002334 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80085fa:	2101      	movs	r1, #1
 80085fc:	4855      	ldr	r0, [pc, #340]	; (8008754 <cppLoop+0xcac>)
 80085fe:	f7fb fd1d 	bl	800403c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008602:	4b57      	ldr	r3, [pc, #348]	; (8008760 <cppLoop+0xcb8>)
 8008604:	edd3 7a00 	vldr	s15, [r3]
 8008608:	eeb0 0a67 	vmov.f32	s0, s15
 800860c:	4851      	ldr	r0, [pc, #324]	; (8008754 <cppLoop+0xcac>)
 800860e:	f7fb fae8 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008612:	4b51      	ldr	r3, [pc, #324]	; (8008758 <cppLoop+0xcb0>)
 8008614:	edd3 7a00 	vldr	s15, [r3]
 8008618:	eeb0 0a67 	vmov.f32	s0, s15
 800861c:	484d      	ldr	r0, [pc, #308]	; (8008754 <cppLoop+0xcac>)
 800861e:	f7fb faf0 	bl	8003c02 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008622:	4b4f      	ldr	r3, [pc, #316]	; (8008760 <cppLoop+0xcb8>)
 8008624:	edd3 7a00 	vldr	s15, [r3]
 8008628:	eeb0 0a67 	vmov.f32	s0, s15
 800862c:	4849      	ldr	r0, [pc, #292]	; (8008754 <cppLoop+0xcac>)
 800862e:	f7fb fb08 	bl	8003c42 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 8008632:	4848      	ldr	r0, [pc, #288]	; (8008754 <cppLoop+0xcac>)
 8008634:	f7fb fe2a 	bl	800428c <_ZN9LineTrace20createVelocityTabeleEv>

			HAL_Delay(3000);
 8008638:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800863c:	f001 fb40 	bl	8009cc0 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8008640:	eddf 1a49 	vldr	s3, [pc, #292]	; 8008768 <cppLoop+0xcc0>
 8008644:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8008768 <cppLoop+0xcc0>
 8008648:	eddf 0a47 	vldr	s1, [pc, #284]	; 8008768 <cppLoop+0xcc0>
 800864c:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8008768 <cppLoop+0xcc0>
 8008650:	4846      	ldr	r0, [pc, #280]	; (800876c <cppLoop+0xcc4>)
 8008652:	f7f8 fdfd 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8008656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800865a:	f001 fb31 	bl	8009cc0 <HAL_Delay>

			line_trace.running();
 800865e:	483d      	ldr	r0, [pc, #244]	; (8008754 <cppLoop+0xcac>)
 8008660:	f7fb fd2a 	bl	80040b8 <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 8008664:	4841      	ldr	r0, [pc, #260]	; (800876c <cppLoop+0xcc4>)
 8008666:	f7f8 fe8d 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800866a:	f04f 32ff 	mov.w	r2, #4294967295
 800866e:	2100      	movs	r1, #0
 8008670:	4831      	ldr	r0, [pc, #196]	; (8008738 <cppLoop+0xc90>)
 8008672:	f7f9 fe5f 	bl	8002334 <_ZN3LED2LREaa>
		}

		break;
 8008676:	f001 b9e1 	b.w	8009a3c <cppLoop+0x1f94>

	case 4:
		led.fullColor('G');
 800867a:	2147      	movs	r1, #71	; 0x47
 800867c:	482e      	ldr	r0, [pc, #184]	; (8008738 <cppLoop+0xc90>)
 800867e:	f7f9 fd9d 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008682:	f7f8 fd0d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008686:	2100      	movs	r1, #0
 8008688:	2000      	movs	r0, #0
 800868a:	f7f8 fd19 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800868e:	4831      	ldr	r0, [pc, #196]	; (8008754 <cppLoop+0xcac>)
 8008690:	f7fb fb07 	bl	8003ca2 <_ZN9LineTrace14getMaxVelocityEv>
 8008694:	ee10 3a10 	vmov	r3, s0
 8008698:	4618      	mov	r0, r3
 800869a:	f7f7 ff6d 	bl	8000578 <__aeabi_f2d>
 800869e:	4603      	mov	r3, r0
 80086a0:	460c      	mov	r4, r1
 80086a2:	461a      	mov	r2, r3
 80086a4:	4623      	mov	r3, r4
 80086a6:	482d      	ldr	r0, [pc, #180]	; (800875c <cppLoop+0xcb4>)
 80086a8:	f7f8 fd34 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80086ac:	2101      	movs	r1, #1
 80086ae:	2000      	movs	r0, #0
 80086b0:	f7f8 fd06 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80086b4:	4827      	ldr	r0, [pc, #156]	; (8008754 <cppLoop+0xcac>)
 80086b6:	f7fb fb14 	bl	8003ce2 <_ZN9LineTrace14getMinVelocityEv>
 80086ba:	ee10 3a10 	vmov	r3, s0
 80086be:	4618      	mov	r0, r3
 80086c0:	f7f7 ff5a 	bl	8000578 <__aeabi_f2d>
 80086c4:	4603      	mov	r3, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	461a      	mov	r2, r3
 80086ca:	4623      	mov	r3, r4
 80086cc:	481d      	ldr	r0, [pc, #116]	; (8008744 <cppLoop+0xc9c>)
 80086ce:	f7f8 fd21 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80086d2:	481d      	ldr	r0, [pc, #116]	; (8008748 <cppLoop+0xca0>)
 80086d4:	f7f9 fd0e 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b08      	cmp	r3, #8
 80086dc:	bf0c      	ite	eq
 80086de:	2301      	moveq	r3, #1
 80086e0:	2300      	movne	r3, #0
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d045      	beq.n	8008774 <cppLoop+0xccc>
			led.LR(-1, 1);
 80086e8:	2201      	movs	r2, #1
 80086ea:	f04f 31ff 	mov.w	r1, #4294967295
 80086ee:	4812      	ldr	r0, [pc, #72]	; (8008738 <cppLoop+0xc90>)
 80086f0:	f7f9 fe20 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80086f4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80086f8:	f001 fae2 	bl	8009cc0 <HAL_Delay>

			selector_vel++;
 80086fc:	4b1c      	ldr	r3, [pc, #112]	; (8008770 <cppLoop+0xcc8>)
 80086fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008702:	b29b      	uxth	r3, r3
 8008704:	3301      	adds	r3, #1
 8008706:	b29b      	uxth	r3, r3
 8008708:	b21a      	sxth	r2, r3
 800870a:	4b19      	ldr	r3, [pc, #100]	; (8008770 <cppLoop+0xcc8>)
 800870c:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 800870e:	4b18      	ldr	r3, [pc, #96]	; (8008770 <cppLoop+0xcc8>)
 8008710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008714:	2b01      	cmp	r3, #1
 8008716:	dd02      	ble.n	800871e <cppLoop+0xc76>
 8008718:	4b15      	ldr	r3, [pc, #84]	; (8008770 <cppLoop+0xcc8>)
 800871a:	2200      	movs	r2, #0
 800871c:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 800871e:	2200      	movs	r2, #0
 8008720:	f04f 31ff 	mov.w	r1, #4294967295
 8008724:	4804      	ldr	r0, [pc, #16]	; (8008738 <cppLoop+0xc90>)
 8008726:	f7f9 fe05 	bl	8002334 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800872a:	f001 b989 	b.w	8009a40 <cppLoop+0x1f98>
 800872e:	bf00      	nop
 8008730:	9999999a 	.word	0x9999999a
 8008734:	3fb99999 	.word	0x3fb99999
 8008738:	200005cc 	.word	0x200005cc
 800873c:	08019de0 	.word	0x08019de0
 8008740:	20042274 	.word	0x20042274
 8008744:	08019e1c 	.word	0x08019e1c
 8008748:	200005c0 	.word	0x200005c0
 800874c:	08019e28 	.word	0x08019e28
 8008750:	08019dc0 	.word	0x08019dc0
 8008754:	2001db5c 	.word	0x2001db5c
 8008758:	2004227c 	.word	0x2004227c
 800875c:	08019e34 	.word	0x08019e34
 8008760:	2004228c 	.word	0x2004228c
 8008764:	08019dec 	.word	0x08019dec
 8008768:	3e99999a 	.word	0x3e99999a
 800876c:	2001db58 	.word	0x2001db58
 8008770:	20042240 	.word	0x20042240
		else if(joy_stick.getValue() == JOY_R){
 8008774:	48a4      	ldr	r0, [pc, #656]	; (8008a08 <cppLoop+0xf60>)
 8008776:	f7f9 fcbd 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 800877a:	4603      	mov	r3, r0
 800877c:	2b10      	cmp	r3, #16
 800877e:	bf0c      	ite	eq
 8008780:	2301      	moveq	r3, #1
 8008782:	2300      	movne	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	2b00      	cmp	r3, #0
 8008788:	d03c      	beq.n	8008804 <cppLoop+0xd5c>
			led.LR(-1, 1);
 800878a:	2201      	movs	r2, #1
 800878c:	f04f 31ff 	mov.w	r1, #4294967295
 8008790:	489e      	ldr	r0, [pc, #632]	; (8008a0c <cppLoop+0xf64>)
 8008792:	f7f9 fdcf 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008796:	2064      	movs	r0, #100	; 0x64
 8008798:	f001 fa92 	bl	8009cc0 <HAL_Delay>
			if(selector_vel == 0)
 800879c:	4b9c      	ldr	r3, [pc, #624]	; (8008a10 <cppLoop+0xf68>)
 800879e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d113      	bne.n	80087ce <cppLoop+0xd26>
				adj_max_velocity = adj_max_velocity + 0.1;
 80087a6:	4b9b      	ldr	r3, [pc, #620]	; (8008a14 <cppLoop+0xf6c>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f7f7 fee4 	bl	8000578 <__aeabi_f2d>
 80087b0:	a393      	add	r3, pc, #588	; (adr r3, 8008a00 <cppLoop+0xf58>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 fd81 	bl	80002bc <__adddf3>
 80087ba:	4603      	mov	r3, r0
 80087bc:	460c      	mov	r4, r1
 80087be:	4618      	mov	r0, r3
 80087c0:	4621      	mov	r1, r4
 80087c2:	f7f8 fa29 	bl	8000c18 <__aeabi_d2f>
 80087c6:	4602      	mov	r2, r0
 80087c8:	4b92      	ldr	r3, [pc, #584]	; (8008a14 <cppLoop+0xf6c>)
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	e012      	b.n	80087f4 <cppLoop+0xd4c>
				adj_min_velocity = adj_min_velocity + 0.1;
 80087ce:	4b92      	ldr	r3, [pc, #584]	; (8008a18 <cppLoop+0xf70>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7f7 fed0 	bl	8000578 <__aeabi_f2d>
 80087d8:	a389      	add	r3, pc, #548	; (adr r3, 8008a00 <cppLoop+0xf58>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 fd6d 	bl	80002bc <__adddf3>
 80087e2:	4603      	mov	r3, r0
 80087e4:	460c      	mov	r4, r1
 80087e6:	4618      	mov	r0, r3
 80087e8:	4621      	mov	r1, r4
 80087ea:	f7f8 fa15 	bl	8000c18 <__aeabi_d2f>
 80087ee:	4602      	mov	r2, r0
 80087f0:	4b89      	ldr	r3, [pc, #548]	; (8008a18 <cppLoop+0xf70>)
 80087f2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80087f4:	2200      	movs	r2, #0
 80087f6:	f04f 31ff 	mov.w	r1, #4294967295
 80087fa:	4884      	ldr	r0, [pc, #528]	; (8008a0c <cppLoop+0xf64>)
 80087fc:	f7f9 fd9a 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008800:	f001 b91e 	b.w	8009a40 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_L){
 8008804:	4880      	ldr	r0, [pc, #512]	; (8008a08 <cppLoop+0xf60>)
 8008806:	f7f9 fc75 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 800880a:	4603      	mov	r3, r0
 800880c:	2b01      	cmp	r3, #1
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	d03c      	beq.n	8008894 <cppLoop+0xdec>
			led.LR(-1, 1);
 800881a:	2201      	movs	r2, #1
 800881c:	f04f 31ff 	mov.w	r1, #4294967295
 8008820:	487a      	ldr	r0, [pc, #488]	; (8008a0c <cppLoop+0xf64>)
 8008822:	f7f9 fd87 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008826:	2064      	movs	r0, #100	; 0x64
 8008828:	f001 fa4a 	bl	8009cc0 <HAL_Delay>
			if(selector_vel == 0)
 800882c:	4b78      	ldr	r3, [pc, #480]	; (8008a10 <cppLoop+0xf68>)
 800882e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d113      	bne.n	800885e <cppLoop+0xdb6>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008836:	4b77      	ldr	r3, [pc, #476]	; (8008a14 <cppLoop+0xf6c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4618      	mov	r0, r3
 800883c:	f7f7 fe9c 	bl	8000578 <__aeabi_f2d>
 8008840:	a36f      	add	r3, pc, #444	; (adr r3, 8008a00 <cppLoop+0xf58>)
 8008842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008846:	f7f7 fd37 	bl	80002b8 <__aeabi_dsub>
 800884a:	4603      	mov	r3, r0
 800884c:	460c      	mov	r4, r1
 800884e:	4618      	mov	r0, r3
 8008850:	4621      	mov	r1, r4
 8008852:	f7f8 f9e1 	bl	8000c18 <__aeabi_d2f>
 8008856:	4602      	mov	r2, r0
 8008858:	4b6e      	ldr	r3, [pc, #440]	; (8008a14 <cppLoop+0xf6c>)
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	e012      	b.n	8008884 <cppLoop+0xddc>
				adj_min_velocity = adj_min_velocity - 0.1;
 800885e:	4b6e      	ldr	r3, [pc, #440]	; (8008a18 <cppLoop+0xf70>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4618      	mov	r0, r3
 8008864:	f7f7 fe88 	bl	8000578 <__aeabi_f2d>
 8008868:	a365      	add	r3, pc, #404	; (adr r3, 8008a00 <cppLoop+0xf58>)
 800886a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800886e:	f7f7 fd23 	bl	80002b8 <__aeabi_dsub>
 8008872:	4603      	mov	r3, r0
 8008874:	460c      	mov	r4, r1
 8008876:	4618      	mov	r0, r3
 8008878:	4621      	mov	r1, r4
 800887a:	f7f8 f9cd 	bl	8000c18 <__aeabi_d2f>
 800887e:	4602      	mov	r2, r0
 8008880:	4b65      	ldr	r3, [pc, #404]	; (8008a18 <cppLoop+0xf70>)
 8008882:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008884:	2200      	movs	r2, #0
 8008886:	f04f 31ff 	mov.w	r1, #4294967295
 800888a:	4860      	ldr	r0, [pc, #384]	; (8008a0c <cppLoop+0xf64>)
 800888c:	f7f9 fd52 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008890:	f001 b8d6 	b.w	8009a40 <cppLoop+0x1f98>
		else if(joy_stick.getValue() == JOY_C){
 8008894:	485c      	ldr	r0, [pc, #368]	; (8008a08 <cppLoop+0xf60>)
 8008896:	f7f9 fc2d 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 800889a:	4603      	mov	r3, r0
 800889c:	2b02      	cmp	r3, #2
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f001 80ca 	beq.w	8009a40 <cppLoop+0x1f98>
			led.LR(-1, 1);
 80088ac:	2201      	movs	r2, #1
 80088ae:	f04f 31ff 	mov.w	r1, #4294967295
 80088b2:	4856      	ldr	r0, [pc, #344]	; (8008a0c <cppLoop+0xf64>)
 80088b4:	f7f9 fd3e 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088b8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088bc:	f001 fa00 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 80088c0:	2300      	movs	r3, #0
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4b53      	ldr	r3, [pc, #332]	; (8008a14 <cppLoop+0xf6c>)
 80088c6:	2201      	movs	r2, #1
 80088c8:	4954      	ldr	r1, [pc, #336]	; (8008a1c <cppLoop+0xf74>)
 80088ca:	4855      	ldr	r0, [pc, #340]	; (8008a20 <cppLoop+0xf78>)
 80088cc:	f7f8 ffc6 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 80088d0:	2300      	movs	r3, #0
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	4b50      	ldr	r3, [pc, #320]	; (8008a18 <cppLoop+0xf70>)
 80088d6:	2201      	movs	r2, #1
 80088d8:	4952      	ldr	r1, [pc, #328]	; (8008a24 <cppLoop+0xf7c>)
 80088da:	4851      	ldr	r0, [pc, #324]	; (8008a20 <cppLoop+0xf78>)
 80088dc:	f7f8 ffbe 	bl	800185c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80088e0:	4b4c      	ldr	r3, [pc, #304]	; (8008a14 <cppLoop+0xf6c>)
 80088e2:	edd3 7a00 	vldr	s15, [r3]
 80088e6:	eeb0 0a67 	vmov.f32	s0, s15
 80088ea:	484f      	ldr	r0, [pc, #316]	; (8008a28 <cppLoop+0xf80>)
 80088ec:	f7fb f989 	bl	8003c02 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80088f0:	4b49      	ldr	r3, [pc, #292]	; (8008a18 <cppLoop+0xf70>)
 80088f2:	edd3 7a00 	vldr	s15, [r3]
 80088f6:	eeb0 0a67 	vmov.f32	s0, s15
 80088fa:	484b      	ldr	r0, [pc, #300]	; (8008a28 <cppLoop+0xf80>)
 80088fc:	f7fb f9a1 	bl	8003c42 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008900:	2200      	movs	r2, #0
 8008902:	f04f 31ff 	mov.w	r1, #4294967295
 8008906:	4841      	ldr	r0, [pc, #260]	; (8008a0c <cppLoop+0xf64>)
 8008908:	f7f9 fd14 	bl	8002334 <_ZN3LED2LREaa>
		break;
 800890c:	f001 b898 	b.w	8009a40 <cppLoop+0x1f98>

	case 5:
		led.fullColor('M');
 8008910:	214d      	movs	r1, #77	; 0x4d
 8008912:	483e      	ldr	r0, [pc, #248]	; (8008a0c <cppLoop+0xf64>)
 8008914:	f7f9 fc52 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008918:	f7f8 fbc2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800891c:	2100      	movs	r1, #0
 800891e:	2000      	movs	r0, #0
 8008920:	f7f8 fbce 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008924:	4b41      	ldr	r3, [pc, #260]	; (8008a2c <cppLoop+0xf84>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4618      	mov	r0, r3
 800892a:	f7f7 fe25 	bl	8000578 <__aeabi_f2d>
 800892e:	4603      	mov	r3, r0
 8008930:	460c      	mov	r4, r1
 8008932:	461a      	mov	r2, r3
 8008934:	4623      	mov	r3, r4
 8008936:	483e      	ldr	r0, [pc, #248]	; (8008a30 <cppLoop+0xf88>)
 8008938:	f7f8 fbec 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800893c:	2101      	movs	r1, #1
 800893e:	2000      	movs	r0, #0
 8008940:	f7f8 fbbe 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008944:	4b3b      	ldr	r3, [pc, #236]	; (8008a34 <cppLoop+0xf8c>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4618      	mov	r0, r3
 800894a:	f7f7 fe15 	bl	8000578 <__aeabi_f2d>
 800894e:	4603      	mov	r3, r0
 8008950:	460c      	mov	r4, r1
 8008952:	461a      	mov	r2, r3
 8008954:	4623      	mov	r3, r4
 8008956:	4838      	ldr	r0, [pc, #224]	; (8008a38 <cppLoop+0xf90>)
 8008958:	f7f8 fbdc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800895c:	482a      	ldr	r0, [pc, #168]	; (8008a08 <cppLoop+0xf60>)
 800895e:	f7f9 fbc9 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008962:	4603      	mov	r3, r0
 8008964:	2b02      	cmp	r3, #2
 8008966:	bf0c      	ite	eq
 8008968:	2301      	moveq	r3, #1
 800896a:	2300      	movne	r3, #0
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b00      	cmp	r3, #0
 8008970:	f001 8068 	beq.w	8009a44 <cppLoop+0x1f9c>
			HAL_Delay(500);
 8008974:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008978:	f001 f9a2 	bl	8009cc0 <HAL_Delay>

			led.LR(1, -1);
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	2101      	movs	r1, #1
 8008982:	4822      	ldr	r0, [pc, #136]	; (8008a0c <cppLoop+0xf64>)
 8008984:	f7f9 fcd6 	bl	8002334 <_ZN3LED2LREaa>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008988:	4b2c      	ldr	r3, [pc, #176]	; (8008a3c <cppLoop+0xf94>)
 800898a:	edd3 7a00 	vldr	s15, [r3]
 800898e:	4b2c      	ldr	r3, [pc, #176]	; (8008a40 <cppLoop+0xf98>)
 8008990:	ed93 7a00 	vldr	s14, [r3]
 8008994:	4b2b      	ldr	r3, [pc, #172]	; (8008a44 <cppLoop+0xf9c>)
 8008996:	edd3 6a00 	vldr	s13, [r3]
 800899a:	eeb0 1a66 	vmov.f32	s2, s13
 800899e:	eef0 0a47 	vmov.f32	s1, s14
 80089a2:	eeb0 0a67 	vmov.f32	s0, s15
 80089a6:	4820      	ldr	r0, [pc, #128]	; (8008a28 <cppLoop+0xf80>)
 80089a8:	f7fb f880 	bl	8003aac <_ZN9LineTrace7setGainEfff>
			line_trace.setMode(THIRD_RUNNING);
 80089ac:	2102      	movs	r1, #2
 80089ae:	481e      	ldr	r0, [pc, #120]	; (8008a28 <cppLoop+0xf80>)
 80089b0:	f7fb fb44 	bl	800403c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80089b4:	4b1f      	ldr	r3, [pc, #124]	; (8008a34 <cppLoop+0xf8c>)
 80089b6:	edd3 7a00 	vldr	s15, [r3]
 80089ba:	eeb0 0a67 	vmov.f32	s0, s15
 80089be:	481a      	ldr	r0, [pc, #104]	; (8008a28 <cppLoop+0xf80>)
 80089c0:	f7fb f90f 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80089c4:	4b19      	ldr	r3, [pc, #100]	; (8008a2c <cppLoop+0xf84>)
 80089c6:	edd3 7a00 	vldr	s15, [r3]
 80089ca:	eeb0 0a67 	vmov.f32	s0, s15
 80089ce:	4816      	ldr	r0, [pc, #88]	; (8008a28 <cppLoop+0xf80>)
 80089d0:	f7fb f927 	bl	8003c22 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80089d4:	4b17      	ldr	r3, [pc, #92]	; (8008a34 <cppLoop+0xf8c>)
 80089d6:	edd3 7a00 	vldr	s15, [r3]
 80089da:	eeb0 0a67 	vmov.f32	s0, s15
 80089de:	4812      	ldr	r0, [pc, #72]	; (8008a28 <cppLoop+0xf80>)
 80089e0:	f7fb f93f 	bl	8003c62 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 80089e4:	4810      	ldr	r0, [pc, #64]	; (8008a28 <cppLoop+0xf80>)
 80089e6:	f7fb fc51 	bl	800428c <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80089ea:	480f      	ldr	r0, [pc, #60]	; (8008a28 <cppLoop+0xf80>)
 80089ec:	f7fb fb64 	bl	80040b8 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80089f0:	f04f 32ff 	mov.w	r2, #4294967295
 80089f4:	2100      	movs	r1, #0
 80089f6:	4805      	ldr	r0, [pc, #20]	; (8008a0c <cppLoop+0xf64>)
 80089f8:	f7f9 fc9c 	bl	8002334 <_ZN3LED2LREaa>
		}

		break;
 80089fc:	f001 b822 	b.w	8009a44 <cppLoop+0x1f9c>
 8008a00:	9999999a 	.word	0x9999999a
 8008a04:	3fb99999 	.word	0x3fb99999
 8008a08:	200005c0 	.word	0x200005c0
 8008a0c:	200005cc 	.word	0x200005cc
 8008a10:	20042240 	.word	0x20042240
 8008a14:	2004227c 	.word	0x2004227c
 8008a18:	2004228c 	.word	0x2004228c
 8008a1c:	08019e40 	.word	0x08019e40
 8008a20:	08019dc0 	.word	0x08019dc0
 8008a24:	08019e4c 	.word	0x08019e4c
 8008a28:	2001db5c 	.word	0x2001db5c
 8008a2c:	20042284 	.word	0x20042284
 8008a30:	08019e58 	.word	0x08019e58
 8008a34:	20042294 	.word	0x20042294
 8008a38:	08019dec 	.word	0x08019dec
 8008a3c:	20042244 	.word	0x20042244
 8008a40:	2004224c 	.word	0x2004224c
 8008a44:	20042254 	.word	0x20042254

	case 6:
		led.fullColor('R');
 8008a48:	2152      	movs	r1, #82	; 0x52
 8008a4a:	4895      	ldr	r0, [pc, #596]	; (8008ca0 <cppLoop+0x11f8>)
 8008a4c:	f7f9 fbb6 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008a50:	f7f8 fb26 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008a54:	2100      	movs	r1, #0
 8008a56:	2000      	movs	r0, #0
 8008a58:	f7f8 fb32 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008a5c:	4891      	ldr	r0, [pc, #580]	; (8008ca4 <cppLoop+0x11fc>)
 8008a5e:	f7fb f930 	bl	8003cc2 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008a62:	ee10 3a10 	vmov	r3, s0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7f7 fd86 	bl	8000578 <__aeabi_f2d>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	461a      	mov	r2, r3
 8008a72:	4623      	mov	r3, r4
 8008a74:	488c      	ldr	r0, [pc, #560]	; (8008ca8 <cppLoop+0x1200>)
 8008a76:	f7f8 fb4d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f7f8 fb1f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008a82:	4888      	ldr	r0, [pc, #544]	; (8008ca4 <cppLoop+0x11fc>)
 8008a84:	f7fb f93d 	bl	8003d02 <_ZN9LineTrace15getMinVelocity2Ev>
 8008a88:	ee10 3a10 	vmov	r3, s0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f7f7 fd73 	bl	8000578 <__aeabi_f2d>
 8008a92:	4603      	mov	r3, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	461a      	mov	r2, r3
 8008a98:	4623      	mov	r3, r4
 8008a9a:	4884      	ldr	r0, [pc, #528]	; (8008cac <cppLoop+0x1204>)
 8008a9c:	f7f8 fb3a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008aa0:	4883      	ldr	r0, [pc, #524]	; (8008cb0 <cppLoop+0x1208>)
 8008aa2:	f7f9 fb27 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b08      	cmp	r3, #8
 8008aaa:	bf0c      	ite	eq
 8008aac:	2301      	moveq	r3, #1
 8008aae:	2300      	movne	r3, #0
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d022      	beq.n	8008afc <cppLoop+0x1054>
			led.LR(-1, 1);
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8008abc:	4878      	ldr	r0, [pc, #480]	; (8008ca0 <cppLoop+0x11f8>)
 8008abe:	f7f9 fc39 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ac2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ac6:	f001 f8fb 	bl	8009cc0 <HAL_Delay>

			selector_vel2++;
 8008aca:	4b7a      	ldr	r3, [pc, #488]	; (8008cb4 <cppLoop+0x120c>)
 8008acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	b29b      	uxth	r3, r3
 8008ad6:	b21a      	sxth	r2, r3
 8008ad8:	4b76      	ldr	r3, [pc, #472]	; (8008cb4 <cppLoop+0x120c>)
 8008ada:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008adc:	4b75      	ldr	r3, [pc, #468]	; (8008cb4 <cppLoop+0x120c>)
 8008ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	dd02      	ble.n	8008aec <cppLoop+0x1044>
 8008ae6:	4b73      	ldr	r3, [pc, #460]	; (8008cb4 <cppLoop+0x120c>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008aec:	2200      	movs	r2, #0
 8008aee:	f04f 31ff 	mov.w	r1, #4294967295
 8008af2:	486b      	ldr	r0, [pc, #428]	; (8008ca0 <cppLoop+0x11f8>)
 8008af4:	f7f9 fc1e 	bl	8002334 <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008af8:	f000 bfa6 	b.w	8009a48 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_R){
 8008afc:	486c      	ldr	r0, [pc, #432]	; (8008cb0 <cppLoop+0x1208>)
 8008afe:	f7f9 faf9 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	bf0c      	ite	eq
 8008b08:	2301      	moveq	r3, #1
 8008b0a:	2300      	movne	r3, #0
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d03c      	beq.n	8008b8c <cppLoop+0x10e4>
			led.LR(-1, 1);
 8008b12:	2201      	movs	r2, #1
 8008b14:	f04f 31ff 	mov.w	r1, #4294967295
 8008b18:	4861      	ldr	r0, [pc, #388]	; (8008ca0 <cppLoop+0x11f8>)
 8008b1a:	f7f9 fc0b 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b1e:	2064      	movs	r0, #100	; 0x64
 8008b20:	f001 f8ce 	bl	8009cc0 <HAL_Delay>
			if(selector_vel2 == 0)
 8008b24:	4b63      	ldr	r3, [pc, #396]	; (8008cb4 <cppLoop+0x120c>)
 8008b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d113      	bne.n	8008b56 <cppLoop+0x10ae>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008b2e:	4b62      	ldr	r3, [pc, #392]	; (8008cb8 <cppLoop+0x1210>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7f7 fd20 	bl	8000578 <__aeabi_f2d>
 8008b38:	a357      	add	r3, pc, #348	; (adr r3, 8008c98 <cppLoop+0x11f0>)
 8008b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3e:	f7f7 fbbd 	bl	80002bc <__adddf3>
 8008b42:	4603      	mov	r3, r0
 8008b44:	460c      	mov	r4, r1
 8008b46:	4618      	mov	r0, r3
 8008b48:	4621      	mov	r1, r4
 8008b4a:	f7f8 f865 	bl	8000c18 <__aeabi_d2f>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	4b59      	ldr	r3, [pc, #356]	; (8008cb8 <cppLoop+0x1210>)
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	e012      	b.n	8008b7c <cppLoop+0x10d4>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 8008b56:	4b59      	ldr	r3, [pc, #356]	; (8008cbc <cppLoop+0x1214>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f7f7 fd0c 	bl	8000578 <__aeabi_f2d>
 8008b60:	a34d      	add	r3, pc, #308	; (adr r3, 8008c98 <cppLoop+0x11f0>)
 8008b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b66:	f7f7 fba9 	bl	80002bc <__adddf3>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	4618      	mov	r0, r3
 8008b70:	4621      	mov	r1, r4
 8008b72:	f7f8 f851 	bl	8000c18 <__aeabi_d2f>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b50      	ldr	r3, [pc, #320]	; (8008cbc <cppLoop+0x1214>)
 8008b7a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008b82:	4847      	ldr	r0, [pc, #284]	; (8008ca0 <cppLoop+0x11f8>)
 8008b84:	f7f9 fbd6 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008b88:	f000 bf5e 	b.w	8009a48 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_L){
 8008b8c:	4848      	ldr	r0, [pc, #288]	; (8008cb0 <cppLoop+0x1208>)
 8008b8e:	f7f9 fab1 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	bf0c      	ite	eq
 8008b98:	2301      	moveq	r3, #1
 8008b9a:	2300      	movne	r3, #0
 8008b9c:	b2db      	uxtb	r3, r3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d03c      	beq.n	8008c1c <cppLoop+0x1174>
			led.LR(-1, 1);
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ba8:	483d      	ldr	r0, [pc, #244]	; (8008ca0 <cppLoop+0x11f8>)
 8008baa:	f7f9 fbc3 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bae:	2064      	movs	r0, #100	; 0x64
 8008bb0:	f001 f886 	bl	8009cc0 <HAL_Delay>
			if(selector_vel2 == 0)
 8008bb4:	4b3f      	ldr	r3, [pc, #252]	; (8008cb4 <cppLoop+0x120c>)
 8008bb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d113      	bne.n	8008be6 <cppLoop+0x113e>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8008bbe:	4b3e      	ldr	r3, [pc, #248]	; (8008cb8 <cppLoop+0x1210>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f7 fcd8 	bl	8000578 <__aeabi_f2d>
 8008bc8:	a333      	add	r3, pc, #204	; (adr r3, 8008c98 <cppLoop+0x11f0>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb73 	bl	80002b8 <__aeabi_dsub>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7f8 f81d 	bl	8000c18 <__aeabi_d2f>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b35      	ldr	r3, [pc, #212]	; (8008cb8 <cppLoop+0x1210>)
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	e012      	b.n	8008c0c <cppLoop+0x1164>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008be6:	4b35      	ldr	r3, [pc, #212]	; (8008cbc <cppLoop+0x1214>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7f7 fcc4 	bl	8000578 <__aeabi_f2d>
 8008bf0:	a329      	add	r3, pc, #164	; (adr r3, 8008c98 <cppLoop+0x11f0>)
 8008bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bf6:	f7f7 fb5f 	bl	80002b8 <__aeabi_dsub>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	460c      	mov	r4, r1
 8008bfe:	4618      	mov	r0, r3
 8008c00:	4621      	mov	r1, r4
 8008c02:	f7f8 f809 	bl	8000c18 <__aeabi_d2f>
 8008c06:	4602      	mov	r2, r0
 8008c08:	4b2c      	ldr	r3, [pc, #176]	; (8008cbc <cppLoop+0x1214>)
 8008c0a:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c12:	4823      	ldr	r0, [pc, #140]	; (8008ca0 <cppLoop+0x11f8>)
 8008c14:	f7f9 fb8e 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008c18:	f000 bf16 	b.w	8009a48 <cppLoop+0x1fa0>
		else if(joy_stick.getValue() == JOY_C){
 8008c1c:	4824      	ldr	r0, [pc, #144]	; (8008cb0 <cppLoop+0x1208>)
 8008c1e:	f7f9 fa69 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	bf0c      	ite	eq
 8008c28:	2301      	moveq	r3, #1
 8008c2a:	2300      	movne	r3, #0
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	f000 870a 	beq.w	8009a48 <cppLoop+0x1fa0>
			led.LR(-1, 1);
 8008c34:	2201      	movs	r2, #1
 8008c36:	f04f 31ff 	mov.w	r1, #4294967295
 8008c3a:	4819      	ldr	r0, [pc, #100]	; (8008ca0 <cppLoop+0x11f8>)
 8008c3c:	f7f9 fb7a 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008c40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008c44:	f001 f83c 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008c48:	2300      	movs	r3, #0
 8008c4a:	9300      	str	r3, [sp, #0]
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	; (8008cb8 <cppLoop+0x1210>)
 8008c4e:	2201      	movs	r2, #1
 8008c50:	491b      	ldr	r1, [pc, #108]	; (8008cc0 <cppLoop+0x1218>)
 8008c52:	481c      	ldr	r0, [pc, #112]	; (8008cc4 <cppLoop+0x121c>)
 8008c54:	f7f8 fe02 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	4b17      	ldr	r3, [pc, #92]	; (8008cbc <cppLoop+0x1214>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	4919      	ldr	r1, [pc, #100]	; (8008cc8 <cppLoop+0x1220>)
 8008c62:	4818      	ldr	r0, [pc, #96]	; (8008cc4 <cppLoop+0x121c>)
 8008c64:	f7f8 fdfa 	bl	800185c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008c68:	4b13      	ldr	r3, [pc, #76]	; (8008cb8 <cppLoop+0x1210>)
 8008c6a:	edd3 7a00 	vldr	s15, [r3]
 8008c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c72:	480c      	ldr	r0, [pc, #48]	; (8008ca4 <cppLoop+0x11fc>)
 8008c74:	f7fa ffd5 	bl	8003c22 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008c78:	4b10      	ldr	r3, [pc, #64]	; (8008cbc <cppLoop+0x1214>)
 8008c7a:	edd3 7a00 	vldr	s15, [r3]
 8008c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8008c82:	4808      	ldr	r0, [pc, #32]	; (8008ca4 <cppLoop+0x11fc>)
 8008c84:	f7fa ffed 	bl	8003c62 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008c88:	2200      	movs	r2, #0
 8008c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c8e:	4804      	ldr	r0, [pc, #16]	; (8008ca0 <cppLoop+0x11f8>)
 8008c90:	f7f9 fb50 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008c94:	f000 bed8 	b.w	8009a48 <cppLoop+0x1fa0>
 8008c98:	9999999a 	.word	0x9999999a
 8008c9c:	3fb99999 	.word	0x3fb99999
 8008ca0:	200005cc 	.word	0x200005cc
 8008ca4:	2001db5c 	.word	0x2001db5c
 8008ca8:	08019e58 	.word	0x08019e58
 8008cac:	08019e1c 	.word	0x08019e1c
 8008cb0:	200005c0 	.word	0x200005c0
 8008cb4:	20042242 	.word	0x20042242
 8008cb8:	20042284 	.word	0x20042284
 8008cbc:	20042294 	.word	0x20042294
 8008cc0:	08019e64 	.word	0x08019e64
 8008cc4:	08019dc0 	.word	0x08019dc0
 8008cc8:	08019e70 	.word	0x08019e70

	case 7:
		led.fullColor('W');
 8008ccc:	2157      	movs	r1, #87	; 0x57
 8008cce:	48c2      	ldr	r0, [pc, #776]	; (8008fd8 <cppLoop+0x1530>)
 8008cd0:	f7f9 fa74 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008cd4:	f7f8 f9e4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008cd8:	2100      	movs	r1, #0
 8008cda:	2000      	movs	r0, #0
 8008cdc:	f7f8 f9f0 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008ce0:	48be      	ldr	r0, [pc, #760]	; (8008fdc <cppLoop+0x1534>)
 8008ce2:	f7fb f852 	bl	8003d8a <_ZN9LineTrace9getMaxAccEv>
 8008ce6:	ee10 3a10 	vmov	r3, s0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7f7 fc44 	bl	8000578 <__aeabi_f2d>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4623      	mov	r3, r4
 8008cf8:	48b9      	ldr	r0, [pc, #740]	; (8008fe0 <cppLoop+0x1538>)
 8008cfa:	f7f8 fa0b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008cfe:	2101      	movs	r1, #1
 8008d00:	2000      	movs	r0, #0
 8008d02:	f7f8 f9dd 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008d06:	48b5      	ldr	r0, [pc, #724]	; (8008fdc <cppLoop+0x1534>)
 8008d08:	f7fb f875 	bl	8003df6 <_ZN9LineTrace9getMaxDecEv>
 8008d0c:	ee10 3a10 	vmov	r3, s0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7f7 fc31 	bl	8000578 <__aeabi_f2d>
 8008d16:	4603      	mov	r3, r0
 8008d18:	460c      	mov	r4, r1
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4623      	mov	r3, r4
 8008d1e:	48b1      	ldr	r0, [pc, #708]	; (8008fe4 <cppLoop+0x153c>)
 8008d20:	f7f8 f9f8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d24:	48b0      	ldr	r0, [pc, #704]	; (8008fe8 <cppLoop+0x1540>)
 8008d26:	f7f9 f9e5 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	bf0c      	ite	eq
 8008d30:	2301      	moveq	r3, #1
 8008d32:	2300      	movne	r3, #0
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d022      	beq.n	8008d80 <cppLoop+0x12d8>
			led.LR(-1, 1);
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008d40:	48a5      	ldr	r0, [pc, #660]	; (8008fd8 <cppLoop+0x1530>)
 8008d42:	f7f9 faf7 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008d46:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008d4a:	f000 ffb9 	bl	8009cc0 <HAL_Delay>

			selector_acc++;
 8008d4e:	4ba7      	ldr	r3, [pc, #668]	; (8008fec <cppLoop+0x1544>)
 8008d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	3301      	adds	r3, #1
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	b21a      	sxth	r2, r3
 8008d5c:	4ba3      	ldr	r3, [pc, #652]	; (8008fec <cppLoop+0x1544>)
 8008d5e:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008d60:	4ba2      	ldr	r3, [pc, #648]	; (8008fec <cppLoop+0x1544>)
 8008d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	dd02      	ble.n	8008d70 <cppLoop+0x12c8>
 8008d6a:	4ba0      	ldr	r3, [pc, #640]	; (8008fec <cppLoop+0x1544>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008d70:	2200      	movs	r2, #0
 8008d72:	f04f 31ff 	mov.w	r1, #4294967295
 8008d76:	4898      	ldr	r0, [pc, #608]	; (8008fd8 <cppLoop+0x1530>)
 8008d78:	f7f9 fadc 	bl	8002334 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008d7c:	f000 be66 	b.w	8009a4c <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_R){
 8008d80:	4899      	ldr	r0, [pc, #612]	; (8008fe8 <cppLoop+0x1540>)
 8008d82:	f7f9 f9b7 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b10      	cmp	r3, #16
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d03c      	beq.n	8008e10 <cppLoop+0x1368>
			led.LR(-1, 1);
 8008d96:	2201      	movs	r2, #1
 8008d98:	f04f 31ff 	mov.w	r1, #4294967295
 8008d9c:	488e      	ldr	r0, [pc, #568]	; (8008fd8 <cppLoop+0x1530>)
 8008d9e:	f7f9 fac9 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008da2:	2064      	movs	r0, #100	; 0x64
 8008da4:	f000 ff8c 	bl	8009cc0 <HAL_Delay>
			if(selector_acc == 0){
 8008da8:	4b90      	ldr	r3, [pc, #576]	; (8008fec <cppLoop+0x1544>)
 8008daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d113      	bne.n	8008dda <cppLoop+0x1332>
				adj_acc = adj_acc + 0.1;
 8008db2:	4b8f      	ldr	r3, [pc, #572]	; (8008ff0 <cppLoop+0x1548>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 fbde 	bl	8000578 <__aeabi_f2d>
 8008dbc:	a384      	add	r3, pc, #528	; (adr r3, 8008fd0 <cppLoop+0x1528>)
 8008dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc2:	f7f7 fa7b 	bl	80002bc <__adddf3>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	460c      	mov	r4, r1
 8008dca:	4618      	mov	r0, r3
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f7f7 ff23 	bl	8000c18 <__aeabi_d2f>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	4b86      	ldr	r3, [pc, #536]	; (8008ff0 <cppLoop+0x1548>)
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	e012      	b.n	8008e00 <cppLoop+0x1358>
				adj_dec = adj_dec + 0.1;
 8008dda:	4b86      	ldr	r3, [pc, #536]	; (8008ff4 <cppLoop+0x154c>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7f7 fbca 	bl	8000578 <__aeabi_f2d>
 8008de4:	a37a      	add	r3, pc, #488	; (adr r3, 8008fd0 <cppLoop+0x1528>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa67 	bl	80002bc <__adddf3>
 8008dee:	4603      	mov	r3, r0
 8008df0:	460c      	mov	r4, r1
 8008df2:	4618      	mov	r0, r3
 8008df4:	4621      	mov	r1, r4
 8008df6:	f7f7 ff0f 	bl	8000c18 <__aeabi_d2f>
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	4b7d      	ldr	r3, [pc, #500]	; (8008ff4 <cppLoop+0x154c>)
 8008dfe:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e00:	2200      	movs	r2, #0
 8008e02:	f04f 31ff 	mov.w	r1, #4294967295
 8008e06:	4874      	ldr	r0, [pc, #464]	; (8008fd8 <cppLoop+0x1530>)
 8008e08:	f7f9 fa94 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008e0c:	f000 be1e 	b.w	8009a4c <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_L){
 8008e10:	4875      	ldr	r0, [pc, #468]	; (8008fe8 <cppLoop+0x1540>)
 8008e12:	f7f9 f96f 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	bf0c      	ite	eq
 8008e1c:	2301      	moveq	r3, #1
 8008e1e:	2300      	movne	r3, #0
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d03c      	beq.n	8008ea0 <cppLoop+0x13f8>
			led.LR(-1, 1);
 8008e26:	2201      	movs	r2, #1
 8008e28:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2c:	486a      	ldr	r0, [pc, #424]	; (8008fd8 <cppLoop+0x1530>)
 8008e2e:	f7f9 fa81 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e32:	2064      	movs	r0, #100	; 0x64
 8008e34:	f000 ff44 	bl	8009cc0 <HAL_Delay>
			if(selector_acc == 0){
 8008e38:	4b6c      	ldr	r3, [pc, #432]	; (8008fec <cppLoop+0x1544>)
 8008e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d113      	bne.n	8008e6a <cppLoop+0x13c2>
				adj_acc = adj_acc - 0.1;
 8008e42:	4b6b      	ldr	r3, [pc, #428]	; (8008ff0 <cppLoop+0x1548>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7f7 fb96 	bl	8000578 <__aeabi_f2d>
 8008e4c:	a360      	add	r3, pc, #384	; (adr r3, 8008fd0 <cppLoop+0x1528>)
 8008e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e52:	f7f7 fa31 	bl	80002b8 <__aeabi_dsub>
 8008e56:	4603      	mov	r3, r0
 8008e58:	460c      	mov	r4, r1
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	4621      	mov	r1, r4
 8008e5e:	f7f7 fedb 	bl	8000c18 <__aeabi_d2f>
 8008e62:	4602      	mov	r2, r0
 8008e64:	4b62      	ldr	r3, [pc, #392]	; (8008ff0 <cppLoop+0x1548>)
 8008e66:	601a      	str	r2, [r3, #0]
 8008e68:	e012      	b.n	8008e90 <cppLoop+0x13e8>
				adj_dec = adj_dec - 0.1;
 8008e6a:	4b62      	ldr	r3, [pc, #392]	; (8008ff4 <cppLoop+0x154c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7f7 fb82 	bl	8000578 <__aeabi_f2d>
 8008e74:	a356      	add	r3, pc, #344	; (adr r3, 8008fd0 <cppLoop+0x1528>)
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f7f7 fa1d 	bl	80002b8 <__aeabi_dsub>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	460c      	mov	r4, r1
 8008e82:	4618      	mov	r0, r3
 8008e84:	4621      	mov	r1, r4
 8008e86:	f7f7 fec7 	bl	8000c18 <__aeabi_d2f>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b59      	ldr	r3, [pc, #356]	; (8008ff4 <cppLoop+0x154c>)
 8008e8e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008e90:	2200      	movs	r2, #0
 8008e92:	f04f 31ff 	mov.w	r1, #4294967295
 8008e96:	4850      	ldr	r0, [pc, #320]	; (8008fd8 <cppLoop+0x1530>)
 8008e98:	f7f9 fa4c 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008e9c:	f000 bdd6 	b.w	8009a4c <cppLoop+0x1fa4>
		else if(joy_stick.getValue() == JOY_C){
 8008ea0:	4851      	ldr	r0, [pc, #324]	; (8008fe8 <cppLoop+0x1540>)
 8008ea2:	f7f9 f927 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	bf0c      	ite	eq
 8008eac:	2301      	moveq	r3, #1
 8008eae:	2300      	movne	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 85ca 	beq.w	8009a4c <cppLoop+0x1fa4>
			led.LR(-1, 1);
 8008eb8:	2201      	movs	r2, #1
 8008eba:	f04f 31ff 	mov.w	r1, #4294967295
 8008ebe:	4846      	ldr	r0, [pc, #280]	; (8008fd8 <cppLoop+0x1530>)
 8008ec0:	f7f9 fa38 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ec4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ec8:	f000 fefa 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008ecc:	2300      	movs	r3, #0
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	4b47      	ldr	r3, [pc, #284]	; (8008ff0 <cppLoop+0x1548>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4948      	ldr	r1, [pc, #288]	; (8008ff8 <cppLoop+0x1550>)
 8008ed6:	4849      	ldr	r0, [pc, #292]	; (8008ffc <cppLoop+0x1554>)
 8008ed8:	f7f8 fcc0 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008edc:	2300      	movs	r3, #0
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	4b44      	ldr	r3, [pc, #272]	; (8008ff4 <cppLoop+0x154c>)
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4946      	ldr	r1, [pc, #280]	; (8009000 <cppLoop+0x1558>)
 8008ee6:	4845      	ldr	r0, [pc, #276]	; (8008ffc <cppLoop+0x1554>)
 8008ee8:	f7f8 fcb8 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008eec:	4b40      	ldr	r3, [pc, #256]	; (8008ff0 <cppLoop+0x1548>)
 8008eee:	edd3 7a00 	vldr	s15, [r3]
 8008ef2:	4b40      	ldr	r3, [pc, #256]	; (8008ff4 <cppLoop+0x154c>)
 8008ef4:	ed93 7a00 	vldr	s14, [r3]
 8008ef8:	eef0 0a47 	vmov.f32	s1, s14
 8008efc:	eeb0 0a67 	vmov.f32	s0, s15
 8008f00:	4836      	ldr	r0, [pc, #216]	; (8008fdc <cppLoop+0x1534>)
 8008f02:	f7fa ff0e 	bl	8003d22 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008f06:	2200      	movs	r2, #0
 8008f08:	f04f 31ff 	mov.w	r1, #4294967295
 8008f0c:	4832      	ldr	r0, [pc, #200]	; (8008fd8 <cppLoop+0x1530>)
 8008f0e:	f7f9 fa11 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8008f12:	f000 bd9b 	b.w	8009a4c <cppLoop+0x1fa4>

	case 8:
		led.fullColor('W');
 8008f16:	2157      	movs	r1, #87	; 0x57
 8008f18:	482f      	ldr	r0, [pc, #188]	; (8008fd8 <cppLoop+0x1530>)
 8008f1a:	f7f9 f94f 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f1e:	f7f8 f8bf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f22:	2100      	movs	r1, #0
 8008f24:	2000      	movs	r0, #0
 8008f26:	f7f8 f8cb 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008f2a:	482c      	ldr	r0, [pc, #176]	; (8008fdc <cppLoop+0x1534>)
 8008f2c:	f7fa ff51 	bl	8003dd2 <_ZN9LineTrace10getMaxAcc2Ev>
 8008f30:	ee10 3a10 	vmov	r3, s0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f7 fb1f 	bl	8000578 <__aeabi_f2d>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4623      	mov	r3, r4
 8008f42:	4830      	ldr	r0, [pc, #192]	; (8009004 <cppLoop+0x155c>)
 8008f44:	f7f8 f8e6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f48:	2101      	movs	r1, #1
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	f7f8 f8b8 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008f50:	4822      	ldr	r0, [pc, #136]	; (8008fdc <cppLoop+0x1534>)
 8008f52:	f7fa ff2c 	bl	8003dae <_ZN9LineTrace10getMaxDec2Ev>
 8008f56:	ee10 3a10 	vmov	r3, s0
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7f7 fb0c 	bl	8000578 <__aeabi_f2d>
 8008f60:	4603      	mov	r3, r0
 8008f62:	460c      	mov	r4, r1
 8008f64:	461a      	mov	r2, r3
 8008f66:	4623      	mov	r3, r4
 8008f68:	4827      	ldr	r0, [pc, #156]	; (8009008 <cppLoop+0x1560>)
 8008f6a:	f7f8 f8d3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008f6e:	481e      	ldr	r0, [pc, #120]	; (8008fe8 <cppLoop+0x1540>)
 8008f70:	f7f9 f8c0 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b08      	cmp	r3, #8
 8008f78:	bf0c      	ite	eq
 8008f7a:	2301      	moveq	r3, #1
 8008f7c:	2300      	movne	r3, #0
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d045      	beq.n	8009010 <cppLoop+0x1568>
			led.LR(-1, 1);
 8008f84:	2201      	movs	r2, #1
 8008f86:	f04f 31ff 	mov.w	r1, #4294967295
 8008f8a:	4813      	ldr	r0, [pc, #76]	; (8008fd8 <cppLoop+0x1530>)
 8008f8c:	f7f9 f9d2 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f90:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f94:	f000 fe94 	bl	8009cc0 <HAL_Delay>

			selector_acc2++;
 8008f98:	4b1c      	ldr	r3, [pc, #112]	; (800900c <cppLoop+0x1564>)
 8008f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	b21a      	sxth	r2, r3
 8008fa6:	4b19      	ldr	r3, [pc, #100]	; (800900c <cppLoop+0x1564>)
 8008fa8:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008faa:	4b18      	ldr	r3, [pc, #96]	; (800900c <cppLoop+0x1564>)
 8008fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	dd02      	ble.n	8008fba <cppLoop+0x1512>
 8008fb4:	4b15      	ldr	r3, [pc, #84]	; (800900c <cppLoop+0x1564>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8008fc0:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <cppLoop+0x1530>)
 8008fc2:	f7f9 f9b7 	bl	8002334 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008fc6:	f000 bd43 	b.w	8009a50 <cppLoop+0x1fa8>
 8008fca:	bf00      	nop
 8008fcc:	f3af 8000 	nop.w
 8008fd0:	9999999a 	.word	0x9999999a
 8008fd4:	3fb99999 	.word	0x3fb99999
 8008fd8:	200005cc 	.word	0x200005cc
 8008fdc:	2001db5c 	.word	0x2001db5c
 8008fe0:	08019e7c 	.word	0x08019e7c
 8008fe4:	08019e88 	.word	0x08019e88
 8008fe8:	200005c0 	.word	0x200005c0
 8008fec:	2004223c 	.word	0x2004223c
 8008ff0:	2004229c 	.word	0x2004229c
 8008ff4:	200422a4 	.word	0x200422a4
 8008ff8:	08019e94 	.word	0x08019e94
 8008ffc:	08019dc0 	.word	0x08019dc0
 8009000:	08019e9c 	.word	0x08019e9c
 8009004:	08019ea4 	.word	0x08019ea4
 8009008:	08019eb0 	.word	0x08019eb0
 800900c:	2004223e 	.word	0x2004223e
		else if(joy_stick.getValue() == JOY_R){
 8009010:	48bf      	ldr	r0, [pc, #764]	; (8009310 <cppLoop+0x1868>)
 8009012:	f7f9 f86f 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8009016:	4603      	mov	r3, r0
 8009018:	2b10      	cmp	r3, #16
 800901a:	bf0c      	ite	eq
 800901c:	2301      	moveq	r3, #1
 800901e:	2300      	movne	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	2b00      	cmp	r3, #0
 8009024:	d03c      	beq.n	80090a0 <cppLoop+0x15f8>
			led.LR(-1, 1);
 8009026:	2201      	movs	r2, #1
 8009028:	f04f 31ff 	mov.w	r1, #4294967295
 800902c:	48b9      	ldr	r0, [pc, #740]	; (8009314 <cppLoop+0x186c>)
 800902e:	f7f9 f981 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8009032:	2064      	movs	r0, #100	; 0x64
 8009034:	f000 fe44 	bl	8009cc0 <HAL_Delay>
			if(selector_acc2 == 0){
 8009038:	4bb7      	ldr	r3, [pc, #732]	; (8009318 <cppLoop+0x1870>)
 800903a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d113      	bne.n	800906a <cppLoop+0x15c2>
				adj_acc2 = adj_acc2 + 0.1;
 8009042:	4bb6      	ldr	r3, [pc, #728]	; (800931c <cppLoop+0x1874>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4618      	mov	r0, r3
 8009048:	f7f7 fa96 	bl	8000578 <__aeabi_f2d>
 800904c:	a3ae      	add	r3, pc, #696	; (adr r3, 8009308 <cppLoop+0x1860>)
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	f7f7 f933 	bl	80002bc <__adddf3>
 8009056:	4603      	mov	r3, r0
 8009058:	460c      	mov	r4, r1
 800905a:	4618      	mov	r0, r3
 800905c:	4621      	mov	r1, r4
 800905e:	f7f7 fddb 	bl	8000c18 <__aeabi_d2f>
 8009062:	4602      	mov	r2, r0
 8009064:	4bad      	ldr	r3, [pc, #692]	; (800931c <cppLoop+0x1874>)
 8009066:	601a      	str	r2, [r3, #0]
 8009068:	e012      	b.n	8009090 <cppLoop+0x15e8>
				adj_dec2 = adj_dec2 + 0.1;
 800906a:	4bad      	ldr	r3, [pc, #692]	; (8009320 <cppLoop+0x1878>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4618      	mov	r0, r3
 8009070:	f7f7 fa82 	bl	8000578 <__aeabi_f2d>
 8009074:	a3a4      	add	r3, pc, #656	; (adr r3, 8009308 <cppLoop+0x1860>)
 8009076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800907a:	f7f7 f91f 	bl	80002bc <__adddf3>
 800907e:	4603      	mov	r3, r0
 8009080:	460c      	mov	r4, r1
 8009082:	4618      	mov	r0, r3
 8009084:	4621      	mov	r1, r4
 8009086:	f7f7 fdc7 	bl	8000c18 <__aeabi_d2f>
 800908a:	4602      	mov	r2, r0
 800908c:	4ba4      	ldr	r3, [pc, #656]	; (8009320 <cppLoop+0x1878>)
 800908e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009090:	2200      	movs	r2, #0
 8009092:	f04f 31ff 	mov.w	r1, #4294967295
 8009096:	489f      	ldr	r0, [pc, #636]	; (8009314 <cppLoop+0x186c>)
 8009098:	f7f9 f94c 	bl	8002334 <_ZN3LED2LREaa>
		break;
 800909c:	f000 bcd8 	b.w	8009a50 <cppLoop+0x1fa8>
		else if(joy_stick.getValue() == JOY_L){
 80090a0:	489b      	ldr	r0, [pc, #620]	; (8009310 <cppLoop+0x1868>)
 80090a2:	f7f9 f827 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	bf0c      	ite	eq
 80090ac:	2301      	moveq	r3, #1
 80090ae:	2300      	movne	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d03c      	beq.n	8009130 <cppLoop+0x1688>
			led.LR(-1, 1);
 80090b6:	2201      	movs	r2, #1
 80090b8:	f04f 31ff 	mov.w	r1, #4294967295
 80090bc:	4895      	ldr	r0, [pc, #596]	; (8009314 <cppLoop+0x186c>)
 80090be:	f7f9 f939 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80090c2:	2064      	movs	r0, #100	; 0x64
 80090c4:	f000 fdfc 	bl	8009cc0 <HAL_Delay>
			if(selector_acc2 == 0){
 80090c8:	4b93      	ldr	r3, [pc, #588]	; (8009318 <cppLoop+0x1870>)
 80090ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d113      	bne.n	80090fa <cppLoop+0x1652>
				adj_acc2 = adj_acc2 - 0.1;
 80090d2:	4b92      	ldr	r3, [pc, #584]	; (800931c <cppLoop+0x1874>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4618      	mov	r0, r3
 80090d8:	f7f7 fa4e 	bl	8000578 <__aeabi_f2d>
 80090dc:	a38a      	add	r3, pc, #552	; (adr r3, 8009308 <cppLoop+0x1860>)
 80090de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e2:	f7f7 f8e9 	bl	80002b8 <__aeabi_dsub>
 80090e6:	4603      	mov	r3, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	4618      	mov	r0, r3
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7f7 fd93 	bl	8000c18 <__aeabi_d2f>
 80090f2:	4602      	mov	r2, r0
 80090f4:	4b89      	ldr	r3, [pc, #548]	; (800931c <cppLoop+0x1874>)
 80090f6:	601a      	str	r2, [r3, #0]
 80090f8:	e012      	b.n	8009120 <cppLoop+0x1678>
				adj_dec2 = adj_dec2 - 0.1;
 80090fa:	4b89      	ldr	r3, [pc, #548]	; (8009320 <cppLoop+0x1878>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f7f7 fa3a 	bl	8000578 <__aeabi_f2d>
 8009104:	a380      	add	r3, pc, #512	; (adr r3, 8009308 <cppLoop+0x1860>)
 8009106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910a:	f7f7 f8d5 	bl	80002b8 <__aeabi_dsub>
 800910e:	4603      	mov	r3, r0
 8009110:	460c      	mov	r4, r1
 8009112:	4618      	mov	r0, r3
 8009114:	4621      	mov	r1, r4
 8009116:	f7f7 fd7f 	bl	8000c18 <__aeabi_d2f>
 800911a:	4602      	mov	r2, r0
 800911c:	4b80      	ldr	r3, [pc, #512]	; (8009320 <cppLoop+0x1878>)
 800911e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8009120:	2200      	movs	r2, #0
 8009122:	f04f 31ff 	mov.w	r1, #4294967295
 8009126:	487b      	ldr	r0, [pc, #492]	; (8009314 <cppLoop+0x186c>)
 8009128:	f7f9 f904 	bl	8002334 <_ZN3LED2LREaa>
		break;
 800912c:	f000 bc90 	b.w	8009a50 <cppLoop+0x1fa8>
		else if(joy_stick.getValue() == JOY_C){
 8009130:	4877      	ldr	r0, [pc, #476]	; (8009310 <cppLoop+0x1868>)
 8009132:	f7f8 ffdf 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8009136:	4603      	mov	r3, r0
 8009138:	2b02      	cmp	r3, #2
 800913a:	bf0c      	ite	eq
 800913c:	2301      	moveq	r3, #1
 800913e:	2300      	movne	r3, #0
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 8484 	beq.w	8009a50 <cppLoop+0x1fa8>
			led.LR(-1, 1);
 8009148:	2201      	movs	r2, #1
 800914a:	f04f 31ff 	mov.w	r1, #4294967295
 800914e:	4871      	ldr	r0, [pc, #452]	; (8009314 <cppLoop+0x186c>)
 8009150:	f7f9 f8f0 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8009154:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009158:	f000 fdb2 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 800915c:	2300      	movs	r3, #0
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4b6e      	ldr	r3, [pc, #440]	; (800931c <cppLoop+0x1874>)
 8009162:	2201      	movs	r2, #1
 8009164:	496f      	ldr	r1, [pc, #444]	; (8009324 <cppLoop+0x187c>)
 8009166:	4870      	ldr	r0, [pc, #448]	; (8009328 <cppLoop+0x1880>)
 8009168:	f7f8 fb78 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 800916c:	2300      	movs	r3, #0
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	4b6b      	ldr	r3, [pc, #428]	; (8009320 <cppLoop+0x1878>)
 8009172:	2201      	movs	r2, #1
 8009174:	496d      	ldr	r1, [pc, #436]	; (800932c <cppLoop+0x1884>)
 8009176:	486c      	ldr	r0, [pc, #432]	; (8009328 <cppLoop+0x1880>)
 8009178:	f7f8 fb70 	bl	800185c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 800917c:	4b67      	ldr	r3, [pc, #412]	; (800931c <cppLoop+0x1874>)
 800917e:	edd3 7a00 	vldr	s15, [r3]
 8009182:	4b67      	ldr	r3, [pc, #412]	; (8009320 <cppLoop+0x1878>)
 8009184:	ed93 7a00 	vldr	s14, [r3]
 8009188:	eef0 0a47 	vmov.f32	s1, s14
 800918c:	eeb0 0a67 	vmov.f32	s0, s15
 8009190:	4867      	ldr	r0, [pc, #412]	; (8009330 <cppLoop+0x1888>)
 8009192:	f7fa fde0 	bl	8003d56 <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8009196:	2200      	movs	r2, #0
 8009198:	f04f 31ff 	mov.w	r1, #4294967295
 800919c:	485d      	ldr	r0, [pc, #372]	; (8009314 <cppLoop+0x186c>)
 800919e:	f7f9 f8c9 	bl	8002334 <_ZN3LED2LREaa>
		break;
 80091a2:	f000 bc55 	b.w	8009a50 <cppLoop+0x1fa8>

	case 9:
		led.fullColor('~');
 80091a6:	217e      	movs	r1, #126	; 0x7e
 80091a8:	485a      	ldr	r0, [pc, #360]	; (8009314 <cppLoop+0x186c>)
 80091aa:	f7f9 f807 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 80091ae:	f7f7 ff77 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091b2:	2100      	movs	r1, #0
 80091b4:	2000      	movs	r0, #0
 80091b6:	f7f7 ff83 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 80091ba:	485e      	ldr	r0, [pc, #376]	; (8009334 <cppLoop+0x188c>)
 80091bc:	f7f7 ffaa 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80091c0:	2101      	movs	r1, #1
 80091c2:	2000      	movs	r0, #0
 80091c4:	f7f7 ff7c 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 80091c8:	485b      	ldr	r0, [pc, #364]	; (8009338 <cppLoop+0x1890>)
 80091ca:	f7f7 ffa3 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80091ce:	4850      	ldr	r0, [pc, #320]	; (8009310 <cppLoop+0x1868>)
 80091d0:	f7f8 ff90 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	bf0c      	ite	eq
 80091da:	2301      	moveq	r3, #1
 80091dc:	2300      	movne	r3, #0
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	f000 8437 	beq.w	8009a54 <cppLoop+0x1fac>
			led.LR(-1, 1);
 80091e6:	2201      	movs	r2, #1
 80091e8:	f04f 31ff 	mov.w	r1, #4294967295
 80091ec:	4849      	ldr	r0, [pc, #292]	; (8009314 <cppLoop+0x186c>)
 80091ee:	f7f9 f8a1 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80091f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091f6:	f000 fd63 	bl	8009cc0 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80091fa:	ed9f 0a50 	vldr	s0, [pc, #320]	; 800933c <cppLoop+0x1894>
 80091fe:	484c      	ldr	r0, [pc, #304]	; (8009330 <cppLoop+0x1888>)
 8009200:	f7fa fce0 	bl	8003bc4 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8009204:	484a      	ldr	r0, [pc, #296]	; (8009330 <cppLoop+0x1888>)
 8009206:	f7fa ff2b 	bl	8004060 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 800920a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800920e:	f000 fd57 	bl	8009cc0 <HAL_Delay>

			led.fullColor('R');
 8009212:	2152      	movs	r1, #82	; 0x52
 8009214:	483f      	ldr	r0, [pc, #252]	; (8009314 <cppLoop+0x186c>)
 8009216:	f7f8 ffd1 	bl	80021bc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 800921a:	4849      	ldr	r0, [pc, #292]	; (8009340 <cppLoop+0x1898>)
 800921c:	f7f8 fa71 	bl	8001702 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8009220:	f242 7010 	movw	r0, #10000	; 0x2710
 8009224:	f000 fd4c 	bl	8009cc0 <HAL_Delay>

			line_trace.stop();
 8009228:	4841      	ldr	r0, [pc, #260]	; (8009330 <cppLoop+0x1888>)
 800922a:	f7fa ffb9 	bl	80041a0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 800922e:	4945      	ldr	r1, [pc, #276]	; (8009344 <cppLoop+0x189c>)
 8009230:	4845      	ldr	r0, [pc, #276]	; (8009348 <cppLoop+0x18a0>)
 8009232:	f7f8 fa9f 	bl	8001774 <user_fopen>
			float d = encoder.getDistance();
 8009236:	4842      	ldr	r0, [pc, #264]	; (8009340 <cppLoop+0x1898>)
 8009238:	f7f8 fa36 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 800923c:	eef0 7a40 	vmov.f32	s15, s0
 8009240:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8009244:	1d3b      	adds	r3, r7, #4
 8009246:	2201      	movs	r2, #1
 8009248:	4619      	mov	r1, r3
 800924a:	2001      	movs	r0, #1
 800924c:	f7f8 fab4 	bl	80017b8 <sd_write_float>
			user_fclose();
 8009250:	f7f8 faa2 	bl	8001798 <user_fclose>

			led.LR(-1, 0);
 8009254:	2200      	movs	r2, #0
 8009256:	f04f 31ff 	mov.w	r1, #4294967295
 800925a:	482e      	ldr	r0, [pc, #184]	; (8009314 <cppLoop+0x186c>)
 800925c:	f7f9 f86a 	bl	8002334 <_ZN3LED2LREaa>
		}
		break;
 8009260:	e3f8      	b.n	8009a54 <cppLoop+0x1fac>

	case 10:
		led.fullColor('~');
 8009262:	217e      	movs	r1, #126	; 0x7e
 8009264:	482b      	ldr	r0, [pc, #172]	; (8009314 <cppLoop+0x186c>)
 8009266:	f7f8 ffa9 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 800926a:	f7f7 ff19 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800926e:	2100      	movs	r1, #0
 8009270:	2000      	movs	r0, #0
 8009272:	f7f7 ff25 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009276:	4835      	ldr	r0, [pc, #212]	; (800934c <cppLoop+0x18a4>)
 8009278:	f7f7 ff4c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800927c:	2101      	movs	r1, #1
 800927e:	2000      	movs	r0, #0
 8009280:	f7f7 ff1e 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8009284:	4832      	ldr	r0, [pc, #200]	; (8009350 <cppLoop+0x18a8>)
 8009286:	f7f7 ff45 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 800928a:	4821      	ldr	r0, [pc, #132]	; (8009310 <cppLoop+0x1868>)
 800928c:	f7f8 ff32 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8009290:	4603      	mov	r3, r0
 8009292:	2b02      	cmp	r3, #2
 8009294:	bf0c      	ite	eq
 8009296:	2301      	moveq	r3, #1
 8009298:	2300      	movne	r3, #0
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	f000 83db 	beq.w	8009a58 <cppLoop+0x1fb0>
			HAL_Delay(500);
 80092a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092a6:	f000 fd0b 	bl	8009cc0 <HAL_Delay>
			led.LR(-1, 1);
 80092aa:	2201      	movs	r2, #1
 80092ac:	f04f 31ff 	mov.w	r1, #4294967295
 80092b0:	4818      	ldr	r0, [pc, #96]	; (8009314 <cppLoop+0x186c>)
 80092b2:	f7f9 f83f 	bl	8002334 <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80092b6:	2102      	movs	r1, #2
 80092b8:	481d      	ldr	r0, [pc, #116]	; (8009330 <cppLoop+0x1888>)
 80092ba:	f7fa febf 	bl	800403c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80092be:	4b25      	ldr	r3, [pc, #148]	; (8009354 <cppLoop+0x18ac>)
 80092c0:	edd3 7a00 	vldr	s15, [r3]
 80092c4:	eeb0 0a67 	vmov.f32	s0, s15
 80092c8:	4819      	ldr	r0, [pc, #100]	; (8009330 <cppLoop+0x1888>)
 80092ca:	f7fa fc8a 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80092ce:	4b21      	ldr	r3, [pc, #132]	; (8009354 <cppLoop+0x18ac>)
 80092d0:	edd3 7a00 	vldr	s15, [r3]
 80092d4:	eeb0 0a67 	vmov.f32	s0, s15
 80092d8:	4815      	ldr	r0, [pc, #84]	; (8009330 <cppLoop+0x1888>)
 80092da:	f7fa fc92 	bl	8003c02 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80092de:	4b1d      	ldr	r3, [pc, #116]	; (8009354 <cppLoop+0x18ac>)
 80092e0:	edd3 7a00 	vldr	s15, [r3]
 80092e4:	eeb0 0a67 	vmov.f32	s0, s15
 80092e8:	4811      	ldr	r0, [pc, #68]	; (8009330 <cppLoop+0x1888>)
 80092ea:	f7fa fcaa 	bl	8003c42 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80092ee:	4810      	ldr	r0, [pc, #64]	; (8009330 <cppLoop+0x1888>)
 80092f0:	f7fb f89a 	bl	8004428 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80092f4:	2200      	movs	r2, #0
 80092f6:	f04f 31ff 	mov.w	r1, #4294967295
 80092fa:	4806      	ldr	r0, [pc, #24]	; (8009314 <cppLoop+0x186c>)
 80092fc:	f7f9 f81a 	bl	8002334 <_ZN3LED2LREaa>
		}

		break;
 8009300:	e3aa      	b.n	8009a58 <cppLoop+0x1fb0>
 8009302:	bf00      	nop
 8009304:	f3af 8000 	nop.w
 8009308:	9999999a 	.word	0x9999999a
 800930c:	3fb99999 	.word	0x3fb99999
 8009310:	200005c0 	.word	0x200005c0
 8009314:	200005cc 	.word	0x200005cc
 8009318:	2004223e 	.word	0x2004223e
 800931c:	200422ac 	.word	0x200422ac
 8009320:	200422b4 	.word	0x200422b4
 8009324:	08019ebc 	.word	0x08019ebc
 8009328:	08019dc0 	.word	0x08019dc0
 800932c:	08019ec8 	.word	0x08019ec8
 8009330:	2001db5c 	.word	0x2001db5c
 8009334:	08019ed4 	.word	0x08019ed4
 8009338:	08019edc 	.word	0x08019edc
 800933c:	00000000 	.word	0x00000000
 8009340:	2001dabc 	.word	0x2001dabc
 8009344:	08019ee8 	.word	0x08019ee8
 8009348:	08019ef0 	.word	0x08019ef0
 800934c:	08019efc 	.word	0x08019efc
 8009350:	08019f08 	.word	0x08019f08
 8009354:	20042284 	.word	0x20042284

	case 11:
		led.fullColor('~');
 8009358:	217e      	movs	r1, #126	; 0x7e
 800935a:	48c4      	ldr	r0, [pc, #784]	; (800966c <cppLoop+0x1bc4>)
 800935c:	f7f8 ff2e 	bl	80021bc <_ZN3LED9fullColorEc>

lcd_clear();
 8009360:	f7f7 fe9e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009364:	2100      	movs	r1, #0
 8009366:	2000      	movs	r0, #0
 8009368:	f7f7 feaa 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 800936c:	48c0      	ldr	r0, [pc, #768]	; (8009670 <cppLoop+0x1bc8>)
 800936e:	f7f7 fed1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009372:	2101      	movs	r1, #1
 8009374:	2000      	movs	r0, #0
 8009376:	f7f7 fea3 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 800937a:	48be      	ldr	r0, [pc, #760]	; (8009674 <cppLoop+0x1bcc>)
 800937c:	f7f7 feca 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009380:	48bd      	ldr	r0, [pc, #756]	; (8009678 <cppLoop+0x1bd0>)
 8009382:	f7f8 feb7 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8009386:	4603      	mov	r3, r0
 8009388:	2b02      	cmp	r3, #2
 800938a:	bf0c      	ite	eq
 800938c:	2301      	moveq	r3, #1
 800938e:	2300      	movne	r3, #0
 8009390:	b2db      	uxtb	r3, r3
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 8362 	beq.w	8009a5c <cppLoop+0x1fb4>
			HAL_Delay(1000);
 8009398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800939c:	f000 fc90 	bl	8009cc0 <HAL_Delay>
			led.LR(-1, 1);
 80093a0:	2201      	movs	r2, #1
 80093a2:	f04f 31ff 	mov.w	r1, #4294967295
 80093a6:	48b1      	ldr	r0, [pc, #708]	; (800966c <cppLoop+0x1bc4>)
 80093a8:	f7f8 ffc4 	bl	8002334 <_ZN3LED2LREaa>

			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 80093ac:	eddf 1ab3 	vldr	s3, [pc, #716]	; 800967c <cppLoop+0x1bd4>
 80093b0:	ed9f 1ab2 	vldr	s2, [pc, #712]	; 800967c <cppLoop+0x1bd4>
 80093b4:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800967c <cppLoop+0x1bd4>
 80093b8:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800967c <cppLoop+0x1bd4>
 80093bc:	48b0      	ldr	r0, [pc, #704]	; (8009680 <cppLoop+0x1bd8>)
 80093be:	f7f7 ff47 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 80093c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80093c6:	f000 fc7b 	bl	8009cc0 <HAL_Delay>
			esc.off();
 80093ca:	48ad      	ldr	r0, [pc, #692]	; (8009680 <cppLoop+0x1bd8>)
 80093cc:	f7f7 ffda 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80093d0:	2200      	movs	r2, #0
 80093d2:	f04f 31ff 	mov.w	r1, #4294967295
 80093d6:	48a5      	ldr	r0, [pc, #660]	; (800966c <cppLoop+0x1bc4>)
 80093d8:	f7f8 ffac 	bl	8002334 <_ZN3LED2LREaa>

			led.LR(-1, 0);
		}
		*/

		break;
 80093dc:	e33e      	b.n	8009a5c <cppLoop+0x1fb4>

	case 12:
		led.fullColor('~');
 80093de:	217e      	movs	r1, #126	; 0x7e
 80093e0:	48a2      	ldr	r0, [pc, #648]	; (800966c <cppLoop+0x1bc4>)
 80093e2:	f7f8 feeb 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 80093e6:	f7f7 fe5b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80093ea:	2100      	movs	r1, #0
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7f7 fe67 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80093f2:	48a4      	ldr	r0, [pc, #656]	; (8009684 <cppLoop+0x1bdc>)
 80093f4:	f7f7 fe8e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80093f8:	2101      	movs	r1, #1
 80093fa:	2000      	movs	r0, #0
 80093fc:	f7f7 fe60 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009400:	48a1      	ldr	r0, [pc, #644]	; (8009688 <cppLoop+0x1be0>)
 8009402:	f7f7 fe87 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009406:	489c      	ldr	r0, [pc, #624]	; (8009678 <cppLoop+0x1bd0>)
 8009408:	f7f8 fe74 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 800940c:	4603      	mov	r3, r0
 800940e:	2b02      	cmp	r3, #2
 8009410:	bf0c      	ite	eq
 8009412:	2301      	moveq	r3, #1
 8009414:	2300      	movne	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 8321 	beq.w	8009a60 <cppLoop+0x1fb8>
			HAL_Delay(1500);
 800941e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8009422:	f000 fc4d 	bl	8009cc0 <HAL_Delay>
			led.LR(-1, 1);
 8009426:	2201      	movs	r2, #1
 8009428:	f04f 31ff 	mov.w	r1, #4294967295
 800942c:	488f      	ldr	r0, [pc, #572]	; (800966c <cppLoop+0x1bc4>)
 800942e:	f7f8 ff81 	bl	8002334 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8009432:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009436:	f000 fc43 	bl	8009cc0 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 800943a:	eddf 1a90 	vldr	s3, [pc, #576]	; 800967c <cppLoop+0x1bd4>
 800943e:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800967c <cppLoop+0x1bd4>
 8009442:	eddf 0a8e 	vldr	s1, [pc, #568]	; 800967c <cppLoop+0x1bd4>
 8009446:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800967c <cppLoop+0x1bd4>
 800944a:	488d      	ldr	r0, [pc, #564]	; (8009680 <cppLoop+0x1bd8>)
 800944c:	f7f7 ff00 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009450:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009454:	f000 fc34 	bl	8009cc0 <HAL_Delay>

			logger.start();
 8009458:	488c      	ldr	r0, [pc, #560]	; (800968c <cppLoop+0x1be4>)
 800945a:	f7fb fb6a 	bl	8004b32 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 800945e:	488c      	ldr	r0, [pc, #560]	; (8009690 <cppLoop+0x1be8>)
 8009460:	f7fc fc9f 	bl	8005da2 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8009464:	eddf 0a8b 	vldr	s1, [pc, #556]	; 8009694 <cppLoop+0x1bec>
 8009468:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800946c:	4888      	ldr	r0, [pc, #544]	; (8009690 <cppLoop+0x1be8>)
 800946e:	f7fc fc2b 	bl	8005cc8 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009476:	f000 fc23 	bl	8009cc0 <HAL_Delay>

			logger.stop();
 800947a:	4884      	ldr	r0, [pc, #528]	; (800968c <cppLoop+0x1be4>)
 800947c:	f7fb fb69 	bl	8004b52 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009480:	4883      	ldr	r0, [pc, #524]	; (8009690 <cppLoop+0x1be8>)
 8009482:	f7fc fca1 	bl	8005dc8 <_ZN12VelocityCtrl4stopEv>
			esc.off();
 8009486:	487e      	ldr	r0, [pc, #504]	; (8009680 <cppLoop+0x1bd8>)
 8009488:	f7f7 ff7c 	bl	8001384 <_ZN3ESC3offEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 800948c:	4a82      	ldr	r2, [pc, #520]	; (8009698 <cppLoop+0x1bf0>)
 800948e:	4983      	ldr	r1, [pc, #524]	; (800969c <cppLoop+0x1bf4>)
 8009490:	487e      	ldr	r0, [pc, #504]	; (800968c <cppLoop+0x1be4>)
 8009492:	f7fb fa45 	bl	8004920 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009496:	2200      	movs	r2, #0
 8009498:	f04f 31ff 	mov.w	r1, #4294967295
 800949c:	4873      	ldr	r0, [pc, #460]	; (800966c <cppLoop+0x1bc4>)
 800949e:	f7f8 ff49 	bl	8002334 <_ZN3LED2LREaa>
		}
		break;
 80094a2:	e2dd      	b.n	8009a60 <cppLoop+0x1fb8>

	case 13:

		led.fullColor('W');
 80094a4:	2157      	movs	r1, #87	; 0x57
 80094a6:	4871      	ldr	r0, [pc, #452]	; (800966c <cppLoop+0x1bc4>)
 80094a8:	f7f8 fe88 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 80094ac:	f7f7 fdf8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80094b0:	2100      	movs	r1, #0
 80094b2:	2000      	movs	r0, #0
 80094b4:	f7f7 fe04 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80094b8:	4879      	ldr	r0, [pc, #484]	; (80096a0 <cppLoop+0x1bf8>)
 80094ba:	f7f7 fe2b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80094be:	2101      	movs	r1, #1
 80094c0:	2000      	movs	r0, #0
 80094c2:	f7f7 fdfd 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80094c6:	4b77      	ldr	r3, [pc, #476]	; (80096a4 <cppLoop+0x1bfc>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7f7 f854 	bl	8000578 <__aeabi_f2d>
 80094d0:	4603      	mov	r3, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	461a      	mov	r2, r3
 80094d6:	4623      	mov	r3, r4
 80094d8:	4873      	ldr	r0, [pc, #460]	; (80096a8 <cppLoop+0x1c00>)
 80094da:	f7f7 fe1b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80094de:	4866      	ldr	r0, [pc, #408]	; (8009678 <cppLoop+0x1bd0>)
 80094e0:	f7f8 fe08 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	bf0c      	ite	eq
 80094ea:	2301      	moveq	r3, #1
 80094ec:	2300      	movne	r3, #0
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	f000 82b7 	beq.w	8009a64 <cppLoop+0x1fbc>
			HAL_Delay(500);
 80094f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80094fa:	f000 fbe1 	bl	8009cc0 <HAL_Delay>

			led.LR(1, -1);
 80094fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009502:	2101      	movs	r1, #1
 8009504:	4859      	ldr	r0, [pc, #356]	; (800966c <cppLoop+0x1bc4>)
 8009506:	f7f8 ff15 	bl	8002334 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800950a:	2102      	movs	r1, #2
 800950c:	4867      	ldr	r0, [pc, #412]	; (80096ac <cppLoop+0x1c04>)
 800950e:	f7fa fd95 	bl	800403c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009512:	4b67      	ldr	r3, [pc, #412]	; (80096b0 <cppLoop+0x1c08>)
 8009514:	edd3 7a00 	vldr	s15, [r3]
 8009518:	eeb0 0a67 	vmov.f32	s0, s15
 800951c:	4863      	ldr	r0, [pc, #396]	; (80096ac <cppLoop+0x1c04>)
 800951e:	f7fa fb60 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009522:	4b60      	ldr	r3, [pc, #384]	; (80096a4 <cppLoop+0x1bfc>)
 8009524:	edd3 7a00 	vldr	s15, [r3]
 8009528:	eeb0 0a67 	vmov.f32	s0, s15
 800952c:	485f      	ldr	r0, [pc, #380]	; (80096ac <cppLoop+0x1c04>)
 800952e:	f7fa fb68 	bl	8003c02 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009532:	4b5c      	ldr	r3, [pc, #368]	; (80096a4 <cppLoop+0x1bfc>)
 8009534:	edd3 7a00 	vldr	s15, [r3]
 8009538:	eeb0 0a67 	vmov.f32	s0, s15
 800953c:	485b      	ldr	r0, [pc, #364]	; (80096ac <cppLoop+0x1c04>)
 800953e:	f7fa fb80 	bl	8003c42 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009542:	485a      	ldr	r0, [pc, #360]	; (80096ac <cppLoop+0x1c04>)
 8009544:	f7fa ff70 	bl	8004428 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 8009548:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800954c:	f000 fbb8 	bl	8009cc0 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009550:	eddf 1a4a 	vldr	s3, [pc, #296]	; 800967c <cppLoop+0x1bd4>
 8009554:	ed9f 1a49 	vldr	s2, [pc, #292]	; 800967c <cppLoop+0x1bd4>
 8009558:	eddf 0a48 	vldr	s1, [pc, #288]	; 800967c <cppLoop+0x1bd4>
 800955c:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800967c <cppLoop+0x1bd4>
 8009560:	4847      	ldr	r0, [pc, #284]	; (8009680 <cppLoop+0x1bd8>)
 8009562:	f7f7 fe75 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 8009566:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800956a:	f000 fba9 	bl	8009cc0 <HAL_Delay>

			line_trace.running();
 800956e:	484f      	ldr	r0, [pc, #316]	; (80096ac <cppLoop+0x1c04>)
 8009570:	f7fa fda2 	bl	80040b8 <_ZN9LineTrace7runningEv>

			esc.off();
 8009574:	4842      	ldr	r0, [pc, #264]	; (8009680 <cppLoop+0x1bd8>)
 8009576:	f7f7 ff05 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800957a:	f04f 32ff 	mov.w	r2, #4294967295
 800957e:	2100      	movs	r1, #0
 8009580:	483a      	ldr	r0, [pc, #232]	; (800966c <cppLoop+0x1bc4>)
 8009582:	f7f8 fed7 	bl	8002334 <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009586:	e26d      	b.n	8009a64 <cppLoop+0x1fbc>

	case 14:
		led.fullColor('W');
 8009588:	2157      	movs	r1, #87	; 0x57
 800958a:	4838      	ldr	r0, [pc, #224]	; (800966c <cppLoop+0x1bc4>)
 800958c:	f7f8 fe16 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 8009590:	f7f7 fd86 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009594:	2100      	movs	r1, #0
 8009596:	2000      	movs	r0, #0
 8009598:	f7f7 fd92 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800959c:	4845      	ldr	r0, [pc, #276]	; (80096b4 <cppLoop+0x1c0c>)
 800959e:	f7f7 fdb9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80095a2:	2101      	movs	r1, #1
 80095a4:	2000      	movs	r0, #0
 80095a6:	f7f7 fd8b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80095aa:	4b43      	ldr	r3, [pc, #268]	; (80096b8 <cppLoop+0x1c10>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7f6 ffe2 	bl	8000578 <__aeabi_f2d>
 80095b4:	4603      	mov	r3, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	461a      	mov	r2, r3
 80095ba:	4623      	mov	r3, r4
 80095bc:	483a      	ldr	r0, [pc, #232]	; (80096a8 <cppLoop+0x1c00>)
 80095be:	f7f7 fda9 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80095c2:	482d      	ldr	r0, [pc, #180]	; (8009678 <cppLoop+0x1bd0>)
 80095c4:	f7f8 fd96 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	bf0c      	ite	eq
 80095ce:	2301      	moveq	r3, #1
 80095d0:	2300      	movne	r3, #0
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 8247 	beq.w	8009a68 <cppLoop+0x1fc0>
			HAL_Delay(500);
 80095da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095de:	f000 fb6f 	bl	8009cc0 <HAL_Delay>

			led.LR(1, -1);
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	2101      	movs	r1, #1
 80095e8:	4820      	ldr	r0, [pc, #128]	; (800966c <cppLoop+0x1bc4>)
 80095ea:	f7f8 fea3 	bl	8002334 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80095ee:	2101      	movs	r1, #1
 80095f0:	482e      	ldr	r0, [pc, #184]	; (80096ac <cppLoop+0x1c04>)
 80095f2:	f7fa fd23 	bl	800403c <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80095f6:	4b31      	ldr	r3, [pc, #196]	; (80096bc <cppLoop+0x1c14>)
 80095f8:	edd3 7a00 	vldr	s15, [r3]
 80095fc:	eeb0 0a67 	vmov.f32	s0, s15
 8009600:	482a      	ldr	r0, [pc, #168]	; (80096ac <cppLoop+0x1c04>)
 8009602:	f7fa faee 	bl	8003be2 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8009606:	4b2c      	ldr	r3, [pc, #176]	; (80096b8 <cppLoop+0x1c10>)
 8009608:	edd3 7a00 	vldr	s15, [r3]
 800960c:	eeb0 0a67 	vmov.f32	s0, s15
 8009610:	4826      	ldr	r0, [pc, #152]	; (80096ac <cppLoop+0x1c04>)
 8009612:	f7fa faf6 	bl	8003c02 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8009616:	4b29      	ldr	r3, [pc, #164]	; (80096bc <cppLoop+0x1c14>)
 8009618:	edd3 7a00 	vldr	s15, [r3]
 800961c:	eeb0 0a67 	vmov.f32	s0, s15
 8009620:	4822      	ldr	r0, [pc, #136]	; (80096ac <cppLoop+0x1c04>)
 8009622:	f7fa fb0e 	bl	8003c42 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009626:	4821      	ldr	r0, [pc, #132]	; (80096ac <cppLoop+0x1c04>)
 8009628:	f7fa fefe 	bl	8004428 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			HAL_Delay(3000);
 800962c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009630:	f000 fb46 	bl	8009cc0 <HAL_Delay>
			esc.on(BLDC_POWER, BLDC_POWER, BLDC_POWER, BLDC_POWER);
 8009634:	eddf 1a11 	vldr	s3, [pc, #68]	; 800967c <cppLoop+0x1bd4>
 8009638:	ed9f 1a10 	vldr	s2, [pc, #64]	; 800967c <cppLoop+0x1bd4>
 800963c:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800967c <cppLoop+0x1bd4>
 8009640:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800967c <cppLoop+0x1bd4>
 8009644:	480e      	ldr	r0, [pc, #56]	; (8009680 <cppLoop+0x1bd8>)
 8009646:	f7f7 fe03 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 800964a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800964e:	f000 fb37 	bl	8009cc0 <HAL_Delay>

			line_trace.running();
 8009652:	4816      	ldr	r0, [pc, #88]	; (80096ac <cppLoop+0x1c04>)
 8009654:	f7fa fd30 	bl	80040b8 <_ZN9LineTrace7runningEv>

			esc.off();
 8009658:	4809      	ldr	r0, [pc, #36]	; (8009680 <cppLoop+0x1bd8>)
 800965a:	f7f7 fe93 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 800965e:	f04f 32ff 	mov.w	r2, #4294967295
 8009662:	2100      	movs	r1, #0
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <cppLoop+0x1bc4>)
 8009666:	f7f8 fe65 	bl	8002334 <_ZN3LED2LREaa>
		}

		break;
 800966a:	e1fd      	b.n	8009a68 <cppLoop+0x1fc0>
 800966c:	200005cc 	.word	0x200005cc
 8009670:	08019f14 	.word	0x08019f14
 8009674:	08019f18 	.word	0x08019f18
 8009678:	200005c0 	.word	0x200005c0
 800967c:	3e99999a 	.word	0x3e99999a
 8009680:	2001db58 	.word	0x2001db58
 8009684:	08019f20 	.word	0x08019f20
 8009688:	08019f24 	.word	0x08019f24
 800968c:	200005f0 	.word	0x200005f0
 8009690:	2001dadc 	.word	0x2001dadc
 8009694:	00000000 	.word	0x00000000
 8009698:	08019f30 	.word	0x08019f30
 800969c:	08019f3c 	.word	0x08019f3c
 80096a0:	08019f48 	.word	0x08019f48
 80096a4:	20042284 	.word	0x20042284
 80096a8:	08019dec 	.word	0x08019dec
 80096ac:	2001db5c 	.word	0x2001db5c
 80096b0:	20042294 	.word	0x20042294
 80096b4:	08019f54 	.word	0x08019f54
 80096b8:	2004227c 	.word	0x2004227c
 80096bc:	2004228c 	.word	0x2004228c

	case 15:
		led.fullColor('W');
 80096c0:	2157      	movs	r1, #87	; 0x57
 80096c2:	48ab      	ldr	r0, [pc, #684]	; (8009970 <cppLoop+0x1ec8>)
 80096c4:	f7f8 fd7a 	bl	80021bc <_ZN3LED9fullColorEc>

		lcd_clear();
 80096c8:	f7f7 fcea 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80096cc:	2100      	movs	r1, #0
 80096ce:	2000      	movs	r0, #0
 80096d0:	f7f7 fcf6 	bl	80010c0 <lcd_locate>
		lcd_printf("Fast%4.2lf", abs(line_trace.getKp()*1000));
 80096d4:	48a7      	ldr	r0, [pc, #668]	; (8009974 <cppLoop+0x1ecc>)
 80096d6:	f7fa fa02 	bl	8003ade <_ZN9LineTrace5getKpEv>
 80096da:	eeb0 7a40 	vmov.f32	s14, s0
 80096de:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8009978 <cppLoop+0x1ed0>
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	eeb0 0a67 	vmov.f32	s0, s15
 80096ea:	f7f9 f993 	bl	8002a14 <_ZSt3absf>
 80096ee:	ee10 3a10 	vmov	r3, s0
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f6 ff40 	bl	8000578 <__aeabi_f2d>
 80096f8:	4603      	mov	r3, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	461a      	mov	r2, r3
 80096fe:	4623      	mov	r3, r4
 8009700:	489e      	ldr	r0, [pc, #632]	; (800997c <cppLoop+0x1ed4>)
 8009702:	f7f7 fd07 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009706:	2101      	movs	r1, #1
 8009708:	2000      	movs	r0, #0
 800970a:	f7f7 fcd9 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", abs(line_trace.getKi()*100), abs(line_trace.getKd()*10000));
 800970e:	4899      	ldr	r0, [pc, #612]	; (8009974 <cppLoop+0x1ecc>)
 8009710:	f7fa f9f4 	bl	8003afc <_ZN9LineTrace5getKiEv>
 8009714:	eeb0 7a40 	vmov.f32	s14, s0
 8009718:	eddf 7a99 	vldr	s15, [pc, #612]	; 8009980 <cppLoop+0x1ed8>
 800971c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009720:	eeb0 0a67 	vmov.f32	s0, s15
 8009724:	f7f9 f976 	bl	8002a14 <_ZSt3absf>
 8009728:	ee10 3a10 	vmov	r3, s0
 800972c:	4618      	mov	r0, r3
 800972e:	f7f6 ff23 	bl	8000578 <__aeabi_f2d>
 8009732:	4605      	mov	r5, r0
 8009734:	460e      	mov	r6, r1
 8009736:	488f      	ldr	r0, [pc, #572]	; (8009974 <cppLoop+0x1ecc>)
 8009738:	f7fa f9ef 	bl	8003b1a <_ZN9LineTrace5getKdEv>
 800973c:	eeb0 7a40 	vmov.f32	s14, s0
 8009740:	eddf 7a90 	vldr	s15, [pc, #576]	; 8009984 <cppLoop+0x1edc>
 8009744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009748:	eeb0 0a67 	vmov.f32	s0, s15
 800974c:	f7f9 f962 	bl	8002a14 <_ZSt3absf>
 8009750:	ee10 3a10 	vmov	r3, s0
 8009754:	4618      	mov	r0, r3
 8009756:	f7f6 ff0f 	bl	8000578 <__aeabi_f2d>
 800975a:	4603      	mov	r3, r0
 800975c:	460c      	mov	r4, r1
 800975e:	e9cd 3400 	strd	r3, r4, [sp]
 8009762:	462a      	mov	r2, r5
 8009764:	4633      	mov	r3, r6
 8009766:	4888      	ldr	r0, [pc, #544]	; (8009988 <cppLoop+0x1ee0>)
 8009768:	f7f7 fcd4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800976c:	4887      	ldr	r0, [pc, #540]	; (800998c <cppLoop+0x1ee4>)
 800976e:	f7f8 fcc1 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8009772:	4603      	mov	r3, r0
 8009774:	2b08      	cmp	r3, #8
 8009776:	bf0c      	ite	eq
 8009778:	2301      	moveq	r3, #1
 800977a:	2300      	movne	r3, #0
 800977c:	b2db      	uxtb	r3, r3
 800977e:	2b00      	cmp	r3, #0
 8009780:	d021      	beq.n	80097c6 <cppLoop+0x1d1e>
			led.LR(-1, 1);
 8009782:	2201      	movs	r2, #1
 8009784:	f04f 31ff 	mov.w	r1, #4294967295
 8009788:	4879      	ldr	r0, [pc, #484]	; (8009970 <cppLoop+0x1ec8>)
 800978a:	f7f8 fdd3 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800978e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8009792:	f000 fa95 	bl	8009cc0 <HAL_Delay>

			selector++;
 8009796:	4b7e      	ldr	r3, [pc, #504]	; (8009990 <cppLoop+0x1ee8>)
 8009798:	f9b3 3000 	ldrsh.w	r3, [r3]
 800979c:	b29b      	uxth	r3, r3
 800979e:	3301      	adds	r3, #1
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	b21a      	sxth	r2, r3
 80097a4:	4b7a      	ldr	r3, [pc, #488]	; (8009990 <cppLoop+0x1ee8>)
 80097a6:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 80097a8:	4b79      	ldr	r3, [pc, #484]	; (8009990 <cppLoop+0x1ee8>)
 80097aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ae:	2b02      	cmp	r3, #2
 80097b0:	dd02      	ble.n	80097b8 <cppLoop+0x1d10>
 80097b2:	4b77      	ldr	r3, [pc, #476]	; (8009990 <cppLoop+0x1ee8>)
 80097b4:	2200      	movs	r2, #0
 80097b6:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80097b8:	2200      	movs	r2, #0
 80097ba:	f04f 31ff 	mov.w	r1, #4294967295
 80097be:	486c      	ldr	r0, [pc, #432]	; (8009970 <cppLoop+0x1ec8>)
 80097c0:	f7f8 fdb8 	bl	8002334 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 80097c4:	e152      	b.n	8009a6c <cppLoop+0x1fc4>
		else if(joy_stick.getValue() == JOY_R){
 80097c6:	4871      	ldr	r0, [pc, #452]	; (800998c <cppLoop+0x1ee4>)
 80097c8:	f7f8 fc94 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80097cc:	4603      	mov	r3, r0
 80097ce:	2b10      	cmp	r3, #16
 80097d0:	bf0c      	ite	eq
 80097d2:	2301      	moveq	r3, #1
 80097d4:	2300      	movne	r3, #0
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d058      	beq.n	800988e <cppLoop+0x1de6>
			led.LR(-1, 1);
 80097dc:	2201      	movs	r2, #1
 80097de:	f04f 31ff 	mov.w	r1, #4294967295
 80097e2:	4863      	ldr	r0, [pc, #396]	; (8009970 <cppLoop+0x1ec8>)
 80097e4:	f7f8 fda6 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80097e8:	2064      	movs	r0, #100	; 0x64
 80097ea:	f000 fa69 	bl	8009cc0 <HAL_Delay>
			if(selector == 0){
 80097ee:	4b68      	ldr	r3, [pc, #416]	; (8009990 <cppLoop+0x1ee8>)
 80097f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d113      	bne.n	8009820 <cppLoop+0x1d78>
				adj_kp = adj_kp + 0.00001;
 80097f8:	4b66      	ldr	r3, [pc, #408]	; (8009994 <cppLoop+0x1eec>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f6 febb 	bl	8000578 <__aeabi_f2d>
 8009802:	a355      	add	r3, pc, #340	; (adr r3, 8009958 <cppLoop+0x1eb0>)
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	f7f6 fd58 	bl	80002bc <__adddf3>
 800980c:	4603      	mov	r3, r0
 800980e:	460c      	mov	r4, r1
 8009810:	4618      	mov	r0, r3
 8009812:	4621      	mov	r1, r4
 8009814:	f7f7 fa00 	bl	8000c18 <__aeabi_d2f>
 8009818:	4602      	mov	r2, r0
 800981a:	4b5e      	ldr	r3, [pc, #376]	; (8009994 <cppLoop+0x1eec>)
 800981c:	601a      	str	r2, [r3, #0]
 800981e:	e02b      	b.n	8009878 <cppLoop+0x1dd0>
			else if(selector == 1){
 8009820:	4b5b      	ldr	r3, [pc, #364]	; (8009990 <cppLoop+0x1ee8>)
 8009822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d113      	bne.n	8009852 <cppLoop+0x1daa>
				adj_ki = adj_ki + 0.0001;
 800982a:	4b5b      	ldr	r3, [pc, #364]	; (8009998 <cppLoop+0x1ef0>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f7f6 fea2 	bl	8000578 <__aeabi_f2d>
 8009834:	a34a      	add	r3, pc, #296	; (adr r3, 8009960 <cppLoop+0x1eb8>)
 8009836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983a:	f7f6 fd3f 	bl	80002bc <__adddf3>
 800983e:	4603      	mov	r3, r0
 8009840:	460c      	mov	r4, r1
 8009842:	4618      	mov	r0, r3
 8009844:	4621      	mov	r1, r4
 8009846:	f7f7 f9e7 	bl	8000c18 <__aeabi_d2f>
 800984a:	4602      	mov	r2, r0
 800984c:	4b52      	ldr	r3, [pc, #328]	; (8009998 <cppLoop+0x1ef0>)
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	e012      	b.n	8009878 <cppLoop+0x1dd0>
				adj_kd = adj_kd + 0.000001;
 8009852:	4b52      	ldr	r3, [pc, #328]	; (800999c <cppLoop+0x1ef4>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4618      	mov	r0, r3
 8009858:	f7f6 fe8e 	bl	8000578 <__aeabi_f2d>
 800985c:	a342      	add	r3, pc, #264	; (adr r3, 8009968 <cppLoop+0x1ec0>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7f6 fd2b 	bl	80002bc <__adddf3>
 8009866:	4603      	mov	r3, r0
 8009868:	460c      	mov	r4, r1
 800986a:	4618      	mov	r0, r3
 800986c:	4621      	mov	r1, r4
 800986e:	f7f7 f9d3 	bl	8000c18 <__aeabi_d2f>
 8009872:	4602      	mov	r2, r0
 8009874:	4b49      	ldr	r3, [pc, #292]	; (800999c <cppLoop+0x1ef4>)
 8009876:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009878:	2152      	movs	r1, #82	; 0x52
 800987a:	483d      	ldr	r0, [pc, #244]	; (8009970 <cppLoop+0x1ec8>)
 800987c:	f7f8 fc9e 	bl	80021bc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009880:	2200      	movs	r2, #0
 8009882:	f04f 31ff 	mov.w	r1, #4294967295
 8009886:	483a      	ldr	r0, [pc, #232]	; (8009970 <cppLoop+0x1ec8>)
 8009888:	f7f8 fd54 	bl	8002334 <_ZN3LED2LREaa>
		break;
 800988c:	e0ee      	b.n	8009a6c <cppLoop+0x1fc4>
		else if(joy_stick.getValue() == JOY_L){
 800988e:	483f      	ldr	r0, [pc, #252]	; (800998c <cppLoop+0x1ee4>)
 8009890:	f7f8 fc30 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 8009894:	4603      	mov	r3, r0
 8009896:	2b01      	cmp	r3, #1
 8009898:	bf0c      	ite	eq
 800989a:	2301      	moveq	r3, #1
 800989c:	2300      	movne	r3, #0
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d07d      	beq.n	80099a0 <cppLoop+0x1ef8>
			led.LR(-1, 1);
 80098a4:	2201      	movs	r2, #1
 80098a6:	f04f 31ff 	mov.w	r1, #4294967295
 80098aa:	4831      	ldr	r0, [pc, #196]	; (8009970 <cppLoop+0x1ec8>)
 80098ac:	f7f8 fd42 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80098b0:	2064      	movs	r0, #100	; 0x64
 80098b2:	f000 fa05 	bl	8009cc0 <HAL_Delay>
			if(selector == 0){
 80098b6:	4b36      	ldr	r3, [pc, #216]	; (8009990 <cppLoop+0x1ee8>)
 80098b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d113      	bne.n	80098e8 <cppLoop+0x1e40>
				adj_kp = adj_kp - 0.00001;
 80098c0:	4b34      	ldr	r3, [pc, #208]	; (8009994 <cppLoop+0x1eec>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7f6 fe57 	bl	8000578 <__aeabi_f2d>
 80098ca:	a323      	add	r3, pc, #140	; (adr r3, 8009958 <cppLoop+0x1eb0>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fcf2 	bl	80002b8 <__aeabi_dsub>
 80098d4:	4603      	mov	r3, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	4618      	mov	r0, r3
 80098da:	4621      	mov	r1, r4
 80098dc:	f7f7 f99c 	bl	8000c18 <__aeabi_d2f>
 80098e0:	4602      	mov	r2, r0
 80098e2:	4b2c      	ldr	r3, [pc, #176]	; (8009994 <cppLoop+0x1eec>)
 80098e4:	601a      	str	r2, [r3, #0]
 80098e6:	e02b      	b.n	8009940 <cppLoop+0x1e98>
			else if(selector == 1){
 80098e8:	4b29      	ldr	r3, [pc, #164]	; (8009990 <cppLoop+0x1ee8>)
 80098ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d113      	bne.n	800991a <cppLoop+0x1e72>
				adj_ki = adj_ki - 0.0001;
 80098f2:	4b29      	ldr	r3, [pc, #164]	; (8009998 <cppLoop+0x1ef0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7f6 fe3e 	bl	8000578 <__aeabi_f2d>
 80098fc:	a318      	add	r3, pc, #96	; (adr r3, 8009960 <cppLoop+0x1eb8>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	f7f6 fcd9 	bl	80002b8 <__aeabi_dsub>
 8009906:	4603      	mov	r3, r0
 8009908:	460c      	mov	r4, r1
 800990a:	4618      	mov	r0, r3
 800990c:	4621      	mov	r1, r4
 800990e:	f7f7 f983 	bl	8000c18 <__aeabi_d2f>
 8009912:	4602      	mov	r2, r0
 8009914:	4b20      	ldr	r3, [pc, #128]	; (8009998 <cppLoop+0x1ef0>)
 8009916:	601a      	str	r2, [r3, #0]
 8009918:	e012      	b.n	8009940 <cppLoop+0x1e98>
				adj_kd = adj_kd - 0.000001;
 800991a:	4b20      	ldr	r3, [pc, #128]	; (800999c <cppLoop+0x1ef4>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f7f6 fe2a 	bl	8000578 <__aeabi_f2d>
 8009924:	a310      	add	r3, pc, #64	; (adr r3, 8009968 <cppLoop+0x1ec0>)
 8009926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992a:	f7f6 fcc5 	bl	80002b8 <__aeabi_dsub>
 800992e:	4603      	mov	r3, r0
 8009930:	460c      	mov	r4, r1
 8009932:	4618      	mov	r0, r3
 8009934:	4621      	mov	r1, r4
 8009936:	f7f7 f96f 	bl	8000c18 <__aeabi_d2f>
 800993a:	4602      	mov	r2, r0
 800993c:	4b17      	ldr	r3, [pc, #92]	; (800999c <cppLoop+0x1ef4>)
 800993e:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8009940:	2152      	movs	r1, #82	; 0x52
 8009942:	480b      	ldr	r0, [pc, #44]	; (8009970 <cppLoop+0x1ec8>)
 8009944:	f7f8 fc3a 	bl	80021bc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8009948:	2200      	movs	r2, #0
 800994a:	f04f 31ff 	mov.w	r1, #4294967295
 800994e:	4808      	ldr	r0, [pc, #32]	; (8009970 <cppLoop+0x1ec8>)
 8009950:	f7f8 fcf0 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8009954:	e08a      	b.n	8009a6c <cppLoop+0x1fc4>
 8009956:	bf00      	nop
 8009958:	88e368f1 	.word	0x88e368f1
 800995c:	3ee4f8b5 	.word	0x3ee4f8b5
 8009960:	eb1c432d 	.word	0xeb1c432d
 8009964:	3f1a36e2 	.word	0x3f1a36e2
 8009968:	a0b5ed8d 	.word	0xa0b5ed8d
 800996c:	3eb0c6f7 	.word	0x3eb0c6f7
 8009970:	200005cc 	.word	0x200005cc
 8009974:	2001db5c 	.word	0x2001db5c
 8009978:	447a0000 	.word	0x447a0000
 800997c:	08019f60 	.word	0x08019f60
 8009980:	42c80000 	.word	0x42c80000
 8009984:	461c4000 	.word	0x461c4000
 8009988:	08019da4 	.word	0x08019da4
 800998c:	200005c0 	.word	0x200005c0
 8009990:	2004223a 	.word	0x2004223a
 8009994:	20042244 	.word	0x20042244
 8009998:	2004224c 	.word	0x2004224c
 800999c:	20042254 	.word	0x20042254
		else if(joy_stick.getValue() == JOY_C){
 80099a0:	4836      	ldr	r0, [pc, #216]	; (8009a7c <cppLoop+0x1fd4>)
 80099a2:	f7f8 fba7 	bl	80020f4 <_ZN8JoyStick8getValueEv>
 80099a6:	4603      	mov	r3, r0
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d05a      	beq.n	8009a6c <cppLoop+0x1fc4>
			led.LR(-1, 1);
 80099b6:	2201      	movs	r2, #1
 80099b8:	f04f 31ff 	mov.w	r1, #4294967295
 80099bc:	4830      	ldr	r0, [pc, #192]	; (8009a80 <cppLoop+0x1fd8>)
 80099be:	f7f8 fcb9 	bl	8002334 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80099c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80099c6:	f000 f97b 	bl	8009cc0 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80099ca:	2300      	movs	r3, #0
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	4b2d      	ldr	r3, [pc, #180]	; (8009a84 <cppLoop+0x1fdc>)
 80099d0:	2201      	movs	r2, #1
 80099d2:	492d      	ldr	r1, [pc, #180]	; (8009a88 <cppLoop+0x1fe0>)
 80099d4:	482d      	ldr	r0, [pc, #180]	; (8009a8c <cppLoop+0x1fe4>)
 80099d6:	f7f7 ff41 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 80099da:	2300      	movs	r3, #0
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4b2c      	ldr	r3, [pc, #176]	; (8009a90 <cppLoop+0x1fe8>)
 80099e0:	2201      	movs	r2, #1
 80099e2:	492c      	ldr	r1, [pc, #176]	; (8009a94 <cppLoop+0x1fec>)
 80099e4:	4829      	ldr	r0, [pc, #164]	; (8009a8c <cppLoop+0x1fe4>)
 80099e6:	f7f7 ff39 	bl	800185c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 80099ea:	2300      	movs	r3, #0
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	4b2a      	ldr	r3, [pc, #168]	; (8009a98 <cppLoop+0x1ff0>)
 80099f0:	2201      	movs	r2, #1
 80099f2:	492a      	ldr	r1, [pc, #168]	; (8009a9c <cppLoop+0x1ff4>)
 80099f4:	4825      	ldr	r0, [pc, #148]	; (8009a8c <cppLoop+0x1fe4>)
 80099f6:	f7f7 ff31 	bl	800185c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 80099fa:	4b22      	ldr	r3, [pc, #136]	; (8009a84 <cppLoop+0x1fdc>)
 80099fc:	edd3 7a00 	vldr	s15, [r3]
 8009a00:	4b23      	ldr	r3, [pc, #140]	; (8009a90 <cppLoop+0x1fe8>)
 8009a02:	ed93 7a00 	vldr	s14, [r3]
 8009a06:	4b24      	ldr	r3, [pc, #144]	; (8009a98 <cppLoop+0x1ff0>)
 8009a08:	edd3 6a00 	vldr	s13, [r3]
 8009a0c:	eeb0 1a66 	vmov.f32	s2, s13
 8009a10:	eef0 0a47 	vmov.f32	s1, s14
 8009a14:	eeb0 0a67 	vmov.f32	s0, s15
 8009a18:	4821      	ldr	r0, [pc, #132]	; (8009aa0 <cppLoop+0x1ff8>)
 8009a1a:	f7fa f847 	bl	8003aac <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	f04f 31ff 	mov.w	r1, #4294967295
 8009a24:	4816      	ldr	r0, [pc, #88]	; (8009a80 <cppLoop+0x1fd8>)
 8009a26:	f7f8 fc85 	bl	8002334 <_ZN3LED2LREaa>
		break;
 8009a2a:	e01f      	b.n	8009a6c <cppLoop+0x1fc4>

	default:
		break;
 8009a2c:	bf00      	nop
 8009a2e:	e01e      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a30:	bf00      	nop
 8009a32:	e01c      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a34:	bf00      	nop
 8009a36:	e01a      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a38:	bf00      	nop
 8009a3a:	e018      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a3c:	bf00      	nop
 8009a3e:	e016      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a40:	bf00      	nop
 8009a42:	e014      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a44:	bf00      	nop
 8009a46:	e012      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a48:	bf00      	nop
 8009a4a:	e010      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a4c:	bf00      	nop
 8009a4e:	e00e      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a50:	bf00      	nop
 8009a52:	e00c      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a54:	bf00      	nop
 8009a56:	e00a      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a58:	bf00      	nop
 8009a5a:	e008      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a5c:	bf00      	nop
 8009a5e:	e006      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a60:	bf00      	nop
 8009a62:	e004      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a64:	bf00      	nop
 8009a66:	e002      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a68:	bf00      	nop
 8009a6a:	e000      	b.n	8009a6e <cppLoop+0x1fc6>
		break;
 8009a6c:	bf00      	nop

	}

	HAL_Delay(30);
 8009a6e:	201e      	movs	r0, #30
 8009a70:	f000 f926 	bl	8009cc0 <HAL_Delay>

}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a7c:	200005c0 	.word	0x200005c0
 8009a80:	200005cc 	.word	0x200005cc
 8009a84:	20042244 	.word	0x20042244
 8009a88:	08019f6c 	.word	0x08019f6c
 8009a8c:	08019dc0 	.word	0x08019dc0
 8009a90:	2004224c 	.word	0x2004224c
 8009a94:	08019f74 	.word	0x08019f74
 8009a98:	20042254 	.word	0x20042254
 8009a9c:	08019f7c 	.word	0x08019f7c
 8009aa0:	2001db5c 	.word	0x2001db5c

08009aa4 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af06      	add	r7, sp, #24
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d142      	bne.n	8009b3a <_Z41__static_initialization_and_destruction_0ii+0x96>
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d13d      	bne.n	8009b3a <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009abe:	4821      	ldr	r0, [pc, #132]	; (8009b44 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009ac0:	f7f8 fc70 	bl	80023a4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8009ac4:	4820      	ldr	r0, [pc, #128]	; (8009b48 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009ac6:	f7fb fc43 	bl	8005350 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009aca:	4820      	ldr	r0, [pc, #128]	; (8009b4c <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009acc:	f7f8 fb06 	bl	80020dc <_ZN8JoyStickC1Ev>
Motor motor;
 8009ad0:	481f      	ldr	r0, [pc, #124]	; (8009b50 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009ad2:	f7fb f84e 	bl	8004b72 <_ZN5MotorC1Ev>
IMU imu;
 8009ad6:	481f      	ldr	r0, [pc, #124]	; (8009b54 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009ad8:	f7f8 f938 	bl	8001d4c <_ZN3IMUC1Ev>
Logger logger;
 8009adc:	481e      	ldr	r0, [pc, #120]	; (8009b58 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009ade:	f7fa fd93 	bl	8004608 <_ZN6LoggerC1Ev>
Encoder encoder;
 8009ae2:	481e      	ldr	r0, [pc, #120]	; (8009b5c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009ae4:	f7f7 fc72 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 8009ae8:	4b1a      	ldr	r3, [pc, #104]	; (8009b54 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009aea:	4a1c      	ldr	r2, [pc, #112]	; (8009b5c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009aec:	4918      	ldr	r1, [pc, #96]	; (8009b50 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009aee:	481c      	ldr	r0, [pc, #112]	; (8009b60 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009af0:	f7fb ffb6 	bl	8005a60 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009af4:	4b1a      	ldr	r3, [pc, #104]	; (8009b60 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009af6:	4a17      	ldr	r2, [pc, #92]	; (8009b54 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009af8:	4918      	ldr	r1, [pc, #96]	; (8009b5c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009afa:	481a      	ldr	r0, [pc, #104]	; (8009b64 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009afc:	f7fb f938 	bl	8004d70 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 8009b00:	4819      	ldr	r0, [pc, #100]	; (8009b68 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b02:	f7f7 fb67 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009b06:	4b18      	ldr	r3, [pc, #96]	; (8009b68 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009b08:	9305      	str	r3, [sp, #20]
 8009b0a:	4b12      	ldr	r3, [pc, #72]	; (8009b54 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	4b12      	ldr	r3, [pc, #72]	; (8009b58 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b10:	9303      	str	r3, [sp, #12]
 8009b12:	4b14      	ldr	r3, [pc, #80]	; (8009b64 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	4b11      	ldr	r3, [pc, #68]	; (8009b5c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	4b0b      	ldr	r3, [pc, #44]	; (8009b48 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	4b10      	ldr	r3, [pc, #64]	; (8009b60 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009b20:	4a08      	ldr	r2, [pc, #32]	; (8009b44 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009b22:	490b      	ldr	r1, [pc, #44]	; (8009b50 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b24:	4811      	ldr	r0, [pc, #68]	; (8009b6c <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009b26:	f7f8 ff85 	bl	8002a34 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009b2a:	4a09      	ldr	r2, [pc, #36]	; (8009b50 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009b2c:	490a      	ldr	r1, [pc, #40]	; (8009b58 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009b2e:	4810      	ldr	r0, [pc, #64]	; (8009b70 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8009b30:	f7fb fd7c 	bl	800562c <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009b34:	480f      	ldr	r0, [pc, #60]	; (8009b74 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009b36:	f7fb fa9d 	bl	8005074 <_ZN13PathFollowingC1Ev>
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
 8009b42:	bf00      	nop
 8009b44:	200002bc 	.word	0x200002bc
 8009b48:	200005b4 	.word	0x200005b4
 8009b4c:	200005c0 	.word	0x200005c0
 8009b50:	200005c8 	.word	0x200005c8
 8009b54:	200005dc 	.word	0x200005dc
 8009b58:	200005f0 	.word	0x200005f0
 8009b5c:	2001dabc 	.word	0x2001dabc
 8009b60:	2001dadc 	.word	0x2001dadc
 8009b64:	2001db18 	.word	0x2001db18
 8009b68:	2001db58 	.word	0x2001db58
 8009b6c:	2001db5c 	.word	0x2001db5c
 8009b70:	2002a904 	.word	0x2002a904
 8009b74:	2002ab10 	.word	0x2002ab10

08009b78 <_GLOBAL__sub_I_line_sensor>:
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b80:	2001      	movs	r0, #1
 8009b82:	f7ff ff8f 	bl	8009aa4 <_Z41__static_initialization_and_destruction_0ii>
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009b88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009bc0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009b8c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009b8e:	e003      	b.n	8009b98 <LoopCopyDataInit>

08009b90 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009b90:	4b0c      	ldr	r3, [pc, #48]	; (8009bc4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009b92:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009b94:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009b96:	3104      	adds	r1, #4

08009b98 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009b98:	480b      	ldr	r0, [pc, #44]	; (8009bc8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	; (8009bcc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009b9c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009b9e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009ba0:	d3f6      	bcc.n	8009b90 <CopyDataInit>
  ldr  r2, =_sbss
 8009ba2:	4a0b      	ldr	r2, [pc, #44]	; (8009bd0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009ba4:	e002      	b.n	8009bac <LoopFillZerobss>

08009ba6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009ba6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009ba8:	f842 3b04 	str.w	r3, [r2], #4

08009bac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009bac:	4b09      	ldr	r3, [pc, #36]	; (8009bd4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009bae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009bb0:	d3f9      	bcc.n	8009ba6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009bb2:	f7fd fe57 	bl	8007864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009bb6:	f00b fdd3 	bl	8015760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009bba:	f7fc f991 	bl	8005ee0 <main>
  bx  lr    
 8009bbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009bc0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8009bc4:	0801a570 	.word	0x0801a570
  ldr  r0, =_sdata
 8009bc8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009bcc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009bd0:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8009bd4:	20046c98 	.word	0x20046c98

08009bd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009bd8:	e7fe      	b.n	8009bd8 <ADC_IRQHandler>
	...

08009bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009be0:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <HAL_Init+0x40>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a0d      	ldr	r2, [pc, #52]	; (8009c1c <HAL_Init+0x40>)
 8009be6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009bea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009bec:	4b0b      	ldr	r3, [pc, #44]	; (8009c1c <HAL_Init+0x40>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0a      	ldr	r2, [pc, #40]	; (8009c1c <HAL_Init+0x40>)
 8009bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009bf6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bf8:	4b08      	ldr	r3, [pc, #32]	; (8009c1c <HAL_Init+0x40>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a07      	ldr	r2, [pc, #28]	; (8009c1c <HAL_Init+0x40>)
 8009bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c04:	2003      	movs	r0, #3
 8009c06:	f000 fd51 	bl	800a6ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	f000 f808 	bl	8009c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c10:	f7fd f878 	bl	8006d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c14:	2300      	movs	r3, #0
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	40023c00 	.word	0x40023c00

08009c20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c28:	4b12      	ldr	r3, [pc, #72]	; (8009c74 <HAL_InitTick+0x54>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	4b12      	ldr	r3, [pc, #72]	; (8009c78 <HAL_InitTick+0x58>)
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	4619      	mov	r1, r3
 8009c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 fd69 	bl	800a716 <HAL_SYSTICK_Config>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e00e      	b.n	8009c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2b0f      	cmp	r3, #15
 8009c52:	d80a      	bhi.n	8009c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c54:	2200      	movs	r2, #0
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	f000 fd31 	bl	800a6c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c60:	4a06      	ldr	r2, [pc, #24]	; (8009c7c <HAL_InitTick+0x5c>)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c66:	2300      	movs	r3, #0
 8009c68:	e000      	b.n	8009c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20000000 	.word	0x20000000
 8009c78:	20000008 	.word	0x20000008
 8009c7c:	20000004 	.word	0x20000004

08009c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009c80:	b480      	push	{r7}
 8009c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009c84:	4b06      	ldr	r3, [pc, #24]	; (8009ca0 <HAL_IncTick+0x20>)
 8009c86:	781b      	ldrb	r3, [r3, #0]
 8009c88:	461a      	mov	r2, r3
 8009c8a:	4b06      	ldr	r3, [pc, #24]	; (8009ca4 <HAL_IncTick+0x24>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4413      	add	r3, r2
 8009c90:	4a04      	ldr	r2, [pc, #16]	; (8009ca4 <HAL_IncTick+0x24>)
 8009c92:	6013      	str	r3, [r2, #0]
}
 8009c94:	bf00      	nop
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	20000008 	.word	0x20000008
 8009ca4:	20044c20 	.word	0x20044c20

08009ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	af00      	add	r7, sp, #0
  return uwTick;
 8009cac:	4b03      	ldr	r3, [pc, #12]	; (8009cbc <HAL_GetTick+0x14>)
 8009cae:	681b      	ldr	r3, [r3, #0]
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	20044c20 	.word	0x20044c20

08009cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cc8:	f7ff ffee 	bl	8009ca8 <HAL_GetTick>
 8009ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd8:	d005      	beq.n	8009ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <HAL_Delay+0x40>)
 8009cdc:	781b      	ldrb	r3, [r3, #0]
 8009cde:	461a      	mov	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009ce6:	bf00      	nop
 8009ce8:	f7ff ffde 	bl	8009ca8 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d8f7      	bhi.n	8009ce8 <HAL_Delay+0x28>
  {
  }
}
 8009cf8:	bf00      	nop
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20000008 	.word	0x20000008

08009d04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d101      	bne.n	8009d1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e033      	b.n	8009d82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d109      	bne.n	8009d36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7fd f816 	bl	8006d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d3a:	f003 0310 	and.w	r3, r3, #16
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d118      	bne.n	8009d74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d4a:	f023 0302 	bic.w	r3, r3, #2
 8009d4e:	f043 0202 	orr.w	r2, r3, #2
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 fa5a 	bl	800a210 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d66:	f023 0303 	bic.w	r3, r3, #3
 8009d6a:	f043 0201 	orr.w	r2, r3, #1
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	641a      	str	r2, [r3, #64]	; 0x40
 8009d72:	e001      	b.n	8009d78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b086      	sub	sp, #24
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d101      	bne.n	8009daa <HAL_ADC_Start_DMA+0x1e>
 8009da6:	2302      	movs	r3, #2
 8009da8:	e0cc      	b.n	8009f44 <HAL_ADC_Start_DMA+0x1b8>
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	f003 0301 	and.w	r3, r3, #1
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d018      	beq.n	8009df2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	689a      	ldr	r2, [r3, #8]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0201 	orr.w	r2, r2, #1
 8009dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009dd0:	4b5e      	ldr	r3, [pc, #376]	; (8009f4c <HAL_ADC_Start_DMA+0x1c0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a5e      	ldr	r2, [pc, #376]	; (8009f50 <HAL_ADC_Start_DMA+0x1c4>)
 8009dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dda:	0c9a      	lsrs	r2, r3, #18
 8009ddc:	4613      	mov	r3, r2
 8009dde:	005b      	lsls	r3, r3, #1
 8009de0:	4413      	add	r3, r2
 8009de2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009de4:	e002      	b.n	8009dec <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	3b01      	subs	r3, #1
 8009dea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f9      	bne.n	8009de6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	f003 0301 	and.w	r3, r3, #1
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	f040 80a0 	bne.w	8009f42 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e06:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d007      	beq.n	8009e34 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009e2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e40:	d106      	bne.n	8009e50 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e46:	f023 0206 	bic.w	r2, r3, #6
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	645a      	str	r2, [r3, #68]	; 0x44
 8009e4e:	e002      	b.n	8009e56 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009e5e:	4b3d      	ldr	r3, [pc, #244]	; (8009f54 <HAL_ADC_Start_DMA+0x1c8>)
 8009e60:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e66:	4a3c      	ldr	r2, [pc, #240]	; (8009f58 <HAL_ADC_Start_DMA+0x1cc>)
 8009e68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6e:	4a3b      	ldr	r2, [pc, #236]	; (8009f5c <HAL_ADC_Start_DMA+0x1d0>)
 8009e70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e76:	4a3a      	ldr	r2, [pc, #232]	; (8009f60 <HAL_ADC_Start_DMA+0x1d4>)
 8009e78:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009e82:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009e92:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ea2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	334c      	adds	r3, #76	; 0x4c
 8009eae:	4619      	mov	r1, r3
 8009eb0:	68ba      	ldr	r2, [r7, #8]
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f000 fcea 	bl	800a88c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	f003 031f 	and.w	r3, r3, #31
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d12a      	bne.n	8009f1a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a26      	ldr	r2, [pc, #152]	; (8009f64 <HAL_ADC_Start_DMA+0x1d8>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d015      	beq.n	8009efa <HAL_ADC_Start_DMA+0x16e>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a25      	ldr	r2, [pc, #148]	; (8009f68 <HAL_ADC_Start_DMA+0x1dc>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d105      	bne.n	8009ee4 <HAL_ADC_Start_DMA+0x158>
 8009ed8:	4b1e      	ldr	r3, [pc, #120]	; (8009f54 <HAL_ADC_Start_DMA+0x1c8>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f003 031f 	and.w	r3, r3, #31
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00a      	beq.n	8009efa <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a20      	ldr	r2, [pc, #128]	; (8009f6c <HAL_ADC_Start_DMA+0x1e0>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d129      	bne.n	8009f42 <HAL_ADC_Start_DMA+0x1b6>
 8009eee:	4b19      	ldr	r3, [pc, #100]	; (8009f54 <HAL_ADC_Start_DMA+0x1c8>)
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	f003 031f 	and.w	r3, r3, #31
 8009ef6:	2b0f      	cmp	r3, #15
 8009ef8:	d823      	bhi.n	8009f42 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d11c      	bne.n	8009f42 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f16:	609a      	str	r2, [r3, #8]
 8009f18:	e013      	b.n	8009f42 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a11      	ldr	r2, [pc, #68]	; (8009f64 <HAL_ADC_Start_DMA+0x1d8>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d10e      	bne.n	8009f42 <HAL_ADC_Start_DMA+0x1b6>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d107      	bne.n	8009f42 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009f40:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20000000 	.word	0x20000000
 8009f50:	431bde83 	.word	0x431bde83
 8009f54:	40012300 	.word	0x40012300
 8009f58:	0800a409 	.word	0x0800a409
 8009f5c:	0800a4c3 	.word	0x0800a4c3
 8009f60:	0800a4df 	.word	0x0800a4df
 8009f64:	40012000 	.word	0x40012000
 8009f68:	40012100 	.word	0x40012100
 8009f6c:	40012200 	.word	0x40012200

08009f70 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d101      	bne.n	8009fc8 <HAL_ADC_ConfigChannel+0x1c>
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e113      	b.n	800a1f0 <HAL_ADC_ConfigChannel+0x244>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2b09      	cmp	r3, #9
 8009fd6:	d925      	bls.n	800a024 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68d9      	ldr	r1, [r3, #12]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	005b      	lsls	r3, r3, #1
 8009fea:	4413      	add	r3, r2
 8009fec:	3b1e      	subs	r3, #30
 8009fee:	2207      	movs	r2, #7
 8009ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ff4:	43da      	mvns	r2, r3
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	400a      	ands	r2, r1
 8009ffc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	68d9      	ldr	r1, [r3, #12]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	689a      	ldr	r2, [r3, #8]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	b29b      	uxth	r3, r3
 800a00e:	4618      	mov	r0, r3
 800a010:	4603      	mov	r3, r0
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	4403      	add	r3, r0
 800a016:	3b1e      	subs	r3, #30
 800a018:	409a      	lsls	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	430a      	orrs	r2, r1
 800a020:	60da      	str	r2, [r3, #12]
 800a022:	e022      	b.n	800a06a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6919      	ldr	r1, [r3, #16]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	461a      	mov	r2, r3
 800a032:	4613      	mov	r3, r2
 800a034:	005b      	lsls	r3, r3, #1
 800a036:	4413      	add	r3, r2
 800a038:	2207      	movs	r2, #7
 800a03a:	fa02 f303 	lsl.w	r3, r2, r3
 800a03e:	43da      	mvns	r2, r3
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	400a      	ands	r2, r1
 800a046:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	6919      	ldr	r1, [r3, #16]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	689a      	ldr	r2, [r3, #8]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	b29b      	uxth	r3, r3
 800a058:	4618      	mov	r0, r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	005b      	lsls	r3, r3, #1
 800a05e:	4403      	add	r3, r0
 800a060:	409a      	lsls	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	430a      	orrs	r2, r1
 800a068:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	2b06      	cmp	r3, #6
 800a070:	d824      	bhi.n	800a0bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	4413      	add	r3, r2
 800a082:	3b05      	subs	r3, #5
 800a084:	221f      	movs	r2, #31
 800a086:	fa02 f303 	lsl.w	r3, r2, r3
 800a08a:	43da      	mvns	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	400a      	ands	r2, r1
 800a092:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	4413      	add	r3, r2
 800a0ac:	3b05      	subs	r3, #5
 800a0ae:	fa00 f203 	lsl.w	r2, r0, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	430a      	orrs	r2, r1
 800a0b8:	635a      	str	r2, [r3, #52]	; 0x34
 800a0ba:	e04c      	b.n	800a156 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	2b0c      	cmp	r3, #12
 800a0c2:	d824      	bhi.n	800a10e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	3b23      	subs	r3, #35	; 0x23
 800a0d6:	221f      	movs	r2, #31
 800a0d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0dc:	43da      	mvns	r2, r3
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	400a      	ands	r2, r1
 800a0e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	b29b      	uxth	r3, r3
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	3b23      	subs	r3, #35	; 0x23
 800a100:	fa00 f203 	lsl.w	r2, r0, r3
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	430a      	orrs	r2, r1
 800a10a:	631a      	str	r2, [r3, #48]	; 0x30
 800a10c:	e023      	b.n	800a156 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	3b41      	subs	r3, #65	; 0x41
 800a120:	221f      	movs	r2, #31
 800a122:	fa02 f303 	lsl.w	r3, r2, r3
 800a126:	43da      	mvns	r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	400a      	ands	r2, r1
 800a12e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	4618      	mov	r0, r3
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	4613      	mov	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	4413      	add	r3, r2
 800a148:	3b41      	subs	r3, #65	; 0x41
 800a14a:	fa00 f203 	lsl.w	r2, r0, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a156:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <HAL_ADC_ConfigChannel+0x250>)
 800a158:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a28      	ldr	r2, [pc, #160]	; (800a200 <HAL_ADC_ConfigChannel+0x254>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d10f      	bne.n	800a184 <HAL_ADC_ConfigChannel+0x1d8>
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	2b12      	cmp	r3, #18
 800a16a:	d10b      	bne.n	800a184 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a1d      	ldr	r2, [pc, #116]	; (800a200 <HAL_ADC_ConfigChannel+0x254>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d12b      	bne.n	800a1e6 <HAL_ADC_ConfigChannel+0x23a>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a1c      	ldr	r2, [pc, #112]	; (800a204 <HAL_ADC_ConfigChannel+0x258>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <HAL_ADC_ConfigChannel+0x1f4>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	2b11      	cmp	r3, #17
 800a19e:	d122      	bne.n	800a1e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a11      	ldr	r2, [pc, #68]	; (800a204 <HAL_ADC_ConfigChannel+0x258>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d111      	bne.n	800a1e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a1c2:	4b11      	ldr	r3, [pc, #68]	; (800a208 <HAL_ADC_ConfigChannel+0x25c>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a11      	ldr	r2, [pc, #68]	; (800a20c <HAL_ADC_ConfigChannel+0x260>)
 800a1c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a1cc:	0c9a      	lsrs	r2, r3, #18
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	4413      	add	r3, r2
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1d8:	e002      	b.n	800a1e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	3b01      	subs	r3, #1
 800a1de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d1f9      	bne.n	800a1da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr
 800a1fc:	40012300 	.word	0x40012300
 800a200:	40012000 	.word	0x40012000
 800a204:	10000012 	.word	0x10000012
 800a208:	20000000 	.word	0x20000000
 800a20c:	431bde83 	.word	0x431bde83

0800a210 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800a210:	b480      	push	{r7}
 800a212:	b085      	sub	sp, #20
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a218:	4b79      	ldr	r3, [pc, #484]	; (800a400 <ADC_Init+0x1f0>)
 800a21a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	431a      	orrs	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a244:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	6859      	ldr	r1, [r3, #4]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	021a      	lsls	r2, r3, #8
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	685a      	ldr	r2, [r3, #4]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6859      	ldr	r1, [r3, #4]
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689a      	ldr	r2, [r3, #8]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a28a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	6899      	ldr	r1, [r3, #8]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	68da      	ldr	r2, [r3, #12]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a2:	4a58      	ldr	r2, [pc, #352]	; (800a404 <ADC_Init+0x1f4>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d022      	beq.n	800a2ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6899      	ldr	r1, [r3, #8]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	689a      	ldr	r2, [r3, #8]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a2d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	6899      	ldr	r1, [r3, #8]
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	609a      	str	r2, [r3, #8]
 800a2ec:	e00f      	b.n	800a30e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689a      	ldr	r2, [r3, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a2fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a30c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f022 0202 	bic.w	r2, r2, #2
 800a31c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6899      	ldr	r1, [r3, #8]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	7e1b      	ldrb	r3, [r3, #24]
 800a328:	005a      	lsls	r2, r3, #1
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d01b      	beq.n	800a374 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685a      	ldr	r2, [r3, #4]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a34a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a35a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6859      	ldr	r1, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	3b01      	subs	r3, #1
 800a368:	035a      	lsls	r2, r3, #13
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	605a      	str	r2, [r3, #4]
 800a372:	e007      	b.n	800a384 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	685a      	ldr	r2, [r3, #4]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a382:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a392:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	051a      	lsls	r2, r3, #20
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	430a      	orrs	r2, r1
 800a3a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	6899      	ldr	r1, [r3, #8]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3c6:	025a      	lsls	r2, r3, #9
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	689a      	ldr	r2, [r3, #8]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	6899      	ldr	r1, [r3, #8]
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	029a      	lsls	r2, r3, #10
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	430a      	orrs	r2, r1
 800a3f2:	609a      	str	r2, [r3, #8]
}
 800a3f4:	bf00      	nop
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	40012300 	.word	0x40012300
 800a404:	0f000001 	.word	0x0f000001

0800a408 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a414:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d13c      	bne.n	800a49c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a426:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d12b      	bne.n	800a494 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a440:	2b00      	cmp	r3, #0
 800a442:	d127      	bne.n	800a494 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a44a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d006      	beq.n	800a460 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d119      	bne.n	800a494 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	685a      	ldr	r2, [r3, #4]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f022 0220 	bic.w	r2, r2, #32
 800a46e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a474:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a484:	2b00      	cmp	r3, #0
 800a486:	d105      	bne.n	800a494 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48c:	f043 0201 	orr.w	r2, r3, #1
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	f7ff fd6b 	bl	8009f70 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a49a:	e00e      	b.n	800a4ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d003      	beq.n	800a4b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff fd75 	bl	8009f98 <HAL_ADC_ErrorCallback>
}
 800a4ae:	e004      	b.n	800a4ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	4798      	blx	r3
}
 800a4ba:	bf00      	nop
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}

0800a4c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b084      	sub	sp, #16
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fd57 	bl	8009f84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2240      	movs	r2, #64	; 0x40
 800a4f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f6:	f043 0204 	orr.w	r2, r3, #4
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a4fe:	68f8      	ldr	r0, [r7, #12]
 800a500:	f7ff fd4a 	bl	8009f98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b085      	sub	sp, #20
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f003 0307 	and.w	r3, r3, #7
 800a51a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a51c:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <__NVIC_SetPriorityGrouping+0x44>)
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a522:	68ba      	ldr	r2, [r7, #8]
 800a524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a528:	4013      	ands	r3, r2
 800a52a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a53c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a53e:	4a04      	ldr	r2, [pc, #16]	; (800a550 <__NVIC_SetPriorityGrouping+0x44>)
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	60d3      	str	r3, [r2, #12]
}
 800a544:	bf00      	nop
 800a546:	3714      	adds	r7, #20
 800a548:	46bd      	mov	sp, r7
 800a54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54e:	4770      	bx	lr
 800a550:	e000ed00 	.word	0xe000ed00

0800a554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a554:	b480      	push	{r7}
 800a556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a558:	4b04      	ldr	r3, [pc, #16]	; (800a56c <__NVIC_GetPriorityGrouping+0x18>)
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	0a1b      	lsrs	r3, r3, #8
 800a55e:	f003 0307 	and.w	r3, r3, #7
}
 800a562:	4618      	mov	r0, r3
 800a564:	46bd      	mov	sp, r7
 800a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56a:	4770      	bx	lr
 800a56c:	e000ed00 	.word	0xe000ed00

0800a570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a570:	b480      	push	{r7}
 800a572:	b083      	sub	sp, #12
 800a574:	af00      	add	r7, sp, #0
 800a576:	4603      	mov	r3, r0
 800a578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a57a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	db0b      	blt.n	800a59a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a582:	79fb      	ldrb	r3, [r7, #7]
 800a584:	f003 021f 	and.w	r2, r3, #31
 800a588:	4907      	ldr	r1, [pc, #28]	; (800a5a8 <__NVIC_EnableIRQ+0x38>)
 800a58a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a58e:	095b      	lsrs	r3, r3, #5
 800a590:	2001      	movs	r0, #1
 800a592:	fa00 f202 	lsl.w	r2, r0, r2
 800a596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a59a:	bf00      	nop
 800a59c:	370c      	adds	r7, #12
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	e000e100 	.word	0xe000e100

0800a5ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a5b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	db0a      	blt.n	800a5d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	b2da      	uxtb	r2, r3
 800a5c4:	490c      	ldr	r1, [pc, #48]	; (800a5f8 <__NVIC_SetPriority+0x4c>)
 800a5c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5ca:	0112      	lsls	r2, r2, #4
 800a5cc:	b2d2      	uxtb	r2, r2
 800a5ce:	440b      	add	r3, r1
 800a5d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a5d4:	e00a      	b.n	800a5ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	b2da      	uxtb	r2, r3
 800a5da:	4908      	ldr	r1, [pc, #32]	; (800a5fc <__NVIC_SetPriority+0x50>)
 800a5dc:	79fb      	ldrb	r3, [r7, #7]
 800a5de:	f003 030f 	and.w	r3, r3, #15
 800a5e2:	3b04      	subs	r3, #4
 800a5e4:	0112      	lsls	r2, r2, #4
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	440b      	add	r3, r1
 800a5ea:	761a      	strb	r2, [r3, #24]
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr
 800a5f8:	e000e100 	.word	0xe000e100
 800a5fc:	e000ed00 	.word	0xe000ed00

0800a600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a600:	b480      	push	{r7}
 800a602:	b089      	sub	sp, #36	; 0x24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	f1c3 0307 	rsb	r3, r3, #7
 800a61a:	2b04      	cmp	r3, #4
 800a61c:	bf28      	it	cs
 800a61e:	2304      	movcs	r3, #4
 800a620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a622:	69fb      	ldr	r3, [r7, #28]
 800a624:	3304      	adds	r3, #4
 800a626:	2b06      	cmp	r3, #6
 800a628:	d902      	bls.n	800a630 <NVIC_EncodePriority+0x30>
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	3b03      	subs	r3, #3
 800a62e:	e000      	b.n	800a632 <NVIC_EncodePriority+0x32>
 800a630:	2300      	movs	r3, #0
 800a632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a634:	f04f 32ff 	mov.w	r2, #4294967295
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	fa02 f303 	lsl.w	r3, r2, r3
 800a63e:	43da      	mvns	r2, r3
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	401a      	ands	r2, r3
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a648:	f04f 31ff 	mov.w	r1, #4294967295
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	fa01 f303 	lsl.w	r3, r1, r3
 800a652:	43d9      	mvns	r1, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a658:	4313      	orrs	r3, r2
         );
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3724      	adds	r7, #36	; 0x24
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
	...

0800a668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3b01      	subs	r3, #1
 800a674:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a678:	d301      	bcc.n	800a67e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a67a:	2301      	movs	r3, #1
 800a67c:	e00f      	b.n	800a69e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a67e:	4a0a      	ldr	r2, [pc, #40]	; (800a6a8 <SysTick_Config+0x40>)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3b01      	subs	r3, #1
 800a684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a686:	210f      	movs	r1, #15
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	f7ff ff8e 	bl	800a5ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <SysTick_Config+0x40>)
 800a692:	2200      	movs	r2, #0
 800a694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a696:	4b04      	ldr	r3, [pc, #16]	; (800a6a8 <SysTick_Config+0x40>)
 800a698:	2207      	movs	r2, #7
 800a69a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a69c:	2300      	movs	r3, #0
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	e000e010 	.word	0xe000e010

0800a6ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff ff29 	bl	800a50c <__NVIC_SetPriorityGrouping>
}
 800a6ba:	bf00      	nop
 800a6bc:	3708      	adds	r7, #8
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a6c2:	b580      	push	{r7, lr}
 800a6c4:	b086      	sub	sp, #24
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	60b9      	str	r1, [r7, #8]
 800a6cc:	607a      	str	r2, [r7, #4]
 800a6ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a6d4:	f7ff ff3e 	bl	800a554 <__NVIC_GetPriorityGrouping>
 800a6d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	6978      	ldr	r0, [r7, #20]
 800a6e0:	f7ff ff8e 	bl	800a600 <NVIC_EncodePriority>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6ea:	4611      	mov	r1, r2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f7ff ff5d 	bl	800a5ac <__NVIC_SetPriority>
}
 800a6f2:	bf00      	nop
 800a6f4:	3718      	adds	r7, #24
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a6fa:	b580      	push	{r7, lr}
 800a6fc:	b082      	sub	sp, #8
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	4603      	mov	r3, r0
 800a702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a708:	4618      	mov	r0, r3
 800a70a:	f7ff ff31 	bl	800a570 <__NVIC_EnableIRQ>
}
 800a70e:	bf00      	nop
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}

0800a716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a716:	b580      	push	{r7, lr}
 800a718:	b082      	sub	sp, #8
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff ffa2 	bl	800a668 <SysTick_Config>
 800a724:	4603      	mov	r3, r0
}
 800a726:	4618      	mov	r0, r3
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
	...

0800a730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a738:	2300      	movs	r3, #0
 800a73a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a73c:	f7ff fab4 	bl	8009ca8 <HAL_GetTick>
 800a740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d101      	bne.n	800a74c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	e099      	b.n	800a880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2202      	movs	r2, #2
 800a758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f022 0201 	bic.w	r2, r2, #1
 800a76a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a76c:	e00f      	b.n	800a78e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a76e:	f7ff fa9b 	bl	8009ca8 <HAL_GetTick>
 800a772:	4602      	mov	r2, r0
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	2b05      	cmp	r3, #5
 800a77a:	d908      	bls.n	800a78e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2220      	movs	r2, #32
 800a780:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2203      	movs	r2, #3
 800a786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a78a:	2303      	movs	r3, #3
 800a78c:	e078      	b.n	800a880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 0301 	and.w	r3, r3, #1
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d1e8      	bne.n	800a76e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	4b38      	ldr	r3, [pc, #224]	; (800a888 <HAL_DMA_Init+0x158>)
 800a7a8:	4013      	ands	r3, r2
 800a7aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a7c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a7d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a1b      	ldr	r3, [r3, #32]
 800a7d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a7da:	697a      	ldr	r2, [r7, #20]
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d107      	bne.n	800a7f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	697a      	ldr	r2, [r7, #20]
 800a7fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f023 0307 	bic.w	r3, r3, #7
 800a80e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d117      	bne.n	800a852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	4313      	orrs	r3, r2
 800a82a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00e      	beq.n	800a852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fa9d 	bl	800ad74 <DMA_CheckFifoParam>
 800a83a:	4603      	mov	r3, r0
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d008      	beq.n	800a852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2240      	movs	r2, #64	; 0x40
 800a844:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	2201      	movs	r2, #1
 800a84a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a84e:	2301      	movs	r3, #1
 800a850:	e016      	b.n	800a880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fa54 	bl	800ad08 <DMA_CalcBaseAndBitshift>
 800a860:	4603      	mov	r3, r0
 800a862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a868:	223f      	movs	r2, #63	; 0x3f
 800a86a:	409a      	lsls	r2, r3
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3718      	adds	r7, #24
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	f010803f 	.word	0xf010803f

0800a88c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a89a:	2300      	movs	r3, #0
 800a89c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <HAL_DMA_Start_IT+0x26>
 800a8ae:	2302      	movs	r3, #2
 800a8b0:	e040      	b.n	800a934 <HAL_DMA_Start_IT+0xa8>
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	2b01      	cmp	r3, #1
 800a8c4:	d12f      	bne.n	800a926 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	68b9      	ldr	r1, [r7, #8]
 800a8da:	68f8      	ldr	r0, [r7, #12]
 800a8dc:	f000 f9e6 	bl	800acac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a8e4:	223f      	movs	r2, #63	; 0x3f
 800a8e6:	409a      	lsls	r2, r3
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0216 	orr.w	r2, r2, #22
 800a8fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a900:	2b00      	cmp	r3, #0
 800a902:	d007      	beq.n	800a914 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f042 0208 	orr.w	r2, r2, #8
 800a912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f042 0201 	orr.w	r2, r2, #1
 800a922:	601a      	str	r2, [r3, #0]
 800a924:	e005      	b.n	800a932 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a92e:	2302      	movs	r3, #2
 800a930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3718      	adds	r7, #24
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a94a:	b2db      	uxtb	r3, r3
 800a94c:	2b02      	cmp	r3, #2
 800a94e:	d004      	beq.n	800a95a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2280      	movs	r2, #128	; 0x80
 800a954:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e00c      	b.n	800a974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2205      	movs	r2, #5
 800a95e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f022 0201 	bic.w	r2, r2, #1
 800a970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	370c      	adds	r7, #12
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	b086      	sub	sp, #24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a988:	2300      	movs	r3, #0
 800a98a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a98c:	4b92      	ldr	r3, [pc, #584]	; (800abd8 <HAL_DMA_IRQHandler+0x258>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a92      	ldr	r2, [pc, #584]	; (800abdc <HAL_DMA_IRQHandler+0x25c>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	0a9b      	lsrs	r3, r3, #10
 800a998:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a99e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9aa:	2208      	movs	r2, #8
 800a9ac:	409a      	lsls	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d01a      	beq.n	800a9ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0304 	and.w	r3, r3, #4
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d013      	beq.n	800a9ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f022 0204 	bic.w	r2, r2, #4
 800a9d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d8:	2208      	movs	r2, #8
 800a9da:	409a      	lsls	r2, r3
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9e4:	f043 0201 	orr.w	r2, r3, #1
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	409a      	lsls	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d012      	beq.n	800aa22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	695b      	ldr	r3, [r3, #20]
 800aa02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00b      	beq.n	800aa22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa0e:	2201      	movs	r2, #1
 800aa10:	409a      	lsls	r2, r3
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1a:	f043 0202 	orr.w	r2, r3, #2
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa26:	2204      	movs	r2, #4
 800aa28:	409a      	lsls	r2, r3
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4013      	ands	r3, r2
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d012      	beq.n	800aa58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0302 	and.w	r3, r3, #2
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d00b      	beq.n	800aa58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa44:	2204      	movs	r2, #4
 800aa46:	409a      	lsls	r2, r3
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa50:	f043 0204 	orr.w	r2, r3, #4
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa5c:	2210      	movs	r2, #16
 800aa5e:	409a      	lsls	r2, r3
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	4013      	ands	r3, r2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d043      	beq.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	f003 0308 	and.w	r3, r3, #8
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d03c      	beq.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa7a:	2210      	movs	r2, #16
 800aa7c:	409a      	lsls	r2, r3
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d018      	beq.n	800aac2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d108      	bne.n	800aab0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d024      	beq.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	4798      	blx	r3
 800aaae:	e01f      	b.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01b      	beq.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
 800aac0:	e016      	b.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d107      	bne.n	800aae0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	681a      	ldr	r2, [r3, #0]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f022 0208 	bic.w	r2, r2, #8
 800aade:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d003      	beq.n	800aaf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaf4:	2220      	movs	r2, #32
 800aaf6:	409a      	lsls	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	4013      	ands	r3, r2
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 808e 	beq.w	800ac1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f003 0310 	and.w	r3, r3, #16
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8086 	beq.w	800ac1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab16:	2220      	movs	r2, #32
 800ab18:	409a      	lsls	r2, r3
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b05      	cmp	r3, #5
 800ab28:	d136      	bne.n	800ab98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f022 0216 	bic.w	r2, r2, #22
 800ab38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	695a      	ldr	r2, [r3, #20]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ab48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d103      	bne.n	800ab5a <HAL_DMA_IRQHandler+0x1da>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0208 	bic.w	r2, r2, #8
 800ab68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab6e:	223f      	movs	r2, #63	; 0x3f
 800ab70:	409a      	lsls	r2, r3
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2201      	movs	r2, #1
 800ab82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d07d      	beq.n	800ac8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	4798      	blx	r3
        }
        return;
 800ab96:	e078      	b.n	800ac8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d01c      	beq.n	800abe0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d108      	bne.n	800abc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d030      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	4798      	blx	r3
 800abc4:	e02b      	b.n	800ac1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d027      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
 800abd6:	e022      	b.n	800ac1e <HAL_DMA_IRQHandler+0x29e>
 800abd8:	20000000 	.word	0x20000000
 800abdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10f      	bne.n	800ac0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f022 0210 	bic.w	r2, r2, #16
 800abfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d003      	beq.n	800ac1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d032      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2a:	f003 0301 	and.w	r3, r3, #1
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d022      	beq.n	800ac78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2205      	movs	r2, #5
 800ac36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f022 0201 	bic.w	r2, r2, #1
 800ac48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	60bb      	str	r3, [r7, #8]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d307      	bcc.n	800ac66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d1f2      	bne.n	800ac4a <HAL_DMA_IRQHandler+0x2ca>
 800ac64:	e000      	b.n	800ac68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800ac66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d005      	beq.n	800ac8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	4798      	blx	r3
 800ac88:	e000      	b.n	800ac8c <HAL_DMA_IRQHandler+0x30c>
        return;
 800ac8a:	bf00      	nop
    }
  }
}
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop

0800ac94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b083      	sub	sp, #12
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800acc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	2b40      	cmp	r3, #64	; 0x40
 800acd8:	d108      	bne.n	800acec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68ba      	ldr	r2, [r7, #8]
 800ace8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800acea:	e007      	b.n	800acfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	68ba      	ldr	r2, [r7, #8]
 800acf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	687a      	ldr	r2, [r7, #4]
 800acfa:	60da      	str	r2, [r3, #12]
}
 800acfc:	bf00      	nop
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	3b10      	subs	r3, #16
 800ad18:	4a14      	ldr	r2, [pc, #80]	; (800ad6c <DMA_CalcBaseAndBitshift+0x64>)
 800ad1a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad1e:	091b      	lsrs	r3, r3, #4
 800ad20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800ad22:	4a13      	ldr	r2, [pc, #76]	; (800ad70 <DMA_CalcBaseAndBitshift+0x68>)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2b03      	cmp	r3, #3
 800ad34:	d909      	bls.n	800ad4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	1d1a      	adds	r2, r3, #4
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	659a      	str	r2, [r3, #88]	; 0x58
 800ad48:	e007      	b.n	800ad5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr
 800ad6a:	bf00      	nop
 800ad6c:	aaaaaaab 	.word	0xaaaaaaab
 800ad70:	08019fb8 	.word	0x08019fb8

0800ad74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ad74:	b480      	push	{r7}
 800ad76:	b085      	sub	sp, #20
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	699b      	ldr	r3, [r3, #24]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d11f      	bne.n	800adce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b03      	cmp	r3, #3
 800ad92:	d855      	bhi.n	800ae40 <DMA_CheckFifoParam+0xcc>
 800ad94:	a201      	add	r2, pc, #4	; (adr r2, 800ad9c <DMA_CheckFifoParam+0x28>)
 800ad96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad9a:	bf00      	nop
 800ad9c:	0800adad 	.word	0x0800adad
 800ada0:	0800adbf 	.word	0x0800adbf
 800ada4:	0800adad 	.word	0x0800adad
 800ada8:	0800ae41 	.word	0x0800ae41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d045      	beq.n	800ae44 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800adb8:	2301      	movs	r3, #1
 800adba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adbc:	e042      	b.n	800ae44 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800adc6:	d13f      	bne.n	800ae48 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800adcc:	e03c      	b.n	800ae48 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800add6:	d121      	bne.n	800ae1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b03      	cmp	r3, #3
 800addc:	d836      	bhi.n	800ae4c <DMA_CheckFifoParam+0xd8>
 800adde:	a201      	add	r2, pc, #4	; (adr r2, 800ade4 <DMA_CheckFifoParam+0x70>)
 800ade0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade4:	0800adf5 	.word	0x0800adf5
 800ade8:	0800adfb 	.word	0x0800adfb
 800adec:	0800adf5 	.word	0x0800adf5
 800adf0:	0800ae0d 	.word	0x0800ae0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800adf4:	2301      	movs	r3, #1
 800adf6:	73fb      	strb	r3, [r7, #15]
      break;
 800adf8:	e02f      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d024      	beq.n	800ae50 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae0a:	e021      	b.n	800ae50 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ae14:	d11e      	bne.n	800ae54 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ae1a:	e01b      	b.n	800ae54 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	2b02      	cmp	r3, #2
 800ae20:	d902      	bls.n	800ae28 <DMA_CheckFifoParam+0xb4>
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d003      	beq.n	800ae2e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ae26:	e018      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae2c:	e015      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00e      	beq.n	800ae58 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800ae3a:	2301      	movs	r3, #1
 800ae3c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae3e:	e00b      	b.n	800ae58 <DMA_CheckFifoParam+0xe4>
      break;
 800ae40:	bf00      	nop
 800ae42:	e00a      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      break;
 800ae44:	bf00      	nop
 800ae46:	e008      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      break;
 800ae48:	bf00      	nop
 800ae4a:	e006      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      break;
 800ae4c:	bf00      	nop
 800ae4e:	e004      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      break;
 800ae50:	bf00      	nop
 800ae52:	e002      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      break;   
 800ae54:	bf00      	nop
 800ae56:	e000      	b.n	800ae5a <DMA_CheckFifoParam+0xe6>
      break;
 800ae58:	bf00      	nop
    }
  } 
  
  return status; 
 800ae5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3714      	adds	r7, #20
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b089      	sub	sp, #36	; 0x24
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae72:	2300      	movs	r3, #0
 800ae74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ae76:	2300      	movs	r3, #0
 800ae78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae7e:	2300      	movs	r3, #0
 800ae80:	61fb      	str	r3, [r7, #28]
 800ae82:	e177      	b.n	800b174 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae84:	2201      	movs	r2, #1
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4013      	ands	r3, r2
 800ae96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae98:	693a      	ldr	r2, [r7, #16]
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	f040 8166 	bne.w	800b16e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d00b      	beq.n	800aec2 <HAL_GPIO_Init+0x5a>
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d007      	beq.n	800aec2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aeb6:	2b11      	cmp	r3, #17
 800aeb8:	d003      	beq.n	800aec2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	2b12      	cmp	r3, #18
 800aec0:	d130      	bne.n	800af24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	005b      	lsls	r3, r3, #1
 800aecc:	2203      	movs	r2, #3
 800aece:	fa02 f303 	lsl.w	r3, r2, r3
 800aed2:	43db      	mvns	r3, r3
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	4013      	ands	r3, r2
 800aed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	68da      	ldr	r2, [r3, #12]
 800aede:	69fb      	ldr	r3, [r7, #28]
 800aee0:	005b      	lsls	r3, r3, #1
 800aee2:	fa02 f303 	lsl.w	r3, r2, r3
 800aee6:	69ba      	ldr	r2, [r7, #24]
 800aee8:	4313      	orrs	r3, r2
 800aeea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	685b      	ldr	r3, [r3, #4]
 800aef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800aef8:	2201      	movs	r2, #1
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	fa02 f303 	lsl.w	r3, r2, r3
 800af00:	43db      	mvns	r3, r3
 800af02:	69ba      	ldr	r2, [r7, #24]
 800af04:	4013      	ands	r3, r2
 800af06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	091b      	lsrs	r3, r3, #4
 800af0e:	f003 0201 	and.w	r2, r3, #1
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	fa02 f303 	lsl.w	r3, r2, r3
 800af18:	69ba      	ldr	r2, [r7, #24]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af2a:	69fb      	ldr	r3, [r7, #28]
 800af2c:	005b      	lsls	r3, r3, #1
 800af2e:	2203      	movs	r2, #3
 800af30:	fa02 f303 	lsl.w	r3, r2, r3
 800af34:	43db      	mvns	r3, r3
 800af36:	69ba      	ldr	r2, [r7, #24]
 800af38:	4013      	ands	r3, r2
 800af3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	689a      	ldr	r2, [r3, #8]
 800af40:	69fb      	ldr	r3, [r7, #28]
 800af42:	005b      	lsls	r3, r3, #1
 800af44:	fa02 f303 	lsl.w	r3, r2, r3
 800af48:	69ba      	ldr	r2, [r7, #24]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	69ba      	ldr	r2, [r7, #24]
 800af52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d003      	beq.n	800af64 <HAL_GPIO_Init+0xfc>
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	2b12      	cmp	r3, #18
 800af62:	d123      	bne.n	800afac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	08da      	lsrs	r2, r3, #3
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3208      	adds	r2, #8
 800af6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	f003 0307 	and.w	r3, r3, #7
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	220f      	movs	r2, #15
 800af7c:	fa02 f303 	lsl.w	r3, r2, r3
 800af80:	43db      	mvns	r3, r3
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	4013      	ands	r3, r2
 800af86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	f003 0307 	and.w	r3, r3, #7
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	fa02 f303 	lsl.w	r3, r2, r3
 800af98:	69ba      	ldr	r2, [r7, #24]
 800af9a:	4313      	orrs	r3, r2
 800af9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	08da      	lsrs	r2, r3, #3
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3208      	adds	r2, #8
 800afa6:	69b9      	ldr	r1, [r7, #24]
 800afa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	2203      	movs	r2, #3
 800afb8:	fa02 f303 	lsl.w	r3, r2, r3
 800afbc:	43db      	mvns	r3, r3
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	4013      	ands	r3, r2
 800afc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	685b      	ldr	r3, [r3, #4]
 800afc8:	f003 0203 	and.w	r2, r3, #3
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	005b      	lsls	r3, r3, #1
 800afd0:	fa02 f303 	lsl.w	r3, r2, r3
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	4313      	orrs	r3, r2
 800afd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	69ba      	ldr	r2, [r7, #24]
 800afde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afe8:	2b00      	cmp	r3, #0
 800afea:	f000 80c0 	beq.w	800b16e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
 800aff2:	4b65      	ldr	r3, [pc, #404]	; (800b188 <HAL_GPIO_Init+0x320>)
 800aff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aff6:	4a64      	ldr	r2, [pc, #400]	; (800b188 <HAL_GPIO_Init+0x320>)
 800aff8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800affc:	6453      	str	r3, [r2, #68]	; 0x44
 800affe:	4b62      	ldr	r3, [pc, #392]	; (800b188 <HAL_GPIO_Init+0x320>)
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b006:	60fb      	str	r3, [r7, #12]
 800b008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b00a:	4a60      	ldr	r2, [pc, #384]	; (800b18c <HAL_GPIO_Init+0x324>)
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	089b      	lsrs	r3, r3, #2
 800b010:	3302      	adds	r3, #2
 800b012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	f003 0303 	and.w	r3, r3, #3
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	220f      	movs	r2, #15
 800b022:	fa02 f303 	lsl.w	r3, r2, r3
 800b026:	43db      	mvns	r3, r3
 800b028:	69ba      	ldr	r2, [r7, #24]
 800b02a:	4013      	ands	r3, r2
 800b02c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	4a57      	ldr	r2, [pc, #348]	; (800b190 <HAL_GPIO_Init+0x328>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d037      	beq.n	800b0a6 <HAL_GPIO_Init+0x23e>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	4a56      	ldr	r2, [pc, #344]	; (800b194 <HAL_GPIO_Init+0x32c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d031      	beq.n	800b0a2 <HAL_GPIO_Init+0x23a>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a55      	ldr	r2, [pc, #340]	; (800b198 <HAL_GPIO_Init+0x330>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d02b      	beq.n	800b09e <HAL_GPIO_Init+0x236>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a54      	ldr	r2, [pc, #336]	; (800b19c <HAL_GPIO_Init+0x334>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d025      	beq.n	800b09a <HAL_GPIO_Init+0x232>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	4a53      	ldr	r2, [pc, #332]	; (800b1a0 <HAL_GPIO_Init+0x338>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d01f      	beq.n	800b096 <HAL_GPIO_Init+0x22e>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a52      	ldr	r2, [pc, #328]	; (800b1a4 <HAL_GPIO_Init+0x33c>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	d019      	beq.n	800b092 <HAL_GPIO_Init+0x22a>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4a51      	ldr	r2, [pc, #324]	; (800b1a8 <HAL_GPIO_Init+0x340>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d013      	beq.n	800b08e <HAL_GPIO_Init+0x226>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a50      	ldr	r2, [pc, #320]	; (800b1ac <HAL_GPIO_Init+0x344>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d00d      	beq.n	800b08a <HAL_GPIO_Init+0x222>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a4f      	ldr	r2, [pc, #316]	; (800b1b0 <HAL_GPIO_Init+0x348>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d007      	beq.n	800b086 <HAL_GPIO_Init+0x21e>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a4e      	ldr	r2, [pc, #312]	; (800b1b4 <HAL_GPIO_Init+0x34c>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d101      	bne.n	800b082 <HAL_GPIO_Init+0x21a>
 800b07e:	2309      	movs	r3, #9
 800b080:	e012      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b082:	230a      	movs	r3, #10
 800b084:	e010      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b086:	2308      	movs	r3, #8
 800b088:	e00e      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b08a:	2307      	movs	r3, #7
 800b08c:	e00c      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b08e:	2306      	movs	r3, #6
 800b090:	e00a      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b092:	2305      	movs	r3, #5
 800b094:	e008      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b096:	2304      	movs	r3, #4
 800b098:	e006      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b09a:	2303      	movs	r3, #3
 800b09c:	e004      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b09e:	2302      	movs	r3, #2
 800b0a0:	e002      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e000      	b.n	800b0a8 <HAL_GPIO_Init+0x240>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	69fa      	ldr	r2, [r7, #28]
 800b0aa:	f002 0203 	and.w	r2, r2, #3
 800b0ae:	0092      	lsls	r2, r2, #2
 800b0b0:	4093      	lsls	r3, r2
 800b0b2:	69ba      	ldr	r2, [r7, #24]
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b0b8:	4934      	ldr	r1, [pc, #208]	; (800b18c <HAL_GPIO_Init+0x324>)
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	089b      	lsrs	r3, r3, #2
 800b0be:	3302      	adds	r3, #2
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b0c6:	4b3c      	ldr	r3, [pc, #240]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0cc:	693b      	ldr	r3, [r7, #16]
 800b0ce:	43db      	mvns	r3, r3
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	4013      	ands	r3, r2
 800b0d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d003      	beq.n	800b0ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800b0e2:	69ba      	ldr	r2, [r7, #24]
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b0ea:	4a33      	ldr	r2, [pc, #204]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b0f0:	4b31      	ldr	r3, [pc, #196]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0f6:	693b      	ldr	r3, [r7, #16]
 800b0f8:	43db      	mvns	r3, r3
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	4013      	ands	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	685b      	ldr	r3, [r3, #4]
 800b104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800b10c:	69ba      	ldr	r2, [r7, #24]
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	4313      	orrs	r3, r2
 800b112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b114:	4a28      	ldr	r2, [pc, #160]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b11a:	4b27      	ldr	r3, [pc, #156]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b11c:	689b      	ldr	r3, [r3, #8]
 800b11e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	43db      	mvns	r3, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4013      	ands	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d003      	beq.n	800b13e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	4313      	orrs	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b13e:	4a1e      	ldr	r2, [pc, #120]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b144:	4b1c      	ldr	r3, [pc, #112]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	43db      	mvns	r3, r3
 800b14e:	69ba      	ldr	r2, [r7, #24]
 800b150:	4013      	ands	r3, r2
 800b152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	693b      	ldr	r3, [r7, #16]
 800b164:	4313      	orrs	r3, r2
 800b166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b168:	4a13      	ldr	r2, [pc, #76]	; (800b1b8 <HAL_GPIO_Init+0x350>)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	3301      	adds	r3, #1
 800b172:	61fb      	str	r3, [r7, #28]
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	2b0f      	cmp	r3, #15
 800b178:	f67f ae84 	bls.w	800ae84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b17c:	bf00      	nop
 800b17e:	3724      	adds	r7, #36	; 0x24
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	40023800 	.word	0x40023800
 800b18c:	40013800 	.word	0x40013800
 800b190:	40020000 	.word	0x40020000
 800b194:	40020400 	.word	0x40020400
 800b198:	40020800 	.word	0x40020800
 800b19c:	40020c00 	.word	0x40020c00
 800b1a0:	40021000 	.word	0x40021000
 800b1a4:	40021400 	.word	0x40021400
 800b1a8:	40021800 	.word	0x40021800
 800b1ac:	40021c00 	.word	0x40021c00
 800b1b0:	40022000 	.word	0x40022000
 800b1b4:	40022400 	.word	0x40022400
 800b1b8:	40013c00 	.word	0x40013c00

0800b1bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691a      	ldr	r2, [r3, #16]
 800b1cc:	887b      	ldrh	r3, [r7, #2]
 800b1ce:	4013      	ands	r3, r2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d002      	beq.n	800b1da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	73fb      	strb	r3, [r7, #15]
 800b1d8:	e001      	b.n	800b1de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3714      	adds	r7, #20
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	807b      	strh	r3, [r7, #2]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b1fc:	787b      	ldrb	r3, [r7, #1]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d003      	beq.n	800b20a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b202:	887a      	ldrh	r2, [r7, #2]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b208:	e003      	b.n	800b212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b20a:	887b      	ldrh	r3, [r7, #2]
 800b20c:	041a      	lsls	r2, r3, #16
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	619a      	str	r2, [r3, #24]
}
 800b212:	bf00      	nop
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
	...

0800b220 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d101      	bne.n	800b232 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b22e:	2301      	movs	r3, #1
 800b230:	e11f      	b.n	800b472 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7fb fe36 	bl	8006eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2224      	movs	r2, #36	; 0x24
 800b250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f022 0201 	bic.w	r2, r2, #1
 800b262:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b272:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b282:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b284:	f001 f96e 	bl	800c564 <HAL_RCC_GetPCLK1Freq>
 800b288:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	4a7b      	ldr	r2, [pc, #492]	; (800b47c <HAL_I2C_Init+0x25c>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d807      	bhi.n	800b2a4 <HAL_I2C_Init+0x84>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	4a7a      	ldr	r2, [pc, #488]	; (800b480 <HAL_I2C_Init+0x260>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	bf94      	ite	ls
 800b29c:	2301      	movls	r3, #1
 800b29e:	2300      	movhi	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	e006      	b.n	800b2b2 <HAL_I2C_Init+0x92>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4a77      	ldr	r2, [pc, #476]	; (800b484 <HAL_I2C_Init+0x264>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	bf94      	ite	ls
 800b2ac:	2301      	movls	r3, #1
 800b2ae:	2300      	movhi	r3, #0
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	e0db      	b.n	800b472 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4a72      	ldr	r2, [pc, #456]	; (800b488 <HAL_I2C_Init+0x268>)
 800b2be:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c2:	0c9b      	lsrs	r3, r3, #18
 800b2c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68ba      	ldr	r2, [r7, #8]
 800b2d6:	430a      	orrs	r2, r1
 800b2d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	6a1b      	ldr	r3, [r3, #32]
 800b2e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	4a64      	ldr	r2, [pc, #400]	; (800b47c <HAL_I2C_Init+0x25c>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d802      	bhi.n	800b2f4 <HAL_I2C_Init+0xd4>
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	3301      	adds	r3, #1
 800b2f2:	e009      	b.n	800b308 <HAL_I2C_Init+0xe8>
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b2fa:	fb02 f303 	mul.w	r3, r2, r3
 800b2fe:	4a63      	ldr	r2, [pc, #396]	; (800b48c <HAL_I2C_Init+0x26c>)
 800b300:	fba2 2303 	umull	r2, r3, r2, r3
 800b304:	099b      	lsrs	r3, r3, #6
 800b306:	3301      	adds	r3, #1
 800b308:	687a      	ldr	r2, [r7, #4]
 800b30a:	6812      	ldr	r2, [r2, #0]
 800b30c:	430b      	orrs	r3, r1
 800b30e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	69db      	ldr	r3, [r3, #28]
 800b316:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800b31a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	685b      	ldr	r3, [r3, #4]
 800b322:	4956      	ldr	r1, [pc, #344]	; (800b47c <HAL_I2C_Init+0x25c>)
 800b324:	428b      	cmp	r3, r1
 800b326:	d80d      	bhi.n	800b344 <HAL_I2C_Init+0x124>
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	1e59      	subs	r1, r3, #1
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	005b      	lsls	r3, r3, #1
 800b332:	fbb1 f3f3 	udiv	r3, r1, r3
 800b336:	3301      	adds	r3, #1
 800b338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b33c:	2b04      	cmp	r3, #4
 800b33e:	bf38      	it	cc
 800b340:	2304      	movcc	r3, #4
 800b342:	e04f      	b.n	800b3e4 <HAL_I2C_Init+0x1c4>
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d111      	bne.n	800b370 <HAL_I2C_Init+0x150>
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	1e58      	subs	r0, r3, #1
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6859      	ldr	r1, [r3, #4]
 800b354:	460b      	mov	r3, r1
 800b356:	005b      	lsls	r3, r3, #1
 800b358:	440b      	add	r3, r1
 800b35a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b35e:	3301      	adds	r3, #1
 800b360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b364:	2b00      	cmp	r3, #0
 800b366:	bf0c      	ite	eq
 800b368:	2301      	moveq	r3, #1
 800b36a:	2300      	movne	r3, #0
 800b36c:	b2db      	uxtb	r3, r3
 800b36e:	e012      	b.n	800b396 <HAL_I2C_Init+0x176>
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	1e58      	subs	r0, r3, #1
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6859      	ldr	r1, [r3, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	440b      	add	r3, r1
 800b37e:	0099      	lsls	r1, r3, #2
 800b380:	440b      	add	r3, r1
 800b382:	fbb0 f3f3 	udiv	r3, r0, r3
 800b386:	3301      	adds	r3, #1
 800b388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	bf0c      	ite	eq
 800b390:	2301      	moveq	r3, #1
 800b392:	2300      	movne	r3, #0
 800b394:	b2db      	uxtb	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <HAL_I2C_Init+0x17e>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e022      	b.n	800b3e4 <HAL_I2C_Init+0x1c4>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10e      	bne.n	800b3c4 <HAL_I2C_Init+0x1a4>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	1e58      	subs	r0, r3, #1
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6859      	ldr	r1, [r3, #4]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	005b      	lsls	r3, r3, #1
 800b3b2:	440b      	add	r3, r1
 800b3b4:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3c2:	e00f      	b.n	800b3e4 <HAL_I2C_Init+0x1c4>
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	1e58      	subs	r0, r3, #1
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6859      	ldr	r1, [r3, #4]
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	440b      	add	r3, r1
 800b3d2:	0099      	lsls	r1, r3, #2
 800b3d4:	440b      	add	r3, r1
 800b3d6:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3da:	3301      	adds	r3, #1
 800b3dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3e4:	6879      	ldr	r1, [r7, #4]
 800b3e6:	6809      	ldr	r1, [r1, #0]
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	69da      	ldr	r2, [r3, #28]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a1b      	ldr	r3, [r3, #32]
 800b3fe:	431a      	orrs	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	430a      	orrs	r2, r1
 800b406:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800b412:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	6911      	ldr	r1, [r2, #16]
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	68d2      	ldr	r2, [r2, #12]
 800b41e:	4311      	orrs	r1, r2
 800b420:	687a      	ldr	r2, [r7, #4]
 800b422:	6812      	ldr	r2, [r2, #0]
 800b424:	430b      	orrs	r3, r1
 800b426:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68db      	ldr	r3, [r3, #12]
 800b42e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	695a      	ldr	r2, [r3, #20]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	431a      	orrs	r2, r3
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681a      	ldr	r2, [r3, #0]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	f042 0201 	orr.w	r2, r2, #1
 800b452:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2200      	movs	r2, #0
 800b458:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2220      	movs	r2, #32
 800b45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2200      	movs	r2, #0
 800b466:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
 800b47a:	bf00      	nop
 800b47c:	000186a0 	.word	0x000186a0
 800b480:	001e847f 	.word	0x001e847f
 800b484:	003d08ff 	.word	0x003d08ff
 800b488:	431bde83 	.word	0x431bde83
 800b48c:	10624dd3 	.word	0x10624dd3

0800b490 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b088      	sub	sp, #32
 800b494:	af02      	add	r7, sp, #8
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	461a      	mov	r2, r3
 800b49c:	460b      	mov	r3, r1
 800b49e:	817b      	strh	r3, [r7, #10]
 800b4a0:	4613      	mov	r3, r2
 800b4a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b4a4:	f7fe fc00 	bl	8009ca8 <HAL_GetTick>
 800b4a8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	f040 80e0 	bne.w	800b678 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	9300      	str	r3, [sp, #0]
 800b4bc:	2319      	movs	r3, #25
 800b4be:	2201      	movs	r2, #1
 800b4c0:	4970      	ldr	r1, [pc, #448]	; (800b684 <HAL_I2C_Master_Transmit+0x1f4>)
 800b4c2:	68f8      	ldr	r0, [r7, #12]
 800b4c4:	f000 fc58 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b4ce:	2302      	movs	r3, #2
 800b4d0:	e0d3      	b.n	800b67a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d101      	bne.n	800b4e0 <HAL_I2C_Master_Transmit+0x50>
 800b4dc:	2302      	movs	r3, #2
 800b4de:	e0cc      	b.n	800b67a <HAL_I2C_Master_Transmit+0x1ea>
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d007      	beq.n	800b506 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f042 0201 	orr.w	r2, r2, #1
 800b504:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	681a      	ldr	r2, [r3, #0]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b514:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2221      	movs	r2, #33	; 0x21
 800b51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2210      	movs	r2, #16
 800b522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2200      	movs	r2, #0
 800b52a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	893a      	ldrh	r2, [r7, #8]
 800b536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b53c:	b29a      	uxth	r2, r3
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4a50      	ldr	r2, [pc, #320]	; (800b688 <HAL_I2C_Master_Transmit+0x1f8>)
 800b546:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b548:	8979      	ldrh	r1, [r7, #10]
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	6a3a      	ldr	r2, [r7, #32]
 800b54e:	68f8      	ldr	r0, [r7, #12]
 800b550:	f000 fac2 	bl	800bad8 <I2C_MasterRequestWrite>
 800b554:	4603      	mov	r3, r0
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e08d      	b.n	800b67a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b55e:	2300      	movs	r3, #0
 800b560:	613b      	str	r3, [r7, #16]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	695b      	ldr	r3, [r3, #20]
 800b568:	613b      	str	r3, [r7, #16]
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	699b      	ldr	r3, [r3, #24]
 800b570:	613b      	str	r3, [r7, #16]
 800b572:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b574:	e066      	b.n	800b644 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	6a39      	ldr	r1, [r7, #32]
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f000 fcd2 	bl	800bf24 <I2C_WaitOnTXEFlagUntilTimeout>
 800b580:	4603      	mov	r3, r0
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00d      	beq.n	800b5a2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58a:	2b04      	cmp	r3, #4
 800b58c:	d107      	bne.n	800b59e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b59c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e06b      	b.n	800b67a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b5bc:	b29b      	uxth	r3, r3
 800b5be:	3b01      	subs	r3, #1
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	b29a      	uxth	r2, r3
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	f003 0304 	and.w	r3, r3, #4
 800b5dc:	2b04      	cmp	r3, #4
 800b5de:	d11b      	bne.n	800b618 <HAL_I2C_Master_Transmit+0x188>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d017      	beq.n	800b618 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ec:	781a      	ldrb	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5f8:	1c5a      	adds	r2, r3, #1
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b602:	b29b      	uxth	r3, r3
 800b604:	3b01      	subs	r3, #1
 800b606:	b29a      	uxth	r2, r3
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b610:	3b01      	subs	r3, #1
 800b612:	b29a      	uxth	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	6a39      	ldr	r1, [r7, #32]
 800b61c:	68f8      	ldr	r0, [r7, #12]
 800b61e:	f000 fcc2 	bl	800bfa6 <I2C_WaitOnBTFFlagUntilTimeout>
 800b622:	4603      	mov	r3, r0
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00d      	beq.n	800b644 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62c:	2b04      	cmp	r3, #4
 800b62e:	d107      	bne.n	800b640 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b63e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e01a      	b.n	800b67a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d194      	bne.n	800b576 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b65a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2220      	movs	r2, #32
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b674:	2300      	movs	r3, #0
 800b676:	e000      	b.n	800b67a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b678:	2302      	movs	r3, #2
  }
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3718      	adds	r7, #24
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	00100002 	.word	0x00100002
 800b688:	ffff0000 	.word	0xffff0000

0800b68c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b08c      	sub	sp, #48	; 0x30
 800b690:	af02      	add	r7, sp, #8
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	607a      	str	r2, [r7, #4]
 800b696:	461a      	mov	r2, r3
 800b698:	460b      	mov	r3, r1
 800b69a:	817b      	strh	r3, [r7, #10]
 800b69c:	4613      	mov	r3, r2
 800b69e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b6a0:	f7fe fb02 	bl	8009ca8 <HAL_GetTick>
 800b6a4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b20      	cmp	r3, #32
 800b6b0:	f040 820b 	bne.w	800baca <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	2319      	movs	r3, #25
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	497c      	ldr	r1, [pc, #496]	; (800b8b0 <HAL_I2C_Master_Receive+0x224>)
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f000 fb5a 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d001      	beq.n	800b6ce <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b6ca:	2302      	movs	r3, #2
 800b6cc:	e1fe      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6d4:	2b01      	cmp	r3, #1
 800b6d6:	d101      	bne.n	800b6dc <HAL_I2C_Master_Receive+0x50>
 800b6d8:	2302      	movs	r3, #2
 800b6da:	e1f7      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f003 0301 	and.w	r3, r3, #1
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d007      	beq.n	800b702 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f042 0201 	orr.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b710:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2222      	movs	r2, #34	; 0x22
 800b716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	2210      	movs	r2, #16
 800b71e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2200      	movs	r2, #0
 800b726:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	687a      	ldr	r2, [r7, #4]
 800b72c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	893a      	ldrh	r2, [r7, #8]
 800b732:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b738:	b29a      	uxth	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	4a5c      	ldr	r2, [pc, #368]	; (800b8b4 <HAL_I2C_Master_Receive+0x228>)
 800b742:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b744:	8979      	ldrh	r1, [r7, #10]
 800b746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b74a:	68f8      	ldr	r0, [r7, #12]
 800b74c:	f000 fa46 	bl	800bbdc <I2C_MasterRequestRead>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b756:	2301      	movs	r3, #1
 800b758:	e1b8      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d113      	bne.n	800b78a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b762:	2300      	movs	r3, #0
 800b764:	623b      	str	r3, [r7, #32]
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	695b      	ldr	r3, [r3, #20]
 800b76c:	623b      	str	r3, [r7, #32]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	623b      	str	r3, [r7, #32]
 800b776:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b786:	601a      	str	r2, [r3, #0]
 800b788:	e18c      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d11b      	bne.n	800b7ca <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	61fb      	str	r3, [r7, #28]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	695b      	ldr	r3, [r3, #20]
 800b7ac:	61fb      	str	r3, [r7, #28]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	699b      	ldr	r3, [r3, #24]
 800b7b4:	61fb      	str	r3, [r7, #28]
 800b7b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	681a      	ldr	r2, [r3, #0]
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7c6:	601a      	str	r2, [r3, #0]
 800b7c8:	e16c      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7ce:	2b02      	cmp	r3, #2
 800b7d0:	d11b      	bne.n	800b80a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	61bb      	str	r3, [r7, #24]
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	695b      	ldr	r3, [r3, #20]
 800b7fc:	61bb      	str	r3, [r7, #24]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	61bb      	str	r3, [r7, #24]
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	e14c      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b81a:	2300      	movs	r3, #0
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	617b      	str	r3, [r7, #20]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	617b      	str	r3, [r7, #20]
 800b82e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b830:	e138      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b836:	2b03      	cmp	r3, #3
 800b838:	f200 80f1 	bhi.w	800ba1e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b840:	2b01      	cmp	r3, #1
 800b842:	d123      	bne.n	800b88c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b846:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f000 fbed 	bl	800c028 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b854:	2301      	movs	r3, #1
 800b856:	e139      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	691a      	ldr	r2, [r3, #16]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b86a:	1c5a      	adds	r2, r3, #1
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b874:	3b01      	subs	r3, #1
 800b876:	b29a      	uxth	r2, r3
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b880:	b29b      	uxth	r3, r3
 800b882:	3b01      	subs	r3, #1
 800b884:	b29a      	uxth	r2, r3
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b88a:	e10b      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b890:	2b02      	cmp	r3, #2
 800b892:	d14e      	bne.n	800b932 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89a:	2200      	movs	r2, #0
 800b89c:	4906      	ldr	r1, [pc, #24]	; (800b8b8 <HAL_I2C_Master_Receive+0x22c>)
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f000 fa6a 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d008      	beq.n	800b8bc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e10e      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
 800b8ae:	bf00      	nop
 800b8b0:	00100002 	.word	0x00100002
 800b8b4:	ffff0000 	.word	0xffff0000
 800b8b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b8ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	691a      	ldr	r2, [r3, #16]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	b2d2      	uxtb	r2, r2
 800b8d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b8e8:	3b01      	subs	r3, #1
 800b8ea:	b29a      	uxth	r2, r3
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	3b01      	subs	r3, #1
 800b8f8:	b29a      	uxth	r2, r3
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	691a      	ldr	r2, [r3, #16]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b908:	b2d2      	uxtb	r2, r2
 800b90a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b910:	1c5a      	adds	r2, r3, #1
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b91a:	3b01      	subs	r3, #1
 800b91c:	b29a      	uxth	r2, r3
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b926:	b29b      	uxth	r3, r3
 800b928:	3b01      	subs	r3, #1
 800b92a:	b29a      	uxth	r2, r3
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b930:	e0b8      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b938:	2200      	movs	r2, #0
 800b93a:	4966      	ldr	r1, [pc, #408]	; (800bad4 <HAL_I2C_Master_Receive+0x448>)
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f000 fa1b 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800b942:	4603      	mov	r3, r0
 800b944:	2b00      	cmp	r3, #0
 800b946:	d001      	beq.n	800b94c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b948:	2301      	movs	r3, #1
 800b94a:	e0bf      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b95a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	691a      	ldr	r2, [r3, #16]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b966:	b2d2      	uxtb	r2, r2
 800b968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b96e:	1c5a      	adds	r2, r3, #1
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b984:	b29b      	uxth	r3, r3
 800b986:	3b01      	subs	r3, #1
 800b988:	b29a      	uxth	r2, r3
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b98e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	2200      	movs	r2, #0
 800b996:	494f      	ldr	r1, [pc, #316]	; (800bad4 <HAL_I2C_Master_Receive+0x448>)
 800b998:	68f8      	ldr	r0, [r7, #12]
 800b99a:	f000 f9ed 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d001      	beq.n	800b9a8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	e091      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b9b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	691a      	ldr	r2, [r3, #16]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	b2d2      	uxtb	r2, r2
 800b9c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ca:	1c5a      	adds	r2, r3, #1
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9e0:	b29b      	uxth	r3, r3
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	b29a      	uxth	r2, r3
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	691a      	ldr	r2, [r3, #16]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f4:	b2d2      	uxtb	r2, r2
 800b9f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	1c5a      	adds	r2, r3, #1
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba06:	3b01      	subs	r3, #1
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	3b01      	subs	r3, #1
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ba1c:	e042      	b.n	800baa4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ba1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 fb00 	bl	800c028 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d001      	beq.n	800ba32 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e04c      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	691a      	ldr	r2, [r3, #16]
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba3c:	b2d2      	uxtb	r2, r2
 800ba3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	3b01      	subs	r3, #1
 800ba5e:	b29a      	uxth	r2, r3
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	f003 0304 	and.w	r3, r3, #4
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d118      	bne.n	800baa4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	691a      	ldr	r2, [r3, #16]
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba7c:	b2d2      	uxtb	r2, r2
 800ba7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba84:	1c5a      	adds	r2, r3, #1
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	b29a      	uxth	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f47f aec2 	bne.w	800b832 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	e000      	b.n	800bacc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800baca:	2302      	movs	r3, #2
  }
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3728      	adds	r7, #40	; 0x28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	00010004 	.word	0x00010004

0800bad8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af02      	add	r7, sp, #8
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	607a      	str	r2, [r7, #4]
 800bae2:	603b      	str	r3, [r7, #0]
 800bae4:	460b      	mov	r3, r1
 800bae6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b08      	cmp	r3, #8
 800baf2:	d006      	beq.n	800bb02 <I2C_MasterRequestWrite+0x2a>
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d003      	beq.n	800bb02 <I2C_MasterRequestWrite+0x2a>
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bb00:	d108      	bne.n	800bb14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681a      	ldr	r2, [r3, #0]
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	e00b      	b.n	800bb2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb18:	2b12      	cmp	r3, #18
 800bb1a:	d107      	bne.n	800bb2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	9300      	str	r3, [sp, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2200      	movs	r2, #0
 800bb34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 f91d 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00d      	beq.n	800bb60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb52:	d103      	bne.n	800bb5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bb5c:	2303      	movs	r3, #3
 800bb5e:	e035      	b.n	800bbcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb68:	d108      	bne.n	800bb7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bb6a:	897b      	ldrh	r3, [r7, #10]
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	461a      	mov	r2, r3
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800bb78:	611a      	str	r2, [r3, #16]
 800bb7a:	e01b      	b.n	800bbb4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bb7c:	897b      	ldrh	r3, [r7, #10]
 800bb7e:	11db      	asrs	r3, r3, #7
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	f003 0306 	and.w	r3, r3, #6
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f063 030f 	orn	r3, r3, #15
 800bb8c:	b2da      	uxtb	r2, r3
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	490e      	ldr	r1, [pc, #56]	; (800bbd4 <I2C_MasterRequestWrite+0xfc>)
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f000 f943 	bl	800be26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bba0:	4603      	mov	r3, r0
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d001      	beq.n	800bbaa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e010      	b.n	800bbcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bbaa:	897b      	ldrh	r3, [r7, #10]
 800bbac:	b2da      	uxtb	r2, r3
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	687a      	ldr	r2, [r7, #4]
 800bbb8:	4907      	ldr	r1, [pc, #28]	; (800bbd8 <I2C_MasterRequestWrite+0x100>)
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 f933 	bl	800be26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e000      	b.n	800bbcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}
 800bbd4:	00010008 	.word	0x00010008
 800bbd8:	00010002 	.word	0x00010002

0800bbdc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b088      	sub	sp, #32
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	607a      	str	r2, [r7, #4]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	460b      	mov	r3, r1
 800bbea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	681a      	ldr	r2, [r3, #0]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bc00:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d006      	beq.n	800bc16 <I2C_MasterRequestRead+0x3a>
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d003      	beq.n	800bc16 <I2C_MasterRequestRead+0x3a>
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800bc14:	d108      	bne.n	800bc28 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc24:	601a      	str	r2, [r3, #0]
 800bc26:	e00b      	b.n	800bc40 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2c:	2b11      	cmp	r3, #17
 800bc2e:	d107      	bne.n	800bc40 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bc3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	9300      	str	r3, [sp, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	f000 f893 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d00d      	beq.n	800bc74 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc66:	d103      	bne.n	800bc70 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e079      	b.n	800bd68 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	691b      	ldr	r3, [r3, #16]
 800bc78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc7c:	d108      	bne.n	800bc90 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800bc7e:	897b      	ldrh	r3, [r7, #10]
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	f043 0301 	orr.w	r3, r3, #1
 800bc86:	b2da      	uxtb	r2, r3
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	611a      	str	r2, [r3, #16]
 800bc8e:	e05f      	b.n	800bd50 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bc90:	897b      	ldrh	r3, [r7, #10]
 800bc92:	11db      	asrs	r3, r3, #7
 800bc94:	b2db      	uxtb	r3, r3
 800bc96:	f003 0306 	and.w	r3, r3, #6
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	f063 030f 	orn	r3, r3, #15
 800bca0:	b2da      	uxtb	r2, r3
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	4930      	ldr	r1, [pc, #192]	; (800bd70 <I2C_MasterRequestRead+0x194>)
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f8b9 	bl	800be26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d001      	beq.n	800bcbe <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	e054      	b.n	800bd68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bcbe:	897b      	ldrh	r3, [r7, #10]
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	4929      	ldr	r1, [pc, #164]	; (800bd74 <I2C_MasterRequestRead+0x198>)
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f000 f8a9 	bl	800be26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d001      	beq.n	800bcde <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	e044      	b.n	800bd68 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bcde:	2300      	movs	r3, #0
 800bce0:	613b      	str	r3, [r7, #16]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	613b      	str	r3, [r7, #16]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	699b      	ldr	r3, [r3, #24]
 800bcf0:	613b      	str	r3, [r7, #16]
 800bcf2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd02:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800bd10:	68f8      	ldr	r0, [r7, #12]
 800bd12:	f000 f831 	bl	800bd78 <I2C_WaitOnFlagUntilTimeout>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d00d      	beq.n	800bd38 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd2a:	d103      	bne.n	800bd34 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bd32:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800bd34:	2303      	movs	r3, #3
 800bd36:	e017      	b.n	800bd68 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800bd38:	897b      	ldrh	r3, [r7, #10]
 800bd3a:	11db      	asrs	r3, r3, #7
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	f003 0306 	and.w	r3, r3, #6
 800bd42:	b2db      	uxtb	r3, r3
 800bd44:	f063 030e 	orn	r3, r3, #14
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	4907      	ldr	r1, [pc, #28]	; (800bd74 <I2C_MasterRequestRead+0x198>)
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 f865 	bl	800be26 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d001      	beq.n	800bd66 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800bd62:	2301      	movs	r3, #1
 800bd64:	e000      	b.n	800bd68 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	3718      	adds	r7, #24
 800bd6c:	46bd      	mov	sp, r7
 800bd6e:	bd80      	pop	{r7, pc}
 800bd70:	00010008 	.word	0x00010008
 800bd74:	00010002 	.word	0x00010002

0800bd78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	603b      	str	r3, [r7, #0]
 800bd84:	4613      	mov	r3, r2
 800bd86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd88:	e025      	b.n	800bdd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd90:	d021      	beq.n	800bdd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd92:	f7fd ff89 	bl	8009ca8 <HAL_GetTick>
 800bd96:	4602      	mov	r2, r0
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d302      	bcc.n	800bda8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d116      	bne.n	800bdd6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc2:	f043 0220 	orr.w	r2, r3, #32
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e023      	b.n	800be1e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	0c1b      	lsrs	r3, r3, #16
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d10d      	bne.n	800bdfc <I2C_WaitOnFlagUntilTimeout+0x84>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	695b      	ldr	r3, [r3, #20]
 800bde6:	43da      	mvns	r2, r3
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	4013      	ands	r3, r2
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	bf0c      	ite	eq
 800bdf2:	2301      	moveq	r3, #1
 800bdf4:	2300      	movne	r3, #0
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	461a      	mov	r2, r3
 800bdfa:	e00c      	b.n	800be16 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	43da      	mvns	r2, r3
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	4013      	ands	r3, r2
 800be08:	b29b      	uxth	r3, r3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	bf0c      	ite	eq
 800be0e:	2301      	moveq	r3, #1
 800be10:	2300      	movne	r3, #0
 800be12:	b2db      	uxtb	r3, r3
 800be14:	461a      	mov	r2, r3
 800be16:	79fb      	ldrb	r3, [r7, #7]
 800be18:	429a      	cmp	r2, r3
 800be1a:	d0b6      	beq.n	800bd8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3710      	adds	r7, #16
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}

0800be26 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800be26:	b580      	push	{r7, lr}
 800be28:	b084      	sub	sp, #16
 800be2a:	af00      	add	r7, sp, #0
 800be2c:	60f8      	str	r0, [r7, #12]
 800be2e:	60b9      	str	r1, [r7, #8]
 800be30:	607a      	str	r2, [r7, #4]
 800be32:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800be34:	e051      	b.n	800beda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	695b      	ldr	r3, [r3, #20]
 800be3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be44:	d123      	bne.n	800be8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be54:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800be5e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2220      	movs	r2, #32
 800be6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	f043 0204 	orr.w	r2, r3, #4
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e046      	b.n	800bf1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be94:	d021      	beq.n	800beda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be96:	f7fd ff07 	bl	8009ca8 <HAL_GetTick>
 800be9a:	4602      	mov	r2, r0
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	429a      	cmp	r2, r3
 800bea4:	d302      	bcc.n	800beac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d116      	bne.n	800beda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2200      	movs	r2, #0
 800beb0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2200      	movs	r2, #0
 800bebe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bec6:	f043 0220 	orr.w	r2, r3, #32
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bed6:	2301      	movs	r3, #1
 800bed8:	e020      	b.n	800bf1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	0c1b      	lsrs	r3, r3, #16
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d10c      	bne.n	800befe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	695b      	ldr	r3, [r3, #20]
 800beea:	43da      	mvns	r2, r3
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	4013      	ands	r3, r2
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bf14      	ite	ne
 800bef6:	2301      	movne	r3, #1
 800bef8:	2300      	moveq	r3, #0
 800befa:	b2db      	uxtb	r3, r3
 800befc:	e00b      	b.n	800bf16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	43da      	mvns	r2, r3
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	4013      	ands	r3, r2
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	bf14      	ite	ne
 800bf10:	2301      	movne	r3, #1
 800bf12:	2300      	moveq	r3, #0
 800bf14:	b2db      	uxtb	r3, r3
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d18d      	bne.n	800be36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf30:	e02d      	b.n	800bf8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f8ce 	bl	800c0d4 <I2C_IsAcknowledgeFailed>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e02d      	b.n	800bf9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf48:	d021      	beq.n	800bf8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf4a:	f7fd fead 	bl	8009ca8 <HAL_GetTick>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	68ba      	ldr	r2, [r7, #8]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d302      	bcc.n	800bf60 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d116      	bne.n	800bf8e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	2200      	movs	r2, #0
 800bf64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2220      	movs	r2, #32
 800bf6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf7a:	f043 0220 	orr.w	r2, r3, #32
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e007      	b.n	800bf9e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	695b      	ldr	r3, [r3, #20]
 800bf94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf98:	2b80      	cmp	r3, #128	; 0x80
 800bf9a:	d1ca      	bne.n	800bf32 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	60f8      	str	r0, [r7, #12]
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bfb2:	e02d      	b.n	800c010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bfb4:	68f8      	ldr	r0, [r7, #12]
 800bfb6:	f000 f88d 	bl	800c0d4 <I2C_IsAcknowledgeFailed>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	e02d      	b.n	800c020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfca:	d021      	beq.n	800c010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfcc:	f7fd fe6c 	bl	8009ca8 <HAL_GetTick>
 800bfd0:	4602      	mov	r2, r0
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	1ad3      	subs	r3, r2, r3
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d302      	bcc.n	800bfe2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d116      	bne.n	800c010 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2220      	movs	r2, #32
 800bfec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bffc:	f043 0220 	orr.w	r2, r3, #32
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800c00c:	2301      	movs	r3, #1
 800c00e:	e007      	b.n	800c020 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	f003 0304 	and.w	r3, r3, #4
 800c01a:	2b04      	cmp	r3, #4
 800c01c:	d1ca      	bne.n	800bfb4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c01e:	2300      	movs	r3, #0
}
 800c020:	4618      	mov	r0, r3
 800c022:	3710      	adds	r7, #16
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	60f8      	str	r0, [r7, #12]
 800c030:	60b9      	str	r1, [r7, #8]
 800c032:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c034:	e042      	b.n	800c0bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	695b      	ldr	r3, [r3, #20]
 800c03c:	f003 0310 	and.w	r3, r3, #16
 800c040:	2b10      	cmp	r3, #16
 800c042:	d119      	bne.n	800c078 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f06f 0210 	mvn.w	r2, #16
 800c04c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	2200      	movs	r2, #0
 800c052:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	2220      	movs	r2, #32
 800c058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	2200      	movs	r2, #0
 800c060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c074:	2301      	movs	r3, #1
 800c076:	e029      	b.n	800c0cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c078:	f7fd fe16 	bl	8009ca8 <HAL_GetTick>
 800c07c:	4602      	mov	r2, r0
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	1ad3      	subs	r3, r2, r3
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	429a      	cmp	r2, r3
 800c086:	d302      	bcc.n	800c08e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d116      	bne.n	800c0bc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2200      	movs	r2, #0
 800c092:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2220      	movs	r2, #32
 800c098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a8:	f043 0220 	orr.w	r2, r3, #32
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	e007      	b.n	800c0cc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	695b      	ldr	r3, [r3, #20]
 800c0c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0c6:	2b40      	cmp	r3, #64	; 0x40
 800c0c8:	d1b5      	bne.n	800c036 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3710      	adds	r7, #16
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	695b      	ldr	r3, [r3, #20]
 800c0e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c0e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c0ea:	d11b      	bne.n	800c124 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800c0f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2220      	movs	r2, #32
 800c100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2200      	movs	r2, #0
 800c108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c110:	f043 0204 	orr.w	r2, r3, #4
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800c120:	2301      	movs	r3, #1
 800c122:	e000      	b.n	800c126 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
	...

0800c134 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800c13e:	2300      	movs	r3, #0
 800c140:	603b      	str	r3, [r7, #0]
 800c142:	4b20      	ldr	r3, [pc, #128]	; (800c1c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c146:	4a1f      	ldr	r2, [pc, #124]	; (800c1c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c14c:	6413      	str	r3, [r2, #64]	; 0x40
 800c14e:	4b1d      	ldr	r3, [pc, #116]	; (800c1c4 <HAL_PWREx_EnableOverDrive+0x90>)
 800c150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800c15a:	4b1b      	ldr	r3, [pc, #108]	; (800c1c8 <HAL_PWREx_EnableOverDrive+0x94>)
 800c15c:	2201      	movs	r2, #1
 800c15e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c160:	f7fd fda2 	bl	8009ca8 <HAL_GetTick>
 800c164:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c166:	e009      	b.n	800c17c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c168:	f7fd fd9e 	bl	8009ca8 <HAL_GetTick>
 800c16c:	4602      	mov	r2, r0
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	1ad3      	subs	r3, r2, r3
 800c172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c176:	d901      	bls.n	800c17c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800c178:	2303      	movs	r3, #3
 800c17a:	e01f      	b.n	800c1bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800c17c:	4b13      	ldr	r3, [pc, #76]	; (800c1cc <HAL_PWREx_EnableOverDrive+0x98>)
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c188:	d1ee      	bne.n	800c168 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800c18a:	4b11      	ldr	r3, [pc, #68]	; (800c1d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c190:	f7fd fd8a 	bl	8009ca8 <HAL_GetTick>
 800c194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c196:	e009      	b.n	800c1ac <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800c198:	f7fd fd86 	bl	8009ca8 <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1a6:	d901      	bls.n	800c1ac <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e007      	b.n	800c1bc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800c1ac:	4b07      	ldr	r3, [pc, #28]	; (800c1cc <HAL_PWREx_EnableOverDrive+0x98>)
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b8:	d1ee      	bne.n	800c198 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3708      	adds	r7, #8
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	40023800 	.word	0x40023800
 800c1c8:	420e0040 	.word	0x420e0040
 800c1cc:	40007000 	.word	0x40007000
 800c1d0:	420e0044 	.word	0x420e0044

0800c1d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
 800c1dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d101      	bne.n	800c1e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e0cc      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c1e8:	4b68      	ldr	r3, [pc, #416]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 030f 	and.w	r3, r3, #15
 800c1f0:	683a      	ldr	r2, [r7, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d90c      	bls.n	800c210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c1f6:	4b65      	ldr	r3, [pc, #404]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	b2d2      	uxtb	r2, r2
 800c1fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c1fe:	4b63      	ldr	r3, [pc, #396]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 030f 	and.w	r3, r3, #15
 800c206:	683a      	ldr	r2, [r7, #0]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d001      	beq.n	800c210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	e0b8      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0302 	and.w	r3, r3, #2
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d020      	beq.n	800c25e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	f003 0304 	and.w	r3, r3, #4
 800c224:	2b00      	cmp	r3, #0
 800c226:	d005      	beq.n	800c234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c228:	4b59      	ldr	r3, [pc, #356]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	4a58      	ldr	r2, [pc, #352]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c22e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f003 0308 	and.w	r3, r3, #8
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d005      	beq.n	800c24c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c240:	4b53      	ldr	r3, [pc, #332]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	4a52      	ldr	r2, [pc, #328]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c246:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c24a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c24c:	4b50      	ldr	r3, [pc, #320]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	494d      	ldr	r1, [pc, #308]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d044      	beq.n	800c2f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	2b01      	cmp	r3, #1
 800c270:	d107      	bne.n	800c282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c272:	4b47      	ldr	r3, [pc, #284]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d119      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	e07f      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	2b02      	cmp	r3, #2
 800c288:	d003      	beq.n	800c292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d107      	bne.n	800c2a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c292:	4b3f      	ldr	r3, [pc, #252]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d109      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e06f      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2a2:	4b3b      	ldr	r3, [pc, #236]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f003 0302 	and.w	r3, r3, #2
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	e067      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c2b2:	4b37      	ldr	r3, [pc, #220]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	f023 0203 	bic.w	r2, r3, #3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	4934      	ldr	r1, [pc, #208]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c2c4:	f7fd fcf0 	bl	8009ca8 <HAL_GetTick>
 800c2c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2ca:	e00a      	b.n	800c2e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c2cc:	f7fd fcec 	bl	8009ca8 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d901      	bls.n	800c2e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c2de:	2303      	movs	r3, #3
 800c2e0:	e04f      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c2e2:	4b2b      	ldr	r3, [pc, #172]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f003 020c 	and.w	r2, r3, #12
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	009b      	lsls	r3, r3, #2
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d1eb      	bne.n	800c2cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c2f4:	4b25      	ldr	r3, [pc, #148]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f003 030f 	and.w	r3, r3, #15
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d20c      	bcs.n	800c31c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c302:	4b22      	ldr	r3, [pc, #136]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	b2d2      	uxtb	r2, r2
 800c308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c30a:	4b20      	ldr	r3, [pc, #128]	; (800c38c <HAL_RCC_ClockConfig+0x1b8>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 030f 	and.w	r3, r3, #15
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	429a      	cmp	r2, r3
 800c316:	d001      	beq.n	800c31c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	e032      	b.n	800c382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f003 0304 	and.w	r3, r3, #4
 800c324:	2b00      	cmp	r3, #0
 800c326:	d008      	beq.n	800c33a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c328:	4b19      	ldr	r3, [pc, #100]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	4916      	ldr	r1, [pc, #88]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c336:	4313      	orrs	r3, r2
 800c338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0308 	and.w	r3, r3, #8
 800c342:	2b00      	cmp	r3, #0
 800c344:	d009      	beq.n	800c35a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c346:	4b12      	ldr	r3, [pc, #72]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	490e      	ldr	r1, [pc, #56]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c356:	4313      	orrs	r3, r2
 800c358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c35a:	f000 f821 	bl	800c3a0 <HAL_RCC_GetSysClockFreq>
 800c35e:	4601      	mov	r1, r0
 800c360:	4b0b      	ldr	r3, [pc, #44]	; (800c390 <HAL_RCC_ClockConfig+0x1bc>)
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	091b      	lsrs	r3, r3, #4
 800c366:	f003 030f 	and.w	r3, r3, #15
 800c36a:	4a0a      	ldr	r2, [pc, #40]	; (800c394 <HAL_RCC_ClockConfig+0x1c0>)
 800c36c:	5cd3      	ldrb	r3, [r2, r3]
 800c36e:	fa21 f303 	lsr.w	r3, r1, r3
 800c372:	4a09      	ldr	r2, [pc, #36]	; (800c398 <HAL_RCC_ClockConfig+0x1c4>)
 800c374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c376:	4b09      	ldr	r3, [pc, #36]	; (800c39c <HAL_RCC_ClockConfig+0x1c8>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f7fd fc50 	bl	8009c20 <HAL_InitTick>

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	40023c00 	.word	0x40023c00
 800c390:	40023800 	.word	0x40023800
 800c394:	08019fa0 	.word	0x08019fa0
 800c398:	20000000 	.word	0x20000000
 800c39c:	20000004 	.word	0x20000004

0800c3a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	607b      	str	r3, [r7, #4]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3b6:	4b63      	ldr	r3, [pc, #396]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	f003 030c 	and.w	r3, r3, #12
 800c3be:	2b04      	cmp	r3, #4
 800c3c0:	d007      	beq.n	800c3d2 <HAL_RCC_GetSysClockFreq+0x32>
 800c3c2:	2b08      	cmp	r3, #8
 800c3c4:	d008      	beq.n	800c3d8 <HAL_RCC_GetSysClockFreq+0x38>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f040 80b4 	bne.w	800c534 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c3cc:	4b5e      	ldr	r3, [pc, #376]	; (800c548 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c3ce:	60bb      	str	r3, [r7, #8]
       break;
 800c3d0:	e0b3      	b.n	800c53a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c3d2:	4b5d      	ldr	r3, [pc, #372]	; (800c548 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c3d4:	60bb      	str	r3, [r7, #8]
      break;
 800c3d6:	e0b0      	b.n	800c53a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c3d8:	4b5a      	ldr	r3, [pc, #360]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c3e2:	4b58      	ldr	r3, [pc, #352]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d04a      	beq.n	800c484 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c3ee:	4b55      	ldr	r3, [pc, #340]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	099b      	lsrs	r3, r3, #6
 800c3f4:	f04f 0400 	mov.w	r4, #0
 800c3f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c3fc:	f04f 0200 	mov.w	r2, #0
 800c400:	ea03 0501 	and.w	r5, r3, r1
 800c404:	ea04 0602 	and.w	r6, r4, r2
 800c408:	4629      	mov	r1, r5
 800c40a:	4632      	mov	r2, r6
 800c40c:	f04f 0300 	mov.w	r3, #0
 800c410:	f04f 0400 	mov.w	r4, #0
 800c414:	0154      	lsls	r4, r2, #5
 800c416:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c41a:	014b      	lsls	r3, r1, #5
 800c41c:	4619      	mov	r1, r3
 800c41e:	4622      	mov	r2, r4
 800c420:	1b49      	subs	r1, r1, r5
 800c422:	eb62 0206 	sbc.w	r2, r2, r6
 800c426:	f04f 0300 	mov.w	r3, #0
 800c42a:	f04f 0400 	mov.w	r4, #0
 800c42e:	0194      	lsls	r4, r2, #6
 800c430:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c434:	018b      	lsls	r3, r1, #6
 800c436:	1a5b      	subs	r3, r3, r1
 800c438:	eb64 0402 	sbc.w	r4, r4, r2
 800c43c:	f04f 0100 	mov.w	r1, #0
 800c440:	f04f 0200 	mov.w	r2, #0
 800c444:	00e2      	lsls	r2, r4, #3
 800c446:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c44a:	00d9      	lsls	r1, r3, #3
 800c44c:	460b      	mov	r3, r1
 800c44e:	4614      	mov	r4, r2
 800c450:	195b      	adds	r3, r3, r5
 800c452:	eb44 0406 	adc.w	r4, r4, r6
 800c456:	f04f 0100 	mov.w	r1, #0
 800c45a:	f04f 0200 	mov.w	r2, #0
 800c45e:	02a2      	lsls	r2, r4, #10
 800c460:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c464:	0299      	lsls	r1, r3, #10
 800c466:	460b      	mov	r3, r1
 800c468:	4614      	mov	r4, r2
 800c46a:	4618      	mov	r0, r3
 800c46c:	4621      	mov	r1, r4
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f04f 0400 	mov.w	r4, #0
 800c474:	461a      	mov	r2, r3
 800c476:	4623      	mov	r3, r4
 800c478:	f7f4 fc1e 	bl	8000cb8 <__aeabi_uldivmod>
 800c47c:	4603      	mov	r3, r0
 800c47e:	460c      	mov	r4, r1
 800c480:	60fb      	str	r3, [r7, #12]
 800c482:	e049      	b.n	800c518 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c484:	4b2f      	ldr	r3, [pc, #188]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	099b      	lsrs	r3, r3, #6
 800c48a:	f04f 0400 	mov.w	r4, #0
 800c48e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	ea03 0501 	and.w	r5, r3, r1
 800c49a:	ea04 0602 	and.w	r6, r4, r2
 800c49e:	4629      	mov	r1, r5
 800c4a0:	4632      	mov	r2, r6
 800c4a2:	f04f 0300 	mov.w	r3, #0
 800c4a6:	f04f 0400 	mov.w	r4, #0
 800c4aa:	0154      	lsls	r4, r2, #5
 800c4ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800c4b0:	014b      	lsls	r3, r1, #5
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	1b49      	subs	r1, r1, r5
 800c4b8:	eb62 0206 	sbc.w	r2, r2, r6
 800c4bc:	f04f 0300 	mov.w	r3, #0
 800c4c0:	f04f 0400 	mov.w	r4, #0
 800c4c4:	0194      	lsls	r4, r2, #6
 800c4c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800c4ca:	018b      	lsls	r3, r1, #6
 800c4cc:	1a5b      	subs	r3, r3, r1
 800c4ce:	eb64 0402 	sbc.w	r4, r4, r2
 800c4d2:	f04f 0100 	mov.w	r1, #0
 800c4d6:	f04f 0200 	mov.w	r2, #0
 800c4da:	00e2      	lsls	r2, r4, #3
 800c4dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800c4e0:	00d9      	lsls	r1, r3, #3
 800c4e2:	460b      	mov	r3, r1
 800c4e4:	4614      	mov	r4, r2
 800c4e6:	195b      	adds	r3, r3, r5
 800c4e8:	eb44 0406 	adc.w	r4, r4, r6
 800c4ec:	f04f 0100 	mov.w	r1, #0
 800c4f0:	f04f 0200 	mov.w	r2, #0
 800c4f4:	02a2      	lsls	r2, r4, #10
 800c4f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800c4fa:	0299      	lsls	r1, r3, #10
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	4614      	mov	r4, r2
 800c500:	4618      	mov	r0, r3
 800c502:	4621      	mov	r1, r4
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f04f 0400 	mov.w	r4, #0
 800c50a:	461a      	mov	r2, r3
 800c50c:	4623      	mov	r3, r4
 800c50e:	f7f4 fbd3 	bl	8000cb8 <__aeabi_uldivmod>
 800c512:	4603      	mov	r3, r0
 800c514:	460c      	mov	r4, r1
 800c516:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c518:	4b0a      	ldr	r3, [pc, #40]	; (800c544 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	0c1b      	lsrs	r3, r3, #16
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	3301      	adds	r3, #1
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c530:	60bb      	str	r3, [r7, #8]
      break;
 800c532:	e002      	b.n	800c53a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c534:	4b04      	ldr	r3, [pc, #16]	; (800c548 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800c536:	60bb      	str	r3, [r7, #8]
      break;
 800c538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c53a:	68bb      	ldr	r3, [r7, #8]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3714      	adds	r7, #20
 800c540:	46bd      	mov	sp, r7
 800c542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c544:	40023800 	.word	0x40023800
 800c548:	00f42400 	.word	0x00f42400

0800c54c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c54c:	b480      	push	{r7}
 800c54e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c550:	4b03      	ldr	r3, [pc, #12]	; (800c560 <HAL_RCC_GetHCLKFreq+0x14>)
 800c552:	681b      	ldr	r3, [r3, #0]
}
 800c554:	4618      	mov	r0, r3
 800c556:	46bd      	mov	sp, r7
 800c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	20000000 	.word	0x20000000

0800c564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c568:	f7ff fff0 	bl	800c54c <HAL_RCC_GetHCLKFreq>
 800c56c:	4601      	mov	r1, r0
 800c56e:	4b05      	ldr	r3, [pc, #20]	; (800c584 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	0a9b      	lsrs	r3, r3, #10
 800c574:	f003 0307 	and.w	r3, r3, #7
 800c578:	4a03      	ldr	r2, [pc, #12]	; (800c588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c57a:	5cd3      	ldrb	r3, [r2, r3]
 800c57c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c580:	4618      	mov	r0, r3
 800c582:	bd80      	pop	{r7, pc}
 800c584:	40023800 	.word	0x40023800
 800c588:	08019fb0 	.word	0x08019fb0

0800c58c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c590:	f7ff ffdc 	bl	800c54c <HAL_RCC_GetHCLKFreq>
 800c594:	4601      	mov	r1, r0
 800c596:	4b05      	ldr	r3, [pc, #20]	; (800c5ac <HAL_RCC_GetPCLK2Freq+0x20>)
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	0b5b      	lsrs	r3, r3, #13
 800c59c:	f003 0307 	and.w	r3, r3, #7
 800c5a0:	4a03      	ldr	r2, [pc, #12]	; (800c5b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c5a2:	5cd3      	ldrb	r3, [r2, r3]
 800c5a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	40023800 	.word	0x40023800
 800c5b0:	08019fb0 	.word	0x08019fb0

0800c5b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b088      	sub	sp, #32
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d00a      	beq.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c5dc:	4b66      	ldr	r3, [pc, #408]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c5e2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5ea:	4963      	ldr	r1, [pc, #396]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d00a      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c5fe:	4b5e      	ldr	r3, [pc, #376]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c604:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60c:	495a      	ldr	r1, [pc, #360]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c60e:	4313      	orrs	r3, r2
 800c610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d10b      	bne.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d105      	bne.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c634:	2b00      	cmp	r3, #0
 800c636:	d075      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c638:	4b50      	ldr	r3, [pc, #320]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c63a:	2200      	movs	r2, #0
 800c63c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c63e:	f7fd fb33 	bl	8009ca8 <HAL_GetTick>
 800c642:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c644:	e008      	b.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c646:	f7fd fb2f 	bl	8009ca8 <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	69fb      	ldr	r3, [r7, #28]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	2b02      	cmp	r3, #2
 800c652:	d901      	bls.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e1dc      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c658:	4b47      	ldr	r3, [pc, #284]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1f0      	bne.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d009      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	019a      	lsls	r2, r3, #6
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	071b      	lsls	r3, r3, #28
 800c67c:	493e      	ldr	r1, [pc, #248]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c67e:	4313      	orrs	r3, r2
 800c680:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0302 	and.w	r3, r3, #2
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d01f      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c690:	4b39      	ldr	r3, [pc, #228]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c696:	0f1b      	lsrs	r3, r3, #28
 800c698:	f003 0307 	and.w	r3, r3, #7
 800c69c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	019a      	lsls	r2, r3, #6
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	061b      	lsls	r3, r3, #24
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	071b      	lsls	r3, r3, #28
 800c6b0:	4931      	ldr	r1, [pc, #196]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c6b8:	4b2f      	ldr	r3, [pc, #188]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c6be:	f023 021f 	bic.w	r2, r3, #31
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	6a1b      	ldr	r3, [r3, #32]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	492b      	ldr	r1, [pc, #172]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00d      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	019a      	lsls	r2, r3, #6
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	061b      	lsls	r3, r3, #24
 800c6e8:	431a      	orrs	r2, r3
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	071b      	lsls	r3, r3, #28
 800c6f0:	4921      	ldr	r1, [pc, #132]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c6f8:	4b20      	ldr	r3, [pc, #128]	; (800c77c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c6fe:	f7fd fad3 	bl	8009ca8 <HAL_GetTick>
 800c702:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c704:	e008      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c706:	f7fd facf 	bl	8009ca8 <HAL_GetTick>
 800c70a:	4602      	mov	r2, r0
 800c70c:	69fb      	ldr	r3, [r7, #28]
 800c70e:	1ad3      	subs	r3, r2, r3
 800c710:	2b02      	cmp	r3, #2
 800c712:	d901      	bls.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c714:	2303      	movs	r3, #3
 800c716:	e17c      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c718:	4b17      	ldr	r3, [pc, #92]	; (800c778 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c720:	2b00      	cmp	r3, #0
 800c722:	d0f0      	beq.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d112      	bne.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10c      	bne.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c744:	2b00      	cmp	r3, #0
 800c746:	f000 80ce 	beq.w	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c74e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c752:	f040 80c8 	bne.w	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c756:	4b0a      	ldr	r3, [pc, #40]	; (800c780 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c758:	2200      	movs	r2, #0
 800c75a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c75c:	f7fd faa4 	bl	8009ca8 <HAL_GetTick>
 800c760:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c762:	e00f      	b.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c764:	f7fd faa0 	bl	8009ca8 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	2b02      	cmp	r3, #2
 800c770:	d908      	bls.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c772:	2303      	movs	r3, #3
 800c774:	e14d      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c776:	bf00      	nop
 800c778:	40023800 	.word	0x40023800
 800c77c:	42470068 	.word	0x42470068
 800c780:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c784:	4ba5      	ldr	r3, [pc, #660]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c790:	d0e8      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	f003 0304 	and.w	r3, r3, #4
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d02e      	beq.n	800c7fc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c79e:	4b9f      	ldr	r3, [pc, #636]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7a4:	0c1b      	lsrs	r3, r3, #16
 800c7a6:	f003 0303 	and.w	r3, r3, #3
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c7b0:	4b9a      	ldr	r3, [pc, #616]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7b6:	0f1b      	lsrs	r3, r3, #28
 800c7b8:	f003 0307 	and.w	r3, r3, #7
 800c7bc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	691b      	ldr	r3, [r3, #16]
 800c7c2:	019a      	lsls	r2, r3, #6
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	085b      	lsrs	r3, r3, #1
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	041b      	lsls	r3, r3, #16
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	061b      	lsls	r3, r3, #24
 800c7d4:	431a      	orrs	r2, r3
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	071b      	lsls	r3, r3, #28
 800c7da:	4990      	ldr	r1, [pc, #576]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c7e2:	4b8e      	ldr	r3, [pc, #568]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	021b      	lsls	r3, r3, #8
 800c7f4:	4989      	ldr	r1, [pc, #548]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	f003 0308 	and.w	r3, r3, #8
 800c804:	2b00      	cmp	r3, #0
 800c806:	d02c      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c808:	4b84      	ldr	r3, [pc, #528]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c80e:	0c1b      	lsrs	r3, r3, #16
 800c810:	f003 0303 	and.w	r3, r3, #3
 800c814:	3301      	adds	r3, #1
 800c816:	005b      	lsls	r3, r3, #1
 800c818:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c81a:	4b80      	ldr	r3, [pc, #512]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c81c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c820:	0e1b      	lsrs	r3, r3, #24
 800c822:	f003 030f 	and.w	r3, r3, #15
 800c826:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	019a      	lsls	r2, r3, #6
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	085b      	lsrs	r3, r3, #1
 800c832:	3b01      	subs	r3, #1
 800c834:	041b      	lsls	r3, r3, #16
 800c836:	431a      	orrs	r2, r3
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	061b      	lsls	r3, r3, #24
 800c83c:	431a      	orrs	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	69db      	ldr	r3, [r3, #28]
 800c842:	071b      	lsls	r3, r3, #28
 800c844:	4975      	ldr	r1, [pc, #468]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c846:	4313      	orrs	r3, r2
 800c848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c84c:	4b73      	ldr	r3, [pc, #460]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c84e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c852:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85a:	4970      	ldr	r1, [pc, #448]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c85c:	4313      	orrs	r3, r2
 800c85e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d024      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c876:	d11f      	bne.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c878:	4b68      	ldr	r3, [pc, #416]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c87a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c87e:	0e1b      	lsrs	r3, r3, #24
 800c880:	f003 030f 	and.w	r3, r3, #15
 800c884:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c886:	4b65      	ldr	r3, [pc, #404]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c88c:	0f1b      	lsrs	r3, r3, #28
 800c88e:	f003 0307 	and.w	r3, r3, #7
 800c892:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	019a      	lsls	r2, r3, #6
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	085b      	lsrs	r3, r3, #1
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	041b      	lsls	r3, r3, #16
 800c8a4:	431a      	orrs	r2, r3
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	061b      	lsls	r3, r3, #24
 800c8aa:	431a      	orrs	r2, r3
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	071b      	lsls	r3, r3, #28
 800c8b0:	495a      	ldr	r1, [pc, #360]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c8b8:	4b59      	ldr	r3, [pc, #356]	; (800ca20 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8be:	f7fd f9f3 	bl	8009ca8 <HAL_GetTick>
 800c8c2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c8c4:	e008      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c8c6:	f7fd f9ef 	bl	8009ca8 <HAL_GetTick>
 800c8ca:	4602      	mov	r2, r0
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	1ad3      	subs	r3, r2, r3
 800c8d0:	2b02      	cmp	r3, #2
 800c8d2:	d901      	bls.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	e09c      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c8d8:	4b50      	ldr	r3, [pc, #320]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e4:	d1ef      	bne.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 0320 	and.w	r3, r3, #32
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f000 8083 	beq.w	800c9fa <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60bb      	str	r3, [r7, #8]
 800c8f8:	4b48      	ldr	r3, [pc, #288]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fc:	4a47      	ldr	r2, [pc, #284]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c8fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c902:	6413      	str	r3, [r2, #64]	; 0x40
 800c904:	4b45      	ldr	r3, [pc, #276]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c90c:	60bb      	str	r3, [r7, #8]
 800c90e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c910:	4b44      	ldr	r3, [pc, #272]	; (800ca24 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a43      	ldr	r2, [pc, #268]	; (800ca24 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c91a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c91c:	f7fd f9c4 	bl	8009ca8 <HAL_GetTick>
 800c920:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c922:	e008      	b.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c924:	f7fd f9c0 	bl	8009ca8 <HAL_GetTick>
 800c928:	4602      	mov	r2, r0
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	2b02      	cmp	r3, #2
 800c930:	d901      	bls.n	800c936 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c932:	2303      	movs	r3, #3
 800c934:	e06d      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c936:	4b3b      	ldr	r3, [pc, #236]	; (800ca24 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0f0      	beq.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c942:	4b36      	ldr	r3, [pc, #216]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c94a:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c94c:	69bb      	ldr	r3, [r7, #24]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d02f      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c95a:	69ba      	ldr	r2, [r7, #24]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d028      	beq.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c960:	4b2e      	ldr	r3, [pc, #184]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c968:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c96a:	4b2f      	ldr	r3, [pc, #188]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c96c:	2201      	movs	r2, #1
 800c96e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c970:	4b2d      	ldr	r3, [pc, #180]	; (800ca28 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c976:	4a29      	ldr	r2, [pc, #164]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c978:	69bb      	ldr	r3, [r7, #24]
 800c97a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c97c:	4b27      	ldr	r3, [pc, #156]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c97e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b01      	cmp	r3, #1
 800c986:	d114      	bne.n	800c9b2 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c988:	f7fd f98e 	bl	8009ca8 <HAL_GetTick>
 800c98c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c98e:	e00a      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c990:	f7fd f98a 	bl	8009ca8 <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d901      	bls.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c9a2:	2303      	movs	r3, #3
 800c9a4:	e035      	b.n	800ca12 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c9a6:	4b1d      	ldr	r3, [pc, #116]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9aa:	f003 0302 	and.w	r3, r3, #2
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0ee      	beq.n	800c990 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9be:	d10d      	bne.n	800c9dc <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c9c0:	4b16      	ldr	r3, [pc, #88]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c9d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9d4:	4911      	ldr	r1, [pc, #68]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	608b      	str	r3, [r1, #8]
 800c9da:	e005      	b.n	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9de:	689b      	ldr	r3, [r3, #8]
 800c9e0:	4a0e      	ldr	r2, [pc, #56]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c9e6:	6093      	str	r3, [r2, #8]
 800c9e8:	4b0c      	ldr	r3, [pc, #48]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c9f4:	4909      	ldr	r1, [pc, #36]	; (800ca1c <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f003 0310 	and.w	r3, r3, #16
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d004      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800ca0c:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800ca0e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3720      	adds	r7, #32
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	40023800 	.word	0x40023800
 800ca20:	42470070 	.word	0x42470070
 800ca24:	40007000 	.word	0x40007000
 800ca28:	42470e40 	.word	0x42470e40
 800ca2c:	424711e0 	.word	0x424711e0

0800ca30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b086      	sub	sp, #24
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f003 0301 	and.w	r3, r3, #1
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d075      	beq.n	800cb34 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ca48:	4ba2      	ldr	r3, [pc, #648]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800ca4a:	689b      	ldr	r3, [r3, #8]
 800ca4c:	f003 030c 	and.w	r3, r3, #12
 800ca50:	2b04      	cmp	r3, #4
 800ca52:	d00c      	beq.n	800ca6e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca54:	4b9f      	ldr	r3, [pc, #636]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ca5c:	2b08      	cmp	r3, #8
 800ca5e:	d112      	bne.n	800ca86 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ca60:	4b9c      	ldr	r3, [pc, #624]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ca6c:	d10b      	bne.n	800ca86 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca6e:	4b99      	ldr	r3, [pc, #612]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d05b      	beq.n	800cb32 <HAL_RCC_OscConfig+0x102>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d157      	bne.n	800cb32 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e20b      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca8e:	d106      	bne.n	800ca9e <HAL_RCC_OscConfig+0x6e>
 800ca90:	4b90      	ldr	r3, [pc, #576]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4a8f      	ldr	r2, [pc, #572]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800ca96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ca9a:	6013      	str	r3, [r2, #0]
 800ca9c:	e01d      	b.n	800cada <HAL_RCC_OscConfig+0xaa>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800caa6:	d10c      	bne.n	800cac2 <HAL_RCC_OscConfig+0x92>
 800caa8:	4b8a      	ldr	r3, [pc, #552]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a89      	ldr	r2, [pc, #548]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800caae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cab2:	6013      	str	r3, [r2, #0]
 800cab4:	4b87      	ldr	r3, [pc, #540]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	4a86      	ldr	r2, [pc, #536]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800caba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cabe:	6013      	str	r3, [r2, #0]
 800cac0:	e00b      	b.n	800cada <HAL_RCC_OscConfig+0xaa>
 800cac2:	4b84      	ldr	r3, [pc, #528]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4a83      	ldr	r2, [pc, #524]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cacc:	6013      	str	r3, [r2, #0]
 800cace:	4b81      	ldr	r3, [pc, #516]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a80      	ldr	r2, [pc, #512]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cad8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d013      	beq.n	800cb0a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cae2:	f7fd f8e1 	bl	8009ca8 <HAL_GetTick>
 800cae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cae8:	e008      	b.n	800cafc <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800caea:	f7fd f8dd 	bl	8009ca8 <HAL_GetTick>
 800caee:	4602      	mov	r2, r0
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	1ad3      	subs	r3, r2, r3
 800caf4:	2b64      	cmp	r3, #100	; 0x64
 800caf6:	d901      	bls.n	800cafc <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800caf8:	2303      	movs	r3, #3
 800cafa:	e1d0      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cafc:	4b75      	ldr	r3, [pc, #468]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d0f0      	beq.n	800caea <HAL_RCC_OscConfig+0xba>
 800cb08:	e014      	b.n	800cb34 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb0a:	f7fd f8cd 	bl	8009ca8 <HAL_GetTick>
 800cb0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb10:	e008      	b.n	800cb24 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800cb12:	f7fd f8c9 	bl	8009ca8 <HAL_GetTick>
 800cb16:	4602      	mov	r2, r0
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	1ad3      	subs	r3, r2, r3
 800cb1c:	2b64      	cmp	r3, #100	; 0x64
 800cb1e:	d901      	bls.n	800cb24 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800cb20:	2303      	movs	r3, #3
 800cb22:	e1bc      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cb24:	4b6b      	ldr	r3, [pc, #428]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d1f0      	bne.n	800cb12 <HAL_RCC_OscConfig+0xe2>
 800cb30:	e000      	b.n	800cb34 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cb32:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f003 0302 	and.w	r3, r3, #2
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d063      	beq.n	800cc08 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cb40:	4b64      	ldr	r3, [pc, #400]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	f003 030c 	and.w	r3, r3, #12
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb4c:	4b61      	ldr	r3, [pc, #388]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800cb54:	2b08      	cmp	r3, #8
 800cb56:	d11c      	bne.n	800cb92 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800cb58:	4b5e      	ldr	r3, [pc, #376]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d116      	bne.n	800cb92 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb64:	4b5b      	ldr	r3, [pc, #364]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	f003 0302 	and.w	r3, r3, #2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d005      	beq.n	800cb7c <HAL_RCC_OscConfig+0x14c>
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d001      	beq.n	800cb7c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e190      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cb7c:	4b55      	ldr	r3, [pc, #340]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	691b      	ldr	r3, [r3, #16]
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	4952      	ldr	r1, [pc, #328]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800cb90:	e03a      	b.n	800cc08 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d020      	beq.n	800cbdc <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800cb9a:	4b4f      	ldr	r3, [pc, #316]	; (800ccd8 <HAL_RCC_OscConfig+0x2a8>)
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cba0:	f7fd f882 	bl	8009ca8 <HAL_GetTick>
 800cba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cba6:	e008      	b.n	800cbba <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cba8:	f7fd f87e 	bl	8009ca8 <HAL_GetTick>
 800cbac:	4602      	mov	r2, r0
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	1ad3      	subs	r3, r2, r3
 800cbb2:	2b02      	cmp	r3, #2
 800cbb4:	d901      	bls.n	800cbba <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800cbb6:	2303      	movs	r3, #3
 800cbb8:	e171      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cbba:	4b46      	ldr	r3, [pc, #280]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	f003 0302 	and.w	r3, r3, #2
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d0f0      	beq.n	800cba8 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800cbc6:	4b43      	ldr	r3, [pc, #268]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	00db      	lsls	r3, r3, #3
 800cbd4:	493f      	ldr	r1, [pc, #252]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	600b      	str	r3, [r1, #0]
 800cbda:	e015      	b.n	800cc08 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cbdc:	4b3e      	ldr	r3, [pc, #248]	; (800ccd8 <HAL_RCC_OscConfig+0x2a8>)
 800cbde:	2200      	movs	r2, #0
 800cbe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cbe2:	f7fd f861 	bl	8009ca8 <HAL_GetTick>
 800cbe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbe8:	e008      	b.n	800cbfc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800cbea:	f7fd f85d 	bl	8009ca8 <HAL_GetTick>
 800cbee:	4602      	mov	r2, r0
 800cbf0:	693b      	ldr	r3, [r7, #16]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	2b02      	cmp	r3, #2
 800cbf6:	d901      	bls.n	800cbfc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e150      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cbfc:	4b35      	ldr	r3, [pc, #212]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f003 0302 	and.w	r3, r3, #2
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1f0      	bne.n	800cbea <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 0308 	and.w	r3, r3, #8
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d030      	beq.n	800cc76 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	695b      	ldr	r3, [r3, #20]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d016      	beq.n	800cc4a <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cc1c:	4b2f      	ldr	r3, [pc, #188]	; (800ccdc <HAL_RCC_OscConfig+0x2ac>)
 800cc1e:	2201      	movs	r2, #1
 800cc20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc22:	f7fd f841 	bl	8009ca8 <HAL_GetTick>
 800cc26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc28:	e008      	b.n	800cc3c <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc2a:	f7fd f83d 	bl	8009ca8 <HAL_GetTick>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	2b02      	cmp	r3, #2
 800cc36:	d901      	bls.n	800cc3c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800cc38:	2303      	movs	r3, #3
 800cc3a:	e130      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cc3c:	4b25      	ldr	r3, [pc, #148]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cc3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc40:	f003 0302 	and.w	r3, r3, #2
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d0f0      	beq.n	800cc2a <HAL_RCC_OscConfig+0x1fa>
 800cc48:	e015      	b.n	800cc76 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cc4a:	4b24      	ldr	r3, [pc, #144]	; (800ccdc <HAL_RCC_OscConfig+0x2ac>)
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc50:	f7fd f82a 	bl	8009ca8 <HAL_GetTick>
 800cc54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc56:	e008      	b.n	800cc6a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800cc58:	f7fd f826 	bl	8009ca8 <HAL_GetTick>
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	1ad3      	subs	r3, r2, r3
 800cc62:	2b02      	cmp	r3, #2
 800cc64:	d901      	bls.n	800cc6a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e119      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cc6a:	4b1a      	ldr	r3, [pc, #104]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cc6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc6e:	f003 0302 	and.w	r3, r3, #2
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d1f0      	bne.n	800cc58 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0304 	and.w	r3, r3, #4
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	f000 809f 	beq.w	800cdc2 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cc84:	2300      	movs	r3, #0
 800cc86:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cc88:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cc8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d10f      	bne.n	800ccb4 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cc94:	2300      	movs	r3, #0
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	4b0e      	ldr	r3, [pc, #56]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc9c:	4a0d      	ldr	r2, [pc, #52]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cc9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cca2:	6413      	str	r3, [r2, #64]	; 0x40
 800cca4:	4b0b      	ldr	r3, [pc, #44]	; (800ccd4 <HAL_RCC_OscConfig+0x2a4>)
 800cca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccac:	60fb      	str	r3, [r7, #12]
 800ccae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccb4:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <HAL_RCC_OscConfig+0x2b0>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d120      	bne.n	800cd02 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ccc0:	4b07      	ldr	r3, [pc, #28]	; (800cce0 <HAL_RCC_OscConfig+0x2b0>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a06      	ldr	r2, [pc, #24]	; (800cce0 <HAL_RCC_OscConfig+0x2b0>)
 800ccc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ccca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cccc:	f7fc ffec 	bl	8009ca8 <HAL_GetTick>
 800ccd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccd2:	e010      	b.n	800ccf6 <HAL_RCC_OscConfig+0x2c6>
 800ccd4:	40023800 	.word	0x40023800
 800ccd8:	42470000 	.word	0x42470000
 800ccdc:	42470e80 	.word	0x42470e80
 800cce0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cce4:	f7fc ffe0 	bl	8009ca8 <HAL_GetTick>
 800cce8:	4602      	mov	r2, r0
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	1ad3      	subs	r3, r2, r3
 800ccee:	2b02      	cmp	r3, #2
 800ccf0:	d901      	bls.n	800ccf6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800ccf2:	2303      	movs	r3, #3
 800ccf4:	e0d3      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ccf6:	4b6c      	ldr	r3, [pc, #432]	; (800cea8 <HAL_RCC_OscConfig+0x478>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0f0      	beq.n	800cce4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	689b      	ldr	r3, [r3, #8]
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d106      	bne.n	800cd18 <HAL_RCC_OscConfig+0x2e8>
 800cd0a:	4b68      	ldr	r3, [pc, #416]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd0e:	4a67      	ldr	r2, [pc, #412]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd10:	f043 0301 	orr.w	r3, r3, #1
 800cd14:	6713      	str	r3, [r2, #112]	; 0x70
 800cd16:	e01c      	b.n	800cd52 <HAL_RCC_OscConfig+0x322>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	2b05      	cmp	r3, #5
 800cd1e:	d10c      	bne.n	800cd3a <HAL_RCC_OscConfig+0x30a>
 800cd20:	4b62      	ldr	r3, [pc, #392]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd24:	4a61      	ldr	r2, [pc, #388]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd26:	f043 0304 	orr.w	r3, r3, #4
 800cd2a:	6713      	str	r3, [r2, #112]	; 0x70
 800cd2c:	4b5f      	ldr	r3, [pc, #380]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd30:	4a5e      	ldr	r2, [pc, #376]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd32:	f043 0301 	orr.w	r3, r3, #1
 800cd36:	6713      	str	r3, [r2, #112]	; 0x70
 800cd38:	e00b      	b.n	800cd52 <HAL_RCC_OscConfig+0x322>
 800cd3a:	4b5c      	ldr	r3, [pc, #368]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd3e:	4a5b      	ldr	r2, [pc, #364]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd40:	f023 0301 	bic.w	r3, r3, #1
 800cd44:	6713      	str	r3, [r2, #112]	; 0x70
 800cd46:	4b59      	ldr	r3, [pc, #356]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd4a:	4a58      	ldr	r2, [pc, #352]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd4c:	f023 0304 	bic.w	r3, r3, #4
 800cd50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d015      	beq.n	800cd86 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd5a:	f7fc ffa5 	bl	8009ca8 <HAL_GetTick>
 800cd5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd60:	e00a      	b.n	800cd78 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd62:	f7fc ffa1 	bl	8009ca8 <HAL_GetTick>
 800cd66:	4602      	mov	r2, r0
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	1ad3      	subs	r3, r2, r3
 800cd6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd70:	4293      	cmp	r3, r2
 800cd72:	d901      	bls.n	800cd78 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800cd74:	2303      	movs	r3, #3
 800cd76:	e092      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cd78:	4b4c      	ldr	r3, [pc, #304]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cd7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd7c:	f003 0302 	and.w	r3, r3, #2
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d0ee      	beq.n	800cd62 <HAL_RCC_OscConfig+0x332>
 800cd84:	e014      	b.n	800cdb0 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cd86:	f7fc ff8f 	bl	8009ca8 <HAL_GetTick>
 800cd8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cd8c:	e00a      	b.n	800cda4 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cd8e:	f7fc ff8b 	bl	8009ca8 <HAL_GetTick>
 800cd92:	4602      	mov	r2, r0
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d901      	bls.n	800cda4 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800cda0:	2303      	movs	r3, #3
 800cda2:	e07c      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cda4:	4b41      	ldr	r3, [pc, #260]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cda6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cda8:	f003 0302 	and.w	r3, r3, #2
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1ee      	bne.n	800cd8e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cdb0:	7dfb      	ldrb	r3, [r7, #23]
 800cdb2:	2b01      	cmp	r3, #1
 800cdb4:	d105      	bne.n	800cdc2 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cdb6:	4b3d      	ldr	r3, [pc, #244]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdba:	4a3c      	ldr	r2, [pc, #240]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cdbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	699b      	ldr	r3, [r3, #24]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d068      	beq.n	800ce9c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cdca:	4b38      	ldr	r3, [pc, #224]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800cdcc:	689b      	ldr	r3, [r3, #8]
 800cdce:	f003 030c 	and.w	r3, r3, #12
 800cdd2:	2b08      	cmp	r3, #8
 800cdd4:	d060      	beq.n	800ce98 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	2b02      	cmp	r3, #2
 800cddc:	d145      	bne.n	800ce6a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdde:	4b34      	ldr	r3, [pc, #208]	; (800ceb0 <HAL_RCC_OscConfig+0x480>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cde4:	f7fc ff60 	bl	8009ca8 <HAL_GetTick>
 800cde8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdea:	e008      	b.n	800cdfe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cdec:	f7fc ff5c 	bl	8009ca8 <HAL_GetTick>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	1ad3      	subs	r3, r2, r3
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d901      	bls.n	800cdfe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800cdfa:	2303      	movs	r3, #3
 800cdfc:	e04f      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cdfe:	4b2b      	ldr	r3, [pc, #172]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d1f0      	bne.n	800cdec <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	69da      	ldr	r2, [r3, #28]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6a1b      	ldr	r3, [r3, #32]
 800ce12:	431a      	orrs	r2, r3
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce18:	019b      	lsls	r3, r3, #6
 800ce1a:	431a      	orrs	r2, r3
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce20:	085b      	lsrs	r3, r3, #1
 800ce22:	3b01      	subs	r3, #1
 800ce24:	041b      	lsls	r3, r3, #16
 800ce26:	431a      	orrs	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce2c:	061b      	lsls	r3, r3, #24
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce34:	071b      	lsls	r3, r3, #28
 800ce36:	491d      	ldr	r1, [pc, #116]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ce3c:	4b1c      	ldr	r3, [pc, #112]	; (800ceb0 <HAL_RCC_OscConfig+0x480>)
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce42:	f7fc ff31 	bl	8009ca8 <HAL_GetTick>
 800ce46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce48:	e008      	b.n	800ce5c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce4a:	f7fc ff2d 	bl	8009ca8 <HAL_GetTick>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	693b      	ldr	r3, [r7, #16]
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	2b02      	cmp	r3, #2
 800ce56:	d901      	bls.n	800ce5c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e020      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ce5c:	4b13      	ldr	r3, [pc, #76]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d0f0      	beq.n	800ce4a <HAL_RCC_OscConfig+0x41a>
 800ce68:	e018      	b.n	800ce9c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ce6a:	4b11      	ldr	r3, [pc, #68]	; (800ceb0 <HAL_RCC_OscConfig+0x480>)
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce70:	f7fc ff1a 	bl	8009ca8 <HAL_GetTick>
 800ce74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce76:	e008      	b.n	800ce8a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ce78:	f7fc ff16 	bl	8009ca8 <HAL_GetTick>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	1ad3      	subs	r3, r2, r3
 800ce82:	2b02      	cmp	r3, #2
 800ce84:	d901      	bls.n	800ce8a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e009      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ce8a:	4b08      	ldr	r3, [pc, #32]	; (800ceac <HAL_RCC_OscConfig+0x47c>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1f0      	bne.n	800ce78 <HAL_RCC_OscConfig+0x448>
 800ce96:	e001      	b.n	800ce9c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e000      	b.n	800ce9e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3718      	adds	r7, #24
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	40007000 	.word	0x40007000
 800ceac:	40023800 	.word	0x40023800
 800ceb0:	42470060 	.word	0x42470060

0800ceb4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d101      	bne.n	800cec6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cec2:	2301      	movs	r3, #1
 800cec4:	e022      	b.n	800cf0c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cecc:	b2db      	uxtb	r3, r3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f7fa f869 	bl	8006fb0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2203      	movs	r2, #3
 800cee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f000 f814 	bl	800cf14 <HAL_SD_InitCard>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d001      	beq.n	800cef6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e00a      	b.n	800cf0c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2200      	movs	r2, #0
 800cf00:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cf0a:	2300      	movs	r3, #0
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf14:	b5b0      	push	{r4, r5, r7, lr}
 800cf16:	b08e      	sub	sp, #56	; 0x38
 800cf18:	af04      	add	r7, sp, #16
 800cf1a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cf20:	2300      	movs	r3, #0
 800cf22:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cf24:	2300      	movs	r3, #0
 800cf26:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cf30:	2376      	movs	r3, #118	; 0x76
 800cf32:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681d      	ldr	r5, [r3, #0]
 800cf38:	466c      	mov	r4, sp
 800cf3a:	f107 0314 	add.w	r3, r7, #20
 800cf3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf46:	f107 0308 	add.w	r3, r7, #8
 800cf4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf4c:	4628      	mov	r0, r5
 800cf4e:	f003 fa87 	bl	8010460 <SDIO_Init>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cf58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d001      	beq.n	800cf64 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cf60:	2301      	movs	r3, #1
 800cf62:	e031      	b.n	800cfc8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cf64:	4b1a      	ldr	r3, [pc, #104]	; (800cfd0 <HAL_SD_InitCard+0xbc>)
 800cf66:	2200      	movs	r2, #0
 800cf68:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f003 fabf 	bl	80104f2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cf74:	4b16      	ldr	r3, [pc, #88]	; (800cfd0 <HAL_SD_InitCard+0xbc>)
 800cf76:	2201      	movs	r2, #1
 800cf78:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 ffc6 	bl	800df0c <SD_PowerON>
 800cf80:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cf82:	6a3b      	ldr	r3, [r7, #32]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00b      	beq.n	800cfa0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf94:	6a3b      	ldr	r3, [r7, #32]
 800cf96:	431a      	orrs	r2, r3
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf9c:	2301      	movs	r3, #1
 800cf9e:	e013      	b.n	800cfc8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cfa0:	6878      	ldr	r0, [r7, #4]
 800cfa2:	f000 fee5 	bl	800dd70 <SD_InitCard>
 800cfa6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfa8:	6a3b      	ldr	r3, [r7, #32]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d00b      	beq.n	800cfc6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2201      	movs	r2, #1
 800cfb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfba:	6a3b      	ldr	r3, [r7, #32]
 800cfbc:	431a      	orrs	r2, r3
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e000      	b.n	800cfc8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800cfc6:	2300      	movs	r3, #0
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3728      	adds	r7, #40	; 0x28
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd0:	422580a0 	.word	0x422580a0

0800cfd4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b08c      	sub	sp, #48	; 0x30
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	60f8      	str	r0, [r7, #12]
 800cfdc:	60b9      	str	r1, [r7, #8]
 800cfde:	607a      	str	r2, [r7, #4]
 800cfe0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d107      	bne.n	800cffc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e0c7      	b.n	800d18c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d002:	b2db      	uxtb	r3, r3
 800d004:	2b01      	cmp	r3, #1
 800d006:	f040 80c0 	bne.w	800d18a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d010:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	441a      	add	r2, r3
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d907      	bls.n	800d02e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d02a:	2301      	movs	r3, #1
 800d02c:	e0ae      	b.n	800d18c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2203      	movs	r2, #3
 800d032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2200      	movs	r2, #0
 800d03c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d04c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d052:	4a50      	ldr	r2, [pc, #320]	; (800d194 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800d054:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05a:	4a4f      	ldr	r2, [pc, #316]	; (800d198 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800d05c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d062:	2200      	movs	r2, #0
 800d064:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3380      	adds	r3, #128	; 0x80
 800d070:	4619      	mov	r1, r3
 800d072:	68ba      	ldr	r2, [r7, #8]
 800d074:	683b      	ldr	r3, [r7, #0]
 800d076:	025b      	lsls	r3, r3, #9
 800d078:	089b      	lsrs	r3, r3, #2
 800d07a:	f7fd fc07 	bl	800a88c <HAL_DMA_Start_IT>
 800d07e:	4603      	mov	r3, r0
 800d080:	2b00      	cmp	r3, #0
 800d082:	d017      	beq.n	800d0b4 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d092:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	4a40      	ldr	r2, [pc, #256]	; (800d19c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d09a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	e06b      	b.n	800d18c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d0b4:	4b3a      	ldr	r3, [pc, #232]	; (800d1a0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0be:	2b01      	cmp	r3, #1
 800d0c0:	d002      	beq.n	800d0c8 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800d0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c4:	025b      	lsls	r3, r3, #9
 800d0c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f003 faa1 	bl	8010618 <SDMMC_CmdBlockLength>
 800d0d6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d00f      	beq.n	800d0fe <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	4a2e      	ldr	r2, [pc, #184]	; (800d19c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d0e4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	431a      	orrs	r2, r3
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2201      	movs	r2, #1
 800d0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e046      	b.n	800d18c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0fe:	f04f 33ff 	mov.w	r3, #4294967295
 800d102:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	025b      	lsls	r3, r3, #9
 800d108:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d10a:	2390      	movs	r3, #144	; 0x90
 800d10c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d10e:	2302      	movs	r3, #2
 800d110:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d112:	2300      	movs	r3, #0
 800d114:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d116:	2301      	movs	r3, #1
 800d118:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f107 0210 	add.w	r2, r7, #16
 800d122:	4611      	mov	r1, r2
 800d124:	4618      	mov	r0, r3
 800d126:	f003 fa4b 	bl	80105c0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d90a      	bls.n	800d146 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2282      	movs	r2, #130	; 0x82
 800d134:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d13c:	4618      	mov	r0, r3
 800d13e:	f003 faaf 	bl	80106a0 <SDMMC_CmdReadMultiBlock>
 800d142:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d144:	e009      	b.n	800d15a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	2281      	movs	r2, #129	; 0x81
 800d14a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d152:	4618      	mov	r0, r3
 800d154:	f003 fa82 	bl	801065c <SDMMC_CmdReadSingleBlock>
 800d158:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d15a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d012      	beq.n	800d186 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a0d      	ldr	r2, [pc, #52]	; (800d19c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800d166:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16e:	431a      	orrs	r2, r3
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2201      	movs	r2, #1
 800d178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d182:	2301      	movs	r3, #1
 800d184:	e002      	b.n	800d18c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800d186:	2300      	movs	r3, #0
 800d188:	e000      	b.n	800d18c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800d18a:	2302      	movs	r3, #2
  }
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3730      	adds	r7, #48	; 0x30
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	0800db7f 	.word	0x0800db7f
 800d198:	0800dbf1 	.word	0x0800dbf1
 800d19c:	004005ff 	.word	0x004005ff
 800d1a0:	4225858c 	.word	0x4225858c

0800d1a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b08c      	sub	sp, #48	; 0x30
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d107      	bne.n	800d1cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	e0ca      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d1d2:	b2db      	uxtb	r3, r3
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	f040 80c3 	bne.w	800d360 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d1e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	441a      	add	r2, r3
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d907      	bls.n	800d1fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e0b1      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2203      	movs	r2, #3
 800d202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2200      	movs	r2, #0
 800d20c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f042 021a 	orr.w	r2, r2, #26
 800d21c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d222:	4a52      	ldr	r2, [pc, #328]	; (800d36c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800d224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d22a:	4a51      	ldr	r2, [pc, #324]	; (800d370 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800d22c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d232:	2200      	movs	r2, #0
 800d234:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d002      	beq.n	800d244 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	025b      	lsls	r3, r3, #9
 800d242:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d24c:	4618      	mov	r0, r3
 800d24e:	f003 f9e3 	bl	8010618 <SDMMC_CmdBlockLength>
 800d252:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00f      	beq.n	800d27a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4a45      	ldr	r2, [pc, #276]	; (800d374 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d260:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d268:	431a      	orrs	r2, r3
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2201      	movs	r2, #1
 800d272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e073      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d90a      	bls.n	800d296 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	22a0      	movs	r2, #160	; 0xa0
 800d284:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d28c:	4618      	mov	r0, r3
 800d28e:	f003 fa4b 	bl	8010728 <SDMMC_CmdWriteMultiBlock>
 800d292:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d294:	e009      	b.n	800d2aa <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	2290      	movs	r2, #144	; 0x90
 800d29a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	f003 fa1e 	bl	80106e4 <SDMMC_CmdWriteSingleBlock>
 800d2a8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d012      	beq.n	800d2d6 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4a2f      	ldr	r2, [pc, #188]	; (800d374 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d2b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2be:	431a      	orrs	r2, r3
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	2201      	movs	r2, #1
 800d2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e045      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d2d6:	4b28      	ldr	r3, [pc, #160]	; (800d378 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800d2d8:	2201      	movs	r2, #1
 800d2da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d2e0:	68b9      	ldr	r1, [r7, #8]
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3380      	adds	r3, #128	; 0x80
 800d2e8:	461a      	mov	r2, r3
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	025b      	lsls	r3, r3, #9
 800d2ee:	089b      	lsrs	r3, r3, #2
 800d2f0:	f7fd facc 	bl	800a88c <HAL_DMA_Start_IT>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d01a      	beq.n	800d330 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f022 021a 	bic.w	r2, r2, #26
 800d308:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	4a19      	ldr	r2, [pc, #100]	; (800d374 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800d310:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d316:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2201      	movs	r2, #1
 800d322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e018      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	025b      	lsls	r3, r3, #9
 800d33a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d33c:	2390      	movs	r3, #144	; 0x90
 800d33e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d340:	2300      	movs	r3, #0
 800d342:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d344:	2300      	movs	r3, #0
 800d346:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d348:	2301      	movs	r3, #1
 800d34a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f107 0210 	add.w	r2, r7, #16
 800d354:	4611      	mov	r1, r2
 800d356:	4618      	mov	r0, r3
 800d358:	f003 f932 	bl	80105c0 <SDIO_ConfigData>

      return HAL_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	e000      	b.n	800d362 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800d360:	2302      	movs	r3, #2
  }
}
 800d362:	4618      	mov	r0, r3
 800d364:	3730      	adds	r7, #48	; 0x30
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	0800db55 	.word	0x0800db55
 800d370:	0800dbf1 	.word	0x0800dbf1
 800d374:	004005ff 	.word	0x004005ff
 800d378:	4225858c 	.word	0x4225858c

0800d37c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d388:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d394:	2b00      	cmp	r3, #0
 800d396:	d008      	beq.n	800d3aa <HAL_SD_IRQHandler+0x2e>
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f003 0308 	and.w	r3, r3, #8
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d003      	beq.n	800d3aa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 ffc8 	bl	800e338 <SD_Read_IT>
 800d3a8:	e155      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	f000 808f 	beq.w	800d4d8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3c2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	6812      	ldr	r2, [r2, #0]
 800d3ce:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d3d2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d3d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	f022 0201 	bic.w	r2, r2, #1
 800d3e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	f003 0308 	and.w	r3, r3, #8
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d039      	beq.n	800d466 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f003 0302 	and.w	r3, r3, #2
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d104      	bne.n	800d406 <HAL_SD_IRQHandler+0x8a>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f003 0320 	and.w	r3, r3, #32
 800d402:	2b00      	cmp	r3, #0
 800d404:	d011      	beq.n	800d42a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	4618      	mov	r0, r3
 800d40c:	f003 f9ae 	bl	801076c <SDMMC_CmdStopTransfer>
 800d410:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d008      	beq.n	800d42a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	431a      	orrs	r2, r3
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 f91f 	bl	800d668 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d432:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2201      	movs	r2, #1
 800d438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f003 0301 	and.w	r3, r3, #1
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d104      	bne.n	800d456 <HAL_SD_IRQHandler+0xda>
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	f003 0302 	and.w	r3, r3, #2
 800d452:	2b00      	cmp	r3, #0
 800d454:	d003      	beq.n	800d45e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f003 fe04 	bl	8011064 <HAL_SD_RxCpltCallback>
 800d45c:	e0fb      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f003 fdf6 	bl	8011050 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d464:	e0f7      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 80f2 	beq.w	800d656 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f003 0320 	and.w	r3, r3, #32
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d011      	beq.n	800d4a0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4618      	mov	r0, r3
 800d482:	f003 f973 	bl	801076c <SDMMC_CmdStopTransfer>
 800d486:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d008      	beq.n	800d4a0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	431a      	orrs	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f8e4 	bl	800d668 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f003 0301 	and.w	r3, r3, #1
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f040 80d5 	bne.w	800d656 <HAL_SD_IRQHandler+0x2da>
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f003 0302 	and.w	r3, r3, #2
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	f040 80cf 	bne.w	800d656 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f022 0208 	bic.w	r2, r2, #8
 800d4c6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f003 fdbd 	bl	8011050 <HAL_SD_TxCpltCallback>
}
 800d4d6:	e0be      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d008      	beq.n	800d4f8 <HAL_SD_IRQHandler+0x17c>
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f003 0308 	and.w	r3, r3, #8
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d003      	beq.n	800d4f8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 ff72 	bl	800e3da <SD_Write_IT>
 800d4f6:	e0ae      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4fe:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d502:	2b00      	cmp	r3, #0
 800d504:	f000 80a7 	beq.w	800d656 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d50e:	f003 0302 	and.w	r3, r3, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d005      	beq.n	800d522 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	f043 0202 	orr.w	r2, r3, #2
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d528:	f003 0308 	and.w	r3, r3, #8
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d005      	beq.n	800d53c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d534:	f043 0208 	orr.w	r2, r3, #8
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d542:	f003 0320 	and.w	r3, r3, #32
 800d546:	2b00      	cmp	r3, #0
 800d548:	d005      	beq.n	800d556 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54e:	f043 0220 	orr.w	r2, r3, #32
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55c:	f003 0310 	and.w	r3, r3, #16
 800d560:	2b00      	cmp	r3, #0
 800d562:	d005      	beq.n	800d570 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d568:	f043 0210 	orr.w	r2, r3, #16
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f240 523a 	movw	r2, #1338	; 0x53a
 800d578:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d588:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	4618      	mov	r0, r3
 800d590:	f003 f8ec 	bl	801076c <SDMMC_CmdStopTransfer>
 800d594:	4602      	mov	r2, r0
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d59a:	431a      	orrs	r2, r3
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f003 0308 	and.w	r3, r3, #8
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d00a      	beq.n	800d5c0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	2200      	movs	r2, #0
 800d5b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f000 f855 	bl	800d668 <HAL_SD_ErrorCallback>
}
 800d5be:	e04a      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d045      	beq.n	800d656 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f003 0310 	and.w	r3, r3, #16
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d104      	bne.n	800d5de <HAL_SD_IRQHandler+0x262>
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f003 0320 	and.w	r3, r3, #32
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d011      	beq.n	800d602 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e2:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <HAL_SD_IRQHandler+0x2e4>)
 800d5e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f7fd f9a6 	bl	800a93c <HAL_DMA_Abort_IT>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d02f      	beq.n	800d656 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f000 fb4a 	bl	800dc94 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d600:	e029      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	f003 0301 	and.w	r3, r3, #1
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d104      	bne.n	800d616 <HAL_SD_IRQHandler+0x29a>
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	f003 0302 	and.w	r3, r3, #2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d011      	beq.n	800d63a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d61a:	4a12      	ldr	r2, [pc, #72]	; (800d664 <HAL_SD_IRQHandler+0x2e8>)
 800d61c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d622:	4618      	mov	r0, r3
 800d624:	f7fd f98a 	bl	800a93c <HAL_DMA_Abort_IT>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d013      	beq.n	800d656 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d632:	4618      	mov	r0, r3
 800d634:	f000 fb65 	bl	800dd02 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d638:	e00d      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2200      	movs	r2, #0
 800d63e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2201      	movs	r2, #1
 800d644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f003 fcf4 	bl	801103c <HAL_SD_AbortCallback>
}
 800d654:	e7ff      	b.n	800d656 <HAL_SD_IRQHandler+0x2da>
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}
 800d65e:	bf00      	nop
 800d660:	0800dc95 	.word	0x0800dc95
 800d664:	0800dd03 	.word	0x0800dd03

0800d668 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d668:	b480      	push	{r7}
 800d66a:	b083      	sub	sp, #12
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr

0800d67c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d68a:	0f9b      	lsrs	r3, r3, #30
 800d68c:	b2da      	uxtb	r2, r3
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d696:	0e9b      	lsrs	r3, r3, #26
 800d698:	b2db      	uxtb	r3, r3
 800d69a:	f003 030f 	and.w	r3, r3, #15
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6a8:	0e1b      	lsrs	r3, r3, #24
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	f003 0303 	and.w	r3, r3, #3
 800d6b0:	b2da      	uxtb	r2, r3
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6ba:	0c1b      	lsrs	r3, r3, #16
 800d6bc:	b2da      	uxtb	r2, r3
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6c6:	0a1b      	lsrs	r3, r3, #8
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d6d2:	b2da      	uxtb	r2, r3
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6dc:	0d1b      	lsrs	r3, r3, #20
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6e8:	0c1b      	lsrs	r3, r3, #16
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	f003 030f 	and.w	r3, r3, #15
 800d6f0:	b2da      	uxtb	r2, r3
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d6fa:	0bdb      	lsrs	r3, r3, #15
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	f003 0301 	and.w	r3, r3, #1
 800d702:	b2da      	uxtb	r2, r3
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d70c:	0b9b      	lsrs	r3, r3, #14
 800d70e:	b2db      	uxtb	r3, r3
 800d710:	f003 0301 	and.w	r3, r3, #1
 800d714:	b2da      	uxtb	r2, r3
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d71e:	0b5b      	lsrs	r3, r3, #13
 800d720:	b2db      	uxtb	r3, r3
 800d722:	f003 0301 	and.w	r3, r3, #1
 800d726:	b2da      	uxtb	r2, r3
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d730:	0b1b      	lsrs	r3, r3, #12
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2200      	movs	r2, #0
 800d742:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d163      	bne.n	800d814 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d750:	009a      	lsls	r2, r3, #2
 800d752:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d756:	4013      	ands	r3, r2
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d75c:	0f92      	lsrs	r2, r2, #30
 800d75e:	431a      	orrs	r2, r3
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d768:	0edb      	lsrs	r3, r3, #27
 800d76a:	b2db      	uxtb	r3, r3
 800d76c:	f003 0307 	and.w	r3, r3, #7
 800d770:	b2da      	uxtb	r2, r3
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d77a:	0e1b      	lsrs	r3, r3, #24
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	f003 0307 	and.w	r3, r3, #7
 800d782:	b2da      	uxtb	r2, r3
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d78c:	0d5b      	lsrs	r3, r3, #21
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	f003 0307 	and.w	r3, r3, #7
 800d794:	b2da      	uxtb	r2, r3
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d79e:	0c9b      	lsrs	r3, r3, #18
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	f003 0307 	and.w	r3, r3, #7
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7b0:	0bdb      	lsrs	r3, r3, #15
 800d7b2:	b2db      	uxtb	r3, r3
 800d7b4:	f003 0307 	and.w	r3, r3, #7
 800d7b8:	b2da      	uxtb	r2, r3
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	691b      	ldr	r3, [r3, #16]
 800d7c2:	1c5a      	adds	r2, r3, #1
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	7e1b      	ldrb	r3, [r3, #24]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	f003 0307 	and.w	r3, r3, #7
 800d7d2:	3302      	adds	r3, #2
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7da:	687a      	ldr	r2, [r7, #4]
 800d7dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d7de:	fb02 f203 	mul.w	r2, r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	7a1b      	ldrb	r3, [r3, #8]
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	f003 030f 	and.w	r3, r3, #15
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	409a      	lsls	r2, r3
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7fc:	687a      	ldr	r2, [r7, #4]
 800d7fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d800:	0a52      	lsrs	r2, r2, #9
 800d802:	fb02 f203 	mul.w	r2, r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d810:	661a      	str	r2, [r3, #96]	; 0x60
 800d812:	e031      	b.n	800d878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d11d      	bne.n	800d858 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d820:	041b      	lsls	r3, r3, #16
 800d822:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d82a:	0c1b      	lsrs	r3, r3, #16
 800d82c:	431a      	orrs	r2, r3
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	691b      	ldr	r3, [r3, #16]
 800d836:	3301      	adds	r3, #1
 800d838:	029a      	lsls	r2, r3, #10
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d84c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	661a      	str	r2, [r3, #96]	; 0x60
 800d856:	e00f      	b.n	800d878 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a58      	ldr	r2, [pc, #352]	; (800d9c0 <HAL_SD_GetCardCSD+0x344>)
 800d85e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d864:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e09d      	b.n	800d9b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d87c:	0b9b      	lsrs	r3, r3, #14
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	f003 0301 	and.w	r3, r3, #1
 800d884:	b2da      	uxtb	r2, r3
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d88e:	09db      	lsrs	r3, r3, #7
 800d890:	b2db      	uxtb	r3, r3
 800d892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d896:	b2da      	uxtb	r2, r3
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8a6:	b2da      	uxtb	r2, r3
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8b0:	0fdb      	lsrs	r3, r3, #31
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8bc:	0f5b      	lsrs	r3, r3, #29
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	f003 0303 	and.w	r3, r3, #3
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8ce:	0e9b      	lsrs	r3, r3, #26
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	f003 0307 	and.w	r3, r3, #7
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8e0:	0d9b      	lsrs	r3, r3, #22
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	f003 030f 	and.w	r3, r3, #15
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d8f2:	0d5b      	lsrs	r3, r3, #21
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	f003 0301 	and.w	r3, r3, #1
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2200      	movs	r2, #0
 800d906:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90e:	0c1b      	lsrs	r3, r3, #16
 800d910:	b2db      	uxtb	r3, r3
 800d912:	f003 0301 	and.w	r3, r3, #1
 800d916:	b2da      	uxtb	r2, r3
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d922:	0bdb      	lsrs	r3, r3, #15
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f003 0301 	and.w	r3, r3, #1
 800d92a:	b2da      	uxtb	r2, r3
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d936:	0b9b      	lsrs	r3, r3, #14
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	f003 0301 	and.w	r3, r3, #1
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d94a:	0b5b      	lsrs	r3, r3, #13
 800d94c:	b2db      	uxtb	r3, r3
 800d94e:	f003 0301 	and.w	r3, r3, #1
 800d952:	b2da      	uxtb	r2, r3
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d95e:	0b1b      	lsrs	r3, r3, #12
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 0301 	and.w	r3, r3, #1
 800d966:	b2da      	uxtb	r2, r3
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d972:	0a9b      	lsrs	r3, r3, #10
 800d974:	b2db      	uxtb	r3, r3
 800d976:	f003 0303 	and.w	r3, r3, #3
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d986:	0a1b      	lsrs	r3, r3, #8
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	f003 0303 	and.w	r3, r3, #3
 800d98e:	b2da      	uxtb	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d99a:	085b      	lsrs	r3, r3, #1
 800d99c:	b2db      	uxtb	r3, r3
 800d99e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9a2:	b2da      	uxtb	r2, r3
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d9b2:	2300      	movs	r3, #0
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	370c      	adds	r7, #12
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr
 800d9c0:	004005ff 	.word	0x004005ff

0800d9c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d9c4:	b480      	push	{r7}
 800d9c6:	b083      	sub	sp, #12
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
 800d9cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	370c      	adds	r7, #12
 800da14:	46bd      	mov	sp, r7
 800da16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1a:	4770      	bx	lr

0800da1c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800da1c:	b5b0      	push	{r4, r5, r7, lr}
 800da1e:	b08e      	sub	sp, #56	; 0x38
 800da20:	af04      	add	r7, sp, #16
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	2203      	movs	r2, #3
 800da2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da32:	2b03      	cmp	r3, #3
 800da34:	d02e      	beq.n	800da94 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da3c:	d106      	bne.n	800da4c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da42:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	639a      	str	r2, [r3, #56]	; 0x38
 800da4a:	e029      	b.n	800daa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800da52:	d10a      	bne.n	800da6a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f000 fb0f 	bl	800e078 <SD_WideBus_Enable>
 800da5a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da62:	431a      	orrs	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	639a      	str	r2, [r3, #56]	; 0x38
 800da68:	e01a      	b.n	800daa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10a      	bne.n	800da86 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fb4c 	bl	800e10e <SD_WideBus_Disable>
 800da76:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da7e:	431a      	orrs	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	639a      	str	r2, [r3, #56]	; 0x38
 800da84:	e00c      	b.n	800daa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	639a      	str	r2, [r3, #56]	; 0x38
 800da92:	e005      	b.n	800daa0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d009      	beq.n	800dabc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a18      	ldr	r2, [pc, #96]	; (800db10 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800daae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dab8:	2301      	movs	r3, #1
 800daba:	e024      	b.n	800db06 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	685b      	ldr	r3, [r3, #4]
 800dac0:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	695b      	ldr	r3, [r3, #20]
 800dad6:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	699b      	ldr	r3, [r3, #24]
 800dadc:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681d      	ldr	r5, [r3, #0]
 800dae2:	466c      	mov	r4, sp
 800dae4:	f107 0318 	add.w	r3, r7, #24
 800dae8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800daec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800daf0:	f107 030c 	add.w	r3, r7, #12
 800daf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800daf6:	4628      	mov	r0, r5
 800daf8:	f002 fcb2 	bl	8010460 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800db04:	2300      	movs	r3, #0
}
 800db06:	4618      	mov	r0, r3
 800db08:	3728      	adds	r7, #40	; 0x28
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bdb0      	pop	{r4, r5, r7, pc}
 800db0e:	bf00      	nop
 800db10:	004005ff 	.word	0x004005ff

0800db14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b086      	sub	sp, #24
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800db1c:	2300      	movs	r3, #0
 800db1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800db20:	f107 030c 	add.w	r3, r7, #12
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fa7e 	bl	800e028 <SD_SendStatus>
 800db2c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d005      	beq.n	800db40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	431a      	orrs	r2, r3
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	0a5b      	lsrs	r3, r3, #9
 800db44:	f003 030f 	and.w	r3, r3, #15
 800db48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800db4a:	693b      	ldr	r3, [r7, #16]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	3718      	adds	r7, #24
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db60:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800db70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800db72:	bf00      	nop
 800db74:	3714      	adds	r7, #20
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db7e:	b580      	push	{r7, lr}
 800db80:	b084      	sub	sp, #16
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db90:	2b82      	cmp	r3, #130	; 0x82
 800db92:	d111      	bne.n	800dbb8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	4618      	mov	r0, r3
 800db9a:	f002 fde7 	bl	801076c <SDMMC_CmdStopTransfer>
 800db9e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d008      	beq.n	800dbb8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	431a      	orrs	r2, r3
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800dbb2:	68f8      	ldr	r0, [r7, #12]
 800dbb4:	f7ff fd58 	bl	800d668 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f022 0208 	bic.w	r2, r2, #8
 800dbc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f240 523a 	movw	r2, #1338	; 0x53a
 800dbd0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2201      	movs	r2, #1
 800dbd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f003 fa3f 	bl	8011064 <HAL_SD_RxCpltCallback>
#endif
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
	...

0800dbf0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b086      	sub	sp, #24
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7fd f848 	bl	800ac94 <HAL_DMA_GetError>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d03e      	beq.n	800dc88 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc10:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc18:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800dc1a:	693b      	ldr	r3, [r7, #16]
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d002      	beq.n	800dc26 <SD_DMAError+0x36>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d12d      	bne.n	800dc82 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	4a19      	ldr	r2, [pc, #100]	; (800dc90 <SD_DMAError+0xa0>)
 800dc2c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dc3c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800dc4a:	6978      	ldr	r0, [r7, #20]
 800dc4c:	f7ff ff62 	bl	800db14 <HAL_SD_GetCardState>
 800dc50:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2b06      	cmp	r3, #6
 800dc56:	d002      	beq.n	800dc5e <SD_DMAError+0x6e>
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b05      	cmp	r3, #5
 800dc5c:	d10a      	bne.n	800dc74 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f002 fd82 	bl	801076c <SDMMC_CmdStopTransfer>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6e:	431a      	orrs	r2, r3
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800dc82:	6978      	ldr	r0, [r7, #20]
 800dc84:	f7ff fcf0 	bl	800d668 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dc88:	bf00      	nop
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	004005ff 	.word	0x004005ff

0800dc94 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	f240 523a 	movw	r2, #1338	; 0x53a
 800dcaa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff ff31 	bl	800db14 <HAL_SD_GetCardState>
 800dcb2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dcc2:	68bb      	ldr	r3, [r7, #8]
 800dcc4:	2b06      	cmp	r3, #6
 800dcc6:	d002      	beq.n	800dcce <SD_DMATxAbort+0x3a>
 800dcc8:	68bb      	ldr	r3, [r7, #8]
 800dcca:	2b05      	cmp	r3, #5
 800dccc:	d10a      	bne.n	800dce4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f002 fd4a 	bl	801076c <SDMMC_CmdStopTransfer>
 800dcd8:	4602      	mov	r2, r0
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcde:	431a      	orrs	r2, r3
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d103      	bne.n	800dcf4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dcec:	68f8      	ldr	r0, [r7, #12]
 800dcee:	f003 f9a5 	bl	801103c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dcf2:	e002      	b.n	800dcfa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dcf4:	68f8      	ldr	r0, [r7, #12]
 800dcf6:	f7ff fcb7 	bl	800d668 <HAL_SD_ErrorCallback>
}
 800dcfa:	bf00      	nop
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}

0800dd02 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dd02:	b580      	push	{r7, lr}
 800dd04:	b084      	sub	sp, #16
 800dd06:	af00      	add	r7, sp, #0
 800dd08:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd18:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fefa 	bl	800db14 <HAL_SD_GetCardState>
 800dd20:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2201      	movs	r2, #1
 800dd26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	2b06      	cmp	r3, #6
 800dd34:	d002      	beq.n	800dd3c <SD_DMARxAbort+0x3a>
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	2b05      	cmp	r3, #5
 800dd3a:	d10a      	bne.n	800dd52 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4618      	mov	r0, r3
 800dd42:	f002 fd13 	bl	801076c <SDMMC_CmdStopTransfer>
 800dd46:	4602      	mov	r2, r0
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4c:	431a      	orrs	r2, r3
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d103      	bne.n	800dd62 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dd5a:	68f8      	ldr	r0, [r7, #12]
 800dd5c:	f003 f96e 	bl	801103c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd60:	e002      	b.n	800dd68 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	f7ff fc80 	bl	800d668 <HAL_SD_ErrorCallback>
}
 800dd68:	bf00      	nop
 800dd6a:	3710      	adds	r7, #16
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dd70:	b5b0      	push	{r4, r5, r7, lr}
 800dd72:	b094      	sub	sp, #80	; 0x50
 800dd74:	af04      	add	r7, sp, #16
 800dd76:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dd78:	2301      	movs	r3, #1
 800dd7a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4618      	mov	r0, r3
 800dd82:	f002 fbc5 	bl	8010510 <SDIO_GetPowerState>
 800dd86:	4603      	mov	r3, r0
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d102      	bne.n	800dd92 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dd8c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dd90:	e0b7      	b.n	800df02 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d02f      	beq.n	800ddfa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f002 fdee 	bl	8010980 <SDMMC_CmdSendCID>
 800dda4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dda6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <SD_InitCard+0x40>
    {
      return errorstate;
 800ddac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddae:	e0a8      	b.n	800df02 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2100      	movs	r1, #0
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f002 fbef 	bl	801059a <SDIO_GetResponse>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	2104      	movs	r1, #4
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f002 fbe6 	bl	801059a <SDIO_GetResponse>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2108      	movs	r1, #8
 800ddda:	4618      	mov	r0, r3
 800dddc:	f002 fbdd 	bl	801059a <SDIO_GetResponse>
 800dde0:	4602      	mov	r2, r0
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	210c      	movs	r1, #12
 800ddec:	4618      	mov	r0, r3
 800ddee:	f002 fbd4 	bl	801059a <SDIO_GetResponse>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ddfe:	2b03      	cmp	r3, #3
 800de00:	d00d      	beq.n	800de1e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f107 020e 	add.w	r2, r7, #14
 800de0a:	4611      	mov	r1, r2
 800de0c:	4618      	mov	r0, r3
 800de0e:	f002 fdf4 	bl	80109fa <SDMMC_CmdSetRelAdd>
 800de12:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de16:	2b00      	cmp	r3, #0
 800de18:	d001      	beq.n	800de1e <SD_InitCard+0xae>
    {
      return errorstate;
 800de1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1c:	e071      	b.n	800df02 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de22:	2b03      	cmp	r3, #3
 800de24:	d036      	beq.n	800de94 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800de26:	89fb      	ldrh	r3, [r7, #14]
 800de28:	461a      	mov	r2, r3
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de36:	041b      	lsls	r3, r3, #16
 800de38:	4619      	mov	r1, r3
 800de3a:	4610      	mov	r0, r2
 800de3c:	f002 fdbe 	bl	80109bc <SDMMC_CmdSendCSD>
 800de40:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <SD_InitCard+0xdc>
    {
      return errorstate;
 800de48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de4a:	e05a      	b.n	800df02 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	2100      	movs	r1, #0
 800de52:	4618      	mov	r0, r3
 800de54:	f002 fba1 	bl	801059a <SDIO_GetResponse>
 800de58:	4602      	mov	r2, r0
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2104      	movs	r1, #4
 800de64:	4618      	mov	r0, r3
 800de66:	f002 fb98 	bl	801059a <SDIO_GetResponse>
 800de6a:	4602      	mov	r2, r0
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	2108      	movs	r1, #8
 800de76:	4618      	mov	r0, r3
 800de78:	f002 fb8f 	bl	801059a <SDIO_GetResponse>
 800de7c:	4602      	mov	r2, r0
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	210c      	movs	r1, #12
 800de88:	4618      	mov	r0, r3
 800de8a:	f002 fb86 	bl	801059a <SDIO_GetResponse>
 800de8e:	4602      	mov	r2, r0
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2104      	movs	r1, #4
 800de9a:	4618      	mov	r0, r3
 800de9c:	f002 fb7d 	bl	801059a <SDIO_GetResponse>
 800dea0:	4603      	mov	r3, r0
 800dea2:	0d1a      	lsrs	r2, r3, #20
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dea8:	f107 0310 	add.w	r3, r7, #16
 800deac:	4619      	mov	r1, r3
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f7ff fbe4 	bl	800d67c <HAL_SD_GetCardCSD>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d002      	beq.n	800dec0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800debe:	e020      	b.n	800df02 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6819      	ldr	r1, [r3, #0]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dec8:	041b      	lsls	r3, r3, #16
 800deca:	f04f 0400 	mov.w	r4, #0
 800dece:	461a      	mov	r2, r3
 800ded0:	4623      	mov	r3, r4
 800ded2:	4608      	mov	r0, r1
 800ded4:	f002 fc6c 	bl	80107b0 <SDMMC_CmdSelDesel>
 800ded8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800deda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d001      	beq.n	800dee4 <SD_InitCard+0x174>
  {
    return errorstate;
 800dee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee2:	e00e      	b.n	800df02 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681d      	ldr	r5, [r3, #0]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	466c      	mov	r4, sp
 800deec:	f103 0210 	add.w	r2, r3, #16
 800def0:	ca07      	ldmia	r2, {r0, r1, r2}
 800def2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800def6:	3304      	adds	r3, #4
 800def8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800defa:	4628      	mov	r0, r5
 800defc:	f002 fab0 	bl	8010460 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800df00:	2300      	movs	r3, #0
}
 800df02:	4618      	mov	r0, r3
 800df04:	3740      	adds	r7, #64	; 0x40
 800df06:	46bd      	mov	sp, r7
 800df08:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800df0c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b086      	sub	sp, #24
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df14:	2300      	movs	r3, #0
 800df16:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800df18:	2300      	movs	r3, #0
 800df1a:	617b      	str	r3, [r7, #20]
 800df1c:	2300      	movs	r3, #0
 800df1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4618      	mov	r0, r3
 800df26:	f002 fc66 	bl	80107f6 <SDMMC_CmdGoIdleState>
 800df2a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d001      	beq.n	800df36 <SD_PowerON+0x2a>
  {
    return errorstate;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	e072      	b.n	800e01c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4618      	mov	r0, r3
 800df3c:	f002 fc79 	bl	8010832 <SDMMC_CmdOperCond>
 800df40:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00d      	beq.n	800df64 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2200      	movs	r2, #0
 800df4c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4618      	mov	r0, r3
 800df54:	f002 fc4f 	bl	80107f6 <SDMMC_CmdGoIdleState>
 800df58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d004      	beq.n	800df6a <SD_PowerON+0x5e>
    {
      return errorstate;
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	e05b      	b.n	800e01c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d137      	bne.n	800dfe2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	2100      	movs	r1, #0
 800df78:	4618      	mov	r0, r3
 800df7a:	f002 fc79 	bl	8010870 <SDMMC_CmdAppCommand>
 800df7e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d02d      	beq.n	800dfe2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df86:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df8a:	e047      	b.n	800e01c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	2100      	movs	r1, #0
 800df92:	4618      	mov	r0, r3
 800df94:	f002 fc6c 	bl	8010870 <SDMMC_CmdAppCommand>
 800df98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <SD_PowerON+0x98>
    {
      return errorstate;
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	e03b      	b.n	800e01c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	491e      	ldr	r1, [pc, #120]	; (800e024 <SD_PowerON+0x118>)
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f002 fc82 	bl	80108b4 <SDMMC_CmdAppOperCommand>
 800dfb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d002      	beq.n	800dfbe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dfb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dfbc:	e02e      	b.n	800e01c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f002 fae8 	bl	801059a <SDIO_GetResponse>
 800dfca:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800dfcc:	697b      	ldr	r3, [r7, #20]
 800dfce:	0fdb      	lsrs	r3, r3, #31
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	d101      	bne.n	800dfd8 <SD_PowerON+0xcc>
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	e000      	b.n	800dfda <SD_PowerON+0xce>
 800dfd8:	2300      	movs	r3, #0
 800dfda:	613b      	str	r3, [r7, #16]

    count++;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d802      	bhi.n	800dff2 <SD_PowerON+0xe6>
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d0cc      	beq.n	800df8c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800dff2:	68bb      	ldr	r3, [r7, #8]
 800dff4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dff8:	4293      	cmp	r3, r2
 800dffa:	d902      	bls.n	800e002 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e000:	e00c      	b.n	800e01c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d003      	beq.n	800e014 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	2201      	movs	r2, #1
 800e010:	645a      	str	r2, [r3, #68]	; 0x44
 800e012:	e002      	b.n	800e01a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2200      	movs	r2, #0
 800e018:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e01a:	2300      	movs	r3, #0
}
 800e01c:	4618      	mov	r0, r3
 800e01e:	3718      	adds	r7, #24
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}
 800e024:	c1100000 	.word	0xc1100000

0800e028 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d102      	bne.n	800e03e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e038:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e03c:	e018      	b.n	800e070 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681a      	ldr	r2, [r3, #0]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e046:	041b      	lsls	r3, r3, #16
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f002 fcf6 	bl	8010a3c <SDMMC_CmdSendStatus>
 800e050:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d001      	beq.n	800e05c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	e009      	b.n	800e070 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2100      	movs	r1, #0
 800e062:	4618      	mov	r0, r3
 800e064:	f002 fa99 	bl	801059a <SDIO_GetResponse>
 800e068:	4602      	mov	r2, r0
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e06e:	2300      	movs	r3, #0
}
 800e070:	4618      	mov	r0, r3
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e080:	2300      	movs	r3, #0
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	2300      	movs	r3, #0
 800e086:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2100      	movs	r1, #0
 800e08e:	4618      	mov	r0, r3
 800e090:	f002 fa83 	bl	801059a <SDIO_GetResponse>
 800e094:	4603      	mov	r3, r0
 800e096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e09a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e09e:	d102      	bne.n	800e0a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e0a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e0a4:	e02f      	b.n	800e106 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e0a6:	f107 030c 	add.w	r3, r7, #12
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f000 f879 	bl	800e1a4 <SD_FindSCR>
 800e0b2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d001      	beq.n	800e0be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	e023      	b.n	800e106 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d01c      	beq.n	800e102 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681a      	ldr	r2, [r3, #0]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d0:	041b      	lsls	r3, r3, #16
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4610      	mov	r0, r2
 800e0d6:	f002 fbcb 	bl	8010870 <SDMMC_CmdAppCommand>
 800e0da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d001      	beq.n	800e0e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	e00f      	b.n	800e106 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	2102      	movs	r1, #2
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f002 fc04 	bl	80108fa <SDMMC_CmdBusWidth>
 800e0f2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d001      	beq.n	800e0fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	e003      	b.n	800e106 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e0fe:	2300      	movs	r3, #0
 800e100:	e001      	b.n	800e106 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e102:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e106:	4618      	mov	r0, r3
 800e108:	3718      	adds	r7, #24
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b086      	sub	sp, #24
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
 800e11a:	2300      	movs	r3, #0
 800e11c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2100      	movs	r1, #0
 800e124:	4618      	mov	r0, r3
 800e126:	f002 fa38 	bl	801059a <SDIO_GetResponse>
 800e12a:	4603      	mov	r3, r0
 800e12c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e134:	d102      	bne.n	800e13c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e13a:	e02f      	b.n	800e19c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e13c:	f107 030c 	add.w	r3, r7, #12
 800e140:	4619      	mov	r1, r3
 800e142:	6878      	ldr	r0, [r7, #4]
 800e144:	f000 f82e 	bl	800e1a4 <SD_FindSCR>
 800e148:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e150:	697b      	ldr	r3, [r7, #20]
 800e152:	e023      	b.n	800e19c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d01c      	beq.n	800e198 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681a      	ldr	r2, [r3, #0]
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e166:	041b      	lsls	r3, r3, #16
 800e168:	4619      	mov	r1, r3
 800e16a:	4610      	mov	r0, r2
 800e16c:	f002 fb80 	bl	8010870 <SDMMC_CmdAppCommand>
 800e170:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	e00f      	b.n	800e19c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	2100      	movs	r1, #0
 800e182:	4618      	mov	r0, r3
 800e184:	f002 fbb9 	bl	80108fa <SDMMC_CmdBusWidth>
 800e188:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	e003      	b.n	800e19c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e194:	2300      	movs	r3, #0
 800e196:	e001      	b.n	800e19c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e198:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3718      	adds	r7, #24
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e1a4:	b590      	push	{r4, r7, lr}
 800e1a6:	b08f      	sub	sp, #60	; 0x3c
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1ae:	f7fb fd7b 	bl	8009ca8 <HAL_GetTick>
 800e1b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	60bb      	str	r3, [r7, #8]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2108      	movs	r1, #8
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f002 fa24 	bl	8010618 <SDMMC_CmdBlockLength>
 800e1d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <SD_FindSCR+0x38>
  {
    return errorstate;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	e0a9      	b.n	800e330 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1e4:	041b      	lsls	r3, r3, #16
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	f002 fb41 	bl	8010870 <SDMMC_CmdAppCommand>
 800e1ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d001      	beq.n	800e1fa <SD_FindSCR+0x56>
  {
    return errorstate;
 800e1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1f8:	e09a      	b.n	800e330 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e1fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e1fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e200:	2308      	movs	r3, #8
 800e202:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e204:	2330      	movs	r3, #48	; 0x30
 800e206:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e208:	2302      	movs	r3, #2
 800e20a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e20c:	2300      	movs	r3, #0
 800e20e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e210:	2301      	movs	r3, #1
 800e212:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	f107 0210 	add.w	r2, r7, #16
 800e21c:	4611      	mov	r1, r2
 800e21e:	4618      	mov	r0, r3
 800e220:	f002 f9ce 	bl	80105c0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4618      	mov	r0, r3
 800e22a:	f002 fb88 	bl	801093e <SDMMC_CmdSendSCR>
 800e22e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e232:	2b00      	cmp	r3, #0
 800e234:	d022      	beq.n	800e27c <SD_FindSCR+0xd8>
  {
    return errorstate;
 800e236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e238:	e07a      	b.n	800e330 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00e      	beq.n	800e266 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6819      	ldr	r1, [r3, #0]
 800e24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	f107 0208 	add.w	r2, r7, #8
 800e254:	18d4      	adds	r4, r2, r3
 800e256:	4608      	mov	r0, r1
 800e258:	f002 f92d 	bl	80104b6 <SDIO_ReadFIFO>
 800e25c:	4603      	mov	r3, r0
 800e25e:	6023      	str	r3, [r4, #0]
      index++;
 800e260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e262:	3301      	adds	r3, #1
 800e264:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e266:	f7fb fd1f 	bl	8009ca8 <HAL_GetTick>
 800e26a:	4602      	mov	r2, r0
 800e26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26e:	1ad3      	subs	r3, r2, r3
 800e270:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e274:	d102      	bne.n	800e27c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e27a:	e059      	b.n	800e330 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e282:	f240 432a 	movw	r3, #1066	; 0x42a
 800e286:	4013      	ands	r3, r2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d0d6      	beq.n	800e23a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e292:	f003 0308 	and.w	r3, r3, #8
 800e296:	2b00      	cmp	r3, #0
 800e298:	d005      	beq.n	800e2a6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	2208      	movs	r2, #8
 800e2a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2a2:	2308      	movs	r3, #8
 800e2a4:	e044      	b.n	800e330 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ac:	f003 0302 	and.w	r3, r3, #2
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d005      	beq.n	800e2c0 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e2bc:	2302      	movs	r3, #2
 800e2be:	e037      	b.n	800e330 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c6:	f003 0320 	and.w	r3, r3, #32
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d005      	beq.n	800e2da <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2220      	movs	r2, #32
 800e2d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e2d6:	2320      	movs	r3, #32
 800e2d8:	e02a      	b.n	800e330 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	f240 523a 	movw	r2, #1338	; 0x53a
 800e2e2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	061a      	lsls	r2, r3, #24
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	021b      	lsls	r3, r3, #8
 800e2ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e2f0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	0a1b      	lsrs	r3, r3, #8
 800e2f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e2fa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	0e1b      	lsrs	r3, r3, #24
 800e300:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e304:	601a      	str	r2, [r3, #0]
    scr++;
 800e306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e308:	3304      	adds	r3, #4
 800e30a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	061a      	lsls	r2, r3, #24
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	021b      	lsls	r3, r3, #8
 800e314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e318:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	0a1b      	lsrs	r3, r3, #8
 800e31e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e322:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	0e1b      	lsrs	r3, r3, #24
 800e328:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e32c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e32e:	2300      	movs	r3, #0
}
 800e330:	4618      	mov	r0, r3
 800e332:	373c      	adds	r7, #60	; 0x3c
 800e334:	46bd      	mov	sp, r7
 800e336:	bd90      	pop	{r4, r7, pc}

0800e338 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b086      	sub	sp, #24
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e344:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e34a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e34c:	693b      	ldr	r3, [r7, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d03f      	beq.n	800e3d2 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e352:	2300      	movs	r3, #0
 800e354:	617b      	str	r3, [r7, #20]
 800e356:	e033      	b.n	800e3c0 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f002 f8aa 	bl	80104b6 <SDIO_ReadFIFO>
 800e362:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	b2da      	uxtb	r2, r3
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	3301      	adds	r3, #1
 800e370:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	3b01      	subs	r3, #1
 800e376:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e378:	68bb      	ldr	r3, [r7, #8]
 800e37a:	0a1b      	lsrs	r3, r3, #8
 800e37c:	b2da      	uxtb	r2, r3
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	3301      	adds	r3, #1
 800e386:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e388:	693b      	ldr	r3, [r7, #16]
 800e38a:	3b01      	subs	r3, #1
 800e38c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e38e:	68bb      	ldr	r3, [r7, #8]
 800e390:	0c1b      	lsrs	r3, r3, #16
 800e392:	b2da      	uxtb	r2, r3
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	3301      	adds	r3, #1
 800e39c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e39e:	693b      	ldr	r3, [r7, #16]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	0e1b      	lsrs	r3, r3, #24
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e3b4:	693b      	ldr	r3, [r7, #16]
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	3301      	adds	r3, #1
 800e3be:	617b      	str	r3, [r7, #20]
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	2b07      	cmp	r3, #7
 800e3c4:	d9c8      	bls.n	800e358 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	693a      	ldr	r2, [r7, #16]
 800e3d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e3d2:	bf00      	nop
 800e3d4:	3718      	adds	r7, #24
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b086      	sub	sp, #24
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a1b      	ldr	r3, [r3, #32]
 800e3e6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ec:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d043      	beq.n	800e47c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	617b      	str	r3, [r7, #20]
 800e3f8:	e037      	b.n	800e46a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	3301      	adds	r3, #1
 800e404:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e406:	693b      	ldr	r3, [r7, #16]
 800e408:	3b01      	subs	r3, #1
 800e40a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	021a      	lsls	r2, r3, #8
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	4313      	orrs	r3, r2
 800e416:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	3301      	adds	r3, #1
 800e41c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	3b01      	subs	r3, #1
 800e422:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	041a      	lsls	r2, r3, #16
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	4313      	orrs	r3, r2
 800e42e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	3301      	adds	r3, #1
 800e434:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	3b01      	subs	r3, #1
 800e43a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	061a      	lsls	r2, r3, #24
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	4313      	orrs	r3, r2
 800e446:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3301      	adds	r3, #1
 800e44c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	3b01      	subs	r3, #1
 800e452:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f107 0208 	add.w	r2, r7, #8
 800e45c:	4611      	mov	r1, r2
 800e45e:	4618      	mov	r0, r3
 800e460:	f002 f836 	bl	80104d0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	3301      	adds	r3, #1
 800e468:	617b      	str	r3, [r7, #20]
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	2b07      	cmp	r3, #7
 800e46e:	d9c4      	bls.n	800e3fa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	68fa      	ldr	r2, [r7, #12]
 800e474:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	693a      	ldr	r2, [r7, #16]
 800e47a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e47c:	bf00      	nop
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b082      	sub	sp, #8
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d101      	bne.n	800e496 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e492:	2301      	movs	r3, #1
 800e494:	e056      	b.n	800e544 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d106      	bne.n	800e4b6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f7f8 fe6f 	bl	8007194 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2202      	movs	r2, #2
 800e4ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	681a      	ldr	r2, [r3, #0]
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e4cc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	431a      	orrs	r2, r3
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	68db      	ldr	r3, [r3, #12]
 800e4dc:	431a      	orrs	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	691b      	ldr	r3, [r3, #16]
 800e4e2:	431a      	orrs	r2, r3
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	695b      	ldr	r3, [r3, #20]
 800e4e8:	431a      	orrs	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e4f2:	431a      	orrs	r2, r3
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	69db      	ldr	r3, [r3, #28]
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a1b      	ldr	r3, [r3, #32]
 800e4fe:	ea42 0103 	orr.w	r1, r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	430a      	orrs	r2, r1
 800e50c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	699b      	ldr	r3, [r3, #24]
 800e512:	0c1b      	lsrs	r3, r3, #16
 800e514:	f003 0104 	and.w	r1, r3, #4
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	430a      	orrs	r2, r1
 800e522:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	69da      	ldr	r2, [r3, #28]
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e532:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2201      	movs	r2, #1
 800e53e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800e542:	2300      	movs	r3, #0
}
 800e544:	4618      	mov	r0, r3
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b088      	sub	sp, #32
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	603b      	str	r3, [r7, #0]
 800e558:	4613      	mov	r3, r2
 800e55a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e55c:	2300      	movs	r3, #0
 800e55e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e566:	2b01      	cmp	r3, #1
 800e568:	d101      	bne.n	800e56e <HAL_SPI_Transmit+0x22>
 800e56a:	2302      	movs	r3, #2
 800e56c:	e11e      	b.n	800e7ac <HAL_SPI_Transmit+0x260>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e576:	f7fb fb97 	bl	8009ca8 <HAL_GetTick>
 800e57a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e57c:	88fb      	ldrh	r3, [r7, #6]
 800e57e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d002      	beq.n	800e592 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e58c:	2302      	movs	r3, #2
 800e58e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e590:	e103      	b.n	800e79a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d002      	beq.n	800e59e <HAL_SPI_Transmit+0x52>
 800e598:	88fb      	ldrh	r3, [r7, #6]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d102      	bne.n	800e5a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e59e:	2301      	movs	r3, #1
 800e5a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e5a2:	e0fa      	b.n	800e79a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	2203      	movs	r2, #3
 800e5a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	68ba      	ldr	r2, [r7, #8]
 800e5b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	88fa      	ldrh	r2, [r7, #6]
 800e5bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	88fa      	ldrh	r2, [r7, #6]
 800e5c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e5ea:	d107      	bne.n	800e5fc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e5fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e606:	2b40      	cmp	r3, #64	; 0x40
 800e608:	d007      	beq.n	800e61a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e618:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	68db      	ldr	r3, [r3, #12]
 800e61e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e622:	d14b      	bne.n	800e6bc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <HAL_SPI_Transmit+0xe6>
 800e62c:	8afb      	ldrh	r3, [r7, #22]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d13e      	bne.n	800e6b0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e636:	881a      	ldrh	r2, [r3, #0]
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e642:	1c9a      	adds	r2, r3, #2
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e64c:	b29b      	uxth	r3, r3
 800e64e:	3b01      	subs	r3, #1
 800e650:	b29a      	uxth	r2, r3
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e656:	e02b      	b.n	800e6b0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	689b      	ldr	r3, [r3, #8]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b02      	cmp	r3, #2
 800e664:	d112      	bne.n	800e68c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e66a:	881a      	ldrh	r2, [r3, #0]
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e676:	1c9a      	adds	r2, r3, #2
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e680:	b29b      	uxth	r3, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	b29a      	uxth	r2, r3
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	86da      	strh	r2, [r3, #54]	; 0x36
 800e68a:	e011      	b.n	800e6b0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e68c:	f7fb fb0c 	bl	8009ca8 <HAL_GetTick>
 800e690:	4602      	mov	r2, r0
 800e692:	69bb      	ldr	r3, [r7, #24]
 800e694:	1ad3      	subs	r3, r2, r3
 800e696:	683a      	ldr	r2, [r7, #0]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d803      	bhi.n	800e6a4 <HAL_SPI_Transmit+0x158>
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6a2:	d102      	bne.n	800e6aa <HAL_SPI_Transmit+0x15e>
 800e6a4:	683b      	ldr	r3, [r7, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d102      	bne.n	800e6b0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e6aa:	2303      	movs	r3, #3
 800e6ac:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e6ae:	e074      	b.n	800e79a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1ce      	bne.n	800e658 <HAL_SPI_Transmit+0x10c>
 800e6ba:	e04c      	b.n	800e756 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d002      	beq.n	800e6ca <HAL_SPI_Transmit+0x17e>
 800e6c4:	8afb      	ldrh	r3, [r7, #22]
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d140      	bne.n	800e74c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	330c      	adds	r3, #12
 800e6d4:	7812      	ldrb	r2, [r2, #0]
 800e6d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6e6:	b29b      	uxth	r3, r3
 800e6e8:	3b01      	subs	r3, #1
 800e6ea:	b29a      	uxth	r2, r3
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e6f0:	e02c      	b.n	800e74c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	f003 0302 	and.w	r3, r3, #2
 800e6fc:	2b02      	cmp	r3, #2
 800e6fe:	d113      	bne.n	800e728 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	330c      	adds	r3, #12
 800e70a:	7812      	ldrb	r2, [r2, #0]
 800e70c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e712:	1c5a      	adds	r2, r3, #1
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	3b01      	subs	r3, #1
 800e720:	b29a      	uxth	r2, r3
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	86da      	strh	r2, [r3, #54]	; 0x36
 800e726:	e011      	b.n	800e74c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e728:	f7fb fabe 	bl	8009ca8 <HAL_GetTick>
 800e72c:	4602      	mov	r2, r0
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	1ad3      	subs	r3, r2, r3
 800e732:	683a      	ldr	r2, [r7, #0]
 800e734:	429a      	cmp	r2, r3
 800e736:	d803      	bhi.n	800e740 <HAL_SPI_Transmit+0x1f4>
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e73e:	d102      	bne.n	800e746 <HAL_SPI_Transmit+0x1fa>
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d102      	bne.n	800e74c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e746:	2303      	movs	r3, #3
 800e748:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e74a:	e026      	b.n	800e79a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e750:	b29b      	uxth	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d1cd      	bne.n	800e6f2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e756:	69ba      	ldr	r2, [r7, #24]
 800e758:	6839      	ldr	r1, [r7, #0]
 800e75a:	68f8      	ldr	r0, [r7, #12]
 800e75c:	f000 fba4 	bl	800eea8 <SPI_EndRxTxTransaction>
 800e760:	4603      	mov	r3, r0
 800e762:	2b00      	cmp	r3, #0
 800e764:	d002      	beq.n	800e76c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	2220      	movs	r2, #32
 800e76a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	689b      	ldr	r3, [r3, #8]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d10a      	bne.n	800e78a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e774:	2300      	movs	r3, #0
 800e776:	613b      	str	r3, [r7, #16]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	68db      	ldr	r3, [r3, #12]
 800e77e:	613b      	str	r3, [r7, #16]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	689b      	ldr	r3, [r3, #8]
 800e786:	613b      	str	r3, [r7, #16]
 800e788:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d002      	beq.n	800e798 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	77fb      	strb	r3, [r7, #31]
 800e796:	e000      	b.n	800e79a <HAL_SPI_Transmit+0x24e>
  }

error:
 800e798:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	2201      	movs	r2, #1
 800e79e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e7aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3720      	adds	r7, #32
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af02      	add	r7, sp, #8
 800e7ba:	60f8      	str	r0, [r7, #12]
 800e7bc:	60b9      	str	r1, [r7, #8]
 800e7be:	603b      	str	r3, [r7, #0]
 800e7c0:	4613      	mov	r3, r2
 800e7c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	685b      	ldr	r3, [r3, #4]
 800e7cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e7d0:	d112      	bne.n	800e7f8 <HAL_SPI_Receive+0x44>
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10e      	bne.n	800e7f8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2204      	movs	r2, #4
 800e7de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e7e2:	88fa      	ldrh	r2, [r7, #6]
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	9300      	str	r3, [sp, #0]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f000 f8e9 	bl	800e9c6 <HAL_SPI_TransmitReceive>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	e0e2      	b.n	800e9be <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d101      	bne.n	800e806 <HAL_SPI_Receive+0x52>
 800e802:	2302      	movs	r3, #2
 800e804:	e0db      	b.n	800e9be <HAL_SPI_Receive+0x20a>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2201      	movs	r2, #1
 800e80a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e80e:	f7fb fa4b 	bl	8009ca8 <HAL_GetTick>
 800e812:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b01      	cmp	r3, #1
 800e81e:	d002      	beq.n	800e826 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e820:	2302      	movs	r3, #2
 800e822:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e824:	e0c2      	b.n	800e9ac <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e826:	68bb      	ldr	r3, [r7, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d002      	beq.n	800e832 <HAL_SPI_Receive+0x7e>
 800e82c:	88fb      	ldrh	r3, [r7, #6]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d102      	bne.n	800e838 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e832:	2301      	movs	r3, #1
 800e834:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e836:	e0b9      	b.n	800e9ac <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2204      	movs	r2, #4
 800e83c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	2200      	movs	r2, #0
 800e844:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	68ba      	ldr	r2, [r7, #8]
 800e84a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	88fa      	ldrh	r2, [r7, #6]
 800e850:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	88fa      	ldrh	r2, [r7, #6]
 800e856:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2200      	movs	r2, #0
 800e868:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	2200      	movs	r2, #0
 800e86e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	689b      	ldr	r3, [r3, #8]
 800e87a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e87e:	d107      	bne.n	800e890 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	681a      	ldr	r2, [r3, #0]
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e88e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89a:	2b40      	cmp	r3, #64	; 0x40
 800e89c:	d007      	beq.n	800e8ae <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	681a      	ldr	r2, [r3, #0]
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e8ac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d162      	bne.n	800e97c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e8b6:	e02e      	b.n	800e916 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	689b      	ldr	r3, [r3, #8]
 800e8be:	f003 0301 	and.w	r3, r3, #1
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d115      	bne.n	800e8f2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f103 020c 	add.w	r2, r3, #12
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d2:	7812      	ldrb	r2, [r2, #0]
 800e8d4:	b2d2      	uxtb	r2, r2
 800e8d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8dc:	1c5a      	adds	r2, r3, #1
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e8e6:	b29b      	uxth	r3, r3
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e8f0:	e011      	b.n	800e916 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8f2:	f7fb f9d9 	bl	8009ca8 <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d803      	bhi.n	800e90a <HAL_SPI_Receive+0x156>
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e908:	d102      	bne.n	800e910 <HAL_SPI_Receive+0x15c>
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d102      	bne.n	800e916 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e910:	2303      	movs	r3, #3
 800e912:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e914:	e04a      	b.n	800e9ac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1cb      	bne.n	800e8b8 <HAL_SPI_Receive+0x104>
 800e920:	e031      	b.n	800e986 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	689b      	ldr	r3, [r3, #8]
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d113      	bne.n	800e958 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	68da      	ldr	r2, [r3, #12]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e93a:	b292      	uxth	r2, r2
 800e93c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e942:	1c9a      	adds	r2, r3, #2
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	3b01      	subs	r3, #1
 800e950:	b29a      	uxth	r2, r3
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e956:	e011      	b.n	800e97c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e958:	f7fb f9a6 	bl	8009ca8 <HAL_GetTick>
 800e95c:	4602      	mov	r2, r0
 800e95e:	693b      	ldr	r3, [r7, #16]
 800e960:	1ad3      	subs	r3, r2, r3
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	429a      	cmp	r2, r3
 800e966:	d803      	bhi.n	800e970 <HAL_SPI_Receive+0x1bc>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96e:	d102      	bne.n	800e976 <HAL_SPI_Receive+0x1c2>
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d102      	bne.n	800e97c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e976:	2303      	movs	r3, #3
 800e978:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e97a:	e017      	b.n	800e9ac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e980:	b29b      	uxth	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d1cd      	bne.n	800e922 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e986:	693a      	ldr	r2, [r7, #16]
 800e988:	6839      	ldr	r1, [r7, #0]
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f000 fa27 	bl	800edde <SPI_EndRxTransaction>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2220      	movs	r2, #32
 800e99a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d002      	beq.n	800e9aa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	75fb      	strb	r3, [r7, #23]
 800e9a8:	e000      	b.n	800e9ac <HAL_SPI_Receive+0x1f8>
  }

error :
 800e9aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e9bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}

0800e9c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e9c6:	b580      	push	{r7, lr}
 800e9c8:	b08c      	sub	sp, #48	; 0x30
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	60f8      	str	r0, [r7, #12]
 800e9ce:	60b9      	str	r1, [r7, #8]
 800e9d0:	607a      	str	r2, [r7, #4]
 800e9d2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e9e4:	2b01      	cmp	r3, #1
 800e9e6:	d101      	bne.n	800e9ec <HAL_SPI_TransmitReceive+0x26>
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	e18a      	b.n	800ed02 <HAL_SPI_TransmitReceive+0x33c>
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2201      	movs	r2, #1
 800e9f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e9f4:	f7fb f958 	bl	8009ca8 <HAL_GetTick>
 800e9f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800ea0a:	887b      	ldrh	r3, [r7, #2]
 800ea0c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ea0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d00f      	beq.n	800ea36 <HAL_SPI_TransmitReceive+0x70>
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ea1c:	d107      	bne.n	800ea2e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d103      	bne.n	800ea2e <HAL_SPI_TransmitReceive+0x68>
 800ea26:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ea2a:	2b04      	cmp	r3, #4
 800ea2c:	d003      	beq.n	800ea36 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800ea2e:	2302      	movs	r3, #2
 800ea30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ea34:	e15b      	b.n	800ecee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d005      	beq.n	800ea48 <HAL_SPI_TransmitReceive+0x82>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d002      	beq.n	800ea48 <HAL_SPI_TransmitReceive+0x82>
 800ea42:	887b      	ldrh	r3, [r7, #2]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d103      	bne.n	800ea50 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800ea4e:	e14e      	b.n	800ecee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	2b04      	cmp	r3, #4
 800ea5a:	d003      	beq.n	800ea64 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	2205      	movs	r2, #5
 800ea60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2200      	movs	r2, #0
 800ea68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	687a      	ldr	r2, [r7, #4]
 800ea6e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	887a      	ldrh	r2, [r7, #2]
 800ea74:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	887a      	ldrh	r2, [r7, #2]
 800ea7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	887a      	ldrh	r2, [r7, #2]
 800ea86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	887a      	ldrh	r2, [r7, #2]
 800ea8c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	2200      	movs	r2, #0
 800ea92:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2200      	movs	r2, #0
 800ea98:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eaa4:	2b40      	cmp	r3, #64	; 0x40
 800eaa6:	d007      	beq.n	800eab8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	681a      	ldr	r2, [r3, #0]
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eab6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eac0:	d178      	bne.n	800ebb4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d002      	beq.n	800ead0 <HAL_SPI_TransmitReceive+0x10a>
 800eaca:	8b7b      	ldrh	r3, [r7, #26]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	d166      	bne.n	800eb9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ead4:	881a      	ldrh	r2, [r3, #0]
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eae0:	1c9a      	adds	r2, r3, #2
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	3b01      	subs	r3, #1
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eaf4:	e053      	b.n	800eb9e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	f003 0302 	and.w	r3, r3, #2
 800eb00:	2b02      	cmp	r3, #2
 800eb02:	d11b      	bne.n	800eb3c <HAL_SPI_TransmitReceive+0x176>
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d016      	beq.n	800eb3c <HAL_SPI_TransmitReceive+0x176>
 800eb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d113      	bne.n	800eb3c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb18:	881a      	ldrh	r2, [r3, #0]
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb24:	1c9a      	adds	r2, r3, #2
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	3b01      	subs	r3, #1
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	f003 0301 	and.w	r3, r3, #1
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d119      	bne.n	800eb7e <HAL_SPI_TransmitReceive+0x1b8>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d014      	beq.n	800eb7e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	68da      	ldr	r2, [r3, #12]
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb5e:	b292      	uxth	r2, r2
 800eb60:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb66:	1c9a      	adds	r2, r3, #2
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb70:	b29b      	uxth	r3, r3
 800eb72:	3b01      	subs	r3, #1
 800eb74:	b29a      	uxth	r2, r3
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800eb7a:	2301      	movs	r3, #1
 800eb7c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800eb7e:	f7fb f893 	bl	8009ca8 <HAL_GetTick>
 800eb82:	4602      	mov	r2, r0
 800eb84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d807      	bhi.n	800eb9e <HAL_SPI_TransmitReceive+0x1d8>
 800eb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb94:	d003      	beq.n	800eb9e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800eb96:	2303      	movs	r3, #3
 800eb98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800eb9c:	e0a7      	b.n	800ecee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800eba2:	b29b      	uxth	r3, r3
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1a6      	bne.n	800eaf6 <HAL_SPI_TransmitReceive+0x130>
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1a1      	bne.n	800eaf6 <HAL_SPI_TransmitReceive+0x130>
 800ebb2:	e07c      	b.n	800ecae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	685b      	ldr	r3, [r3, #4]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d002      	beq.n	800ebc2 <HAL_SPI_TransmitReceive+0x1fc>
 800ebbc:	8b7b      	ldrh	r3, [r7, #26]
 800ebbe:	2b01      	cmp	r3, #1
 800ebc0:	d16b      	bne.n	800ec9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	330c      	adds	r3, #12
 800ebcc:	7812      	ldrb	r2, [r2, #0]
 800ebce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ebe8:	e057      	b.n	800ec9a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	689b      	ldr	r3, [r3, #8]
 800ebf0:	f003 0302 	and.w	r3, r3, #2
 800ebf4:	2b02      	cmp	r3, #2
 800ebf6:	d11c      	bne.n	800ec32 <HAL_SPI_TransmitReceive+0x26c>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d017      	beq.n	800ec32 <HAL_SPI_TransmitReceive+0x26c>
 800ec02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec04:	2b01      	cmp	r3, #1
 800ec06:	d114      	bne.n	800ec32 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	330c      	adds	r3, #12
 800ec12:	7812      	ldrb	r2, [r2, #0]
 800ec14:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec1a:	1c5a      	adds	r2, r3, #1
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	3b01      	subs	r3, #1
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	f003 0301 	and.w	r3, r3, #1
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d119      	bne.n	800ec74 <HAL_SPI_TransmitReceive+0x2ae>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec44:	b29b      	uxth	r3, r3
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d014      	beq.n	800ec74 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68da      	ldr	r2, [r3, #12]
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec54:	b2d2      	uxtb	r2, r2
 800ec56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec5c:	1c5a      	adds	r2, r3, #1
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ec66:	b29b      	uxth	r3, r3
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ec70:	2301      	movs	r3, #1
 800ec72:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ec74:	f7fb f818 	bl	8009ca8 <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d803      	bhi.n	800ec8c <HAL_SPI_TransmitReceive+0x2c6>
 800ec84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec8a:	d102      	bne.n	800ec92 <HAL_SPI_TransmitReceive+0x2cc>
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d103      	bne.n	800ec9a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ec92:	2303      	movs	r3, #3
 800ec94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ec98:	e029      	b.n	800ecee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1a2      	bne.n	800ebea <HAL_SPI_TransmitReceive+0x224>
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d19d      	bne.n	800ebea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ecae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ecb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ecb2:	68f8      	ldr	r0, [r7, #12]
 800ecb4:	f000 f8f8 	bl	800eea8 <SPI_EndRxTxTransaction>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d006      	beq.n	800eccc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ecca:	e010      	b.n	800ecee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10b      	bne.n	800ecec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	617b      	str	r3, [r7, #20]
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	617b      	str	r3, [r7, #20]
 800ece0:	68fb      	ldr	r3, [r7, #12]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	689b      	ldr	r3, [r3, #8]
 800ece6:	617b      	str	r3, [r7, #20]
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	e000      	b.n	800ecee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ecec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ecfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3730      	adds	r7, #48	; 0x30
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b084      	sub	sp, #16
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	60f8      	str	r0, [r7, #12]
 800ed12:	60b9      	str	r1, [r7, #8]
 800ed14:	603b      	str	r3, [r7, #0]
 800ed16:	4613      	mov	r3, r2
 800ed18:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ed1a:	e04c      	b.n	800edb6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d048      	beq.n	800edb6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800ed24:	f7fa ffc0 	bl	8009ca8 <HAL_GetTick>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d902      	bls.n	800ed3a <SPI_WaitFlagStateUntilTimeout+0x30>
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d13d      	bne.n	800edb6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	685a      	ldr	r2, [r3, #4]
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ed48:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ed52:	d111      	bne.n	800ed78 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	689b      	ldr	r3, [r3, #8]
 800ed58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ed5c:	d004      	beq.n	800ed68 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	689b      	ldr	r3, [r3, #8]
 800ed62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ed66:	d107      	bne.n	800ed78 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed76:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ed80:	d10f      	bne.n	800eda2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800eda0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2201      	movs	r2, #1
 800eda6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e00f      	b.n	800edd6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	689a      	ldr	r2, [r3, #8]
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	4013      	ands	r3, r2
 800edc0:	68ba      	ldr	r2, [r7, #8]
 800edc2:	429a      	cmp	r2, r3
 800edc4:	bf0c      	ite	eq
 800edc6:	2301      	moveq	r3, #1
 800edc8:	2300      	movne	r3, #0
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	461a      	mov	r2, r3
 800edce:	79fb      	ldrb	r3, [r7, #7]
 800edd0:	429a      	cmp	r2, r3
 800edd2:	d1a3      	bne.n	800ed1c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800edd4:	2300      	movs	r3, #0
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b086      	sub	sp, #24
 800ede2:	af02      	add	r7, sp, #8
 800ede4:	60f8      	str	r0, [r7, #12]
 800ede6:	60b9      	str	r1, [r7, #8]
 800ede8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	685b      	ldr	r3, [r3, #4]
 800edee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800edf2:	d111      	bne.n	800ee18 <SPI_EndRxTransaction+0x3a>
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edfc:	d004      	beq.n	800ee08 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee06:	d107      	bne.n	800ee18 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	681a      	ldr	r2, [r3, #0]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ee16:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ee20:	d12a      	bne.n	800ee78 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ee2a:	d012      	beq.n	800ee52 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	2200      	movs	r2, #0
 800ee34:	2180      	movs	r1, #128	; 0x80
 800ee36:	68f8      	ldr	r0, [r7, #12]
 800ee38:	f7ff ff67 	bl	800ed0a <SPI_WaitFlagStateUntilTimeout>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d02d      	beq.n	800ee9e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee46:	f043 0220 	orr.w	r2, r3, #32
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ee4e:	2303      	movs	r3, #3
 800ee50:	e026      	b.n	800eea0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	2101      	movs	r1, #1
 800ee5c:	68f8      	ldr	r0, [r7, #12]
 800ee5e:	f7ff ff54 	bl	800ed0a <SPI_WaitFlagStateUntilTimeout>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d01a      	beq.n	800ee9e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee6c:	f043 0220 	orr.w	r2, r3, #32
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800ee74:	2303      	movs	r3, #3
 800ee76:	e013      	b.n	800eea0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	2101      	movs	r1, #1
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f7ff ff41 	bl	800ed0a <SPI_WaitFlagStateUntilTimeout>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d007      	beq.n	800ee9e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee92:	f043 0220 	orr.w	r2, r3, #32
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ee9a:	2303      	movs	r3, #3
 800ee9c:	e000      	b.n	800eea0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b088      	sub	sp, #32
 800eeac:	af02      	add	r7, sp, #8
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800eeb4:	4b1b      	ldr	r3, [pc, #108]	; (800ef24 <SPI_EndRxTxTransaction+0x7c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	4a1b      	ldr	r2, [pc, #108]	; (800ef28 <SPI_EndRxTxTransaction+0x80>)
 800eeba:	fba2 2303 	umull	r2, r3, r2, r3
 800eebe:	0d5b      	lsrs	r3, r3, #21
 800eec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800eec4:	fb02 f303 	mul.w	r3, r2, r3
 800eec8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800eed2:	d112      	bne.n	800eefa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	9300      	str	r3, [sp, #0]
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	2200      	movs	r2, #0
 800eedc:	2180      	movs	r1, #128	; 0x80
 800eede:	68f8      	ldr	r0, [r7, #12]
 800eee0:	f7ff ff13 	bl	800ed0a <SPI_WaitFlagStateUntilTimeout>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d016      	beq.n	800ef18 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eeee:	f043 0220 	orr.w	r2, r3, #32
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800eef6:	2303      	movs	r3, #3
 800eef8:	e00f      	b.n	800ef1a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800eefa:	697b      	ldr	r3, [r7, #20]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d00a      	beq.n	800ef16 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	3b01      	subs	r3, #1
 800ef04:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	689b      	ldr	r3, [r3, #8]
 800ef0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef10:	2b80      	cmp	r3, #128	; 0x80
 800ef12:	d0f2      	beq.n	800eefa <SPI_EndRxTxTransaction+0x52>
 800ef14:	e000      	b.n	800ef18 <SPI_EndRxTxTransaction+0x70>
        break;
 800ef16:	bf00      	nop
  }

  return HAL_OK;
 800ef18:	2300      	movs	r3, #0
}
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	3718      	adds	r7, #24
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	bd80      	pop	{r7, pc}
 800ef22:	bf00      	nop
 800ef24:	20000000 	.word	0x20000000
 800ef28:	165e9f81 	.word	0x165e9f81

0800ef2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d101      	bne.n	800ef3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e01d      	b.n	800ef7a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d106      	bne.n	800ef58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f7f8 f9da 	bl	800730c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	2202      	movs	r2, #2
 800ef5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681a      	ldr	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	3304      	adds	r3, #4
 800ef68:	4619      	mov	r1, r3
 800ef6a:	4610      	mov	r0, r2
 800ef6c:	f000 fb56 	bl	800f61c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2201      	movs	r2, #1
 800ef74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3708      	adds	r7, #8
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ef82:	b480      	push	{r7}
 800ef84:	b085      	sub	sp, #20
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	68da      	ldr	r2, [r3, #12]
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	f042 0201 	orr.w	r2, r2, #1
 800ef98:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	689b      	ldr	r3, [r3, #8]
 800efa0:	f003 0307 	and.w	r3, r3, #7
 800efa4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2b06      	cmp	r3, #6
 800efaa:	d007      	beq.n	800efbc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681b      	ldr	r3, [r3, #0]
 800efb0:	681a      	ldr	r2, [r3, #0]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	f042 0201 	orr.w	r2, r2, #1
 800efba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800efbc:	2300      	movs	r3, #0
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3714      	adds	r7, #20
 800efc2:	46bd      	mov	sp, r7
 800efc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc8:	4770      	bx	lr

0800efca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800efca:	b580      	push	{r7, lr}
 800efcc:	b082      	sub	sp, #8
 800efce:	af00      	add	r7, sp, #0
 800efd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d101      	bne.n	800efdc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800efd8:	2301      	movs	r3, #1
 800efda:	e01d      	b.n	800f018 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d106      	bne.n	800eff6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2200      	movs	r2, #0
 800efec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eff0:	6878      	ldr	r0, [r7, #4]
 800eff2:	f7f8 f917 	bl	8007224 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	2202      	movs	r2, #2
 800effa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	3304      	adds	r3, #4
 800f006:	4619      	mov	r1, r3
 800f008:	4610      	mov	r0, r2
 800f00a:	f000 fb07 	bl	800f61c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2201      	movs	r2, #1
 800f012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3708      	adds	r7, #8
 800f01c:	46bd      	mov	sp, r7
 800f01e:	bd80      	pop	{r7, pc}

0800f020 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2201      	movs	r2, #1
 800f030:	6839      	ldr	r1, [r7, #0]
 800f032:	4618      	mov	r0, r3
 800f034:	f000 fd42 	bl	800fabc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4a15      	ldr	r2, [pc, #84]	; (800f094 <HAL_TIM_PWM_Start+0x74>)
 800f03e:	4293      	cmp	r3, r2
 800f040:	d004      	beq.n	800f04c <HAL_TIM_PWM_Start+0x2c>
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a14      	ldr	r2, [pc, #80]	; (800f098 <HAL_TIM_PWM_Start+0x78>)
 800f048:	4293      	cmp	r3, r2
 800f04a:	d101      	bne.n	800f050 <HAL_TIM_PWM_Start+0x30>
 800f04c:	2301      	movs	r3, #1
 800f04e:	e000      	b.n	800f052 <HAL_TIM_PWM_Start+0x32>
 800f050:	2300      	movs	r3, #0
 800f052:	2b00      	cmp	r3, #0
 800f054:	d007      	beq.n	800f066 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f064:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	689b      	ldr	r3, [r3, #8]
 800f06c:	f003 0307 	and.w	r3, r3, #7
 800f070:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2b06      	cmp	r3, #6
 800f076:	d007      	beq.n	800f088 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	f042 0201 	orr.w	r2, r2, #1
 800f086:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f088:	2300      	movs	r3, #0
}
 800f08a:	4618      	mov	r0, r3
 800f08c:	3710      	adds	r7, #16
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	40010000 	.word	0x40010000
 800f098:	40010400 	.word	0x40010400

0800f09c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e083      	b.n	800f1b8 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d106      	bne.n	800f0ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7f8 f9b1 	bl	800742c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2202      	movs	r2, #2
 800f0ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	687a      	ldr	r2, [r7, #4]
 800f0da:	6812      	ldr	r2, [r2, #0]
 800f0dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0e0:	f023 0307 	bic.w	r3, r3, #7
 800f0e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	681a      	ldr	r2, [r3, #0]
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	3304      	adds	r3, #4
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	4610      	mov	r0, r2
 800f0f2:	f000 fa93 	bl	800f61c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	689b      	ldr	r3, [r3, #8]
 800f0fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	699b      	ldr	r3, [r3, #24]
 800f104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	6a1b      	ldr	r3, [r3, #32]
 800f10c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	4313      	orrs	r3, r2
 800f116:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f11e:	f023 0303 	bic.w	r3, r3, #3
 800f122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	689a      	ldr	r2, [r3, #8]
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	699b      	ldr	r3, [r3, #24]
 800f12c:	021b      	lsls	r3, r3, #8
 800f12e:	4313      	orrs	r3, r2
 800f130:	693a      	ldr	r2, [r7, #16]
 800f132:	4313      	orrs	r3, r2
 800f134:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800f13c:	f023 030c 	bic.w	r3, r3, #12
 800f140:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800f142:	693b      	ldr	r3, [r7, #16]
 800f144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f148:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f14c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800f14e:	683b      	ldr	r3, [r7, #0]
 800f150:	68da      	ldr	r2, [r3, #12]
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	69db      	ldr	r3, [r3, #28]
 800f156:	021b      	lsls	r3, r3, #8
 800f158:	4313      	orrs	r3, r2
 800f15a:	693a      	ldr	r2, [r7, #16]
 800f15c:	4313      	orrs	r3, r2
 800f15e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800f160:	683b      	ldr	r3, [r7, #0]
 800f162:	691b      	ldr	r3, [r3, #16]
 800f164:	011a      	lsls	r2, r3, #4
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	6a1b      	ldr	r3, [r3, #32]
 800f16a:	031b      	lsls	r3, r3, #12
 800f16c:	4313      	orrs	r3, r2
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	4313      	orrs	r3, r2
 800f172:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800f17a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800f182:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	685a      	ldr	r2, [r3, #4]
 800f188:	683b      	ldr	r3, [r7, #0]
 800f18a:	695b      	ldr	r3, [r3, #20]
 800f18c:	011b      	lsls	r3, r3, #4
 800f18e:	4313      	orrs	r3, r2
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	4313      	orrs	r3, r2
 800f194:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	697a      	ldr	r2, [r7, #20]
 800f19c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	693a      	ldr	r2, [r7, #16]
 800f1a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	68fa      	ldr	r2, [r7, #12]
 800f1ac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f1b6:	2300      	movs	r3, #0
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}

0800f1c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d002      	beq.n	800f1d6 <HAL_TIM_Encoder_Start+0x16>
 800f1d0:	2b04      	cmp	r3, #4
 800f1d2:	d008      	beq.n	800f1e6 <HAL_TIM_Encoder_Start+0x26>
 800f1d4:	e00f      	b.n	800f1f6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	2201      	movs	r2, #1
 800f1dc:	2100      	movs	r1, #0
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f000 fc6c 	bl	800fabc <TIM_CCxChannelCmd>
      break;
 800f1e4:	e016      	b.n	800f214 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	2201      	movs	r2, #1
 800f1ec:	2104      	movs	r1, #4
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f000 fc64 	bl	800fabc <TIM_CCxChannelCmd>
      break;
 800f1f4:	e00e      	b.n	800f214 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	2100      	movs	r1, #0
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 fc5c 	bl	800fabc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2201      	movs	r2, #1
 800f20a:	2104      	movs	r1, #4
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 fc55 	bl	800fabc <TIM_CCxChannelCmd>
      break;
 800f212:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f042 0201 	orr.w	r2, r2, #1
 800f222:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800f224:	2300      	movs	r3, #0
}
 800f226:	4618      	mov	r0, r3
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b082      	sub	sp, #8
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	691b      	ldr	r3, [r3, #16]
 800f23c:	f003 0302 	and.w	r3, r3, #2
 800f240:	2b02      	cmp	r3, #2
 800f242:	d122      	bne.n	800f28a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	f003 0302 	and.w	r3, r3, #2
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d11b      	bne.n	800f28a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f06f 0202 	mvn.w	r2, #2
 800f25a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	2201      	movs	r2, #1
 800f260:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	699b      	ldr	r3, [r3, #24]
 800f268:	f003 0303 	and.w	r3, r3, #3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d003      	beq.n	800f278 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f9b5 	bl	800f5e0 <HAL_TIM_IC_CaptureCallback>
 800f276:	e005      	b.n	800f284 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f000 f9a7 	bl	800f5cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 f9b8 	bl	800f5f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	691b      	ldr	r3, [r3, #16]
 800f290:	f003 0304 	and.w	r3, r3, #4
 800f294:	2b04      	cmp	r3, #4
 800f296:	d122      	bne.n	800f2de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	68db      	ldr	r3, [r3, #12]
 800f29e:	f003 0304 	and.w	r3, r3, #4
 800f2a2:	2b04      	cmp	r3, #4
 800f2a4:	d11b      	bne.n	800f2de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f06f 0204 	mvn.w	r2, #4
 800f2ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	699b      	ldr	r3, [r3, #24]
 800f2bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d003      	beq.n	800f2cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f98b 	bl	800f5e0 <HAL_TIM_IC_CaptureCallback>
 800f2ca:	e005      	b.n	800f2d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 f97d 	bl	800f5cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 f98e 	bl	800f5f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	691b      	ldr	r3, [r3, #16]
 800f2e4:	f003 0308 	and.w	r3, r3, #8
 800f2e8:	2b08      	cmp	r3, #8
 800f2ea:	d122      	bne.n	800f332 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	f003 0308 	and.w	r3, r3, #8
 800f2f6:	2b08      	cmp	r3, #8
 800f2f8:	d11b      	bne.n	800f332 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	f06f 0208 	mvn.w	r2, #8
 800f302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2204      	movs	r2, #4
 800f308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	69db      	ldr	r3, [r3, #28]
 800f310:	f003 0303 	and.w	r3, r3, #3
 800f314:	2b00      	cmp	r3, #0
 800f316:	d003      	beq.n	800f320 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 f961 	bl	800f5e0 <HAL_TIM_IC_CaptureCallback>
 800f31e:	e005      	b.n	800f32c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 f953 	bl	800f5cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f326:	6878      	ldr	r0, [r7, #4]
 800f328:	f000 f964 	bl	800f5f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2200      	movs	r2, #0
 800f330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	f003 0310 	and.w	r3, r3, #16
 800f33c:	2b10      	cmp	r3, #16
 800f33e:	d122      	bne.n	800f386 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	68db      	ldr	r3, [r3, #12]
 800f346:	f003 0310 	and.w	r3, r3, #16
 800f34a:	2b10      	cmp	r3, #16
 800f34c:	d11b      	bne.n	800f386 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f06f 0210 	mvn.w	r2, #16
 800f356:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2208      	movs	r2, #8
 800f35c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	69db      	ldr	r3, [r3, #28]
 800f364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d003      	beq.n	800f374 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f937 	bl	800f5e0 <HAL_TIM_IC_CaptureCallback>
 800f372:	e005      	b.n	800f380 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f374:	6878      	ldr	r0, [r7, #4]
 800f376:	f000 f929 	bl	800f5cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f93a 	bl	800f5f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	f003 0301 	and.w	r3, r3, #1
 800f390:	2b01      	cmp	r3, #1
 800f392:	d10e      	bne.n	800f3b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	68db      	ldr	r3, [r3, #12]
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d107      	bne.n	800f3b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f06f 0201 	mvn.w	r2, #1
 800f3aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f7f6 fd27 	bl	8005e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	691b      	ldr	r3, [r3, #16]
 800f3b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3bc:	2b80      	cmp	r3, #128	; 0x80
 800f3be:	d10e      	bne.n	800f3de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3ca:	2b80      	cmp	r3, #128	; 0x80
 800f3cc:	d107      	bne.n	800f3de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f3d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 fc6d 	bl	800fcb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3e8:	2b40      	cmp	r3, #64	; 0x40
 800f3ea:	d10e      	bne.n	800f40a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3f6:	2b40      	cmp	r3, #64	; 0x40
 800f3f8:	d107      	bne.n	800f40a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 f8ff 	bl	800f608 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	691b      	ldr	r3, [r3, #16]
 800f410:	f003 0320 	and.w	r3, r3, #32
 800f414:	2b20      	cmp	r3, #32
 800f416:	d10e      	bne.n	800f436 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68db      	ldr	r3, [r3, #12]
 800f41e:	f003 0320 	and.w	r3, r3, #32
 800f422:	2b20      	cmp	r3, #32
 800f424:	d107      	bne.n	800f436 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	f06f 0220 	mvn.w	r2, #32
 800f42e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fc37 	bl	800fca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f436:	bf00      	nop
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
	...

0800f440 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	60f8      	str	r0, [r7, #12]
 800f448:	60b9      	str	r1, [r7, #8]
 800f44a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f452:	2b01      	cmp	r3, #1
 800f454:	d101      	bne.n	800f45a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f456:	2302      	movs	r3, #2
 800f458:	e0b4      	b.n	800f5c4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2202      	movs	r2, #2
 800f466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b0c      	cmp	r3, #12
 800f46e:	f200 809f 	bhi.w	800f5b0 <HAL_TIM_PWM_ConfigChannel+0x170>
 800f472:	a201      	add	r2, pc, #4	; (adr r2, 800f478 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800f474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f478:	0800f4ad 	.word	0x0800f4ad
 800f47c:	0800f5b1 	.word	0x0800f5b1
 800f480:	0800f5b1 	.word	0x0800f5b1
 800f484:	0800f5b1 	.word	0x0800f5b1
 800f488:	0800f4ed 	.word	0x0800f4ed
 800f48c:	0800f5b1 	.word	0x0800f5b1
 800f490:	0800f5b1 	.word	0x0800f5b1
 800f494:	0800f5b1 	.word	0x0800f5b1
 800f498:	0800f52f 	.word	0x0800f52f
 800f49c:	0800f5b1 	.word	0x0800f5b1
 800f4a0:	0800f5b1 	.word	0x0800f5b1
 800f4a4:	0800f5b1 	.word	0x0800f5b1
 800f4a8:	0800f56f 	.word	0x0800f56f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	68b9      	ldr	r1, [r7, #8]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 f952 	bl	800f75c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	699a      	ldr	r2, [r3, #24]
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	f042 0208 	orr.w	r2, r2, #8
 800f4c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	699a      	ldr	r2, [r3, #24]
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f022 0204 	bic.w	r2, r2, #4
 800f4d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	6999      	ldr	r1, [r3, #24]
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	691a      	ldr	r2, [r3, #16]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	619a      	str	r2, [r3, #24]
      break;
 800f4ea:	e062      	b.n	800f5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	68b9      	ldr	r1, [r7, #8]
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f000 f9a2 	bl	800f83c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	699a      	ldr	r2, [r3, #24]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	699a      	ldr	r2, [r3, #24]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6999      	ldr	r1, [r3, #24]
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	691b      	ldr	r3, [r3, #16]
 800f522:	021a      	lsls	r2, r3, #8
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	430a      	orrs	r2, r1
 800f52a:	619a      	str	r2, [r3, #24]
      break;
 800f52c:	e041      	b.n	800f5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68b9      	ldr	r1, [r7, #8]
 800f534:	4618      	mov	r0, r3
 800f536:	f000 f9f7 	bl	800f928 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	69da      	ldr	r2, [r3, #28]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f042 0208 	orr.w	r2, r2, #8
 800f548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	69da      	ldr	r2, [r3, #28]
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f022 0204 	bic.w	r2, r2, #4
 800f558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	69d9      	ldr	r1, [r3, #28]
 800f560:	68bb      	ldr	r3, [r7, #8]
 800f562:	691a      	ldr	r2, [r3, #16]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	430a      	orrs	r2, r1
 800f56a:	61da      	str	r2, [r3, #28]
      break;
 800f56c:	e021      	b.n	800f5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	68b9      	ldr	r1, [r7, #8]
 800f574:	4618      	mov	r0, r3
 800f576:	f000 fa4b 	bl	800fa10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	69da      	ldr	r2, [r3, #28]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	69da      	ldr	r2, [r3, #28]
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	69d9      	ldr	r1, [r3, #28]
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	691b      	ldr	r3, [r3, #16]
 800f5a4:	021a      	lsls	r2, r3, #8
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	430a      	orrs	r2, r1
 800f5ac:	61da      	str	r2, [r3, #28]
      break;
 800f5ae:	e000      	b.n	800f5b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f5b0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	2201      	movs	r2, #1
 800f5b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	2200      	movs	r2, #0
 800f5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	3710      	adds	r7, #16
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	b083      	sub	sp, #12
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f5d4:	bf00      	nop
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b083      	sub	sp, #12
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f5e8:	bf00      	nop
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f5fc:	bf00      	nop
 800f5fe:	370c      	adds	r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f606:	4770      	bx	lr

0800f608 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f610:	bf00      	nop
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr

0800f61c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f61c:	b480      	push	{r7}
 800f61e:	b085      	sub	sp, #20
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
 800f624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	4a40      	ldr	r2, [pc, #256]	; (800f730 <TIM_Base_SetConfig+0x114>)
 800f630:	4293      	cmp	r3, r2
 800f632:	d013      	beq.n	800f65c <TIM_Base_SetConfig+0x40>
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f63a:	d00f      	beq.n	800f65c <TIM_Base_SetConfig+0x40>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4a3d      	ldr	r2, [pc, #244]	; (800f734 <TIM_Base_SetConfig+0x118>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d00b      	beq.n	800f65c <TIM_Base_SetConfig+0x40>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a3c      	ldr	r2, [pc, #240]	; (800f738 <TIM_Base_SetConfig+0x11c>)
 800f648:	4293      	cmp	r3, r2
 800f64a:	d007      	beq.n	800f65c <TIM_Base_SetConfig+0x40>
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	4a3b      	ldr	r2, [pc, #236]	; (800f73c <TIM_Base_SetConfig+0x120>)
 800f650:	4293      	cmp	r3, r2
 800f652:	d003      	beq.n	800f65c <TIM_Base_SetConfig+0x40>
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a3a      	ldr	r2, [pc, #232]	; (800f740 <TIM_Base_SetConfig+0x124>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d108      	bne.n	800f66e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	685b      	ldr	r3, [r3, #4]
 800f668:	68fa      	ldr	r2, [r7, #12]
 800f66a:	4313      	orrs	r3, r2
 800f66c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	4a2f      	ldr	r2, [pc, #188]	; (800f730 <TIM_Base_SetConfig+0x114>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d02b      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f67c:	d027      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	4a2c      	ldr	r2, [pc, #176]	; (800f734 <TIM_Base_SetConfig+0x118>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d023      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a2b      	ldr	r2, [pc, #172]	; (800f738 <TIM_Base_SetConfig+0x11c>)
 800f68a:	4293      	cmp	r3, r2
 800f68c:	d01f      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4a2a      	ldr	r2, [pc, #168]	; (800f73c <TIM_Base_SetConfig+0x120>)
 800f692:	4293      	cmp	r3, r2
 800f694:	d01b      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	4a29      	ldr	r2, [pc, #164]	; (800f740 <TIM_Base_SetConfig+0x124>)
 800f69a:	4293      	cmp	r3, r2
 800f69c:	d017      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4a28      	ldr	r2, [pc, #160]	; (800f744 <TIM_Base_SetConfig+0x128>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d013      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	4a27      	ldr	r2, [pc, #156]	; (800f748 <TIM_Base_SetConfig+0x12c>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d00f      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	4a26      	ldr	r2, [pc, #152]	; (800f74c <TIM_Base_SetConfig+0x130>)
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d00b      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	4a25      	ldr	r2, [pc, #148]	; (800f750 <TIM_Base_SetConfig+0x134>)
 800f6ba:	4293      	cmp	r3, r2
 800f6bc:	d007      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	4a24      	ldr	r2, [pc, #144]	; (800f754 <TIM_Base_SetConfig+0x138>)
 800f6c2:	4293      	cmp	r3, r2
 800f6c4:	d003      	beq.n	800f6ce <TIM_Base_SetConfig+0xb2>
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4a23      	ldr	r2, [pc, #140]	; (800f758 <TIM_Base_SetConfig+0x13c>)
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d108      	bne.n	800f6e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	68db      	ldr	r3, [r3, #12]
 800f6da:	68fa      	ldr	r2, [r7, #12]
 800f6dc:	4313      	orrs	r3, r2
 800f6de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	689a      	ldr	r2, [r3, #8]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	681a      	ldr	r2, [r3, #0]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a0a      	ldr	r2, [pc, #40]	; (800f730 <TIM_Base_SetConfig+0x114>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d003      	beq.n	800f714 <TIM_Base_SetConfig+0xf8>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a0c      	ldr	r2, [pc, #48]	; (800f740 <TIM_Base_SetConfig+0x124>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d103      	bne.n	800f71c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	691a      	ldr	r2, [r3, #16]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	615a      	str	r2, [r3, #20]
}
 800f722:	bf00      	nop
 800f724:	3714      	adds	r7, #20
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	40010000 	.word	0x40010000
 800f734:	40000400 	.word	0x40000400
 800f738:	40000800 	.word	0x40000800
 800f73c:	40000c00 	.word	0x40000c00
 800f740:	40010400 	.word	0x40010400
 800f744:	40014000 	.word	0x40014000
 800f748:	40014400 	.word	0x40014400
 800f74c:	40014800 	.word	0x40014800
 800f750:	40001800 	.word	0x40001800
 800f754:	40001c00 	.word	0x40001c00
 800f758:	40002000 	.word	0x40002000

0800f75c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b087      	sub	sp, #28
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6a1b      	ldr	r3, [r3, #32]
 800f76a:	f023 0201 	bic.w	r2, r3, #1
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	6a1b      	ldr	r3, [r3, #32]
 800f776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	685b      	ldr	r3, [r3, #4]
 800f77c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	699b      	ldr	r3, [r3, #24]
 800f782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f78a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	f023 0303 	bic.w	r3, r3, #3
 800f792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	68fa      	ldr	r2, [r7, #12]
 800f79a:	4313      	orrs	r3, r2
 800f79c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	f023 0302 	bic.w	r3, r3, #2
 800f7a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f7a6:	683b      	ldr	r3, [r7, #0]
 800f7a8:	689b      	ldr	r3, [r3, #8]
 800f7aa:	697a      	ldr	r2, [r7, #20]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a20      	ldr	r2, [pc, #128]	; (800f834 <TIM_OC1_SetConfig+0xd8>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d003      	beq.n	800f7c0 <TIM_OC1_SetConfig+0x64>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a1f      	ldr	r2, [pc, #124]	; (800f838 <TIM_OC1_SetConfig+0xdc>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d10c      	bne.n	800f7da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	f023 0308 	bic.w	r3, r3, #8
 800f7c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f023 0304 	bic.w	r3, r3, #4
 800f7d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a15      	ldr	r2, [pc, #84]	; (800f834 <TIM_OC1_SetConfig+0xd8>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d003      	beq.n	800f7ea <TIM_OC1_SetConfig+0x8e>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a14      	ldr	r2, [pc, #80]	; (800f838 <TIM_OC1_SetConfig+0xdc>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d111      	bne.n	800f80e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f7ea:	693b      	ldr	r3, [r7, #16]
 800f7ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f7f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	695b      	ldr	r3, [r3, #20]
 800f7fe:	693a      	ldr	r2, [r7, #16]
 800f800:	4313      	orrs	r3, r2
 800f802:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	699b      	ldr	r3, [r3, #24]
 800f808:	693a      	ldr	r2, [r7, #16]
 800f80a:	4313      	orrs	r3, r2
 800f80c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	693a      	ldr	r2, [r7, #16]
 800f812:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	68fa      	ldr	r2, [r7, #12]
 800f818:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	685a      	ldr	r2, [r3, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	697a      	ldr	r2, [r7, #20]
 800f826:	621a      	str	r2, [r3, #32]
}
 800f828:	bf00      	nop
 800f82a:	371c      	adds	r7, #28
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr
 800f834:	40010000 	.word	0x40010000
 800f838:	40010400 	.word	0x40010400

0800f83c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f83c:	b480      	push	{r7}
 800f83e:	b087      	sub	sp, #28
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
 800f844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	f023 0210 	bic.w	r2, r3, #16
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6a1b      	ldr	r3, [r3, #32]
 800f856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	685b      	ldr	r3, [r3, #4]
 800f85c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	699b      	ldr	r3, [r3, #24]
 800f862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f86a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f872:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	021b      	lsls	r3, r3, #8
 800f87a:	68fa      	ldr	r2, [r7, #12]
 800f87c:	4313      	orrs	r3, r2
 800f87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	f023 0320 	bic.w	r3, r3, #32
 800f886:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	011b      	lsls	r3, r3, #4
 800f88e:	697a      	ldr	r2, [r7, #20]
 800f890:	4313      	orrs	r3, r2
 800f892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	4a22      	ldr	r2, [pc, #136]	; (800f920 <TIM_OC2_SetConfig+0xe4>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d003      	beq.n	800f8a4 <TIM_OC2_SetConfig+0x68>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	4a21      	ldr	r2, [pc, #132]	; (800f924 <TIM_OC2_SetConfig+0xe8>)
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d10d      	bne.n	800f8c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f8aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	697a      	ldr	r2, [r7, #20]
 800f8b4:	4313      	orrs	r3, r2
 800f8b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f8be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	4a17      	ldr	r2, [pc, #92]	; (800f920 <TIM_OC2_SetConfig+0xe4>)
 800f8c4:	4293      	cmp	r3, r2
 800f8c6:	d003      	beq.n	800f8d0 <TIM_OC2_SetConfig+0x94>
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	4a16      	ldr	r2, [pc, #88]	; (800f924 <TIM_OC2_SetConfig+0xe8>)
 800f8cc:	4293      	cmp	r3, r2
 800f8ce:	d113      	bne.n	800f8f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f8d0:	693b      	ldr	r3, [r7, #16]
 800f8d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f8d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f8de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	695b      	ldr	r3, [r3, #20]
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	699b      	ldr	r3, [r3, #24]
 800f8f0:	009b      	lsls	r3, r3, #2
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	685a      	ldr	r2, [r3, #4]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	697a      	ldr	r2, [r7, #20]
 800f910:	621a      	str	r2, [r3, #32]
}
 800f912:	bf00      	nop
 800f914:	371c      	adds	r7, #28
 800f916:	46bd      	mov	sp, r7
 800f918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f91c:	4770      	bx	lr
 800f91e:	bf00      	nop
 800f920:	40010000 	.word	0x40010000
 800f924:	40010400 	.word	0x40010400

0800f928 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f928:	b480      	push	{r7}
 800f92a:	b087      	sub	sp, #28
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
 800f930:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a1b      	ldr	r3, [r3, #32]
 800f936:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6a1b      	ldr	r3, [r3, #32]
 800f942:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	685b      	ldr	r3, [r3, #4]
 800f948:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	69db      	ldr	r3, [r3, #28]
 800f94e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	f023 0303 	bic.w	r3, r3, #3
 800f95e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	68fa      	ldr	r2, [r7, #12]
 800f966:	4313      	orrs	r3, r2
 800f968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	689b      	ldr	r3, [r3, #8]
 800f976:	021b      	lsls	r3, r3, #8
 800f978:	697a      	ldr	r2, [r7, #20]
 800f97a:	4313      	orrs	r3, r2
 800f97c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	4a21      	ldr	r2, [pc, #132]	; (800fa08 <TIM_OC3_SetConfig+0xe0>)
 800f982:	4293      	cmp	r3, r2
 800f984:	d003      	beq.n	800f98e <TIM_OC3_SetConfig+0x66>
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4a20      	ldr	r2, [pc, #128]	; (800fa0c <TIM_OC3_SetConfig+0xe4>)
 800f98a:	4293      	cmp	r3, r2
 800f98c:	d10d      	bne.n	800f9aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f994:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	021b      	lsls	r3, r3, #8
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f9a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4a16      	ldr	r2, [pc, #88]	; (800fa08 <TIM_OC3_SetConfig+0xe0>)
 800f9ae:	4293      	cmp	r3, r2
 800f9b0:	d003      	beq.n	800f9ba <TIM_OC3_SetConfig+0x92>
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	4a15      	ldr	r2, [pc, #84]	; (800fa0c <TIM_OC3_SetConfig+0xe4>)
 800f9b6:	4293      	cmp	r3, r2
 800f9b8:	d113      	bne.n	800f9e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f9c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f9c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f9ca:	683b      	ldr	r3, [r7, #0]
 800f9cc:	695b      	ldr	r3, [r3, #20]
 800f9ce:	011b      	lsls	r3, r3, #4
 800f9d0:	693a      	ldr	r2, [r7, #16]
 800f9d2:	4313      	orrs	r3, r2
 800f9d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	699b      	ldr	r3, [r3, #24]
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	693a      	ldr	r2, [r7, #16]
 800f9e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	68fa      	ldr	r2, [r7, #12]
 800f9ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f9ee:	683b      	ldr	r3, [r7, #0]
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	697a      	ldr	r2, [r7, #20]
 800f9fa:	621a      	str	r2, [r3, #32]
}
 800f9fc:	bf00      	nop
 800f9fe:	371c      	adds	r7, #28
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	40010000 	.word	0x40010000
 800fa0c:	40010400 	.word	0x40010400

0800fa10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b087      	sub	sp, #28
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6a1b      	ldr	r3, [r3, #32]
 800fa1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6a1b      	ldr	r3, [r3, #32]
 800fa2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	685b      	ldr	r3, [r3, #4]
 800fa30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fa46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	021b      	lsls	r3, r3, #8
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	689b      	ldr	r3, [r3, #8]
 800fa60:	031b      	lsls	r3, r3, #12
 800fa62:	693a      	ldr	r2, [r7, #16]
 800fa64:	4313      	orrs	r3, r2
 800fa66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4a12      	ldr	r2, [pc, #72]	; (800fab4 <TIM_OC4_SetConfig+0xa4>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d003      	beq.n	800fa78 <TIM_OC4_SetConfig+0x68>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	4a11      	ldr	r2, [pc, #68]	; (800fab8 <TIM_OC4_SetConfig+0xa8>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d109      	bne.n	800fa8c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fa7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	695b      	ldr	r3, [r3, #20]
 800fa84:	019b      	lsls	r3, r3, #6
 800fa86:	697a      	ldr	r2, [r7, #20]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	697a      	ldr	r2, [r7, #20]
 800fa90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	68fa      	ldr	r2, [r7, #12]
 800fa96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	685a      	ldr	r2, [r3, #4]
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	693a      	ldr	r2, [r7, #16]
 800faa4:	621a      	str	r2, [r3, #32]
}
 800faa6:	bf00      	nop
 800faa8:	371c      	adds	r7, #28
 800faaa:	46bd      	mov	sp, r7
 800faac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab0:	4770      	bx	lr
 800fab2:	bf00      	nop
 800fab4:	40010000 	.word	0x40010000
 800fab8:	40010400 	.word	0x40010400

0800fabc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b087      	sub	sp, #28
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	60f8      	str	r0, [r7, #12]
 800fac4:	60b9      	str	r1, [r7, #8]
 800fac6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	f003 031f 	and.w	r3, r3, #31
 800face:	2201      	movs	r2, #1
 800fad0:	fa02 f303 	lsl.w	r3, r2, r3
 800fad4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6a1a      	ldr	r2, [r3, #32]
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	43db      	mvns	r3, r3
 800fade:	401a      	ands	r2, r3
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	6a1a      	ldr	r2, [r3, #32]
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	f003 031f 	and.w	r3, r3, #31
 800faee:	6879      	ldr	r1, [r7, #4]
 800faf0:	fa01 f303 	lsl.w	r3, r1, r3
 800faf4:	431a      	orrs	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	621a      	str	r2, [r3, #32]
}
 800fafa:	bf00      	nop
 800fafc:	371c      	adds	r7, #28
 800fafe:	46bd      	mov	sp, r7
 800fb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb04:	4770      	bx	lr
	...

0800fb08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d101      	bne.n	800fb20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb1c:	2302      	movs	r3, #2
 800fb1e:	e05a      	b.n	800fbd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	2201      	movs	r2, #1
 800fb24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	2202      	movs	r2, #2
 800fb2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	689b      	ldr	r3, [r3, #8]
 800fb3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	68fa      	ldr	r2, [r7, #12]
 800fb4e:	4313      	orrs	r3, r2
 800fb50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	68fa      	ldr	r2, [r7, #12]
 800fb58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	4a21      	ldr	r2, [pc, #132]	; (800fbe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fb60:	4293      	cmp	r3, r2
 800fb62:	d022      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb6c:	d01d      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a1d      	ldr	r2, [pc, #116]	; (800fbe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d018      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	4a1b      	ldr	r2, [pc, #108]	; (800fbec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	d013      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a1a      	ldr	r2, [pc, #104]	; (800fbf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d00e      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a18      	ldr	r2, [pc, #96]	; (800fbf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fb92:	4293      	cmp	r3, r2
 800fb94:	d009      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4a17      	ldr	r2, [pc, #92]	; (800fbf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d004      	beq.n	800fbaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	4a15      	ldr	r2, [pc, #84]	; (800fbfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fba6:	4293      	cmp	r3, r2
 800fba8:	d10c      	bne.n	800fbc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fbb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	685b      	ldr	r3, [r3, #4]
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	4313      	orrs	r3, r2
 800fbba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	40010000 	.word	0x40010000
 800fbe8:	40000400 	.word	0x40000400
 800fbec:	40000800 	.word	0x40000800
 800fbf0:	40000c00 	.word	0x40000c00
 800fbf4:	40010400 	.word	0x40010400
 800fbf8:	40014000 	.word	0x40014000
 800fbfc:	40001800 	.word	0x40001800

0800fc00 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
 800fc08:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d101      	bne.n	800fc1c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fc18:	2302      	movs	r3, #2
 800fc1a:	e03d      	b.n	800fc98 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2201      	movs	r2, #1
 800fc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fc2a:	683b      	ldr	r3, [r7, #0]
 800fc2c:	68db      	ldr	r3, [r3, #12]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fc46:	683b      	ldr	r3, [r7, #0]
 800fc48:	685b      	ldr	r3, [r3, #4]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fc62:	683b      	ldr	r3, [r7, #0]
 800fc64:	691b      	ldr	r3, [r3, #16]
 800fc66:	4313      	orrs	r3, r2
 800fc68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fc70:	683b      	ldr	r3, [r7, #0]
 800fc72:	695b      	ldr	r3, [r3, #20]
 800fc74:	4313      	orrs	r3, r2
 800fc76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	69db      	ldr	r3, [r3, #28]
 800fc82:	4313      	orrs	r3, r2
 800fc84:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3714      	adds	r7, #20
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fcac:	bf00      	nop
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fcc0:	bf00      	nop
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b082      	sub	sp, #8
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d101      	bne.n	800fcde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e03f      	b.n	800fd5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800fce4:	b2db      	uxtb	r3, r3
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d106      	bne.n	800fcf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fcf2:	6878      	ldr	r0, [r7, #4]
 800fcf4:	f7f7 fcc4 	bl	8007680 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2224      	movs	r2, #36	; 0x24
 800fcfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	68da      	ldr	r2, [r3, #12]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800fd0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fd10:	6878      	ldr	r0, [r7, #4]
 800fd12:	f000 f829 	bl	800fd68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	691a      	ldr	r2, [r3, #16]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	695a      	ldr	r2, [r3, #20]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	68da      	ldr	r2, [r3, #12]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800fd44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2220      	movs	r2, #32
 800fd50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2220      	movs	r2, #32
 800fd58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800fd5c:	2300      	movs	r3, #0
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3708      	adds	r7, #8
 800fd62:	46bd      	mov	sp, r7
 800fd64:	bd80      	pop	{r7, pc}
	...

0800fd68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd6c:	b085      	sub	sp, #20
 800fd6e:	af00      	add	r7, sp, #0
 800fd70:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	691b      	ldr	r3, [r3, #16]
 800fd78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	68da      	ldr	r2, [r3, #12]
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	430a      	orrs	r2, r1
 800fd86:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	689a      	ldr	r2, [r3, #8]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	691b      	ldr	r3, [r3, #16]
 800fd90:	431a      	orrs	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	695b      	ldr	r3, [r3, #20]
 800fd96:	431a      	orrs	r2, r3
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	69db      	ldr	r3, [r3, #28]
 800fd9c:	4313      	orrs	r3, r2
 800fd9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	68db      	ldr	r3, [r3, #12]
 800fda6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800fdaa:	f023 030c 	bic.w	r3, r3, #12
 800fdae:	687a      	ldr	r2, [r7, #4]
 800fdb0:	6812      	ldr	r2, [r2, #0]
 800fdb2:	68f9      	ldr	r1, [r7, #12]
 800fdb4:	430b      	orrs	r3, r1
 800fdb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	699a      	ldr	r2, [r3, #24]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	430a      	orrs	r2, r1
 800fdcc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	69db      	ldr	r3, [r3, #28]
 800fdd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fdd6:	f040 818b 	bne.w	80100f0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	4ac1      	ldr	r2, [pc, #772]	; (80100e4 <UART_SetConfig+0x37c>)
 800fde0:	4293      	cmp	r3, r2
 800fde2:	d005      	beq.n	800fdf0 <UART_SetConfig+0x88>
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	4abf      	ldr	r2, [pc, #764]	; (80100e8 <UART_SetConfig+0x380>)
 800fdea:	4293      	cmp	r3, r2
 800fdec:	f040 80bd 	bne.w	800ff6a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800fdf0:	f7fc fbcc 	bl	800c58c <HAL_RCC_GetPCLK2Freq>
 800fdf4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	461d      	mov	r5, r3
 800fdfa:	f04f 0600 	mov.w	r6, #0
 800fdfe:	46a8      	mov	r8, r5
 800fe00:	46b1      	mov	r9, r6
 800fe02:	eb18 0308 	adds.w	r3, r8, r8
 800fe06:	eb49 0409 	adc.w	r4, r9, r9
 800fe0a:	4698      	mov	r8, r3
 800fe0c:	46a1      	mov	r9, r4
 800fe0e:	eb18 0805 	adds.w	r8, r8, r5
 800fe12:	eb49 0906 	adc.w	r9, r9, r6
 800fe16:	f04f 0100 	mov.w	r1, #0
 800fe1a:	f04f 0200 	mov.w	r2, #0
 800fe1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fe22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fe26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fe2a:	4688      	mov	r8, r1
 800fe2c:	4691      	mov	r9, r2
 800fe2e:	eb18 0005 	adds.w	r0, r8, r5
 800fe32:	eb49 0106 	adc.w	r1, r9, r6
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	461d      	mov	r5, r3
 800fe3c:	f04f 0600 	mov.w	r6, #0
 800fe40:	196b      	adds	r3, r5, r5
 800fe42:	eb46 0406 	adc.w	r4, r6, r6
 800fe46:	461a      	mov	r2, r3
 800fe48:	4623      	mov	r3, r4
 800fe4a:	f7f0 ff35 	bl	8000cb8 <__aeabi_uldivmod>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	460c      	mov	r4, r1
 800fe52:	461a      	mov	r2, r3
 800fe54:	4ba5      	ldr	r3, [pc, #660]	; (80100ec <UART_SetConfig+0x384>)
 800fe56:	fba3 2302 	umull	r2, r3, r3, r2
 800fe5a:	095b      	lsrs	r3, r3, #5
 800fe5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	461d      	mov	r5, r3
 800fe64:	f04f 0600 	mov.w	r6, #0
 800fe68:	46a9      	mov	r9, r5
 800fe6a:	46b2      	mov	sl, r6
 800fe6c:	eb19 0309 	adds.w	r3, r9, r9
 800fe70:	eb4a 040a 	adc.w	r4, sl, sl
 800fe74:	4699      	mov	r9, r3
 800fe76:	46a2      	mov	sl, r4
 800fe78:	eb19 0905 	adds.w	r9, r9, r5
 800fe7c:	eb4a 0a06 	adc.w	sl, sl, r6
 800fe80:	f04f 0100 	mov.w	r1, #0
 800fe84:	f04f 0200 	mov.w	r2, #0
 800fe88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe94:	4689      	mov	r9, r1
 800fe96:	4692      	mov	sl, r2
 800fe98:	eb19 0005 	adds.w	r0, r9, r5
 800fe9c:	eb4a 0106 	adc.w	r1, sl, r6
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	461d      	mov	r5, r3
 800fea6:	f04f 0600 	mov.w	r6, #0
 800feaa:	196b      	adds	r3, r5, r5
 800feac:	eb46 0406 	adc.w	r4, r6, r6
 800feb0:	461a      	mov	r2, r3
 800feb2:	4623      	mov	r3, r4
 800feb4:	f7f0 ff00 	bl	8000cb8 <__aeabi_uldivmod>
 800feb8:	4603      	mov	r3, r0
 800feba:	460c      	mov	r4, r1
 800febc:	461a      	mov	r2, r3
 800febe:	4b8b      	ldr	r3, [pc, #556]	; (80100ec <UART_SetConfig+0x384>)
 800fec0:	fba3 1302 	umull	r1, r3, r3, r2
 800fec4:	095b      	lsrs	r3, r3, #5
 800fec6:	2164      	movs	r1, #100	; 0x64
 800fec8:	fb01 f303 	mul.w	r3, r1, r3
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	00db      	lsls	r3, r3, #3
 800fed0:	3332      	adds	r3, #50	; 0x32
 800fed2:	4a86      	ldr	r2, [pc, #536]	; (80100ec <UART_SetConfig+0x384>)
 800fed4:	fba2 2303 	umull	r2, r3, r2, r3
 800fed8:	095b      	lsrs	r3, r3, #5
 800feda:	005b      	lsls	r3, r3, #1
 800fedc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fee0:	4498      	add	r8, r3
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	461d      	mov	r5, r3
 800fee6:	f04f 0600 	mov.w	r6, #0
 800feea:	46a9      	mov	r9, r5
 800feec:	46b2      	mov	sl, r6
 800feee:	eb19 0309 	adds.w	r3, r9, r9
 800fef2:	eb4a 040a 	adc.w	r4, sl, sl
 800fef6:	4699      	mov	r9, r3
 800fef8:	46a2      	mov	sl, r4
 800fefa:	eb19 0905 	adds.w	r9, r9, r5
 800fefe:	eb4a 0a06 	adc.w	sl, sl, r6
 800ff02:	f04f 0100 	mov.w	r1, #0
 800ff06:	f04f 0200 	mov.w	r2, #0
 800ff0a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ff0e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ff12:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ff16:	4689      	mov	r9, r1
 800ff18:	4692      	mov	sl, r2
 800ff1a:	eb19 0005 	adds.w	r0, r9, r5
 800ff1e:	eb4a 0106 	adc.w	r1, sl, r6
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	685b      	ldr	r3, [r3, #4]
 800ff26:	461d      	mov	r5, r3
 800ff28:	f04f 0600 	mov.w	r6, #0
 800ff2c:	196b      	adds	r3, r5, r5
 800ff2e:	eb46 0406 	adc.w	r4, r6, r6
 800ff32:	461a      	mov	r2, r3
 800ff34:	4623      	mov	r3, r4
 800ff36:	f7f0 febf 	bl	8000cb8 <__aeabi_uldivmod>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	460c      	mov	r4, r1
 800ff3e:	461a      	mov	r2, r3
 800ff40:	4b6a      	ldr	r3, [pc, #424]	; (80100ec <UART_SetConfig+0x384>)
 800ff42:	fba3 1302 	umull	r1, r3, r3, r2
 800ff46:	095b      	lsrs	r3, r3, #5
 800ff48:	2164      	movs	r1, #100	; 0x64
 800ff4a:	fb01 f303 	mul.w	r3, r1, r3
 800ff4e:	1ad3      	subs	r3, r2, r3
 800ff50:	00db      	lsls	r3, r3, #3
 800ff52:	3332      	adds	r3, #50	; 0x32
 800ff54:	4a65      	ldr	r2, [pc, #404]	; (80100ec <UART_SetConfig+0x384>)
 800ff56:	fba2 2303 	umull	r2, r3, r2, r3
 800ff5a:	095b      	lsrs	r3, r3, #5
 800ff5c:	f003 0207 	and.w	r2, r3, #7
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	4442      	add	r2, r8
 800ff66:	609a      	str	r2, [r3, #8]
 800ff68:	e26f      	b.n	801044a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ff6a:	f7fc fafb 	bl	800c564 <HAL_RCC_GetPCLK1Freq>
 800ff6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	461d      	mov	r5, r3
 800ff74:	f04f 0600 	mov.w	r6, #0
 800ff78:	46a8      	mov	r8, r5
 800ff7a:	46b1      	mov	r9, r6
 800ff7c:	eb18 0308 	adds.w	r3, r8, r8
 800ff80:	eb49 0409 	adc.w	r4, r9, r9
 800ff84:	4698      	mov	r8, r3
 800ff86:	46a1      	mov	r9, r4
 800ff88:	eb18 0805 	adds.w	r8, r8, r5
 800ff8c:	eb49 0906 	adc.w	r9, r9, r6
 800ff90:	f04f 0100 	mov.w	r1, #0
 800ff94:	f04f 0200 	mov.w	r2, #0
 800ff98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ff9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ffa0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ffa4:	4688      	mov	r8, r1
 800ffa6:	4691      	mov	r9, r2
 800ffa8:	eb18 0005 	adds.w	r0, r8, r5
 800ffac:	eb49 0106 	adc.w	r1, r9, r6
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	685b      	ldr	r3, [r3, #4]
 800ffb4:	461d      	mov	r5, r3
 800ffb6:	f04f 0600 	mov.w	r6, #0
 800ffba:	196b      	adds	r3, r5, r5
 800ffbc:	eb46 0406 	adc.w	r4, r6, r6
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	4623      	mov	r3, r4
 800ffc4:	f7f0 fe78 	bl	8000cb8 <__aeabi_uldivmod>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	460c      	mov	r4, r1
 800ffcc:	461a      	mov	r2, r3
 800ffce:	4b47      	ldr	r3, [pc, #284]	; (80100ec <UART_SetConfig+0x384>)
 800ffd0:	fba3 2302 	umull	r2, r3, r3, r2
 800ffd4:	095b      	lsrs	r3, r3, #5
 800ffd6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	461d      	mov	r5, r3
 800ffde:	f04f 0600 	mov.w	r6, #0
 800ffe2:	46a9      	mov	r9, r5
 800ffe4:	46b2      	mov	sl, r6
 800ffe6:	eb19 0309 	adds.w	r3, r9, r9
 800ffea:	eb4a 040a 	adc.w	r4, sl, sl
 800ffee:	4699      	mov	r9, r3
 800fff0:	46a2      	mov	sl, r4
 800fff2:	eb19 0905 	adds.w	r9, r9, r5
 800fff6:	eb4a 0a06 	adc.w	sl, sl, r6
 800fffa:	f04f 0100 	mov.w	r1, #0
 800fffe:	f04f 0200 	mov.w	r2, #0
 8010002:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010006:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801000a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801000e:	4689      	mov	r9, r1
 8010010:	4692      	mov	sl, r2
 8010012:	eb19 0005 	adds.w	r0, r9, r5
 8010016:	eb4a 0106 	adc.w	r1, sl, r6
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	461d      	mov	r5, r3
 8010020:	f04f 0600 	mov.w	r6, #0
 8010024:	196b      	adds	r3, r5, r5
 8010026:	eb46 0406 	adc.w	r4, r6, r6
 801002a:	461a      	mov	r2, r3
 801002c:	4623      	mov	r3, r4
 801002e:	f7f0 fe43 	bl	8000cb8 <__aeabi_uldivmod>
 8010032:	4603      	mov	r3, r0
 8010034:	460c      	mov	r4, r1
 8010036:	461a      	mov	r2, r3
 8010038:	4b2c      	ldr	r3, [pc, #176]	; (80100ec <UART_SetConfig+0x384>)
 801003a:	fba3 1302 	umull	r1, r3, r3, r2
 801003e:	095b      	lsrs	r3, r3, #5
 8010040:	2164      	movs	r1, #100	; 0x64
 8010042:	fb01 f303 	mul.w	r3, r1, r3
 8010046:	1ad3      	subs	r3, r2, r3
 8010048:	00db      	lsls	r3, r3, #3
 801004a:	3332      	adds	r3, #50	; 0x32
 801004c:	4a27      	ldr	r2, [pc, #156]	; (80100ec <UART_SetConfig+0x384>)
 801004e:	fba2 2303 	umull	r2, r3, r2, r3
 8010052:	095b      	lsrs	r3, r3, #5
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 801005a:	4498      	add	r8, r3
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	461d      	mov	r5, r3
 8010060:	f04f 0600 	mov.w	r6, #0
 8010064:	46a9      	mov	r9, r5
 8010066:	46b2      	mov	sl, r6
 8010068:	eb19 0309 	adds.w	r3, r9, r9
 801006c:	eb4a 040a 	adc.w	r4, sl, sl
 8010070:	4699      	mov	r9, r3
 8010072:	46a2      	mov	sl, r4
 8010074:	eb19 0905 	adds.w	r9, r9, r5
 8010078:	eb4a 0a06 	adc.w	sl, sl, r6
 801007c:	f04f 0100 	mov.w	r1, #0
 8010080:	f04f 0200 	mov.w	r2, #0
 8010084:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010088:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 801008c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010090:	4689      	mov	r9, r1
 8010092:	4692      	mov	sl, r2
 8010094:	eb19 0005 	adds.w	r0, r9, r5
 8010098:	eb4a 0106 	adc.w	r1, sl, r6
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	685b      	ldr	r3, [r3, #4]
 80100a0:	461d      	mov	r5, r3
 80100a2:	f04f 0600 	mov.w	r6, #0
 80100a6:	196b      	adds	r3, r5, r5
 80100a8:	eb46 0406 	adc.w	r4, r6, r6
 80100ac:	461a      	mov	r2, r3
 80100ae:	4623      	mov	r3, r4
 80100b0:	f7f0 fe02 	bl	8000cb8 <__aeabi_uldivmod>
 80100b4:	4603      	mov	r3, r0
 80100b6:	460c      	mov	r4, r1
 80100b8:	461a      	mov	r2, r3
 80100ba:	4b0c      	ldr	r3, [pc, #48]	; (80100ec <UART_SetConfig+0x384>)
 80100bc:	fba3 1302 	umull	r1, r3, r3, r2
 80100c0:	095b      	lsrs	r3, r3, #5
 80100c2:	2164      	movs	r1, #100	; 0x64
 80100c4:	fb01 f303 	mul.w	r3, r1, r3
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	00db      	lsls	r3, r3, #3
 80100cc:	3332      	adds	r3, #50	; 0x32
 80100ce:	4a07      	ldr	r2, [pc, #28]	; (80100ec <UART_SetConfig+0x384>)
 80100d0:	fba2 2303 	umull	r2, r3, r2, r3
 80100d4:	095b      	lsrs	r3, r3, #5
 80100d6:	f003 0207 	and.w	r2, r3, #7
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4442      	add	r2, r8
 80100e0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80100e2:	e1b2      	b.n	801044a <UART_SetConfig+0x6e2>
 80100e4:	40011000 	.word	0x40011000
 80100e8:	40011400 	.word	0x40011400
 80100ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4ad7      	ldr	r2, [pc, #860]	; (8010454 <UART_SetConfig+0x6ec>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d005      	beq.n	8010106 <UART_SetConfig+0x39e>
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4ad6      	ldr	r2, [pc, #856]	; (8010458 <UART_SetConfig+0x6f0>)
 8010100:	4293      	cmp	r3, r2
 8010102:	f040 80d1 	bne.w	80102a8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8010106:	f7fc fa41 	bl	800c58c <HAL_RCC_GetPCLK2Freq>
 801010a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	469a      	mov	sl, r3
 8010110:	f04f 0b00 	mov.w	fp, #0
 8010114:	46d0      	mov	r8, sl
 8010116:	46d9      	mov	r9, fp
 8010118:	eb18 0308 	adds.w	r3, r8, r8
 801011c:	eb49 0409 	adc.w	r4, r9, r9
 8010120:	4698      	mov	r8, r3
 8010122:	46a1      	mov	r9, r4
 8010124:	eb18 080a 	adds.w	r8, r8, sl
 8010128:	eb49 090b 	adc.w	r9, r9, fp
 801012c:	f04f 0100 	mov.w	r1, #0
 8010130:	f04f 0200 	mov.w	r2, #0
 8010134:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8010138:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 801013c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8010140:	4688      	mov	r8, r1
 8010142:	4691      	mov	r9, r2
 8010144:	eb1a 0508 	adds.w	r5, sl, r8
 8010148:	eb4b 0609 	adc.w	r6, fp, r9
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	4619      	mov	r1, r3
 8010152:	f04f 0200 	mov.w	r2, #0
 8010156:	f04f 0300 	mov.w	r3, #0
 801015a:	f04f 0400 	mov.w	r4, #0
 801015e:	0094      	lsls	r4, r2, #2
 8010160:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010164:	008b      	lsls	r3, r1, #2
 8010166:	461a      	mov	r2, r3
 8010168:	4623      	mov	r3, r4
 801016a:	4628      	mov	r0, r5
 801016c:	4631      	mov	r1, r6
 801016e:	f7f0 fda3 	bl	8000cb8 <__aeabi_uldivmod>
 8010172:	4603      	mov	r3, r0
 8010174:	460c      	mov	r4, r1
 8010176:	461a      	mov	r2, r3
 8010178:	4bb8      	ldr	r3, [pc, #736]	; (801045c <UART_SetConfig+0x6f4>)
 801017a:	fba3 2302 	umull	r2, r3, r3, r2
 801017e:	095b      	lsrs	r3, r3, #5
 8010180:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	469b      	mov	fp, r3
 8010188:	f04f 0c00 	mov.w	ip, #0
 801018c:	46d9      	mov	r9, fp
 801018e:	46e2      	mov	sl, ip
 8010190:	eb19 0309 	adds.w	r3, r9, r9
 8010194:	eb4a 040a 	adc.w	r4, sl, sl
 8010198:	4699      	mov	r9, r3
 801019a:	46a2      	mov	sl, r4
 801019c:	eb19 090b 	adds.w	r9, r9, fp
 80101a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80101a4:	f04f 0100 	mov.w	r1, #0
 80101a8:	f04f 0200 	mov.w	r2, #0
 80101ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80101b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80101b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80101b8:	4689      	mov	r9, r1
 80101ba:	4692      	mov	sl, r2
 80101bc:	eb1b 0509 	adds.w	r5, fp, r9
 80101c0:	eb4c 060a 	adc.w	r6, ip, sl
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	685b      	ldr	r3, [r3, #4]
 80101c8:	4619      	mov	r1, r3
 80101ca:	f04f 0200 	mov.w	r2, #0
 80101ce:	f04f 0300 	mov.w	r3, #0
 80101d2:	f04f 0400 	mov.w	r4, #0
 80101d6:	0094      	lsls	r4, r2, #2
 80101d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80101dc:	008b      	lsls	r3, r1, #2
 80101de:	461a      	mov	r2, r3
 80101e0:	4623      	mov	r3, r4
 80101e2:	4628      	mov	r0, r5
 80101e4:	4631      	mov	r1, r6
 80101e6:	f7f0 fd67 	bl	8000cb8 <__aeabi_uldivmod>
 80101ea:	4603      	mov	r3, r0
 80101ec:	460c      	mov	r4, r1
 80101ee:	461a      	mov	r2, r3
 80101f0:	4b9a      	ldr	r3, [pc, #616]	; (801045c <UART_SetConfig+0x6f4>)
 80101f2:	fba3 1302 	umull	r1, r3, r3, r2
 80101f6:	095b      	lsrs	r3, r3, #5
 80101f8:	2164      	movs	r1, #100	; 0x64
 80101fa:	fb01 f303 	mul.w	r3, r1, r3
 80101fe:	1ad3      	subs	r3, r2, r3
 8010200:	011b      	lsls	r3, r3, #4
 8010202:	3332      	adds	r3, #50	; 0x32
 8010204:	4a95      	ldr	r2, [pc, #596]	; (801045c <UART_SetConfig+0x6f4>)
 8010206:	fba2 2303 	umull	r2, r3, r2, r3
 801020a:	095b      	lsrs	r3, r3, #5
 801020c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010210:	4498      	add	r8, r3
 8010212:	68bb      	ldr	r3, [r7, #8]
 8010214:	469b      	mov	fp, r3
 8010216:	f04f 0c00 	mov.w	ip, #0
 801021a:	46d9      	mov	r9, fp
 801021c:	46e2      	mov	sl, ip
 801021e:	eb19 0309 	adds.w	r3, r9, r9
 8010222:	eb4a 040a 	adc.w	r4, sl, sl
 8010226:	4699      	mov	r9, r3
 8010228:	46a2      	mov	sl, r4
 801022a:	eb19 090b 	adds.w	r9, r9, fp
 801022e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010232:	f04f 0100 	mov.w	r1, #0
 8010236:	f04f 0200 	mov.w	r2, #0
 801023a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 801023e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8010246:	4689      	mov	r9, r1
 8010248:	4692      	mov	sl, r2
 801024a:	eb1b 0509 	adds.w	r5, fp, r9
 801024e:	eb4c 060a 	adc.w	r6, ip, sl
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	4619      	mov	r1, r3
 8010258:	f04f 0200 	mov.w	r2, #0
 801025c:	f04f 0300 	mov.w	r3, #0
 8010260:	f04f 0400 	mov.w	r4, #0
 8010264:	0094      	lsls	r4, r2, #2
 8010266:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801026a:	008b      	lsls	r3, r1, #2
 801026c:	461a      	mov	r2, r3
 801026e:	4623      	mov	r3, r4
 8010270:	4628      	mov	r0, r5
 8010272:	4631      	mov	r1, r6
 8010274:	f7f0 fd20 	bl	8000cb8 <__aeabi_uldivmod>
 8010278:	4603      	mov	r3, r0
 801027a:	460c      	mov	r4, r1
 801027c:	461a      	mov	r2, r3
 801027e:	4b77      	ldr	r3, [pc, #476]	; (801045c <UART_SetConfig+0x6f4>)
 8010280:	fba3 1302 	umull	r1, r3, r3, r2
 8010284:	095b      	lsrs	r3, r3, #5
 8010286:	2164      	movs	r1, #100	; 0x64
 8010288:	fb01 f303 	mul.w	r3, r1, r3
 801028c:	1ad3      	subs	r3, r2, r3
 801028e:	011b      	lsls	r3, r3, #4
 8010290:	3332      	adds	r3, #50	; 0x32
 8010292:	4a72      	ldr	r2, [pc, #456]	; (801045c <UART_SetConfig+0x6f4>)
 8010294:	fba2 2303 	umull	r2, r3, r2, r3
 8010298:	095b      	lsrs	r3, r3, #5
 801029a:	f003 020f 	and.w	r2, r3, #15
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	681b      	ldr	r3, [r3, #0]
 80102a2:	4442      	add	r2, r8
 80102a4:	609a      	str	r2, [r3, #8]
 80102a6:	e0d0      	b.n	801044a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80102a8:	f7fc f95c 	bl	800c564 <HAL_RCC_GetPCLK1Freq>
 80102ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	469a      	mov	sl, r3
 80102b2:	f04f 0b00 	mov.w	fp, #0
 80102b6:	46d0      	mov	r8, sl
 80102b8:	46d9      	mov	r9, fp
 80102ba:	eb18 0308 	adds.w	r3, r8, r8
 80102be:	eb49 0409 	adc.w	r4, r9, r9
 80102c2:	4698      	mov	r8, r3
 80102c4:	46a1      	mov	r9, r4
 80102c6:	eb18 080a 	adds.w	r8, r8, sl
 80102ca:	eb49 090b 	adc.w	r9, r9, fp
 80102ce:	f04f 0100 	mov.w	r1, #0
 80102d2:	f04f 0200 	mov.w	r2, #0
 80102d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80102da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80102de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80102e2:	4688      	mov	r8, r1
 80102e4:	4691      	mov	r9, r2
 80102e6:	eb1a 0508 	adds.w	r5, sl, r8
 80102ea:	eb4b 0609 	adc.w	r6, fp, r9
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	4619      	mov	r1, r3
 80102f4:	f04f 0200 	mov.w	r2, #0
 80102f8:	f04f 0300 	mov.w	r3, #0
 80102fc:	f04f 0400 	mov.w	r4, #0
 8010300:	0094      	lsls	r4, r2, #2
 8010302:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8010306:	008b      	lsls	r3, r1, #2
 8010308:	461a      	mov	r2, r3
 801030a:	4623      	mov	r3, r4
 801030c:	4628      	mov	r0, r5
 801030e:	4631      	mov	r1, r6
 8010310:	f7f0 fcd2 	bl	8000cb8 <__aeabi_uldivmod>
 8010314:	4603      	mov	r3, r0
 8010316:	460c      	mov	r4, r1
 8010318:	461a      	mov	r2, r3
 801031a:	4b50      	ldr	r3, [pc, #320]	; (801045c <UART_SetConfig+0x6f4>)
 801031c:	fba3 2302 	umull	r2, r3, r3, r2
 8010320:	095b      	lsrs	r3, r3, #5
 8010322:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	469b      	mov	fp, r3
 801032a:	f04f 0c00 	mov.w	ip, #0
 801032e:	46d9      	mov	r9, fp
 8010330:	46e2      	mov	sl, ip
 8010332:	eb19 0309 	adds.w	r3, r9, r9
 8010336:	eb4a 040a 	adc.w	r4, sl, sl
 801033a:	4699      	mov	r9, r3
 801033c:	46a2      	mov	sl, r4
 801033e:	eb19 090b 	adds.w	r9, r9, fp
 8010342:	eb4a 0a0c 	adc.w	sl, sl, ip
 8010346:	f04f 0100 	mov.w	r1, #0
 801034a:	f04f 0200 	mov.w	r2, #0
 801034e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8010356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 801035a:	4689      	mov	r9, r1
 801035c:	4692      	mov	sl, r2
 801035e:	eb1b 0509 	adds.w	r5, fp, r9
 8010362:	eb4c 060a 	adc.w	r6, ip, sl
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	4619      	mov	r1, r3
 801036c:	f04f 0200 	mov.w	r2, #0
 8010370:	f04f 0300 	mov.w	r3, #0
 8010374:	f04f 0400 	mov.w	r4, #0
 8010378:	0094      	lsls	r4, r2, #2
 801037a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801037e:	008b      	lsls	r3, r1, #2
 8010380:	461a      	mov	r2, r3
 8010382:	4623      	mov	r3, r4
 8010384:	4628      	mov	r0, r5
 8010386:	4631      	mov	r1, r6
 8010388:	f7f0 fc96 	bl	8000cb8 <__aeabi_uldivmod>
 801038c:	4603      	mov	r3, r0
 801038e:	460c      	mov	r4, r1
 8010390:	461a      	mov	r2, r3
 8010392:	4b32      	ldr	r3, [pc, #200]	; (801045c <UART_SetConfig+0x6f4>)
 8010394:	fba3 1302 	umull	r1, r3, r3, r2
 8010398:	095b      	lsrs	r3, r3, #5
 801039a:	2164      	movs	r1, #100	; 0x64
 801039c:	fb01 f303 	mul.w	r3, r1, r3
 80103a0:	1ad3      	subs	r3, r2, r3
 80103a2:	011b      	lsls	r3, r3, #4
 80103a4:	3332      	adds	r3, #50	; 0x32
 80103a6:	4a2d      	ldr	r2, [pc, #180]	; (801045c <UART_SetConfig+0x6f4>)
 80103a8:	fba2 2303 	umull	r2, r3, r2, r3
 80103ac:	095b      	lsrs	r3, r3, #5
 80103ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103b2:	4498      	add	r8, r3
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	469b      	mov	fp, r3
 80103b8:	f04f 0c00 	mov.w	ip, #0
 80103bc:	46d9      	mov	r9, fp
 80103be:	46e2      	mov	sl, ip
 80103c0:	eb19 0309 	adds.w	r3, r9, r9
 80103c4:	eb4a 040a 	adc.w	r4, sl, sl
 80103c8:	4699      	mov	r9, r3
 80103ca:	46a2      	mov	sl, r4
 80103cc:	eb19 090b 	adds.w	r9, r9, fp
 80103d0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80103d4:	f04f 0100 	mov.w	r1, #0
 80103d8:	f04f 0200 	mov.w	r2, #0
 80103dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80103e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80103e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80103e8:	4689      	mov	r9, r1
 80103ea:	4692      	mov	sl, r2
 80103ec:	eb1b 0509 	adds.w	r5, fp, r9
 80103f0:	eb4c 060a 	adc.w	r6, ip, sl
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	4619      	mov	r1, r3
 80103fa:	f04f 0200 	mov.w	r2, #0
 80103fe:	f04f 0300 	mov.w	r3, #0
 8010402:	f04f 0400 	mov.w	r4, #0
 8010406:	0094      	lsls	r4, r2, #2
 8010408:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 801040c:	008b      	lsls	r3, r1, #2
 801040e:	461a      	mov	r2, r3
 8010410:	4623      	mov	r3, r4
 8010412:	4628      	mov	r0, r5
 8010414:	4631      	mov	r1, r6
 8010416:	f7f0 fc4f 	bl	8000cb8 <__aeabi_uldivmod>
 801041a:	4603      	mov	r3, r0
 801041c:	460c      	mov	r4, r1
 801041e:	461a      	mov	r2, r3
 8010420:	4b0e      	ldr	r3, [pc, #56]	; (801045c <UART_SetConfig+0x6f4>)
 8010422:	fba3 1302 	umull	r1, r3, r3, r2
 8010426:	095b      	lsrs	r3, r3, #5
 8010428:	2164      	movs	r1, #100	; 0x64
 801042a:	fb01 f303 	mul.w	r3, r1, r3
 801042e:	1ad3      	subs	r3, r2, r3
 8010430:	011b      	lsls	r3, r3, #4
 8010432:	3332      	adds	r3, #50	; 0x32
 8010434:	4a09      	ldr	r2, [pc, #36]	; (801045c <UART_SetConfig+0x6f4>)
 8010436:	fba2 2303 	umull	r2, r3, r2, r3
 801043a:	095b      	lsrs	r3, r3, #5
 801043c:	f003 020f 	and.w	r2, r3, #15
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	4442      	add	r2, r8
 8010446:	609a      	str	r2, [r3, #8]
}
 8010448:	e7ff      	b.n	801044a <UART_SetConfig+0x6e2>
 801044a:	bf00      	nop
 801044c:	3714      	adds	r7, #20
 801044e:	46bd      	mov	sp, r7
 8010450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010454:	40011000 	.word	0x40011000
 8010458:	40011400 	.word	0x40011400
 801045c:	51eb851f 	.word	0x51eb851f

08010460 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8010460:	b084      	sub	sp, #16
 8010462:	b480      	push	{r7}
 8010464:	b085      	sub	sp, #20
 8010466:	af00      	add	r7, sp, #0
 8010468:	6078      	str	r0, [r7, #4]
 801046a:	f107 001c 	add.w	r0, r7, #28
 801046e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010472:	2300      	movs	r3, #0
 8010474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010476:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8010478:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 801047a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 801047e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010480:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8010482:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8010486:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 801048a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 801048c:	68fa      	ldr	r2, [r7, #12]
 801048e:	4313      	orrs	r3, r2
 8010490:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	685b      	ldr	r3, [r3, #4]
 8010496:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 801049a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801049e:	68fa      	ldr	r2, [r7, #12]
 80104a0:	431a      	orrs	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80104a6:	2300      	movs	r3, #0
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3714      	adds	r7, #20
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	b004      	add	sp, #16
 80104b4:	4770      	bx	lr

080104b6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80104b6:	b480      	push	{r7}
 80104b8:	b083      	sub	sp, #12
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80104c4:	4618      	mov	r0, r3
 80104c6:	370c      	adds	r7, #12
 80104c8:	46bd      	mov	sp, r7
 80104ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ce:	4770      	bx	lr

080104d0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80104d0:	b480      	push	{r7}
 80104d2:	b083      	sub	sp, #12
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80104e4:	2300      	movs	r3, #0
}
 80104e6:	4618      	mov	r0, r3
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80104f2:	b580      	push	{r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2203      	movs	r2, #3
 80104fe:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8010500:	2002      	movs	r0, #2
 8010502:	f7f9 fbdd 	bl	8009cc0 <HAL_Delay>
  
  return HAL_OK;
 8010506:	2300      	movs	r3, #0
}
 8010508:	4618      	mov	r0, r3
 801050a:	3708      	adds	r7, #8
 801050c:	46bd      	mov	sp, r7
 801050e:	bd80      	pop	{r7, pc}

08010510 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8010510:	b480      	push	{r7}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	f003 0303 	and.w	r3, r3, #3
}
 8010520:	4618      	mov	r0, r3
 8010522:	370c      	adds	r7, #12
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 801052c:	b480      	push	{r7}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010536:	2300      	movs	r3, #0
 8010538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 801053a:	683b      	ldr	r3, [r7, #0]
 801053c:	681a      	ldr	r2, [r3, #0]
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801054a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010550:	431a      	orrs	r2, r3
                       Command->CPSM);
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8010556:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010558:	68fa      	ldr	r2, [r7, #12]
 801055a:	4313      	orrs	r3, r2
 801055c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	68db      	ldr	r3, [r3, #12]
 8010562:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010566:	f023 030f 	bic.w	r3, r3, #15
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	431a      	orrs	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8010572:	2300      	movs	r3, #0
}
 8010574:	4618      	mov	r0, r3
 8010576:	3714      	adds	r7, #20
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr

08010580 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010580:	b480      	push	{r7}
 8010582:	b083      	sub	sp, #12
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	691b      	ldr	r3, [r3, #16]
 801058c:	b2db      	uxtb	r3, r3
}
 801058e:	4618      	mov	r0, r3
 8010590:	370c      	adds	r7, #12
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 801059a:	b480      	push	{r7}
 801059c:	b085      	sub	sp, #20
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	3314      	adds	r3, #20
 80105a8:	461a      	mov	r2, r3
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	4413      	add	r3, r2
 80105ae:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
}  
 80105b4:	4618      	mov	r0, r3
 80105b6:	3714      	adds	r7, #20
 80105b8:	46bd      	mov	sp, r7
 80105ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105be:	4770      	bx	lr

080105c0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80105ca:	2300      	movs	r3, #0
 80105cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80105ce:	683b      	ldr	r3, [r7, #0]
 80105d0:	681a      	ldr	r2, [r3, #0]
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	685a      	ldr	r2, [r3, #4]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80105e6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80105ec:	431a      	orrs	r2, r3
                       Data->DPSM);
 80105ee:	683b      	ldr	r3, [r7, #0]
 80105f0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80105f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80105f4:	68fa      	ldr	r2, [r7, #12]
 80105f6:	4313      	orrs	r3, r2
 80105f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105fe:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	431a      	orrs	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801060a:	2300      	movs	r3, #0

}
 801060c:	4618      	mov	r0, r3
 801060e:	3714      	adds	r7, #20
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b088      	sub	sp, #32
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8010626:	2310      	movs	r3, #16
 8010628:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801062a:	2340      	movs	r3, #64	; 0x40
 801062c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801062e:	2300      	movs	r3, #0
 8010630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010636:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010638:	f107 0308 	add.w	r3, r7, #8
 801063c:	4619      	mov	r1, r3
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f7ff ff74 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8010644:	f241 3288 	movw	r2, #5000	; 0x1388
 8010648:	2110      	movs	r1, #16
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f000 fa40 	bl	8010ad0 <SDMMC_GetCmdResp1>
 8010650:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010652:	69fb      	ldr	r3, [r7, #28]
}
 8010654:	4618      	mov	r0, r3
 8010656:	3720      	adds	r7, #32
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b088      	sub	sp, #32
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
 8010664:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801066a:	2311      	movs	r3, #17
 801066c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801066e:	2340      	movs	r3, #64	; 0x40
 8010670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010672:	2300      	movs	r3, #0
 8010674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801067a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801067c:	f107 0308 	add.w	r3, r7, #8
 8010680:	4619      	mov	r1, r3
 8010682:	6878      	ldr	r0, [r7, #4]
 8010684:	f7ff ff52 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010688:	f241 3288 	movw	r2, #5000	; 0x1388
 801068c:	2111      	movs	r1, #17
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f000 fa1e 	bl	8010ad0 <SDMMC_GetCmdResp1>
 8010694:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010696:	69fb      	ldr	r3, [r7, #28]
}
 8010698:	4618      	mov	r0, r3
 801069a:	3720      	adds	r7, #32
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}

080106a0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b088      	sub	sp, #32
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80106aa:	683b      	ldr	r3, [r7, #0]
 80106ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80106ae:	2312      	movs	r3, #18
 80106b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106b2:	2340      	movs	r3, #64	; 0x40
 80106b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106b6:	2300      	movs	r3, #0
 80106b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80106c0:	f107 0308 	add.w	r3, r7, #8
 80106c4:	4619      	mov	r1, r3
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff ff30 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80106cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80106d0:	2112      	movs	r1, #18
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f000 f9fc 	bl	8010ad0 <SDMMC_GetCmdResp1>
 80106d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80106da:	69fb      	ldr	r3, [r7, #28]
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3720      	adds	r7, #32
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b088      	sub	sp, #32
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
 80106ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80106f2:	2318      	movs	r3, #24
 80106f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80106f6:	2340      	movs	r3, #64	; 0x40
 80106f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80106fa:	2300      	movs	r3, #0
 80106fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80106fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010702:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010704:	f107 0308 	add.w	r3, r7, #8
 8010708:	4619      	mov	r1, r3
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7ff ff0e 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010710:	f241 3288 	movw	r2, #5000	; 0x1388
 8010714:	2118      	movs	r1, #24
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 f9da 	bl	8010ad0 <SDMMC_GetCmdResp1>
 801071c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801071e:	69fb      	ldr	r3, [r7, #28]
}
 8010720:	4618      	mov	r0, r3
 8010722:	3720      	adds	r7, #32
 8010724:	46bd      	mov	sp, r7
 8010726:	bd80      	pop	{r7, pc}

08010728 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b088      	sub	sp, #32
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010736:	2319      	movs	r3, #25
 8010738:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801073a:	2340      	movs	r3, #64	; 0x40
 801073c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801073e:	2300      	movs	r3, #0
 8010740:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010746:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010748:	f107 0308 	add.w	r3, r7, #8
 801074c:	4619      	mov	r1, r3
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f7ff feec 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010754:	f241 3288 	movw	r2, #5000	; 0x1388
 8010758:	2119      	movs	r1, #25
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 f9b8 	bl	8010ad0 <SDMMC_GetCmdResp1>
 8010760:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010762:	69fb      	ldr	r3, [r7, #28]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3720      	adds	r7, #32
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b088      	sub	sp, #32
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010774:	2300      	movs	r3, #0
 8010776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010778:	230c      	movs	r3, #12
 801077a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801077c:	2340      	movs	r3, #64	; 0x40
 801077e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010780:	2300      	movs	r3, #0
 8010782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801078a:	f107 0308 	add.w	r3, r7, #8
 801078e:	4619      	mov	r1, r3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f7ff fecb 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8010796:	4a05      	ldr	r2, [pc, #20]	; (80107ac <SDMMC_CmdStopTransfer+0x40>)
 8010798:	210c      	movs	r1, #12
 801079a:	6878      	ldr	r0, [r7, #4]
 801079c:	f000 f998 	bl	8010ad0 <SDMMC_GetCmdResp1>
 80107a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80107a2:	69fb      	ldr	r3, [r7, #28]
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3720      	adds	r7, #32
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}
 80107ac:	05f5e100 	.word	0x05f5e100

080107b0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b08a      	sub	sp, #40	; 0x28
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80107c0:	2307      	movs	r3, #7
 80107c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80107c4:	2340      	movs	r3, #64	; 0x40
 80107c6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80107c8:	2300      	movs	r3, #0
 80107ca:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80107cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80107d0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80107d2:	f107 0310 	add.w	r3, r7, #16
 80107d6:	4619      	mov	r1, r3
 80107d8:	68f8      	ldr	r0, [r7, #12]
 80107da:	f7ff fea7 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80107de:	f241 3288 	movw	r2, #5000	; 0x1388
 80107e2:	2107      	movs	r1, #7
 80107e4:	68f8      	ldr	r0, [r7, #12]
 80107e6:	f000 f973 	bl	8010ad0 <SDMMC_GetCmdResp1>
 80107ea:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80107ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3728      	adds	r7, #40	; 0x28
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}

080107f6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	b088      	sub	sp, #32
 80107fa:	af00      	add	r7, sp, #0
 80107fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80107fe:	2300      	movs	r3, #0
 8010800:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010802:	2300      	movs	r3, #0
 8010804:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010806:	2300      	movs	r3, #0
 8010808:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801080a:	2300      	movs	r3, #0
 801080c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801080e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010812:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010814:	f107 0308 	add.w	r3, r7, #8
 8010818:	4619      	mov	r1, r3
 801081a:	6878      	ldr	r0, [r7, #4]
 801081c:	f7ff fe86 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8010820:	6878      	ldr	r0, [r7, #4]
 8010822:	f000 f92d 	bl	8010a80 <SDMMC_GetCmdError>
 8010826:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010828:	69fb      	ldr	r3, [r7, #28]
}
 801082a:	4618      	mov	r0, r3
 801082c:	3720      	adds	r7, #32
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}

08010832 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8010832:	b580      	push	{r7, lr}
 8010834:	b088      	sub	sp, #32
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801083a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801083e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010840:	2308      	movs	r3, #8
 8010842:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010844:	2340      	movs	r3, #64	; 0x40
 8010846:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010848:	2300      	movs	r3, #0
 801084a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801084c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010850:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010852:	f107 0308 	add.w	r3, r7, #8
 8010856:	4619      	mov	r1, r3
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	f7ff fe67 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f000 fb16 	bl	8010e90 <SDMMC_GetCmdResp7>
 8010864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010866:	69fb      	ldr	r3, [r7, #28]
}
 8010868:	4618      	mov	r0, r3
 801086a:	3720      	adds	r7, #32
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b088      	sub	sp, #32
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
 8010878:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801087e:	2337      	movs	r3, #55	; 0x37
 8010880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010882:	2340      	movs	r3, #64	; 0x40
 8010884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010886:	2300      	movs	r3, #0
 8010888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801088e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010890:	f107 0308 	add.w	r3, r7, #8
 8010894:	4619      	mov	r1, r3
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7ff fe48 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 801089c:	f241 3288 	movw	r2, #5000	; 0x1388
 80108a0:	2137      	movs	r1, #55	; 0x37
 80108a2:	6878      	ldr	r0, [r7, #4]
 80108a4:	f000 f914 	bl	8010ad0 <SDMMC_GetCmdResp1>
 80108a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108aa:	69fb      	ldr	r3, [r7, #28]
}
 80108ac:	4618      	mov	r0, r3
 80108ae:	3720      	adds	r7, #32
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b088      	sub	sp, #32
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
 80108bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80108c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80108c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80108ca:	2329      	movs	r3, #41	; 0x29
 80108cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80108ce:	2340      	movs	r3, #64	; 0x40
 80108d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80108d2:	2300      	movs	r3, #0
 80108d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80108d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80108dc:	f107 0308 	add.w	r3, r7, #8
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7ff fe22 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 fa23 	bl	8010d34 <SDMMC_GetCmdResp3>
 80108ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80108f0:	69fb      	ldr	r3, [r7, #28]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3720      	adds	r7, #32
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b088      	sub	sp, #32
 80108fe:	af00      	add	r7, sp, #0
 8010900:	6078      	str	r0, [r7, #4]
 8010902:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010904:	683b      	ldr	r3, [r7, #0]
 8010906:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010908:	2306      	movs	r3, #6
 801090a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801090c:	2340      	movs	r3, #64	; 0x40
 801090e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010910:	2300      	movs	r3, #0
 8010912:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010918:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801091a:	f107 0308 	add.w	r3, r7, #8
 801091e:	4619      	mov	r1, r3
 8010920:	6878      	ldr	r0, [r7, #4]
 8010922:	f7ff fe03 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010926:	f241 3288 	movw	r2, #5000	; 0x1388
 801092a:	2106      	movs	r1, #6
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f000 f8cf 	bl	8010ad0 <SDMMC_GetCmdResp1>
 8010932:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010934:	69fb      	ldr	r3, [r7, #28]
}
 8010936:	4618      	mov	r0, r3
 8010938:	3720      	adds	r7, #32
 801093a:	46bd      	mov	sp, r7
 801093c:	bd80      	pop	{r7, pc}

0801093e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801093e:	b580      	push	{r7, lr}
 8010940:	b088      	sub	sp, #32
 8010942:	af00      	add	r7, sp, #0
 8010944:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010946:	2300      	movs	r3, #0
 8010948:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801094a:	2333      	movs	r3, #51	; 0x33
 801094c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801094e:	2340      	movs	r3, #64	; 0x40
 8010950:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010952:	2300      	movs	r3, #0
 8010954:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801095a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801095c:	f107 0308 	add.w	r3, r7, #8
 8010960:	4619      	mov	r1, r3
 8010962:	6878      	ldr	r0, [r7, #4]
 8010964:	f7ff fde2 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010968:	f241 3288 	movw	r2, #5000	; 0x1388
 801096c:	2133      	movs	r1, #51	; 0x33
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f8ae 	bl	8010ad0 <SDMMC_GetCmdResp1>
 8010974:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010976:	69fb      	ldr	r3, [r7, #28]
}
 8010978:	4618      	mov	r0, r3
 801097a:	3720      	adds	r7, #32
 801097c:	46bd      	mov	sp, r7
 801097e:	bd80      	pop	{r7, pc}

08010980 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b088      	sub	sp, #32
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010988:	2300      	movs	r3, #0
 801098a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 801098c:	2302      	movs	r3, #2
 801098e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010990:	23c0      	movs	r3, #192	; 0xc0
 8010992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010994:	2300      	movs	r3, #0
 8010996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010998:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801099c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801099e:	f107 0308 	add.w	r3, r7, #8
 80109a2:	4619      	mov	r1, r3
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f7ff fdc1 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	f000 f97c 	bl	8010ca8 <SDMMC_GetCmdResp2>
 80109b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109b2:	69fb      	ldr	r3, [r7, #28]
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3720      	adds	r7, #32
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}

080109bc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b088      	sub	sp, #32
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80109ca:	2309      	movs	r3, #9
 80109cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80109ce:	23c0      	movs	r3, #192	; 0xc0
 80109d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80109d2:	2300      	movs	r3, #0
 80109d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80109d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80109da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80109dc:	f107 0308 	add.w	r3, r7, #8
 80109e0:	4619      	mov	r1, r3
 80109e2:	6878      	ldr	r0, [r7, #4]
 80109e4:	f7ff fda2 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f000 f95d 	bl	8010ca8 <SDMMC_GetCmdResp2>
 80109ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109f0:	69fb      	ldr	r3, [r7, #28]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3720      	adds	r7, #32
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b088      	sub	sp, #32
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
 8010a02:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010a04:	2300      	movs	r3, #0
 8010a06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010a08:	2303      	movs	r3, #3
 8010a0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a0c:	2340      	movs	r3, #64	; 0x40
 8010a0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a10:	2300      	movs	r3, #0
 8010a12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a1a:	f107 0308 	add.w	r3, r7, #8
 8010a1e:	4619      	mov	r1, r3
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff fd83 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010a26:	683a      	ldr	r2, [r7, #0]
 8010a28:	2103      	movs	r1, #3
 8010a2a:	6878      	ldr	r0, [r7, #4]
 8010a2c:	f000 f9bc 	bl	8010da8 <SDMMC_GetCmdResp6>
 8010a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a32:	69fb      	ldr	r3, [r7, #28]
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	3720      	adds	r7, #32
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}

08010a3c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b088      	sub	sp, #32
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010a46:	683b      	ldr	r3, [r7, #0]
 8010a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010a4a:	230d      	movs	r3, #13
 8010a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010a4e:	2340      	movs	r3, #64	; 0x40
 8010a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010a52:	2300      	movs	r3, #0
 8010a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010a5c:	f107 0308 	add.w	r3, r7, #8
 8010a60:	4619      	mov	r1, r3
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff fd62 	bl	801052c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a6c:	210d      	movs	r1, #13
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f82e 	bl	8010ad0 <SDMMC_GetCmdResp1>
 8010a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a76:	69fb      	ldr	r3, [r7, #28]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3720      	adds	r7, #32
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010a80:	b490      	push	{r4, r7}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010a88:	4b0f      	ldr	r3, [pc, #60]	; (8010ac8 <SDMMC_GetCmdError+0x48>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	4a0f      	ldr	r2, [pc, #60]	; (8010acc <SDMMC_GetCmdError+0x4c>)
 8010a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8010a92:	0a5b      	lsrs	r3, r3, #9
 8010a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010a9c:	4623      	mov	r3, r4
 8010a9e:	1e5c      	subs	r4, r3, #1
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d102      	bne.n	8010aaa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010aa4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010aa8:	e009      	b.n	8010abe <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d0f2      	beq.n	8010a9c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	22c5      	movs	r2, #197	; 0xc5
 8010aba:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3708      	adds	r7, #8
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bc90      	pop	{r4, r7}
 8010ac6:	4770      	bx	lr
 8010ac8:	20000000 	.word	0x20000000
 8010acc:	10624dd3 	.word	0x10624dd3

08010ad0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010ad0:	b590      	push	{r4, r7, lr}
 8010ad2:	b087      	sub	sp, #28
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	60f8      	str	r0, [r7, #12]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010ade:	4b6f      	ldr	r3, [pc, #444]	; (8010c9c <SDMMC_GetCmdResp1+0x1cc>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	4a6f      	ldr	r2, [pc, #444]	; (8010ca0 <SDMMC_GetCmdResp1+0x1d0>)
 8010ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8010ae8:	0a5b      	lsrs	r3, r3, #9
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010af0:	4623      	mov	r3, r4
 8010af2:	1e5c      	subs	r4, r3, #1
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d102      	bne.n	8010afe <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010afc:	e0c9      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b02:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b04:	697b      	ldr	r3, [r7, #20]
 8010b06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d0f0      	beq.n	8010af0 <SDMMC_GetCmdResp1+0x20>
 8010b0e:	697b      	ldr	r3, [r7, #20]
 8010b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d1eb      	bne.n	8010af0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b1c:	f003 0304 	and.w	r3, r3, #4
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d004      	beq.n	8010b2e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2204      	movs	r2, #4
 8010b28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b2a:	2304      	movs	r3, #4
 8010b2c:	e0b1      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b32:	f003 0301 	and.w	r3, r3, #1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d004      	beq.n	8010b44 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	2201      	movs	r2, #1
 8010b3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b40:	2301      	movs	r3, #1
 8010b42:	e0a6      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	22c5      	movs	r2, #197	; 0xc5
 8010b48:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010b4a:	68f8      	ldr	r0, [r7, #12]
 8010b4c:	f7ff fd18 	bl	8010580 <SDIO_GetCommandResponse>
 8010b50:	4603      	mov	r3, r0
 8010b52:	461a      	mov	r2, r3
 8010b54:	7afb      	ldrb	r3, [r7, #11]
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d001      	beq.n	8010b5e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b5a:	2301      	movs	r3, #1
 8010b5c:	e099      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010b5e:	2100      	movs	r1, #0
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f7ff fd1a 	bl	801059a <SDIO_GetResponse>
 8010b66:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010b68:	693a      	ldr	r2, [r7, #16]
 8010b6a:	4b4e      	ldr	r3, [pc, #312]	; (8010ca4 <SDMMC_GetCmdResp1+0x1d4>)
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d101      	bne.n	8010b76 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8010b72:	2300      	movs	r3, #0
 8010b74:	e08d      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	da02      	bge.n	8010b82 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010b7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010b80:	e087      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010b82:	693b      	ldr	r3, [r7, #16]
 8010b84:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d001      	beq.n	8010b90 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010b8c:	2340      	movs	r3, #64	; 0x40
 8010b8e:	e080      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010b90:	693b      	ldr	r3, [r7, #16]
 8010b92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d001      	beq.n	8010b9e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010b9a:	2380      	movs	r3, #128	; 0x80
 8010b9c:	e079      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d002      	beq.n	8010bae <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bac:	e071      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d002      	beq.n	8010bbe <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010bbc:	e069      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d002      	beq.n	8010bce <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bcc:	e061      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010bd8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010bdc:	e059      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d002      	beq.n	8010bee <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010be8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bec:	e051      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010bee:	693b      	ldr	r3, [r7, #16]
 8010bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010bfc:	e049      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d002      	beq.n	8010c0e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010c08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010c0c:	e041      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d002      	beq.n	8010c1e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c1c:	e039      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d002      	beq.n	8010c2e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010c28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010c2c:	e031      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d002      	beq.n	8010c3e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010c38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010c3c:	e029      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d002      	beq.n	8010c4e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010c48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010c4c:	e021      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d002      	beq.n	8010c5e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010c58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010c5c:	e019      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d002      	beq.n	8010c6e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010c68:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010c6c:	e011      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010c78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010c7c:	e009      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	f003 0308 	and.w	r3, r3, #8
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d002      	beq.n	8010c8e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010c88:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010c8c:	e001      	b.n	8010c92 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010c92:	4618      	mov	r0, r3
 8010c94:	371c      	adds	r7, #28
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd90      	pop	{r4, r7, pc}
 8010c9a:	bf00      	nop
 8010c9c:	20000000 	.word	0x20000000
 8010ca0:	10624dd3 	.word	0x10624dd3
 8010ca4:	fdffe008 	.word	0xfdffe008

08010ca8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010ca8:	b490      	push	{r4, r7}
 8010caa:	b084      	sub	sp, #16
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010cb0:	4b1e      	ldr	r3, [pc, #120]	; (8010d2c <SDMMC_GetCmdResp2+0x84>)
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a1e      	ldr	r2, [pc, #120]	; (8010d30 <SDMMC_GetCmdResp2+0x88>)
 8010cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010cba:	0a5b      	lsrs	r3, r3, #9
 8010cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010cc0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010cc4:	4623      	mov	r3, r4
 8010cc6:	1e5c      	subs	r4, r3, #1
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d102      	bne.n	8010cd2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010cd0:	e026      	b.n	8010d20 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cd6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d0f0      	beq.n	8010cc4 <SDMMC_GetCmdResp2+0x1c>
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d1eb      	bne.n	8010cc4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010cf0:	f003 0304 	and.w	r3, r3, #4
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d004      	beq.n	8010d02 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2204      	movs	r2, #4
 8010cfc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010cfe:	2304      	movs	r3, #4
 8010d00:	e00e      	b.n	8010d20 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d004      	beq.n	8010d18 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	2201      	movs	r2, #1
 8010d12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010d14:	2301      	movs	r3, #1
 8010d16:	e003      	b.n	8010d20 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	22c5      	movs	r2, #197	; 0xc5
 8010d1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8010d1e:	2300      	movs	r3, #0
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3710      	adds	r7, #16
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bc90      	pop	{r4, r7}
 8010d28:	4770      	bx	lr
 8010d2a:	bf00      	nop
 8010d2c:	20000000 	.word	0x20000000
 8010d30:	10624dd3 	.word	0x10624dd3

08010d34 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010d34:	b490      	push	{r4, r7}
 8010d36:	b084      	sub	sp, #16
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010d3c:	4b18      	ldr	r3, [pc, #96]	; (8010da0 <SDMMC_GetCmdResp3+0x6c>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a18      	ldr	r2, [pc, #96]	; (8010da4 <SDMMC_GetCmdResp3+0x70>)
 8010d42:	fba2 2303 	umull	r2, r3, r2, r3
 8010d46:	0a5b      	lsrs	r3, r3, #9
 8010d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8010d4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010d50:	4623      	mov	r3, r4
 8010d52:	1e5c      	subs	r4, r3, #1
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d102      	bne.n	8010d5e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010d58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010d5c:	e01b      	b.n	8010d96 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d62:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d0f0      	beq.n	8010d50 <SDMMC_GetCmdResp3+0x1c>
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1eb      	bne.n	8010d50 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d004      	beq.n	8010d8e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	2204      	movs	r2, #4
 8010d88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d8a:	2304      	movs	r3, #4
 8010d8c:	e003      	b.n	8010d96 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	22c5      	movs	r2, #197	; 0xc5
 8010d92:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010d94:	2300      	movs	r3, #0
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bc90      	pop	{r4, r7}
 8010d9e:	4770      	bx	lr
 8010da0:	20000000 	.word	0x20000000
 8010da4:	10624dd3 	.word	0x10624dd3

08010da8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010da8:	b590      	push	{r4, r7, lr}
 8010daa:	b087      	sub	sp, #28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	60f8      	str	r0, [r7, #12]
 8010db0:	460b      	mov	r3, r1
 8010db2:	607a      	str	r2, [r7, #4]
 8010db4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010db6:	4b34      	ldr	r3, [pc, #208]	; (8010e88 <SDMMC_GetCmdResp6+0xe0>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a34      	ldr	r2, [pc, #208]	; (8010e8c <SDMMC_GetCmdResp6+0xe4>)
 8010dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8010dc0:	0a5b      	lsrs	r3, r3, #9
 8010dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dc6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010dca:	4623      	mov	r3, r4
 8010dcc:	1e5c      	subs	r4, r3, #1
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d102      	bne.n	8010dd8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010dd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010dd6:	e052      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ddc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d0f0      	beq.n	8010dca <SDMMC_GetCmdResp6+0x22>
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d1eb      	bne.n	8010dca <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010df6:	f003 0304 	and.w	r3, r3, #4
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d004      	beq.n	8010e08 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2204      	movs	r2, #4
 8010e02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e04:	2304      	movs	r3, #4
 8010e06:	e03a      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e0c:	f003 0301 	and.w	r3, r3, #1
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d004      	beq.n	8010e1e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	2201      	movs	r2, #1
 8010e18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e1a:	2301      	movs	r3, #1
 8010e1c:	e02f      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010e1e:	68f8      	ldr	r0, [r7, #12]
 8010e20:	f7ff fbae 	bl	8010580 <SDIO_GetCommandResponse>
 8010e24:	4603      	mov	r3, r0
 8010e26:	461a      	mov	r2, r3
 8010e28:	7afb      	ldrb	r3, [r7, #11]
 8010e2a:	4293      	cmp	r3, r2
 8010e2c:	d001      	beq.n	8010e32 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e2e:	2301      	movs	r3, #1
 8010e30:	e025      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	22c5      	movs	r2, #197	; 0xc5
 8010e36:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010e38:	2100      	movs	r1, #0
 8010e3a:	68f8      	ldr	r0, [r7, #12]
 8010e3c:	f7ff fbad 	bl	801059a <SDIO_GetResponse>
 8010e40:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d106      	bne.n	8010e5a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010e4c:	693b      	ldr	r3, [r7, #16]
 8010e4e:	0c1b      	lsrs	r3, r3, #16
 8010e50:	b29a      	uxth	r2, r3
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010e56:	2300      	movs	r3, #0
 8010e58:	e011      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d002      	beq.n	8010e6a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e68:	e009      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d002      	beq.n	8010e7a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e78:	e001      	b.n	8010e7e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	371c      	adds	r7, #28
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd90      	pop	{r4, r7, pc}
 8010e86:	bf00      	nop
 8010e88:	20000000 	.word	0x20000000
 8010e8c:	10624dd3 	.word	0x10624dd3

08010e90 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010e90:	b490      	push	{r4, r7}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010e98:	4b21      	ldr	r3, [pc, #132]	; (8010f20 <SDMMC_GetCmdResp7+0x90>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	4a21      	ldr	r2, [pc, #132]	; (8010f24 <SDMMC_GetCmdResp7+0x94>)
 8010e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ea2:	0a5b      	lsrs	r3, r3, #9
 8010ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ea8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010eac:	4623      	mov	r3, r4
 8010eae:	1e5c      	subs	r4, r3, #1
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d102      	bne.n	8010eba <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010eb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010eb8:	e02c      	b.n	8010f14 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ebe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d0f0      	beq.n	8010eac <SDMMC_GetCmdResp7+0x1c>
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d1eb      	bne.n	8010eac <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed8:	f003 0304 	and.w	r3, r3, #4
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d004      	beq.n	8010eea <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2204      	movs	r2, #4
 8010ee4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ee6:	2304      	movs	r3, #4
 8010ee8:	e014      	b.n	8010f14 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eee:	f003 0301 	and.w	r3, r3, #1
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d004      	beq.n	8010f00 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2201      	movs	r2, #1
 8010efa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010efc:	2301      	movs	r3, #1
 8010efe:	e009      	b.n	8010f14 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d002      	beq.n	8010f12 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	2240      	movs	r2, #64	; 0x40
 8010f10:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8010f12:	2300      	movs	r3, #0
  
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bc90      	pop	{r4, r7}
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	20000000 	.word	0x20000000
 8010f24:	10624dd3 	.word	0x10624dd3

08010f28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f2c:	4904      	ldr	r1, [pc, #16]	; (8010f40 <MX_FATFS_Init+0x18>)
 8010f2e:	4805      	ldr	r0, [pc, #20]	; (8010f44 <MX_FATFS_Init+0x1c>)
 8010f30:	f003 fb9c 	bl	801466c <FATFS_LinkDriver>
 8010f34:	4603      	mov	r3, r0
 8010f36:	461a      	mov	r2, r3
 8010f38:	4b03      	ldr	r3, [pc, #12]	; (8010f48 <MX_FATFS_Init+0x20>)
 8010f3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010f3c:	bf00      	nop
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20044c28 	.word	0x20044c28
 8010f44:	08019fc0 	.word	0x08019fc0
 8010f48:	20044c24 	.word	0x20044c24

08010f4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b082      	sub	sp, #8
 8010f50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010f56:	f000 f896 	bl	8011086 <BSP_SD_IsDetected>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b01      	cmp	r3, #1
 8010f5e:	d001      	beq.n	8010f64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010f60:	2301      	movs	r3, #1
 8010f62:	e012      	b.n	8010f8a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010f64:	480b      	ldr	r0, [pc, #44]	; (8010f94 <BSP_SD_Init+0x48>)
 8010f66:	f7fb ffa5 	bl	800ceb4 <HAL_SD_Init>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010f6e:	79fb      	ldrb	r3, [r7, #7]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d109      	bne.n	8010f88 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010f78:	4806      	ldr	r0, [pc, #24]	; (8010f94 <BSP_SD_Init+0x48>)
 8010f7a:	f7fc fd4f 	bl	800da1c <HAL_SD_ConfigWideBusOperation>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010f84:	2301      	movs	r3, #1
 8010f86:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010f88:	79fb      	ldrb	r3, [r7, #7]
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3708      	adds	r7, #8
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	20044a24 	.word	0x20044a24

08010f98 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	68ba      	ldr	r2, [r7, #8]
 8010fac:	68f9      	ldr	r1, [r7, #12]
 8010fae:	4806      	ldr	r0, [pc, #24]	; (8010fc8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010fb0:	f7fc f810 	bl	800cfd4 <HAL_SD_ReadBlocks_DMA>
 8010fb4:	4603      	mov	r3, r0
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010fba:	2301      	movs	r3, #1
 8010fbc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	3718      	adds	r7, #24
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	bd80      	pop	{r7, pc}
 8010fc8:	20044a24 	.word	0x20044a24

08010fcc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b086      	sub	sp, #24
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	60f8      	str	r0, [r7, #12]
 8010fd4:	60b9      	str	r1, [r7, #8]
 8010fd6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	68ba      	ldr	r2, [r7, #8]
 8010fe0:	68f9      	ldr	r1, [r7, #12]
 8010fe2:	4806      	ldr	r0, [pc, #24]	; (8010ffc <BSP_SD_WriteBlocks_DMA+0x30>)
 8010fe4:	f7fc f8de 	bl	800d1a4 <HAL_SD_WriteBlocks_DMA>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d001      	beq.n	8010ff2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010fee:	2301      	movs	r3, #1
 8010ff0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3718      	adds	r7, #24
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	bd80      	pop	{r7, pc}
 8010ffc:	20044a24 	.word	0x20044a24

08011000 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011004:	4805      	ldr	r0, [pc, #20]	; (801101c <BSP_SD_GetCardState+0x1c>)
 8011006:	f7fc fd85 	bl	800db14 <HAL_SD_GetCardState>
 801100a:	4603      	mov	r3, r0
 801100c:	2b04      	cmp	r3, #4
 801100e:	bf14      	ite	ne
 8011010:	2301      	movne	r3, #1
 8011012:	2300      	moveq	r3, #0
 8011014:	b2db      	uxtb	r3, r3
}
 8011016:	4618      	mov	r0, r3
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	20044a24 	.word	0x20044a24

08011020 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011028:	6879      	ldr	r1, [r7, #4]
 801102a:	4803      	ldr	r0, [pc, #12]	; (8011038 <BSP_SD_GetCardInfo+0x18>)
 801102c:	f7fc fcca 	bl	800d9c4 <HAL_SD_GetCardInfo>
}
 8011030:	bf00      	nop
 8011032:	3708      	adds	r7, #8
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	20044a24 	.word	0x20044a24

0801103c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b082      	sub	sp, #8
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011044:	f000 f818 	bl	8011078 <BSP_SD_AbortCallback>
}
 8011048:	bf00      	nop
 801104a:	3708      	adds	r7, #8
 801104c:	46bd      	mov	sp, r7
 801104e:	bd80      	pop	{r7, pc}

08011050 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011058:	f000 f9a8 	bl	80113ac <BSP_SD_WriteCpltCallback>
}
 801105c:	bf00      	nop
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801106c:	f000 f9aa 	bl	80113c4 <BSP_SD_ReadCpltCallback>
}
 8011070:	bf00      	nop
 8011072:	3708      	adds	r7, #8
 8011074:	46bd      	mov	sp, r7
 8011076:	bd80      	pop	{r7, pc}

08011078 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011078:	b480      	push	{r7}
 801107a:	af00      	add	r7, sp, #0

}
 801107c:	bf00      	nop
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr

08011086 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011086:	b580      	push	{r7, lr}
 8011088:	b082      	sub	sp, #8
 801108a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801108c:	2301      	movs	r3, #1
 801108e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8011090:	f000 f80c 	bl	80110ac <BSP_PlatformIsDetected>
 8011094:	4603      	mov	r3, r0
 8011096:	2b00      	cmp	r3, #0
 8011098:	d101      	bne.n	801109e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801109a:	2300      	movs	r3, #0
 801109c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	b2db      	uxtb	r3, r3
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	3708      	adds	r7, #8
 80110a6:	46bd      	mov	sp, r7
 80110a8:	bd80      	pop	{r7, pc}
	...

080110ac <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80110b2:	2301      	movs	r3, #1
 80110b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80110ba:	4806      	ldr	r0, [pc, #24]	; (80110d4 <BSP_PlatformIsDetected+0x28>)
 80110bc:	f7fa f87e 	bl	800b1bc <HAL_GPIO_ReadPin>
 80110c0:	4603      	mov	r3, r0
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d001      	beq.n	80110ca <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80110c6:	2300      	movs	r3, #0
 80110c8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80110ca:	79fb      	ldrb	r3, [r7, #7]
}
 80110cc:	4618      	mov	r0, r3
 80110ce:	3708      	adds	r7, #8
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	40020000 	.word	0x40020000

080110d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b084      	sub	sp, #16
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80110e0:	f7f8 fde2 	bl	8009ca8 <HAL_GetTick>
 80110e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80110e6:	e006      	b.n	80110f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80110e8:	f7ff ff8a 	bl	8011000 <BSP_SD_GetCardState>
 80110ec:	4603      	mov	r3, r0
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d101      	bne.n	80110f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80110f2:	2300      	movs	r3, #0
 80110f4:	e009      	b.n	801110a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80110f6:	f7f8 fdd7 	bl	8009ca8 <HAL_GetTick>
 80110fa:	4602      	mov	r2, r0
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	1ad3      	subs	r3, r2, r3
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	429a      	cmp	r2, r3
 8011104:	d8f0      	bhi.n	80110e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011106:	f04f 33ff 	mov.w	r3, #4294967295
}
 801110a:	4618      	mov	r0, r3
 801110c:	3710      	adds	r7, #16
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
	...

08011114 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	4603      	mov	r3, r0
 801111c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801111e:	4b0b      	ldr	r3, [pc, #44]	; (801114c <SD_CheckStatus+0x38>)
 8011120:	2201      	movs	r2, #1
 8011122:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011124:	f7ff ff6c 	bl	8011000 <BSP_SD_GetCardState>
 8011128:	4603      	mov	r3, r0
 801112a:	2b00      	cmp	r3, #0
 801112c:	d107      	bne.n	801113e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801112e:	4b07      	ldr	r3, [pc, #28]	; (801114c <SD_CheckStatus+0x38>)
 8011130:	781b      	ldrb	r3, [r3, #0]
 8011132:	b2db      	uxtb	r3, r3
 8011134:	f023 0301 	bic.w	r3, r3, #1
 8011138:	b2da      	uxtb	r2, r3
 801113a:	4b04      	ldr	r3, [pc, #16]	; (801114c <SD_CheckStatus+0x38>)
 801113c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801113e:	4b03      	ldr	r3, [pc, #12]	; (801114c <SD_CheckStatus+0x38>)
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	b2db      	uxtb	r3, r3
}
 8011144:	4618      	mov	r0, r3
 8011146:	3708      	adds	r7, #8
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20000009 	.word	0x20000009

08011150 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011150:	b580      	push	{r7, lr}
 8011152:	b082      	sub	sp, #8
 8011154:	af00      	add	r7, sp, #0
 8011156:	4603      	mov	r3, r0
 8011158:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801115a:	f7ff fef7 	bl	8010f4c <BSP_SD_Init>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	d107      	bne.n	8011174 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011164:	79fb      	ldrb	r3, [r7, #7]
 8011166:	4618      	mov	r0, r3
 8011168:	f7ff ffd4 	bl	8011114 <SD_CheckStatus>
 801116c:	4603      	mov	r3, r0
 801116e:	461a      	mov	r2, r3
 8011170:	4b04      	ldr	r3, [pc, #16]	; (8011184 <SD_initialize+0x34>)
 8011172:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011174:	4b03      	ldr	r3, [pc, #12]	; (8011184 <SD_initialize+0x34>)
 8011176:	781b      	ldrb	r3, [r3, #0]
 8011178:	b2db      	uxtb	r3, r3
}
 801117a:	4618      	mov	r0, r3
 801117c:	3708      	adds	r7, #8
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}
 8011182:	bf00      	nop
 8011184:	20000009 	.word	0x20000009

08011188 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	4603      	mov	r3, r0
 8011190:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8011192:	79fb      	ldrb	r3, [r7, #7]
 8011194:	4618      	mov	r0, r3
 8011196:	f7ff ffbd 	bl	8011114 <SD_CheckStatus>
 801119a:	4603      	mov	r3, r0
}
 801119c:	4618      	mov	r0, r3
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60b9      	str	r1, [r7, #8]
 80111ac:	607a      	str	r2, [r7, #4]
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	4603      	mov	r3, r0
 80111b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111b4:	2301      	movs	r3, #1
 80111b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80111b8:	f247 5030 	movw	r0, #30000	; 0x7530
 80111bc:	f7ff ff8c 	bl	80110d8 <SD_CheckStatusWithTimeout>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	da01      	bge.n	80111ca <SD_read+0x26>
  {
    return res;
 80111c6:	7dfb      	ldrb	r3, [r7, #23]
 80111c8:	e03b      	b.n	8011242 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80111ca:	683a      	ldr	r2, [r7, #0]
 80111cc:	6879      	ldr	r1, [r7, #4]
 80111ce:	68b8      	ldr	r0, [r7, #8]
 80111d0:	f7ff fee2 	bl	8010f98 <BSP_SD_ReadBlocks_DMA>
 80111d4:	4603      	mov	r3, r0
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d132      	bne.n	8011240 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80111da:	4b1c      	ldr	r3, [pc, #112]	; (801124c <SD_read+0xa8>)
 80111dc:	2200      	movs	r2, #0
 80111de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80111e0:	f7f8 fd62 	bl	8009ca8 <HAL_GetTick>
 80111e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80111e6:	bf00      	nop
 80111e8:	4b18      	ldr	r3, [pc, #96]	; (801124c <SD_read+0xa8>)
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d108      	bne.n	8011202 <SD_read+0x5e>
 80111f0:	f7f8 fd5a 	bl	8009ca8 <HAL_GetTick>
 80111f4:	4602      	mov	r2, r0
 80111f6:	693b      	ldr	r3, [r7, #16]
 80111f8:	1ad3      	subs	r3, r2, r3
 80111fa:	f247 522f 	movw	r2, #29999	; 0x752f
 80111fe:	4293      	cmp	r3, r2
 8011200:	d9f2      	bls.n	80111e8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8011202:	4b12      	ldr	r3, [pc, #72]	; (801124c <SD_read+0xa8>)
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d102      	bne.n	8011210 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801120a:	2301      	movs	r3, #1
 801120c:	75fb      	strb	r3, [r7, #23]
 801120e:	e017      	b.n	8011240 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011210:	4b0e      	ldr	r3, [pc, #56]	; (801124c <SD_read+0xa8>)
 8011212:	2200      	movs	r2, #0
 8011214:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011216:	f7f8 fd47 	bl	8009ca8 <HAL_GetTick>
 801121a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801121c:	e007      	b.n	801122e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801121e:	f7ff feef 	bl	8011000 <BSP_SD_GetCardState>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <SD_read+0x8a>
          {
            res = RES_OK;
 8011228:	2300      	movs	r3, #0
 801122a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801122c:	e008      	b.n	8011240 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801122e:	f7f8 fd3b 	bl	8009ca8 <HAL_GetTick>
 8011232:	4602      	mov	r2, r0
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	1ad3      	subs	r3, r2, r3
 8011238:	f247 522f 	movw	r2, #29999	; 0x752f
 801123c:	4293      	cmp	r3, r2
 801123e:	d9ee      	bls.n	801121e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011240:	7dfb      	ldrb	r3, [r7, #23]
}
 8011242:	4618      	mov	r0, r3
 8011244:	3718      	adds	r7, #24
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
 801124a:	bf00      	nop
 801124c:	200422c0 	.word	0x200422c0

08011250 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b086      	sub	sp, #24
 8011254:	af00      	add	r7, sp, #0
 8011256:	60b9      	str	r1, [r7, #8]
 8011258:	607a      	str	r2, [r7, #4]
 801125a:	603b      	str	r3, [r7, #0]
 801125c:	4603      	mov	r3, r0
 801125e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011260:	2301      	movs	r3, #1
 8011262:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011264:	4b24      	ldr	r3, [pc, #144]	; (80112f8 <SD_write+0xa8>)
 8011266:	2200      	movs	r2, #0
 8011268:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801126a:	f247 5030 	movw	r0, #30000	; 0x7530
 801126e:	f7ff ff33 	bl	80110d8 <SD_CheckStatusWithTimeout>
 8011272:	4603      	mov	r3, r0
 8011274:	2b00      	cmp	r3, #0
 8011276:	da01      	bge.n	801127c <SD_write+0x2c>
  {
    return res;
 8011278:	7dfb      	ldrb	r3, [r7, #23]
 801127a:	e038      	b.n	80112ee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801127c:	683a      	ldr	r2, [r7, #0]
 801127e:	6879      	ldr	r1, [r7, #4]
 8011280:	68b8      	ldr	r0, [r7, #8]
 8011282:	f7ff fea3 	bl	8010fcc <BSP_SD_WriteBlocks_DMA>
 8011286:	4603      	mov	r3, r0
 8011288:	2b00      	cmp	r3, #0
 801128a:	d12f      	bne.n	80112ec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801128c:	f7f8 fd0c 	bl	8009ca8 <HAL_GetTick>
 8011290:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011292:	bf00      	nop
 8011294:	4b18      	ldr	r3, [pc, #96]	; (80112f8 <SD_write+0xa8>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d108      	bne.n	80112ae <SD_write+0x5e>
 801129c:	f7f8 fd04 	bl	8009ca8 <HAL_GetTick>
 80112a0:	4602      	mov	r2, r0
 80112a2:	693b      	ldr	r3, [r7, #16]
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	f247 522f 	movw	r2, #29999	; 0x752f
 80112aa:	4293      	cmp	r3, r2
 80112ac:	d9f2      	bls.n	8011294 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80112ae:	4b12      	ldr	r3, [pc, #72]	; (80112f8 <SD_write+0xa8>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d102      	bne.n	80112bc <SD_write+0x6c>
      {
        res = RES_ERROR;
 80112b6:	2301      	movs	r3, #1
 80112b8:	75fb      	strb	r3, [r7, #23]
 80112ba:	e017      	b.n	80112ec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80112bc:	4b0e      	ldr	r3, [pc, #56]	; (80112f8 <SD_write+0xa8>)
 80112be:	2200      	movs	r2, #0
 80112c0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80112c2:	f7f8 fcf1 	bl	8009ca8 <HAL_GetTick>
 80112c6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112c8:	e007      	b.n	80112da <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112ca:	f7ff fe99 	bl	8011000 <BSP_SD_GetCardState>
 80112ce:	4603      	mov	r3, r0
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d102      	bne.n	80112da <SD_write+0x8a>
          {
            res = RES_OK;
 80112d4:	2300      	movs	r3, #0
 80112d6:	75fb      	strb	r3, [r7, #23]
            break;
 80112d8:	e008      	b.n	80112ec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80112da:	f7f8 fce5 	bl	8009ca8 <HAL_GetTick>
 80112de:	4602      	mov	r2, r0
 80112e0:	693b      	ldr	r3, [r7, #16]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	f247 522f 	movw	r2, #29999	; 0x752f
 80112e8:	4293      	cmp	r3, r2
 80112ea:	d9ee      	bls.n	80112ca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80112ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3718      	adds	r7, #24
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	200422bc 	.word	0x200422bc

080112fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b08c      	sub	sp, #48	; 0x30
 8011300:	af00      	add	r7, sp, #0
 8011302:	4603      	mov	r3, r0
 8011304:	603a      	str	r2, [r7, #0]
 8011306:	71fb      	strb	r3, [r7, #7]
 8011308:	460b      	mov	r3, r1
 801130a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801130c:	2301      	movs	r3, #1
 801130e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011312:	4b25      	ldr	r3, [pc, #148]	; (80113a8 <SD_ioctl+0xac>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	b2db      	uxtb	r3, r3
 8011318:	f003 0301 	and.w	r3, r3, #1
 801131c:	2b00      	cmp	r3, #0
 801131e:	d001      	beq.n	8011324 <SD_ioctl+0x28>
 8011320:	2303      	movs	r3, #3
 8011322:	e03c      	b.n	801139e <SD_ioctl+0xa2>

  switch (cmd)
 8011324:	79bb      	ldrb	r3, [r7, #6]
 8011326:	2b03      	cmp	r3, #3
 8011328:	d834      	bhi.n	8011394 <SD_ioctl+0x98>
 801132a:	a201      	add	r2, pc, #4	; (adr r2, 8011330 <SD_ioctl+0x34>)
 801132c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011330:	08011341 	.word	0x08011341
 8011334:	08011349 	.word	0x08011349
 8011338:	08011361 	.word	0x08011361
 801133c:	0801137b 	.word	0x0801137b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011340:	2300      	movs	r3, #0
 8011342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011346:	e028      	b.n	801139a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011348:	f107 030c 	add.w	r3, r7, #12
 801134c:	4618      	mov	r0, r3
 801134e:	f7ff fe67 	bl	8011020 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011358:	2300      	movs	r3, #0
 801135a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801135e:	e01c      	b.n	801139a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011360:	f107 030c 	add.w	r3, r7, #12
 8011364:	4618      	mov	r0, r3
 8011366:	f7ff fe5b 	bl	8011020 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801136a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801136c:	b29a      	uxth	r2, r3
 801136e:	683b      	ldr	r3, [r7, #0]
 8011370:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011372:	2300      	movs	r3, #0
 8011374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011378:	e00f      	b.n	801139a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801137a:	f107 030c 	add.w	r3, r7, #12
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff fe4e 	bl	8011020 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011386:	0a5a      	lsrs	r2, r3, #9
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011392:	e002      	b.n	801139a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011394:	2304      	movs	r3, #4
 8011396:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801139a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801139e:	4618      	mov	r0, r3
 80113a0:	3730      	adds	r7, #48	; 0x30
 80113a2:	46bd      	mov	sp, r7
 80113a4:	bd80      	pop	{r7, pc}
 80113a6:	bf00      	nop
 80113a8:	20000009 	.word	0x20000009

080113ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80113ac:	b480      	push	{r7}
 80113ae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80113b0:	4b03      	ldr	r3, [pc, #12]	; (80113c0 <BSP_SD_WriteCpltCallback+0x14>)
 80113b2:	2201      	movs	r2, #1
 80113b4:	601a      	str	r2, [r3, #0]
}
 80113b6:	bf00      	nop
 80113b8:	46bd      	mov	sp, r7
 80113ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113be:	4770      	bx	lr
 80113c0:	200422bc 	.word	0x200422bc

080113c4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80113c4:	b480      	push	{r7}
 80113c6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80113c8:	4b03      	ldr	r3, [pc, #12]	; (80113d8 <BSP_SD_ReadCpltCallback+0x14>)
 80113ca:	2201      	movs	r2, #1
 80113cc:	601a      	str	r2, [r3, #0]
}
 80113ce:	bf00      	nop
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	200422c0 	.word	0x200422c0

080113dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	4603      	mov	r3, r0
 80113e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80113e6:	79fb      	ldrb	r3, [r7, #7]
 80113e8:	4a08      	ldr	r2, [pc, #32]	; (801140c <disk_status+0x30>)
 80113ea:	009b      	lsls	r3, r3, #2
 80113ec:	4413      	add	r3, r2
 80113ee:	685b      	ldr	r3, [r3, #4]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	79fa      	ldrb	r2, [r7, #7]
 80113f4:	4905      	ldr	r1, [pc, #20]	; (801140c <disk_status+0x30>)
 80113f6:	440a      	add	r2, r1
 80113f8:	7a12      	ldrb	r2, [r2, #8]
 80113fa:	4610      	mov	r0, r2
 80113fc:	4798      	blx	r3
 80113fe:	4603      	mov	r3, r0
 8011400:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011402:	7bfb      	ldrb	r3, [r7, #15]
}
 8011404:	4618      	mov	r0, r3
 8011406:	3710      	adds	r7, #16
 8011408:	46bd      	mov	sp, r7
 801140a:	bd80      	pop	{r7, pc}
 801140c:	200422ec 	.word	0x200422ec

08011410 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b084      	sub	sp, #16
 8011414:	af00      	add	r7, sp, #0
 8011416:	4603      	mov	r3, r0
 8011418:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801141e:	79fb      	ldrb	r3, [r7, #7]
 8011420:	4a0d      	ldr	r2, [pc, #52]	; (8011458 <disk_initialize+0x48>)
 8011422:	5cd3      	ldrb	r3, [r2, r3]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d111      	bne.n	801144c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011428:	79fb      	ldrb	r3, [r7, #7]
 801142a:	4a0b      	ldr	r2, [pc, #44]	; (8011458 <disk_initialize+0x48>)
 801142c:	2101      	movs	r1, #1
 801142e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011430:	79fb      	ldrb	r3, [r7, #7]
 8011432:	4a09      	ldr	r2, [pc, #36]	; (8011458 <disk_initialize+0x48>)
 8011434:	009b      	lsls	r3, r3, #2
 8011436:	4413      	add	r3, r2
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	79fa      	ldrb	r2, [r7, #7]
 801143e:	4906      	ldr	r1, [pc, #24]	; (8011458 <disk_initialize+0x48>)
 8011440:	440a      	add	r2, r1
 8011442:	7a12      	ldrb	r2, [r2, #8]
 8011444:	4610      	mov	r0, r2
 8011446:	4798      	blx	r3
 8011448:	4603      	mov	r3, r0
 801144a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801144c:	7bfb      	ldrb	r3, [r7, #15]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3710      	adds	r7, #16
 8011452:	46bd      	mov	sp, r7
 8011454:	bd80      	pop	{r7, pc}
 8011456:	bf00      	nop
 8011458:	200422ec 	.word	0x200422ec

0801145c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801145c:	b590      	push	{r4, r7, lr}
 801145e:	b087      	sub	sp, #28
 8011460:	af00      	add	r7, sp, #0
 8011462:	60b9      	str	r1, [r7, #8]
 8011464:	607a      	str	r2, [r7, #4]
 8011466:	603b      	str	r3, [r7, #0]
 8011468:	4603      	mov	r3, r0
 801146a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801146c:	7bfb      	ldrb	r3, [r7, #15]
 801146e:	4a0a      	ldr	r2, [pc, #40]	; (8011498 <disk_read+0x3c>)
 8011470:	009b      	lsls	r3, r3, #2
 8011472:	4413      	add	r3, r2
 8011474:	685b      	ldr	r3, [r3, #4]
 8011476:	689c      	ldr	r4, [r3, #8]
 8011478:	7bfb      	ldrb	r3, [r7, #15]
 801147a:	4a07      	ldr	r2, [pc, #28]	; (8011498 <disk_read+0x3c>)
 801147c:	4413      	add	r3, r2
 801147e:	7a18      	ldrb	r0, [r3, #8]
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	687a      	ldr	r2, [r7, #4]
 8011484:	68b9      	ldr	r1, [r7, #8]
 8011486:	47a0      	blx	r4
 8011488:	4603      	mov	r3, r0
 801148a:	75fb      	strb	r3, [r7, #23]
  return res;
 801148c:	7dfb      	ldrb	r3, [r7, #23]
}
 801148e:	4618      	mov	r0, r3
 8011490:	371c      	adds	r7, #28
 8011492:	46bd      	mov	sp, r7
 8011494:	bd90      	pop	{r4, r7, pc}
 8011496:	bf00      	nop
 8011498:	200422ec 	.word	0x200422ec

0801149c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801149c:	b590      	push	{r4, r7, lr}
 801149e:	b087      	sub	sp, #28
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60b9      	str	r1, [r7, #8]
 80114a4:	607a      	str	r2, [r7, #4]
 80114a6:	603b      	str	r3, [r7, #0]
 80114a8:	4603      	mov	r3, r0
 80114aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80114ac:	7bfb      	ldrb	r3, [r7, #15]
 80114ae:	4a0a      	ldr	r2, [pc, #40]	; (80114d8 <disk_write+0x3c>)
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	4413      	add	r3, r2
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	68dc      	ldr	r4, [r3, #12]
 80114b8:	7bfb      	ldrb	r3, [r7, #15]
 80114ba:	4a07      	ldr	r2, [pc, #28]	; (80114d8 <disk_write+0x3c>)
 80114bc:	4413      	add	r3, r2
 80114be:	7a18      	ldrb	r0, [r3, #8]
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	687a      	ldr	r2, [r7, #4]
 80114c4:	68b9      	ldr	r1, [r7, #8]
 80114c6:	47a0      	blx	r4
 80114c8:	4603      	mov	r3, r0
 80114ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80114cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	371c      	adds	r7, #28
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd90      	pop	{r4, r7, pc}
 80114d6:	bf00      	nop
 80114d8:	200422ec 	.word	0x200422ec

080114dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b084      	sub	sp, #16
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	4603      	mov	r3, r0
 80114e4:	603a      	str	r2, [r7, #0]
 80114e6:	71fb      	strb	r3, [r7, #7]
 80114e8:	460b      	mov	r3, r1
 80114ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80114ec:	79fb      	ldrb	r3, [r7, #7]
 80114ee:	4a09      	ldr	r2, [pc, #36]	; (8011514 <disk_ioctl+0x38>)
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	4413      	add	r3, r2
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	691b      	ldr	r3, [r3, #16]
 80114f8:	79fa      	ldrb	r2, [r7, #7]
 80114fa:	4906      	ldr	r1, [pc, #24]	; (8011514 <disk_ioctl+0x38>)
 80114fc:	440a      	add	r2, r1
 80114fe:	7a10      	ldrb	r0, [r2, #8]
 8011500:	79b9      	ldrb	r1, [r7, #6]
 8011502:	683a      	ldr	r2, [r7, #0]
 8011504:	4798      	blx	r3
 8011506:	4603      	mov	r3, r0
 8011508:	73fb      	strb	r3, [r7, #15]
  return res;
 801150a:	7bfb      	ldrb	r3, [r7, #15]
}
 801150c:	4618      	mov	r0, r3
 801150e:	3710      	adds	r7, #16
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}
 8011514:	200422ec 	.word	0x200422ec

08011518 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011518:	b480      	push	{r7}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	3301      	adds	r3, #1
 8011524:	781b      	ldrb	r3, [r3, #0]
 8011526:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011528:	89fb      	ldrh	r3, [r7, #14]
 801152a:	021b      	lsls	r3, r3, #8
 801152c:	b21a      	sxth	r2, r3
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	781b      	ldrb	r3, [r3, #0]
 8011532:	b21b      	sxth	r3, r3
 8011534:	4313      	orrs	r3, r2
 8011536:	b21b      	sxth	r3, r3
 8011538:	81fb      	strh	r3, [r7, #14]
	return rv;
 801153a:	89fb      	ldrh	r3, [r7, #14]
}
 801153c:	4618      	mov	r0, r3
 801153e:	3714      	adds	r7, #20
 8011540:	46bd      	mov	sp, r7
 8011542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011546:	4770      	bx	lr

08011548 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011548:	b480      	push	{r7}
 801154a:	b085      	sub	sp, #20
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	3303      	adds	r3, #3
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	021b      	lsls	r3, r3, #8
 801155c:	687a      	ldr	r2, [r7, #4]
 801155e:	3202      	adds	r2, #2
 8011560:	7812      	ldrb	r2, [r2, #0]
 8011562:	4313      	orrs	r3, r2
 8011564:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	021b      	lsls	r3, r3, #8
 801156a:	687a      	ldr	r2, [r7, #4]
 801156c:	3201      	adds	r2, #1
 801156e:	7812      	ldrb	r2, [r2, #0]
 8011570:	4313      	orrs	r3, r2
 8011572:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011574:	68fb      	ldr	r3, [r7, #12]
 8011576:	021b      	lsls	r3, r3, #8
 8011578:	687a      	ldr	r2, [r7, #4]
 801157a:	7812      	ldrb	r2, [r2, #0]
 801157c:	4313      	orrs	r3, r2
 801157e:	60fb      	str	r3, [r7, #12]
	return rv;
 8011580:	68fb      	ldr	r3, [r7, #12]
}
 8011582:	4618      	mov	r0, r3
 8011584:	3714      	adds	r7, #20
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801158e:	b480      	push	{r7}
 8011590:	b083      	sub	sp, #12
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
 8011596:	460b      	mov	r3, r1
 8011598:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	1c5a      	adds	r2, r3, #1
 801159e:	607a      	str	r2, [r7, #4]
 80115a0:	887a      	ldrh	r2, [r7, #2]
 80115a2:	b2d2      	uxtb	r2, r2
 80115a4:	701a      	strb	r2, [r3, #0]
 80115a6:	887b      	ldrh	r3, [r7, #2]
 80115a8:	0a1b      	lsrs	r3, r3, #8
 80115aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	1c5a      	adds	r2, r3, #1
 80115b0:	607a      	str	r2, [r7, #4]
 80115b2:	887a      	ldrh	r2, [r7, #2]
 80115b4:	b2d2      	uxtb	r2, r2
 80115b6:	701a      	strb	r2, [r3, #0]
}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80115c4:	b480      	push	{r7}
 80115c6:	b083      	sub	sp, #12
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
 80115cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	1c5a      	adds	r2, r3, #1
 80115d2:	607a      	str	r2, [r7, #4]
 80115d4:	683a      	ldr	r2, [r7, #0]
 80115d6:	b2d2      	uxtb	r2, r2
 80115d8:	701a      	strb	r2, [r3, #0]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	0a1b      	lsrs	r3, r3, #8
 80115de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	1c5a      	adds	r2, r3, #1
 80115e4:	607a      	str	r2, [r7, #4]
 80115e6:	683a      	ldr	r2, [r7, #0]
 80115e8:	b2d2      	uxtb	r2, r2
 80115ea:	701a      	strb	r2, [r3, #0]
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	0a1b      	lsrs	r3, r3, #8
 80115f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	1c5a      	adds	r2, r3, #1
 80115f6:	607a      	str	r2, [r7, #4]
 80115f8:	683a      	ldr	r2, [r7, #0]
 80115fa:	b2d2      	uxtb	r2, r2
 80115fc:	701a      	strb	r2, [r3, #0]
 80115fe:	683b      	ldr	r3, [r7, #0]
 8011600:	0a1b      	lsrs	r3, r3, #8
 8011602:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	1c5a      	adds	r2, r3, #1
 8011608:	607a      	str	r2, [r7, #4]
 801160a:	683a      	ldr	r2, [r7, #0]
 801160c:	b2d2      	uxtb	r2, r2
 801160e:	701a      	strb	r2, [r3, #0]
}
 8011610:	bf00      	nop
 8011612:	370c      	adds	r7, #12
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801161c:	b480      	push	{r7}
 801161e:	b087      	sub	sp, #28
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d00d      	beq.n	8011652 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011636:	693a      	ldr	r2, [r7, #16]
 8011638:	1c53      	adds	r3, r2, #1
 801163a:	613b      	str	r3, [r7, #16]
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	1c59      	adds	r1, r3, #1
 8011640:	6179      	str	r1, [r7, #20]
 8011642:	7812      	ldrb	r2, [r2, #0]
 8011644:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	3b01      	subs	r3, #1
 801164a:	607b      	str	r3, [r7, #4]
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d1f1      	bne.n	8011636 <mem_cpy+0x1a>
	}
}
 8011652:	bf00      	nop
 8011654:	371c      	adds	r7, #28
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr

0801165e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801165e:	b480      	push	{r7}
 8011660:	b087      	sub	sp, #28
 8011662:	af00      	add	r7, sp, #0
 8011664:	60f8      	str	r0, [r7, #12]
 8011666:	60b9      	str	r1, [r7, #8]
 8011668:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	1c5a      	adds	r2, r3, #1
 8011672:	617a      	str	r2, [r7, #20]
 8011674:	68ba      	ldr	r2, [r7, #8]
 8011676:	b2d2      	uxtb	r2, r2
 8011678:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	3b01      	subs	r3, #1
 801167e:	607b      	str	r3, [r7, #4]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d1f3      	bne.n	801166e <mem_set+0x10>
}
 8011686:	bf00      	nop
 8011688:	371c      	adds	r7, #28
 801168a:	46bd      	mov	sp, r7
 801168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011690:	4770      	bx	lr

08011692 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011692:	b480      	push	{r7}
 8011694:	b089      	sub	sp, #36	; 0x24
 8011696:	af00      	add	r7, sp, #0
 8011698:	60f8      	str	r0, [r7, #12]
 801169a:	60b9      	str	r1, [r7, #8]
 801169c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	61fb      	str	r3, [r7, #28]
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80116a6:	2300      	movs	r3, #0
 80116a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80116aa:	69fb      	ldr	r3, [r7, #28]
 80116ac:	1c5a      	adds	r2, r3, #1
 80116ae:	61fa      	str	r2, [r7, #28]
 80116b0:	781b      	ldrb	r3, [r3, #0]
 80116b2:	4619      	mov	r1, r3
 80116b4:	69bb      	ldr	r3, [r7, #24]
 80116b6:	1c5a      	adds	r2, r3, #1
 80116b8:	61ba      	str	r2, [r7, #24]
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	1acb      	subs	r3, r1, r3
 80116be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	3b01      	subs	r3, #1
 80116c4:	607b      	str	r3, [r7, #4]
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <mem_cmp+0x40>
 80116cc:	697b      	ldr	r3, [r7, #20]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d0eb      	beq.n	80116aa <mem_cmp+0x18>

	return r;
 80116d2:	697b      	ldr	r3, [r7, #20]
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	3724      	adds	r7, #36	; 0x24
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80116e0:	b480      	push	{r7}
 80116e2:	b083      	sub	sp, #12
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
 80116e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80116ea:	e002      	b.n	80116f2 <chk_chr+0x12>
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	3301      	adds	r3, #1
 80116f0:	607b      	str	r3, [r7, #4]
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	781b      	ldrb	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d005      	beq.n	8011706 <chk_chr+0x26>
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	461a      	mov	r2, r3
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	4293      	cmp	r3, r2
 8011704:	d1f2      	bne.n	80116ec <chk_chr+0xc>
	return *str;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	781b      	ldrb	r3, [r3, #0]
}
 801170a:	4618      	mov	r0, r3
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
	...

08011718 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011718:	b480      	push	{r7}
 801171a:	b085      	sub	sp, #20
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011722:	2300      	movs	r3, #0
 8011724:	60bb      	str	r3, [r7, #8]
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	60fb      	str	r3, [r7, #12]
 801172a:	e029      	b.n	8011780 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801172c:	4a27      	ldr	r2, [pc, #156]	; (80117cc <chk_lock+0xb4>)
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	011b      	lsls	r3, r3, #4
 8011732:	4413      	add	r3, r2
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d01d      	beq.n	8011776 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801173a:	4a24      	ldr	r2, [pc, #144]	; (80117cc <chk_lock+0xb4>)
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	011b      	lsls	r3, r3, #4
 8011740:	4413      	add	r3, r2
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	429a      	cmp	r2, r3
 801174a:	d116      	bne.n	801177a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801174c:	4a1f      	ldr	r2, [pc, #124]	; (80117cc <chk_lock+0xb4>)
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	011b      	lsls	r3, r3, #4
 8011752:	4413      	add	r3, r2
 8011754:	3304      	adds	r3, #4
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801175c:	429a      	cmp	r2, r3
 801175e:	d10c      	bne.n	801177a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011760:	4a1a      	ldr	r2, [pc, #104]	; (80117cc <chk_lock+0xb4>)
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	011b      	lsls	r3, r3, #4
 8011766:	4413      	add	r3, r2
 8011768:	3308      	adds	r3, #8
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011770:	429a      	cmp	r2, r3
 8011772:	d102      	bne.n	801177a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011774:	e007      	b.n	8011786 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011776:	2301      	movs	r3, #1
 8011778:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	3301      	adds	r3, #1
 801177e:	60fb      	str	r3, [r7, #12]
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	2b01      	cmp	r3, #1
 8011784:	d9d2      	bls.n	801172c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2b02      	cmp	r3, #2
 801178a:	d109      	bne.n	80117a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	d102      	bne.n	8011798 <chk_lock+0x80>
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	2b02      	cmp	r3, #2
 8011796:	d101      	bne.n	801179c <chk_lock+0x84>
 8011798:	2300      	movs	r3, #0
 801179a:	e010      	b.n	80117be <chk_lock+0xa6>
 801179c:	2312      	movs	r3, #18
 801179e:	e00e      	b.n	80117be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d108      	bne.n	80117b8 <chk_lock+0xa0>
 80117a6:	4a09      	ldr	r2, [pc, #36]	; (80117cc <chk_lock+0xb4>)
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	011b      	lsls	r3, r3, #4
 80117ac:	4413      	add	r3, r2
 80117ae:	330c      	adds	r3, #12
 80117b0:	881b      	ldrh	r3, [r3, #0]
 80117b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117b6:	d101      	bne.n	80117bc <chk_lock+0xa4>
 80117b8:	2310      	movs	r3, #16
 80117ba:	e000      	b.n	80117be <chk_lock+0xa6>
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3714      	adds	r7, #20
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop
 80117cc:	200422cc 	.word	0x200422cc

080117d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80117d6:	2300      	movs	r3, #0
 80117d8:	607b      	str	r3, [r7, #4]
 80117da:	e002      	b.n	80117e2 <enq_lock+0x12>
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	3301      	adds	r3, #1
 80117e0:	607b      	str	r3, [r7, #4]
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d806      	bhi.n	80117f6 <enq_lock+0x26>
 80117e8:	4a09      	ldr	r2, [pc, #36]	; (8011810 <enq_lock+0x40>)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	011b      	lsls	r3, r3, #4
 80117ee:	4413      	add	r3, r2
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1f2      	bne.n	80117dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b02      	cmp	r3, #2
 80117fa:	bf14      	ite	ne
 80117fc:	2301      	movne	r3, #1
 80117fe:	2300      	moveq	r3, #0
 8011800:	b2db      	uxtb	r3, r3
}
 8011802:	4618      	mov	r0, r3
 8011804:	370c      	adds	r7, #12
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop
 8011810:	200422cc 	.word	0x200422cc

08011814 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011814:	b480      	push	{r7}
 8011816:	b085      	sub	sp, #20
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
 801181c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801181e:	2300      	movs	r3, #0
 8011820:	60fb      	str	r3, [r7, #12]
 8011822:	e01f      	b.n	8011864 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011824:	4a41      	ldr	r2, [pc, #260]	; (801192c <inc_lock+0x118>)
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	011b      	lsls	r3, r3, #4
 801182a:	4413      	add	r3, r2
 801182c:	681a      	ldr	r2, [r3, #0]
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	429a      	cmp	r2, r3
 8011834:	d113      	bne.n	801185e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011836:	4a3d      	ldr	r2, [pc, #244]	; (801192c <inc_lock+0x118>)
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	011b      	lsls	r3, r3, #4
 801183c:	4413      	add	r3, r2
 801183e:	3304      	adds	r3, #4
 8011840:	681a      	ldr	r2, [r3, #0]
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011846:	429a      	cmp	r2, r3
 8011848:	d109      	bne.n	801185e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801184a:	4a38      	ldr	r2, [pc, #224]	; (801192c <inc_lock+0x118>)
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	011b      	lsls	r3, r3, #4
 8011850:	4413      	add	r3, r2
 8011852:	3308      	adds	r3, #8
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801185a:	429a      	cmp	r2, r3
 801185c:	d006      	beq.n	801186c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	3301      	adds	r3, #1
 8011862:	60fb      	str	r3, [r7, #12]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2b01      	cmp	r3, #1
 8011868:	d9dc      	bls.n	8011824 <inc_lock+0x10>
 801186a:	e000      	b.n	801186e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801186c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b02      	cmp	r3, #2
 8011872:	d132      	bne.n	80118da <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011874:	2300      	movs	r3, #0
 8011876:	60fb      	str	r3, [r7, #12]
 8011878:	e002      	b.n	8011880 <inc_lock+0x6c>
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	3301      	adds	r3, #1
 801187e:	60fb      	str	r3, [r7, #12]
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	2b01      	cmp	r3, #1
 8011884:	d806      	bhi.n	8011894 <inc_lock+0x80>
 8011886:	4a29      	ldr	r2, [pc, #164]	; (801192c <inc_lock+0x118>)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	011b      	lsls	r3, r3, #4
 801188c:	4413      	add	r3, r2
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d1f2      	bne.n	801187a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2b02      	cmp	r3, #2
 8011898:	d101      	bne.n	801189e <inc_lock+0x8a>
 801189a:	2300      	movs	r3, #0
 801189c:	e040      	b.n	8011920 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681a      	ldr	r2, [r3, #0]
 80118a2:	4922      	ldr	r1, [pc, #136]	; (801192c <inc_lock+0x118>)
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	011b      	lsls	r3, r3, #4
 80118a8:	440b      	add	r3, r1
 80118aa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	689a      	ldr	r2, [r3, #8]
 80118b0:	491e      	ldr	r1, [pc, #120]	; (801192c <inc_lock+0x118>)
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	011b      	lsls	r3, r3, #4
 80118b6:	440b      	add	r3, r1
 80118b8:	3304      	adds	r3, #4
 80118ba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	695a      	ldr	r2, [r3, #20]
 80118c0:	491a      	ldr	r1, [pc, #104]	; (801192c <inc_lock+0x118>)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	011b      	lsls	r3, r3, #4
 80118c6:	440b      	add	r3, r1
 80118c8:	3308      	adds	r3, #8
 80118ca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80118cc:	4a17      	ldr	r2, [pc, #92]	; (801192c <inc_lock+0x118>)
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	011b      	lsls	r3, r3, #4
 80118d2:	4413      	add	r3, r2
 80118d4:	330c      	adds	r3, #12
 80118d6:	2200      	movs	r2, #0
 80118d8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d009      	beq.n	80118f4 <inc_lock+0xe0>
 80118e0:	4a12      	ldr	r2, [pc, #72]	; (801192c <inc_lock+0x118>)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	011b      	lsls	r3, r3, #4
 80118e6:	4413      	add	r3, r2
 80118e8:	330c      	adds	r3, #12
 80118ea:	881b      	ldrh	r3, [r3, #0]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d001      	beq.n	80118f4 <inc_lock+0xe0>
 80118f0:	2300      	movs	r3, #0
 80118f2:	e015      	b.n	8011920 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d108      	bne.n	801190c <inc_lock+0xf8>
 80118fa:	4a0c      	ldr	r2, [pc, #48]	; (801192c <inc_lock+0x118>)
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	011b      	lsls	r3, r3, #4
 8011900:	4413      	add	r3, r2
 8011902:	330c      	adds	r3, #12
 8011904:	881b      	ldrh	r3, [r3, #0]
 8011906:	3301      	adds	r3, #1
 8011908:	b29a      	uxth	r2, r3
 801190a:	e001      	b.n	8011910 <inc_lock+0xfc>
 801190c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011910:	4906      	ldr	r1, [pc, #24]	; (801192c <inc_lock+0x118>)
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	011b      	lsls	r3, r3, #4
 8011916:	440b      	add	r3, r1
 8011918:	330c      	adds	r3, #12
 801191a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	3301      	adds	r3, #1
}
 8011920:	4618      	mov	r0, r3
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr
 801192c:	200422cc 	.word	0x200422cc

08011930 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011930:	b480      	push	{r7}
 8011932:	b085      	sub	sp, #20
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	3b01      	subs	r3, #1
 801193c:	607b      	str	r3, [r7, #4]
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2b01      	cmp	r3, #1
 8011942:	d825      	bhi.n	8011990 <dec_lock+0x60>
		n = Files[i].ctr;
 8011944:	4a17      	ldr	r2, [pc, #92]	; (80119a4 <dec_lock+0x74>)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	011b      	lsls	r3, r3, #4
 801194a:	4413      	add	r3, r2
 801194c:	330c      	adds	r3, #12
 801194e:	881b      	ldrh	r3, [r3, #0]
 8011950:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011952:	89fb      	ldrh	r3, [r7, #14]
 8011954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011958:	d101      	bne.n	801195e <dec_lock+0x2e>
 801195a:	2300      	movs	r3, #0
 801195c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801195e:	89fb      	ldrh	r3, [r7, #14]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <dec_lock+0x3a>
 8011964:	89fb      	ldrh	r3, [r7, #14]
 8011966:	3b01      	subs	r3, #1
 8011968:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801196a:	4a0e      	ldr	r2, [pc, #56]	; (80119a4 <dec_lock+0x74>)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	011b      	lsls	r3, r3, #4
 8011970:	4413      	add	r3, r2
 8011972:	330c      	adds	r3, #12
 8011974:	89fa      	ldrh	r2, [r7, #14]
 8011976:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011978:	89fb      	ldrh	r3, [r7, #14]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d105      	bne.n	801198a <dec_lock+0x5a>
 801197e:	4a09      	ldr	r2, [pc, #36]	; (80119a4 <dec_lock+0x74>)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	011b      	lsls	r3, r3, #4
 8011984:	4413      	add	r3, r2
 8011986:	2200      	movs	r2, #0
 8011988:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	737b      	strb	r3, [r7, #13]
 801198e:	e001      	b.n	8011994 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011990:	2302      	movs	r3, #2
 8011992:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011994:	7b7b      	ldrb	r3, [r7, #13]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3714      	adds	r7, #20
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr
 80119a2:	bf00      	nop
 80119a4:	200422cc 	.word	0x200422cc

080119a8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80119b0:	2300      	movs	r3, #0
 80119b2:	60fb      	str	r3, [r7, #12]
 80119b4:	e010      	b.n	80119d8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80119b6:	4a0d      	ldr	r2, [pc, #52]	; (80119ec <clear_lock+0x44>)
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	011b      	lsls	r3, r3, #4
 80119bc:	4413      	add	r3, r2
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	687a      	ldr	r2, [r7, #4]
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d105      	bne.n	80119d2 <clear_lock+0x2a>
 80119c6:	4a09      	ldr	r2, [pc, #36]	; (80119ec <clear_lock+0x44>)
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	011b      	lsls	r3, r3, #4
 80119cc:	4413      	add	r3, r2
 80119ce:	2200      	movs	r2, #0
 80119d0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	3301      	adds	r3, #1
 80119d6:	60fb      	str	r3, [r7, #12]
 80119d8:	68fb      	ldr	r3, [r7, #12]
 80119da:	2b01      	cmp	r3, #1
 80119dc:	d9eb      	bls.n	80119b6 <clear_lock+0xe>
	}
}
 80119de:	bf00      	nop
 80119e0:	3714      	adds	r7, #20
 80119e2:	46bd      	mov	sp, r7
 80119e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e8:	4770      	bx	lr
 80119ea:	bf00      	nop
 80119ec:	200422cc 	.word	0x200422cc

080119f0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80119f8:	2300      	movs	r3, #0
 80119fa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	78db      	ldrb	r3, [r3, #3]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d034      	beq.n	8011a6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	7858      	ldrb	r0, [r3, #1]
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a14:	2301      	movs	r3, #1
 8011a16:	697a      	ldr	r2, [r7, #20]
 8011a18:	f7ff fd40 	bl	801149c <disk_write>
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d002      	beq.n	8011a28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011a22:	2301      	movs	r3, #1
 8011a24:	73fb      	strb	r3, [r7, #15]
 8011a26:	e022      	b.n	8011a6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2200      	movs	r2, #0
 8011a2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a32:	697a      	ldr	r2, [r7, #20]
 8011a34:	1ad2      	subs	r2, r2, r3
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6a1b      	ldr	r3, [r3, #32]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d217      	bcs.n	8011a6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	789b      	ldrb	r3, [r3, #2]
 8011a42:	613b      	str	r3, [r7, #16]
 8011a44:	e010      	b.n	8011a68 <sync_window+0x78>
					wsect += fs->fsize;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	6a1b      	ldr	r3, [r3, #32]
 8011a4a:	697a      	ldr	r2, [r7, #20]
 8011a4c:	4413      	add	r3, r2
 8011a4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	7858      	ldrb	r0, [r3, #1]
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	697a      	ldr	r2, [r7, #20]
 8011a5e:	f7ff fd1d 	bl	801149c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	3b01      	subs	r3, #1
 8011a66:	613b      	str	r3, [r7, #16]
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	2b01      	cmp	r3, #1
 8011a6c:	d8eb      	bhi.n	8011a46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3718      	adds	r7, #24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd80      	pop	{r7, pc}

08011a78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b084      	sub	sp, #16
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	6078      	str	r0, [r7, #4]
 8011a80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011a82:	2300      	movs	r3, #0
 8011a84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d01b      	beq.n	8011ac8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f7ff ffad 	bl	80119f0 <sync_window>
 8011a96:	4603      	mov	r3, r0
 8011a98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011a9a:	7bfb      	ldrb	r3, [r7, #15]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d113      	bne.n	8011ac8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	7858      	ldrb	r0, [r3, #1]
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011aaa:	2301      	movs	r3, #1
 8011aac:	683a      	ldr	r2, [r7, #0]
 8011aae:	f7ff fcd5 	bl	801145c <disk_read>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d004      	beq.n	8011ac2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8011abc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011abe:	2301      	movs	r3, #1
 8011ac0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	683a      	ldr	r2, [r7, #0]
 8011ac6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
	...

08011ad4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b084      	sub	sp, #16
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f7ff ff87 	bl	80119f0 <sync_window>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011ae6:	7bfb      	ldrb	r3, [r7, #15]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d159      	bne.n	8011ba0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	2b03      	cmp	r3, #3
 8011af2:	d149      	bne.n	8011b88 <sync_fs+0xb4>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	791b      	ldrb	r3, [r3, #4]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d145      	bne.n	8011b88 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	899b      	ldrh	r3, [r3, #12]
 8011b06:	461a      	mov	r2, r3
 8011b08:	2100      	movs	r1, #0
 8011b0a:	f7ff fda8 	bl	801165e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	3338      	adds	r3, #56	; 0x38
 8011b12:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b16:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7ff fd37 	bl	801158e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	3338      	adds	r3, #56	; 0x38
 8011b24:	4921      	ldr	r1, [pc, #132]	; (8011bac <sync_fs+0xd8>)
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7ff fd4c 	bl	80115c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	3338      	adds	r3, #56	; 0x38
 8011b30:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011b34:	491e      	ldr	r1, [pc, #120]	; (8011bb0 <sync_fs+0xdc>)
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7ff fd44 	bl	80115c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	3338      	adds	r3, #56	; 0x38
 8011b40:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	695b      	ldr	r3, [r3, #20]
 8011b48:	4619      	mov	r1, r3
 8011b4a:	4610      	mov	r0, r2
 8011b4c:	f7ff fd3a 	bl	80115c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	3338      	adds	r3, #56	; 0x38
 8011b54:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	4610      	mov	r0, r2
 8011b60:	f7ff fd30 	bl	80115c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b68:	1c5a      	adds	r2, r3, #1
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	7858      	ldrb	r0, [r3, #1]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	f7ff fc8d 	bl	801149c <disk_write>
			fs->fsi_flag = 0;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	785b      	ldrb	r3, [r3, #1]
 8011b8c:	2200      	movs	r2, #0
 8011b8e:	2100      	movs	r1, #0
 8011b90:	4618      	mov	r0, r3
 8011b92:	f7ff fca3 	bl	80114dc <disk_ioctl>
 8011b96:	4603      	mov	r3, r0
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d001      	beq.n	8011ba0 <sync_fs+0xcc>
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}
 8011baa:	bf00      	nop
 8011bac:	41615252 	.word	0x41615252
 8011bb0:	61417272 	.word	0x61417272

08011bb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011bb4:	b480      	push	{r7}
 8011bb6:	b083      	sub	sp, #12
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
 8011bbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	3b02      	subs	r3, #2
 8011bc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	69db      	ldr	r3, [r3, #28]
 8011bc8:	3b02      	subs	r3, #2
 8011bca:	683a      	ldr	r2, [r7, #0]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d301      	bcc.n	8011bd4 <clust2sect+0x20>
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	e008      	b.n	8011be6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	895b      	ldrh	r3, [r3, #10]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	fb03 f202 	mul.w	r2, r3, r2
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011be4:	4413      	add	r3, r2
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	370c      	adds	r7, #12
 8011bea:	46bd      	mov	sp, r7
 8011bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf0:	4770      	bx	lr

08011bf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011bf2:	b580      	push	{r7, lr}
 8011bf4:	b086      	sub	sp, #24
 8011bf6:	af00      	add	r7, sp, #0
 8011bf8:	6078      	str	r0, [r7, #4]
 8011bfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d904      	bls.n	8011c12 <get_fat+0x20>
 8011c08:	693b      	ldr	r3, [r7, #16]
 8011c0a:	69db      	ldr	r3, [r3, #28]
 8011c0c:	683a      	ldr	r2, [r7, #0]
 8011c0e:	429a      	cmp	r2, r3
 8011c10:	d302      	bcc.n	8011c18 <get_fat+0x26>
		val = 1;	/* Internal error */
 8011c12:	2301      	movs	r3, #1
 8011c14:	617b      	str	r3, [r7, #20]
 8011c16:	e0b7      	b.n	8011d88 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011c18:	f04f 33ff 	mov.w	r3, #4294967295
 8011c1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	2b02      	cmp	r3, #2
 8011c24:	d05a      	beq.n	8011cdc <get_fat+0xea>
 8011c26:	2b03      	cmp	r3, #3
 8011c28:	d07d      	beq.n	8011d26 <get_fat+0x134>
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	f040 80a2 	bne.w	8011d74 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8011c30:	683b      	ldr	r3, [r7, #0]
 8011c32:	60fb      	str	r3, [r7, #12]
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	085b      	lsrs	r3, r3, #1
 8011c38:	68fa      	ldr	r2, [r7, #12]
 8011c3a:	4413      	add	r3, r2
 8011c3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	899b      	ldrh	r3, [r3, #12]
 8011c46:	4619      	mov	r1, r3
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c4e:	4413      	add	r3, r2
 8011c50:	4619      	mov	r1, r3
 8011c52:	6938      	ldr	r0, [r7, #16]
 8011c54:	f7ff ff10 	bl	8011a78 <move_window>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f040 808d 	bne.w	8011d7a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	1c5a      	adds	r2, r3, #1
 8011c64:	60fa      	str	r2, [r7, #12]
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	8992      	ldrh	r2, [r2, #12]
 8011c6a:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c6e:	fb02 f201 	mul.w	r2, r2, r1
 8011c72:	1a9b      	subs	r3, r3, r2
 8011c74:	693a      	ldr	r2, [r7, #16]
 8011c76:	4413      	add	r3, r2
 8011c78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011c7c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011c82:	693b      	ldr	r3, [r7, #16]
 8011c84:	899b      	ldrh	r3, [r3, #12]
 8011c86:	4619      	mov	r1, r3
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011c8e:	4413      	add	r3, r2
 8011c90:	4619      	mov	r1, r3
 8011c92:	6938      	ldr	r0, [r7, #16]
 8011c94:	f7ff fef0 	bl	8011a78 <move_window>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d16f      	bne.n	8011d7e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	899b      	ldrh	r3, [r3, #12]
 8011ca2:	461a      	mov	r2, r3
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011caa:	fb02 f201 	mul.w	r2, r2, r1
 8011cae:	1a9b      	subs	r3, r3, r2
 8011cb0:	693a      	ldr	r2, [r7, #16]
 8011cb2:	4413      	add	r3, r2
 8011cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011cb8:	021b      	lsls	r3, r3, #8
 8011cba:	461a      	mov	r2, r3
 8011cbc:	68bb      	ldr	r3, [r7, #8]
 8011cbe:	4313      	orrs	r3, r2
 8011cc0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	f003 0301 	and.w	r3, r3, #1
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d002      	beq.n	8011cd2 <get_fat+0xe0>
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	091b      	lsrs	r3, r3, #4
 8011cd0:	e002      	b.n	8011cd8 <get_fat+0xe6>
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011cd8:	617b      	str	r3, [r7, #20]
			break;
 8011cda:	e055      	b.n	8011d88 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	899b      	ldrh	r3, [r3, #12]
 8011ce4:	085b      	lsrs	r3, r3, #1
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	4619      	mov	r1, r3
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	fbb3 f3f1 	udiv	r3, r3, r1
 8011cf0:	4413      	add	r3, r2
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	6938      	ldr	r0, [r7, #16]
 8011cf6:	f7ff febf 	bl	8011a78 <move_window>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d140      	bne.n	8011d82 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	693a      	ldr	r2, [r7, #16]
 8011d0c:	8992      	ldrh	r2, [r2, #12]
 8011d0e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d12:	fb02 f200 	mul.w	r2, r2, r0
 8011d16:	1a9b      	subs	r3, r3, r2
 8011d18:	440b      	add	r3, r1
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f7ff fbfc 	bl	8011518 <ld_word>
 8011d20:	4603      	mov	r3, r0
 8011d22:	617b      	str	r3, [r7, #20]
			break;
 8011d24:	e030      	b.n	8011d88 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011d2a:	693b      	ldr	r3, [r7, #16]
 8011d2c:	899b      	ldrh	r3, [r3, #12]
 8011d2e:	089b      	lsrs	r3, r3, #2
 8011d30:	b29b      	uxth	r3, r3
 8011d32:	4619      	mov	r1, r3
 8011d34:	683b      	ldr	r3, [r7, #0]
 8011d36:	fbb3 f3f1 	udiv	r3, r3, r1
 8011d3a:	4413      	add	r3, r2
 8011d3c:	4619      	mov	r1, r3
 8011d3e:	6938      	ldr	r0, [r7, #16]
 8011d40:	f7ff fe9a 	bl	8011a78 <move_window>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d11d      	bne.n	8011d86 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	693a      	ldr	r2, [r7, #16]
 8011d56:	8992      	ldrh	r2, [r2, #12]
 8011d58:	fbb3 f0f2 	udiv	r0, r3, r2
 8011d5c:	fb02 f200 	mul.w	r2, r2, r0
 8011d60:	1a9b      	subs	r3, r3, r2
 8011d62:	440b      	add	r3, r1
 8011d64:	4618      	mov	r0, r3
 8011d66:	f7ff fbef 	bl	8011548 <ld_dword>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011d70:	617b      	str	r3, [r7, #20]
			break;
 8011d72:	e009      	b.n	8011d88 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011d74:	2301      	movs	r3, #1
 8011d76:	617b      	str	r3, [r7, #20]
 8011d78:	e006      	b.n	8011d88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d7a:	bf00      	nop
 8011d7c:	e004      	b.n	8011d88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d7e:	bf00      	nop
 8011d80:	e002      	b.n	8011d88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011d82:	bf00      	nop
 8011d84:	e000      	b.n	8011d88 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011d86:	bf00      	nop
		}
	}

	return val;
 8011d88:	697b      	ldr	r3, [r7, #20]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3718      	adds	r7, #24
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}

08011d92 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011d92:	b590      	push	{r4, r7, lr}
 8011d94:	b089      	sub	sp, #36	; 0x24
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011d9e:	2302      	movs	r3, #2
 8011da0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011da2:	68bb      	ldr	r3, [r7, #8]
 8011da4:	2b01      	cmp	r3, #1
 8011da6:	f240 8106 	bls.w	8011fb6 <put_fat+0x224>
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	69db      	ldr	r3, [r3, #28]
 8011dae:	68ba      	ldr	r2, [r7, #8]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	f080 8100 	bcs.w	8011fb6 <put_fat+0x224>
		switch (fs->fs_type) {
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	2b02      	cmp	r3, #2
 8011dbc:	f000 8088 	beq.w	8011ed0 <put_fat+0x13e>
 8011dc0:	2b03      	cmp	r3, #3
 8011dc2:	f000 80b0 	beq.w	8011f26 <put_fat+0x194>
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	f040 80f5 	bne.w	8011fb6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	61bb      	str	r3, [r7, #24]
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	085b      	lsrs	r3, r3, #1
 8011dd4:	69ba      	ldr	r2, [r7, #24]
 8011dd6:	4413      	add	r3, r2
 8011dd8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	899b      	ldrh	r3, [r3, #12]
 8011de2:	4619      	mov	r1, r3
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dea:	4413      	add	r3, r2
 8011dec:	4619      	mov	r1, r3
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f7ff fe42 	bl	8011a78 <move_window>
 8011df4:	4603      	mov	r3, r0
 8011df6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011df8:	7ffb      	ldrb	r3, [r7, #31]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f040 80d4 	bne.w	8011fa8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	1c5a      	adds	r2, r3, #1
 8011e0a:	61ba      	str	r2, [r7, #24]
 8011e0c:	68fa      	ldr	r2, [r7, #12]
 8011e0e:	8992      	ldrh	r2, [r2, #12]
 8011e10:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e14:	fb02 f200 	mul.w	r2, r2, r0
 8011e18:	1a9b      	subs	r3, r3, r2
 8011e1a:	440b      	add	r3, r1
 8011e1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011e1e:	68bb      	ldr	r3, [r7, #8]
 8011e20:	f003 0301 	and.w	r3, r3, #1
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d00d      	beq.n	8011e44 <put_fat+0xb2>
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	b25b      	sxtb	r3, r3
 8011e2e:	f003 030f 	and.w	r3, r3, #15
 8011e32:	b25a      	sxtb	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	011b      	lsls	r3, r3, #4
 8011e3a:	b25b      	sxtb	r3, r3
 8011e3c:	4313      	orrs	r3, r2
 8011e3e:	b25b      	sxtb	r3, r3
 8011e40:	b2db      	uxtb	r3, r3
 8011e42:	e001      	b.n	8011e48 <put_fat+0xb6>
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	b2db      	uxtb	r3, r3
 8011e48:	697a      	ldr	r2, [r7, #20]
 8011e4a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	899b      	ldrh	r3, [r3, #12]
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	69bb      	ldr	r3, [r7, #24]
 8011e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e62:	4413      	add	r3, r2
 8011e64:	4619      	mov	r1, r3
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f7ff fe06 	bl	8011a78 <move_window>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011e70:	7ffb      	ldrb	r3, [r7, #31]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	f040 809a 	bne.w	8011fac <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	899b      	ldrh	r3, [r3, #12]
 8011e82:	461a      	mov	r2, r3
 8011e84:	69bb      	ldr	r3, [r7, #24]
 8011e86:	fbb3 f0f2 	udiv	r0, r3, r2
 8011e8a:	fb02 f200 	mul.w	r2, r2, r0
 8011e8e:	1a9b      	subs	r3, r3, r2
 8011e90:	440b      	add	r3, r1
 8011e92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	f003 0301 	and.w	r3, r3, #1
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d003      	beq.n	8011ea6 <put_fat+0x114>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	091b      	lsrs	r3, r3, #4
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	e00e      	b.n	8011ec4 <put_fat+0x132>
 8011ea6:	697b      	ldr	r3, [r7, #20]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	b25b      	sxtb	r3, r3
 8011eac:	f023 030f 	bic.w	r3, r3, #15
 8011eb0:	b25a      	sxtb	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	0a1b      	lsrs	r3, r3, #8
 8011eb6:	b25b      	sxtb	r3, r3
 8011eb8:	f003 030f 	and.w	r3, r3, #15
 8011ebc:	b25b      	sxtb	r3, r3
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	b25b      	sxtb	r3, r3
 8011ec2:	b2db      	uxtb	r3, r3
 8011ec4:	697a      	ldr	r2, [r7, #20]
 8011ec6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2201      	movs	r2, #1
 8011ecc:	70da      	strb	r2, [r3, #3]
			break;
 8011ece:	e072      	b.n	8011fb6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	899b      	ldrh	r3, [r3, #12]
 8011ed8:	085b      	lsrs	r3, r3, #1
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	4619      	mov	r1, r3
 8011ede:	68bb      	ldr	r3, [r7, #8]
 8011ee0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ee4:	4413      	add	r3, r2
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	68f8      	ldr	r0, [r7, #12]
 8011eea:	f7ff fdc5 	bl	8011a78 <move_window>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011ef2:	7ffb      	ldrb	r3, [r7, #31]
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d15b      	bne.n	8011fb0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	005b      	lsls	r3, r3, #1
 8011f02:	68fa      	ldr	r2, [r7, #12]
 8011f04:	8992      	ldrh	r2, [r2, #12]
 8011f06:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f0a:	fb02 f200 	mul.w	r2, r2, r0
 8011f0e:	1a9b      	subs	r3, r3, r2
 8011f10:	440b      	add	r3, r1
 8011f12:	687a      	ldr	r2, [r7, #4]
 8011f14:	b292      	uxth	r2, r2
 8011f16:	4611      	mov	r1, r2
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7ff fb38 	bl	801158e <st_word>
			fs->wflag = 1;
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	2201      	movs	r2, #1
 8011f22:	70da      	strb	r2, [r3, #3]
			break;
 8011f24:	e047      	b.n	8011fb6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	899b      	ldrh	r3, [r3, #12]
 8011f2e:	089b      	lsrs	r3, r3, #2
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	4619      	mov	r1, r3
 8011f34:	68bb      	ldr	r3, [r7, #8]
 8011f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f3a:	4413      	add	r3, r2
 8011f3c:	4619      	mov	r1, r3
 8011f3e:	68f8      	ldr	r0, [r7, #12]
 8011f40:	f7ff fd9a 	bl	8011a78 <move_window>
 8011f44:	4603      	mov	r3, r0
 8011f46:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011f48:	7ffb      	ldrb	r3, [r7, #31]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d132      	bne.n	8011fb4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	009b      	lsls	r3, r3, #2
 8011f5e:	68fa      	ldr	r2, [r7, #12]
 8011f60:	8992      	ldrh	r2, [r2, #12]
 8011f62:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f66:	fb02 f200 	mul.w	r2, r2, r0
 8011f6a:	1a9b      	subs	r3, r3, r2
 8011f6c:	440b      	add	r3, r1
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7ff faea 	bl	8011548 <ld_dword>
 8011f74:	4603      	mov	r3, r0
 8011f76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011f7a:	4323      	orrs	r3, r4
 8011f7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	009b      	lsls	r3, r3, #2
 8011f88:	68fa      	ldr	r2, [r7, #12]
 8011f8a:	8992      	ldrh	r2, [r2, #12]
 8011f8c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f90:	fb02 f200 	mul.w	r2, r2, r0
 8011f94:	1a9b      	subs	r3, r3, r2
 8011f96:	440b      	add	r3, r1
 8011f98:	6879      	ldr	r1, [r7, #4]
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	f7ff fb12 	bl	80115c4 <st_dword>
			fs->wflag = 1;
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	70da      	strb	r2, [r3, #3]
			break;
 8011fa6:	e006      	b.n	8011fb6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fa8:	bf00      	nop
 8011faa:	e004      	b.n	8011fb6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fac:	bf00      	nop
 8011fae:	e002      	b.n	8011fb6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fb0:	bf00      	nop
 8011fb2:	e000      	b.n	8011fb6 <put_fat+0x224>
			if (res != FR_OK) break;
 8011fb4:	bf00      	nop
		}
	}
	return res;
 8011fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8011fb8:	4618      	mov	r0, r3
 8011fba:	3724      	adds	r7, #36	; 0x24
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	bd90      	pop	{r4, r7, pc}

08011fc0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b088      	sub	sp, #32
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	60f8      	str	r0, [r7, #12]
 8011fc8:	60b9      	str	r1, [r7, #8]
 8011fca:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d904      	bls.n	8011fe6 <remove_chain+0x26>
 8011fdc:	69bb      	ldr	r3, [r7, #24]
 8011fde:	69db      	ldr	r3, [r3, #28]
 8011fe0:	68ba      	ldr	r2, [r7, #8]
 8011fe2:	429a      	cmp	r2, r3
 8011fe4:	d301      	bcc.n	8011fea <remove_chain+0x2a>
 8011fe6:	2302      	movs	r3, #2
 8011fe8:	e04b      	b.n	8012082 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d00c      	beq.n	801200a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8011ff4:	6879      	ldr	r1, [r7, #4]
 8011ff6:	69b8      	ldr	r0, [r7, #24]
 8011ff8:	f7ff fecb 	bl	8011d92 <put_fat>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012000:	7ffb      	ldrb	r3, [r7, #31]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d001      	beq.n	801200a <remove_chain+0x4a>
 8012006:	7ffb      	ldrb	r3, [r7, #31]
 8012008:	e03b      	b.n	8012082 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801200a:	68b9      	ldr	r1, [r7, #8]
 801200c:	68f8      	ldr	r0, [r7, #12]
 801200e:	f7ff fdf0 	bl	8011bf2 <get_fat>
 8012012:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d031      	beq.n	801207e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801201a:	697b      	ldr	r3, [r7, #20]
 801201c:	2b01      	cmp	r3, #1
 801201e:	d101      	bne.n	8012024 <remove_chain+0x64>
 8012020:	2302      	movs	r3, #2
 8012022:	e02e      	b.n	8012082 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	f1b3 3fff 	cmp.w	r3, #4294967295
 801202a:	d101      	bne.n	8012030 <remove_chain+0x70>
 801202c:	2301      	movs	r3, #1
 801202e:	e028      	b.n	8012082 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012030:	2200      	movs	r2, #0
 8012032:	68b9      	ldr	r1, [r7, #8]
 8012034:	69b8      	ldr	r0, [r7, #24]
 8012036:	f7ff feac 	bl	8011d92 <put_fat>
 801203a:	4603      	mov	r3, r0
 801203c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801203e:	7ffb      	ldrb	r3, [r7, #31]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d001      	beq.n	8012048 <remove_chain+0x88>
 8012044:	7ffb      	ldrb	r3, [r7, #31]
 8012046:	e01c      	b.n	8012082 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012048:	69bb      	ldr	r3, [r7, #24]
 801204a:	695a      	ldr	r2, [r3, #20]
 801204c:	69bb      	ldr	r3, [r7, #24]
 801204e:	69db      	ldr	r3, [r3, #28]
 8012050:	3b02      	subs	r3, #2
 8012052:	429a      	cmp	r2, r3
 8012054:	d20b      	bcs.n	801206e <remove_chain+0xae>
			fs->free_clst++;
 8012056:	69bb      	ldr	r3, [r7, #24]
 8012058:	695b      	ldr	r3, [r3, #20]
 801205a:	1c5a      	adds	r2, r3, #1
 801205c:	69bb      	ldr	r3, [r7, #24]
 801205e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	791b      	ldrb	r3, [r3, #4]
 8012064:	f043 0301 	orr.w	r3, r3, #1
 8012068:	b2da      	uxtb	r2, r3
 801206a:	69bb      	ldr	r3, [r7, #24]
 801206c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	69db      	ldr	r3, [r3, #28]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	429a      	cmp	r2, r3
 801207a:	d3c6      	bcc.n	801200a <remove_chain+0x4a>
 801207c:	e000      	b.n	8012080 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801207e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012080:	2300      	movs	r3, #0
}
 8012082:	4618      	mov	r0, r3
 8012084:	3720      	adds	r7, #32
 8012086:	46bd      	mov	sp, r7
 8012088:	bd80      	pop	{r7, pc}

0801208a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801208a:	b580      	push	{r7, lr}
 801208c:	b088      	sub	sp, #32
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
 8012092:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d10d      	bne.n	80120bc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80120a0:	693b      	ldr	r3, [r7, #16]
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d004      	beq.n	80120b6 <create_chain+0x2c>
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	69db      	ldr	r3, [r3, #28]
 80120b0:	69ba      	ldr	r2, [r7, #24]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d31b      	bcc.n	80120ee <create_chain+0x64>
 80120b6:	2301      	movs	r3, #1
 80120b8:	61bb      	str	r3, [r7, #24]
 80120ba:	e018      	b.n	80120ee <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80120bc:	6839      	ldr	r1, [r7, #0]
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7ff fd97 	bl	8011bf2 <get_fat>
 80120c4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	2b01      	cmp	r3, #1
 80120ca:	d801      	bhi.n	80120d0 <create_chain+0x46>
 80120cc:	2301      	movs	r3, #1
 80120ce:	e070      	b.n	80121b2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d6:	d101      	bne.n	80120dc <create_chain+0x52>
 80120d8:	68fb      	ldr	r3, [r7, #12]
 80120da:	e06a      	b.n	80121b2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	68fa      	ldr	r2, [r7, #12]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d201      	bcs.n	80120ea <create_chain+0x60>
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	e063      	b.n	80121b2 <create_chain+0x128>
		scl = clst;
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80120ee:	69bb      	ldr	r3, [r7, #24]
 80120f0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	3301      	adds	r3, #1
 80120f6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80120f8:	693b      	ldr	r3, [r7, #16]
 80120fa:	69db      	ldr	r3, [r3, #28]
 80120fc:	69fa      	ldr	r2, [r7, #28]
 80120fe:	429a      	cmp	r2, r3
 8012100:	d307      	bcc.n	8012112 <create_chain+0x88>
				ncl = 2;
 8012102:	2302      	movs	r3, #2
 8012104:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012106:	69fa      	ldr	r2, [r7, #28]
 8012108:	69bb      	ldr	r3, [r7, #24]
 801210a:	429a      	cmp	r2, r3
 801210c:	d901      	bls.n	8012112 <create_chain+0x88>
 801210e:	2300      	movs	r3, #0
 8012110:	e04f      	b.n	80121b2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012112:	69f9      	ldr	r1, [r7, #28]
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f7ff fd6c 	bl	8011bf2 <get_fat>
 801211a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801211c:	68fb      	ldr	r3, [r7, #12]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d00e      	beq.n	8012140 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2b01      	cmp	r3, #1
 8012126:	d003      	beq.n	8012130 <create_chain+0xa6>
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801212e:	d101      	bne.n	8012134 <create_chain+0xaa>
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	e03e      	b.n	80121b2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012134:	69fa      	ldr	r2, [r7, #28]
 8012136:	69bb      	ldr	r3, [r7, #24]
 8012138:	429a      	cmp	r2, r3
 801213a:	d1da      	bne.n	80120f2 <create_chain+0x68>
 801213c:	2300      	movs	r3, #0
 801213e:	e038      	b.n	80121b2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012140:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012142:	f04f 32ff 	mov.w	r2, #4294967295
 8012146:	69f9      	ldr	r1, [r7, #28]
 8012148:	6938      	ldr	r0, [r7, #16]
 801214a:	f7ff fe22 	bl	8011d92 <put_fat>
 801214e:	4603      	mov	r3, r0
 8012150:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012152:	7dfb      	ldrb	r3, [r7, #23]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d109      	bne.n	801216c <create_chain+0xe2>
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d006      	beq.n	801216c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801215e:	69fa      	ldr	r2, [r7, #28]
 8012160:	6839      	ldr	r1, [r7, #0]
 8012162:	6938      	ldr	r0, [r7, #16]
 8012164:	f7ff fe15 	bl	8011d92 <put_fat>
 8012168:	4603      	mov	r3, r0
 801216a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801216c:	7dfb      	ldrb	r3, [r7, #23]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d116      	bne.n	80121a0 <create_chain+0x116>
		fs->last_clst = ncl;
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	69fa      	ldr	r2, [r7, #28]
 8012176:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012178:	693b      	ldr	r3, [r7, #16]
 801217a:	695a      	ldr	r2, [r3, #20]
 801217c:	693b      	ldr	r3, [r7, #16]
 801217e:	69db      	ldr	r3, [r3, #28]
 8012180:	3b02      	subs	r3, #2
 8012182:	429a      	cmp	r2, r3
 8012184:	d804      	bhi.n	8012190 <create_chain+0x106>
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	695b      	ldr	r3, [r3, #20]
 801218a:	1e5a      	subs	r2, r3, #1
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	791b      	ldrb	r3, [r3, #4]
 8012194:	f043 0301 	orr.w	r3, r3, #1
 8012198:	b2da      	uxtb	r2, r3
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	711a      	strb	r2, [r3, #4]
 801219e:	e007      	b.n	80121b0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80121a0:	7dfb      	ldrb	r3, [r7, #23]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d102      	bne.n	80121ac <create_chain+0x122>
 80121a6:	f04f 33ff 	mov.w	r3, #4294967295
 80121aa:	e000      	b.n	80121ae <create_chain+0x124>
 80121ac:	2301      	movs	r3, #1
 80121ae:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80121b0:	69fb      	ldr	r3, [r7, #28]
}
 80121b2:	4618      	mov	r0, r3
 80121b4:	3720      	adds	r7, #32
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}

080121ba <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80121ba:	b480      	push	{r7}
 80121bc:	b087      	sub	sp, #28
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
 80121c2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ce:	3304      	adds	r3, #4
 80121d0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	899b      	ldrh	r3, [r3, #12]
 80121d6:	461a      	mov	r2, r3
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	fbb3 f3f2 	udiv	r3, r3, r2
 80121de:	68fa      	ldr	r2, [r7, #12]
 80121e0:	8952      	ldrh	r2, [r2, #10]
 80121e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80121e6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80121e8:	693b      	ldr	r3, [r7, #16]
 80121ea:	1d1a      	adds	r2, r3, #4
 80121ec:	613a      	str	r2, [r7, #16]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <clmt_clust+0x42>
 80121f8:	2300      	movs	r3, #0
 80121fa:	e010      	b.n	801221e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80121fc:	697a      	ldr	r2, [r7, #20]
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	429a      	cmp	r2, r3
 8012202:	d307      	bcc.n	8012214 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012204:	697a      	ldr	r2, [r7, #20]
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	617b      	str	r3, [r7, #20]
 801220c:	693b      	ldr	r3, [r7, #16]
 801220e:	3304      	adds	r3, #4
 8012210:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012212:	e7e9      	b.n	80121e8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012214:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012216:	693b      	ldr	r3, [r7, #16]
 8012218:	681a      	ldr	r2, [r3, #0]
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	4413      	add	r3, r2
}
 801221e:	4618      	mov	r0, r3
 8012220:	371c      	adds	r7, #28
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr

0801222a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b086      	sub	sp, #24
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012240:	d204      	bcs.n	801224c <dir_sdi+0x22>
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	f003 031f 	and.w	r3, r3, #31
 8012248:	2b00      	cmp	r3, #0
 801224a:	d001      	beq.n	8012250 <dir_sdi+0x26>
		return FR_INT_ERR;
 801224c:	2302      	movs	r3, #2
 801224e:	e071      	b.n	8012334 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	683a      	ldr	r2, [r7, #0]
 8012254:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	689b      	ldr	r3, [r3, #8]
 801225a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801225c:	697b      	ldr	r3, [r7, #20]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d106      	bne.n	8012270 <dir_sdi+0x46>
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	2b02      	cmp	r3, #2
 8012268:	d902      	bls.n	8012270 <dir_sdi+0x46>
		clst = fs->dirbase;
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801226e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012270:	697b      	ldr	r3, [r7, #20]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d10c      	bne.n	8012290 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	095b      	lsrs	r3, r3, #5
 801227a:	693a      	ldr	r2, [r7, #16]
 801227c:	8912      	ldrh	r2, [r2, #8]
 801227e:	4293      	cmp	r3, r2
 8012280:	d301      	bcc.n	8012286 <dir_sdi+0x5c>
 8012282:	2302      	movs	r3, #2
 8012284:	e056      	b.n	8012334 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012286:	693b      	ldr	r3, [r7, #16]
 8012288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	61da      	str	r2, [r3, #28]
 801228e:	e02d      	b.n	80122ec <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	895b      	ldrh	r3, [r3, #10]
 8012294:	461a      	mov	r2, r3
 8012296:	693b      	ldr	r3, [r7, #16]
 8012298:	899b      	ldrh	r3, [r3, #12]
 801229a:	fb03 f302 	mul.w	r3, r3, r2
 801229e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122a0:	e019      	b.n	80122d6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6979      	ldr	r1, [r7, #20]
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7ff fca3 	bl	8011bf2 <get_fat>
 80122ac:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80122ae:	697b      	ldr	r3, [r7, #20]
 80122b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122b4:	d101      	bne.n	80122ba <dir_sdi+0x90>
 80122b6:	2301      	movs	r3, #1
 80122b8:	e03c      	b.n	8012334 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	2b01      	cmp	r3, #1
 80122be:	d904      	bls.n	80122ca <dir_sdi+0xa0>
 80122c0:	693b      	ldr	r3, [r7, #16]
 80122c2:	69db      	ldr	r3, [r3, #28]
 80122c4:	697a      	ldr	r2, [r7, #20]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d301      	bcc.n	80122ce <dir_sdi+0xa4>
 80122ca:	2302      	movs	r3, #2
 80122cc:	e032      	b.n	8012334 <dir_sdi+0x10a>
			ofs -= csz;
 80122ce:	683a      	ldr	r2, [r7, #0]
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	1ad3      	subs	r3, r2, r3
 80122d4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80122d6:	683a      	ldr	r2, [r7, #0]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	429a      	cmp	r2, r3
 80122dc:	d2e1      	bcs.n	80122a2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80122de:	6979      	ldr	r1, [r7, #20]
 80122e0:	6938      	ldr	r0, [r7, #16]
 80122e2:	f7ff fc67 	bl	8011bb4 <clust2sect>
 80122e6:	4602      	mov	r2, r0
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	697a      	ldr	r2, [r7, #20]
 80122f0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	69db      	ldr	r3, [r3, #28]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d101      	bne.n	80122fe <dir_sdi+0xd4>
 80122fa:	2302      	movs	r3, #2
 80122fc:	e01a      	b.n	8012334 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	69da      	ldr	r2, [r3, #28]
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	899b      	ldrh	r3, [r3, #12]
 8012306:	4619      	mov	r1, r3
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	fbb3 f3f1 	udiv	r3, r3, r1
 801230e:	441a      	add	r2, r3
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	899b      	ldrh	r3, [r3, #12]
 801231e:	461a      	mov	r2, r3
 8012320:	683b      	ldr	r3, [r7, #0]
 8012322:	fbb3 f0f2 	udiv	r0, r3, r2
 8012326:	fb02 f200 	mul.w	r2, r2, r0
 801232a:	1a9b      	subs	r3, r3, r2
 801232c:	18ca      	adds	r2, r1, r3
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012332:	2300      	movs	r3, #0
}
 8012334:	4618      	mov	r0, r3
 8012336:	3718      	adds	r7, #24
 8012338:	46bd      	mov	sp, r7
 801233a:	bd80      	pop	{r7, pc}

0801233c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b086      	sub	sp, #24
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	695b      	ldr	r3, [r3, #20]
 8012350:	3320      	adds	r3, #32
 8012352:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	69db      	ldr	r3, [r3, #28]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d003      	beq.n	8012364 <dir_next+0x28>
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012362:	d301      	bcc.n	8012368 <dir_next+0x2c>
 8012364:	2304      	movs	r3, #4
 8012366:	e0bb      	b.n	80124e0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	899b      	ldrh	r3, [r3, #12]
 801236c:	461a      	mov	r2, r3
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	fbb3 f1f2 	udiv	r1, r3, r2
 8012374:	fb02 f201 	mul.w	r2, r2, r1
 8012378:	1a9b      	subs	r3, r3, r2
 801237a:	2b00      	cmp	r3, #0
 801237c:	f040 809d 	bne.w	80124ba <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	69db      	ldr	r3, [r3, #28]
 8012384:	1c5a      	adds	r2, r3, #1
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	699b      	ldr	r3, [r3, #24]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10b      	bne.n	80123aa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012392:	68bb      	ldr	r3, [r7, #8]
 8012394:	095b      	lsrs	r3, r3, #5
 8012396:	68fa      	ldr	r2, [r7, #12]
 8012398:	8912      	ldrh	r2, [r2, #8]
 801239a:	4293      	cmp	r3, r2
 801239c:	f0c0 808d 	bcc.w	80124ba <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2200      	movs	r2, #0
 80123a4:	61da      	str	r2, [r3, #28]
 80123a6:	2304      	movs	r3, #4
 80123a8:	e09a      	b.n	80124e0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	899b      	ldrh	r3, [r3, #12]
 80123ae:	461a      	mov	r2, r3
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	fbb3 f3f2 	udiv	r3, r3, r2
 80123b6:	68fa      	ldr	r2, [r7, #12]
 80123b8:	8952      	ldrh	r2, [r2, #10]
 80123ba:	3a01      	subs	r2, #1
 80123bc:	4013      	ands	r3, r2
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d17b      	bne.n	80124ba <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	699b      	ldr	r3, [r3, #24]
 80123c8:	4619      	mov	r1, r3
 80123ca:	4610      	mov	r0, r2
 80123cc:	f7ff fc11 	bl	8011bf2 <get_fat>
 80123d0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80123d2:	697b      	ldr	r3, [r7, #20]
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d801      	bhi.n	80123dc <dir_next+0xa0>
 80123d8:	2302      	movs	r3, #2
 80123da:	e081      	b.n	80124e0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80123dc:	697b      	ldr	r3, [r7, #20]
 80123de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123e2:	d101      	bne.n	80123e8 <dir_next+0xac>
 80123e4:	2301      	movs	r3, #1
 80123e6:	e07b      	b.n	80124e0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	69db      	ldr	r3, [r3, #28]
 80123ec:	697a      	ldr	r2, [r7, #20]
 80123ee:	429a      	cmp	r2, r3
 80123f0:	d359      	bcc.n	80124a6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d104      	bne.n	8012402 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	61da      	str	r2, [r3, #28]
 80123fe:	2304      	movs	r3, #4
 8012400:	e06e      	b.n	80124e0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	699b      	ldr	r3, [r3, #24]
 8012408:	4619      	mov	r1, r3
 801240a:	4610      	mov	r0, r2
 801240c:	f7ff fe3d 	bl	801208a <create_chain>
 8012410:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012412:	697b      	ldr	r3, [r7, #20]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d101      	bne.n	801241c <dir_next+0xe0>
 8012418:	2307      	movs	r3, #7
 801241a:	e061      	b.n	80124e0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	2b01      	cmp	r3, #1
 8012420:	d101      	bne.n	8012426 <dir_next+0xea>
 8012422:	2302      	movs	r3, #2
 8012424:	e05c      	b.n	80124e0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012426:	697b      	ldr	r3, [r7, #20]
 8012428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801242c:	d101      	bne.n	8012432 <dir_next+0xf6>
 801242e:	2301      	movs	r3, #1
 8012430:	e056      	b.n	80124e0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f7ff fadc 	bl	80119f0 <sync_window>
 8012438:	4603      	mov	r3, r0
 801243a:	2b00      	cmp	r3, #0
 801243c:	d001      	beq.n	8012442 <dir_next+0x106>
 801243e:	2301      	movs	r3, #1
 8012440:	e04e      	b.n	80124e0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	899b      	ldrh	r3, [r3, #12]
 801244c:	461a      	mov	r2, r3
 801244e:	2100      	movs	r1, #0
 8012450:	f7ff f905 	bl	801165e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012454:	2300      	movs	r3, #0
 8012456:	613b      	str	r3, [r7, #16]
 8012458:	6979      	ldr	r1, [r7, #20]
 801245a:	68f8      	ldr	r0, [r7, #12]
 801245c:	f7ff fbaa 	bl	8011bb4 <clust2sect>
 8012460:	4602      	mov	r2, r0
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	635a      	str	r2, [r3, #52]	; 0x34
 8012466:	e012      	b.n	801248e <dir_next+0x152>
						fs->wflag = 1;
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	2201      	movs	r2, #1
 801246c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801246e:	68f8      	ldr	r0, [r7, #12]
 8012470:	f7ff fabe 	bl	80119f0 <sync_window>
 8012474:	4603      	mov	r3, r0
 8012476:	2b00      	cmp	r3, #0
 8012478:	d001      	beq.n	801247e <dir_next+0x142>
 801247a:	2301      	movs	r3, #1
 801247c:	e030      	b.n	80124e0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801247e:	693b      	ldr	r3, [r7, #16]
 8012480:	3301      	adds	r3, #1
 8012482:	613b      	str	r3, [r7, #16]
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012488:	1c5a      	adds	r2, r3, #1
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	635a      	str	r2, [r3, #52]	; 0x34
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	895b      	ldrh	r3, [r3, #10]
 8012492:	461a      	mov	r2, r3
 8012494:	693b      	ldr	r3, [r7, #16]
 8012496:	4293      	cmp	r3, r2
 8012498:	d3e6      	bcc.n	8012468 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	1ad2      	subs	r2, r2, r3
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	697a      	ldr	r2, [r7, #20]
 80124aa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80124ac:	6979      	ldr	r1, [r7, #20]
 80124ae:	68f8      	ldr	r0, [r7, #12]
 80124b0:	f7ff fb80 	bl	8011bb4 <clust2sect>
 80124b4:	4602      	mov	r2, r0
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	68ba      	ldr	r2, [r7, #8]
 80124be:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	899b      	ldrh	r3, [r3, #12]
 80124ca:	461a      	mov	r2, r3
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80124d2:	fb02 f200 	mul.w	r2, r2, r0
 80124d6:	1a9b      	subs	r3, r3, r2
 80124d8:	18ca      	adds	r2, r1, r3
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80124de:	2300      	movs	r3, #0
}
 80124e0:	4618      	mov	r0, r3
 80124e2:	3718      	adds	r7, #24
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80124e8:	b580      	push	{r7, lr}
 80124ea:	b086      	sub	sp, #24
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
 80124f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80124f8:	2100      	movs	r1, #0
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f7ff fe95 	bl	801222a <dir_sdi>
 8012500:	4603      	mov	r3, r0
 8012502:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012504:	7dfb      	ldrb	r3, [r7, #23]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d12b      	bne.n	8012562 <dir_alloc+0x7a>
		n = 0;
 801250a:	2300      	movs	r3, #0
 801250c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	69db      	ldr	r3, [r3, #28]
 8012512:	4619      	mov	r1, r3
 8012514:	68f8      	ldr	r0, [r7, #12]
 8012516:	f7ff faaf 	bl	8011a78 <move_window>
 801251a:	4603      	mov	r3, r0
 801251c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801251e:	7dfb      	ldrb	r3, [r7, #23]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d11d      	bne.n	8012560 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	6a1b      	ldr	r3, [r3, #32]
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	2be5      	cmp	r3, #229	; 0xe5
 801252c:	d004      	beq.n	8012538 <dir_alloc+0x50>
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	6a1b      	ldr	r3, [r3, #32]
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d107      	bne.n	8012548 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012538:	693b      	ldr	r3, [r7, #16]
 801253a:	3301      	adds	r3, #1
 801253c:	613b      	str	r3, [r7, #16]
 801253e:	693a      	ldr	r2, [r7, #16]
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	429a      	cmp	r2, r3
 8012544:	d102      	bne.n	801254c <dir_alloc+0x64>
 8012546:	e00c      	b.n	8012562 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012548:	2300      	movs	r3, #0
 801254a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801254c:	2101      	movs	r1, #1
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7ff fef4 	bl	801233c <dir_next>
 8012554:	4603      	mov	r3, r0
 8012556:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012558:	7dfb      	ldrb	r3, [r7, #23]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d0d7      	beq.n	801250e <dir_alloc+0x26>
 801255e:	e000      	b.n	8012562 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012560:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012562:	7dfb      	ldrb	r3, [r7, #23]
 8012564:	2b04      	cmp	r3, #4
 8012566:	d101      	bne.n	801256c <dir_alloc+0x84>
 8012568:	2307      	movs	r3, #7
 801256a:	75fb      	strb	r3, [r7, #23]
	return res;
 801256c:	7dfb      	ldrb	r3, [r7, #23]
}
 801256e:	4618      	mov	r0, r3
 8012570:	3718      	adds	r7, #24
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}

08012576 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012576:	b580      	push	{r7, lr}
 8012578:	b084      	sub	sp, #16
 801257a:	af00      	add	r7, sp, #0
 801257c:	6078      	str	r0, [r7, #4]
 801257e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012580:	683b      	ldr	r3, [r7, #0]
 8012582:	331a      	adds	r3, #26
 8012584:	4618      	mov	r0, r3
 8012586:	f7fe ffc7 	bl	8011518 <ld_word>
 801258a:	4603      	mov	r3, r0
 801258c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2b03      	cmp	r3, #3
 8012594:	d109      	bne.n	80125aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	3314      	adds	r3, #20
 801259a:	4618      	mov	r0, r3
 801259c:	f7fe ffbc 	bl	8011518 <ld_word>
 80125a0:	4603      	mov	r3, r0
 80125a2:	041b      	lsls	r3, r3, #16
 80125a4:	68fa      	ldr	r2, [r7, #12]
 80125a6:	4313      	orrs	r3, r2
 80125a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80125aa:	68fb      	ldr	r3, [r7, #12]
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3710      	adds	r7, #16
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}

080125b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b084      	sub	sp, #16
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	60f8      	str	r0, [r7, #12]
 80125bc:	60b9      	str	r1, [r7, #8]
 80125be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80125c0:	68bb      	ldr	r3, [r7, #8]
 80125c2:	331a      	adds	r3, #26
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	b292      	uxth	r2, r2
 80125c8:	4611      	mov	r1, r2
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7fe ffdf 	bl	801158e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	781b      	ldrb	r3, [r3, #0]
 80125d4:	2b03      	cmp	r3, #3
 80125d6:	d109      	bne.n	80125ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	f103 0214 	add.w	r2, r3, #20
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	0c1b      	lsrs	r3, r3, #16
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	4619      	mov	r1, r3
 80125e6:	4610      	mov	r0, r2
 80125e8:	f7fe ffd1 	bl	801158e <st_word>
	}
}
 80125ec:	bf00      	nop
 80125ee:	3710      	adds	r7, #16
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}

080125f4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b086      	sub	sp, #24
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
 80125fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80125fe:	2304      	movs	r3, #4
 8012600:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8012608:	e03c      	b.n	8012684 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	69db      	ldr	r3, [r3, #28]
 801260e:	4619      	mov	r1, r3
 8012610:	6938      	ldr	r0, [r7, #16]
 8012612:	f7ff fa31 	bl	8011a78 <move_window>
 8012616:	4603      	mov	r3, r0
 8012618:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801261a:	7dfb      	ldrb	r3, [r7, #23]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d136      	bne.n	801268e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a1b      	ldr	r3, [r3, #32]
 8012624:	781b      	ldrb	r3, [r3, #0]
 8012626:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8012628:	7bfb      	ldrb	r3, [r7, #15]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d102      	bne.n	8012634 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 801262e:	2304      	movs	r3, #4
 8012630:	75fb      	strb	r3, [r7, #23]
 8012632:	e031      	b.n	8012698 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	6a1b      	ldr	r3, [r3, #32]
 8012638:	330b      	adds	r3, #11
 801263a:	781b      	ldrb	r3, [r3, #0]
 801263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012640:	73bb      	strb	r3, [r7, #14]
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	7bba      	ldrb	r2, [r7, #14]
 8012646:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012648:	7bfb      	ldrb	r3, [r7, #15]
 801264a:	2be5      	cmp	r3, #229	; 0xe5
 801264c:	d011      	beq.n	8012672 <dir_read+0x7e>
 801264e:	7bfb      	ldrb	r3, [r7, #15]
 8012650:	2b2e      	cmp	r3, #46	; 0x2e
 8012652:	d00e      	beq.n	8012672 <dir_read+0x7e>
 8012654:	7bbb      	ldrb	r3, [r7, #14]
 8012656:	2b0f      	cmp	r3, #15
 8012658:	d00b      	beq.n	8012672 <dir_read+0x7e>
 801265a:	7bbb      	ldrb	r3, [r7, #14]
 801265c:	f023 0320 	bic.w	r3, r3, #32
 8012660:	2b08      	cmp	r3, #8
 8012662:	bf0c      	ite	eq
 8012664:	2301      	moveq	r3, #1
 8012666:	2300      	movne	r3, #0
 8012668:	b2db      	uxtb	r3, r3
 801266a:	461a      	mov	r2, r3
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	4293      	cmp	r3, r2
 8012670:	d00f      	beq.n	8012692 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8012672:	2100      	movs	r1, #0
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7ff fe61 	bl	801233c <dir_next>
 801267a:	4603      	mov	r3, r0
 801267c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801267e:	7dfb      	ldrb	r3, [r7, #23]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d108      	bne.n	8012696 <dir_read+0xa2>
	while (dp->sect) {
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	69db      	ldr	r3, [r3, #28]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d1be      	bne.n	801260a <dir_read+0x16>
 801268c:	e004      	b.n	8012698 <dir_read+0xa4>
		if (res != FR_OK) break;
 801268e:	bf00      	nop
 8012690:	e002      	b.n	8012698 <dir_read+0xa4>
				break;
 8012692:	bf00      	nop
 8012694:	e000      	b.n	8012698 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012696:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012698:	7dfb      	ldrb	r3, [r7, #23]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d002      	beq.n	80126a4 <dir_read+0xb0>
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	2200      	movs	r2, #0
 80126a2:	61da      	str	r2, [r3, #28]
	return res;
 80126a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80126a6:	4618      	mov	r0, r3
 80126a8:	3718      	adds	r7, #24
 80126aa:	46bd      	mov	sp, r7
 80126ac:	bd80      	pop	{r7, pc}

080126ae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80126ae:	b580      	push	{r7, lr}
 80126b0:	b086      	sub	sp, #24
 80126b2:	af00      	add	r7, sp, #0
 80126b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126bc:	2100      	movs	r1, #0
 80126be:	6878      	ldr	r0, [r7, #4]
 80126c0:	f7ff fdb3 	bl	801222a <dir_sdi>
 80126c4:	4603      	mov	r3, r0
 80126c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80126c8:	7dfb      	ldrb	r3, [r7, #23]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d001      	beq.n	80126d2 <dir_find+0x24>
 80126ce:	7dfb      	ldrb	r3, [r7, #23]
 80126d0:	e03e      	b.n	8012750 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	69db      	ldr	r3, [r3, #28]
 80126d6:	4619      	mov	r1, r3
 80126d8:	6938      	ldr	r0, [r7, #16]
 80126da:	f7ff f9cd 	bl	8011a78 <move_window>
 80126de:	4603      	mov	r3, r0
 80126e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80126e2:	7dfb      	ldrb	r3, [r7, #23]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d12f      	bne.n	8012748 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6a1b      	ldr	r3, [r3, #32]
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80126f0:	7bfb      	ldrb	r3, [r7, #15]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d102      	bne.n	80126fc <dir_find+0x4e>
 80126f6:	2304      	movs	r3, #4
 80126f8:	75fb      	strb	r3, [r7, #23]
 80126fa:	e028      	b.n	801274e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	6a1b      	ldr	r3, [r3, #32]
 8012700:	330b      	adds	r3, #11
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012708:	b2da      	uxtb	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6a1b      	ldr	r3, [r3, #32]
 8012712:	330b      	adds	r3, #11
 8012714:	781b      	ldrb	r3, [r3, #0]
 8012716:	f003 0308 	and.w	r3, r3, #8
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10a      	bne.n	8012734 <dir_find+0x86>
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6a18      	ldr	r0, [r3, #32]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	3324      	adds	r3, #36	; 0x24
 8012726:	220b      	movs	r2, #11
 8012728:	4619      	mov	r1, r3
 801272a:	f7fe ffb2 	bl	8011692 <mem_cmp>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d00b      	beq.n	801274c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012734:	2100      	movs	r1, #0
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f7ff fe00 	bl	801233c <dir_next>
 801273c:	4603      	mov	r3, r0
 801273e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012740:	7dfb      	ldrb	r3, [r7, #23]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d0c5      	beq.n	80126d2 <dir_find+0x24>
 8012746:	e002      	b.n	801274e <dir_find+0xa0>
		if (res != FR_OK) break;
 8012748:	bf00      	nop
 801274a:	e000      	b.n	801274e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801274c:	bf00      	nop

	return res;
 801274e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012750:	4618      	mov	r0, r3
 8012752:	3718      	adds	r7, #24
 8012754:	46bd      	mov	sp, r7
 8012756:	bd80      	pop	{r7, pc}

08012758 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8012766:	2101      	movs	r1, #1
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7ff febd 	bl	80124e8 <dir_alloc>
 801276e:	4603      	mov	r3, r0
 8012770:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8012772:	7bfb      	ldrb	r3, [r7, #15]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d11c      	bne.n	80127b2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	69db      	ldr	r3, [r3, #28]
 801277c:	4619      	mov	r1, r3
 801277e:	68b8      	ldr	r0, [r7, #8]
 8012780:	f7ff f97a 	bl	8011a78 <move_window>
 8012784:	4603      	mov	r3, r0
 8012786:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012788:	7bfb      	ldrb	r3, [r7, #15]
 801278a:	2b00      	cmp	r3, #0
 801278c:	d111      	bne.n	80127b2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	6a1b      	ldr	r3, [r3, #32]
 8012792:	2220      	movs	r2, #32
 8012794:	2100      	movs	r1, #0
 8012796:	4618      	mov	r0, r3
 8012798:	f7fe ff61 	bl	801165e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	6a18      	ldr	r0, [r3, #32]
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	3324      	adds	r3, #36	; 0x24
 80127a4:	220b      	movs	r2, #11
 80127a6:	4619      	mov	r1, r3
 80127a8:	f7fe ff38 	bl	801161c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	2201      	movs	r2, #1
 80127b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80127b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80127b4:	4618      	mov	r0, r3
 80127b6:	3710      	adds	r7, #16
 80127b8:	46bd      	mov	sp, r7
 80127ba:	bd80      	pop	{r7, pc}

080127bc <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	b084      	sub	sp, #16
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	69db      	ldr	r3, [r3, #28]
 80127ce:	4619      	mov	r1, r3
 80127d0:	68f8      	ldr	r0, [r7, #12]
 80127d2:	f7ff f951 	bl	8011a78 <move_window>
 80127d6:	4603      	mov	r3, r0
 80127d8:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 80127da:	7afb      	ldrb	r3, [r7, #11]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d106      	bne.n	80127ee <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6a1b      	ldr	r3, [r3, #32]
 80127e4:	22e5      	movs	r2, #229	; 0xe5
 80127e6:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2201      	movs	r2, #1
 80127ec:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80127ee:	7afb      	ldrb	r3, [r7, #11]
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3710      	adds	r7, #16
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b088      	sub	sp, #32
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	60fb      	str	r3, [r7, #12]
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3324      	adds	r3, #36	; 0x24
 801280c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801280e:	220b      	movs	r2, #11
 8012810:	2120      	movs	r1, #32
 8012812:	68b8      	ldr	r0, [r7, #8]
 8012814:	f7fe ff23 	bl	801165e <mem_set>
	si = i = 0; ni = 8;
 8012818:	2300      	movs	r3, #0
 801281a:	613b      	str	r3, [r7, #16]
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	617b      	str	r3, [r7, #20]
 8012820:	2308      	movs	r3, #8
 8012822:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012824:	68fa      	ldr	r2, [r7, #12]
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	4413      	add	r3, r2
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	2b2e      	cmp	r3, #46	; 0x2e
 801282e:	d12f      	bne.n	8012890 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	1c5a      	adds	r2, r3, #1
 8012834:	617a      	str	r2, [r7, #20]
 8012836:	68fa      	ldr	r2, [r7, #12]
 8012838:	4413      	add	r3, r2
 801283a:	781b      	ldrb	r3, [r3, #0]
 801283c:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801283e:	7ffb      	ldrb	r3, [r7, #31]
 8012840:	2b2e      	cmp	r3, #46	; 0x2e
 8012842:	d10a      	bne.n	801285a <create_name+0x62>
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	2b02      	cmp	r3, #2
 8012848:	d807      	bhi.n	801285a <create_name+0x62>
			sfn[i++] = c;
 801284a:	693b      	ldr	r3, [r7, #16]
 801284c:	1c5a      	adds	r2, r3, #1
 801284e:	613a      	str	r2, [r7, #16]
 8012850:	68ba      	ldr	r2, [r7, #8]
 8012852:	4413      	add	r3, r2
 8012854:	7ffa      	ldrb	r2, [r7, #31]
 8012856:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012858:	e7ea      	b.n	8012830 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 801285a:	7ffb      	ldrb	r3, [r7, #31]
 801285c:	2b2f      	cmp	r3, #47	; 0x2f
 801285e:	d007      	beq.n	8012870 <create_name+0x78>
 8012860:	7ffb      	ldrb	r3, [r7, #31]
 8012862:	2b5c      	cmp	r3, #92	; 0x5c
 8012864:	d004      	beq.n	8012870 <create_name+0x78>
 8012866:	7ffb      	ldrb	r3, [r7, #31]
 8012868:	2b20      	cmp	r3, #32
 801286a:	d901      	bls.n	8012870 <create_name+0x78>
 801286c:	2306      	movs	r3, #6
 801286e:	e084      	b.n	801297a <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012870:	68fa      	ldr	r2, [r7, #12]
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	441a      	add	r2, r3
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 801287a:	7ffb      	ldrb	r3, [r7, #31]
 801287c:	2b20      	cmp	r3, #32
 801287e:	d801      	bhi.n	8012884 <create_name+0x8c>
 8012880:	2224      	movs	r2, #36	; 0x24
 8012882:	e000      	b.n	8012886 <create_name+0x8e>
 8012884:	2220      	movs	r2, #32
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	330b      	adds	r3, #11
 801288a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 801288c:	2300      	movs	r3, #0
 801288e:	e074      	b.n	801297a <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012890:	697b      	ldr	r3, [r7, #20]
 8012892:	1c5a      	adds	r2, r3, #1
 8012894:	617a      	str	r2, [r7, #20]
 8012896:	68fa      	ldr	r2, [r7, #12]
 8012898:	4413      	add	r3, r2
 801289a:	781b      	ldrb	r3, [r3, #0]
 801289c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801289e:	7ffb      	ldrb	r3, [r7, #31]
 80128a0:	2b20      	cmp	r3, #32
 80128a2:	d94e      	bls.n	8012942 <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80128a4:	7ffb      	ldrb	r3, [r7, #31]
 80128a6:	2b2f      	cmp	r3, #47	; 0x2f
 80128a8:	d006      	beq.n	80128b8 <create_name+0xc0>
 80128aa:	7ffb      	ldrb	r3, [r7, #31]
 80128ac:	2b5c      	cmp	r3, #92	; 0x5c
 80128ae:	d110      	bne.n	80128d2 <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80128b0:	e002      	b.n	80128b8 <create_name+0xc0>
 80128b2:	697b      	ldr	r3, [r7, #20]
 80128b4:	3301      	adds	r3, #1
 80128b6:	617b      	str	r3, [r7, #20]
 80128b8:	68fa      	ldr	r2, [r7, #12]
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	4413      	add	r3, r2
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	2b2f      	cmp	r3, #47	; 0x2f
 80128c2:	d0f6      	beq.n	80128b2 <create_name+0xba>
 80128c4:	68fa      	ldr	r2, [r7, #12]
 80128c6:	697b      	ldr	r3, [r7, #20]
 80128c8:	4413      	add	r3, r2
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	2b5c      	cmp	r3, #92	; 0x5c
 80128ce:	d0f0      	beq.n	80128b2 <create_name+0xba>
			break;
 80128d0:	e038      	b.n	8012944 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80128d2:	7ffb      	ldrb	r3, [r7, #31]
 80128d4:	2b2e      	cmp	r3, #46	; 0x2e
 80128d6:	d003      	beq.n	80128e0 <create_name+0xe8>
 80128d8:	693a      	ldr	r2, [r7, #16]
 80128da:	69bb      	ldr	r3, [r7, #24]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d30c      	bcc.n	80128fa <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	2b0b      	cmp	r3, #11
 80128e4:	d002      	beq.n	80128ec <create_name+0xf4>
 80128e6:	7ffb      	ldrb	r3, [r7, #31]
 80128e8:	2b2e      	cmp	r3, #46	; 0x2e
 80128ea:	d001      	beq.n	80128f0 <create_name+0xf8>
 80128ec:	2306      	movs	r3, #6
 80128ee:	e044      	b.n	801297a <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80128f0:	2308      	movs	r3, #8
 80128f2:	613b      	str	r3, [r7, #16]
 80128f4:	230b      	movs	r3, #11
 80128f6:	61bb      	str	r3, [r7, #24]
			continue;
 80128f8:	e022      	b.n	8012940 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80128fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	da04      	bge.n	801290c <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8012902:	7ffb      	ldrb	r3, [r7, #31]
 8012904:	3b80      	subs	r3, #128	; 0x80
 8012906:	4a1f      	ldr	r2, [pc, #124]	; (8012984 <create_name+0x18c>)
 8012908:	5cd3      	ldrb	r3, [r2, r3]
 801290a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801290c:	7ffb      	ldrb	r3, [r7, #31]
 801290e:	4619      	mov	r1, r3
 8012910:	481d      	ldr	r0, [pc, #116]	; (8012988 <create_name+0x190>)
 8012912:	f7fe fee5 	bl	80116e0 <chk_chr>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	d001      	beq.n	8012920 <create_name+0x128>
 801291c:	2306      	movs	r3, #6
 801291e:	e02c      	b.n	801297a <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8012920:	7ffb      	ldrb	r3, [r7, #31]
 8012922:	2b60      	cmp	r3, #96	; 0x60
 8012924:	d905      	bls.n	8012932 <create_name+0x13a>
 8012926:	7ffb      	ldrb	r3, [r7, #31]
 8012928:	2b7a      	cmp	r3, #122	; 0x7a
 801292a:	d802      	bhi.n	8012932 <create_name+0x13a>
 801292c:	7ffb      	ldrb	r3, [r7, #31]
 801292e:	3b20      	subs	r3, #32
 8012930:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	1c5a      	adds	r2, r3, #1
 8012936:	613a      	str	r2, [r7, #16]
 8012938:	68ba      	ldr	r2, [r7, #8]
 801293a:	4413      	add	r3, r2
 801293c:	7ffa      	ldrb	r2, [r7, #31]
 801293e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8012940:	e7a6      	b.n	8012890 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012942:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012944:	68fa      	ldr	r2, [r7, #12]
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	441a      	add	r2, r3
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d101      	bne.n	8012958 <create_name+0x160>
 8012954:	2306      	movs	r3, #6
 8012956:	e010      	b.n	801297a <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	2be5      	cmp	r3, #229	; 0xe5
 801295e:	d102      	bne.n	8012966 <create_name+0x16e>
 8012960:	68bb      	ldr	r3, [r7, #8]
 8012962:	2205      	movs	r2, #5
 8012964:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012966:	7ffb      	ldrb	r3, [r7, #31]
 8012968:	2b20      	cmp	r3, #32
 801296a:	d801      	bhi.n	8012970 <create_name+0x178>
 801296c:	2204      	movs	r2, #4
 801296e:	e000      	b.n	8012972 <create_name+0x17a>
 8012970:	2200      	movs	r2, #0
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	330b      	adds	r3, #11
 8012976:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012978:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801297a:	4618      	mov	r0, r3
 801297c:	3720      	adds	r7, #32
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
 8012982:	bf00      	nop
 8012984:	08019fd4 	.word	0x08019fd4
 8012988:	08019f84 	.word	0x08019f84

0801298c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80129a0:	683b      	ldr	r3, [r7, #0]
 80129a2:	781b      	ldrb	r3, [r3, #0]
 80129a4:	2b2f      	cmp	r3, #47	; 0x2f
 80129a6:	d00b      	beq.n	80129c0 <follow_path+0x34>
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	2b5c      	cmp	r3, #92	; 0x5c
 80129ae:	d007      	beq.n	80129c0 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	699a      	ldr	r2, [r3, #24]
 80129b4:	693b      	ldr	r3, [r7, #16]
 80129b6:	609a      	str	r2, [r3, #8]
 80129b8:	e00d      	b.n	80129d6 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80129ba:	683b      	ldr	r3, [r7, #0]
 80129bc:	3301      	adds	r3, #1
 80129be:	603b      	str	r3, [r7, #0]
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	2b2f      	cmp	r3, #47	; 0x2f
 80129c6:	d0f8      	beq.n	80129ba <follow_path+0x2e>
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	2b5c      	cmp	r3, #92	; 0x5c
 80129ce:	d0f4      	beq.n	80129ba <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	2200      	movs	r2, #0
 80129d4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80129d6:	683b      	ldr	r3, [r7, #0]
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b1f      	cmp	r3, #31
 80129dc:	d80a      	bhi.n	80129f4 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	2280      	movs	r2, #128	; 0x80
 80129e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80129e6:	2100      	movs	r1, #0
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7ff fc1e 	bl	801222a <dir_sdi>
 80129ee:	4603      	mov	r3, r0
 80129f0:	75fb      	strb	r3, [r7, #23]
 80129f2:	e05b      	b.n	8012aac <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80129f4:	463b      	mov	r3, r7
 80129f6:	4619      	mov	r1, r3
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f7ff fefd 	bl	80127f8 <create_name>
 80129fe:	4603      	mov	r3, r0
 8012a00:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a02:	7dfb      	ldrb	r3, [r7, #23]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d14c      	bne.n	8012aa2 <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012a08:	6878      	ldr	r0, [r7, #4]
 8012a0a:	f7ff fe50 	bl	80126ae <dir_find>
 8012a0e:	4603      	mov	r3, r0
 8012a10:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012a18:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012a1a:	7dfb      	ldrb	r3, [r7, #23]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d01b      	beq.n	8012a58 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012a20:	7dfb      	ldrb	r3, [r7, #23]
 8012a22:	2b04      	cmp	r3, #4
 8012a24:	d13f      	bne.n	8012aa6 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012a26:	7afb      	ldrb	r3, [r7, #11]
 8012a28:	f003 0320 	and.w	r3, r3, #32
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d00b      	beq.n	8012a48 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012a30:	7afb      	ldrb	r3, [r7, #11]
 8012a32:	f003 0304 	and.w	r3, r3, #4
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d031      	beq.n	8012a9e <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	2280      	movs	r2, #128	; 0x80
 8012a3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 8012a42:	2300      	movs	r3, #0
 8012a44:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012a46:	e02e      	b.n	8012aa6 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012a48:	7afb      	ldrb	r3, [r7, #11]
 8012a4a:	f003 0304 	and.w	r3, r3, #4
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d129      	bne.n	8012aa6 <follow_path+0x11a>
 8012a52:	2305      	movs	r3, #5
 8012a54:	75fb      	strb	r3, [r7, #23]
				break;
 8012a56:	e026      	b.n	8012aa6 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012a58:	7afb      	ldrb	r3, [r7, #11]
 8012a5a:	f003 0304 	and.w	r3, r3, #4
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d123      	bne.n	8012aaa <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	799b      	ldrb	r3, [r3, #6]
 8012a66:	f003 0310 	and.w	r3, r3, #16
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d102      	bne.n	8012a74 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012a6e:	2305      	movs	r3, #5
 8012a70:	75fb      	strb	r3, [r7, #23]
 8012a72:	e01b      	b.n	8012aac <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	695b      	ldr	r3, [r3, #20]
 8012a7e:	68fa      	ldr	r2, [r7, #12]
 8012a80:	8992      	ldrh	r2, [r2, #12]
 8012a82:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a86:	fb02 f200 	mul.w	r2, r2, r0
 8012a8a:	1a9b      	subs	r3, r3, r2
 8012a8c:	440b      	add	r3, r1
 8012a8e:	4619      	mov	r1, r3
 8012a90:	68f8      	ldr	r0, [r7, #12]
 8012a92:	f7ff fd70 	bl	8012576 <ld_clust>
 8012a96:	4602      	mov	r2, r0
 8012a98:	693b      	ldr	r3, [r7, #16]
 8012a9a:	609a      	str	r2, [r3, #8]
 8012a9c:	e7aa      	b.n	80129f4 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012a9e:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012aa0:	e7a8      	b.n	80129f4 <follow_path+0x68>
			if (res != FR_OK) break;
 8012aa2:	bf00      	nop
 8012aa4:	e002      	b.n	8012aac <follow_path+0x120>
				break;
 8012aa6:	bf00      	nop
 8012aa8:	e000      	b.n	8012aac <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012aaa:	bf00      	nop
			}
		}
	}

	return res;
 8012aac:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3718      	adds	r7, #24
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}

08012ab6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012ab6:	b480      	push	{r7}
 8012ab8:	b087      	sub	sp, #28
 8012aba:	af00      	add	r7, sp, #0
 8012abc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012abe:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d031      	beq.n	8012b30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	617b      	str	r3, [r7, #20]
 8012ad2:	e002      	b.n	8012ada <get_ldnumber+0x24>
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	617b      	str	r3, [r7, #20]
 8012ada:	697b      	ldr	r3, [r7, #20]
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	2b20      	cmp	r3, #32
 8012ae0:	d903      	bls.n	8012aea <get_ldnumber+0x34>
 8012ae2:	697b      	ldr	r3, [r7, #20]
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	2b3a      	cmp	r3, #58	; 0x3a
 8012ae8:	d1f4      	bne.n	8012ad4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	781b      	ldrb	r3, [r3, #0]
 8012aee:	2b3a      	cmp	r3, #58	; 0x3a
 8012af0:	d11c      	bne.n	8012b2c <get_ldnumber+0x76>
			tp = *path;
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	1c5a      	adds	r2, r3, #1
 8012afc:	60fa      	str	r2, [r7, #12]
 8012afe:	781b      	ldrb	r3, [r3, #0]
 8012b00:	3b30      	subs	r3, #48	; 0x30
 8012b02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	2b09      	cmp	r3, #9
 8012b08:	d80e      	bhi.n	8012b28 <get_ldnumber+0x72>
 8012b0a:	68fa      	ldr	r2, [r7, #12]
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d10a      	bne.n	8012b28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d107      	bne.n	8012b28 <get_ldnumber+0x72>
					vol = (int)i;
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	617b      	str	r3, [r7, #20]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	697a      	ldr	r2, [r7, #20]
 8012b26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012b28:	693b      	ldr	r3, [r7, #16]
 8012b2a:	e002      	b.n	8012b32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8012b30:	693b      	ldr	r3, [r7, #16]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	371c      	adds	r7, #28
 8012b36:	46bd      	mov	sp, r7
 8012b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3c:	4770      	bx	lr
	...

08012b40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
 8012b48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	70da      	strb	r2, [r3, #3]
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f04f 32ff 	mov.w	r2, #4294967295
 8012b56:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012b58:	6839      	ldr	r1, [r7, #0]
 8012b5a:	6878      	ldr	r0, [r7, #4]
 8012b5c:	f7fe ff8c 	bl	8011a78 <move_window>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d001      	beq.n	8012b6a <check_fs+0x2a>
 8012b66:	2304      	movs	r3, #4
 8012b68:	e038      	b.n	8012bdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	3338      	adds	r3, #56	; 0x38
 8012b6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7fe fcd0 	bl	8011518 <ld_word>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	461a      	mov	r2, r3
 8012b7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d001      	beq.n	8012b88 <check_fs+0x48>
 8012b84:	2303      	movs	r3, #3
 8012b86:	e029      	b.n	8012bdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b8e:	2be9      	cmp	r3, #233	; 0xe9
 8012b90:	d009      	beq.n	8012ba6 <check_fs+0x66>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012b98:	2beb      	cmp	r3, #235	; 0xeb
 8012b9a:	d11e      	bne.n	8012bda <check_fs+0x9a>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012ba2:	2b90      	cmp	r3, #144	; 0x90
 8012ba4:	d119      	bne.n	8012bda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	3338      	adds	r3, #56	; 0x38
 8012baa:	3336      	adds	r3, #54	; 0x36
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7fe fccb 	bl	8011548 <ld_dword>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012bb8:	4a0a      	ldr	r2, [pc, #40]	; (8012be4 <check_fs+0xa4>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d101      	bne.n	8012bc2 <check_fs+0x82>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	e00c      	b.n	8012bdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	3338      	adds	r3, #56	; 0x38
 8012bc6:	3352      	adds	r3, #82	; 0x52
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fe fcbd 	bl	8011548 <ld_dword>
 8012bce:	4602      	mov	r2, r0
 8012bd0:	4b05      	ldr	r3, [pc, #20]	; (8012be8 <check_fs+0xa8>)
 8012bd2:	429a      	cmp	r2, r3
 8012bd4:	d101      	bne.n	8012bda <check_fs+0x9a>
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	e000      	b.n	8012bdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012bda:	2302      	movs	r3, #2
}
 8012bdc:	4618      	mov	r0, r3
 8012bde:	3708      	adds	r7, #8
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}
 8012be4:	00544146 	.word	0x00544146
 8012be8:	33544146 	.word	0x33544146

08012bec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b096      	sub	sp, #88	; 0x58
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	60f8      	str	r0, [r7, #12]
 8012bf4:	60b9      	str	r1, [r7, #8]
 8012bf6:	4613      	mov	r3, r2
 8012bf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012c00:	68f8      	ldr	r0, [r7, #12]
 8012c02:	f7ff ff58 	bl	8012ab6 <get_ldnumber>
 8012c06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	da01      	bge.n	8012c12 <find_volume+0x26>
 8012c0e:	230b      	movs	r3, #11
 8012c10:	e268      	b.n	80130e4 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012c12:	4ab0      	ldr	r2, [pc, #704]	; (8012ed4 <find_volume+0x2e8>)
 8012c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d101      	bne.n	8012c26 <find_volume+0x3a>
 8012c22:	230c      	movs	r3, #12
 8012c24:	e25e      	b.n	80130e4 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012c2c:	79fb      	ldrb	r3, [r7, #7]
 8012c2e:	f023 0301 	bic.w	r3, r3, #1
 8012c32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d01a      	beq.n	8012c72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c3e:	785b      	ldrb	r3, [r3, #1]
 8012c40:	4618      	mov	r0, r3
 8012c42:	f7fe fbcb 	bl	80113dc <disk_status>
 8012c46:	4603      	mov	r3, r0
 8012c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c50:	f003 0301 	and.w	r3, r3, #1
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d10c      	bne.n	8012c72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012c58:	79fb      	ldrb	r3, [r7, #7]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d007      	beq.n	8012c6e <find_volume+0x82>
 8012c5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c62:	f003 0304 	and.w	r3, r3, #4
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d001      	beq.n	8012c6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012c6a:	230a      	movs	r3, #10
 8012c6c:	e23a      	b.n	80130e4 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012c6e:	2300      	movs	r3, #0
 8012c70:	e238      	b.n	80130e4 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c74:	2200      	movs	r2, #0
 8012c76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c82:	785b      	ldrb	r3, [r3, #1]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f7fe fbc3 	bl	8011410 <disk_initialize>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012c90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c94:	f003 0301 	and.w	r3, r3, #1
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012c9c:	2303      	movs	r3, #3
 8012c9e:	e221      	b.n	80130e4 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012ca0:	79fb      	ldrb	r3, [r7, #7]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d007      	beq.n	8012cb6 <find_volume+0xca>
 8012ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012caa:	f003 0304 	and.w	r3, r3, #4
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d001      	beq.n	8012cb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8012cb2:	230a      	movs	r3, #10
 8012cb4:	e216      	b.n	80130e4 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb8:	7858      	ldrb	r0, [r3, #1]
 8012cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cbc:	330c      	adds	r3, #12
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	2102      	movs	r1, #2
 8012cc2:	f7fe fc0b 	bl	80114dc <disk_ioctl>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d001      	beq.n	8012cd0 <find_volume+0xe4>
 8012ccc:	2301      	movs	r3, #1
 8012cce:	e209      	b.n	80130e4 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cd2:	899b      	ldrh	r3, [r3, #12]
 8012cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012cd8:	d80d      	bhi.n	8012cf6 <find_volume+0x10a>
 8012cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cdc:	899b      	ldrh	r3, [r3, #12]
 8012cde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ce2:	d308      	bcc.n	8012cf6 <find_volume+0x10a>
 8012ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce6:	899b      	ldrh	r3, [r3, #12]
 8012ce8:	461a      	mov	r2, r3
 8012cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cec:	899b      	ldrh	r3, [r3, #12]
 8012cee:	3b01      	subs	r3, #1
 8012cf0:	4013      	ands	r3, r2
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d001      	beq.n	8012cfa <find_volume+0x10e>
 8012cf6:	2301      	movs	r3, #1
 8012cf8:	e1f4      	b.n	80130e4 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012cfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d02:	f7ff ff1d 	bl	8012b40 <check_fs>
 8012d06:	4603      	mov	r3, r0
 8012d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d10:	2b02      	cmp	r3, #2
 8012d12:	d14b      	bne.n	8012dac <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d14:	2300      	movs	r3, #0
 8012d16:	643b      	str	r3, [r7, #64]	; 0x40
 8012d18:	e01f      	b.n	8012d5a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8012d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d22:	011b      	lsls	r3, r3, #4
 8012d24:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012d28:	4413      	add	r3, r2
 8012d2a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d2e:	3304      	adds	r3, #4
 8012d30:	781b      	ldrb	r3, [r3, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d006      	beq.n	8012d44 <find_volume+0x158>
 8012d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d38:	3308      	adds	r3, #8
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f7fe fc04 	bl	8011548 <ld_dword>
 8012d40:	4602      	mov	r2, r0
 8012d42:	e000      	b.n	8012d46 <find_volume+0x15a>
 8012d44:	2200      	movs	r2, #0
 8012d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d48:	009b      	lsls	r3, r3, #2
 8012d4a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012d4e:	440b      	add	r3, r1
 8012d50:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d56:	3301      	adds	r3, #1
 8012d58:	643b      	str	r3, [r7, #64]	; 0x40
 8012d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d5c:	2b03      	cmp	r3, #3
 8012d5e:	d9dc      	bls.n	8012d1a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012d60:	2300      	movs	r3, #0
 8012d62:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d002      	beq.n	8012d70 <find_volume+0x184>
 8012d6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d6c:	3b01      	subs	r3, #1
 8012d6e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d72:	009b      	lsls	r3, r3, #2
 8012d74:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012d78:	4413      	add	r3, r2
 8012d7a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012d7e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012d80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d005      	beq.n	8012d92 <find_volume+0x1a6>
 8012d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012d88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012d8a:	f7ff fed9 	bl	8012b40 <check_fs>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	e000      	b.n	8012d94 <find_volume+0x1a8>
 8012d92:	2303      	movs	r3, #3
 8012d94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012d98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d9c:	2b01      	cmp	r3, #1
 8012d9e:	d905      	bls.n	8012dac <find_volume+0x1c0>
 8012da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012da2:	3301      	adds	r3, #1
 8012da4:	643b      	str	r3, [r7, #64]	; 0x40
 8012da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012da8:	2b03      	cmp	r3, #3
 8012daa:	d9e1      	bls.n	8012d70 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012dac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012db0:	2b04      	cmp	r3, #4
 8012db2:	d101      	bne.n	8012db8 <find_volume+0x1cc>
 8012db4:	2301      	movs	r3, #1
 8012db6:	e195      	b.n	80130e4 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dbc:	2b01      	cmp	r3, #1
 8012dbe:	d901      	bls.n	8012dc4 <find_volume+0x1d8>
 8012dc0:	230d      	movs	r3, #13
 8012dc2:	e18f      	b.n	80130e4 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc6:	3338      	adds	r3, #56	; 0x38
 8012dc8:	330b      	adds	r3, #11
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7fe fba4 	bl	8011518 <ld_word>
 8012dd0:	4603      	mov	r3, r0
 8012dd2:	461a      	mov	r2, r3
 8012dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd6:	899b      	ldrh	r3, [r3, #12]
 8012dd8:	429a      	cmp	r2, r3
 8012dda:	d001      	beq.n	8012de0 <find_volume+0x1f4>
 8012ddc:	230d      	movs	r3, #13
 8012dde:	e181      	b.n	80130e4 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de2:	3338      	adds	r3, #56	; 0x38
 8012de4:	3316      	adds	r3, #22
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7fe fb96 	bl	8011518 <ld_word>
 8012dec:	4603      	mov	r3, r0
 8012dee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012df0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d106      	bne.n	8012e04 <find_volume+0x218>
 8012df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df8:	3338      	adds	r3, #56	; 0x38
 8012dfa:	3324      	adds	r3, #36	; 0x24
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f7fe fba3 	bl	8011548 <ld_dword>
 8012e02:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e08:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8012e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e12:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e16:	789b      	ldrb	r3, [r3, #2]
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d005      	beq.n	8012e28 <find_volume+0x23c>
 8012e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1e:	789b      	ldrb	r3, [r3, #2]
 8012e20:	2b02      	cmp	r3, #2
 8012e22:	d001      	beq.n	8012e28 <find_volume+0x23c>
 8012e24:	230d      	movs	r3, #13
 8012e26:	e15d      	b.n	80130e4 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2a:	789b      	ldrb	r3, [r3, #2]
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e30:	fb02 f303 	mul.w	r3, r2, r3
 8012e34:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e3c:	b29a      	uxth	r2, r3
 8012e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e40:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e44:	895b      	ldrh	r3, [r3, #10]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d008      	beq.n	8012e5c <find_volume+0x270>
 8012e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4c:	895b      	ldrh	r3, [r3, #10]
 8012e4e:	461a      	mov	r2, r3
 8012e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e52:	895b      	ldrh	r3, [r3, #10]
 8012e54:	3b01      	subs	r3, #1
 8012e56:	4013      	ands	r3, r2
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d001      	beq.n	8012e60 <find_volume+0x274>
 8012e5c:	230d      	movs	r3, #13
 8012e5e:	e141      	b.n	80130e4 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e62:	3338      	adds	r3, #56	; 0x38
 8012e64:	3311      	adds	r3, #17
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7fe fb56 	bl	8011518 <ld_word>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	461a      	mov	r2, r3
 8012e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e72:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e76:	891b      	ldrh	r3, [r3, #8]
 8012e78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e7a:	8992      	ldrh	r2, [r2, #12]
 8012e7c:	0952      	lsrs	r2, r2, #5
 8012e7e:	b292      	uxth	r2, r2
 8012e80:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e84:	fb02 f201 	mul.w	r2, r2, r1
 8012e88:	1a9b      	subs	r3, r3, r2
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d001      	beq.n	8012e94 <find_volume+0x2a8>
 8012e90:	230d      	movs	r3, #13
 8012e92:	e127      	b.n	80130e4 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e96:	3338      	adds	r3, #56	; 0x38
 8012e98:	3313      	adds	r3, #19
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fe fb3c 	bl	8011518 <ld_word>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d106      	bne.n	8012eb8 <find_volume+0x2cc>
 8012eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eac:	3338      	adds	r3, #56	; 0x38
 8012eae:	3320      	adds	r3, #32
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fe fb49 	bl	8011548 <ld_dword>
 8012eb6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eba:	3338      	adds	r3, #56	; 0x38
 8012ebc:	330e      	adds	r3, #14
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fe fb2a 	bl	8011518 <ld_word>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012ec8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d104      	bne.n	8012ed8 <find_volume+0x2ec>
 8012ece:	230d      	movs	r3, #13
 8012ed0:	e108      	b.n	80130e4 <find_volume+0x4f8>
 8012ed2:	bf00      	nop
 8012ed4:	200422c4 	.word	0x200422c4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012ed8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012edc:	4413      	add	r3, r2
 8012ede:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ee0:	8911      	ldrh	r1, [r2, #8]
 8012ee2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ee4:	8992      	ldrh	r2, [r2, #12]
 8012ee6:	0952      	lsrs	r2, r2, #5
 8012ee8:	b292      	uxth	r2, r2
 8012eea:	fbb1 f2f2 	udiv	r2, r1, r2
 8012eee:	b292      	uxth	r2, r2
 8012ef0:	4413      	add	r3, r2
 8012ef2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012ef4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d201      	bcs.n	8012f00 <find_volume+0x314>
 8012efc:	230d      	movs	r3, #13
 8012efe:	e0f1      	b.n	80130e4 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012f08:	8952      	ldrh	r2, [r2, #10]
 8012f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8012f0e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d101      	bne.n	8012f1a <find_volume+0x32e>
 8012f16:	230d      	movs	r3, #13
 8012f18:	e0e4      	b.n	80130e4 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012f1a:	2303      	movs	r3, #3
 8012f1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f22:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012f26:	4293      	cmp	r3, r2
 8012f28:	d802      	bhi.n	8012f30 <find_volume+0x344>
 8012f2a:	2302      	movs	r3, #2
 8012f2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f32:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d802      	bhi.n	8012f40 <find_volume+0x354>
 8012f3a:	2301      	movs	r3, #1
 8012f3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f42:	1c9a      	adds	r2, r3, #2
 8012f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f46:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f4c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012f4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f52:	441a      	add	r2, r3
 8012f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f56:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012f58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5c:	441a      	add	r2, r3
 8012f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f60:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012f62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012f66:	2b03      	cmp	r3, #3
 8012f68:	d11e      	bne.n	8012fa8 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f6c:	3338      	adds	r3, #56	; 0x38
 8012f6e:	332a      	adds	r3, #42	; 0x2a
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7fe fad1 	bl	8011518 <ld_word>
 8012f76:	4603      	mov	r3, r0
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d001      	beq.n	8012f80 <find_volume+0x394>
 8012f7c:	230d      	movs	r3, #13
 8012f7e:	e0b1      	b.n	80130e4 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f82:	891b      	ldrh	r3, [r3, #8]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d001      	beq.n	8012f8c <find_volume+0x3a0>
 8012f88:	230d      	movs	r3, #13
 8012f8a:	e0ab      	b.n	80130e4 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f8e:	3338      	adds	r3, #56	; 0x38
 8012f90:	332c      	adds	r3, #44	; 0x2c
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7fe fad8 	bl	8011548 <ld_dword>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f9c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fa0:	69db      	ldr	r3, [r3, #28]
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8012fa6:	e01f      	b.n	8012fe8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012faa:	891b      	ldrh	r3, [r3, #8]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d101      	bne.n	8012fb4 <find_volume+0x3c8>
 8012fb0:	230d      	movs	r3, #13
 8012fb2:	e097      	b.n	80130e4 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fba:	441a      	add	r2, r3
 8012fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fbe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012fc4:	2b02      	cmp	r3, #2
 8012fc6:	d103      	bne.n	8012fd0 <find_volume+0x3e4>
 8012fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fca:	69db      	ldr	r3, [r3, #28]
 8012fcc:	005b      	lsls	r3, r3, #1
 8012fce:	e00a      	b.n	8012fe6 <find_volume+0x3fa>
 8012fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fd2:	69da      	ldr	r2, [r3, #28]
 8012fd4:	4613      	mov	r3, r2
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	4413      	add	r3, r2
 8012fda:	085a      	lsrs	r2, r3, #1
 8012fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fde:	69db      	ldr	r3, [r3, #28]
 8012fe0:	f003 0301 	and.w	r3, r3, #1
 8012fe4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012fe6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fea:	6a1a      	ldr	r2, [r3, #32]
 8012fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012fee:	899b      	ldrh	r3, [r3, #12]
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ff4:	440b      	add	r3, r1
 8012ff6:	3b01      	subs	r3, #1
 8012ff8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ffa:	8989      	ldrh	r1, [r1, #12]
 8012ffc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013000:	429a      	cmp	r2, r3
 8013002:	d201      	bcs.n	8013008 <find_volume+0x41c>
 8013004:	230d      	movs	r3, #13
 8013006:	e06d      	b.n	80130e4 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801300a:	f04f 32ff 	mov.w	r2, #4294967295
 801300e:	615a      	str	r2, [r3, #20]
 8013010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013012:	695a      	ldr	r2, [r3, #20]
 8013014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013016:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8013018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801301a:	2280      	movs	r2, #128	; 0x80
 801301c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801301e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013022:	2b03      	cmp	r3, #3
 8013024:	d149      	bne.n	80130ba <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013028:	3338      	adds	r3, #56	; 0x38
 801302a:	3330      	adds	r3, #48	; 0x30
 801302c:	4618      	mov	r0, r3
 801302e:	f7fe fa73 	bl	8011518 <ld_word>
 8013032:	4603      	mov	r3, r0
 8013034:	2b01      	cmp	r3, #1
 8013036:	d140      	bne.n	80130ba <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801303a:	3301      	adds	r3, #1
 801303c:	4619      	mov	r1, r3
 801303e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013040:	f7fe fd1a 	bl	8011a78 <move_window>
 8013044:	4603      	mov	r3, r0
 8013046:	2b00      	cmp	r3, #0
 8013048:	d137      	bne.n	80130ba <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801304c:	2200      	movs	r2, #0
 801304e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013052:	3338      	adds	r3, #56	; 0x38
 8013054:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013058:	4618      	mov	r0, r3
 801305a:	f7fe fa5d 	bl	8011518 <ld_word>
 801305e:	4603      	mov	r3, r0
 8013060:	461a      	mov	r2, r3
 8013062:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013066:	429a      	cmp	r2, r3
 8013068:	d127      	bne.n	80130ba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801306a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801306c:	3338      	adds	r3, #56	; 0x38
 801306e:	4618      	mov	r0, r3
 8013070:	f7fe fa6a 	bl	8011548 <ld_dword>
 8013074:	4602      	mov	r2, r0
 8013076:	4b1d      	ldr	r3, [pc, #116]	; (80130ec <find_volume+0x500>)
 8013078:	429a      	cmp	r2, r3
 801307a:	d11e      	bne.n	80130ba <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801307c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801307e:	3338      	adds	r3, #56	; 0x38
 8013080:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013084:	4618      	mov	r0, r3
 8013086:	f7fe fa5f 	bl	8011548 <ld_dword>
 801308a:	4602      	mov	r2, r0
 801308c:	4b18      	ldr	r3, [pc, #96]	; (80130f0 <find_volume+0x504>)
 801308e:	429a      	cmp	r2, r3
 8013090:	d113      	bne.n	80130ba <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013094:	3338      	adds	r3, #56	; 0x38
 8013096:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801309a:	4618      	mov	r0, r3
 801309c:	f7fe fa54 	bl	8011548 <ld_dword>
 80130a0:	4602      	mov	r2, r0
 80130a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a4:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80130a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a8:	3338      	adds	r3, #56	; 0x38
 80130aa:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fe fa4a 	bl	8011548 <ld_dword>
 80130b4:	4602      	mov	r2, r0
 80130b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b8:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80130ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130bc:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80130c0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80130c2:	4b0c      	ldr	r3, [pc, #48]	; (80130f4 <find_volume+0x508>)
 80130c4:	881b      	ldrh	r3, [r3, #0]
 80130c6:	3301      	adds	r3, #1
 80130c8:	b29a      	uxth	r2, r3
 80130ca:	4b0a      	ldr	r3, [pc, #40]	; (80130f4 <find_volume+0x508>)
 80130cc:	801a      	strh	r2, [r3, #0]
 80130ce:	4b09      	ldr	r3, [pc, #36]	; (80130f4 <find_volume+0x508>)
 80130d0:	881a      	ldrh	r2, [r3, #0]
 80130d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d4:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80130d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130d8:	2200      	movs	r2, #0
 80130da:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80130dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80130de:	f7fe fc63 	bl	80119a8 <clear_lock>
#endif
	return FR_OK;
 80130e2:	2300      	movs	r3, #0
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3758      	adds	r7, #88	; 0x58
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	41615252 	.word	0x41615252
 80130f0:	61417272 	.word	0x61417272
 80130f4:	200422c8 	.word	0x200422c8

080130f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b084      	sub	sp, #16
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013102:	2309      	movs	r3, #9
 8013104:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d01c      	beq.n	8013146 <validate+0x4e>
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d018      	beq.n	8013146 <validate+0x4e>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	781b      	ldrb	r3, [r3, #0]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d013      	beq.n	8013146 <validate+0x4e>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	889a      	ldrh	r2, [r3, #4]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	88db      	ldrh	r3, [r3, #6]
 8013128:	429a      	cmp	r2, r3
 801312a:	d10c      	bne.n	8013146 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	785b      	ldrb	r3, [r3, #1]
 8013132:	4618      	mov	r0, r3
 8013134:	f7fe f952 	bl	80113dc <disk_status>
 8013138:	4603      	mov	r3, r0
 801313a:	f003 0301 	and.w	r3, r3, #1
 801313e:	2b00      	cmp	r3, #0
 8013140:	d101      	bne.n	8013146 <validate+0x4e>
			res = FR_OK;
 8013142:	2300      	movs	r3, #0
 8013144:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013146:	7bfb      	ldrb	r3, [r7, #15]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d102      	bne.n	8013152 <validate+0x5a>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	e000      	b.n	8013154 <validate+0x5c>
 8013152:	2300      	movs	r3, #0
 8013154:	683a      	ldr	r2, [r7, #0]
 8013156:	6013      	str	r3, [r2, #0]
	return res;
 8013158:	7bfb      	ldrb	r3, [r7, #15]
}
 801315a:	4618      	mov	r0, r3
 801315c:	3710      	adds	r7, #16
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
	...

08013164 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b088      	sub	sp, #32
 8013168:	af00      	add	r7, sp, #0
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	4613      	mov	r3, r2
 8013170:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013176:	f107 0310 	add.w	r3, r7, #16
 801317a:	4618      	mov	r0, r3
 801317c:	f7ff fc9b 	bl	8012ab6 <get_ldnumber>
 8013180:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013182:	69fb      	ldr	r3, [r7, #28]
 8013184:	2b00      	cmp	r3, #0
 8013186:	da01      	bge.n	801318c <f_mount+0x28>
 8013188:	230b      	movs	r3, #11
 801318a:	e02b      	b.n	80131e4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801318c:	4a17      	ldr	r2, [pc, #92]	; (80131ec <f_mount+0x88>)
 801318e:	69fb      	ldr	r3, [r7, #28]
 8013190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013194:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d005      	beq.n	80131a8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801319c:	69b8      	ldr	r0, [r7, #24]
 801319e:	f7fe fc03 	bl	80119a8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	2200      	movs	r2, #0
 80131a6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d002      	beq.n	80131b4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2200      	movs	r2, #0
 80131b2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80131b4:	68fa      	ldr	r2, [r7, #12]
 80131b6:	490d      	ldr	r1, [pc, #52]	; (80131ec <f_mount+0x88>)
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d002      	beq.n	80131ca <f_mount+0x66>
 80131c4:	79fb      	ldrb	r3, [r7, #7]
 80131c6:	2b01      	cmp	r3, #1
 80131c8:	d001      	beq.n	80131ce <f_mount+0x6a>
 80131ca:	2300      	movs	r3, #0
 80131cc:	e00a      	b.n	80131e4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80131ce:	f107 010c 	add.w	r1, r7, #12
 80131d2:	f107 0308 	add.w	r3, r7, #8
 80131d6:	2200      	movs	r2, #0
 80131d8:	4618      	mov	r0, r3
 80131da:	f7ff fd07 	bl	8012bec <find_volume>
 80131de:	4603      	mov	r3, r0
 80131e0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80131e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3720      	adds	r7, #32
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	200422c4 	.word	0x200422c4

080131f0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b098      	sub	sp, #96	; 0x60
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	60b9      	str	r1, [r7, #8]
 80131fa:	4613      	mov	r3, r2
 80131fc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d101      	bne.n	8013208 <f_open+0x18>
 8013204:	2309      	movs	r3, #9
 8013206:	e1ba      	b.n	801357e <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013208:	79fb      	ldrb	r3, [r7, #7]
 801320a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801320e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8013210:	79fa      	ldrb	r2, [r7, #7]
 8013212:	f107 0110 	add.w	r1, r7, #16
 8013216:	f107 0308 	add.w	r3, r7, #8
 801321a:	4618      	mov	r0, r3
 801321c:	f7ff fce6 	bl	8012bec <find_volume>
 8013220:	4603      	mov	r3, r0
 8013222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8013226:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801322a:	2b00      	cmp	r3, #0
 801322c:	f040 819e 	bne.w	801356c <f_open+0x37c>
		dj.obj.fs = fs;
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8013234:	68ba      	ldr	r2, [r7, #8]
 8013236:	f107 0314 	add.w	r3, r7, #20
 801323a:	4611      	mov	r1, r2
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff fba5 	bl	801298c <follow_path>
 8013242:	4603      	mov	r3, r0
 8013244:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013248:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801324c:	2b00      	cmp	r3, #0
 801324e:	d11a      	bne.n	8013286 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013250:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8013254:	b25b      	sxtb	r3, r3
 8013256:	2b00      	cmp	r3, #0
 8013258:	da03      	bge.n	8013262 <f_open+0x72>
				res = FR_INVALID_NAME;
 801325a:	2306      	movs	r3, #6
 801325c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013260:	e011      	b.n	8013286 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013262:	79fb      	ldrb	r3, [r7, #7]
 8013264:	f023 0301 	bic.w	r3, r3, #1
 8013268:	2b00      	cmp	r3, #0
 801326a:	bf14      	ite	ne
 801326c:	2301      	movne	r3, #1
 801326e:	2300      	moveq	r3, #0
 8013270:	b2db      	uxtb	r3, r3
 8013272:	461a      	mov	r2, r3
 8013274:	f107 0314 	add.w	r3, r7, #20
 8013278:	4611      	mov	r1, r2
 801327a:	4618      	mov	r0, r3
 801327c:	f7fe fa4c 	bl	8011718 <chk_lock>
 8013280:	4603      	mov	r3, r0
 8013282:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013286:	79fb      	ldrb	r3, [r7, #7]
 8013288:	f003 031c 	and.w	r3, r3, #28
 801328c:	2b00      	cmp	r3, #0
 801328e:	d07e      	beq.n	801338e <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8013290:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013294:	2b00      	cmp	r3, #0
 8013296:	d017      	beq.n	80132c8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013298:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801329c:	2b04      	cmp	r3, #4
 801329e:	d10e      	bne.n	80132be <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80132a0:	f7fe fa96 	bl	80117d0 <enq_lock>
 80132a4:	4603      	mov	r3, r0
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d006      	beq.n	80132b8 <f_open+0xc8>
 80132aa:	f107 0314 	add.w	r3, r7, #20
 80132ae:	4618      	mov	r0, r3
 80132b0:	f7ff fa52 	bl	8012758 <dir_register>
 80132b4:	4603      	mov	r3, r0
 80132b6:	e000      	b.n	80132ba <f_open+0xca>
 80132b8:	2312      	movs	r3, #18
 80132ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80132be:	79fb      	ldrb	r3, [r7, #7]
 80132c0:	f043 0308 	orr.w	r3, r3, #8
 80132c4:	71fb      	strb	r3, [r7, #7]
 80132c6:	e010      	b.n	80132ea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80132c8:	7ebb      	ldrb	r3, [r7, #26]
 80132ca:	f003 0311 	and.w	r3, r3, #17
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d003      	beq.n	80132da <f_open+0xea>
					res = FR_DENIED;
 80132d2:	2307      	movs	r3, #7
 80132d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80132d8:	e007      	b.n	80132ea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80132da:	79fb      	ldrb	r3, [r7, #7]
 80132dc:	f003 0304 	and.w	r3, r3, #4
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d002      	beq.n	80132ea <f_open+0xfa>
 80132e4:	2308      	movs	r3, #8
 80132e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80132ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d167      	bne.n	80133c2 <f_open+0x1d2>
 80132f2:	79fb      	ldrb	r3, [r7, #7]
 80132f4:	f003 0308 	and.w	r3, r3, #8
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d062      	beq.n	80133c2 <f_open+0x1d2>
				dw = GET_FATTIME();
 80132fc:	4ba2      	ldr	r3, [pc, #648]	; (8013588 <f_open+0x398>)
 80132fe:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013302:	330e      	adds	r3, #14
 8013304:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013306:	4618      	mov	r0, r3
 8013308:	f7fe f95c 	bl	80115c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801330c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801330e:	3316      	adds	r3, #22
 8013310:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013312:	4618      	mov	r0, r3
 8013314:	f7fe f956 	bl	80115c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801331a:	330b      	adds	r3, #11
 801331c:	2220      	movs	r2, #32
 801331e:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013324:	4611      	mov	r1, r2
 8013326:	4618      	mov	r0, r3
 8013328:	f7ff f925 	bl	8012576 <ld_clust>
 801332c:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801332e:	693b      	ldr	r3, [r7, #16]
 8013330:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013332:	2200      	movs	r2, #0
 8013334:	4618      	mov	r0, r3
 8013336:	f7ff f93d 	bl	80125b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333c:	331c      	adds	r3, #28
 801333e:	2100      	movs	r1, #0
 8013340:	4618      	mov	r0, r3
 8013342:	f7fe f93f 	bl	80115c4 <st_dword>
					fs->wflag = 1;
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	2201      	movs	r2, #1
 801334a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801334c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801334e:	2b00      	cmp	r3, #0
 8013350:	d037      	beq.n	80133c2 <f_open+0x1d2>
						dw = fs->winsect;
 8013352:	693b      	ldr	r3, [r7, #16]
 8013354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013356:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8013358:	f107 0314 	add.w	r3, r7, #20
 801335c:	2200      	movs	r2, #0
 801335e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8013360:	4618      	mov	r0, r3
 8013362:	f7fe fe2d 	bl	8011fc0 <remove_chain>
 8013366:	4603      	mov	r3, r0
 8013368:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801336c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013370:	2b00      	cmp	r3, #0
 8013372:	d126      	bne.n	80133c2 <f_open+0x1d2>
							res = move_window(fs, dw);
 8013374:	693b      	ldr	r3, [r7, #16]
 8013376:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013378:	4618      	mov	r0, r3
 801337a:	f7fe fb7d 	bl	8011a78 <move_window>
 801337e:	4603      	mov	r3, r0
 8013380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013388:	3a01      	subs	r2, #1
 801338a:	611a      	str	r2, [r3, #16]
 801338c:	e019      	b.n	80133c2 <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801338e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013392:	2b00      	cmp	r3, #0
 8013394:	d115      	bne.n	80133c2 <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013396:	7ebb      	ldrb	r3, [r7, #26]
 8013398:	f003 0310 	and.w	r3, r3, #16
 801339c:	2b00      	cmp	r3, #0
 801339e:	d003      	beq.n	80133a8 <f_open+0x1b8>
					res = FR_NO_FILE;
 80133a0:	2304      	movs	r3, #4
 80133a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80133a6:	e00c      	b.n	80133c2 <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80133a8:	79fb      	ldrb	r3, [r7, #7]
 80133aa:	f003 0302 	and.w	r3, r3, #2
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d007      	beq.n	80133c2 <f_open+0x1d2>
 80133b2:	7ebb      	ldrb	r3, [r7, #26]
 80133b4:	f003 0301 	and.w	r3, r3, #1
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <f_open+0x1d2>
						res = FR_DENIED;
 80133bc:	2307      	movs	r3, #7
 80133be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80133c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d128      	bne.n	801341c <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80133ca:	79fb      	ldrb	r3, [r7, #7]
 80133cc:	f003 0308 	and.w	r3, r3, #8
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d003      	beq.n	80133dc <f_open+0x1ec>
				mode |= FA_MODIFIED;
 80133d4:	79fb      	ldrb	r3, [r7, #7]
 80133d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80133da:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80133e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80133ea:	79fb      	ldrb	r3, [r7, #7]
 80133ec:	f023 0301 	bic.w	r3, r3, #1
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	bf14      	ite	ne
 80133f4:	2301      	movne	r3, #1
 80133f6:	2300      	moveq	r3, #0
 80133f8:	b2db      	uxtb	r3, r3
 80133fa:	461a      	mov	r2, r3
 80133fc:	f107 0314 	add.w	r3, r7, #20
 8013400:	4611      	mov	r1, r2
 8013402:	4618      	mov	r0, r3
 8013404:	f7fe fa06 	bl	8011814 <inc_lock>
 8013408:	4602      	mov	r2, r0
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	691b      	ldr	r3, [r3, #16]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d102      	bne.n	801341c <f_open+0x22c>
 8013416:	2302      	movs	r3, #2
 8013418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801341c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013420:	2b00      	cmp	r3, #0
 8013422:	f040 80a3 	bne.w	801356c <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801342a:	4611      	mov	r1, r2
 801342c:	4618      	mov	r0, r3
 801342e:	f7ff f8a2 	bl	8012576 <ld_clust>
 8013432:	4602      	mov	r2, r0
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801343a:	331c      	adds	r3, #28
 801343c:	4618      	mov	r0, r3
 801343e:	f7fe f883 	bl	8011548 <ld_dword>
 8013442:	4602      	mov	r2, r0
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2200      	movs	r2, #0
 801344c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801344e:	693a      	ldr	r2, [r7, #16]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	88da      	ldrh	r2, [r3, #6]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	79fa      	ldrb	r2, [r7, #7]
 8013460:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2200      	movs	r2, #0
 8013466:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2200      	movs	r2, #0
 801346c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	2200      	movs	r2, #0
 8013472:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013474:	68fb      	ldr	r3, [r7, #12]
 8013476:	3330      	adds	r3, #48	; 0x30
 8013478:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801347c:	2100      	movs	r1, #0
 801347e:	4618      	mov	r0, r3
 8013480:	f7fe f8ed 	bl	801165e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013484:	79fb      	ldrb	r3, [r7, #7]
 8013486:	f003 0320 	and.w	r3, r3, #32
 801348a:	2b00      	cmp	r3, #0
 801348c:	d06e      	beq.n	801356c <f_open+0x37c>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	68db      	ldr	r3, [r3, #12]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d06a      	beq.n	801356c <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	68da      	ldr	r2, [r3, #12]
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	895b      	ldrh	r3, [r3, #10]
 80134a2:	461a      	mov	r2, r3
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	899b      	ldrh	r3, [r3, #12]
 80134a8:	fb03 f302 	mul.w	r3, r3, r2
 80134ac:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	689b      	ldr	r3, [r3, #8]
 80134b2:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	657b      	str	r3, [r7, #84]	; 0x54
 80134ba:	e016      	b.n	80134ea <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80134c0:	4618      	mov	r0, r3
 80134c2:	f7fe fb96 	bl	8011bf2 <get_fat>
 80134c6:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80134c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d802      	bhi.n	80134d4 <f_open+0x2e4>
 80134ce:	2302      	movs	r3, #2
 80134d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80134d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80134d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134da:	d102      	bne.n	80134e2 <f_open+0x2f2>
 80134dc:	2301      	movs	r3, #1
 80134de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80134e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80134e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134e6:	1ad3      	subs	r3, r2, r3
 80134e8:	657b      	str	r3, [r7, #84]	; 0x54
 80134ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d103      	bne.n	80134fa <f_open+0x30a>
 80134f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80134f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d8e0      	bhi.n	80134bc <f_open+0x2cc>
				}
				fp->clust = clst;
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80134fe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013500:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013504:	2b00      	cmp	r3, #0
 8013506:	d131      	bne.n	801356c <f_open+0x37c>
 8013508:	693b      	ldr	r3, [r7, #16]
 801350a:	899b      	ldrh	r3, [r3, #12]
 801350c:	461a      	mov	r2, r3
 801350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013510:	fbb3 f1f2 	udiv	r1, r3, r2
 8013514:	fb02 f201 	mul.w	r2, r2, r1
 8013518:	1a9b      	subs	r3, r3, r2
 801351a:	2b00      	cmp	r3, #0
 801351c:	d026      	beq.n	801356c <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801351e:	693b      	ldr	r3, [r7, #16]
 8013520:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8013522:	4618      	mov	r0, r3
 8013524:	f7fe fb46 	bl	8011bb4 <clust2sect>
 8013528:	6478      	str	r0, [r7, #68]	; 0x44
 801352a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801352c:	2b00      	cmp	r3, #0
 801352e:	d103      	bne.n	8013538 <f_open+0x348>
						res = FR_INT_ERR;
 8013530:	2302      	movs	r3, #2
 8013532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8013536:	e019      	b.n	801356c <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	899b      	ldrh	r3, [r3, #12]
 801353c:	461a      	mov	r2, r3
 801353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013540:	fbb3 f2f2 	udiv	r2, r3, r2
 8013544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013546:	441a      	add	r2, r3
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	7858      	ldrb	r0, [r3, #1]
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	6a1a      	ldr	r2, [r3, #32]
 801355a:	2301      	movs	r3, #1
 801355c:	f7fd ff7e 	bl	801145c <disk_read>
 8013560:	4603      	mov	r3, r0
 8013562:	2b00      	cmp	r3, #0
 8013564:	d002      	beq.n	801356c <f_open+0x37c>
 8013566:	2301      	movs	r3, #1
 8013568:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801356c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013570:	2b00      	cmp	r3, #0
 8013572:	d002      	beq.n	801357a <f_open+0x38a>
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2200      	movs	r2, #0
 8013578:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801357a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801357e:	4618      	mov	r0, r3
 8013580:	3760      	adds	r7, #96	; 0x60
 8013582:	46bd      	mov	sp, r7
 8013584:	bd80      	pop	{r7, pc}
 8013586:	bf00      	nop
 8013588:	274a0000 	.word	0x274a0000

0801358c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b08e      	sub	sp, #56	; 0x38
 8013590:	af00      	add	r7, sp, #0
 8013592:	60f8      	str	r0, [r7, #12]
 8013594:	60b9      	str	r1, [r7, #8]
 8013596:	607a      	str	r2, [r7, #4]
 8013598:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801359a:	68bb      	ldr	r3, [r7, #8]
 801359c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	2200      	movs	r2, #0
 80135a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f107 0214 	add.w	r2, r7, #20
 80135aa:	4611      	mov	r1, r2
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fda3 	bl	80130f8 <validate>
 80135b2:	4603      	mov	r3, r0
 80135b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80135b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d107      	bne.n	80135d0 <f_read+0x44>
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	7d5b      	ldrb	r3, [r3, #21]
 80135c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80135c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d002      	beq.n	80135d6 <f_read+0x4a>
 80135d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80135d4:	e135      	b.n	8013842 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	7d1b      	ldrb	r3, [r3, #20]
 80135da:	f003 0301 	and.w	r3, r3, #1
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d101      	bne.n	80135e6 <f_read+0x5a>
 80135e2:	2307      	movs	r3, #7
 80135e4:	e12d      	b.n	8013842 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	68da      	ldr	r2, [r3, #12]
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	699b      	ldr	r3, [r3, #24]
 80135ee:	1ad3      	subs	r3, r2, r3
 80135f0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	6a3b      	ldr	r3, [r7, #32]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	f240 811e 	bls.w	8013838 <f_read+0x2ac>
 80135fc:	6a3b      	ldr	r3, [r7, #32]
 80135fe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8013600:	e11a      	b.n	8013838 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	699b      	ldr	r3, [r3, #24]
 8013606:	697a      	ldr	r2, [r7, #20]
 8013608:	8992      	ldrh	r2, [r2, #12]
 801360a:	fbb3 f1f2 	udiv	r1, r3, r2
 801360e:	fb02 f201 	mul.w	r2, r2, r1
 8013612:	1a9b      	subs	r3, r3, r2
 8013614:	2b00      	cmp	r3, #0
 8013616:	f040 80d5 	bne.w	80137c4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	699b      	ldr	r3, [r3, #24]
 801361e:	697a      	ldr	r2, [r7, #20]
 8013620:	8992      	ldrh	r2, [r2, #12]
 8013622:	fbb3 f3f2 	udiv	r3, r3, r2
 8013626:	697a      	ldr	r2, [r7, #20]
 8013628:	8952      	ldrh	r2, [r2, #10]
 801362a:	3a01      	subs	r2, #1
 801362c:	4013      	ands	r3, r2
 801362e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8013630:	69fb      	ldr	r3, [r7, #28]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d12f      	bne.n	8013696 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	699b      	ldr	r3, [r3, #24]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d103      	bne.n	8013646 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	689b      	ldr	r3, [r3, #8]
 8013642:	633b      	str	r3, [r7, #48]	; 0x30
 8013644:	e013      	b.n	801366e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801364a:	2b00      	cmp	r3, #0
 801364c:	d007      	beq.n	801365e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	699b      	ldr	r3, [r3, #24]
 8013652:	4619      	mov	r1, r3
 8013654:	68f8      	ldr	r0, [r7, #12]
 8013656:	f7fe fdb0 	bl	80121ba <clmt_clust>
 801365a:	6338      	str	r0, [r7, #48]	; 0x30
 801365c:	e007      	b.n	801366e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	69db      	ldr	r3, [r3, #28]
 8013664:	4619      	mov	r1, r3
 8013666:	4610      	mov	r0, r2
 8013668:	f7fe fac3 	bl	8011bf2 <get_fat>
 801366c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	2b01      	cmp	r3, #1
 8013672:	d804      	bhi.n	801367e <f_read+0xf2>
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	2202      	movs	r2, #2
 8013678:	755a      	strb	r2, [r3, #21]
 801367a:	2302      	movs	r3, #2
 801367c:	e0e1      	b.n	8013842 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013684:	d104      	bne.n	8013690 <f_read+0x104>
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	2201      	movs	r2, #1
 801368a:	755a      	strb	r2, [r3, #21]
 801368c:	2301      	movs	r3, #1
 801368e:	e0d8      	b.n	8013842 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013694:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	69db      	ldr	r3, [r3, #28]
 801369c:	4619      	mov	r1, r3
 801369e:	4610      	mov	r0, r2
 80136a0:	f7fe fa88 	bl	8011bb4 <clust2sect>
 80136a4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80136a6:	69bb      	ldr	r3, [r7, #24]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d104      	bne.n	80136b6 <f_read+0x12a>
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2202      	movs	r2, #2
 80136b0:	755a      	strb	r2, [r3, #21]
 80136b2:	2302      	movs	r3, #2
 80136b4:	e0c5      	b.n	8013842 <f_read+0x2b6>
			sect += csect;
 80136b6:	69ba      	ldr	r2, [r7, #24]
 80136b8:	69fb      	ldr	r3, [r7, #28]
 80136ba:	4413      	add	r3, r2
 80136bc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	899b      	ldrh	r3, [r3, #12]
 80136c2:	461a      	mov	r2, r3
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80136ca:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80136cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d041      	beq.n	8013756 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80136d2:	69fa      	ldr	r2, [r7, #28]
 80136d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d6:	4413      	add	r3, r2
 80136d8:	697a      	ldr	r2, [r7, #20]
 80136da:	8952      	ldrh	r2, [r2, #10]
 80136dc:	4293      	cmp	r3, r2
 80136de:	d905      	bls.n	80136ec <f_read+0x160>
					cc = fs->csize - csect;
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	895b      	ldrh	r3, [r3, #10]
 80136e4:	461a      	mov	r2, r3
 80136e6:	69fb      	ldr	r3, [r7, #28]
 80136e8:	1ad3      	subs	r3, r2, r3
 80136ea:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136ec:	697b      	ldr	r3, [r7, #20]
 80136ee:	7858      	ldrb	r0, [r3, #1]
 80136f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136f2:	69ba      	ldr	r2, [r7, #24]
 80136f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136f6:	f7fd feb1 	bl	801145c <disk_read>
 80136fa:	4603      	mov	r3, r0
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d004      	beq.n	801370a <f_read+0x17e>
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2201      	movs	r2, #1
 8013704:	755a      	strb	r2, [r3, #21]
 8013706:	2301      	movs	r3, #1
 8013708:	e09b      	b.n	8013842 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	7d1b      	ldrb	r3, [r3, #20]
 801370e:	b25b      	sxtb	r3, r3
 8013710:	2b00      	cmp	r3, #0
 8013712:	da18      	bge.n	8013746 <f_read+0x1ba>
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	6a1a      	ldr	r2, [r3, #32]
 8013718:	69bb      	ldr	r3, [r7, #24]
 801371a:	1ad3      	subs	r3, r2, r3
 801371c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801371e:	429a      	cmp	r2, r3
 8013720:	d911      	bls.n	8013746 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	6a1a      	ldr	r2, [r3, #32]
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	1ad3      	subs	r3, r2, r3
 801372a:	697a      	ldr	r2, [r7, #20]
 801372c:	8992      	ldrh	r2, [r2, #12]
 801372e:	fb02 f303 	mul.w	r3, r2, r3
 8013732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013734:	18d0      	adds	r0, r2, r3
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	899b      	ldrh	r3, [r3, #12]
 8013740:	461a      	mov	r2, r3
 8013742:	f7fd ff6b 	bl	801161c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	899b      	ldrh	r3, [r3, #12]
 801374a:	461a      	mov	r2, r3
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	fb02 f303 	mul.w	r3, r2, r3
 8013752:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8013754:	e05c      	b.n	8013810 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	6a1b      	ldr	r3, [r3, #32]
 801375a:	69ba      	ldr	r2, [r7, #24]
 801375c:	429a      	cmp	r2, r3
 801375e:	d02e      	beq.n	80137be <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	7d1b      	ldrb	r3, [r3, #20]
 8013764:	b25b      	sxtb	r3, r3
 8013766:	2b00      	cmp	r3, #0
 8013768:	da18      	bge.n	801379c <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	7858      	ldrb	r0, [r3, #1]
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	6a1a      	ldr	r2, [r3, #32]
 8013778:	2301      	movs	r3, #1
 801377a:	f7fd fe8f 	bl	801149c <disk_write>
 801377e:	4603      	mov	r3, r0
 8013780:	2b00      	cmp	r3, #0
 8013782:	d004      	beq.n	801378e <f_read+0x202>
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2201      	movs	r2, #1
 8013788:	755a      	strb	r2, [r3, #21]
 801378a:	2301      	movs	r3, #1
 801378c:	e059      	b.n	8013842 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	7d1b      	ldrb	r3, [r3, #20]
 8013792:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013796:	b2da      	uxtb	r2, r3
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	7858      	ldrb	r0, [r3, #1]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137a6:	2301      	movs	r3, #1
 80137a8:	69ba      	ldr	r2, [r7, #24]
 80137aa:	f7fd fe57 	bl	801145c <disk_read>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d004      	beq.n	80137be <f_read+0x232>
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2201      	movs	r2, #1
 80137b8:	755a      	strb	r2, [r3, #21]
 80137ba:	2301      	movs	r3, #1
 80137bc:	e041      	b.n	8013842 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	69ba      	ldr	r2, [r7, #24]
 80137c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80137c4:	697b      	ldr	r3, [r7, #20]
 80137c6:	899b      	ldrh	r3, [r3, #12]
 80137c8:	4618      	mov	r0, r3
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	699b      	ldr	r3, [r3, #24]
 80137ce:	697a      	ldr	r2, [r7, #20]
 80137d0:	8992      	ldrh	r2, [r2, #12]
 80137d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80137d6:	fb02 f201 	mul.w	r2, r2, r1
 80137da:	1a9b      	subs	r3, r3, r2
 80137dc:	1ac3      	subs	r3, r0, r3
 80137de:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80137e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d901      	bls.n	80137ec <f_read+0x260>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	699b      	ldr	r3, [r3, #24]
 80137f6:	697a      	ldr	r2, [r7, #20]
 80137f8:	8992      	ldrh	r2, [r2, #12]
 80137fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80137fe:	fb02 f200 	mul.w	r2, r2, r0
 8013802:	1a9b      	subs	r3, r3, r2
 8013804:	440b      	add	r3, r1
 8013806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013808:	4619      	mov	r1, r3
 801380a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801380c:	f7fd ff06 	bl	801161c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013814:	4413      	add	r3, r2
 8013816:	627b      	str	r3, [r7, #36]	; 0x24
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	699a      	ldr	r2, [r3, #24]
 801381c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381e:	441a      	add	r2, r3
 8013820:	68fb      	ldr	r3, [r7, #12]
 8013822:	619a      	str	r2, [r3, #24]
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	681a      	ldr	r2, [r3, #0]
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	441a      	add	r2, r3
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	601a      	str	r2, [r3, #0]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	f47f aee1 	bne.w	8013602 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8013840:	2300      	movs	r3, #0
}
 8013842:	4618      	mov	r0, r3
 8013844:	3738      	adds	r7, #56	; 0x38
 8013846:	46bd      	mov	sp, r7
 8013848:	bd80      	pop	{r7, pc}

0801384a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801384a:	b580      	push	{r7, lr}
 801384c:	b08c      	sub	sp, #48	; 0x30
 801384e:	af00      	add	r7, sp, #0
 8013850:	60f8      	str	r0, [r7, #12]
 8013852:	60b9      	str	r1, [r7, #8]
 8013854:	607a      	str	r2, [r7, #4]
 8013856:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	2200      	movs	r2, #0
 8013860:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f107 0210 	add.w	r2, r7, #16
 8013868:	4611      	mov	r1, r2
 801386a:	4618      	mov	r0, r3
 801386c:	f7ff fc44 	bl	80130f8 <validate>
 8013870:	4603      	mov	r3, r0
 8013872:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801387a:	2b00      	cmp	r3, #0
 801387c:	d107      	bne.n	801388e <f_write+0x44>
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	7d5b      	ldrb	r3, [r3, #21]
 8013882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801388a:	2b00      	cmp	r3, #0
 801388c:	d002      	beq.n	8013894 <f_write+0x4a>
 801388e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013892:	e16a      	b.n	8013b6a <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	7d1b      	ldrb	r3, [r3, #20]
 8013898:	f003 0302 	and.w	r3, r3, #2
 801389c:	2b00      	cmp	r3, #0
 801389e:	d101      	bne.n	80138a4 <f_write+0x5a>
 80138a0:	2307      	movs	r3, #7
 80138a2:	e162      	b.n	8013b6a <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	699a      	ldr	r2, [r3, #24]
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	441a      	add	r2, r3
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	699b      	ldr	r3, [r3, #24]
 80138b0:	429a      	cmp	r2, r3
 80138b2:	f080 814c 	bcs.w	8013b4e <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	699b      	ldr	r3, [r3, #24]
 80138ba:	43db      	mvns	r3, r3
 80138bc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80138be:	e146      	b.n	8013b4e <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	699b      	ldr	r3, [r3, #24]
 80138c4:	693a      	ldr	r2, [r7, #16]
 80138c6:	8992      	ldrh	r2, [r2, #12]
 80138c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80138cc:	fb02 f201 	mul.w	r2, r2, r1
 80138d0:	1a9b      	subs	r3, r3, r2
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f040 80f1 	bne.w	8013aba <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	699b      	ldr	r3, [r3, #24]
 80138dc:	693a      	ldr	r2, [r7, #16]
 80138de:	8992      	ldrh	r2, [r2, #12]
 80138e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80138e4:	693a      	ldr	r2, [r7, #16]
 80138e6:	8952      	ldrh	r2, [r2, #10]
 80138e8:	3a01      	subs	r2, #1
 80138ea:	4013      	ands	r3, r2
 80138ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d143      	bne.n	801397c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	699b      	ldr	r3, [r3, #24]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d10c      	bne.n	8013916 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	689b      	ldr	r3, [r3, #8]
 8013900:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8013902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013904:	2b00      	cmp	r3, #0
 8013906:	d11a      	bne.n	801393e <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	2100      	movs	r1, #0
 801390c:	4618      	mov	r0, r3
 801390e:	f7fe fbbc 	bl	801208a <create_chain>
 8013912:	62b8      	str	r0, [r7, #40]	; 0x28
 8013914:	e013      	b.n	801393e <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801391a:	2b00      	cmp	r3, #0
 801391c:	d007      	beq.n	801392e <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	699b      	ldr	r3, [r3, #24]
 8013922:	4619      	mov	r1, r3
 8013924:	68f8      	ldr	r0, [r7, #12]
 8013926:	f7fe fc48 	bl	80121ba <clmt_clust>
 801392a:	62b8      	str	r0, [r7, #40]	; 0x28
 801392c:	e007      	b.n	801393e <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	69db      	ldr	r3, [r3, #28]
 8013934:	4619      	mov	r1, r3
 8013936:	4610      	mov	r0, r2
 8013938:	f7fe fba7 	bl	801208a <create_chain>
 801393c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013940:	2b00      	cmp	r3, #0
 8013942:	f000 8109 	beq.w	8013b58 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013948:	2b01      	cmp	r3, #1
 801394a:	d104      	bne.n	8013956 <f_write+0x10c>
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	2202      	movs	r2, #2
 8013950:	755a      	strb	r2, [r3, #21]
 8013952:	2302      	movs	r3, #2
 8013954:	e109      	b.n	8013b6a <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013958:	f1b3 3fff 	cmp.w	r3, #4294967295
 801395c:	d104      	bne.n	8013968 <f_write+0x11e>
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	2201      	movs	r2, #1
 8013962:	755a      	strb	r2, [r3, #21]
 8013964:	2301      	movs	r3, #1
 8013966:	e100      	b.n	8013b6a <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801396c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	689b      	ldr	r3, [r3, #8]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d102      	bne.n	801397c <f_write+0x132>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801397a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	7d1b      	ldrb	r3, [r3, #20]
 8013980:	b25b      	sxtb	r3, r3
 8013982:	2b00      	cmp	r3, #0
 8013984:	da18      	bge.n	80139b8 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	7858      	ldrb	r0, [r3, #1]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	6a1a      	ldr	r2, [r3, #32]
 8013994:	2301      	movs	r3, #1
 8013996:	f7fd fd81 	bl	801149c <disk_write>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d004      	beq.n	80139aa <f_write+0x160>
 80139a0:	68fb      	ldr	r3, [r7, #12]
 80139a2:	2201      	movs	r2, #1
 80139a4:	755a      	strb	r2, [r3, #21]
 80139a6:	2301      	movs	r3, #1
 80139a8:	e0df      	b.n	8013b6a <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	7d1b      	ldrb	r3, [r3, #20]
 80139ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139b2:	b2da      	uxtb	r2, r3
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80139b8:	693a      	ldr	r2, [r7, #16]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	69db      	ldr	r3, [r3, #28]
 80139be:	4619      	mov	r1, r3
 80139c0:	4610      	mov	r0, r2
 80139c2:	f7fe f8f7 	bl	8011bb4 <clust2sect>
 80139c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80139c8:	697b      	ldr	r3, [r7, #20]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d104      	bne.n	80139d8 <f_write+0x18e>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	2202      	movs	r2, #2
 80139d2:	755a      	strb	r2, [r3, #21]
 80139d4:	2302      	movs	r3, #2
 80139d6:	e0c8      	b.n	8013b6a <f_write+0x320>
			sect += csect;
 80139d8:	697a      	ldr	r2, [r7, #20]
 80139da:	69bb      	ldr	r3, [r7, #24]
 80139dc:	4413      	add	r3, r2
 80139de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	899b      	ldrh	r3, [r3, #12]
 80139e4:	461a      	mov	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80139ec:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80139ee:	6a3b      	ldr	r3, [r7, #32]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d043      	beq.n	8013a7c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80139f4:	69ba      	ldr	r2, [r7, #24]
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	4413      	add	r3, r2
 80139fa:	693a      	ldr	r2, [r7, #16]
 80139fc:	8952      	ldrh	r2, [r2, #10]
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d905      	bls.n	8013a0e <f_write+0x1c4>
					cc = fs->csize - csect;
 8013a02:	693b      	ldr	r3, [r7, #16]
 8013a04:	895b      	ldrh	r3, [r3, #10]
 8013a06:	461a      	mov	r2, r3
 8013a08:	69bb      	ldr	r3, [r7, #24]
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	7858      	ldrb	r0, [r3, #1]
 8013a12:	6a3b      	ldr	r3, [r7, #32]
 8013a14:	697a      	ldr	r2, [r7, #20]
 8013a16:	69f9      	ldr	r1, [r7, #28]
 8013a18:	f7fd fd40 	bl	801149c <disk_write>
 8013a1c:	4603      	mov	r3, r0
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d004      	beq.n	8013a2c <f_write+0x1e2>
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	2201      	movs	r2, #1
 8013a26:	755a      	strb	r2, [r3, #21]
 8013a28:	2301      	movs	r3, #1
 8013a2a:	e09e      	b.n	8013b6a <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	6a1a      	ldr	r2, [r3, #32]
 8013a30:	697b      	ldr	r3, [r7, #20]
 8013a32:	1ad3      	subs	r3, r2, r3
 8013a34:	6a3a      	ldr	r2, [r7, #32]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	d918      	bls.n	8013a6c <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	6a1a      	ldr	r2, [r3, #32]
 8013a44:	697b      	ldr	r3, [r7, #20]
 8013a46:	1ad3      	subs	r3, r2, r3
 8013a48:	693a      	ldr	r2, [r7, #16]
 8013a4a:	8992      	ldrh	r2, [r2, #12]
 8013a4c:	fb02 f303 	mul.w	r3, r2, r3
 8013a50:	69fa      	ldr	r2, [r7, #28]
 8013a52:	18d1      	adds	r1, r2, r3
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	899b      	ldrh	r3, [r3, #12]
 8013a58:	461a      	mov	r2, r3
 8013a5a:	f7fd fddf 	bl	801161c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	7d1b      	ldrb	r3, [r3, #20]
 8013a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013a66:	b2da      	uxtb	r2, r3
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013a6c:	693b      	ldr	r3, [r7, #16]
 8013a6e:	899b      	ldrh	r3, [r3, #12]
 8013a70:	461a      	mov	r2, r3
 8013a72:	6a3b      	ldr	r3, [r7, #32]
 8013a74:	fb02 f303 	mul.w	r3, r2, r3
 8013a78:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013a7a:	e04b      	b.n	8013b14 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6a1b      	ldr	r3, [r3, #32]
 8013a80:	697a      	ldr	r2, [r7, #20]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d016      	beq.n	8013ab4 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	699a      	ldr	r2, [r3, #24]
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013a8e:	429a      	cmp	r2, r3
 8013a90:	d210      	bcs.n	8013ab4 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8013a92:	693b      	ldr	r3, [r7, #16]
 8013a94:	7858      	ldrb	r0, [r3, #1]
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013a9c:	2301      	movs	r3, #1
 8013a9e:	697a      	ldr	r2, [r7, #20]
 8013aa0:	f7fd fcdc 	bl	801145c <disk_read>
 8013aa4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d004      	beq.n	8013ab4 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	2201      	movs	r2, #1
 8013aae:	755a      	strb	r2, [r3, #21]
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e05a      	b.n	8013b6a <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	697a      	ldr	r2, [r7, #20]
 8013ab8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	899b      	ldrh	r3, [r3, #12]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	699b      	ldr	r3, [r3, #24]
 8013ac4:	693a      	ldr	r2, [r7, #16]
 8013ac6:	8992      	ldrh	r2, [r2, #12]
 8013ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8013acc:	fb02 f201 	mul.w	r2, r2, r1
 8013ad0:	1a9b      	subs	r3, r3, r2
 8013ad2:	1ac3      	subs	r3, r0, r3
 8013ad4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8013ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	429a      	cmp	r2, r3
 8013adc:	d901      	bls.n	8013ae2 <f_write+0x298>
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	699b      	ldr	r3, [r3, #24]
 8013aec:	693a      	ldr	r2, [r7, #16]
 8013aee:	8992      	ldrh	r2, [r2, #12]
 8013af0:	fbb3 f0f2 	udiv	r0, r3, r2
 8013af4:	fb02 f200 	mul.w	r2, r2, r0
 8013af8:	1a9b      	subs	r3, r3, r2
 8013afa:	440b      	add	r3, r1
 8013afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013afe:	69f9      	ldr	r1, [r7, #28]
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fd fd8b 	bl	801161c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	7d1b      	ldrb	r3, [r3, #20]
 8013b0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013b0e:	b2da      	uxtb	r2, r3
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013b14:	69fa      	ldr	r2, [r7, #28]
 8013b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b18:	4413      	add	r3, r2
 8013b1a:	61fb      	str	r3, [r7, #28]
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	699a      	ldr	r2, [r3, #24]
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	441a      	add	r2, r3
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	619a      	str	r2, [r3, #24]
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	68da      	ldr	r2, [r3, #12]
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	699b      	ldr	r3, [r3, #24]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	bf38      	it	cc
 8013b34:	461a      	movcc	r2, r3
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	60da      	str	r2, [r3, #12]
 8013b3a:	683b      	ldr	r3, [r7, #0]
 8013b3c:	681a      	ldr	r2, [r3, #0]
 8013b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b40:	441a      	add	r2, r3
 8013b42:	683b      	ldr	r3, [r7, #0]
 8013b44:	601a      	str	r2, [r3, #0]
 8013b46:	687a      	ldr	r2, [r7, #4]
 8013b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4a:	1ad3      	subs	r3, r2, r3
 8013b4c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f47f aeb5 	bne.w	80138c0 <f_write+0x76>
 8013b56:	e000      	b.n	8013b5a <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013b58:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	7d1b      	ldrb	r3, [r3, #20]
 8013b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b62:	b2da      	uxtb	r2, r3
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013b68:	2300      	movs	r3, #0
}
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	3730      	adds	r7, #48	; 0x30
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
	...

08013b74 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b086      	sub	sp, #24
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	f107 0208 	add.w	r2, r7, #8
 8013b82:	4611      	mov	r1, r2
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7ff fab7 	bl	80130f8 <validate>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013b8e:	7dfb      	ldrb	r3, [r7, #23]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d167      	bne.n	8013c64 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	7d1b      	ldrb	r3, [r3, #20]
 8013b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d061      	beq.n	8013c64 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	7d1b      	ldrb	r3, [r3, #20]
 8013ba4:	b25b      	sxtb	r3, r3
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	da15      	bge.n	8013bd6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	7858      	ldrb	r0, [r3, #1]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	6a1a      	ldr	r2, [r3, #32]
 8013bb8:	2301      	movs	r3, #1
 8013bba:	f7fd fc6f 	bl	801149c <disk_write>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d001      	beq.n	8013bc8 <f_sync+0x54>
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	e04e      	b.n	8013c66 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	7d1b      	ldrb	r3, [r3, #20]
 8013bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013bd0:	b2da      	uxtb	r2, r3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8013bd6:	4b26      	ldr	r3, [pc, #152]	; (8013c70 <f_sync+0xfc>)
 8013bd8:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013bda:	68ba      	ldr	r2, [r7, #8]
 8013bdc:	687b      	ldr	r3, [r7, #4]
 8013bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013be0:	4619      	mov	r1, r3
 8013be2:	4610      	mov	r0, r2
 8013be4:	f7fd ff48 	bl	8011a78 <move_window>
 8013be8:	4603      	mov	r3, r0
 8013bea:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8013bec:	7dfb      	ldrb	r3, [r7, #23]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d138      	bne.n	8013c64 <f_sync+0xf0>
					dir = fp->dir_ptr;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bf6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	330b      	adds	r3, #11
 8013bfc:	781a      	ldrb	r2, [r3, #0]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	330b      	adds	r3, #11
 8013c02:	f042 0220 	orr.w	r2, r2, #32
 8013c06:	b2d2      	uxtb	r2, r2
 8013c08:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6818      	ldr	r0, [r3, #0]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	689b      	ldr	r3, [r3, #8]
 8013c12:	461a      	mov	r2, r3
 8013c14:	68f9      	ldr	r1, [r7, #12]
 8013c16:	f7fe fccd 	bl	80125b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f103 021c 	add.w	r2, r3, #28
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	68db      	ldr	r3, [r3, #12]
 8013c24:	4619      	mov	r1, r3
 8013c26:	4610      	mov	r0, r2
 8013c28:	f7fd fccc 	bl	80115c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013c2c:	68fb      	ldr	r3, [r7, #12]
 8013c2e:	3316      	adds	r3, #22
 8013c30:	6939      	ldr	r1, [r7, #16]
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fd fcc6 	bl	80115c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	3312      	adds	r3, #18
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f7fd fca5 	bl	801158e <st_word>
					fs->wflag = 1;
 8013c44:	68bb      	ldr	r3, [r7, #8]
 8013c46:	2201      	movs	r2, #1
 8013c48:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fd ff41 	bl	8011ad4 <sync_fs>
 8013c52:	4603      	mov	r3, r0
 8013c54:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	7d1b      	ldrb	r3, [r3, #20]
 8013c5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013c5e:	b2da      	uxtb	r2, r3
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c66:	4618      	mov	r0, r3
 8013c68:	3718      	adds	r7, #24
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	bd80      	pop	{r7, pc}
 8013c6e:	bf00      	nop
 8013c70:	274a0000 	.word	0x274a0000

08013c74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff ff79 	bl	8013b74 <f_sync>
 8013c82:	4603      	mov	r3, r0
 8013c84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013c86:	7bfb      	ldrb	r3, [r7, #15]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d118      	bne.n	8013cbe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f107 0208 	add.w	r2, r7, #8
 8013c92:	4611      	mov	r1, r2
 8013c94:	4618      	mov	r0, r3
 8013c96:	f7ff fa2f 	bl	80130f8 <validate>
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013c9e:	7bfb      	ldrb	r3, [r7, #15]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d10c      	bne.n	8013cbe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	691b      	ldr	r3, [r3, #16]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7fd fe41 	bl	8011930 <dec_lock>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013cb2:	7bfb      	ldrb	r3, [r7, #15]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d102      	bne.n	8013cbe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3710      	adds	r7, #16
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	bd80      	pop	{r7, pc}

08013cc8 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013cc8:	b590      	push	{r4, r7, lr}
 8013cca:	b091      	sub	sp, #68	; 0x44
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013cd0:	f107 0108 	add.w	r1, r7, #8
 8013cd4:	1d3b      	adds	r3, r7, #4
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7fe ff87 	bl	8012bec <find_volume>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8013ce4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d131      	bne.n	8013d50 <f_chdir+0x88>
		dj.obj.fs = fs;
 8013cec:	68bb      	ldr	r3, [r7, #8]
 8013cee:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	f107 030c 	add.w	r3, r7, #12
 8013cf6:	4611      	mov	r1, r2
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fe fe47 	bl	801298c <follow_path>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013d04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d11a      	bne.n	8013d42 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013d0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013d10:	b25b      	sxtb	r3, r3
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	da03      	bge.n	8013d1e <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	697a      	ldr	r2, [r7, #20]
 8013d1a:	619a      	str	r2, [r3, #24]
 8013d1c:	e011      	b.n	8013d42 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 8013d1e:	7cbb      	ldrb	r3, [r7, #18]
 8013d20:	f003 0310 	and.w	r3, r3, #16
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d009      	beq.n	8013d3c <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d2c:	68bc      	ldr	r4, [r7, #8]
 8013d2e:	4611      	mov	r1, r2
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fe fc20 	bl	8012576 <ld_clust>
 8013d36:	4603      	mov	r3, r0
 8013d38:	61a3      	str	r3, [r4, #24]
 8013d3a:	e002      	b.n	8013d42 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013d3c:	2305      	movs	r3, #5
 8013d3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8013d42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d46:	2b04      	cmp	r3, #4
 8013d48:	d102      	bne.n	8013d50 <f_chdir+0x88>
 8013d4a:	2305      	movs	r3, #5
 8013d4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013d50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013d54:	4618      	mov	r0, r3
 8013d56:	3744      	adds	r7, #68	; 0x44
 8013d58:	46bd      	mov	sp, r7
 8013d5a:	bd90      	pop	{r4, r7, pc}

08013d5c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b090      	sub	sp, #64	; 0x40
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	f107 0208 	add.w	r2, r7, #8
 8013d6c:	4611      	mov	r1, r2
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f7ff f9c2 	bl	80130f8 <validate>
 8013d74:	4603      	mov	r3, r0
 8013d76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d103      	bne.n	8013d8a <f_lseek+0x2e>
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	7d5b      	ldrb	r3, [r3, #21]
 8013d86:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013d8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d002      	beq.n	8013d98 <f_lseek+0x3c>
 8013d92:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013d96:	e201      	b.n	801419c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	f000 80d9 	beq.w	8013f54 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8013da2:	683b      	ldr	r3, [r7, #0]
 8013da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013da8:	d15a      	bne.n	8013e60 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013dae:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db2:	1d1a      	adds	r2, r3, #4
 8013db4:	627a      	str	r2, [r7, #36]	; 0x24
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	617b      	str	r3, [r7, #20]
 8013dba:	2302      	movs	r3, #2
 8013dbc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	689b      	ldr	r3, [r3, #8]
 8013dc2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d03a      	beq.n	8013e40 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dcc:	613b      	str	r3, [r7, #16]
 8013dce:	2300      	movs	r3, #0
 8013dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dd4:	3302      	adds	r3, #2
 8013dd6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dda:	60fb      	str	r3, [r7, #12]
 8013ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dde:	3301      	adds	r3, #1
 8013de0:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7fd ff03 	bl	8011bf2 <get_fat>
 8013dec:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8013dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013df0:	2b01      	cmp	r3, #1
 8013df2:	d804      	bhi.n	8013dfe <f_lseek+0xa2>
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2202      	movs	r2, #2
 8013df8:	755a      	strb	r2, [r3, #21]
 8013dfa:	2302      	movs	r3, #2
 8013dfc:	e1ce      	b.n	801419c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e04:	d104      	bne.n	8013e10 <f_lseek+0xb4>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2201      	movs	r2, #1
 8013e0a:	755a      	strb	r2, [r3, #21]
 8013e0c:	2301      	movs	r3, #1
 8013e0e:	e1c5      	b.n	801419c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	3301      	adds	r3, #1
 8013e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d0de      	beq.n	8013dd8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	429a      	cmp	r2, r3
 8013e20:	d809      	bhi.n	8013e36 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8013e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e24:	1d1a      	adds	r2, r3, #4
 8013e26:	627a      	str	r2, [r7, #36]	; 0x24
 8013e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e2a:	601a      	str	r2, [r3, #0]
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	1d1a      	adds	r2, r3, #4
 8013e30:	627a      	str	r2, [r7, #36]	; 0x24
 8013e32:	693a      	ldr	r2, [r7, #16]
 8013e34:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	69db      	ldr	r3, [r3, #28]
 8013e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013e3c:	429a      	cmp	r2, r3
 8013e3e:	d3c4      	bcc.n	8013dca <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e46:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013e4a:	697b      	ldr	r3, [r7, #20]
 8013e4c:	429a      	cmp	r2, r3
 8013e4e:	d803      	bhi.n	8013e58 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e52:	2200      	movs	r2, #0
 8013e54:	601a      	str	r2, [r3, #0]
 8013e56:	e19f      	b.n	8014198 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013e58:	2311      	movs	r3, #17
 8013e5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013e5e:	e19b      	b.n	8014198 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	683a      	ldr	r2, [r7, #0]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d902      	bls.n	8013e70 <f_lseek+0x114>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	68db      	ldr	r3, [r3, #12]
 8013e6e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	683a      	ldr	r2, [r7, #0]
 8013e74:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	f000 818d 	beq.w	8014198 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013e7e:	683b      	ldr	r3, [r7, #0]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	4619      	mov	r1, r3
 8013e84:	6878      	ldr	r0, [r7, #4]
 8013e86:	f7fe f998 	bl	80121ba <clmt_clust>
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013e90:	68ba      	ldr	r2, [r7, #8]
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	69db      	ldr	r3, [r3, #28]
 8013e96:	4619      	mov	r1, r3
 8013e98:	4610      	mov	r0, r2
 8013e9a:	f7fd fe8b 	bl	8011bb4 <clust2sect>
 8013e9e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013ea0:	69bb      	ldr	r3, [r7, #24]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d104      	bne.n	8013eb0 <f_lseek+0x154>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2202      	movs	r2, #2
 8013eaa:	755a      	strb	r2, [r3, #21]
 8013eac:	2302      	movs	r3, #2
 8013eae:	e175      	b.n	801419c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013eb0:	683b      	ldr	r3, [r7, #0]
 8013eb2:	3b01      	subs	r3, #1
 8013eb4:	68ba      	ldr	r2, [r7, #8]
 8013eb6:	8992      	ldrh	r2, [r2, #12]
 8013eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ebc:	68ba      	ldr	r2, [r7, #8]
 8013ebe:	8952      	ldrh	r2, [r2, #10]
 8013ec0:	3a01      	subs	r2, #1
 8013ec2:	4013      	ands	r3, r2
 8013ec4:	69ba      	ldr	r2, [r7, #24]
 8013ec6:	4413      	add	r3, r2
 8013ec8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	699b      	ldr	r3, [r3, #24]
 8013ece:	68ba      	ldr	r2, [r7, #8]
 8013ed0:	8992      	ldrh	r2, [r2, #12]
 8013ed2:	fbb3 f1f2 	udiv	r1, r3, r2
 8013ed6:	fb02 f201 	mul.w	r2, r2, r1
 8013eda:	1a9b      	subs	r3, r3, r2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	f000 815b 	beq.w	8014198 <f_lseek+0x43c>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6a1b      	ldr	r3, [r3, #32]
 8013ee6:	69ba      	ldr	r2, [r7, #24]
 8013ee8:	429a      	cmp	r2, r3
 8013eea:	f000 8155 	beq.w	8014198 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	7d1b      	ldrb	r3, [r3, #20]
 8013ef2:	b25b      	sxtb	r3, r3
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	da18      	bge.n	8013f2a <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	7858      	ldrb	r0, [r3, #1]
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6a1a      	ldr	r2, [r3, #32]
 8013f06:	2301      	movs	r3, #1
 8013f08:	f7fd fac8 	bl	801149c <disk_write>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d004      	beq.n	8013f1c <f_lseek+0x1c0>
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2201      	movs	r2, #1
 8013f16:	755a      	strb	r2, [r3, #21]
 8013f18:	2301      	movs	r3, #1
 8013f1a:	e13f      	b.n	801419c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	7d1b      	ldrb	r3, [r3, #20]
 8013f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013f24:	b2da      	uxtb	r2, r3
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013f2a:	68bb      	ldr	r3, [r7, #8]
 8013f2c:	7858      	ldrb	r0, [r3, #1]
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013f34:	2301      	movs	r3, #1
 8013f36:	69ba      	ldr	r2, [r7, #24]
 8013f38:	f7fd fa90 	bl	801145c <disk_read>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d004      	beq.n	8013f4c <f_lseek+0x1f0>
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2201      	movs	r2, #1
 8013f46:	755a      	strb	r2, [r3, #21]
 8013f48:	2301      	movs	r3, #1
 8013f4a:	e127      	b.n	801419c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	69ba      	ldr	r2, [r7, #24]
 8013f50:	621a      	str	r2, [r3, #32]
 8013f52:	e121      	b.n	8014198 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	68db      	ldr	r3, [r3, #12]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	429a      	cmp	r2, r3
 8013f5c:	d908      	bls.n	8013f70 <f_lseek+0x214>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	7d1b      	ldrb	r3, [r3, #20]
 8013f62:	f003 0302 	and.w	r3, r3, #2
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d102      	bne.n	8013f70 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	68db      	ldr	r3, [r3, #12]
 8013f6e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	699b      	ldr	r3, [r3, #24]
 8013f74:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013f76:	2300      	movs	r3, #0
 8013f78:	637b      	str	r3, [r7, #52]	; 0x34
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013f7e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	f000 80b5 	beq.w	80140f2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013f88:	68bb      	ldr	r3, [r7, #8]
 8013f8a:	895b      	ldrh	r3, [r3, #10]
 8013f8c:	461a      	mov	r2, r3
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	899b      	ldrh	r3, [r3, #12]
 8013f92:	fb03 f302 	mul.w	r3, r3, r2
 8013f96:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013f98:	6a3b      	ldr	r3, [r7, #32]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d01b      	beq.n	8013fd6 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013f9e:	683b      	ldr	r3, [r7, #0]
 8013fa0:	1e5a      	subs	r2, r3, #1
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8013fa8:	6a3b      	ldr	r3, [r7, #32]
 8013faa:	1e59      	subs	r1, r3, #1
 8013fac:	69fb      	ldr	r3, [r7, #28]
 8013fae:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013fb2:	429a      	cmp	r2, r3
 8013fb4:	d30f      	bcc.n	8013fd6 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013fb6:	6a3b      	ldr	r3, [r7, #32]
 8013fb8:	1e5a      	subs	r2, r3, #1
 8013fba:	69fb      	ldr	r3, [r7, #28]
 8013fbc:	425b      	negs	r3, r3
 8013fbe:	401a      	ands	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	699b      	ldr	r3, [r3, #24]
 8013fc8:	683a      	ldr	r2, [r7, #0]
 8013fca:	1ad3      	subs	r3, r2, r3
 8013fcc:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	69db      	ldr	r3, [r3, #28]
 8013fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8013fd4:	e022      	b.n	801401c <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	689b      	ldr	r3, [r3, #8]
 8013fda:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d119      	bne.n	8014016 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7fe f84f 	bl	801208a <create_chain>
 8013fec:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d104      	bne.n	8013ffe <f_lseek+0x2a2>
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	2202      	movs	r2, #2
 8013ff8:	755a      	strb	r2, [r3, #21]
 8013ffa:	2302      	movs	r3, #2
 8013ffc:	e0ce      	b.n	801419c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014004:	d104      	bne.n	8014010 <f_lseek+0x2b4>
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	2201      	movs	r2, #1
 801400a:	755a      	strb	r2, [r3, #21]
 801400c:	2301      	movs	r3, #1
 801400e:	e0c5      	b.n	801419c <f_lseek+0x440>
					fp->obj.sclust = clst;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014014:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801401a:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801401c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801401e:	2b00      	cmp	r3, #0
 8014020:	d067      	beq.n	80140f2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8014022:	e03a      	b.n	801409a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8014024:	683a      	ldr	r2, [r7, #0]
 8014026:	69fb      	ldr	r3, [r7, #28]
 8014028:	1ad3      	subs	r3, r2, r3
 801402a:	603b      	str	r3, [r7, #0]
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	699a      	ldr	r2, [r3, #24]
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	441a      	add	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	7d1b      	ldrb	r3, [r3, #20]
 801403c:	f003 0302 	and.w	r3, r3, #2
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00b      	beq.n	801405c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014048:	4618      	mov	r0, r3
 801404a:	f7fe f81e 	bl	801208a <create_chain>
 801404e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014052:	2b00      	cmp	r3, #0
 8014054:	d108      	bne.n	8014068 <f_lseek+0x30c>
							ofs = 0; break;
 8014056:	2300      	movs	r3, #0
 8014058:	603b      	str	r3, [r7, #0]
 801405a:	e022      	b.n	80140a2 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014060:	4618      	mov	r0, r3
 8014062:	f7fd fdc6 	bl	8011bf2 <get_fat>
 8014066:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801406e:	d104      	bne.n	801407a <f_lseek+0x31e>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2201      	movs	r2, #1
 8014074:	755a      	strb	r2, [r3, #21]
 8014076:	2301      	movs	r3, #1
 8014078:	e090      	b.n	801419c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 801407a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801407c:	2b01      	cmp	r3, #1
 801407e:	d904      	bls.n	801408a <f_lseek+0x32e>
 8014080:	68bb      	ldr	r3, [r7, #8]
 8014082:	69db      	ldr	r3, [r3, #28]
 8014084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014086:	429a      	cmp	r2, r3
 8014088:	d304      	bcc.n	8014094 <f_lseek+0x338>
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2202      	movs	r2, #2
 801408e:	755a      	strb	r2, [r3, #21]
 8014090:	2302      	movs	r3, #2
 8014092:	e083      	b.n	801419c <f_lseek+0x440>
					fp->clust = clst;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014098:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801409a:	683a      	ldr	r2, [r7, #0]
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	429a      	cmp	r2, r3
 80140a0:	d8c0      	bhi.n	8014024 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	699a      	ldr	r2, [r3, #24]
 80140a6:	683b      	ldr	r3, [r7, #0]
 80140a8:	441a      	add	r2, r3
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	899b      	ldrh	r3, [r3, #12]
 80140b2:	461a      	mov	r2, r3
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80140ba:	fb02 f201 	mul.w	r2, r2, r1
 80140be:	1a9b      	subs	r3, r3, r2
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d016      	beq.n	80140f2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80140c4:	68bb      	ldr	r3, [r7, #8]
 80140c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80140c8:	4618      	mov	r0, r3
 80140ca:	f7fd fd73 	bl	8011bb4 <clust2sect>
 80140ce:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80140d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d104      	bne.n	80140e0 <f_lseek+0x384>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2202      	movs	r2, #2
 80140da:	755a      	strb	r2, [r3, #21]
 80140dc:	2302      	movs	r3, #2
 80140de:	e05d      	b.n	801419c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	899b      	ldrh	r3, [r3, #12]
 80140e4:	461a      	mov	r2, r3
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80140ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80140ee:	4413      	add	r3, r2
 80140f0:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	699a      	ldr	r2, [r3, #24]
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	68db      	ldr	r3, [r3, #12]
 80140fa:	429a      	cmp	r2, r3
 80140fc:	d90a      	bls.n	8014114 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	699a      	ldr	r2, [r3, #24]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	7d1b      	ldrb	r3, [r3, #20]
 801410a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801410e:	b2da      	uxtb	r2, r3
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	699b      	ldr	r3, [r3, #24]
 8014118:	68ba      	ldr	r2, [r7, #8]
 801411a:	8992      	ldrh	r2, [r2, #12]
 801411c:	fbb3 f1f2 	udiv	r1, r3, r2
 8014120:	fb02 f201 	mul.w	r2, r2, r1
 8014124:	1a9b      	subs	r3, r3, r2
 8014126:	2b00      	cmp	r3, #0
 8014128:	d036      	beq.n	8014198 <f_lseek+0x43c>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6a1b      	ldr	r3, [r3, #32]
 801412e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014130:	429a      	cmp	r2, r3
 8014132:	d031      	beq.n	8014198 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	7d1b      	ldrb	r3, [r3, #20]
 8014138:	b25b      	sxtb	r3, r3
 801413a:	2b00      	cmp	r3, #0
 801413c:	da18      	bge.n	8014170 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	7858      	ldrb	r0, [r3, #1]
 8014142:	687b      	ldr	r3, [r7, #4]
 8014144:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	6a1a      	ldr	r2, [r3, #32]
 801414c:	2301      	movs	r3, #1
 801414e:	f7fd f9a5 	bl	801149c <disk_write>
 8014152:	4603      	mov	r3, r0
 8014154:	2b00      	cmp	r3, #0
 8014156:	d004      	beq.n	8014162 <f_lseek+0x406>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2201      	movs	r2, #1
 801415c:	755a      	strb	r2, [r3, #21]
 801415e:	2301      	movs	r3, #1
 8014160:	e01c      	b.n	801419c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	7d1b      	ldrb	r3, [r3, #20]
 8014166:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801416a:	b2da      	uxtb	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014170:	68bb      	ldr	r3, [r7, #8]
 8014172:	7858      	ldrb	r0, [r3, #1]
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801417a:	2301      	movs	r3, #1
 801417c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801417e:	f7fd f96d 	bl	801145c <disk_read>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d004      	beq.n	8014192 <f_lseek+0x436>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2201      	movs	r2, #1
 801418c:	755a      	strb	r2, [r3, #21]
 801418e:	2301      	movs	r3, #1
 8014190:	e004      	b.n	801419c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8014192:	687b      	ldr	r3, [r7, #4]
 8014194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014196:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014198:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801419c:	4618      	mov	r0, r3
 801419e:	3740      	adds	r7, #64	; 0x40
 80141a0:	46bd      	mov	sp, r7
 80141a2:	bd80      	pop	{r7, pc}

080141a4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b09e      	sub	sp, #120	; 0x78
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80141ac:	2300      	movs	r3, #0
 80141ae:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80141b0:	f107 010c 	add.w	r1, r7, #12
 80141b4:	1d3b      	adds	r3, r7, #4
 80141b6:	2202      	movs	r2, #2
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fe fd17 	bl	8012bec <find_volume>
 80141be:	4603      	mov	r3, r0
 80141c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80141c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	f040 80a4 	bne.w	801431a <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80141d2:	687a      	ldr	r2, [r7, #4]
 80141d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80141d8:	4611      	mov	r1, r2
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fe fbd6 	bl	801298c <follow_path>
 80141e0:	4603      	mov	r3, r0
 80141e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80141e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d108      	bne.n	8014200 <f_unlink+0x5c>
 80141ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80141f2:	f003 0320 	and.w	r3, r3, #32
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d002      	beq.n	8014200 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80141fa:	2306      	movs	r3, #6
 80141fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8014200:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014204:	2b00      	cmp	r3, #0
 8014206:	d108      	bne.n	801421a <f_unlink+0x76>
 8014208:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801420c:	2102      	movs	r1, #2
 801420e:	4618      	mov	r0, r3
 8014210:	f7fd fa82 	bl	8011718 <chk_lock>
 8014214:	4603      	mov	r3, r0
 8014216:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 801421a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801421e:	2b00      	cmp	r3, #0
 8014220:	d17b      	bne.n	801431a <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8014222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8014226:	b25b      	sxtb	r3, r3
 8014228:	2b00      	cmp	r3, #0
 801422a:	da03      	bge.n	8014234 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801422c:	2306      	movs	r3, #6
 801422e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014232:	e008      	b.n	8014246 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8014234:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014238:	f003 0301 	and.w	r3, r3, #1
 801423c:	2b00      	cmp	r3, #0
 801423e:	d002      	beq.n	8014246 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8014240:	2307      	movs	r3, #7
 8014242:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8014246:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801424a:	2b00      	cmp	r3, #0
 801424c:	d13d      	bne.n	80142ca <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014252:	4611      	mov	r1, r2
 8014254:	4618      	mov	r0, r3
 8014256:	f7fe f98e 	bl	8012576 <ld_clust>
 801425a:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 801425c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8014260:	f003 0310 	and.w	r3, r3, #16
 8014264:	2b00      	cmp	r3, #0
 8014266:	d030      	beq.n	80142ca <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	699b      	ldr	r3, [r3, #24]
 801426c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801426e:	429a      	cmp	r2, r3
 8014270:	d103      	bne.n	801427a <f_unlink+0xd6>
						res = FR_DENIED;
 8014272:	2307      	movs	r3, #7
 8014274:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8014278:	e027      	b.n	80142ca <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801427e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014280:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8014282:	f107 0310 	add.w	r3, r7, #16
 8014286:	2100      	movs	r1, #0
 8014288:	4618      	mov	r0, r3
 801428a:	f7fd ffce 	bl	801222a <dir_sdi>
 801428e:	4603      	mov	r3, r0
 8014290:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8014294:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014298:	2b00      	cmp	r3, #0
 801429a:	d116      	bne.n	80142ca <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 801429c:	f107 0310 	add.w	r3, r7, #16
 80142a0:	2100      	movs	r1, #0
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7fe f9a6 	bl	80125f4 <dir_read>
 80142a8:	4603      	mov	r3, r0
 80142aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80142ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d102      	bne.n	80142bc <f_unlink+0x118>
 80142b6:	2307      	movs	r3, #7
 80142b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80142bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142c0:	2b04      	cmp	r3, #4
 80142c2:	d102      	bne.n	80142ca <f_unlink+0x126>
 80142c4:	2300      	movs	r3, #0
 80142c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 80142ca:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d123      	bne.n	801431a <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80142d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80142d6:	4618      	mov	r0, r3
 80142d8:	f7fe fa70 	bl	80127bc <dir_remove>
 80142dc:	4603      	mov	r3, r0
 80142de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80142e2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d10c      	bne.n	8014304 <f_unlink+0x160>
 80142ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d009      	beq.n	8014304 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80142f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80142f4:	2200      	movs	r2, #0
 80142f6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80142f8:	4618      	mov	r0, r3
 80142fa:	f7fd fe61 	bl	8011fc0 <remove_chain>
 80142fe:	4603      	mov	r3, r0
 8014300:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8014304:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8014308:	2b00      	cmp	r3, #0
 801430a:	d106      	bne.n	801431a <f_unlink+0x176>
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	4618      	mov	r0, r3
 8014310:	f7fd fbe0 	bl	8011ad4 <sync_fs>
 8014314:	4603      	mov	r3, r0
 8014316:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801431a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 801431e:	4618      	mov	r0, r3
 8014320:	3778      	adds	r7, #120	; 0x78
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}
	...

08014328 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014328:	b580      	push	{r7, lr}
 801432a:	b096      	sub	sp, #88	; 0x58
 801432c:	af00      	add	r7, sp, #0
 801432e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014330:	f107 0108 	add.w	r1, r7, #8
 8014334:	1d3b      	adds	r3, r7, #4
 8014336:	2202      	movs	r2, #2
 8014338:	4618      	mov	r0, r3
 801433a:	f7fe fc57 	bl	8012bec <find_volume>
 801433e:	4603      	mov	r3, r0
 8014340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8014348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801434c:	2b00      	cmp	r3, #0
 801434e:	f040 80fe 	bne.w	801454e <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8014352:	687a      	ldr	r2, [r7, #4]
 8014354:	f107 030c 	add.w	r3, r7, #12
 8014358:	4611      	mov	r1, r2
 801435a:	4618      	mov	r0, r3
 801435c:	f7fe fb16 	bl	801298c <follow_path>
 8014360:	4603      	mov	r3, r0
 8014362:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014366:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801436a:	2b00      	cmp	r3, #0
 801436c:	d102      	bne.n	8014374 <f_mkdir+0x4c>
 801436e:	2308      	movs	r3, #8
 8014370:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8014374:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014378:	2b04      	cmp	r3, #4
 801437a:	d108      	bne.n	801438e <f_mkdir+0x66>
 801437c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8014380:	f003 0320 	and.w	r3, r3, #32
 8014384:	2b00      	cmp	r3, #0
 8014386:	d002      	beq.n	801438e <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8014388:	2306      	movs	r3, #6
 801438a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801438e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014392:	2b04      	cmp	r3, #4
 8014394:	f040 80db 	bne.w	801454e <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8014398:	f107 030c 	add.w	r3, r7, #12
 801439c:	2100      	movs	r1, #0
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fd fe73 	bl	801208a <create_chain>
 80143a4:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	895b      	ldrh	r3, [r3, #10]
 80143aa:	461a      	mov	r2, r3
 80143ac:	68bb      	ldr	r3, [r7, #8]
 80143ae:	899b      	ldrh	r3, [r3, #12]
 80143b0:	fb03 f302 	mul.w	r3, r3, r2
 80143b4:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 80143b6:	2300      	movs	r3, #0
 80143b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80143bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d102      	bne.n	80143c8 <f_mkdir+0xa0>
 80143c2:	2307      	movs	r3, #7
 80143c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80143c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143ca:	2b01      	cmp	r3, #1
 80143cc:	d102      	bne.n	80143d4 <f_mkdir+0xac>
 80143ce:	2302      	movs	r3, #2
 80143d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80143d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143da:	d102      	bne.n	80143e2 <f_mkdir+0xba>
 80143dc:	2301      	movs	r3, #1
 80143de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80143e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d106      	bne.n	80143f8 <f_mkdir+0xd0>
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7fd faff 	bl	80119f0 <sync_window>
 80143f2:	4603      	mov	r3, r0
 80143f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80143f8:	4b58      	ldr	r3, [pc, #352]	; (801455c <f_mkdir+0x234>)
 80143fa:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80143fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014400:	2b00      	cmp	r3, #0
 8014402:	d16c      	bne.n	80144de <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014408:	4618      	mov	r0, r3
 801440a:	f7fd fbd3 	bl	8011bb4 <clust2sect>
 801440e:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8014410:	68bb      	ldr	r3, [r7, #8]
 8014412:	3338      	adds	r3, #56	; 0x38
 8014414:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	899b      	ldrh	r3, [r3, #12]
 801441a:	461a      	mov	r2, r3
 801441c:	2100      	movs	r1, #0
 801441e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014420:	f7fd f91d 	bl	801165e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8014424:	220b      	movs	r2, #11
 8014426:	2120      	movs	r1, #32
 8014428:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801442a:	f7fd f918 	bl	801165e <mem_set>
					dir[DIR_Name] = '.';
 801442e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014430:	222e      	movs	r2, #46	; 0x2e
 8014432:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8014434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014436:	330b      	adds	r3, #11
 8014438:	2210      	movs	r2, #16
 801443a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801443c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801443e:	3316      	adds	r3, #22
 8014440:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014442:	4618      	mov	r0, r3
 8014444:	f7fd f8be 	bl	80115c4 <st_dword>
					st_clust(fs, dir, dcl);
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801444c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801444e:	4618      	mov	r0, r3
 8014450:	f7fe f8b0 	bl	80125b4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8014454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014456:	3320      	adds	r3, #32
 8014458:	2220      	movs	r2, #32
 801445a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801445c:	4618      	mov	r0, r3
 801445e:	f7fd f8dd 	bl	801161c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8014462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014464:	3321      	adds	r3, #33	; 0x21
 8014466:	222e      	movs	r2, #46	; 0x2e
 8014468:	701a      	strb	r2, [r3, #0]
 801446a:	697b      	ldr	r3, [r7, #20]
 801446c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801446e:	68bb      	ldr	r3, [r7, #8]
 8014470:	781b      	ldrb	r3, [r3, #0]
 8014472:	2b03      	cmp	r3, #3
 8014474:	d106      	bne.n	8014484 <f_mkdir+0x15c>
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801447a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801447c:	429a      	cmp	r2, r3
 801447e:	d101      	bne.n	8014484 <f_mkdir+0x15c>
 8014480:	2300      	movs	r3, #0
 8014482:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8014484:	68b8      	ldr	r0, [r7, #8]
 8014486:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014488:	3320      	adds	r3, #32
 801448a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801448c:	4619      	mov	r1, r3
 801448e:	f7fe f891 	bl	80125b4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8014492:	68bb      	ldr	r3, [r7, #8]
 8014494:	895b      	ldrh	r3, [r3, #10]
 8014496:	653b      	str	r3, [r7, #80]	; 0x50
 8014498:	e01c      	b.n	80144d4 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 801449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801449c:	1c5a      	adds	r2, r3, #1
 801449e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 80144a4:	68bb      	ldr	r3, [r7, #8]
 80144a6:	2201      	movs	r2, #1
 80144a8:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80144aa:	68bb      	ldr	r3, [r7, #8]
 80144ac:	4618      	mov	r0, r3
 80144ae:	f7fd fa9f 	bl	80119f0 <sync_window>
 80144b2:	4603      	mov	r3, r0
 80144b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 80144b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10d      	bne.n	80144dc <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 80144c0:	68bb      	ldr	r3, [r7, #8]
 80144c2:	899b      	ldrh	r3, [r3, #12]
 80144c4:	461a      	mov	r2, r3
 80144c6:	2100      	movs	r1, #0
 80144c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80144ca:	f7fd f8c8 	bl	801165e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80144ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144d0:	3b01      	subs	r3, #1
 80144d2:	653b      	str	r3, [r7, #80]	; 0x50
 80144d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d1df      	bne.n	801449a <f_mkdir+0x172>
 80144da:	e000      	b.n	80144de <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 80144dc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80144de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d107      	bne.n	80144f6 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80144e6:	f107 030c 	add.w	r3, r7, #12
 80144ea:	4618      	mov	r0, r3
 80144ec:	f7fe f934 	bl	8012758 <dir_register>
 80144f0:	4603      	mov	r3, r0
 80144f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80144f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d120      	bne.n	8014540 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80144fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014500:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8014502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014504:	3316      	adds	r3, #22
 8014506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014508:	4618      	mov	r0, r3
 801450a:	f7fd f85b 	bl	80115c4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014512:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014514:	4618      	mov	r0, r3
 8014516:	f7fe f84d 	bl	80125b4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801451c:	330b      	adds	r3, #11
 801451e:	2210      	movs	r2, #16
 8014520:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	2201      	movs	r2, #1
 8014526:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8014528:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801452c:	2b00      	cmp	r3, #0
 801452e:	d10e      	bne.n	801454e <f_mkdir+0x226>
					res = sync_fs(fs);
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	4618      	mov	r0, r3
 8014534:	f7fd face 	bl	8011ad4 <sync_fs>
 8014538:	4603      	mov	r3, r0
 801453a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 801453e:	e006      	b.n	801454e <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8014540:	f107 030c 	add.w	r3, r7, #12
 8014544:	2200      	movs	r2, #0
 8014546:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014548:	4618      	mov	r0, r3
 801454a:	f7fd fd39 	bl	8011fc0 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 801454e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8014552:	4618      	mov	r0, r3
 8014554:	3758      	adds	r7, #88	; 0x58
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	274a0000 	.word	0x274a0000

08014560 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b088      	sub	sp, #32
 8014564:	af00      	add	r7, sp, #0
 8014566:	60f8      	str	r0, [r7, #12]
 8014568:	60b9      	str	r1, [r7, #8]
 801456a:	607a      	str	r2, [r7, #4]
	int n = 0;
 801456c:	2300      	movs	r3, #0
 801456e:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014574:	e017      	b.n	80145a6 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014576:	f107 0310 	add.w	r3, r7, #16
 801457a:	f107 0114 	add.w	r1, r7, #20
 801457e:	2201      	movs	r2, #1
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f7ff f803 	bl	801358c <f_read>
		if (rc != 1) break;
 8014586:	693b      	ldr	r3, [r7, #16]
 8014588:	2b01      	cmp	r3, #1
 801458a:	d112      	bne.n	80145b2 <f_gets+0x52>
		c = s[0];
 801458c:	7d3b      	ldrb	r3, [r7, #20]
 801458e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	1c5a      	adds	r2, r3, #1
 8014594:	61ba      	str	r2, [r7, #24]
 8014596:	7dfa      	ldrb	r2, [r7, #23]
 8014598:	701a      	strb	r2, [r3, #0]
		n++;
 801459a:	69fb      	ldr	r3, [r7, #28]
 801459c:	3301      	adds	r3, #1
 801459e:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80145a0:	7dfb      	ldrb	r3, [r7, #23]
 80145a2:	2b0a      	cmp	r3, #10
 80145a4:	d007      	beq.n	80145b6 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	69fa      	ldr	r2, [r7, #28]
 80145ac:	429a      	cmp	r2, r3
 80145ae:	dbe2      	blt.n	8014576 <f_gets+0x16>
 80145b0:	e002      	b.n	80145b8 <f_gets+0x58>
		if (rc != 1) break;
 80145b2:	bf00      	nop
 80145b4:	e000      	b.n	80145b8 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 80145b6:	bf00      	nop
	}
	*p = 0;
 80145b8:	69bb      	ldr	r3, [r7, #24]
 80145ba:	2200      	movs	r2, #0
 80145bc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80145be:	69fb      	ldr	r3, [r7, #28]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d001      	beq.n	80145c8 <f_gets+0x68>
 80145c4:	68fb      	ldr	r3, [r7, #12]
 80145c6:	e000      	b.n	80145ca <f_gets+0x6a>
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3720      	adds	r7, #32
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
	...

080145d4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80145d4:	b480      	push	{r7}
 80145d6:	b087      	sub	sp, #28
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	4613      	mov	r3, r2
 80145e0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80145e2:	2301      	movs	r3, #1
 80145e4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80145e6:	2300      	movs	r3, #0
 80145e8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80145ea:	4b1f      	ldr	r3, [pc, #124]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 80145ec:	7a5b      	ldrb	r3, [r3, #9]
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d131      	bne.n	8014658 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80145f4:	4b1c      	ldr	r3, [pc, #112]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 80145f6:	7a5b      	ldrb	r3, [r3, #9]
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	461a      	mov	r2, r3
 80145fc:	4b1a      	ldr	r3, [pc, #104]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 80145fe:	2100      	movs	r1, #0
 8014600:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014602:	4b19      	ldr	r3, [pc, #100]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 8014604:	7a5b      	ldrb	r3, [r3, #9]
 8014606:	b2db      	uxtb	r3, r3
 8014608:	4a17      	ldr	r2, [pc, #92]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	4413      	add	r3, r2
 801460e:	68fa      	ldr	r2, [r7, #12]
 8014610:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014612:	4b15      	ldr	r3, [pc, #84]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 8014614:	7a5b      	ldrb	r3, [r3, #9]
 8014616:	b2db      	uxtb	r3, r3
 8014618:	461a      	mov	r2, r3
 801461a:	4b13      	ldr	r3, [pc, #76]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 801461c:	4413      	add	r3, r2
 801461e:	79fa      	ldrb	r2, [r7, #7]
 8014620:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014622:	4b11      	ldr	r3, [pc, #68]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 8014624:	7a5b      	ldrb	r3, [r3, #9]
 8014626:	b2db      	uxtb	r3, r3
 8014628:	1c5a      	adds	r2, r3, #1
 801462a:	b2d1      	uxtb	r1, r2
 801462c:	4a0e      	ldr	r2, [pc, #56]	; (8014668 <FATFS_LinkDriverEx+0x94>)
 801462e:	7251      	strb	r1, [r2, #9]
 8014630:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014632:	7dbb      	ldrb	r3, [r7, #22]
 8014634:	3330      	adds	r3, #48	; 0x30
 8014636:	b2da      	uxtb	r2, r3
 8014638:	68bb      	ldr	r3, [r7, #8]
 801463a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	3301      	adds	r3, #1
 8014640:	223a      	movs	r2, #58	; 0x3a
 8014642:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014644:	68bb      	ldr	r3, [r7, #8]
 8014646:	3302      	adds	r3, #2
 8014648:	222f      	movs	r2, #47	; 0x2f
 801464a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801464c:	68bb      	ldr	r3, [r7, #8]
 801464e:	3303      	adds	r3, #3
 8014650:	2200      	movs	r2, #0
 8014652:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014654:	2300      	movs	r3, #0
 8014656:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014658:	7dfb      	ldrb	r3, [r7, #23]
}
 801465a:	4618      	mov	r0, r3
 801465c:	371c      	adds	r7, #28
 801465e:	46bd      	mov	sp, r7
 8014660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014664:	4770      	bx	lr
 8014666:	bf00      	nop
 8014668:	200422ec 	.word	0x200422ec

0801466c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b082      	sub	sp, #8
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
 8014674:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014676:	2200      	movs	r2, #0
 8014678:	6839      	ldr	r1, [r7, #0]
 801467a:	6878      	ldr	r0, [r7, #4]
 801467c:	f7ff ffaa 	bl	80145d4 <FATFS_LinkDriverEx>
 8014680:	4603      	mov	r3, r0
}
 8014682:	4618      	mov	r0, r3
 8014684:	3708      	adds	r7, #8
 8014686:	46bd      	mov	sp, r7
 8014688:	bd80      	pop	{r7, pc}

0801468a <__cxa_guard_acquire>:
 801468a:	6803      	ldr	r3, [r0, #0]
 801468c:	07db      	lsls	r3, r3, #31
 801468e:	d406      	bmi.n	801469e <__cxa_guard_acquire+0x14>
 8014690:	7843      	ldrb	r3, [r0, #1]
 8014692:	b103      	cbz	r3, 8014696 <__cxa_guard_acquire+0xc>
 8014694:	deff      	udf	#255	; 0xff
 8014696:	2301      	movs	r3, #1
 8014698:	7043      	strb	r3, [r0, #1]
 801469a:	4618      	mov	r0, r3
 801469c:	4770      	bx	lr
 801469e:	2000      	movs	r0, #0
 80146a0:	4770      	bx	lr

080146a2 <__cxa_guard_release>:
 80146a2:	2301      	movs	r3, #1
 80146a4:	6003      	str	r3, [r0, #0]
 80146a6:	4770      	bx	lr

080146a8 <cos>:
 80146a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146aa:	ec51 0b10 	vmov	r0, r1, d0
 80146ae:	4a1e      	ldr	r2, [pc, #120]	; (8014728 <cos+0x80>)
 80146b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80146b4:	4293      	cmp	r3, r2
 80146b6:	dc06      	bgt.n	80146c6 <cos+0x1e>
 80146b8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014720 <cos+0x78>
 80146bc:	f000 fa74 	bl	8014ba8 <__kernel_cos>
 80146c0:	ec51 0b10 	vmov	r0, r1, d0
 80146c4:	e007      	b.n	80146d6 <cos+0x2e>
 80146c6:	4a19      	ldr	r2, [pc, #100]	; (801472c <cos+0x84>)
 80146c8:	4293      	cmp	r3, r2
 80146ca:	dd09      	ble.n	80146e0 <cos+0x38>
 80146cc:	ee10 2a10 	vmov	r2, s0
 80146d0:	460b      	mov	r3, r1
 80146d2:	f7eb fdf1 	bl	80002b8 <__aeabi_dsub>
 80146d6:	ec41 0b10 	vmov	d0, r0, r1
 80146da:	b005      	add	sp, #20
 80146dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80146e0:	4668      	mov	r0, sp
 80146e2:	f000 f86d 	bl	80147c0 <__ieee754_rem_pio2>
 80146e6:	f000 0003 	and.w	r0, r0, #3
 80146ea:	2801      	cmp	r0, #1
 80146ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80146f0:	ed9d 0b00 	vldr	d0, [sp]
 80146f4:	d007      	beq.n	8014706 <cos+0x5e>
 80146f6:	2802      	cmp	r0, #2
 80146f8:	d00e      	beq.n	8014718 <cos+0x70>
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d0de      	beq.n	80146bc <cos+0x14>
 80146fe:	2001      	movs	r0, #1
 8014700:	f000 fe5a 	bl	80153b8 <__kernel_sin>
 8014704:	e7dc      	b.n	80146c0 <cos+0x18>
 8014706:	f000 fe57 	bl	80153b8 <__kernel_sin>
 801470a:	ec53 2b10 	vmov	r2, r3, d0
 801470e:	ee10 0a10 	vmov	r0, s0
 8014712:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014716:	e7de      	b.n	80146d6 <cos+0x2e>
 8014718:	f000 fa46 	bl	8014ba8 <__kernel_cos>
 801471c:	e7f5      	b.n	801470a <cos+0x62>
 801471e:	bf00      	nop
	...
 8014728:	3fe921fb 	.word	0x3fe921fb
 801472c:	7fefffff 	.word	0x7fefffff

08014730 <sin>:
 8014730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014732:	ec51 0b10 	vmov	r0, r1, d0
 8014736:	4a20      	ldr	r2, [pc, #128]	; (80147b8 <sin+0x88>)
 8014738:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801473c:	4293      	cmp	r3, r2
 801473e:	dc07      	bgt.n	8014750 <sin+0x20>
 8014740:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80147b0 <sin+0x80>
 8014744:	2000      	movs	r0, #0
 8014746:	f000 fe37 	bl	80153b8 <__kernel_sin>
 801474a:	ec51 0b10 	vmov	r0, r1, d0
 801474e:	e007      	b.n	8014760 <sin+0x30>
 8014750:	4a1a      	ldr	r2, [pc, #104]	; (80147bc <sin+0x8c>)
 8014752:	4293      	cmp	r3, r2
 8014754:	dd09      	ble.n	801476a <sin+0x3a>
 8014756:	ee10 2a10 	vmov	r2, s0
 801475a:	460b      	mov	r3, r1
 801475c:	f7eb fdac 	bl	80002b8 <__aeabi_dsub>
 8014760:	ec41 0b10 	vmov	d0, r0, r1
 8014764:	b005      	add	sp, #20
 8014766:	f85d fb04 	ldr.w	pc, [sp], #4
 801476a:	4668      	mov	r0, sp
 801476c:	f000 f828 	bl	80147c0 <__ieee754_rem_pio2>
 8014770:	f000 0003 	and.w	r0, r0, #3
 8014774:	2801      	cmp	r0, #1
 8014776:	ed9d 1b02 	vldr	d1, [sp, #8]
 801477a:	ed9d 0b00 	vldr	d0, [sp]
 801477e:	d004      	beq.n	801478a <sin+0x5a>
 8014780:	2802      	cmp	r0, #2
 8014782:	d005      	beq.n	8014790 <sin+0x60>
 8014784:	b970      	cbnz	r0, 80147a4 <sin+0x74>
 8014786:	2001      	movs	r0, #1
 8014788:	e7dd      	b.n	8014746 <sin+0x16>
 801478a:	f000 fa0d 	bl	8014ba8 <__kernel_cos>
 801478e:	e7dc      	b.n	801474a <sin+0x1a>
 8014790:	2001      	movs	r0, #1
 8014792:	f000 fe11 	bl	80153b8 <__kernel_sin>
 8014796:	ec53 2b10 	vmov	r2, r3, d0
 801479a:	ee10 0a10 	vmov	r0, s0
 801479e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80147a2:	e7dd      	b.n	8014760 <sin+0x30>
 80147a4:	f000 fa00 	bl	8014ba8 <__kernel_cos>
 80147a8:	e7f5      	b.n	8014796 <sin+0x66>
 80147aa:	bf00      	nop
 80147ac:	f3af 8000 	nop.w
	...
 80147b8:	3fe921fb 	.word	0x3fe921fb
 80147bc:	7fefffff 	.word	0x7fefffff

080147c0 <__ieee754_rem_pio2>:
 80147c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147c4:	ec57 6b10 	vmov	r6, r7, d0
 80147c8:	4bc3      	ldr	r3, [pc, #780]	; (8014ad8 <__ieee754_rem_pio2+0x318>)
 80147ca:	b08d      	sub	sp, #52	; 0x34
 80147cc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80147d0:	4598      	cmp	r8, r3
 80147d2:	4604      	mov	r4, r0
 80147d4:	9704      	str	r7, [sp, #16]
 80147d6:	dc07      	bgt.n	80147e8 <__ieee754_rem_pio2+0x28>
 80147d8:	2200      	movs	r2, #0
 80147da:	2300      	movs	r3, #0
 80147dc:	ed84 0b00 	vstr	d0, [r4]
 80147e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80147e4:	2500      	movs	r5, #0
 80147e6:	e027      	b.n	8014838 <__ieee754_rem_pio2+0x78>
 80147e8:	4bbc      	ldr	r3, [pc, #752]	; (8014adc <__ieee754_rem_pio2+0x31c>)
 80147ea:	4598      	cmp	r8, r3
 80147ec:	dc75      	bgt.n	80148da <__ieee754_rem_pio2+0x11a>
 80147ee:	9b04      	ldr	r3, [sp, #16]
 80147f0:	4dbb      	ldr	r5, [pc, #748]	; (8014ae0 <__ieee754_rem_pio2+0x320>)
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	ee10 0a10 	vmov	r0, s0
 80147f8:	a3a9      	add	r3, pc, #676	; (adr r3, 8014aa0 <__ieee754_rem_pio2+0x2e0>)
 80147fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147fe:	4639      	mov	r1, r7
 8014800:	dd36      	ble.n	8014870 <__ieee754_rem_pio2+0xb0>
 8014802:	f7eb fd59 	bl	80002b8 <__aeabi_dsub>
 8014806:	45a8      	cmp	r8, r5
 8014808:	4606      	mov	r6, r0
 801480a:	460f      	mov	r7, r1
 801480c:	d018      	beq.n	8014840 <__ieee754_rem_pio2+0x80>
 801480e:	a3a6      	add	r3, pc, #664	; (adr r3, 8014aa8 <__ieee754_rem_pio2+0x2e8>)
 8014810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014814:	f7eb fd50 	bl	80002b8 <__aeabi_dsub>
 8014818:	4602      	mov	r2, r0
 801481a:	460b      	mov	r3, r1
 801481c:	e9c4 2300 	strd	r2, r3, [r4]
 8014820:	4630      	mov	r0, r6
 8014822:	4639      	mov	r1, r7
 8014824:	f7eb fd48 	bl	80002b8 <__aeabi_dsub>
 8014828:	a39f      	add	r3, pc, #636	; (adr r3, 8014aa8 <__ieee754_rem_pio2+0x2e8>)
 801482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801482e:	f7eb fd43 	bl	80002b8 <__aeabi_dsub>
 8014832:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014836:	2501      	movs	r5, #1
 8014838:	4628      	mov	r0, r5
 801483a:	b00d      	add	sp, #52	; 0x34
 801483c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014840:	a39b      	add	r3, pc, #620	; (adr r3, 8014ab0 <__ieee754_rem_pio2+0x2f0>)
 8014842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014846:	f7eb fd37 	bl	80002b8 <__aeabi_dsub>
 801484a:	a39b      	add	r3, pc, #620	; (adr r3, 8014ab8 <__ieee754_rem_pio2+0x2f8>)
 801484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014850:	4606      	mov	r6, r0
 8014852:	460f      	mov	r7, r1
 8014854:	f7eb fd30 	bl	80002b8 <__aeabi_dsub>
 8014858:	4602      	mov	r2, r0
 801485a:	460b      	mov	r3, r1
 801485c:	e9c4 2300 	strd	r2, r3, [r4]
 8014860:	4630      	mov	r0, r6
 8014862:	4639      	mov	r1, r7
 8014864:	f7eb fd28 	bl	80002b8 <__aeabi_dsub>
 8014868:	a393      	add	r3, pc, #588	; (adr r3, 8014ab8 <__ieee754_rem_pio2+0x2f8>)
 801486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801486e:	e7de      	b.n	801482e <__ieee754_rem_pio2+0x6e>
 8014870:	f7eb fd24 	bl	80002bc <__adddf3>
 8014874:	45a8      	cmp	r8, r5
 8014876:	4606      	mov	r6, r0
 8014878:	460f      	mov	r7, r1
 801487a:	d016      	beq.n	80148aa <__ieee754_rem_pio2+0xea>
 801487c:	a38a      	add	r3, pc, #552	; (adr r3, 8014aa8 <__ieee754_rem_pio2+0x2e8>)
 801487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014882:	f7eb fd1b 	bl	80002bc <__adddf3>
 8014886:	4602      	mov	r2, r0
 8014888:	460b      	mov	r3, r1
 801488a:	e9c4 2300 	strd	r2, r3, [r4]
 801488e:	4630      	mov	r0, r6
 8014890:	4639      	mov	r1, r7
 8014892:	f7eb fd11 	bl	80002b8 <__aeabi_dsub>
 8014896:	a384      	add	r3, pc, #528	; (adr r3, 8014aa8 <__ieee754_rem_pio2+0x2e8>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	f7eb fd0e 	bl	80002bc <__adddf3>
 80148a0:	f04f 35ff 	mov.w	r5, #4294967295
 80148a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80148a8:	e7c6      	b.n	8014838 <__ieee754_rem_pio2+0x78>
 80148aa:	a381      	add	r3, pc, #516	; (adr r3, 8014ab0 <__ieee754_rem_pio2+0x2f0>)
 80148ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b0:	f7eb fd04 	bl	80002bc <__adddf3>
 80148b4:	a380      	add	r3, pc, #512	; (adr r3, 8014ab8 <__ieee754_rem_pio2+0x2f8>)
 80148b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ba:	4606      	mov	r6, r0
 80148bc:	460f      	mov	r7, r1
 80148be:	f7eb fcfd 	bl	80002bc <__adddf3>
 80148c2:	4602      	mov	r2, r0
 80148c4:	460b      	mov	r3, r1
 80148c6:	e9c4 2300 	strd	r2, r3, [r4]
 80148ca:	4630      	mov	r0, r6
 80148cc:	4639      	mov	r1, r7
 80148ce:	f7eb fcf3 	bl	80002b8 <__aeabi_dsub>
 80148d2:	a379      	add	r3, pc, #484	; (adr r3, 8014ab8 <__ieee754_rem_pio2+0x2f8>)
 80148d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148d8:	e7e0      	b.n	801489c <__ieee754_rem_pio2+0xdc>
 80148da:	4b82      	ldr	r3, [pc, #520]	; (8014ae4 <__ieee754_rem_pio2+0x324>)
 80148dc:	4598      	cmp	r8, r3
 80148de:	f300 80d0 	bgt.w	8014a82 <__ieee754_rem_pio2+0x2c2>
 80148e2:	f000 fe23 	bl	801552c <fabs>
 80148e6:	ec57 6b10 	vmov	r6, r7, d0
 80148ea:	ee10 0a10 	vmov	r0, s0
 80148ee:	a374      	add	r3, pc, #464	; (adr r3, 8014ac0 <__ieee754_rem_pio2+0x300>)
 80148f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f4:	4639      	mov	r1, r7
 80148f6:	f7eb fe97 	bl	8000628 <__aeabi_dmul>
 80148fa:	2200      	movs	r2, #0
 80148fc:	4b7a      	ldr	r3, [pc, #488]	; (8014ae8 <__ieee754_rem_pio2+0x328>)
 80148fe:	f7eb fcdd 	bl	80002bc <__adddf3>
 8014902:	f7ec f941 	bl	8000b88 <__aeabi_d2iz>
 8014906:	4605      	mov	r5, r0
 8014908:	f7eb fe24 	bl	8000554 <__aeabi_i2d>
 801490c:	a364      	add	r3, pc, #400	; (adr r3, 8014aa0 <__ieee754_rem_pio2+0x2e0>)
 801490e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014916:	f7eb fe87 	bl	8000628 <__aeabi_dmul>
 801491a:	4602      	mov	r2, r0
 801491c:	460b      	mov	r3, r1
 801491e:	4630      	mov	r0, r6
 8014920:	4639      	mov	r1, r7
 8014922:	f7eb fcc9 	bl	80002b8 <__aeabi_dsub>
 8014926:	a360      	add	r3, pc, #384	; (adr r3, 8014aa8 <__ieee754_rem_pio2+0x2e8>)
 8014928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801492c:	4682      	mov	sl, r0
 801492e:	468b      	mov	fp, r1
 8014930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014934:	f7eb fe78 	bl	8000628 <__aeabi_dmul>
 8014938:	2d1f      	cmp	r5, #31
 801493a:	4606      	mov	r6, r0
 801493c:	460f      	mov	r7, r1
 801493e:	dc0c      	bgt.n	801495a <__ieee754_rem_pio2+0x19a>
 8014940:	1e6a      	subs	r2, r5, #1
 8014942:	4b6a      	ldr	r3, [pc, #424]	; (8014aec <__ieee754_rem_pio2+0x32c>)
 8014944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014948:	4543      	cmp	r3, r8
 801494a:	d006      	beq.n	801495a <__ieee754_rem_pio2+0x19a>
 801494c:	4632      	mov	r2, r6
 801494e:	463b      	mov	r3, r7
 8014950:	4650      	mov	r0, sl
 8014952:	4659      	mov	r1, fp
 8014954:	f7eb fcb0 	bl	80002b8 <__aeabi_dsub>
 8014958:	e00e      	b.n	8014978 <__ieee754_rem_pio2+0x1b8>
 801495a:	4632      	mov	r2, r6
 801495c:	463b      	mov	r3, r7
 801495e:	4650      	mov	r0, sl
 8014960:	4659      	mov	r1, fp
 8014962:	f7eb fca9 	bl	80002b8 <__aeabi_dsub>
 8014966:	ea4f 5328 	mov.w	r3, r8, asr #20
 801496a:	9305      	str	r3, [sp, #20]
 801496c:	9a05      	ldr	r2, [sp, #20]
 801496e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014972:	1ad3      	subs	r3, r2, r3
 8014974:	2b10      	cmp	r3, #16
 8014976:	dc02      	bgt.n	801497e <__ieee754_rem_pio2+0x1be>
 8014978:	e9c4 0100 	strd	r0, r1, [r4]
 801497c:	e039      	b.n	80149f2 <__ieee754_rem_pio2+0x232>
 801497e:	a34c      	add	r3, pc, #304	; (adr r3, 8014ab0 <__ieee754_rem_pio2+0x2f0>)
 8014980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014984:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014988:	f7eb fe4e 	bl	8000628 <__aeabi_dmul>
 801498c:	4606      	mov	r6, r0
 801498e:	460f      	mov	r7, r1
 8014990:	4602      	mov	r2, r0
 8014992:	460b      	mov	r3, r1
 8014994:	4650      	mov	r0, sl
 8014996:	4659      	mov	r1, fp
 8014998:	f7eb fc8e 	bl	80002b8 <__aeabi_dsub>
 801499c:	4602      	mov	r2, r0
 801499e:	460b      	mov	r3, r1
 80149a0:	4680      	mov	r8, r0
 80149a2:	4689      	mov	r9, r1
 80149a4:	4650      	mov	r0, sl
 80149a6:	4659      	mov	r1, fp
 80149a8:	f7eb fc86 	bl	80002b8 <__aeabi_dsub>
 80149ac:	4632      	mov	r2, r6
 80149ae:	463b      	mov	r3, r7
 80149b0:	f7eb fc82 	bl	80002b8 <__aeabi_dsub>
 80149b4:	a340      	add	r3, pc, #256	; (adr r3, 8014ab8 <__ieee754_rem_pio2+0x2f8>)
 80149b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ba:	4606      	mov	r6, r0
 80149bc:	460f      	mov	r7, r1
 80149be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80149c2:	f7eb fe31 	bl	8000628 <__aeabi_dmul>
 80149c6:	4632      	mov	r2, r6
 80149c8:	463b      	mov	r3, r7
 80149ca:	f7eb fc75 	bl	80002b8 <__aeabi_dsub>
 80149ce:	4602      	mov	r2, r0
 80149d0:	460b      	mov	r3, r1
 80149d2:	4606      	mov	r6, r0
 80149d4:	460f      	mov	r7, r1
 80149d6:	4640      	mov	r0, r8
 80149d8:	4649      	mov	r1, r9
 80149da:	f7eb fc6d 	bl	80002b8 <__aeabi_dsub>
 80149de:	9a05      	ldr	r2, [sp, #20]
 80149e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80149e4:	1ad3      	subs	r3, r2, r3
 80149e6:	2b31      	cmp	r3, #49	; 0x31
 80149e8:	dc20      	bgt.n	8014a2c <__ieee754_rem_pio2+0x26c>
 80149ea:	e9c4 0100 	strd	r0, r1, [r4]
 80149ee:	46c2      	mov	sl, r8
 80149f0:	46cb      	mov	fp, r9
 80149f2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80149f6:	4650      	mov	r0, sl
 80149f8:	4642      	mov	r2, r8
 80149fa:	464b      	mov	r3, r9
 80149fc:	4659      	mov	r1, fp
 80149fe:	f7eb fc5b 	bl	80002b8 <__aeabi_dsub>
 8014a02:	463b      	mov	r3, r7
 8014a04:	4632      	mov	r2, r6
 8014a06:	f7eb fc57 	bl	80002b8 <__aeabi_dsub>
 8014a0a:	9b04      	ldr	r3, [sp, #16]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a12:	f6bf af11 	bge.w	8014838 <__ieee754_rem_pio2+0x78>
 8014a16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014a1a:	6063      	str	r3, [r4, #4]
 8014a1c:	f8c4 8000 	str.w	r8, [r4]
 8014a20:	60a0      	str	r0, [r4, #8]
 8014a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a26:	60e3      	str	r3, [r4, #12]
 8014a28:	426d      	negs	r5, r5
 8014a2a:	e705      	b.n	8014838 <__ieee754_rem_pio2+0x78>
 8014a2c:	a326      	add	r3, pc, #152	; (adr r3, 8014ac8 <__ieee754_rem_pio2+0x308>)
 8014a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a36:	f7eb fdf7 	bl	8000628 <__aeabi_dmul>
 8014a3a:	4606      	mov	r6, r0
 8014a3c:	460f      	mov	r7, r1
 8014a3e:	4602      	mov	r2, r0
 8014a40:	460b      	mov	r3, r1
 8014a42:	4640      	mov	r0, r8
 8014a44:	4649      	mov	r1, r9
 8014a46:	f7eb fc37 	bl	80002b8 <__aeabi_dsub>
 8014a4a:	4602      	mov	r2, r0
 8014a4c:	460b      	mov	r3, r1
 8014a4e:	4682      	mov	sl, r0
 8014a50:	468b      	mov	fp, r1
 8014a52:	4640      	mov	r0, r8
 8014a54:	4649      	mov	r1, r9
 8014a56:	f7eb fc2f 	bl	80002b8 <__aeabi_dsub>
 8014a5a:	4632      	mov	r2, r6
 8014a5c:	463b      	mov	r3, r7
 8014a5e:	f7eb fc2b 	bl	80002b8 <__aeabi_dsub>
 8014a62:	a31b      	add	r3, pc, #108	; (adr r3, 8014ad0 <__ieee754_rem_pio2+0x310>)
 8014a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a68:	4606      	mov	r6, r0
 8014a6a:	460f      	mov	r7, r1
 8014a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a70:	f7eb fdda 	bl	8000628 <__aeabi_dmul>
 8014a74:	4632      	mov	r2, r6
 8014a76:	463b      	mov	r3, r7
 8014a78:	f7eb fc1e 	bl	80002b8 <__aeabi_dsub>
 8014a7c:	4606      	mov	r6, r0
 8014a7e:	460f      	mov	r7, r1
 8014a80:	e764      	b.n	801494c <__ieee754_rem_pio2+0x18c>
 8014a82:	4b1b      	ldr	r3, [pc, #108]	; (8014af0 <__ieee754_rem_pio2+0x330>)
 8014a84:	4598      	cmp	r8, r3
 8014a86:	dd35      	ble.n	8014af4 <__ieee754_rem_pio2+0x334>
 8014a88:	ee10 2a10 	vmov	r2, s0
 8014a8c:	463b      	mov	r3, r7
 8014a8e:	4630      	mov	r0, r6
 8014a90:	4639      	mov	r1, r7
 8014a92:	f7eb fc11 	bl	80002b8 <__aeabi_dsub>
 8014a96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014a9a:	e9c4 0100 	strd	r0, r1, [r4]
 8014a9e:	e6a1      	b.n	80147e4 <__ieee754_rem_pio2+0x24>
 8014aa0:	54400000 	.word	0x54400000
 8014aa4:	3ff921fb 	.word	0x3ff921fb
 8014aa8:	1a626331 	.word	0x1a626331
 8014aac:	3dd0b461 	.word	0x3dd0b461
 8014ab0:	1a600000 	.word	0x1a600000
 8014ab4:	3dd0b461 	.word	0x3dd0b461
 8014ab8:	2e037073 	.word	0x2e037073
 8014abc:	3ba3198a 	.word	0x3ba3198a
 8014ac0:	6dc9c883 	.word	0x6dc9c883
 8014ac4:	3fe45f30 	.word	0x3fe45f30
 8014ac8:	2e000000 	.word	0x2e000000
 8014acc:	3ba3198a 	.word	0x3ba3198a
 8014ad0:	252049c1 	.word	0x252049c1
 8014ad4:	397b839a 	.word	0x397b839a
 8014ad8:	3fe921fb 	.word	0x3fe921fb
 8014adc:	4002d97b 	.word	0x4002d97b
 8014ae0:	3ff921fb 	.word	0x3ff921fb
 8014ae4:	413921fb 	.word	0x413921fb
 8014ae8:	3fe00000 	.word	0x3fe00000
 8014aec:	0801a054 	.word	0x0801a054
 8014af0:	7fefffff 	.word	0x7fefffff
 8014af4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014af8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8014afc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014b00:	4630      	mov	r0, r6
 8014b02:	460f      	mov	r7, r1
 8014b04:	f7ec f840 	bl	8000b88 <__aeabi_d2iz>
 8014b08:	f7eb fd24 	bl	8000554 <__aeabi_i2d>
 8014b0c:	4602      	mov	r2, r0
 8014b0e:	460b      	mov	r3, r1
 8014b10:	4630      	mov	r0, r6
 8014b12:	4639      	mov	r1, r7
 8014b14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b18:	f7eb fbce 	bl	80002b8 <__aeabi_dsub>
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	4b1f      	ldr	r3, [pc, #124]	; (8014b9c <__ieee754_rem_pio2+0x3dc>)
 8014b20:	f7eb fd82 	bl	8000628 <__aeabi_dmul>
 8014b24:	460f      	mov	r7, r1
 8014b26:	4606      	mov	r6, r0
 8014b28:	f7ec f82e 	bl	8000b88 <__aeabi_d2iz>
 8014b2c:	f7eb fd12 	bl	8000554 <__aeabi_i2d>
 8014b30:	4602      	mov	r2, r0
 8014b32:	460b      	mov	r3, r1
 8014b34:	4630      	mov	r0, r6
 8014b36:	4639      	mov	r1, r7
 8014b38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b3c:	f7eb fbbc 	bl	80002b8 <__aeabi_dsub>
 8014b40:	2200      	movs	r2, #0
 8014b42:	4b16      	ldr	r3, [pc, #88]	; (8014b9c <__ieee754_rem_pio2+0x3dc>)
 8014b44:	f7eb fd70 	bl	8000628 <__aeabi_dmul>
 8014b48:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014b4c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014b50:	f04f 0803 	mov.w	r8, #3
 8014b54:	2600      	movs	r6, #0
 8014b56:	2700      	movs	r7, #0
 8014b58:	4632      	mov	r2, r6
 8014b5a:	463b      	mov	r3, r7
 8014b5c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014b60:	f108 3aff 	add.w	sl, r8, #4294967295
 8014b64:	f7eb ffc8 	bl	8000af8 <__aeabi_dcmpeq>
 8014b68:	b9b0      	cbnz	r0, 8014b98 <__ieee754_rem_pio2+0x3d8>
 8014b6a:	4b0d      	ldr	r3, [pc, #52]	; (8014ba0 <__ieee754_rem_pio2+0x3e0>)
 8014b6c:	9301      	str	r3, [sp, #4]
 8014b6e:	2302      	movs	r3, #2
 8014b70:	9300      	str	r3, [sp, #0]
 8014b72:	462a      	mov	r2, r5
 8014b74:	4643      	mov	r3, r8
 8014b76:	4621      	mov	r1, r4
 8014b78:	a806      	add	r0, sp, #24
 8014b7a:	f000 f8dd 	bl	8014d38 <__kernel_rem_pio2>
 8014b7e:	9b04      	ldr	r3, [sp, #16]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	4605      	mov	r5, r0
 8014b84:	f6bf ae58 	bge.w	8014838 <__ieee754_rem_pio2+0x78>
 8014b88:	6863      	ldr	r3, [r4, #4]
 8014b8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014b8e:	6063      	str	r3, [r4, #4]
 8014b90:	68e3      	ldr	r3, [r4, #12]
 8014b92:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014b96:	e746      	b.n	8014a26 <__ieee754_rem_pio2+0x266>
 8014b98:	46d0      	mov	r8, sl
 8014b9a:	e7dd      	b.n	8014b58 <__ieee754_rem_pio2+0x398>
 8014b9c:	41700000 	.word	0x41700000
 8014ba0:	0801a0d4 	.word	0x0801a0d4
 8014ba4:	00000000 	.word	0x00000000

08014ba8 <__kernel_cos>:
 8014ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bac:	ec59 8b10 	vmov	r8, r9, d0
 8014bb0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8014bb4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014bb8:	ed2d 8b02 	vpush	{d8}
 8014bbc:	eeb0 8a41 	vmov.f32	s16, s2
 8014bc0:	eef0 8a61 	vmov.f32	s17, s3
 8014bc4:	da07      	bge.n	8014bd6 <__kernel_cos+0x2e>
 8014bc6:	ee10 0a10 	vmov	r0, s0
 8014bca:	4649      	mov	r1, r9
 8014bcc:	f7eb ffdc 	bl	8000b88 <__aeabi_d2iz>
 8014bd0:	2800      	cmp	r0, #0
 8014bd2:	f000 8089 	beq.w	8014ce8 <__kernel_cos+0x140>
 8014bd6:	4642      	mov	r2, r8
 8014bd8:	464b      	mov	r3, r9
 8014bda:	4640      	mov	r0, r8
 8014bdc:	4649      	mov	r1, r9
 8014bde:	f7eb fd23 	bl	8000628 <__aeabi_dmul>
 8014be2:	2200      	movs	r2, #0
 8014be4:	4b4e      	ldr	r3, [pc, #312]	; (8014d20 <__kernel_cos+0x178>)
 8014be6:	4604      	mov	r4, r0
 8014be8:	460d      	mov	r5, r1
 8014bea:	f7eb fd1d 	bl	8000628 <__aeabi_dmul>
 8014bee:	a340      	add	r3, pc, #256	; (adr r3, 8014cf0 <__kernel_cos+0x148>)
 8014bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf4:	4682      	mov	sl, r0
 8014bf6:	468b      	mov	fp, r1
 8014bf8:	4620      	mov	r0, r4
 8014bfa:	4629      	mov	r1, r5
 8014bfc:	f7eb fd14 	bl	8000628 <__aeabi_dmul>
 8014c00:	a33d      	add	r3, pc, #244	; (adr r3, 8014cf8 <__kernel_cos+0x150>)
 8014c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c06:	f7eb fb59 	bl	80002bc <__adddf3>
 8014c0a:	4622      	mov	r2, r4
 8014c0c:	462b      	mov	r3, r5
 8014c0e:	f7eb fd0b 	bl	8000628 <__aeabi_dmul>
 8014c12:	a33b      	add	r3, pc, #236	; (adr r3, 8014d00 <__kernel_cos+0x158>)
 8014c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c18:	f7eb fb4e 	bl	80002b8 <__aeabi_dsub>
 8014c1c:	4622      	mov	r2, r4
 8014c1e:	462b      	mov	r3, r5
 8014c20:	f7eb fd02 	bl	8000628 <__aeabi_dmul>
 8014c24:	a338      	add	r3, pc, #224	; (adr r3, 8014d08 <__kernel_cos+0x160>)
 8014c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2a:	f7eb fb47 	bl	80002bc <__adddf3>
 8014c2e:	4622      	mov	r2, r4
 8014c30:	462b      	mov	r3, r5
 8014c32:	f7eb fcf9 	bl	8000628 <__aeabi_dmul>
 8014c36:	a336      	add	r3, pc, #216	; (adr r3, 8014d10 <__kernel_cos+0x168>)
 8014c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3c:	f7eb fb3c 	bl	80002b8 <__aeabi_dsub>
 8014c40:	4622      	mov	r2, r4
 8014c42:	462b      	mov	r3, r5
 8014c44:	f7eb fcf0 	bl	8000628 <__aeabi_dmul>
 8014c48:	a333      	add	r3, pc, #204	; (adr r3, 8014d18 <__kernel_cos+0x170>)
 8014c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4e:	f7eb fb35 	bl	80002bc <__adddf3>
 8014c52:	4622      	mov	r2, r4
 8014c54:	462b      	mov	r3, r5
 8014c56:	f7eb fce7 	bl	8000628 <__aeabi_dmul>
 8014c5a:	4622      	mov	r2, r4
 8014c5c:	462b      	mov	r3, r5
 8014c5e:	f7eb fce3 	bl	8000628 <__aeabi_dmul>
 8014c62:	ec53 2b18 	vmov	r2, r3, d8
 8014c66:	4604      	mov	r4, r0
 8014c68:	460d      	mov	r5, r1
 8014c6a:	4640      	mov	r0, r8
 8014c6c:	4649      	mov	r1, r9
 8014c6e:	f7eb fcdb 	bl	8000628 <__aeabi_dmul>
 8014c72:	460b      	mov	r3, r1
 8014c74:	4602      	mov	r2, r0
 8014c76:	4629      	mov	r1, r5
 8014c78:	4620      	mov	r0, r4
 8014c7a:	f7eb fb1d 	bl	80002b8 <__aeabi_dsub>
 8014c7e:	4b29      	ldr	r3, [pc, #164]	; (8014d24 <__kernel_cos+0x17c>)
 8014c80:	429e      	cmp	r6, r3
 8014c82:	4680      	mov	r8, r0
 8014c84:	4689      	mov	r9, r1
 8014c86:	dc11      	bgt.n	8014cac <__kernel_cos+0x104>
 8014c88:	4602      	mov	r2, r0
 8014c8a:	460b      	mov	r3, r1
 8014c8c:	4650      	mov	r0, sl
 8014c8e:	4659      	mov	r1, fp
 8014c90:	f7eb fb12 	bl	80002b8 <__aeabi_dsub>
 8014c94:	460b      	mov	r3, r1
 8014c96:	4924      	ldr	r1, [pc, #144]	; (8014d28 <__kernel_cos+0x180>)
 8014c98:	4602      	mov	r2, r0
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	f7eb fb0c 	bl	80002b8 <__aeabi_dsub>
 8014ca0:	ecbd 8b02 	vpop	{d8}
 8014ca4:	ec41 0b10 	vmov	d0, r0, r1
 8014ca8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cac:	4b1f      	ldr	r3, [pc, #124]	; (8014d2c <__kernel_cos+0x184>)
 8014cae:	491e      	ldr	r1, [pc, #120]	; (8014d28 <__kernel_cos+0x180>)
 8014cb0:	429e      	cmp	r6, r3
 8014cb2:	bfcc      	ite	gt
 8014cb4:	4d1e      	ldrgt	r5, [pc, #120]	; (8014d30 <__kernel_cos+0x188>)
 8014cb6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014cba:	2400      	movs	r4, #0
 8014cbc:	4622      	mov	r2, r4
 8014cbe:	462b      	mov	r3, r5
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	f7eb faf9 	bl	80002b8 <__aeabi_dsub>
 8014cc6:	4622      	mov	r2, r4
 8014cc8:	4606      	mov	r6, r0
 8014cca:	460f      	mov	r7, r1
 8014ccc:	462b      	mov	r3, r5
 8014cce:	4650      	mov	r0, sl
 8014cd0:	4659      	mov	r1, fp
 8014cd2:	f7eb faf1 	bl	80002b8 <__aeabi_dsub>
 8014cd6:	4642      	mov	r2, r8
 8014cd8:	464b      	mov	r3, r9
 8014cda:	f7eb faed 	bl	80002b8 <__aeabi_dsub>
 8014cde:	4602      	mov	r2, r0
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	4639      	mov	r1, r7
 8014ce6:	e7d9      	b.n	8014c9c <__kernel_cos+0xf4>
 8014ce8:	2000      	movs	r0, #0
 8014cea:	490f      	ldr	r1, [pc, #60]	; (8014d28 <__kernel_cos+0x180>)
 8014cec:	e7d8      	b.n	8014ca0 <__kernel_cos+0xf8>
 8014cee:	bf00      	nop
 8014cf0:	be8838d4 	.word	0xbe8838d4
 8014cf4:	bda8fae9 	.word	0xbda8fae9
 8014cf8:	bdb4b1c4 	.word	0xbdb4b1c4
 8014cfc:	3e21ee9e 	.word	0x3e21ee9e
 8014d00:	809c52ad 	.word	0x809c52ad
 8014d04:	3e927e4f 	.word	0x3e927e4f
 8014d08:	19cb1590 	.word	0x19cb1590
 8014d0c:	3efa01a0 	.word	0x3efa01a0
 8014d10:	16c15177 	.word	0x16c15177
 8014d14:	3f56c16c 	.word	0x3f56c16c
 8014d18:	5555554c 	.word	0x5555554c
 8014d1c:	3fa55555 	.word	0x3fa55555
 8014d20:	3fe00000 	.word	0x3fe00000
 8014d24:	3fd33332 	.word	0x3fd33332
 8014d28:	3ff00000 	.word	0x3ff00000
 8014d2c:	3fe90000 	.word	0x3fe90000
 8014d30:	3fd20000 	.word	0x3fd20000
 8014d34:	00000000 	.word	0x00000000

08014d38 <__kernel_rem_pio2>:
 8014d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	ed2d 8b02 	vpush	{d8}
 8014d40:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014d44:	1ed4      	subs	r4, r2, #3
 8014d46:	9308      	str	r3, [sp, #32]
 8014d48:	9101      	str	r1, [sp, #4]
 8014d4a:	4bc5      	ldr	r3, [pc, #788]	; (8015060 <__kernel_rem_pio2+0x328>)
 8014d4c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014d4e:	9009      	str	r0, [sp, #36]	; 0x24
 8014d50:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d54:	9304      	str	r3, [sp, #16]
 8014d56:	9b08      	ldr	r3, [sp, #32]
 8014d58:	3b01      	subs	r3, #1
 8014d5a:	9307      	str	r3, [sp, #28]
 8014d5c:	2318      	movs	r3, #24
 8014d5e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014d62:	f06f 0317 	mvn.w	r3, #23
 8014d66:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014d6a:	fb04 3303 	mla	r3, r4, r3, r3
 8014d6e:	eb03 0a02 	add.w	sl, r3, r2
 8014d72:	9b04      	ldr	r3, [sp, #16]
 8014d74:	9a07      	ldr	r2, [sp, #28]
 8014d76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8015050 <__kernel_rem_pio2+0x318>
 8014d7a:	eb03 0802 	add.w	r8, r3, r2
 8014d7e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014d80:	1aa7      	subs	r7, r4, r2
 8014d82:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014d86:	ae22      	add	r6, sp, #136	; 0x88
 8014d88:	2500      	movs	r5, #0
 8014d8a:	4545      	cmp	r5, r8
 8014d8c:	dd13      	ble.n	8014db6 <__kernel_rem_pio2+0x7e>
 8014d8e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8015050 <__kernel_rem_pio2+0x318>
 8014d92:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8014d96:	2600      	movs	r6, #0
 8014d98:	9b04      	ldr	r3, [sp, #16]
 8014d9a:	429e      	cmp	r6, r3
 8014d9c:	dc32      	bgt.n	8014e04 <__kernel_rem_pio2+0xcc>
 8014d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014da0:	9302      	str	r3, [sp, #8]
 8014da2:	9b08      	ldr	r3, [sp, #32]
 8014da4:	199d      	adds	r5, r3, r6
 8014da6:	ab22      	add	r3, sp, #136	; 0x88
 8014da8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014dac:	9306      	str	r3, [sp, #24]
 8014dae:	ec59 8b18 	vmov	r8, r9, d8
 8014db2:	2700      	movs	r7, #0
 8014db4:	e01f      	b.n	8014df6 <__kernel_rem_pio2+0xbe>
 8014db6:	42ef      	cmn	r7, r5
 8014db8:	d407      	bmi.n	8014dca <__kernel_rem_pio2+0x92>
 8014dba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014dbe:	f7eb fbc9 	bl	8000554 <__aeabi_i2d>
 8014dc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8014dc6:	3501      	adds	r5, #1
 8014dc8:	e7df      	b.n	8014d8a <__kernel_rem_pio2+0x52>
 8014dca:	ec51 0b18 	vmov	r0, r1, d8
 8014dce:	e7f8      	b.n	8014dc2 <__kernel_rem_pio2+0x8a>
 8014dd0:	9906      	ldr	r1, [sp, #24]
 8014dd2:	9d02      	ldr	r5, [sp, #8]
 8014dd4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014dd8:	9106      	str	r1, [sp, #24]
 8014dda:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014dde:	9502      	str	r5, [sp, #8]
 8014de0:	f7eb fc22 	bl	8000628 <__aeabi_dmul>
 8014de4:	4602      	mov	r2, r0
 8014de6:	460b      	mov	r3, r1
 8014de8:	4640      	mov	r0, r8
 8014dea:	4649      	mov	r1, r9
 8014dec:	f7eb fa66 	bl	80002bc <__adddf3>
 8014df0:	3701      	adds	r7, #1
 8014df2:	4680      	mov	r8, r0
 8014df4:	4689      	mov	r9, r1
 8014df6:	9b07      	ldr	r3, [sp, #28]
 8014df8:	429f      	cmp	r7, r3
 8014dfa:	dde9      	ble.n	8014dd0 <__kernel_rem_pio2+0x98>
 8014dfc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014e00:	3601      	adds	r6, #1
 8014e02:	e7c9      	b.n	8014d98 <__kernel_rem_pio2+0x60>
 8014e04:	9b04      	ldr	r3, [sp, #16]
 8014e06:	aa0e      	add	r2, sp, #56	; 0x38
 8014e08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014e0c:	930c      	str	r3, [sp, #48]	; 0x30
 8014e0e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014e10:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014e14:	9c04      	ldr	r4, [sp, #16]
 8014e16:	930b      	str	r3, [sp, #44]	; 0x2c
 8014e18:	ab9a      	add	r3, sp, #616	; 0x268
 8014e1a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8014e1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014e22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e26:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8014e2a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8014e2e:	ab9a      	add	r3, sp, #616	; 0x268
 8014e30:	445b      	add	r3, fp
 8014e32:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014e36:	2500      	movs	r5, #0
 8014e38:	1b63      	subs	r3, r4, r5
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	dc78      	bgt.n	8014f30 <__kernel_rem_pio2+0x1f8>
 8014e3e:	4650      	mov	r0, sl
 8014e40:	ec49 8b10 	vmov	d0, r8, r9
 8014e44:	f000 fc00 	bl	8015648 <scalbn>
 8014e48:	ec57 6b10 	vmov	r6, r7, d0
 8014e4c:	2200      	movs	r2, #0
 8014e4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014e52:	ee10 0a10 	vmov	r0, s0
 8014e56:	4639      	mov	r1, r7
 8014e58:	f7eb fbe6 	bl	8000628 <__aeabi_dmul>
 8014e5c:	ec41 0b10 	vmov	d0, r0, r1
 8014e60:	f000 fb6e 	bl	8015540 <floor>
 8014e64:	2200      	movs	r2, #0
 8014e66:	ec51 0b10 	vmov	r0, r1, d0
 8014e6a:	4b7e      	ldr	r3, [pc, #504]	; (8015064 <__kernel_rem_pio2+0x32c>)
 8014e6c:	f7eb fbdc 	bl	8000628 <__aeabi_dmul>
 8014e70:	4602      	mov	r2, r0
 8014e72:	460b      	mov	r3, r1
 8014e74:	4630      	mov	r0, r6
 8014e76:	4639      	mov	r1, r7
 8014e78:	f7eb fa1e 	bl	80002b8 <__aeabi_dsub>
 8014e7c:	460f      	mov	r7, r1
 8014e7e:	4606      	mov	r6, r0
 8014e80:	f7eb fe82 	bl	8000b88 <__aeabi_d2iz>
 8014e84:	9006      	str	r0, [sp, #24]
 8014e86:	f7eb fb65 	bl	8000554 <__aeabi_i2d>
 8014e8a:	4602      	mov	r2, r0
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	4630      	mov	r0, r6
 8014e90:	4639      	mov	r1, r7
 8014e92:	f7eb fa11 	bl	80002b8 <__aeabi_dsub>
 8014e96:	f1ba 0f00 	cmp.w	sl, #0
 8014e9a:	4606      	mov	r6, r0
 8014e9c:	460f      	mov	r7, r1
 8014e9e:	dd6c      	ble.n	8014f7a <__kernel_rem_pio2+0x242>
 8014ea0:	1e62      	subs	r2, r4, #1
 8014ea2:	ab0e      	add	r3, sp, #56	; 0x38
 8014ea4:	f1ca 0118 	rsb	r1, sl, #24
 8014ea8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014eac:	9d06      	ldr	r5, [sp, #24]
 8014eae:	fa40 f301 	asr.w	r3, r0, r1
 8014eb2:	441d      	add	r5, r3
 8014eb4:	408b      	lsls	r3, r1
 8014eb6:	1ac0      	subs	r0, r0, r3
 8014eb8:	ab0e      	add	r3, sp, #56	; 0x38
 8014eba:	9506      	str	r5, [sp, #24]
 8014ebc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014ec0:	f1ca 0317 	rsb	r3, sl, #23
 8014ec4:	fa40 f303 	asr.w	r3, r0, r3
 8014ec8:	9302      	str	r3, [sp, #8]
 8014eca:	9b02      	ldr	r3, [sp, #8]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	dd62      	ble.n	8014f96 <__kernel_rem_pio2+0x25e>
 8014ed0:	9b06      	ldr	r3, [sp, #24]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	9306      	str	r3, [sp, #24]
 8014ed8:	4615      	mov	r5, r2
 8014eda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014ede:	4294      	cmp	r4, r2
 8014ee0:	f300 8095 	bgt.w	801500e <__kernel_rem_pio2+0x2d6>
 8014ee4:	f1ba 0f00 	cmp.w	sl, #0
 8014ee8:	dd07      	ble.n	8014efa <__kernel_rem_pio2+0x1c2>
 8014eea:	f1ba 0f01 	cmp.w	sl, #1
 8014eee:	f000 80a2 	beq.w	8015036 <__kernel_rem_pio2+0x2fe>
 8014ef2:	f1ba 0f02 	cmp.w	sl, #2
 8014ef6:	f000 80c1 	beq.w	801507c <__kernel_rem_pio2+0x344>
 8014efa:	9b02      	ldr	r3, [sp, #8]
 8014efc:	2b02      	cmp	r3, #2
 8014efe:	d14a      	bne.n	8014f96 <__kernel_rem_pio2+0x25e>
 8014f00:	4632      	mov	r2, r6
 8014f02:	463b      	mov	r3, r7
 8014f04:	2000      	movs	r0, #0
 8014f06:	4958      	ldr	r1, [pc, #352]	; (8015068 <__kernel_rem_pio2+0x330>)
 8014f08:	f7eb f9d6 	bl	80002b8 <__aeabi_dsub>
 8014f0c:	4606      	mov	r6, r0
 8014f0e:	460f      	mov	r7, r1
 8014f10:	2d00      	cmp	r5, #0
 8014f12:	d040      	beq.n	8014f96 <__kernel_rem_pio2+0x25e>
 8014f14:	4650      	mov	r0, sl
 8014f16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8015058 <__kernel_rem_pio2+0x320>
 8014f1a:	f000 fb95 	bl	8015648 <scalbn>
 8014f1e:	4630      	mov	r0, r6
 8014f20:	4639      	mov	r1, r7
 8014f22:	ec53 2b10 	vmov	r2, r3, d0
 8014f26:	f7eb f9c7 	bl	80002b8 <__aeabi_dsub>
 8014f2a:	4606      	mov	r6, r0
 8014f2c:	460f      	mov	r7, r1
 8014f2e:	e032      	b.n	8014f96 <__kernel_rem_pio2+0x25e>
 8014f30:	2200      	movs	r2, #0
 8014f32:	4b4e      	ldr	r3, [pc, #312]	; (801506c <__kernel_rem_pio2+0x334>)
 8014f34:	4640      	mov	r0, r8
 8014f36:	4649      	mov	r1, r9
 8014f38:	f7eb fb76 	bl	8000628 <__aeabi_dmul>
 8014f3c:	f7eb fe24 	bl	8000b88 <__aeabi_d2iz>
 8014f40:	f7eb fb08 	bl	8000554 <__aeabi_i2d>
 8014f44:	2200      	movs	r2, #0
 8014f46:	4b4a      	ldr	r3, [pc, #296]	; (8015070 <__kernel_rem_pio2+0x338>)
 8014f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f4c:	f7eb fb6c 	bl	8000628 <__aeabi_dmul>
 8014f50:	4602      	mov	r2, r0
 8014f52:	460b      	mov	r3, r1
 8014f54:	4640      	mov	r0, r8
 8014f56:	4649      	mov	r1, r9
 8014f58:	f7eb f9ae 	bl	80002b8 <__aeabi_dsub>
 8014f5c:	f7eb fe14 	bl	8000b88 <__aeabi_d2iz>
 8014f60:	ab0e      	add	r3, sp, #56	; 0x38
 8014f62:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014f66:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014f6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f6e:	f7eb f9a5 	bl	80002bc <__adddf3>
 8014f72:	3501      	adds	r5, #1
 8014f74:	4680      	mov	r8, r0
 8014f76:	4689      	mov	r9, r1
 8014f78:	e75e      	b.n	8014e38 <__kernel_rem_pio2+0x100>
 8014f7a:	d105      	bne.n	8014f88 <__kernel_rem_pio2+0x250>
 8014f7c:	1e63      	subs	r3, r4, #1
 8014f7e:	aa0e      	add	r2, sp, #56	; 0x38
 8014f80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014f84:	15c3      	asrs	r3, r0, #23
 8014f86:	e79f      	b.n	8014ec8 <__kernel_rem_pio2+0x190>
 8014f88:	2200      	movs	r2, #0
 8014f8a:	4b3a      	ldr	r3, [pc, #232]	; (8015074 <__kernel_rem_pio2+0x33c>)
 8014f8c:	f7eb fdd2 	bl	8000b34 <__aeabi_dcmpge>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	d139      	bne.n	8015008 <__kernel_rem_pio2+0x2d0>
 8014f94:	9002      	str	r0, [sp, #8]
 8014f96:	2200      	movs	r2, #0
 8014f98:	2300      	movs	r3, #0
 8014f9a:	4630      	mov	r0, r6
 8014f9c:	4639      	mov	r1, r7
 8014f9e:	f7eb fdab 	bl	8000af8 <__aeabi_dcmpeq>
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	f000 80c7 	beq.w	8015136 <__kernel_rem_pio2+0x3fe>
 8014fa8:	1e65      	subs	r5, r4, #1
 8014faa:	462b      	mov	r3, r5
 8014fac:	2200      	movs	r2, #0
 8014fae:	9904      	ldr	r1, [sp, #16]
 8014fb0:	428b      	cmp	r3, r1
 8014fb2:	da6a      	bge.n	801508a <__kernel_rem_pio2+0x352>
 8014fb4:	2a00      	cmp	r2, #0
 8014fb6:	f000 8088 	beq.w	80150ca <__kernel_rem_pio2+0x392>
 8014fba:	ab0e      	add	r3, sp, #56	; 0x38
 8014fbc:	f1aa 0a18 	sub.w	sl, sl, #24
 8014fc0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	f000 80b4 	beq.w	8015132 <__kernel_rem_pio2+0x3fa>
 8014fca:	4650      	mov	r0, sl
 8014fcc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8015058 <__kernel_rem_pio2+0x320>
 8014fd0:	f000 fb3a 	bl	8015648 <scalbn>
 8014fd4:	00ec      	lsls	r4, r5, #3
 8014fd6:	ab72      	add	r3, sp, #456	; 0x1c8
 8014fd8:	191e      	adds	r6, r3, r4
 8014fda:	ec59 8b10 	vmov	r8, r9, d0
 8014fde:	f106 0a08 	add.w	sl, r6, #8
 8014fe2:	462f      	mov	r7, r5
 8014fe4:	2f00      	cmp	r7, #0
 8014fe6:	f280 80df 	bge.w	80151a8 <__kernel_rem_pio2+0x470>
 8014fea:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8015050 <__kernel_rem_pio2+0x318>
 8014fee:	f04f 0a00 	mov.w	sl, #0
 8014ff2:	eba5 030a 	sub.w	r3, r5, sl
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	f2c0 810a 	blt.w	8015210 <__kernel_rem_pio2+0x4d8>
 8014ffc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8015078 <__kernel_rem_pio2+0x340>
 8015000:	ec59 8b18 	vmov	r8, r9, d8
 8015004:	2700      	movs	r7, #0
 8015006:	e0f5      	b.n	80151f4 <__kernel_rem_pio2+0x4bc>
 8015008:	2302      	movs	r3, #2
 801500a:	9302      	str	r3, [sp, #8]
 801500c:	e760      	b.n	8014ed0 <__kernel_rem_pio2+0x198>
 801500e:	ab0e      	add	r3, sp, #56	; 0x38
 8015010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015014:	b94d      	cbnz	r5, 801502a <__kernel_rem_pio2+0x2f2>
 8015016:	b12b      	cbz	r3, 8015024 <__kernel_rem_pio2+0x2ec>
 8015018:	a80e      	add	r0, sp, #56	; 0x38
 801501a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801501e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015022:	2301      	movs	r3, #1
 8015024:	3201      	adds	r2, #1
 8015026:	461d      	mov	r5, r3
 8015028:	e759      	b.n	8014ede <__kernel_rem_pio2+0x1a6>
 801502a:	a80e      	add	r0, sp, #56	; 0x38
 801502c:	1acb      	subs	r3, r1, r3
 801502e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8015032:	462b      	mov	r3, r5
 8015034:	e7f6      	b.n	8015024 <__kernel_rem_pio2+0x2ec>
 8015036:	1e62      	subs	r2, r4, #1
 8015038:	ab0e      	add	r3, sp, #56	; 0x38
 801503a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801503e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8015042:	a90e      	add	r1, sp, #56	; 0x38
 8015044:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8015048:	e757      	b.n	8014efa <__kernel_rem_pio2+0x1c2>
 801504a:	bf00      	nop
 801504c:	f3af 8000 	nop.w
	...
 801505c:	3ff00000 	.word	0x3ff00000
 8015060:	0801a220 	.word	0x0801a220
 8015064:	40200000 	.word	0x40200000
 8015068:	3ff00000 	.word	0x3ff00000
 801506c:	3e700000 	.word	0x3e700000
 8015070:	41700000 	.word	0x41700000
 8015074:	3fe00000 	.word	0x3fe00000
 8015078:	0801a1e0 	.word	0x0801a1e0
 801507c:	1e62      	subs	r2, r4, #1
 801507e:	ab0e      	add	r3, sp, #56	; 0x38
 8015080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015084:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8015088:	e7db      	b.n	8015042 <__kernel_rem_pio2+0x30a>
 801508a:	a90e      	add	r1, sp, #56	; 0x38
 801508c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8015090:	3b01      	subs	r3, #1
 8015092:	430a      	orrs	r2, r1
 8015094:	e78b      	b.n	8014fae <__kernel_rem_pio2+0x276>
 8015096:	3301      	adds	r3, #1
 8015098:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801509c:	2900      	cmp	r1, #0
 801509e:	d0fa      	beq.n	8015096 <__kernel_rem_pio2+0x35e>
 80150a0:	9a08      	ldr	r2, [sp, #32]
 80150a2:	4422      	add	r2, r4
 80150a4:	00d2      	lsls	r2, r2, #3
 80150a6:	a922      	add	r1, sp, #136	; 0x88
 80150a8:	18e3      	adds	r3, r4, r3
 80150aa:	9206      	str	r2, [sp, #24]
 80150ac:	440a      	add	r2, r1
 80150ae:	9302      	str	r3, [sp, #8]
 80150b0:	f10b 0108 	add.w	r1, fp, #8
 80150b4:	f102 0308 	add.w	r3, r2, #8
 80150b8:	1c66      	adds	r6, r4, #1
 80150ba:	910a      	str	r1, [sp, #40]	; 0x28
 80150bc:	2500      	movs	r5, #0
 80150be:	930d      	str	r3, [sp, #52]	; 0x34
 80150c0:	9b02      	ldr	r3, [sp, #8]
 80150c2:	42b3      	cmp	r3, r6
 80150c4:	da04      	bge.n	80150d0 <__kernel_rem_pio2+0x398>
 80150c6:	461c      	mov	r4, r3
 80150c8:	e6a6      	b.n	8014e18 <__kernel_rem_pio2+0xe0>
 80150ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150cc:	2301      	movs	r3, #1
 80150ce:	e7e3      	b.n	8015098 <__kernel_rem_pio2+0x360>
 80150d0:	9b06      	ldr	r3, [sp, #24]
 80150d2:	18ef      	adds	r7, r5, r3
 80150d4:	ab22      	add	r3, sp, #136	; 0x88
 80150d6:	441f      	add	r7, r3
 80150d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80150da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80150de:	f7eb fa39 	bl	8000554 <__aeabi_i2d>
 80150e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150e4:	461c      	mov	r4, r3
 80150e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80150e8:	e9c7 0100 	strd	r0, r1, [r7]
 80150ec:	eb03 0b05 	add.w	fp, r3, r5
 80150f0:	2700      	movs	r7, #0
 80150f2:	f04f 0800 	mov.w	r8, #0
 80150f6:	f04f 0900 	mov.w	r9, #0
 80150fa:	9b07      	ldr	r3, [sp, #28]
 80150fc:	429f      	cmp	r7, r3
 80150fe:	dd08      	ble.n	8015112 <__kernel_rem_pio2+0x3da>
 8015100:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015102:	aa72      	add	r2, sp, #456	; 0x1c8
 8015104:	18eb      	adds	r3, r5, r3
 8015106:	4413      	add	r3, r2
 8015108:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801510c:	3601      	adds	r6, #1
 801510e:	3508      	adds	r5, #8
 8015110:	e7d6      	b.n	80150c0 <__kernel_rem_pio2+0x388>
 8015112:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8015116:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801511a:	f7eb fa85 	bl	8000628 <__aeabi_dmul>
 801511e:	4602      	mov	r2, r0
 8015120:	460b      	mov	r3, r1
 8015122:	4640      	mov	r0, r8
 8015124:	4649      	mov	r1, r9
 8015126:	f7eb f8c9 	bl	80002bc <__adddf3>
 801512a:	3701      	adds	r7, #1
 801512c:	4680      	mov	r8, r0
 801512e:	4689      	mov	r9, r1
 8015130:	e7e3      	b.n	80150fa <__kernel_rem_pio2+0x3c2>
 8015132:	3d01      	subs	r5, #1
 8015134:	e741      	b.n	8014fba <__kernel_rem_pio2+0x282>
 8015136:	f1ca 0000 	rsb	r0, sl, #0
 801513a:	ec47 6b10 	vmov	d0, r6, r7
 801513e:	f000 fa83 	bl	8015648 <scalbn>
 8015142:	ec57 6b10 	vmov	r6, r7, d0
 8015146:	2200      	movs	r2, #0
 8015148:	4b99      	ldr	r3, [pc, #612]	; (80153b0 <__kernel_rem_pio2+0x678>)
 801514a:	ee10 0a10 	vmov	r0, s0
 801514e:	4639      	mov	r1, r7
 8015150:	f7eb fcf0 	bl	8000b34 <__aeabi_dcmpge>
 8015154:	b1f8      	cbz	r0, 8015196 <__kernel_rem_pio2+0x45e>
 8015156:	2200      	movs	r2, #0
 8015158:	4b96      	ldr	r3, [pc, #600]	; (80153b4 <__kernel_rem_pio2+0x67c>)
 801515a:	4630      	mov	r0, r6
 801515c:	4639      	mov	r1, r7
 801515e:	f7eb fa63 	bl	8000628 <__aeabi_dmul>
 8015162:	f7eb fd11 	bl	8000b88 <__aeabi_d2iz>
 8015166:	4680      	mov	r8, r0
 8015168:	f7eb f9f4 	bl	8000554 <__aeabi_i2d>
 801516c:	2200      	movs	r2, #0
 801516e:	4b90      	ldr	r3, [pc, #576]	; (80153b0 <__kernel_rem_pio2+0x678>)
 8015170:	f7eb fa5a 	bl	8000628 <__aeabi_dmul>
 8015174:	460b      	mov	r3, r1
 8015176:	4602      	mov	r2, r0
 8015178:	4639      	mov	r1, r7
 801517a:	4630      	mov	r0, r6
 801517c:	f7eb f89c 	bl	80002b8 <__aeabi_dsub>
 8015180:	f7eb fd02 	bl	8000b88 <__aeabi_d2iz>
 8015184:	1c65      	adds	r5, r4, #1
 8015186:	ab0e      	add	r3, sp, #56	; 0x38
 8015188:	f10a 0a18 	add.w	sl, sl, #24
 801518c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8015190:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8015194:	e719      	b.n	8014fca <__kernel_rem_pio2+0x292>
 8015196:	4630      	mov	r0, r6
 8015198:	4639      	mov	r1, r7
 801519a:	f7eb fcf5 	bl	8000b88 <__aeabi_d2iz>
 801519e:	ab0e      	add	r3, sp, #56	; 0x38
 80151a0:	4625      	mov	r5, r4
 80151a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80151a6:	e710      	b.n	8014fca <__kernel_rem_pio2+0x292>
 80151a8:	ab0e      	add	r3, sp, #56	; 0x38
 80151aa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80151ae:	f7eb f9d1 	bl	8000554 <__aeabi_i2d>
 80151b2:	4642      	mov	r2, r8
 80151b4:	464b      	mov	r3, r9
 80151b6:	f7eb fa37 	bl	8000628 <__aeabi_dmul>
 80151ba:	2200      	movs	r2, #0
 80151bc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80151c0:	4b7c      	ldr	r3, [pc, #496]	; (80153b4 <__kernel_rem_pio2+0x67c>)
 80151c2:	4640      	mov	r0, r8
 80151c4:	4649      	mov	r1, r9
 80151c6:	f7eb fa2f 	bl	8000628 <__aeabi_dmul>
 80151ca:	3f01      	subs	r7, #1
 80151cc:	4680      	mov	r8, r0
 80151ce:	4689      	mov	r9, r1
 80151d0:	e708      	b.n	8014fe4 <__kernel_rem_pio2+0x2ac>
 80151d2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80151d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151da:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80151de:	f7eb fa23 	bl	8000628 <__aeabi_dmul>
 80151e2:	4602      	mov	r2, r0
 80151e4:	460b      	mov	r3, r1
 80151e6:	4640      	mov	r0, r8
 80151e8:	4649      	mov	r1, r9
 80151ea:	f7eb f867 	bl	80002bc <__adddf3>
 80151ee:	3701      	adds	r7, #1
 80151f0:	4680      	mov	r8, r0
 80151f2:	4689      	mov	r9, r1
 80151f4:	9b04      	ldr	r3, [sp, #16]
 80151f6:	429f      	cmp	r7, r3
 80151f8:	dc01      	bgt.n	80151fe <__kernel_rem_pio2+0x4c6>
 80151fa:	45ba      	cmp	sl, r7
 80151fc:	dae9      	bge.n	80151d2 <__kernel_rem_pio2+0x49a>
 80151fe:	ab4a      	add	r3, sp, #296	; 0x128
 8015200:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015204:	e9c3 8900 	strd	r8, r9, [r3]
 8015208:	f10a 0a01 	add.w	sl, sl, #1
 801520c:	3e08      	subs	r6, #8
 801520e:	e6f0      	b.n	8014ff2 <__kernel_rem_pio2+0x2ba>
 8015210:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8015212:	2b03      	cmp	r3, #3
 8015214:	d85b      	bhi.n	80152ce <__kernel_rem_pio2+0x596>
 8015216:	e8df f003 	tbb	[pc, r3]
 801521a:	264a      	.short	0x264a
 801521c:	0226      	.short	0x0226
 801521e:	ab9a      	add	r3, sp, #616	; 0x268
 8015220:	441c      	add	r4, r3
 8015222:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8015226:	46a2      	mov	sl, r4
 8015228:	46ab      	mov	fp, r5
 801522a:	f1bb 0f00 	cmp.w	fp, #0
 801522e:	dc6c      	bgt.n	801530a <__kernel_rem_pio2+0x5d2>
 8015230:	46a2      	mov	sl, r4
 8015232:	46ab      	mov	fp, r5
 8015234:	f1bb 0f01 	cmp.w	fp, #1
 8015238:	f300 8086 	bgt.w	8015348 <__kernel_rem_pio2+0x610>
 801523c:	2000      	movs	r0, #0
 801523e:	2100      	movs	r1, #0
 8015240:	2d01      	cmp	r5, #1
 8015242:	f300 80a0 	bgt.w	8015386 <__kernel_rem_pio2+0x64e>
 8015246:	9b02      	ldr	r3, [sp, #8]
 8015248:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801524c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8015250:	2b00      	cmp	r3, #0
 8015252:	f040 809e 	bne.w	8015392 <__kernel_rem_pio2+0x65a>
 8015256:	9b01      	ldr	r3, [sp, #4]
 8015258:	e9c3 7800 	strd	r7, r8, [r3]
 801525c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8015260:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8015264:	e033      	b.n	80152ce <__kernel_rem_pio2+0x596>
 8015266:	3408      	adds	r4, #8
 8015268:	ab4a      	add	r3, sp, #296	; 0x128
 801526a:	441c      	add	r4, r3
 801526c:	462e      	mov	r6, r5
 801526e:	2000      	movs	r0, #0
 8015270:	2100      	movs	r1, #0
 8015272:	2e00      	cmp	r6, #0
 8015274:	da3a      	bge.n	80152ec <__kernel_rem_pio2+0x5b4>
 8015276:	9b02      	ldr	r3, [sp, #8]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d03d      	beq.n	80152f8 <__kernel_rem_pio2+0x5c0>
 801527c:	4602      	mov	r2, r0
 801527e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015282:	9c01      	ldr	r4, [sp, #4]
 8015284:	e9c4 2300 	strd	r2, r3, [r4]
 8015288:	4602      	mov	r2, r0
 801528a:	460b      	mov	r3, r1
 801528c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8015290:	f7eb f812 	bl	80002b8 <__aeabi_dsub>
 8015294:	ae4c      	add	r6, sp, #304	; 0x130
 8015296:	2401      	movs	r4, #1
 8015298:	42a5      	cmp	r5, r4
 801529a:	da30      	bge.n	80152fe <__kernel_rem_pio2+0x5c6>
 801529c:	9b02      	ldr	r3, [sp, #8]
 801529e:	b113      	cbz	r3, 80152a6 <__kernel_rem_pio2+0x56e>
 80152a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152a4:	4619      	mov	r1, r3
 80152a6:	9b01      	ldr	r3, [sp, #4]
 80152a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80152ac:	e00f      	b.n	80152ce <__kernel_rem_pio2+0x596>
 80152ae:	ab9a      	add	r3, sp, #616	; 0x268
 80152b0:	441c      	add	r4, r3
 80152b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80152b6:	2000      	movs	r0, #0
 80152b8:	2100      	movs	r1, #0
 80152ba:	2d00      	cmp	r5, #0
 80152bc:	da10      	bge.n	80152e0 <__kernel_rem_pio2+0x5a8>
 80152be:	9b02      	ldr	r3, [sp, #8]
 80152c0:	b113      	cbz	r3, 80152c8 <__kernel_rem_pio2+0x590>
 80152c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80152c6:	4619      	mov	r1, r3
 80152c8:	9b01      	ldr	r3, [sp, #4]
 80152ca:	e9c3 0100 	strd	r0, r1, [r3]
 80152ce:	9b06      	ldr	r3, [sp, #24]
 80152d0:	f003 0007 	and.w	r0, r3, #7
 80152d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80152d8:	ecbd 8b02 	vpop	{d8}
 80152dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152e0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80152e4:	f7ea ffea 	bl	80002bc <__adddf3>
 80152e8:	3d01      	subs	r5, #1
 80152ea:	e7e6      	b.n	80152ba <__kernel_rem_pio2+0x582>
 80152ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80152f0:	f7ea ffe4 	bl	80002bc <__adddf3>
 80152f4:	3e01      	subs	r6, #1
 80152f6:	e7bc      	b.n	8015272 <__kernel_rem_pio2+0x53a>
 80152f8:	4602      	mov	r2, r0
 80152fa:	460b      	mov	r3, r1
 80152fc:	e7c1      	b.n	8015282 <__kernel_rem_pio2+0x54a>
 80152fe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8015302:	f7ea ffdb 	bl	80002bc <__adddf3>
 8015306:	3401      	adds	r4, #1
 8015308:	e7c6      	b.n	8015298 <__kernel_rem_pio2+0x560>
 801530a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801530e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015312:	4640      	mov	r0, r8
 8015314:	ec53 2b17 	vmov	r2, r3, d7
 8015318:	4649      	mov	r1, r9
 801531a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801531e:	f7ea ffcd 	bl	80002bc <__adddf3>
 8015322:	4602      	mov	r2, r0
 8015324:	460b      	mov	r3, r1
 8015326:	4606      	mov	r6, r0
 8015328:	460f      	mov	r7, r1
 801532a:	4640      	mov	r0, r8
 801532c:	4649      	mov	r1, r9
 801532e:	f7ea ffc3 	bl	80002b8 <__aeabi_dsub>
 8015332:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015336:	f7ea ffc1 	bl	80002bc <__adddf3>
 801533a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801533e:	e9ca 0100 	strd	r0, r1, [sl]
 8015342:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8015346:	e770      	b.n	801522a <__kernel_rem_pio2+0x4f2>
 8015348:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801534c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8015350:	4630      	mov	r0, r6
 8015352:	ec53 2b17 	vmov	r2, r3, d7
 8015356:	4639      	mov	r1, r7
 8015358:	ed8d 7b04 	vstr	d7, [sp, #16]
 801535c:	f7ea ffae 	bl	80002bc <__adddf3>
 8015360:	4602      	mov	r2, r0
 8015362:	460b      	mov	r3, r1
 8015364:	4680      	mov	r8, r0
 8015366:	4689      	mov	r9, r1
 8015368:	4630      	mov	r0, r6
 801536a:	4639      	mov	r1, r7
 801536c:	f7ea ffa4 	bl	80002b8 <__aeabi_dsub>
 8015370:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015374:	f7ea ffa2 	bl	80002bc <__adddf3>
 8015378:	f10b 3bff 	add.w	fp, fp, #4294967295
 801537c:	e9ca 0100 	strd	r0, r1, [sl]
 8015380:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8015384:	e756      	b.n	8015234 <__kernel_rem_pio2+0x4fc>
 8015386:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801538a:	f7ea ff97 	bl	80002bc <__adddf3>
 801538e:	3d01      	subs	r5, #1
 8015390:	e756      	b.n	8015240 <__kernel_rem_pio2+0x508>
 8015392:	9b01      	ldr	r3, [sp, #4]
 8015394:	9a01      	ldr	r2, [sp, #4]
 8015396:	601f      	str	r7, [r3, #0]
 8015398:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801539c:	605c      	str	r4, [r3, #4]
 801539e:	609d      	str	r5, [r3, #8]
 80153a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80153a4:	60d3      	str	r3, [r2, #12]
 80153a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153aa:	6110      	str	r0, [r2, #16]
 80153ac:	6153      	str	r3, [r2, #20]
 80153ae:	e78e      	b.n	80152ce <__kernel_rem_pio2+0x596>
 80153b0:	41700000 	.word	0x41700000
 80153b4:	3e700000 	.word	0x3e700000

080153b8 <__kernel_sin>:
 80153b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153bc:	ec55 4b10 	vmov	r4, r5, d0
 80153c0:	b085      	sub	sp, #20
 80153c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80153c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80153ca:	ed8d 1b00 	vstr	d1, [sp]
 80153ce:	9002      	str	r0, [sp, #8]
 80153d0:	da06      	bge.n	80153e0 <__kernel_sin+0x28>
 80153d2:	ee10 0a10 	vmov	r0, s0
 80153d6:	4629      	mov	r1, r5
 80153d8:	f7eb fbd6 	bl	8000b88 <__aeabi_d2iz>
 80153dc:	2800      	cmp	r0, #0
 80153de:	d051      	beq.n	8015484 <__kernel_sin+0xcc>
 80153e0:	4622      	mov	r2, r4
 80153e2:	462b      	mov	r3, r5
 80153e4:	4620      	mov	r0, r4
 80153e6:	4629      	mov	r1, r5
 80153e8:	f7eb f91e 	bl	8000628 <__aeabi_dmul>
 80153ec:	4682      	mov	sl, r0
 80153ee:	468b      	mov	fp, r1
 80153f0:	4602      	mov	r2, r0
 80153f2:	460b      	mov	r3, r1
 80153f4:	4620      	mov	r0, r4
 80153f6:	4629      	mov	r1, r5
 80153f8:	f7eb f916 	bl	8000628 <__aeabi_dmul>
 80153fc:	a341      	add	r3, pc, #260	; (adr r3, 8015504 <__kernel_sin+0x14c>)
 80153fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015402:	4680      	mov	r8, r0
 8015404:	4689      	mov	r9, r1
 8015406:	4650      	mov	r0, sl
 8015408:	4659      	mov	r1, fp
 801540a:	f7eb f90d 	bl	8000628 <__aeabi_dmul>
 801540e:	a33f      	add	r3, pc, #252	; (adr r3, 801550c <__kernel_sin+0x154>)
 8015410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015414:	f7ea ff50 	bl	80002b8 <__aeabi_dsub>
 8015418:	4652      	mov	r2, sl
 801541a:	465b      	mov	r3, fp
 801541c:	f7eb f904 	bl	8000628 <__aeabi_dmul>
 8015420:	a33c      	add	r3, pc, #240	; (adr r3, 8015514 <__kernel_sin+0x15c>)
 8015422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015426:	f7ea ff49 	bl	80002bc <__adddf3>
 801542a:	4652      	mov	r2, sl
 801542c:	465b      	mov	r3, fp
 801542e:	f7eb f8fb 	bl	8000628 <__aeabi_dmul>
 8015432:	a33a      	add	r3, pc, #232	; (adr r3, 801551c <__kernel_sin+0x164>)
 8015434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015438:	f7ea ff3e 	bl	80002b8 <__aeabi_dsub>
 801543c:	4652      	mov	r2, sl
 801543e:	465b      	mov	r3, fp
 8015440:	f7eb f8f2 	bl	8000628 <__aeabi_dmul>
 8015444:	a337      	add	r3, pc, #220	; (adr r3, 8015524 <__kernel_sin+0x16c>)
 8015446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801544a:	f7ea ff37 	bl	80002bc <__adddf3>
 801544e:	9b02      	ldr	r3, [sp, #8]
 8015450:	4606      	mov	r6, r0
 8015452:	460f      	mov	r7, r1
 8015454:	b9db      	cbnz	r3, 801548e <__kernel_sin+0xd6>
 8015456:	4602      	mov	r2, r0
 8015458:	460b      	mov	r3, r1
 801545a:	4650      	mov	r0, sl
 801545c:	4659      	mov	r1, fp
 801545e:	f7eb f8e3 	bl	8000628 <__aeabi_dmul>
 8015462:	a325      	add	r3, pc, #148	; (adr r3, 80154f8 <__kernel_sin+0x140>)
 8015464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015468:	f7ea ff26 	bl	80002b8 <__aeabi_dsub>
 801546c:	4642      	mov	r2, r8
 801546e:	464b      	mov	r3, r9
 8015470:	f7eb f8da 	bl	8000628 <__aeabi_dmul>
 8015474:	4602      	mov	r2, r0
 8015476:	460b      	mov	r3, r1
 8015478:	4620      	mov	r0, r4
 801547a:	4629      	mov	r1, r5
 801547c:	f7ea ff1e 	bl	80002bc <__adddf3>
 8015480:	4604      	mov	r4, r0
 8015482:	460d      	mov	r5, r1
 8015484:	ec45 4b10 	vmov	d0, r4, r5
 8015488:	b005      	add	sp, #20
 801548a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801548e:	2200      	movs	r2, #0
 8015490:	4b1b      	ldr	r3, [pc, #108]	; (8015500 <__kernel_sin+0x148>)
 8015492:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015496:	f7eb f8c7 	bl	8000628 <__aeabi_dmul>
 801549a:	4632      	mov	r2, r6
 801549c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80154a0:	463b      	mov	r3, r7
 80154a2:	4640      	mov	r0, r8
 80154a4:	4649      	mov	r1, r9
 80154a6:	f7eb f8bf 	bl	8000628 <__aeabi_dmul>
 80154aa:	4602      	mov	r2, r0
 80154ac:	460b      	mov	r3, r1
 80154ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154b2:	f7ea ff01 	bl	80002b8 <__aeabi_dsub>
 80154b6:	4652      	mov	r2, sl
 80154b8:	465b      	mov	r3, fp
 80154ba:	f7eb f8b5 	bl	8000628 <__aeabi_dmul>
 80154be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154c2:	f7ea fef9 	bl	80002b8 <__aeabi_dsub>
 80154c6:	a30c      	add	r3, pc, #48	; (adr r3, 80154f8 <__kernel_sin+0x140>)
 80154c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154cc:	4606      	mov	r6, r0
 80154ce:	460f      	mov	r7, r1
 80154d0:	4640      	mov	r0, r8
 80154d2:	4649      	mov	r1, r9
 80154d4:	f7eb f8a8 	bl	8000628 <__aeabi_dmul>
 80154d8:	4602      	mov	r2, r0
 80154da:	460b      	mov	r3, r1
 80154dc:	4630      	mov	r0, r6
 80154de:	4639      	mov	r1, r7
 80154e0:	f7ea feec 	bl	80002bc <__adddf3>
 80154e4:	4602      	mov	r2, r0
 80154e6:	460b      	mov	r3, r1
 80154e8:	4620      	mov	r0, r4
 80154ea:	4629      	mov	r1, r5
 80154ec:	f7ea fee4 	bl	80002b8 <__aeabi_dsub>
 80154f0:	e7c6      	b.n	8015480 <__kernel_sin+0xc8>
 80154f2:	bf00      	nop
 80154f4:	f3af 8000 	nop.w
 80154f8:	55555549 	.word	0x55555549
 80154fc:	3fc55555 	.word	0x3fc55555
 8015500:	3fe00000 	.word	0x3fe00000
 8015504:	5acfd57c 	.word	0x5acfd57c
 8015508:	3de5d93a 	.word	0x3de5d93a
 801550c:	8a2b9ceb 	.word	0x8a2b9ceb
 8015510:	3e5ae5e6 	.word	0x3e5ae5e6
 8015514:	57b1fe7d 	.word	0x57b1fe7d
 8015518:	3ec71de3 	.word	0x3ec71de3
 801551c:	19c161d5 	.word	0x19c161d5
 8015520:	3f2a01a0 	.word	0x3f2a01a0
 8015524:	1110f8a6 	.word	0x1110f8a6
 8015528:	3f811111 	.word	0x3f811111

0801552c <fabs>:
 801552c:	ec51 0b10 	vmov	r0, r1, d0
 8015530:	ee10 2a10 	vmov	r2, s0
 8015534:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015538:	ec43 2b10 	vmov	d0, r2, r3
 801553c:	4770      	bx	lr
	...

08015540 <floor>:
 8015540:	ec51 0b10 	vmov	r0, r1, d0
 8015544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015548:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801554c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015550:	2e13      	cmp	r6, #19
 8015552:	460c      	mov	r4, r1
 8015554:	ee10 5a10 	vmov	r5, s0
 8015558:	4680      	mov	r8, r0
 801555a:	dc34      	bgt.n	80155c6 <floor+0x86>
 801555c:	2e00      	cmp	r6, #0
 801555e:	da16      	bge.n	801558e <floor+0x4e>
 8015560:	a335      	add	r3, pc, #212	; (adr r3, 8015638 <floor+0xf8>)
 8015562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015566:	f7ea fea9 	bl	80002bc <__adddf3>
 801556a:	2200      	movs	r2, #0
 801556c:	2300      	movs	r3, #0
 801556e:	f7eb faeb 	bl	8000b48 <__aeabi_dcmpgt>
 8015572:	b148      	cbz	r0, 8015588 <floor+0x48>
 8015574:	2c00      	cmp	r4, #0
 8015576:	da59      	bge.n	801562c <floor+0xec>
 8015578:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801557c:	4a30      	ldr	r2, [pc, #192]	; (8015640 <floor+0x100>)
 801557e:	432b      	orrs	r3, r5
 8015580:	2500      	movs	r5, #0
 8015582:	42ab      	cmp	r3, r5
 8015584:	bf18      	it	ne
 8015586:	4614      	movne	r4, r2
 8015588:	4621      	mov	r1, r4
 801558a:	4628      	mov	r0, r5
 801558c:	e025      	b.n	80155da <floor+0x9a>
 801558e:	4f2d      	ldr	r7, [pc, #180]	; (8015644 <floor+0x104>)
 8015590:	4137      	asrs	r7, r6
 8015592:	ea01 0307 	and.w	r3, r1, r7
 8015596:	4303      	orrs	r3, r0
 8015598:	d01f      	beq.n	80155da <floor+0x9a>
 801559a:	a327      	add	r3, pc, #156	; (adr r3, 8015638 <floor+0xf8>)
 801559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a0:	f7ea fe8c 	bl	80002bc <__adddf3>
 80155a4:	2200      	movs	r2, #0
 80155a6:	2300      	movs	r3, #0
 80155a8:	f7eb face 	bl	8000b48 <__aeabi_dcmpgt>
 80155ac:	2800      	cmp	r0, #0
 80155ae:	d0eb      	beq.n	8015588 <floor+0x48>
 80155b0:	2c00      	cmp	r4, #0
 80155b2:	bfbe      	ittt	lt
 80155b4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80155b8:	fa43 f606 	asrlt.w	r6, r3, r6
 80155bc:	19a4      	addlt	r4, r4, r6
 80155be:	ea24 0407 	bic.w	r4, r4, r7
 80155c2:	2500      	movs	r5, #0
 80155c4:	e7e0      	b.n	8015588 <floor+0x48>
 80155c6:	2e33      	cmp	r6, #51	; 0x33
 80155c8:	dd0b      	ble.n	80155e2 <floor+0xa2>
 80155ca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80155ce:	d104      	bne.n	80155da <floor+0x9a>
 80155d0:	ee10 2a10 	vmov	r2, s0
 80155d4:	460b      	mov	r3, r1
 80155d6:	f7ea fe71 	bl	80002bc <__adddf3>
 80155da:	ec41 0b10 	vmov	d0, r0, r1
 80155de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155e2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80155e6:	f04f 33ff 	mov.w	r3, #4294967295
 80155ea:	fa23 f707 	lsr.w	r7, r3, r7
 80155ee:	4207      	tst	r7, r0
 80155f0:	d0f3      	beq.n	80155da <floor+0x9a>
 80155f2:	a311      	add	r3, pc, #68	; (adr r3, 8015638 <floor+0xf8>)
 80155f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f8:	f7ea fe60 	bl	80002bc <__adddf3>
 80155fc:	2200      	movs	r2, #0
 80155fe:	2300      	movs	r3, #0
 8015600:	f7eb faa2 	bl	8000b48 <__aeabi_dcmpgt>
 8015604:	2800      	cmp	r0, #0
 8015606:	d0bf      	beq.n	8015588 <floor+0x48>
 8015608:	2c00      	cmp	r4, #0
 801560a:	da02      	bge.n	8015612 <floor+0xd2>
 801560c:	2e14      	cmp	r6, #20
 801560e:	d103      	bne.n	8015618 <floor+0xd8>
 8015610:	3401      	adds	r4, #1
 8015612:	ea25 0507 	bic.w	r5, r5, r7
 8015616:	e7b7      	b.n	8015588 <floor+0x48>
 8015618:	2301      	movs	r3, #1
 801561a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801561e:	fa03 f606 	lsl.w	r6, r3, r6
 8015622:	4435      	add	r5, r6
 8015624:	4545      	cmp	r5, r8
 8015626:	bf38      	it	cc
 8015628:	18e4      	addcc	r4, r4, r3
 801562a:	e7f2      	b.n	8015612 <floor+0xd2>
 801562c:	2500      	movs	r5, #0
 801562e:	462c      	mov	r4, r5
 8015630:	e7aa      	b.n	8015588 <floor+0x48>
 8015632:	bf00      	nop
 8015634:	f3af 8000 	nop.w
 8015638:	8800759c 	.word	0x8800759c
 801563c:	7e37e43c 	.word	0x7e37e43c
 8015640:	bff00000 	.word	0xbff00000
 8015644:	000fffff 	.word	0x000fffff

08015648 <scalbn>:
 8015648:	b570      	push	{r4, r5, r6, lr}
 801564a:	ec55 4b10 	vmov	r4, r5, d0
 801564e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015652:	4606      	mov	r6, r0
 8015654:	462b      	mov	r3, r5
 8015656:	b9aa      	cbnz	r2, 8015684 <scalbn+0x3c>
 8015658:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801565c:	4323      	orrs	r3, r4
 801565e:	d03b      	beq.n	80156d8 <scalbn+0x90>
 8015660:	4b31      	ldr	r3, [pc, #196]	; (8015728 <scalbn+0xe0>)
 8015662:	4629      	mov	r1, r5
 8015664:	2200      	movs	r2, #0
 8015666:	ee10 0a10 	vmov	r0, s0
 801566a:	f7ea ffdd 	bl	8000628 <__aeabi_dmul>
 801566e:	4b2f      	ldr	r3, [pc, #188]	; (801572c <scalbn+0xe4>)
 8015670:	429e      	cmp	r6, r3
 8015672:	4604      	mov	r4, r0
 8015674:	460d      	mov	r5, r1
 8015676:	da12      	bge.n	801569e <scalbn+0x56>
 8015678:	a327      	add	r3, pc, #156	; (adr r3, 8015718 <scalbn+0xd0>)
 801567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801567e:	f7ea ffd3 	bl	8000628 <__aeabi_dmul>
 8015682:	e009      	b.n	8015698 <scalbn+0x50>
 8015684:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015688:	428a      	cmp	r2, r1
 801568a:	d10c      	bne.n	80156a6 <scalbn+0x5e>
 801568c:	ee10 2a10 	vmov	r2, s0
 8015690:	4620      	mov	r0, r4
 8015692:	4629      	mov	r1, r5
 8015694:	f7ea fe12 	bl	80002bc <__adddf3>
 8015698:	4604      	mov	r4, r0
 801569a:	460d      	mov	r5, r1
 801569c:	e01c      	b.n	80156d8 <scalbn+0x90>
 801569e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80156a2:	460b      	mov	r3, r1
 80156a4:	3a36      	subs	r2, #54	; 0x36
 80156a6:	4432      	add	r2, r6
 80156a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80156ac:	428a      	cmp	r2, r1
 80156ae:	dd0b      	ble.n	80156c8 <scalbn+0x80>
 80156b0:	ec45 4b11 	vmov	d1, r4, r5
 80156b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015720 <scalbn+0xd8>
 80156b8:	f000 f83c 	bl	8015734 <copysign>
 80156bc:	a318      	add	r3, pc, #96	; (adr r3, 8015720 <scalbn+0xd8>)
 80156be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156c2:	ec51 0b10 	vmov	r0, r1, d0
 80156c6:	e7da      	b.n	801567e <scalbn+0x36>
 80156c8:	2a00      	cmp	r2, #0
 80156ca:	dd08      	ble.n	80156de <scalbn+0x96>
 80156cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80156d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156d8:	ec45 4b10 	vmov	d0, r4, r5
 80156dc:	bd70      	pop	{r4, r5, r6, pc}
 80156de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80156e2:	da0d      	bge.n	8015700 <scalbn+0xb8>
 80156e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80156e8:	429e      	cmp	r6, r3
 80156ea:	ec45 4b11 	vmov	d1, r4, r5
 80156ee:	dce1      	bgt.n	80156b4 <scalbn+0x6c>
 80156f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015718 <scalbn+0xd0>
 80156f4:	f000 f81e 	bl	8015734 <copysign>
 80156f8:	a307      	add	r3, pc, #28	; (adr r3, 8015718 <scalbn+0xd0>)
 80156fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fe:	e7e0      	b.n	80156c2 <scalbn+0x7a>
 8015700:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015704:	3236      	adds	r2, #54	; 0x36
 8015706:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801570a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801570e:	4620      	mov	r0, r4
 8015710:	4629      	mov	r1, r5
 8015712:	2200      	movs	r2, #0
 8015714:	4b06      	ldr	r3, [pc, #24]	; (8015730 <scalbn+0xe8>)
 8015716:	e7b2      	b.n	801567e <scalbn+0x36>
 8015718:	c2f8f359 	.word	0xc2f8f359
 801571c:	01a56e1f 	.word	0x01a56e1f
 8015720:	8800759c 	.word	0x8800759c
 8015724:	7e37e43c 	.word	0x7e37e43c
 8015728:	43500000 	.word	0x43500000
 801572c:	ffff3cb0 	.word	0xffff3cb0
 8015730:	3c900000 	.word	0x3c900000

08015734 <copysign>:
 8015734:	ec51 0b10 	vmov	r0, r1, d0
 8015738:	ee11 0a90 	vmov	r0, s3
 801573c:	ee10 2a10 	vmov	r2, s0
 8015740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8015744:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015748:	ea41 0300 	orr.w	r3, r1, r0
 801574c:	ec43 2b10 	vmov	d0, r2, r3
 8015750:	4770      	bx	lr
	...

08015754 <__errno>:
 8015754:	4b01      	ldr	r3, [pc, #4]	; (801575c <__errno+0x8>)
 8015756:	6818      	ldr	r0, [r3, #0]
 8015758:	4770      	bx	lr
 801575a:	bf00      	nop
 801575c:	2000000c 	.word	0x2000000c

08015760 <__libc_init_array>:
 8015760:	b570      	push	{r4, r5, r6, lr}
 8015762:	4e0d      	ldr	r6, [pc, #52]	; (8015798 <__libc_init_array+0x38>)
 8015764:	4c0d      	ldr	r4, [pc, #52]	; (801579c <__libc_init_array+0x3c>)
 8015766:	1ba4      	subs	r4, r4, r6
 8015768:	10a4      	asrs	r4, r4, #2
 801576a:	2500      	movs	r5, #0
 801576c:	42a5      	cmp	r5, r4
 801576e:	d109      	bne.n	8015784 <__libc_init_array+0x24>
 8015770:	4e0b      	ldr	r6, [pc, #44]	; (80157a0 <__libc_init_array+0x40>)
 8015772:	4c0c      	ldr	r4, [pc, #48]	; (80157a4 <__libc_init_array+0x44>)
 8015774:	f004 f9e6 	bl	8019b44 <_init>
 8015778:	1ba4      	subs	r4, r4, r6
 801577a:	10a4      	asrs	r4, r4, #2
 801577c:	2500      	movs	r5, #0
 801577e:	42a5      	cmp	r5, r4
 8015780:	d105      	bne.n	801578e <__libc_init_array+0x2e>
 8015782:	bd70      	pop	{r4, r5, r6, pc}
 8015784:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015788:	4798      	blx	r3
 801578a:	3501      	adds	r5, #1
 801578c:	e7ee      	b.n	801576c <__libc_init_array+0xc>
 801578e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015792:	4798      	blx	r3
 8015794:	3501      	adds	r5, #1
 8015796:	e7f2      	b.n	801577e <__libc_init_array+0x1e>
 8015798:	0801a564 	.word	0x0801a564
 801579c:	0801a564 	.word	0x0801a564
 80157a0:	0801a564 	.word	0x0801a564
 80157a4:	0801a56c 	.word	0x0801a56c

080157a8 <memset>:
 80157a8:	4402      	add	r2, r0
 80157aa:	4603      	mov	r3, r0
 80157ac:	4293      	cmp	r3, r2
 80157ae:	d100      	bne.n	80157b2 <memset+0xa>
 80157b0:	4770      	bx	lr
 80157b2:	f803 1b01 	strb.w	r1, [r3], #1
 80157b6:	e7f9      	b.n	80157ac <memset+0x4>

080157b8 <__cvt>:
 80157b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157bc:	ec55 4b10 	vmov	r4, r5, d0
 80157c0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80157c2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80157c6:	2d00      	cmp	r5, #0
 80157c8:	460e      	mov	r6, r1
 80157ca:	4691      	mov	r9, r2
 80157cc:	4619      	mov	r1, r3
 80157ce:	bfb8      	it	lt
 80157d0:	4622      	movlt	r2, r4
 80157d2:	462b      	mov	r3, r5
 80157d4:	f027 0720 	bic.w	r7, r7, #32
 80157d8:	bfbb      	ittet	lt
 80157da:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80157de:	461d      	movlt	r5, r3
 80157e0:	2300      	movge	r3, #0
 80157e2:	232d      	movlt	r3, #45	; 0x2d
 80157e4:	bfb8      	it	lt
 80157e6:	4614      	movlt	r4, r2
 80157e8:	2f46      	cmp	r7, #70	; 0x46
 80157ea:	700b      	strb	r3, [r1, #0]
 80157ec:	d004      	beq.n	80157f8 <__cvt+0x40>
 80157ee:	2f45      	cmp	r7, #69	; 0x45
 80157f0:	d100      	bne.n	80157f4 <__cvt+0x3c>
 80157f2:	3601      	adds	r6, #1
 80157f4:	2102      	movs	r1, #2
 80157f6:	e000      	b.n	80157fa <__cvt+0x42>
 80157f8:	2103      	movs	r1, #3
 80157fa:	ab03      	add	r3, sp, #12
 80157fc:	9301      	str	r3, [sp, #4]
 80157fe:	ab02      	add	r3, sp, #8
 8015800:	9300      	str	r3, [sp, #0]
 8015802:	4632      	mov	r2, r6
 8015804:	4653      	mov	r3, sl
 8015806:	ec45 4b10 	vmov	d0, r4, r5
 801580a:	f001 fdfd 	bl	8017408 <_dtoa_r>
 801580e:	2f47      	cmp	r7, #71	; 0x47
 8015810:	4680      	mov	r8, r0
 8015812:	d102      	bne.n	801581a <__cvt+0x62>
 8015814:	f019 0f01 	tst.w	r9, #1
 8015818:	d026      	beq.n	8015868 <__cvt+0xb0>
 801581a:	2f46      	cmp	r7, #70	; 0x46
 801581c:	eb08 0906 	add.w	r9, r8, r6
 8015820:	d111      	bne.n	8015846 <__cvt+0x8e>
 8015822:	f898 3000 	ldrb.w	r3, [r8]
 8015826:	2b30      	cmp	r3, #48	; 0x30
 8015828:	d10a      	bne.n	8015840 <__cvt+0x88>
 801582a:	2200      	movs	r2, #0
 801582c:	2300      	movs	r3, #0
 801582e:	4620      	mov	r0, r4
 8015830:	4629      	mov	r1, r5
 8015832:	f7eb f961 	bl	8000af8 <__aeabi_dcmpeq>
 8015836:	b918      	cbnz	r0, 8015840 <__cvt+0x88>
 8015838:	f1c6 0601 	rsb	r6, r6, #1
 801583c:	f8ca 6000 	str.w	r6, [sl]
 8015840:	f8da 3000 	ldr.w	r3, [sl]
 8015844:	4499      	add	r9, r3
 8015846:	2200      	movs	r2, #0
 8015848:	2300      	movs	r3, #0
 801584a:	4620      	mov	r0, r4
 801584c:	4629      	mov	r1, r5
 801584e:	f7eb f953 	bl	8000af8 <__aeabi_dcmpeq>
 8015852:	b938      	cbnz	r0, 8015864 <__cvt+0xac>
 8015854:	2230      	movs	r2, #48	; 0x30
 8015856:	9b03      	ldr	r3, [sp, #12]
 8015858:	454b      	cmp	r3, r9
 801585a:	d205      	bcs.n	8015868 <__cvt+0xb0>
 801585c:	1c59      	adds	r1, r3, #1
 801585e:	9103      	str	r1, [sp, #12]
 8015860:	701a      	strb	r2, [r3, #0]
 8015862:	e7f8      	b.n	8015856 <__cvt+0x9e>
 8015864:	f8cd 900c 	str.w	r9, [sp, #12]
 8015868:	9b03      	ldr	r3, [sp, #12]
 801586a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801586c:	eba3 0308 	sub.w	r3, r3, r8
 8015870:	4640      	mov	r0, r8
 8015872:	6013      	str	r3, [r2, #0]
 8015874:	b004      	add	sp, #16
 8015876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801587a <__exponent>:
 801587a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801587c:	2900      	cmp	r1, #0
 801587e:	4604      	mov	r4, r0
 8015880:	bfba      	itte	lt
 8015882:	4249      	neglt	r1, r1
 8015884:	232d      	movlt	r3, #45	; 0x2d
 8015886:	232b      	movge	r3, #43	; 0x2b
 8015888:	2909      	cmp	r1, #9
 801588a:	f804 2b02 	strb.w	r2, [r4], #2
 801588e:	7043      	strb	r3, [r0, #1]
 8015890:	dd20      	ble.n	80158d4 <__exponent+0x5a>
 8015892:	f10d 0307 	add.w	r3, sp, #7
 8015896:	461f      	mov	r7, r3
 8015898:	260a      	movs	r6, #10
 801589a:	fb91 f5f6 	sdiv	r5, r1, r6
 801589e:	fb06 1115 	mls	r1, r6, r5, r1
 80158a2:	3130      	adds	r1, #48	; 0x30
 80158a4:	2d09      	cmp	r5, #9
 80158a6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80158aa:	f103 32ff 	add.w	r2, r3, #4294967295
 80158ae:	4629      	mov	r1, r5
 80158b0:	dc09      	bgt.n	80158c6 <__exponent+0x4c>
 80158b2:	3130      	adds	r1, #48	; 0x30
 80158b4:	3b02      	subs	r3, #2
 80158b6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80158ba:	42bb      	cmp	r3, r7
 80158bc:	4622      	mov	r2, r4
 80158be:	d304      	bcc.n	80158ca <__exponent+0x50>
 80158c0:	1a10      	subs	r0, r2, r0
 80158c2:	b003      	add	sp, #12
 80158c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80158c6:	4613      	mov	r3, r2
 80158c8:	e7e7      	b.n	801589a <__exponent+0x20>
 80158ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158ce:	f804 2b01 	strb.w	r2, [r4], #1
 80158d2:	e7f2      	b.n	80158ba <__exponent+0x40>
 80158d4:	2330      	movs	r3, #48	; 0x30
 80158d6:	4419      	add	r1, r3
 80158d8:	7083      	strb	r3, [r0, #2]
 80158da:	1d02      	adds	r2, r0, #4
 80158dc:	70c1      	strb	r1, [r0, #3]
 80158de:	e7ef      	b.n	80158c0 <__exponent+0x46>

080158e0 <_printf_float>:
 80158e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158e4:	b08d      	sub	sp, #52	; 0x34
 80158e6:	460c      	mov	r4, r1
 80158e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80158ec:	4616      	mov	r6, r2
 80158ee:	461f      	mov	r7, r3
 80158f0:	4605      	mov	r5, r0
 80158f2:	f002 fe7b 	bl	80185ec <_localeconv_r>
 80158f6:	6803      	ldr	r3, [r0, #0]
 80158f8:	9304      	str	r3, [sp, #16]
 80158fa:	4618      	mov	r0, r3
 80158fc:	f7ea fc80 	bl	8000200 <strlen>
 8015900:	2300      	movs	r3, #0
 8015902:	930a      	str	r3, [sp, #40]	; 0x28
 8015904:	f8d8 3000 	ldr.w	r3, [r8]
 8015908:	9005      	str	r0, [sp, #20]
 801590a:	3307      	adds	r3, #7
 801590c:	f023 0307 	bic.w	r3, r3, #7
 8015910:	f103 0208 	add.w	r2, r3, #8
 8015914:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015918:	f8d4 b000 	ldr.w	fp, [r4]
 801591c:	f8c8 2000 	str.w	r2, [r8]
 8015920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015924:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015928:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801592c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015930:	9307      	str	r3, [sp, #28]
 8015932:	f8cd 8018 	str.w	r8, [sp, #24]
 8015936:	f04f 32ff 	mov.w	r2, #4294967295
 801593a:	4ba7      	ldr	r3, [pc, #668]	; (8015bd8 <_printf_float+0x2f8>)
 801593c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015940:	f7eb f90c 	bl	8000b5c <__aeabi_dcmpun>
 8015944:	bb70      	cbnz	r0, 80159a4 <_printf_float+0xc4>
 8015946:	f04f 32ff 	mov.w	r2, #4294967295
 801594a:	4ba3      	ldr	r3, [pc, #652]	; (8015bd8 <_printf_float+0x2f8>)
 801594c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015950:	f7eb f8e6 	bl	8000b20 <__aeabi_dcmple>
 8015954:	bb30      	cbnz	r0, 80159a4 <_printf_float+0xc4>
 8015956:	2200      	movs	r2, #0
 8015958:	2300      	movs	r3, #0
 801595a:	4640      	mov	r0, r8
 801595c:	4649      	mov	r1, r9
 801595e:	f7eb f8d5 	bl	8000b0c <__aeabi_dcmplt>
 8015962:	b110      	cbz	r0, 801596a <_printf_float+0x8a>
 8015964:	232d      	movs	r3, #45	; 0x2d
 8015966:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801596a:	4a9c      	ldr	r2, [pc, #624]	; (8015bdc <_printf_float+0x2fc>)
 801596c:	4b9c      	ldr	r3, [pc, #624]	; (8015be0 <_printf_float+0x300>)
 801596e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015972:	bf8c      	ite	hi
 8015974:	4690      	movhi	r8, r2
 8015976:	4698      	movls	r8, r3
 8015978:	2303      	movs	r3, #3
 801597a:	f02b 0204 	bic.w	r2, fp, #4
 801597e:	6123      	str	r3, [r4, #16]
 8015980:	6022      	str	r2, [r4, #0]
 8015982:	f04f 0900 	mov.w	r9, #0
 8015986:	9700      	str	r7, [sp, #0]
 8015988:	4633      	mov	r3, r6
 801598a:	aa0b      	add	r2, sp, #44	; 0x2c
 801598c:	4621      	mov	r1, r4
 801598e:	4628      	mov	r0, r5
 8015990:	f000 f9e6 	bl	8015d60 <_printf_common>
 8015994:	3001      	adds	r0, #1
 8015996:	f040 808d 	bne.w	8015ab4 <_printf_float+0x1d4>
 801599a:	f04f 30ff 	mov.w	r0, #4294967295
 801599e:	b00d      	add	sp, #52	; 0x34
 80159a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159a4:	4642      	mov	r2, r8
 80159a6:	464b      	mov	r3, r9
 80159a8:	4640      	mov	r0, r8
 80159aa:	4649      	mov	r1, r9
 80159ac:	f7eb f8d6 	bl	8000b5c <__aeabi_dcmpun>
 80159b0:	b110      	cbz	r0, 80159b8 <_printf_float+0xd8>
 80159b2:	4a8c      	ldr	r2, [pc, #560]	; (8015be4 <_printf_float+0x304>)
 80159b4:	4b8c      	ldr	r3, [pc, #560]	; (8015be8 <_printf_float+0x308>)
 80159b6:	e7da      	b.n	801596e <_printf_float+0x8e>
 80159b8:	6861      	ldr	r1, [r4, #4]
 80159ba:	1c4b      	adds	r3, r1, #1
 80159bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80159c0:	a80a      	add	r0, sp, #40	; 0x28
 80159c2:	d13e      	bne.n	8015a42 <_printf_float+0x162>
 80159c4:	2306      	movs	r3, #6
 80159c6:	6063      	str	r3, [r4, #4]
 80159c8:	2300      	movs	r3, #0
 80159ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80159ce:	ab09      	add	r3, sp, #36	; 0x24
 80159d0:	9300      	str	r3, [sp, #0]
 80159d2:	ec49 8b10 	vmov	d0, r8, r9
 80159d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80159da:	6022      	str	r2, [r4, #0]
 80159dc:	f8cd a004 	str.w	sl, [sp, #4]
 80159e0:	6861      	ldr	r1, [r4, #4]
 80159e2:	4628      	mov	r0, r5
 80159e4:	f7ff fee8 	bl	80157b8 <__cvt>
 80159e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80159ec:	2b47      	cmp	r3, #71	; 0x47
 80159ee:	4680      	mov	r8, r0
 80159f0:	d109      	bne.n	8015a06 <_printf_float+0x126>
 80159f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159f4:	1cd8      	adds	r0, r3, #3
 80159f6:	db02      	blt.n	80159fe <_printf_float+0x11e>
 80159f8:	6862      	ldr	r2, [r4, #4]
 80159fa:	4293      	cmp	r3, r2
 80159fc:	dd47      	ble.n	8015a8e <_printf_float+0x1ae>
 80159fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8015a02:	fa5f fa8a 	uxtb.w	sl, sl
 8015a06:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015a0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015a0c:	d824      	bhi.n	8015a58 <_printf_float+0x178>
 8015a0e:	3901      	subs	r1, #1
 8015a10:	4652      	mov	r2, sl
 8015a12:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015a16:	9109      	str	r1, [sp, #36]	; 0x24
 8015a18:	f7ff ff2f 	bl	801587a <__exponent>
 8015a1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015a1e:	1813      	adds	r3, r2, r0
 8015a20:	2a01      	cmp	r2, #1
 8015a22:	4681      	mov	r9, r0
 8015a24:	6123      	str	r3, [r4, #16]
 8015a26:	dc02      	bgt.n	8015a2e <_printf_float+0x14e>
 8015a28:	6822      	ldr	r2, [r4, #0]
 8015a2a:	07d1      	lsls	r1, r2, #31
 8015a2c:	d501      	bpl.n	8015a32 <_printf_float+0x152>
 8015a2e:	3301      	adds	r3, #1
 8015a30:	6123      	str	r3, [r4, #16]
 8015a32:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d0a5      	beq.n	8015986 <_printf_float+0xa6>
 8015a3a:	232d      	movs	r3, #45	; 0x2d
 8015a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015a40:	e7a1      	b.n	8015986 <_printf_float+0xa6>
 8015a42:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015a46:	f000 8177 	beq.w	8015d38 <_printf_float+0x458>
 8015a4a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015a4e:	d1bb      	bne.n	80159c8 <_printf_float+0xe8>
 8015a50:	2900      	cmp	r1, #0
 8015a52:	d1b9      	bne.n	80159c8 <_printf_float+0xe8>
 8015a54:	2301      	movs	r3, #1
 8015a56:	e7b6      	b.n	80159c6 <_printf_float+0xe6>
 8015a58:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015a5c:	d119      	bne.n	8015a92 <_printf_float+0x1b2>
 8015a5e:	2900      	cmp	r1, #0
 8015a60:	6863      	ldr	r3, [r4, #4]
 8015a62:	dd0c      	ble.n	8015a7e <_printf_float+0x19e>
 8015a64:	6121      	str	r1, [r4, #16]
 8015a66:	b913      	cbnz	r3, 8015a6e <_printf_float+0x18e>
 8015a68:	6822      	ldr	r2, [r4, #0]
 8015a6a:	07d2      	lsls	r2, r2, #31
 8015a6c:	d502      	bpl.n	8015a74 <_printf_float+0x194>
 8015a6e:	3301      	adds	r3, #1
 8015a70:	440b      	add	r3, r1
 8015a72:	6123      	str	r3, [r4, #16]
 8015a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015a76:	65a3      	str	r3, [r4, #88]	; 0x58
 8015a78:	f04f 0900 	mov.w	r9, #0
 8015a7c:	e7d9      	b.n	8015a32 <_printf_float+0x152>
 8015a7e:	b913      	cbnz	r3, 8015a86 <_printf_float+0x1a6>
 8015a80:	6822      	ldr	r2, [r4, #0]
 8015a82:	07d0      	lsls	r0, r2, #31
 8015a84:	d501      	bpl.n	8015a8a <_printf_float+0x1aa>
 8015a86:	3302      	adds	r3, #2
 8015a88:	e7f3      	b.n	8015a72 <_printf_float+0x192>
 8015a8a:	2301      	movs	r3, #1
 8015a8c:	e7f1      	b.n	8015a72 <_printf_float+0x192>
 8015a8e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015a92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015a96:	4293      	cmp	r3, r2
 8015a98:	db05      	blt.n	8015aa6 <_printf_float+0x1c6>
 8015a9a:	6822      	ldr	r2, [r4, #0]
 8015a9c:	6123      	str	r3, [r4, #16]
 8015a9e:	07d1      	lsls	r1, r2, #31
 8015aa0:	d5e8      	bpl.n	8015a74 <_printf_float+0x194>
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	e7e5      	b.n	8015a72 <_printf_float+0x192>
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	bfd4      	ite	le
 8015aaa:	f1c3 0302 	rsble	r3, r3, #2
 8015aae:	2301      	movgt	r3, #1
 8015ab0:	4413      	add	r3, r2
 8015ab2:	e7de      	b.n	8015a72 <_printf_float+0x192>
 8015ab4:	6823      	ldr	r3, [r4, #0]
 8015ab6:	055a      	lsls	r2, r3, #21
 8015ab8:	d407      	bmi.n	8015aca <_printf_float+0x1ea>
 8015aba:	6923      	ldr	r3, [r4, #16]
 8015abc:	4642      	mov	r2, r8
 8015abe:	4631      	mov	r1, r6
 8015ac0:	4628      	mov	r0, r5
 8015ac2:	47b8      	blx	r7
 8015ac4:	3001      	adds	r0, #1
 8015ac6:	d12b      	bne.n	8015b20 <_printf_float+0x240>
 8015ac8:	e767      	b.n	801599a <_printf_float+0xba>
 8015aca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015ace:	f240 80dc 	bls.w	8015c8a <_printf_float+0x3aa>
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	2300      	movs	r3, #0
 8015ad6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015ada:	f7eb f80d 	bl	8000af8 <__aeabi_dcmpeq>
 8015ade:	2800      	cmp	r0, #0
 8015ae0:	d033      	beq.n	8015b4a <_printf_float+0x26a>
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	4a41      	ldr	r2, [pc, #260]	; (8015bec <_printf_float+0x30c>)
 8015ae6:	4631      	mov	r1, r6
 8015ae8:	4628      	mov	r0, r5
 8015aea:	47b8      	blx	r7
 8015aec:	3001      	adds	r0, #1
 8015aee:	f43f af54 	beq.w	801599a <_printf_float+0xba>
 8015af2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015af6:	429a      	cmp	r2, r3
 8015af8:	db02      	blt.n	8015b00 <_printf_float+0x220>
 8015afa:	6823      	ldr	r3, [r4, #0]
 8015afc:	07d8      	lsls	r0, r3, #31
 8015afe:	d50f      	bpl.n	8015b20 <_printf_float+0x240>
 8015b00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b04:	4631      	mov	r1, r6
 8015b06:	4628      	mov	r0, r5
 8015b08:	47b8      	blx	r7
 8015b0a:	3001      	adds	r0, #1
 8015b0c:	f43f af45 	beq.w	801599a <_printf_float+0xba>
 8015b10:	f04f 0800 	mov.w	r8, #0
 8015b14:	f104 091a 	add.w	r9, r4, #26
 8015b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b1a:	3b01      	subs	r3, #1
 8015b1c:	4543      	cmp	r3, r8
 8015b1e:	dc09      	bgt.n	8015b34 <_printf_float+0x254>
 8015b20:	6823      	ldr	r3, [r4, #0]
 8015b22:	079b      	lsls	r3, r3, #30
 8015b24:	f100 8103 	bmi.w	8015d2e <_printf_float+0x44e>
 8015b28:	68e0      	ldr	r0, [r4, #12]
 8015b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b2c:	4298      	cmp	r0, r3
 8015b2e:	bfb8      	it	lt
 8015b30:	4618      	movlt	r0, r3
 8015b32:	e734      	b.n	801599e <_printf_float+0xbe>
 8015b34:	2301      	movs	r3, #1
 8015b36:	464a      	mov	r2, r9
 8015b38:	4631      	mov	r1, r6
 8015b3a:	4628      	mov	r0, r5
 8015b3c:	47b8      	blx	r7
 8015b3e:	3001      	adds	r0, #1
 8015b40:	f43f af2b 	beq.w	801599a <_printf_float+0xba>
 8015b44:	f108 0801 	add.w	r8, r8, #1
 8015b48:	e7e6      	b.n	8015b18 <_printf_float+0x238>
 8015b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	dc2b      	bgt.n	8015ba8 <_printf_float+0x2c8>
 8015b50:	2301      	movs	r3, #1
 8015b52:	4a26      	ldr	r2, [pc, #152]	; (8015bec <_printf_float+0x30c>)
 8015b54:	4631      	mov	r1, r6
 8015b56:	4628      	mov	r0, r5
 8015b58:	47b8      	blx	r7
 8015b5a:	3001      	adds	r0, #1
 8015b5c:	f43f af1d 	beq.w	801599a <_printf_float+0xba>
 8015b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b62:	b923      	cbnz	r3, 8015b6e <_printf_float+0x28e>
 8015b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b66:	b913      	cbnz	r3, 8015b6e <_printf_float+0x28e>
 8015b68:	6823      	ldr	r3, [r4, #0]
 8015b6a:	07d9      	lsls	r1, r3, #31
 8015b6c:	d5d8      	bpl.n	8015b20 <_printf_float+0x240>
 8015b6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015b72:	4631      	mov	r1, r6
 8015b74:	4628      	mov	r0, r5
 8015b76:	47b8      	blx	r7
 8015b78:	3001      	adds	r0, #1
 8015b7a:	f43f af0e 	beq.w	801599a <_printf_float+0xba>
 8015b7e:	f04f 0900 	mov.w	r9, #0
 8015b82:	f104 0a1a 	add.w	sl, r4, #26
 8015b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b88:	425b      	negs	r3, r3
 8015b8a:	454b      	cmp	r3, r9
 8015b8c:	dc01      	bgt.n	8015b92 <_printf_float+0x2b2>
 8015b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015b90:	e794      	b.n	8015abc <_printf_float+0x1dc>
 8015b92:	2301      	movs	r3, #1
 8015b94:	4652      	mov	r2, sl
 8015b96:	4631      	mov	r1, r6
 8015b98:	4628      	mov	r0, r5
 8015b9a:	47b8      	blx	r7
 8015b9c:	3001      	adds	r0, #1
 8015b9e:	f43f aefc 	beq.w	801599a <_printf_float+0xba>
 8015ba2:	f109 0901 	add.w	r9, r9, #1
 8015ba6:	e7ee      	b.n	8015b86 <_printf_float+0x2a6>
 8015ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015baa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015bac:	429a      	cmp	r2, r3
 8015bae:	bfa8      	it	ge
 8015bb0:	461a      	movge	r2, r3
 8015bb2:	2a00      	cmp	r2, #0
 8015bb4:	4691      	mov	r9, r2
 8015bb6:	dd07      	ble.n	8015bc8 <_printf_float+0x2e8>
 8015bb8:	4613      	mov	r3, r2
 8015bba:	4631      	mov	r1, r6
 8015bbc:	4642      	mov	r2, r8
 8015bbe:	4628      	mov	r0, r5
 8015bc0:	47b8      	blx	r7
 8015bc2:	3001      	adds	r0, #1
 8015bc4:	f43f aee9 	beq.w	801599a <_printf_float+0xba>
 8015bc8:	f104 031a 	add.w	r3, r4, #26
 8015bcc:	f04f 0b00 	mov.w	fp, #0
 8015bd0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015bd4:	9306      	str	r3, [sp, #24]
 8015bd6:	e015      	b.n	8015c04 <_printf_float+0x324>
 8015bd8:	7fefffff 	.word	0x7fefffff
 8015bdc:	0801a234 	.word	0x0801a234
 8015be0:	0801a230 	.word	0x0801a230
 8015be4:	0801a23c 	.word	0x0801a23c
 8015be8:	0801a238 	.word	0x0801a238
 8015bec:	0801a3f3 	.word	0x0801a3f3
 8015bf0:	2301      	movs	r3, #1
 8015bf2:	9a06      	ldr	r2, [sp, #24]
 8015bf4:	4631      	mov	r1, r6
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	47b8      	blx	r7
 8015bfa:	3001      	adds	r0, #1
 8015bfc:	f43f aecd 	beq.w	801599a <_printf_float+0xba>
 8015c00:	f10b 0b01 	add.w	fp, fp, #1
 8015c04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015c08:	ebaa 0309 	sub.w	r3, sl, r9
 8015c0c:	455b      	cmp	r3, fp
 8015c0e:	dcef      	bgt.n	8015bf0 <_printf_float+0x310>
 8015c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c14:	429a      	cmp	r2, r3
 8015c16:	44d0      	add	r8, sl
 8015c18:	db15      	blt.n	8015c46 <_printf_float+0x366>
 8015c1a:	6823      	ldr	r3, [r4, #0]
 8015c1c:	07da      	lsls	r2, r3, #31
 8015c1e:	d412      	bmi.n	8015c46 <_printf_float+0x366>
 8015c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015c24:	eba3 020a 	sub.w	r2, r3, sl
 8015c28:	eba3 0a01 	sub.w	sl, r3, r1
 8015c2c:	4592      	cmp	sl, r2
 8015c2e:	bfa8      	it	ge
 8015c30:	4692      	movge	sl, r2
 8015c32:	f1ba 0f00 	cmp.w	sl, #0
 8015c36:	dc0e      	bgt.n	8015c56 <_printf_float+0x376>
 8015c38:	f04f 0800 	mov.w	r8, #0
 8015c3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015c40:	f104 091a 	add.w	r9, r4, #26
 8015c44:	e019      	b.n	8015c7a <_printf_float+0x39a>
 8015c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015c4a:	4631      	mov	r1, r6
 8015c4c:	4628      	mov	r0, r5
 8015c4e:	47b8      	blx	r7
 8015c50:	3001      	adds	r0, #1
 8015c52:	d1e5      	bne.n	8015c20 <_printf_float+0x340>
 8015c54:	e6a1      	b.n	801599a <_printf_float+0xba>
 8015c56:	4653      	mov	r3, sl
 8015c58:	4642      	mov	r2, r8
 8015c5a:	4631      	mov	r1, r6
 8015c5c:	4628      	mov	r0, r5
 8015c5e:	47b8      	blx	r7
 8015c60:	3001      	adds	r0, #1
 8015c62:	d1e9      	bne.n	8015c38 <_printf_float+0x358>
 8015c64:	e699      	b.n	801599a <_printf_float+0xba>
 8015c66:	2301      	movs	r3, #1
 8015c68:	464a      	mov	r2, r9
 8015c6a:	4631      	mov	r1, r6
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	47b8      	blx	r7
 8015c70:	3001      	adds	r0, #1
 8015c72:	f43f ae92 	beq.w	801599a <_printf_float+0xba>
 8015c76:	f108 0801 	add.w	r8, r8, #1
 8015c7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015c7e:	1a9b      	subs	r3, r3, r2
 8015c80:	eba3 030a 	sub.w	r3, r3, sl
 8015c84:	4543      	cmp	r3, r8
 8015c86:	dcee      	bgt.n	8015c66 <_printf_float+0x386>
 8015c88:	e74a      	b.n	8015b20 <_printf_float+0x240>
 8015c8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c8c:	2a01      	cmp	r2, #1
 8015c8e:	dc01      	bgt.n	8015c94 <_printf_float+0x3b4>
 8015c90:	07db      	lsls	r3, r3, #31
 8015c92:	d53a      	bpl.n	8015d0a <_printf_float+0x42a>
 8015c94:	2301      	movs	r3, #1
 8015c96:	4642      	mov	r2, r8
 8015c98:	4631      	mov	r1, r6
 8015c9a:	4628      	mov	r0, r5
 8015c9c:	47b8      	blx	r7
 8015c9e:	3001      	adds	r0, #1
 8015ca0:	f43f ae7b 	beq.w	801599a <_printf_float+0xba>
 8015ca4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015ca8:	4631      	mov	r1, r6
 8015caa:	4628      	mov	r0, r5
 8015cac:	47b8      	blx	r7
 8015cae:	3001      	adds	r0, #1
 8015cb0:	f108 0801 	add.w	r8, r8, #1
 8015cb4:	f43f ae71 	beq.w	801599a <_printf_float+0xba>
 8015cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cba:	2200      	movs	r2, #0
 8015cbc:	f103 3aff 	add.w	sl, r3, #4294967295
 8015cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015cc4:	2300      	movs	r3, #0
 8015cc6:	f7ea ff17 	bl	8000af8 <__aeabi_dcmpeq>
 8015cca:	b9c8      	cbnz	r0, 8015d00 <_printf_float+0x420>
 8015ccc:	4653      	mov	r3, sl
 8015cce:	4642      	mov	r2, r8
 8015cd0:	4631      	mov	r1, r6
 8015cd2:	4628      	mov	r0, r5
 8015cd4:	47b8      	blx	r7
 8015cd6:	3001      	adds	r0, #1
 8015cd8:	d10e      	bne.n	8015cf8 <_printf_float+0x418>
 8015cda:	e65e      	b.n	801599a <_printf_float+0xba>
 8015cdc:	2301      	movs	r3, #1
 8015cde:	4652      	mov	r2, sl
 8015ce0:	4631      	mov	r1, r6
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	47b8      	blx	r7
 8015ce6:	3001      	adds	r0, #1
 8015ce8:	f43f ae57 	beq.w	801599a <_printf_float+0xba>
 8015cec:	f108 0801 	add.w	r8, r8, #1
 8015cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015cf2:	3b01      	subs	r3, #1
 8015cf4:	4543      	cmp	r3, r8
 8015cf6:	dcf1      	bgt.n	8015cdc <_printf_float+0x3fc>
 8015cf8:	464b      	mov	r3, r9
 8015cfa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015cfe:	e6de      	b.n	8015abe <_printf_float+0x1de>
 8015d00:	f04f 0800 	mov.w	r8, #0
 8015d04:	f104 0a1a 	add.w	sl, r4, #26
 8015d08:	e7f2      	b.n	8015cf0 <_printf_float+0x410>
 8015d0a:	2301      	movs	r3, #1
 8015d0c:	e7df      	b.n	8015cce <_printf_float+0x3ee>
 8015d0e:	2301      	movs	r3, #1
 8015d10:	464a      	mov	r2, r9
 8015d12:	4631      	mov	r1, r6
 8015d14:	4628      	mov	r0, r5
 8015d16:	47b8      	blx	r7
 8015d18:	3001      	adds	r0, #1
 8015d1a:	f43f ae3e 	beq.w	801599a <_printf_float+0xba>
 8015d1e:	f108 0801 	add.w	r8, r8, #1
 8015d22:	68e3      	ldr	r3, [r4, #12]
 8015d24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015d26:	1a9b      	subs	r3, r3, r2
 8015d28:	4543      	cmp	r3, r8
 8015d2a:	dcf0      	bgt.n	8015d0e <_printf_float+0x42e>
 8015d2c:	e6fc      	b.n	8015b28 <_printf_float+0x248>
 8015d2e:	f04f 0800 	mov.w	r8, #0
 8015d32:	f104 0919 	add.w	r9, r4, #25
 8015d36:	e7f4      	b.n	8015d22 <_printf_float+0x442>
 8015d38:	2900      	cmp	r1, #0
 8015d3a:	f43f ae8b 	beq.w	8015a54 <_printf_float+0x174>
 8015d3e:	2300      	movs	r3, #0
 8015d40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015d44:	ab09      	add	r3, sp, #36	; 0x24
 8015d46:	9300      	str	r3, [sp, #0]
 8015d48:	ec49 8b10 	vmov	d0, r8, r9
 8015d4c:	6022      	str	r2, [r4, #0]
 8015d4e:	f8cd a004 	str.w	sl, [sp, #4]
 8015d52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015d56:	4628      	mov	r0, r5
 8015d58:	f7ff fd2e 	bl	80157b8 <__cvt>
 8015d5c:	4680      	mov	r8, r0
 8015d5e:	e648      	b.n	80159f2 <_printf_float+0x112>

08015d60 <_printf_common>:
 8015d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015d64:	4691      	mov	r9, r2
 8015d66:	461f      	mov	r7, r3
 8015d68:	688a      	ldr	r2, [r1, #8]
 8015d6a:	690b      	ldr	r3, [r1, #16]
 8015d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015d70:	4293      	cmp	r3, r2
 8015d72:	bfb8      	it	lt
 8015d74:	4613      	movlt	r3, r2
 8015d76:	f8c9 3000 	str.w	r3, [r9]
 8015d7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015d7e:	4606      	mov	r6, r0
 8015d80:	460c      	mov	r4, r1
 8015d82:	b112      	cbz	r2, 8015d8a <_printf_common+0x2a>
 8015d84:	3301      	adds	r3, #1
 8015d86:	f8c9 3000 	str.w	r3, [r9]
 8015d8a:	6823      	ldr	r3, [r4, #0]
 8015d8c:	0699      	lsls	r1, r3, #26
 8015d8e:	bf42      	ittt	mi
 8015d90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015d94:	3302      	addmi	r3, #2
 8015d96:	f8c9 3000 	strmi.w	r3, [r9]
 8015d9a:	6825      	ldr	r5, [r4, #0]
 8015d9c:	f015 0506 	ands.w	r5, r5, #6
 8015da0:	d107      	bne.n	8015db2 <_printf_common+0x52>
 8015da2:	f104 0a19 	add.w	sl, r4, #25
 8015da6:	68e3      	ldr	r3, [r4, #12]
 8015da8:	f8d9 2000 	ldr.w	r2, [r9]
 8015dac:	1a9b      	subs	r3, r3, r2
 8015dae:	42ab      	cmp	r3, r5
 8015db0:	dc28      	bgt.n	8015e04 <_printf_common+0xa4>
 8015db2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015db6:	6822      	ldr	r2, [r4, #0]
 8015db8:	3300      	adds	r3, #0
 8015dba:	bf18      	it	ne
 8015dbc:	2301      	movne	r3, #1
 8015dbe:	0692      	lsls	r2, r2, #26
 8015dc0:	d42d      	bmi.n	8015e1e <_printf_common+0xbe>
 8015dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015dc6:	4639      	mov	r1, r7
 8015dc8:	4630      	mov	r0, r6
 8015dca:	47c0      	blx	r8
 8015dcc:	3001      	adds	r0, #1
 8015dce:	d020      	beq.n	8015e12 <_printf_common+0xb2>
 8015dd0:	6823      	ldr	r3, [r4, #0]
 8015dd2:	68e5      	ldr	r5, [r4, #12]
 8015dd4:	f8d9 2000 	ldr.w	r2, [r9]
 8015dd8:	f003 0306 	and.w	r3, r3, #6
 8015ddc:	2b04      	cmp	r3, #4
 8015dde:	bf08      	it	eq
 8015de0:	1aad      	subeq	r5, r5, r2
 8015de2:	68a3      	ldr	r3, [r4, #8]
 8015de4:	6922      	ldr	r2, [r4, #16]
 8015de6:	bf0c      	ite	eq
 8015de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015dec:	2500      	movne	r5, #0
 8015dee:	4293      	cmp	r3, r2
 8015df0:	bfc4      	itt	gt
 8015df2:	1a9b      	subgt	r3, r3, r2
 8015df4:	18ed      	addgt	r5, r5, r3
 8015df6:	f04f 0900 	mov.w	r9, #0
 8015dfa:	341a      	adds	r4, #26
 8015dfc:	454d      	cmp	r5, r9
 8015dfe:	d11a      	bne.n	8015e36 <_printf_common+0xd6>
 8015e00:	2000      	movs	r0, #0
 8015e02:	e008      	b.n	8015e16 <_printf_common+0xb6>
 8015e04:	2301      	movs	r3, #1
 8015e06:	4652      	mov	r2, sl
 8015e08:	4639      	mov	r1, r7
 8015e0a:	4630      	mov	r0, r6
 8015e0c:	47c0      	blx	r8
 8015e0e:	3001      	adds	r0, #1
 8015e10:	d103      	bne.n	8015e1a <_printf_common+0xba>
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295
 8015e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e1a:	3501      	adds	r5, #1
 8015e1c:	e7c3      	b.n	8015da6 <_printf_common+0x46>
 8015e1e:	18e1      	adds	r1, r4, r3
 8015e20:	1c5a      	adds	r2, r3, #1
 8015e22:	2030      	movs	r0, #48	; 0x30
 8015e24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015e28:	4422      	add	r2, r4
 8015e2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015e2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015e32:	3302      	adds	r3, #2
 8015e34:	e7c5      	b.n	8015dc2 <_printf_common+0x62>
 8015e36:	2301      	movs	r3, #1
 8015e38:	4622      	mov	r2, r4
 8015e3a:	4639      	mov	r1, r7
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	47c0      	blx	r8
 8015e40:	3001      	adds	r0, #1
 8015e42:	d0e6      	beq.n	8015e12 <_printf_common+0xb2>
 8015e44:	f109 0901 	add.w	r9, r9, #1
 8015e48:	e7d8      	b.n	8015dfc <_printf_common+0x9c>
	...

08015e4c <_printf_i>:
 8015e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015e54:	460c      	mov	r4, r1
 8015e56:	7e09      	ldrb	r1, [r1, #24]
 8015e58:	b085      	sub	sp, #20
 8015e5a:	296e      	cmp	r1, #110	; 0x6e
 8015e5c:	4617      	mov	r7, r2
 8015e5e:	4606      	mov	r6, r0
 8015e60:	4698      	mov	r8, r3
 8015e62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015e64:	f000 80b3 	beq.w	8015fce <_printf_i+0x182>
 8015e68:	d822      	bhi.n	8015eb0 <_printf_i+0x64>
 8015e6a:	2963      	cmp	r1, #99	; 0x63
 8015e6c:	d036      	beq.n	8015edc <_printf_i+0x90>
 8015e6e:	d80a      	bhi.n	8015e86 <_printf_i+0x3a>
 8015e70:	2900      	cmp	r1, #0
 8015e72:	f000 80b9 	beq.w	8015fe8 <_printf_i+0x19c>
 8015e76:	2958      	cmp	r1, #88	; 0x58
 8015e78:	f000 8083 	beq.w	8015f82 <_printf_i+0x136>
 8015e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015e80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015e84:	e032      	b.n	8015eec <_printf_i+0xa0>
 8015e86:	2964      	cmp	r1, #100	; 0x64
 8015e88:	d001      	beq.n	8015e8e <_printf_i+0x42>
 8015e8a:	2969      	cmp	r1, #105	; 0x69
 8015e8c:	d1f6      	bne.n	8015e7c <_printf_i+0x30>
 8015e8e:	6820      	ldr	r0, [r4, #0]
 8015e90:	6813      	ldr	r3, [r2, #0]
 8015e92:	0605      	lsls	r5, r0, #24
 8015e94:	f103 0104 	add.w	r1, r3, #4
 8015e98:	d52a      	bpl.n	8015ef0 <_printf_i+0xa4>
 8015e9a:	681b      	ldr	r3, [r3, #0]
 8015e9c:	6011      	str	r1, [r2, #0]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	da03      	bge.n	8015eaa <_printf_i+0x5e>
 8015ea2:	222d      	movs	r2, #45	; 0x2d
 8015ea4:	425b      	negs	r3, r3
 8015ea6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8015eaa:	486f      	ldr	r0, [pc, #444]	; (8016068 <_printf_i+0x21c>)
 8015eac:	220a      	movs	r2, #10
 8015eae:	e039      	b.n	8015f24 <_printf_i+0xd8>
 8015eb0:	2973      	cmp	r1, #115	; 0x73
 8015eb2:	f000 809d 	beq.w	8015ff0 <_printf_i+0x1a4>
 8015eb6:	d808      	bhi.n	8015eca <_printf_i+0x7e>
 8015eb8:	296f      	cmp	r1, #111	; 0x6f
 8015eba:	d020      	beq.n	8015efe <_printf_i+0xb2>
 8015ebc:	2970      	cmp	r1, #112	; 0x70
 8015ebe:	d1dd      	bne.n	8015e7c <_printf_i+0x30>
 8015ec0:	6823      	ldr	r3, [r4, #0]
 8015ec2:	f043 0320 	orr.w	r3, r3, #32
 8015ec6:	6023      	str	r3, [r4, #0]
 8015ec8:	e003      	b.n	8015ed2 <_printf_i+0x86>
 8015eca:	2975      	cmp	r1, #117	; 0x75
 8015ecc:	d017      	beq.n	8015efe <_printf_i+0xb2>
 8015ece:	2978      	cmp	r1, #120	; 0x78
 8015ed0:	d1d4      	bne.n	8015e7c <_printf_i+0x30>
 8015ed2:	2378      	movs	r3, #120	; 0x78
 8015ed4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015ed8:	4864      	ldr	r0, [pc, #400]	; (801606c <_printf_i+0x220>)
 8015eda:	e055      	b.n	8015f88 <_printf_i+0x13c>
 8015edc:	6813      	ldr	r3, [r2, #0]
 8015ede:	1d19      	adds	r1, r3, #4
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	6011      	str	r1, [r2, #0]
 8015ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015eec:	2301      	movs	r3, #1
 8015eee:	e08c      	b.n	801600a <_printf_i+0x1be>
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	6011      	str	r1, [r2, #0]
 8015ef4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015ef8:	bf18      	it	ne
 8015efa:	b21b      	sxthne	r3, r3
 8015efc:	e7cf      	b.n	8015e9e <_printf_i+0x52>
 8015efe:	6813      	ldr	r3, [r2, #0]
 8015f00:	6825      	ldr	r5, [r4, #0]
 8015f02:	1d18      	adds	r0, r3, #4
 8015f04:	6010      	str	r0, [r2, #0]
 8015f06:	0628      	lsls	r0, r5, #24
 8015f08:	d501      	bpl.n	8015f0e <_printf_i+0xc2>
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	e002      	b.n	8015f14 <_printf_i+0xc8>
 8015f0e:	0668      	lsls	r0, r5, #25
 8015f10:	d5fb      	bpl.n	8015f0a <_printf_i+0xbe>
 8015f12:	881b      	ldrh	r3, [r3, #0]
 8015f14:	4854      	ldr	r0, [pc, #336]	; (8016068 <_printf_i+0x21c>)
 8015f16:	296f      	cmp	r1, #111	; 0x6f
 8015f18:	bf14      	ite	ne
 8015f1a:	220a      	movne	r2, #10
 8015f1c:	2208      	moveq	r2, #8
 8015f1e:	2100      	movs	r1, #0
 8015f20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015f24:	6865      	ldr	r5, [r4, #4]
 8015f26:	60a5      	str	r5, [r4, #8]
 8015f28:	2d00      	cmp	r5, #0
 8015f2a:	f2c0 8095 	blt.w	8016058 <_printf_i+0x20c>
 8015f2e:	6821      	ldr	r1, [r4, #0]
 8015f30:	f021 0104 	bic.w	r1, r1, #4
 8015f34:	6021      	str	r1, [r4, #0]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d13d      	bne.n	8015fb6 <_printf_i+0x16a>
 8015f3a:	2d00      	cmp	r5, #0
 8015f3c:	f040 808e 	bne.w	801605c <_printf_i+0x210>
 8015f40:	4665      	mov	r5, ip
 8015f42:	2a08      	cmp	r2, #8
 8015f44:	d10b      	bne.n	8015f5e <_printf_i+0x112>
 8015f46:	6823      	ldr	r3, [r4, #0]
 8015f48:	07db      	lsls	r3, r3, #31
 8015f4a:	d508      	bpl.n	8015f5e <_printf_i+0x112>
 8015f4c:	6923      	ldr	r3, [r4, #16]
 8015f4e:	6862      	ldr	r2, [r4, #4]
 8015f50:	429a      	cmp	r2, r3
 8015f52:	bfde      	ittt	le
 8015f54:	2330      	movle	r3, #48	; 0x30
 8015f56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015f5a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015f5e:	ebac 0305 	sub.w	r3, ip, r5
 8015f62:	6123      	str	r3, [r4, #16]
 8015f64:	f8cd 8000 	str.w	r8, [sp]
 8015f68:	463b      	mov	r3, r7
 8015f6a:	aa03      	add	r2, sp, #12
 8015f6c:	4621      	mov	r1, r4
 8015f6e:	4630      	mov	r0, r6
 8015f70:	f7ff fef6 	bl	8015d60 <_printf_common>
 8015f74:	3001      	adds	r0, #1
 8015f76:	d14d      	bne.n	8016014 <_printf_i+0x1c8>
 8015f78:	f04f 30ff 	mov.w	r0, #4294967295
 8015f7c:	b005      	add	sp, #20
 8015f7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f82:	4839      	ldr	r0, [pc, #228]	; (8016068 <_printf_i+0x21c>)
 8015f84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015f88:	6813      	ldr	r3, [r2, #0]
 8015f8a:	6821      	ldr	r1, [r4, #0]
 8015f8c:	1d1d      	adds	r5, r3, #4
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	6015      	str	r5, [r2, #0]
 8015f92:	060a      	lsls	r2, r1, #24
 8015f94:	d50b      	bpl.n	8015fae <_printf_i+0x162>
 8015f96:	07ca      	lsls	r2, r1, #31
 8015f98:	bf44      	itt	mi
 8015f9a:	f041 0120 	orrmi.w	r1, r1, #32
 8015f9e:	6021      	strmi	r1, [r4, #0]
 8015fa0:	b91b      	cbnz	r3, 8015faa <_printf_i+0x15e>
 8015fa2:	6822      	ldr	r2, [r4, #0]
 8015fa4:	f022 0220 	bic.w	r2, r2, #32
 8015fa8:	6022      	str	r2, [r4, #0]
 8015faa:	2210      	movs	r2, #16
 8015fac:	e7b7      	b.n	8015f1e <_printf_i+0xd2>
 8015fae:	064d      	lsls	r5, r1, #25
 8015fb0:	bf48      	it	mi
 8015fb2:	b29b      	uxthmi	r3, r3
 8015fb4:	e7ef      	b.n	8015f96 <_printf_i+0x14a>
 8015fb6:	4665      	mov	r5, ip
 8015fb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8015fbc:	fb02 3311 	mls	r3, r2, r1, r3
 8015fc0:	5cc3      	ldrb	r3, [r0, r3]
 8015fc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015fc6:	460b      	mov	r3, r1
 8015fc8:	2900      	cmp	r1, #0
 8015fca:	d1f5      	bne.n	8015fb8 <_printf_i+0x16c>
 8015fcc:	e7b9      	b.n	8015f42 <_printf_i+0xf6>
 8015fce:	6813      	ldr	r3, [r2, #0]
 8015fd0:	6825      	ldr	r5, [r4, #0]
 8015fd2:	6961      	ldr	r1, [r4, #20]
 8015fd4:	1d18      	adds	r0, r3, #4
 8015fd6:	6010      	str	r0, [r2, #0]
 8015fd8:	0628      	lsls	r0, r5, #24
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	d501      	bpl.n	8015fe2 <_printf_i+0x196>
 8015fde:	6019      	str	r1, [r3, #0]
 8015fe0:	e002      	b.n	8015fe8 <_printf_i+0x19c>
 8015fe2:	066a      	lsls	r2, r5, #25
 8015fe4:	d5fb      	bpl.n	8015fde <_printf_i+0x192>
 8015fe6:	8019      	strh	r1, [r3, #0]
 8015fe8:	2300      	movs	r3, #0
 8015fea:	6123      	str	r3, [r4, #16]
 8015fec:	4665      	mov	r5, ip
 8015fee:	e7b9      	b.n	8015f64 <_printf_i+0x118>
 8015ff0:	6813      	ldr	r3, [r2, #0]
 8015ff2:	1d19      	adds	r1, r3, #4
 8015ff4:	6011      	str	r1, [r2, #0]
 8015ff6:	681d      	ldr	r5, [r3, #0]
 8015ff8:	6862      	ldr	r2, [r4, #4]
 8015ffa:	2100      	movs	r1, #0
 8015ffc:	4628      	mov	r0, r5
 8015ffe:	f7ea f907 	bl	8000210 <memchr>
 8016002:	b108      	cbz	r0, 8016008 <_printf_i+0x1bc>
 8016004:	1b40      	subs	r0, r0, r5
 8016006:	6060      	str	r0, [r4, #4]
 8016008:	6863      	ldr	r3, [r4, #4]
 801600a:	6123      	str	r3, [r4, #16]
 801600c:	2300      	movs	r3, #0
 801600e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016012:	e7a7      	b.n	8015f64 <_printf_i+0x118>
 8016014:	6923      	ldr	r3, [r4, #16]
 8016016:	462a      	mov	r2, r5
 8016018:	4639      	mov	r1, r7
 801601a:	4630      	mov	r0, r6
 801601c:	47c0      	blx	r8
 801601e:	3001      	adds	r0, #1
 8016020:	d0aa      	beq.n	8015f78 <_printf_i+0x12c>
 8016022:	6823      	ldr	r3, [r4, #0]
 8016024:	079b      	lsls	r3, r3, #30
 8016026:	d413      	bmi.n	8016050 <_printf_i+0x204>
 8016028:	68e0      	ldr	r0, [r4, #12]
 801602a:	9b03      	ldr	r3, [sp, #12]
 801602c:	4298      	cmp	r0, r3
 801602e:	bfb8      	it	lt
 8016030:	4618      	movlt	r0, r3
 8016032:	e7a3      	b.n	8015f7c <_printf_i+0x130>
 8016034:	2301      	movs	r3, #1
 8016036:	464a      	mov	r2, r9
 8016038:	4639      	mov	r1, r7
 801603a:	4630      	mov	r0, r6
 801603c:	47c0      	blx	r8
 801603e:	3001      	adds	r0, #1
 8016040:	d09a      	beq.n	8015f78 <_printf_i+0x12c>
 8016042:	3501      	adds	r5, #1
 8016044:	68e3      	ldr	r3, [r4, #12]
 8016046:	9a03      	ldr	r2, [sp, #12]
 8016048:	1a9b      	subs	r3, r3, r2
 801604a:	42ab      	cmp	r3, r5
 801604c:	dcf2      	bgt.n	8016034 <_printf_i+0x1e8>
 801604e:	e7eb      	b.n	8016028 <_printf_i+0x1dc>
 8016050:	2500      	movs	r5, #0
 8016052:	f104 0919 	add.w	r9, r4, #25
 8016056:	e7f5      	b.n	8016044 <_printf_i+0x1f8>
 8016058:	2b00      	cmp	r3, #0
 801605a:	d1ac      	bne.n	8015fb6 <_printf_i+0x16a>
 801605c:	7803      	ldrb	r3, [r0, #0]
 801605e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016062:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016066:	e76c      	b.n	8015f42 <_printf_i+0xf6>
 8016068:	0801a240 	.word	0x0801a240
 801606c:	0801a251 	.word	0x0801a251

08016070 <_scanf_float>:
 8016070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016074:	469a      	mov	sl, r3
 8016076:	688b      	ldr	r3, [r1, #8]
 8016078:	4616      	mov	r6, r2
 801607a:	1e5a      	subs	r2, r3, #1
 801607c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016080:	b087      	sub	sp, #28
 8016082:	bf83      	ittte	hi
 8016084:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8016088:	189b      	addhi	r3, r3, r2
 801608a:	9301      	strhi	r3, [sp, #4]
 801608c:	2300      	movls	r3, #0
 801608e:	bf86      	itte	hi
 8016090:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016094:	608b      	strhi	r3, [r1, #8]
 8016096:	9301      	strls	r3, [sp, #4]
 8016098:	680b      	ldr	r3, [r1, #0]
 801609a:	4688      	mov	r8, r1
 801609c:	f04f 0b00 	mov.w	fp, #0
 80160a0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80160a4:	f848 3b1c 	str.w	r3, [r8], #28
 80160a8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80160ac:	4607      	mov	r7, r0
 80160ae:	460c      	mov	r4, r1
 80160b0:	4645      	mov	r5, r8
 80160b2:	465a      	mov	r2, fp
 80160b4:	46d9      	mov	r9, fp
 80160b6:	f8cd b008 	str.w	fp, [sp, #8]
 80160ba:	68a1      	ldr	r1, [r4, #8]
 80160bc:	b181      	cbz	r1, 80160e0 <_scanf_float+0x70>
 80160be:	6833      	ldr	r3, [r6, #0]
 80160c0:	781b      	ldrb	r3, [r3, #0]
 80160c2:	2b49      	cmp	r3, #73	; 0x49
 80160c4:	d071      	beq.n	80161aa <_scanf_float+0x13a>
 80160c6:	d84d      	bhi.n	8016164 <_scanf_float+0xf4>
 80160c8:	2b39      	cmp	r3, #57	; 0x39
 80160ca:	d840      	bhi.n	801614e <_scanf_float+0xde>
 80160cc:	2b31      	cmp	r3, #49	; 0x31
 80160ce:	f080 8088 	bcs.w	80161e2 <_scanf_float+0x172>
 80160d2:	2b2d      	cmp	r3, #45	; 0x2d
 80160d4:	f000 8090 	beq.w	80161f8 <_scanf_float+0x188>
 80160d8:	d815      	bhi.n	8016106 <_scanf_float+0x96>
 80160da:	2b2b      	cmp	r3, #43	; 0x2b
 80160dc:	f000 808c 	beq.w	80161f8 <_scanf_float+0x188>
 80160e0:	f1b9 0f00 	cmp.w	r9, #0
 80160e4:	d003      	beq.n	80160ee <_scanf_float+0x7e>
 80160e6:	6823      	ldr	r3, [r4, #0]
 80160e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80160ec:	6023      	str	r3, [r4, #0]
 80160ee:	3a01      	subs	r2, #1
 80160f0:	2a01      	cmp	r2, #1
 80160f2:	f200 80ea 	bhi.w	80162ca <_scanf_float+0x25a>
 80160f6:	4545      	cmp	r5, r8
 80160f8:	f200 80dc 	bhi.w	80162b4 <_scanf_float+0x244>
 80160fc:	2601      	movs	r6, #1
 80160fe:	4630      	mov	r0, r6
 8016100:	b007      	add	sp, #28
 8016102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016106:	2b2e      	cmp	r3, #46	; 0x2e
 8016108:	f000 809f 	beq.w	801624a <_scanf_float+0x1da>
 801610c:	2b30      	cmp	r3, #48	; 0x30
 801610e:	d1e7      	bne.n	80160e0 <_scanf_float+0x70>
 8016110:	6820      	ldr	r0, [r4, #0]
 8016112:	f410 7f80 	tst.w	r0, #256	; 0x100
 8016116:	d064      	beq.n	80161e2 <_scanf_float+0x172>
 8016118:	9b01      	ldr	r3, [sp, #4]
 801611a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801611e:	6020      	str	r0, [r4, #0]
 8016120:	f109 0901 	add.w	r9, r9, #1
 8016124:	b11b      	cbz	r3, 801612e <_scanf_float+0xbe>
 8016126:	3b01      	subs	r3, #1
 8016128:	3101      	adds	r1, #1
 801612a:	9301      	str	r3, [sp, #4]
 801612c:	60a1      	str	r1, [r4, #8]
 801612e:	68a3      	ldr	r3, [r4, #8]
 8016130:	3b01      	subs	r3, #1
 8016132:	60a3      	str	r3, [r4, #8]
 8016134:	6923      	ldr	r3, [r4, #16]
 8016136:	3301      	adds	r3, #1
 8016138:	6123      	str	r3, [r4, #16]
 801613a:	6873      	ldr	r3, [r6, #4]
 801613c:	3b01      	subs	r3, #1
 801613e:	2b00      	cmp	r3, #0
 8016140:	6073      	str	r3, [r6, #4]
 8016142:	f340 80ac 	ble.w	801629e <_scanf_float+0x22e>
 8016146:	6833      	ldr	r3, [r6, #0]
 8016148:	3301      	adds	r3, #1
 801614a:	6033      	str	r3, [r6, #0]
 801614c:	e7b5      	b.n	80160ba <_scanf_float+0x4a>
 801614e:	2b45      	cmp	r3, #69	; 0x45
 8016150:	f000 8085 	beq.w	801625e <_scanf_float+0x1ee>
 8016154:	2b46      	cmp	r3, #70	; 0x46
 8016156:	d06a      	beq.n	801622e <_scanf_float+0x1be>
 8016158:	2b41      	cmp	r3, #65	; 0x41
 801615a:	d1c1      	bne.n	80160e0 <_scanf_float+0x70>
 801615c:	2a01      	cmp	r2, #1
 801615e:	d1bf      	bne.n	80160e0 <_scanf_float+0x70>
 8016160:	2202      	movs	r2, #2
 8016162:	e046      	b.n	80161f2 <_scanf_float+0x182>
 8016164:	2b65      	cmp	r3, #101	; 0x65
 8016166:	d07a      	beq.n	801625e <_scanf_float+0x1ee>
 8016168:	d818      	bhi.n	801619c <_scanf_float+0x12c>
 801616a:	2b54      	cmp	r3, #84	; 0x54
 801616c:	d066      	beq.n	801623c <_scanf_float+0x1cc>
 801616e:	d811      	bhi.n	8016194 <_scanf_float+0x124>
 8016170:	2b4e      	cmp	r3, #78	; 0x4e
 8016172:	d1b5      	bne.n	80160e0 <_scanf_float+0x70>
 8016174:	2a00      	cmp	r2, #0
 8016176:	d146      	bne.n	8016206 <_scanf_float+0x196>
 8016178:	f1b9 0f00 	cmp.w	r9, #0
 801617c:	d145      	bne.n	801620a <_scanf_float+0x19a>
 801617e:	6821      	ldr	r1, [r4, #0]
 8016180:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8016184:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8016188:	d13f      	bne.n	801620a <_scanf_float+0x19a>
 801618a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801618e:	6021      	str	r1, [r4, #0]
 8016190:	2201      	movs	r2, #1
 8016192:	e02e      	b.n	80161f2 <_scanf_float+0x182>
 8016194:	2b59      	cmp	r3, #89	; 0x59
 8016196:	d01e      	beq.n	80161d6 <_scanf_float+0x166>
 8016198:	2b61      	cmp	r3, #97	; 0x61
 801619a:	e7de      	b.n	801615a <_scanf_float+0xea>
 801619c:	2b6e      	cmp	r3, #110	; 0x6e
 801619e:	d0e9      	beq.n	8016174 <_scanf_float+0x104>
 80161a0:	d815      	bhi.n	80161ce <_scanf_float+0x15e>
 80161a2:	2b66      	cmp	r3, #102	; 0x66
 80161a4:	d043      	beq.n	801622e <_scanf_float+0x1be>
 80161a6:	2b69      	cmp	r3, #105	; 0x69
 80161a8:	d19a      	bne.n	80160e0 <_scanf_float+0x70>
 80161aa:	f1bb 0f00 	cmp.w	fp, #0
 80161ae:	d138      	bne.n	8016222 <_scanf_float+0x1b2>
 80161b0:	f1b9 0f00 	cmp.w	r9, #0
 80161b4:	d197      	bne.n	80160e6 <_scanf_float+0x76>
 80161b6:	6821      	ldr	r1, [r4, #0]
 80161b8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80161bc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80161c0:	d195      	bne.n	80160ee <_scanf_float+0x7e>
 80161c2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80161c6:	6021      	str	r1, [r4, #0]
 80161c8:	f04f 0b01 	mov.w	fp, #1
 80161cc:	e011      	b.n	80161f2 <_scanf_float+0x182>
 80161ce:	2b74      	cmp	r3, #116	; 0x74
 80161d0:	d034      	beq.n	801623c <_scanf_float+0x1cc>
 80161d2:	2b79      	cmp	r3, #121	; 0x79
 80161d4:	d184      	bne.n	80160e0 <_scanf_float+0x70>
 80161d6:	f1bb 0f07 	cmp.w	fp, #7
 80161da:	d181      	bne.n	80160e0 <_scanf_float+0x70>
 80161dc:	f04f 0b08 	mov.w	fp, #8
 80161e0:	e007      	b.n	80161f2 <_scanf_float+0x182>
 80161e2:	eb12 0f0b 	cmn.w	r2, fp
 80161e6:	f47f af7b 	bne.w	80160e0 <_scanf_float+0x70>
 80161ea:	6821      	ldr	r1, [r4, #0]
 80161ec:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80161f0:	6021      	str	r1, [r4, #0]
 80161f2:	702b      	strb	r3, [r5, #0]
 80161f4:	3501      	adds	r5, #1
 80161f6:	e79a      	b.n	801612e <_scanf_float+0xbe>
 80161f8:	6821      	ldr	r1, [r4, #0]
 80161fa:	0608      	lsls	r0, r1, #24
 80161fc:	f57f af70 	bpl.w	80160e0 <_scanf_float+0x70>
 8016200:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016204:	e7f4      	b.n	80161f0 <_scanf_float+0x180>
 8016206:	2a02      	cmp	r2, #2
 8016208:	d047      	beq.n	801629a <_scanf_float+0x22a>
 801620a:	f1bb 0f01 	cmp.w	fp, #1
 801620e:	d003      	beq.n	8016218 <_scanf_float+0x1a8>
 8016210:	f1bb 0f04 	cmp.w	fp, #4
 8016214:	f47f af64 	bne.w	80160e0 <_scanf_float+0x70>
 8016218:	f10b 0b01 	add.w	fp, fp, #1
 801621c:	fa5f fb8b 	uxtb.w	fp, fp
 8016220:	e7e7      	b.n	80161f2 <_scanf_float+0x182>
 8016222:	f1bb 0f03 	cmp.w	fp, #3
 8016226:	d0f7      	beq.n	8016218 <_scanf_float+0x1a8>
 8016228:	f1bb 0f05 	cmp.w	fp, #5
 801622c:	e7f2      	b.n	8016214 <_scanf_float+0x1a4>
 801622e:	f1bb 0f02 	cmp.w	fp, #2
 8016232:	f47f af55 	bne.w	80160e0 <_scanf_float+0x70>
 8016236:	f04f 0b03 	mov.w	fp, #3
 801623a:	e7da      	b.n	80161f2 <_scanf_float+0x182>
 801623c:	f1bb 0f06 	cmp.w	fp, #6
 8016240:	f47f af4e 	bne.w	80160e0 <_scanf_float+0x70>
 8016244:	f04f 0b07 	mov.w	fp, #7
 8016248:	e7d3      	b.n	80161f2 <_scanf_float+0x182>
 801624a:	6821      	ldr	r1, [r4, #0]
 801624c:	0588      	lsls	r0, r1, #22
 801624e:	f57f af47 	bpl.w	80160e0 <_scanf_float+0x70>
 8016252:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8016256:	6021      	str	r1, [r4, #0]
 8016258:	f8cd 9008 	str.w	r9, [sp, #8]
 801625c:	e7c9      	b.n	80161f2 <_scanf_float+0x182>
 801625e:	6821      	ldr	r1, [r4, #0]
 8016260:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8016264:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016268:	d006      	beq.n	8016278 <_scanf_float+0x208>
 801626a:	0548      	lsls	r0, r1, #21
 801626c:	f57f af38 	bpl.w	80160e0 <_scanf_float+0x70>
 8016270:	f1b9 0f00 	cmp.w	r9, #0
 8016274:	f43f af3b 	beq.w	80160ee <_scanf_float+0x7e>
 8016278:	0588      	lsls	r0, r1, #22
 801627a:	bf58      	it	pl
 801627c:	9802      	ldrpl	r0, [sp, #8]
 801627e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8016282:	bf58      	it	pl
 8016284:	eba9 0000 	subpl.w	r0, r9, r0
 8016288:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801628c:	bf58      	it	pl
 801628e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8016292:	6021      	str	r1, [r4, #0]
 8016294:	f04f 0900 	mov.w	r9, #0
 8016298:	e7ab      	b.n	80161f2 <_scanf_float+0x182>
 801629a:	2203      	movs	r2, #3
 801629c:	e7a9      	b.n	80161f2 <_scanf_float+0x182>
 801629e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80162a2:	9205      	str	r2, [sp, #20]
 80162a4:	4631      	mov	r1, r6
 80162a6:	4638      	mov	r0, r7
 80162a8:	4798      	blx	r3
 80162aa:	9a05      	ldr	r2, [sp, #20]
 80162ac:	2800      	cmp	r0, #0
 80162ae:	f43f af04 	beq.w	80160ba <_scanf_float+0x4a>
 80162b2:	e715      	b.n	80160e0 <_scanf_float+0x70>
 80162b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80162b8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80162bc:	4632      	mov	r2, r6
 80162be:	4638      	mov	r0, r7
 80162c0:	4798      	blx	r3
 80162c2:	6923      	ldr	r3, [r4, #16]
 80162c4:	3b01      	subs	r3, #1
 80162c6:	6123      	str	r3, [r4, #16]
 80162c8:	e715      	b.n	80160f6 <_scanf_float+0x86>
 80162ca:	f10b 33ff 	add.w	r3, fp, #4294967295
 80162ce:	2b06      	cmp	r3, #6
 80162d0:	d80a      	bhi.n	80162e8 <_scanf_float+0x278>
 80162d2:	f1bb 0f02 	cmp.w	fp, #2
 80162d6:	d968      	bls.n	80163aa <_scanf_float+0x33a>
 80162d8:	f1ab 0b03 	sub.w	fp, fp, #3
 80162dc:	fa5f fb8b 	uxtb.w	fp, fp
 80162e0:	eba5 0b0b 	sub.w	fp, r5, fp
 80162e4:	455d      	cmp	r5, fp
 80162e6:	d14b      	bne.n	8016380 <_scanf_float+0x310>
 80162e8:	6823      	ldr	r3, [r4, #0]
 80162ea:	05da      	lsls	r2, r3, #23
 80162ec:	d51f      	bpl.n	801632e <_scanf_float+0x2be>
 80162ee:	055b      	lsls	r3, r3, #21
 80162f0:	d468      	bmi.n	80163c4 <_scanf_float+0x354>
 80162f2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80162f6:	6923      	ldr	r3, [r4, #16]
 80162f8:	2965      	cmp	r1, #101	; 0x65
 80162fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80162fe:	f105 3bff 	add.w	fp, r5, #4294967295
 8016302:	6123      	str	r3, [r4, #16]
 8016304:	d00d      	beq.n	8016322 <_scanf_float+0x2b2>
 8016306:	2945      	cmp	r1, #69	; 0x45
 8016308:	d00b      	beq.n	8016322 <_scanf_float+0x2b2>
 801630a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801630e:	4632      	mov	r2, r6
 8016310:	4638      	mov	r0, r7
 8016312:	4798      	blx	r3
 8016314:	6923      	ldr	r3, [r4, #16]
 8016316:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801631a:	3b01      	subs	r3, #1
 801631c:	f1a5 0b02 	sub.w	fp, r5, #2
 8016320:	6123      	str	r3, [r4, #16]
 8016322:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016326:	4632      	mov	r2, r6
 8016328:	4638      	mov	r0, r7
 801632a:	4798      	blx	r3
 801632c:	465d      	mov	r5, fp
 801632e:	6826      	ldr	r6, [r4, #0]
 8016330:	f016 0610 	ands.w	r6, r6, #16
 8016334:	d17a      	bne.n	801642c <_scanf_float+0x3bc>
 8016336:	702e      	strb	r6, [r5, #0]
 8016338:	6823      	ldr	r3, [r4, #0]
 801633a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801633e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016342:	d142      	bne.n	80163ca <_scanf_float+0x35a>
 8016344:	9b02      	ldr	r3, [sp, #8]
 8016346:	eba9 0303 	sub.w	r3, r9, r3
 801634a:	425a      	negs	r2, r3
 801634c:	2b00      	cmp	r3, #0
 801634e:	d149      	bne.n	80163e4 <_scanf_float+0x374>
 8016350:	2200      	movs	r2, #0
 8016352:	4641      	mov	r1, r8
 8016354:	4638      	mov	r0, r7
 8016356:	f000 ff0b 	bl	8017170 <_strtod_r>
 801635a:	6825      	ldr	r5, [r4, #0]
 801635c:	f8da 3000 	ldr.w	r3, [sl]
 8016360:	f015 0f02 	tst.w	r5, #2
 8016364:	f103 0204 	add.w	r2, r3, #4
 8016368:	ec59 8b10 	vmov	r8, r9, d0
 801636c:	f8ca 2000 	str.w	r2, [sl]
 8016370:	d043      	beq.n	80163fa <_scanf_float+0x38a>
 8016372:	681b      	ldr	r3, [r3, #0]
 8016374:	e9c3 8900 	strd	r8, r9, [r3]
 8016378:	68e3      	ldr	r3, [r4, #12]
 801637a:	3301      	adds	r3, #1
 801637c:	60e3      	str	r3, [r4, #12]
 801637e:	e6be      	b.n	80160fe <_scanf_float+0x8e>
 8016380:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016384:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8016388:	4632      	mov	r2, r6
 801638a:	4638      	mov	r0, r7
 801638c:	4798      	blx	r3
 801638e:	6923      	ldr	r3, [r4, #16]
 8016390:	3b01      	subs	r3, #1
 8016392:	6123      	str	r3, [r4, #16]
 8016394:	e7a6      	b.n	80162e4 <_scanf_float+0x274>
 8016396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801639a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801639e:	4632      	mov	r2, r6
 80163a0:	4638      	mov	r0, r7
 80163a2:	4798      	blx	r3
 80163a4:	6923      	ldr	r3, [r4, #16]
 80163a6:	3b01      	subs	r3, #1
 80163a8:	6123      	str	r3, [r4, #16]
 80163aa:	4545      	cmp	r5, r8
 80163ac:	d8f3      	bhi.n	8016396 <_scanf_float+0x326>
 80163ae:	e6a5      	b.n	80160fc <_scanf_float+0x8c>
 80163b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80163b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80163b8:	4632      	mov	r2, r6
 80163ba:	4638      	mov	r0, r7
 80163bc:	4798      	blx	r3
 80163be:	6923      	ldr	r3, [r4, #16]
 80163c0:	3b01      	subs	r3, #1
 80163c2:	6123      	str	r3, [r4, #16]
 80163c4:	4545      	cmp	r5, r8
 80163c6:	d8f3      	bhi.n	80163b0 <_scanf_float+0x340>
 80163c8:	e698      	b.n	80160fc <_scanf_float+0x8c>
 80163ca:	9b03      	ldr	r3, [sp, #12]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d0bf      	beq.n	8016350 <_scanf_float+0x2e0>
 80163d0:	9904      	ldr	r1, [sp, #16]
 80163d2:	230a      	movs	r3, #10
 80163d4:	4632      	mov	r2, r6
 80163d6:	3101      	adds	r1, #1
 80163d8:	4638      	mov	r0, r7
 80163da:	f000 ff55 	bl	8017288 <_strtol_r>
 80163de:	9b03      	ldr	r3, [sp, #12]
 80163e0:	9d04      	ldr	r5, [sp, #16]
 80163e2:	1ac2      	subs	r2, r0, r3
 80163e4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80163e8:	429d      	cmp	r5, r3
 80163ea:	bf28      	it	cs
 80163ec:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80163f0:	490f      	ldr	r1, [pc, #60]	; (8016430 <_scanf_float+0x3c0>)
 80163f2:	4628      	mov	r0, r5
 80163f4:	f000 f858 	bl	80164a8 <siprintf>
 80163f8:	e7aa      	b.n	8016350 <_scanf_float+0x2e0>
 80163fa:	f015 0504 	ands.w	r5, r5, #4
 80163fe:	d1b8      	bne.n	8016372 <_scanf_float+0x302>
 8016400:	681f      	ldr	r7, [r3, #0]
 8016402:	ee10 2a10 	vmov	r2, s0
 8016406:	464b      	mov	r3, r9
 8016408:	ee10 0a10 	vmov	r0, s0
 801640c:	4649      	mov	r1, r9
 801640e:	f7ea fba5 	bl	8000b5c <__aeabi_dcmpun>
 8016412:	b128      	cbz	r0, 8016420 <_scanf_float+0x3b0>
 8016414:	4628      	mov	r0, r5
 8016416:	f000 f80d 	bl	8016434 <nanf>
 801641a:	ed87 0a00 	vstr	s0, [r7]
 801641e:	e7ab      	b.n	8016378 <_scanf_float+0x308>
 8016420:	4640      	mov	r0, r8
 8016422:	4649      	mov	r1, r9
 8016424:	f7ea fbf8 	bl	8000c18 <__aeabi_d2f>
 8016428:	6038      	str	r0, [r7, #0]
 801642a:	e7a5      	b.n	8016378 <_scanf_float+0x308>
 801642c:	2600      	movs	r6, #0
 801642e:	e666      	b.n	80160fe <_scanf_float+0x8e>
 8016430:	0801a262 	.word	0x0801a262

08016434 <nanf>:
 8016434:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801643c <nanf+0x8>
 8016438:	4770      	bx	lr
 801643a:	bf00      	nop
 801643c:	7fc00000 	.word	0x7fc00000

08016440 <sniprintf>:
 8016440:	b40c      	push	{r2, r3}
 8016442:	b530      	push	{r4, r5, lr}
 8016444:	4b17      	ldr	r3, [pc, #92]	; (80164a4 <sniprintf+0x64>)
 8016446:	1e0c      	subs	r4, r1, #0
 8016448:	b09d      	sub	sp, #116	; 0x74
 801644a:	681d      	ldr	r5, [r3, #0]
 801644c:	da08      	bge.n	8016460 <sniprintf+0x20>
 801644e:	238b      	movs	r3, #139	; 0x8b
 8016450:	602b      	str	r3, [r5, #0]
 8016452:	f04f 30ff 	mov.w	r0, #4294967295
 8016456:	b01d      	add	sp, #116	; 0x74
 8016458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801645c:	b002      	add	sp, #8
 801645e:	4770      	bx	lr
 8016460:	f44f 7302 	mov.w	r3, #520	; 0x208
 8016464:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016468:	bf14      	ite	ne
 801646a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801646e:	4623      	moveq	r3, r4
 8016470:	9304      	str	r3, [sp, #16]
 8016472:	9307      	str	r3, [sp, #28]
 8016474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016478:	9002      	str	r0, [sp, #8]
 801647a:	9006      	str	r0, [sp, #24]
 801647c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016480:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8016482:	ab21      	add	r3, sp, #132	; 0x84
 8016484:	a902      	add	r1, sp, #8
 8016486:	4628      	mov	r0, r5
 8016488:	9301      	str	r3, [sp, #4]
 801648a:	f002 fdf1 	bl	8019070 <_svfiprintf_r>
 801648e:	1c43      	adds	r3, r0, #1
 8016490:	bfbc      	itt	lt
 8016492:	238b      	movlt	r3, #139	; 0x8b
 8016494:	602b      	strlt	r3, [r5, #0]
 8016496:	2c00      	cmp	r4, #0
 8016498:	d0dd      	beq.n	8016456 <sniprintf+0x16>
 801649a:	9b02      	ldr	r3, [sp, #8]
 801649c:	2200      	movs	r2, #0
 801649e:	701a      	strb	r2, [r3, #0]
 80164a0:	e7d9      	b.n	8016456 <sniprintf+0x16>
 80164a2:	bf00      	nop
 80164a4:	2000000c 	.word	0x2000000c

080164a8 <siprintf>:
 80164a8:	b40e      	push	{r1, r2, r3}
 80164aa:	b500      	push	{lr}
 80164ac:	b09c      	sub	sp, #112	; 0x70
 80164ae:	ab1d      	add	r3, sp, #116	; 0x74
 80164b0:	9002      	str	r0, [sp, #8]
 80164b2:	9006      	str	r0, [sp, #24]
 80164b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80164b8:	4809      	ldr	r0, [pc, #36]	; (80164e0 <siprintf+0x38>)
 80164ba:	9107      	str	r1, [sp, #28]
 80164bc:	9104      	str	r1, [sp, #16]
 80164be:	4909      	ldr	r1, [pc, #36]	; (80164e4 <siprintf+0x3c>)
 80164c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80164c4:	9105      	str	r1, [sp, #20]
 80164c6:	6800      	ldr	r0, [r0, #0]
 80164c8:	9301      	str	r3, [sp, #4]
 80164ca:	a902      	add	r1, sp, #8
 80164cc:	f002 fdd0 	bl	8019070 <_svfiprintf_r>
 80164d0:	9b02      	ldr	r3, [sp, #8]
 80164d2:	2200      	movs	r2, #0
 80164d4:	701a      	strb	r2, [r3, #0]
 80164d6:	b01c      	add	sp, #112	; 0x70
 80164d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80164dc:	b003      	add	sp, #12
 80164de:	4770      	bx	lr
 80164e0:	2000000c 	.word	0x2000000c
 80164e4:	ffff0208 	.word	0xffff0208

080164e8 <siscanf>:
 80164e8:	b40e      	push	{r1, r2, r3}
 80164ea:	b530      	push	{r4, r5, lr}
 80164ec:	b09c      	sub	sp, #112	; 0x70
 80164ee:	ac1f      	add	r4, sp, #124	; 0x7c
 80164f0:	f44f 7201 	mov.w	r2, #516	; 0x204
 80164f4:	f854 5b04 	ldr.w	r5, [r4], #4
 80164f8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80164fc:	9002      	str	r0, [sp, #8]
 80164fe:	9006      	str	r0, [sp, #24]
 8016500:	f7e9 fe7e 	bl	8000200 <strlen>
 8016504:	4b0b      	ldr	r3, [pc, #44]	; (8016534 <siscanf+0x4c>)
 8016506:	9003      	str	r0, [sp, #12]
 8016508:	9007      	str	r0, [sp, #28]
 801650a:	930b      	str	r3, [sp, #44]	; 0x2c
 801650c:	480a      	ldr	r0, [pc, #40]	; (8016538 <siscanf+0x50>)
 801650e:	9401      	str	r4, [sp, #4]
 8016510:	2300      	movs	r3, #0
 8016512:	930f      	str	r3, [sp, #60]	; 0x3c
 8016514:	9314      	str	r3, [sp, #80]	; 0x50
 8016516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801651a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801651e:	462a      	mov	r2, r5
 8016520:	4623      	mov	r3, r4
 8016522:	a902      	add	r1, sp, #8
 8016524:	6800      	ldr	r0, [r0, #0]
 8016526:	f002 fef5 	bl	8019314 <__ssvfiscanf_r>
 801652a:	b01c      	add	sp, #112	; 0x70
 801652c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016530:	b003      	add	sp, #12
 8016532:	4770      	bx	lr
 8016534:	0801653d 	.word	0x0801653d
 8016538:	2000000c 	.word	0x2000000c

0801653c <__seofread>:
 801653c:	2000      	movs	r0, #0
 801653e:	4770      	bx	lr

08016540 <strcpy>:
 8016540:	4603      	mov	r3, r0
 8016542:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016546:	f803 2b01 	strb.w	r2, [r3], #1
 801654a:	2a00      	cmp	r2, #0
 801654c:	d1f9      	bne.n	8016542 <strcpy+0x2>
 801654e:	4770      	bx	lr

08016550 <sulp>:
 8016550:	b570      	push	{r4, r5, r6, lr}
 8016552:	4604      	mov	r4, r0
 8016554:	460d      	mov	r5, r1
 8016556:	ec45 4b10 	vmov	d0, r4, r5
 801655a:	4616      	mov	r6, r2
 801655c:	f002 fb44 	bl	8018be8 <__ulp>
 8016560:	ec51 0b10 	vmov	r0, r1, d0
 8016564:	b17e      	cbz	r6, 8016586 <sulp+0x36>
 8016566:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801656a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801656e:	2b00      	cmp	r3, #0
 8016570:	dd09      	ble.n	8016586 <sulp+0x36>
 8016572:	051b      	lsls	r3, r3, #20
 8016574:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016578:	2400      	movs	r4, #0
 801657a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801657e:	4622      	mov	r2, r4
 8016580:	462b      	mov	r3, r5
 8016582:	f7ea f851 	bl	8000628 <__aeabi_dmul>
 8016586:	bd70      	pop	{r4, r5, r6, pc}

08016588 <_strtod_l>:
 8016588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801658c:	461f      	mov	r7, r3
 801658e:	b0a1      	sub	sp, #132	; 0x84
 8016590:	2300      	movs	r3, #0
 8016592:	4681      	mov	r9, r0
 8016594:	4638      	mov	r0, r7
 8016596:	460e      	mov	r6, r1
 8016598:	9217      	str	r2, [sp, #92]	; 0x5c
 801659a:	931c      	str	r3, [sp, #112]	; 0x70
 801659c:	f002 f824 	bl	80185e8 <__localeconv_l>
 80165a0:	4680      	mov	r8, r0
 80165a2:	6800      	ldr	r0, [r0, #0]
 80165a4:	f7e9 fe2c 	bl	8000200 <strlen>
 80165a8:	f04f 0a00 	mov.w	sl, #0
 80165ac:	4604      	mov	r4, r0
 80165ae:	f04f 0b00 	mov.w	fp, #0
 80165b2:	961b      	str	r6, [sp, #108]	; 0x6c
 80165b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80165b6:	781a      	ldrb	r2, [r3, #0]
 80165b8:	2a0d      	cmp	r2, #13
 80165ba:	d832      	bhi.n	8016622 <_strtod_l+0x9a>
 80165bc:	2a09      	cmp	r2, #9
 80165be:	d236      	bcs.n	801662e <_strtod_l+0xa6>
 80165c0:	2a00      	cmp	r2, #0
 80165c2:	d03e      	beq.n	8016642 <_strtod_l+0xba>
 80165c4:	2300      	movs	r3, #0
 80165c6:	930d      	str	r3, [sp, #52]	; 0x34
 80165c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80165ca:	782b      	ldrb	r3, [r5, #0]
 80165cc:	2b30      	cmp	r3, #48	; 0x30
 80165ce:	f040 80ac 	bne.w	801672a <_strtod_l+0x1a2>
 80165d2:	786b      	ldrb	r3, [r5, #1]
 80165d4:	2b58      	cmp	r3, #88	; 0x58
 80165d6:	d001      	beq.n	80165dc <_strtod_l+0x54>
 80165d8:	2b78      	cmp	r3, #120	; 0x78
 80165da:	d167      	bne.n	80166ac <_strtod_l+0x124>
 80165dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80165de:	9301      	str	r3, [sp, #4]
 80165e0:	ab1c      	add	r3, sp, #112	; 0x70
 80165e2:	9300      	str	r3, [sp, #0]
 80165e4:	9702      	str	r7, [sp, #8]
 80165e6:	ab1d      	add	r3, sp, #116	; 0x74
 80165e8:	4a88      	ldr	r2, [pc, #544]	; (801680c <_strtod_l+0x284>)
 80165ea:	a91b      	add	r1, sp, #108	; 0x6c
 80165ec:	4648      	mov	r0, r9
 80165ee:	f001 fd12 	bl	8018016 <__gethex>
 80165f2:	f010 0407 	ands.w	r4, r0, #7
 80165f6:	4606      	mov	r6, r0
 80165f8:	d005      	beq.n	8016606 <_strtod_l+0x7e>
 80165fa:	2c06      	cmp	r4, #6
 80165fc:	d12b      	bne.n	8016656 <_strtod_l+0xce>
 80165fe:	3501      	adds	r5, #1
 8016600:	2300      	movs	r3, #0
 8016602:	951b      	str	r5, [sp, #108]	; 0x6c
 8016604:	930d      	str	r3, [sp, #52]	; 0x34
 8016606:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016608:	2b00      	cmp	r3, #0
 801660a:	f040 859a 	bne.w	8017142 <_strtod_l+0xbba>
 801660e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016610:	b1e3      	cbz	r3, 801664c <_strtod_l+0xc4>
 8016612:	4652      	mov	r2, sl
 8016614:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8016618:	ec43 2b10 	vmov	d0, r2, r3
 801661c:	b021      	add	sp, #132	; 0x84
 801661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016622:	2a2b      	cmp	r2, #43	; 0x2b
 8016624:	d015      	beq.n	8016652 <_strtod_l+0xca>
 8016626:	2a2d      	cmp	r2, #45	; 0x2d
 8016628:	d004      	beq.n	8016634 <_strtod_l+0xac>
 801662a:	2a20      	cmp	r2, #32
 801662c:	d1ca      	bne.n	80165c4 <_strtod_l+0x3c>
 801662e:	3301      	adds	r3, #1
 8016630:	931b      	str	r3, [sp, #108]	; 0x6c
 8016632:	e7bf      	b.n	80165b4 <_strtod_l+0x2c>
 8016634:	2201      	movs	r2, #1
 8016636:	920d      	str	r2, [sp, #52]	; 0x34
 8016638:	1c5a      	adds	r2, r3, #1
 801663a:	921b      	str	r2, [sp, #108]	; 0x6c
 801663c:	785b      	ldrb	r3, [r3, #1]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d1c2      	bne.n	80165c8 <_strtod_l+0x40>
 8016642:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016644:	961b      	str	r6, [sp, #108]	; 0x6c
 8016646:	2b00      	cmp	r3, #0
 8016648:	f040 8579 	bne.w	801713e <_strtod_l+0xbb6>
 801664c:	4652      	mov	r2, sl
 801664e:	465b      	mov	r3, fp
 8016650:	e7e2      	b.n	8016618 <_strtod_l+0x90>
 8016652:	2200      	movs	r2, #0
 8016654:	e7ef      	b.n	8016636 <_strtod_l+0xae>
 8016656:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016658:	b13a      	cbz	r2, 801666a <_strtod_l+0xe2>
 801665a:	2135      	movs	r1, #53	; 0x35
 801665c:	a81e      	add	r0, sp, #120	; 0x78
 801665e:	f002 fbbb 	bl	8018dd8 <__copybits>
 8016662:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016664:	4648      	mov	r0, r9
 8016666:	f002 f828 	bl	80186ba <_Bfree>
 801666a:	3c01      	subs	r4, #1
 801666c:	2c04      	cmp	r4, #4
 801666e:	d806      	bhi.n	801667e <_strtod_l+0xf6>
 8016670:	e8df f004 	tbb	[pc, r4]
 8016674:	1714030a 	.word	0x1714030a
 8016678:	0a          	.byte	0x0a
 8016679:	00          	.byte	0x00
 801667a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801667e:	0730      	lsls	r0, r6, #28
 8016680:	d5c1      	bpl.n	8016606 <_strtod_l+0x7e>
 8016682:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016686:	e7be      	b.n	8016606 <_strtod_l+0x7e>
 8016688:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801668c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801668e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016692:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016696:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801669a:	e7f0      	b.n	801667e <_strtod_l+0xf6>
 801669c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016810 <_strtod_l+0x288>
 80166a0:	e7ed      	b.n	801667e <_strtod_l+0xf6>
 80166a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80166a6:	f04f 3aff 	mov.w	sl, #4294967295
 80166aa:	e7e8      	b.n	801667e <_strtod_l+0xf6>
 80166ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166ae:	1c5a      	adds	r2, r3, #1
 80166b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80166b2:	785b      	ldrb	r3, [r3, #1]
 80166b4:	2b30      	cmp	r3, #48	; 0x30
 80166b6:	d0f9      	beq.n	80166ac <_strtod_l+0x124>
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d0a4      	beq.n	8016606 <_strtod_l+0x7e>
 80166bc:	2301      	movs	r3, #1
 80166be:	2500      	movs	r5, #0
 80166c0:	9306      	str	r3, [sp, #24]
 80166c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80166c4:	9308      	str	r3, [sp, #32]
 80166c6:	9507      	str	r5, [sp, #28]
 80166c8:	9505      	str	r5, [sp, #20]
 80166ca:	220a      	movs	r2, #10
 80166cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80166ce:	7807      	ldrb	r7, [r0, #0]
 80166d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80166d4:	b2d9      	uxtb	r1, r3
 80166d6:	2909      	cmp	r1, #9
 80166d8:	d929      	bls.n	801672e <_strtod_l+0x1a6>
 80166da:	4622      	mov	r2, r4
 80166dc:	f8d8 1000 	ldr.w	r1, [r8]
 80166e0:	f003 f902 	bl	80198e8 <strncmp>
 80166e4:	2800      	cmp	r0, #0
 80166e6:	d031      	beq.n	801674c <_strtod_l+0x1c4>
 80166e8:	2000      	movs	r0, #0
 80166ea:	9c05      	ldr	r4, [sp, #20]
 80166ec:	9004      	str	r0, [sp, #16]
 80166ee:	463b      	mov	r3, r7
 80166f0:	4602      	mov	r2, r0
 80166f2:	2b65      	cmp	r3, #101	; 0x65
 80166f4:	d001      	beq.n	80166fa <_strtod_l+0x172>
 80166f6:	2b45      	cmp	r3, #69	; 0x45
 80166f8:	d114      	bne.n	8016724 <_strtod_l+0x19c>
 80166fa:	b924      	cbnz	r4, 8016706 <_strtod_l+0x17e>
 80166fc:	b910      	cbnz	r0, 8016704 <_strtod_l+0x17c>
 80166fe:	9b06      	ldr	r3, [sp, #24]
 8016700:	2b00      	cmp	r3, #0
 8016702:	d09e      	beq.n	8016642 <_strtod_l+0xba>
 8016704:	2400      	movs	r4, #0
 8016706:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8016708:	1c73      	adds	r3, r6, #1
 801670a:	931b      	str	r3, [sp, #108]	; 0x6c
 801670c:	7873      	ldrb	r3, [r6, #1]
 801670e:	2b2b      	cmp	r3, #43	; 0x2b
 8016710:	d078      	beq.n	8016804 <_strtod_l+0x27c>
 8016712:	2b2d      	cmp	r3, #45	; 0x2d
 8016714:	d070      	beq.n	80167f8 <_strtod_l+0x270>
 8016716:	f04f 0c00 	mov.w	ip, #0
 801671a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801671e:	2f09      	cmp	r7, #9
 8016720:	d97c      	bls.n	801681c <_strtod_l+0x294>
 8016722:	961b      	str	r6, [sp, #108]	; 0x6c
 8016724:	f04f 0e00 	mov.w	lr, #0
 8016728:	e09a      	b.n	8016860 <_strtod_l+0x2d8>
 801672a:	2300      	movs	r3, #0
 801672c:	e7c7      	b.n	80166be <_strtod_l+0x136>
 801672e:	9905      	ldr	r1, [sp, #20]
 8016730:	2908      	cmp	r1, #8
 8016732:	bfdd      	ittte	le
 8016734:	9907      	ldrle	r1, [sp, #28]
 8016736:	fb02 3301 	mlale	r3, r2, r1, r3
 801673a:	9307      	strle	r3, [sp, #28]
 801673c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016740:	9b05      	ldr	r3, [sp, #20]
 8016742:	3001      	adds	r0, #1
 8016744:	3301      	adds	r3, #1
 8016746:	9305      	str	r3, [sp, #20]
 8016748:	901b      	str	r0, [sp, #108]	; 0x6c
 801674a:	e7bf      	b.n	80166cc <_strtod_l+0x144>
 801674c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801674e:	191a      	adds	r2, r3, r4
 8016750:	921b      	str	r2, [sp, #108]	; 0x6c
 8016752:	9a05      	ldr	r2, [sp, #20]
 8016754:	5d1b      	ldrb	r3, [r3, r4]
 8016756:	2a00      	cmp	r2, #0
 8016758:	d037      	beq.n	80167ca <_strtod_l+0x242>
 801675a:	9c05      	ldr	r4, [sp, #20]
 801675c:	4602      	mov	r2, r0
 801675e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016762:	2909      	cmp	r1, #9
 8016764:	d913      	bls.n	801678e <_strtod_l+0x206>
 8016766:	2101      	movs	r1, #1
 8016768:	9104      	str	r1, [sp, #16]
 801676a:	e7c2      	b.n	80166f2 <_strtod_l+0x16a>
 801676c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801676e:	1c5a      	adds	r2, r3, #1
 8016770:	921b      	str	r2, [sp, #108]	; 0x6c
 8016772:	785b      	ldrb	r3, [r3, #1]
 8016774:	3001      	adds	r0, #1
 8016776:	2b30      	cmp	r3, #48	; 0x30
 8016778:	d0f8      	beq.n	801676c <_strtod_l+0x1e4>
 801677a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801677e:	2a08      	cmp	r2, #8
 8016780:	f200 84e4 	bhi.w	801714c <_strtod_l+0xbc4>
 8016784:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016786:	9208      	str	r2, [sp, #32]
 8016788:	4602      	mov	r2, r0
 801678a:	2000      	movs	r0, #0
 801678c:	4604      	mov	r4, r0
 801678e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016792:	f100 0101 	add.w	r1, r0, #1
 8016796:	d012      	beq.n	80167be <_strtod_l+0x236>
 8016798:	440a      	add	r2, r1
 801679a:	eb00 0c04 	add.w	ip, r0, r4
 801679e:	4621      	mov	r1, r4
 80167a0:	270a      	movs	r7, #10
 80167a2:	458c      	cmp	ip, r1
 80167a4:	d113      	bne.n	80167ce <_strtod_l+0x246>
 80167a6:	1821      	adds	r1, r4, r0
 80167a8:	2908      	cmp	r1, #8
 80167aa:	f104 0401 	add.w	r4, r4, #1
 80167ae:	4404      	add	r4, r0
 80167b0:	dc19      	bgt.n	80167e6 <_strtod_l+0x25e>
 80167b2:	9b07      	ldr	r3, [sp, #28]
 80167b4:	210a      	movs	r1, #10
 80167b6:	fb01 e303 	mla	r3, r1, r3, lr
 80167ba:	9307      	str	r3, [sp, #28]
 80167bc:	2100      	movs	r1, #0
 80167be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80167c0:	1c58      	adds	r0, r3, #1
 80167c2:	901b      	str	r0, [sp, #108]	; 0x6c
 80167c4:	785b      	ldrb	r3, [r3, #1]
 80167c6:	4608      	mov	r0, r1
 80167c8:	e7c9      	b.n	801675e <_strtod_l+0x1d6>
 80167ca:	9805      	ldr	r0, [sp, #20]
 80167cc:	e7d3      	b.n	8016776 <_strtod_l+0x1ee>
 80167ce:	2908      	cmp	r1, #8
 80167d0:	f101 0101 	add.w	r1, r1, #1
 80167d4:	dc03      	bgt.n	80167de <_strtod_l+0x256>
 80167d6:	9b07      	ldr	r3, [sp, #28]
 80167d8:	437b      	muls	r3, r7
 80167da:	9307      	str	r3, [sp, #28]
 80167dc:	e7e1      	b.n	80167a2 <_strtod_l+0x21a>
 80167de:	2910      	cmp	r1, #16
 80167e0:	bfd8      	it	le
 80167e2:	437d      	mulle	r5, r7
 80167e4:	e7dd      	b.n	80167a2 <_strtod_l+0x21a>
 80167e6:	2c10      	cmp	r4, #16
 80167e8:	bfdc      	itt	le
 80167ea:	210a      	movle	r1, #10
 80167ec:	fb01 e505 	mlale	r5, r1, r5, lr
 80167f0:	e7e4      	b.n	80167bc <_strtod_l+0x234>
 80167f2:	2301      	movs	r3, #1
 80167f4:	9304      	str	r3, [sp, #16]
 80167f6:	e781      	b.n	80166fc <_strtod_l+0x174>
 80167f8:	f04f 0c01 	mov.w	ip, #1
 80167fc:	1cb3      	adds	r3, r6, #2
 80167fe:	931b      	str	r3, [sp, #108]	; 0x6c
 8016800:	78b3      	ldrb	r3, [r6, #2]
 8016802:	e78a      	b.n	801671a <_strtod_l+0x192>
 8016804:	f04f 0c00 	mov.w	ip, #0
 8016808:	e7f8      	b.n	80167fc <_strtod_l+0x274>
 801680a:	bf00      	nop
 801680c:	0801a268 	.word	0x0801a268
 8016810:	7ff00000 	.word	0x7ff00000
 8016814:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016816:	1c5f      	adds	r7, r3, #1
 8016818:	971b      	str	r7, [sp, #108]	; 0x6c
 801681a:	785b      	ldrb	r3, [r3, #1]
 801681c:	2b30      	cmp	r3, #48	; 0x30
 801681e:	d0f9      	beq.n	8016814 <_strtod_l+0x28c>
 8016820:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8016824:	2f08      	cmp	r7, #8
 8016826:	f63f af7d 	bhi.w	8016724 <_strtod_l+0x19c>
 801682a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801682e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016830:	930a      	str	r3, [sp, #40]	; 0x28
 8016832:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016834:	1c5f      	adds	r7, r3, #1
 8016836:	971b      	str	r7, [sp, #108]	; 0x6c
 8016838:	785b      	ldrb	r3, [r3, #1]
 801683a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801683e:	f1b8 0f09 	cmp.w	r8, #9
 8016842:	d937      	bls.n	80168b4 <_strtod_l+0x32c>
 8016844:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016846:	1a7f      	subs	r7, r7, r1
 8016848:	2f08      	cmp	r7, #8
 801684a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801684e:	dc37      	bgt.n	80168c0 <_strtod_l+0x338>
 8016850:	45be      	cmp	lr, r7
 8016852:	bfa8      	it	ge
 8016854:	46be      	movge	lr, r7
 8016856:	f1bc 0f00 	cmp.w	ip, #0
 801685a:	d001      	beq.n	8016860 <_strtod_l+0x2d8>
 801685c:	f1ce 0e00 	rsb	lr, lr, #0
 8016860:	2c00      	cmp	r4, #0
 8016862:	d151      	bne.n	8016908 <_strtod_l+0x380>
 8016864:	2800      	cmp	r0, #0
 8016866:	f47f aece 	bne.w	8016606 <_strtod_l+0x7e>
 801686a:	9a06      	ldr	r2, [sp, #24]
 801686c:	2a00      	cmp	r2, #0
 801686e:	f47f aeca 	bne.w	8016606 <_strtod_l+0x7e>
 8016872:	9a04      	ldr	r2, [sp, #16]
 8016874:	2a00      	cmp	r2, #0
 8016876:	f47f aee4 	bne.w	8016642 <_strtod_l+0xba>
 801687a:	2b4e      	cmp	r3, #78	; 0x4e
 801687c:	d027      	beq.n	80168ce <_strtod_l+0x346>
 801687e:	dc21      	bgt.n	80168c4 <_strtod_l+0x33c>
 8016880:	2b49      	cmp	r3, #73	; 0x49
 8016882:	f47f aede 	bne.w	8016642 <_strtod_l+0xba>
 8016886:	49a0      	ldr	r1, [pc, #640]	; (8016b08 <_strtod_l+0x580>)
 8016888:	a81b      	add	r0, sp, #108	; 0x6c
 801688a:	f001 fdf7 	bl	801847c <__match>
 801688e:	2800      	cmp	r0, #0
 8016890:	f43f aed7 	beq.w	8016642 <_strtod_l+0xba>
 8016894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016896:	499d      	ldr	r1, [pc, #628]	; (8016b0c <_strtod_l+0x584>)
 8016898:	3b01      	subs	r3, #1
 801689a:	a81b      	add	r0, sp, #108	; 0x6c
 801689c:	931b      	str	r3, [sp, #108]	; 0x6c
 801689e:	f001 fded 	bl	801847c <__match>
 80168a2:	b910      	cbnz	r0, 80168aa <_strtod_l+0x322>
 80168a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168a6:	3301      	adds	r3, #1
 80168a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80168aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016b20 <_strtod_l+0x598>
 80168ae:	f04f 0a00 	mov.w	sl, #0
 80168b2:	e6a8      	b.n	8016606 <_strtod_l+0x7e>
 80168b4:	210a      	movs	r1, #10
 80168b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80168ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80168be:	e7b8      	b.n	8016832 <_strtod_l+0x2aa>
 80168c0:	46be      	mov	lr, r7
 80168c2:	e7c8      	b.n	8016856 <_strtod_l+0x2ce>
 80168c4:	2b69      	cmp	r3, #105	; 0x69
 80168c6:	d0de      	beq.n	8016886 <_strtod_l+0x2fe>
 80168c8:	2b6e      	cmp	r3, #110	; 0x6e
 80168ca:	f47f aeba 	bne.w	8016642 <_strtod_l+0xba>
 80168ce:	4990      	ldr	r1, [pc, #576]	; (8016b10 <_strtod_l+0x588>)
 80168d0:	a81b      	add	r0, sp, #108	; 0x6c
 80168d2:	f001 fdd3 	bl	801847c <__match>
 80168d6:	2800      	cmp	r0, #0
 80168d8:	f43f aeb3 	beq.w	8016642 <_strtod_l+0xba>
 80168dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	2b28      	cmp	r3, #40	; 0x28
 80168e2:	d10e      	bne.n	8016902 <_strtod_l+0x37a>
 80168e4:	aa1e      	add	r2, sp, #120	; 0x78
 80168e6:	498b      	ldr	r1, [pc, #556]	; (8016b14 <_strtod_l+0x58c>)
 80168e8:	a81b      	add	r0, sp, #108	; 0x6c
 80168ea:	f001 fddb 	bl	80184a4 <__hexnan>
 80168ee:	2805      	cmp	r0, #5
 80168f0:	d107      	bne.n	8016902 <_strtod_l+0x37a>
 80168f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80168f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80168f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80168fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016900:	e681      	b.n	8016606 <_strtod_l+0x7e>
 8016902:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016b28 <_strtod_l+0x5a0>
 8016906:	e7d2      	b.n	80168ae <_strtod_l+0x326>
 8016908:	ebae 0302 	sub.w	r3, lr, r2
 801690c:	9306      	str	r3, [sp, #24]
 801690e:	9b05      	ldr	r3, [sp, #20]
 8016910:	9807      	ldr	r0, [sp, #28]
 8016912:	2b00      	cmp	r3, #0
 8016914:	bf08      	it	eq
 8016916:	4623      	moveq	r3, r4
 8016918:	2c10      	cmp	r4, #16
 801691a:	9305      	str	r3, [sp, #20]
 801691c:	46a0      	mov	r8, r4
 801691e:	bfa8      	it	ge
 8016920:	f04f 0810 	movge.w	r8, #16
 8016924:	f7e9 fe06 	bl	8000534 <__aeabi_ui2d>
 8016928:	2c09      	cmp	r4, #9
 801692a:	4682      	mov	sl, r0
 801692c:	468b      	mov	fp, r1
 801692e:	dc13      	bgt.n	8016958 <_strtod_l+0x3d0>
 8016930:	9b06      	ldr	r3, [sp, #24]
 8016932:	2b00      	cmp	r3, #0
 8016934:	f43f ae67 	beq.w	8016606 <_strtod_l+0x7e>
 8016938:	9b06      	ldr	r3, [sp, #24]
 801693a:	dd7a      	ble.n	8016a32 <_strtod_l+0x4aa>
 801693c:	2b16      	cmp	r3, #22
 801693e:	dc61      	bgt.n	8016a04 <_strtod_l+0x47c>
 8016940:	4a75      	ldr	r2, [pc, #468]	; (8016b18 <_strtod_l+0x590>)
 8016942:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016946:	e9de 0100 	ldrd	r0, r1, [lr]
 801694a:	4652      	mov	r2, sl
 801694c:	465b      	mov	r3, fp
 801694e:	f7e9 fe6b 	bl	8000628 <__aeabi_dmul>
 8016952:	4682      	mov	sl, r0
 8016954:	468b      	mov	fp, r1
 8016956:	e656      	b.n	8016606 <_strtod_l+0x7e>
 8016958:	4b6f      	ldr	r3, [pc, #444]	; (8016b18 <_strtod_l+0x590>)
 801695a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801695e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016962:	f7e9 fe61 	bl	8000628 <__aeabi_dmul>
 8016966:	4606      	mov	r6, r0
 8016968:	4628      	mov	r0, r5
 801696a:	460f      	mov	r7, r1
 801696c:	f7e9 fde2 	bl	8000534 <__aeabi_ui2d>
 8016970:	4602      	mov	r2, r0
 8016972:	460b      	mov	r3, r1
 8016974:	4630      	mov	r0, r6
 8016976:	4639      	mov	r1, r7
 8016978:	f7e9 fca0 	bl	80002bc <__adddf3>
 801697c:	2c0f      	cmp	r4, #15
 801697e:	4682      	mov	sl, r0
 8016980:	468b      	mov	fp, r1
 8016982:	ddd5      	ble.n	8016930 <_strtod_l+0x3a8>
 8016984:	9b06      	ldr	r3, [sp, #24]
 8016986:	eba4 0808 	sub.w	r8, r4, r8
 801698a:	4498      	add	r8, r3
 801698c:	f1b8 0f00 	cmp.w	r8, #0
 8016990:	f340 8096 	ble.w	8016ac0 <_strtod_l+0x538>
 8016994:	f018 030f 	ands.w	r3, r8, #15
 8016998:	d00a      	beq.n	80169b0 <_strtod_l+0x428>
 801699a:	495f      	ldr	r1, [pc, #380]	; (8016b18 <_strtod_l+0x590>)
 801699c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80169a0:	4652      	mov	r2, sl
 80169a2:	465b      	mov	r3, fp
 80169a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169a8:	f7e9 fe3e 	bl	8000628 <__aeabi_dmul>
 80169ac:	4682      	mov	sl, r0
 80169ae:	468b      	mov	fp, r1
 80169b0:	f038 080f 	bics.w	r8, r8, #15
 80169b4:	d073      	beq.n	8016a9e <_strtod_l+0x516>
 80169b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80169ba:	dd47      	ble.n	8016a4c <_strtod_l+0x4c4>
 80169bc:	2400      	movs	r4, #0
 80169be:	46a0      	mov	r8, r4
 80169c0:	9407      	str	r4, [sp, #28]
 80169c2:	9405      	str	r4, [sp, #20]
 80169c4:	2322      	movs	r3, #34	; 0x22
 80169c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016b20 <_strtod_l+0x598>
 80169ca:	f8c9 3000 	str.w	r3, [r9]
 80169ce:	f04f 0a00 	mov.w	sl, #0
 80169d2:	9b07      	ldr	r3, [sp, #28]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	f43f ae16 	beq.w	8016606 <_strtod_l+0x7e>
 80169da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80169dc:	4648      	mov	r0, r9
 80169de:	f001 fe6c 	bl	80186ba <_Bfree>
 80169e2:	9905      	ldr	r1, [sp, #20]
 80169e4:	4648      	mov	r0, r9
 80169e6:	f001 fe68 	bl	80186ba <_Bfree>
 80169ea:	4641      	mov	r1, r8
 80169ec:	4648      	mov	r0, r9
 80169ee:	f001 fe64 	bl	80186ba <_Bfree>
 80169f2:	9907      	ldr	r1, [sp, #28]
 80169f4:	4648      	mov	r0, r9
 80169f6:	f001 fe60 	bl	80186ba <_Bfree>
 80169fa:	4621      	mov	r1, r4
 80169fc:	4648      	mov	r0, r9
 80169fe:	f001 fe5c 	bl	80186ba <_Bfree>
 8016a02:	e600      	b.n	8016606 <_strtod_l+0x7e>
 8016a04:	9a06      	ldr	r2, [sp, #24]
 8016a06:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016a0a:	4293      	cmp	r3, r2
 8016a0c:	dbba      	blt.n	8016984 <_strtod_l+0x3fc>
 8016a0e:	4d42      	ldr	r5, [pc, #264]	; (8016b18 <_strtod_l+0x590>)
 8016a10:	f1c4 040f 	rsb	r4, r4, #15
 8016a14:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016a18:	4652      	mov	r2, sl
 8016a1a:	465b      	mov	r3, fp
 8016a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a20:	f7e9 fe02 	bl	8000628 <__aeabi_dmul>
 8016a24:	9b06      	ldr	r3, [sp, #24]
 8016a26:	1b1c      	subs	r4, r3, r4
 8016a28:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016a2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016a30:	e78d      	b.n	801694e <_strtod_l+0x3c6>
 8016a32:	f113 0f16 	cmn.w	r3, #22
 8016a36:	dba5      	blt.n	8016984 <_strtod_l+0x3fc>
 8016a38:	4a37      	ldr	r2, [pc, #220]	; (8016b18 <_strtod_l+0x590>)
 8016a3a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016a3e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016a42:	4650      	mov	r0, sl
 8016a44:	4659      	mov	r1, fp
 8016a46:	f7e9 ff19 	bl	800087c <__aeabi_ddiv>
 8016a4a:	e782      	b.n	8016952 <_strtod_l+0x3ca>
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	4e33      	ldr	r6, [pc, #204]	; (8016b1c <_strtod_l+0x594>)
 8016a50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016a54:	4650      	mov	r0, sl
 8016a56:	4659      	mov	r1, fp
 8016a58:	461d      	mov	r5, r3
 8016a5a:	f1b8 0f01 	cmp.w	r8, #1
 8016a5e:	dc21      	bgt.n	8016aa4 <_strtod_l+0x51c>
 8016a60:	b10b      	cbz	r3, 8016a66 <_strtod_l+0x4de>
 8016a62:	4682      	mov	sl, r0
 8016a64:	468b      	mov	fp, r1
 8016a66:	4b2d      	ldr	r3, [pc, #180]	; (8016b1c <_strtod_l+0x594>)
 8016a68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016a6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016a70:	4652      	mov	r2, sl
 8016a72:	465b      	mov	r3, fp
 8016a74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016a78:	f7e9 fdd6 	bl	8000628 <__aeabi_dmul>
 8016a7c:	4b28      	ldr	r3, [pc, #160]	; (8016b20 <_strtod_l+0x598>)
 8016a7e:	460a      	mov	r2, r1
 8016a80:	400b      	ands	r3, r1
 8016a82:	4928      	ldr	r1, [pc, #160]	; (8016b24 <_strtod_l+0x59c>)
 8016a84:	428b      	cmp	r3, r1
 8016a86:	4682      	mov	sl, r0
 8016a88:	d898      	bhi.n	80169bc <_strtod_l+0x434>
 8016a8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8016a8e:	428b      	cmp	r3, r1
 8016a90:	bf86      	itte	hi
 8016a92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016b2c <_strtod_l+0x5a4>
 8016a96:	f04f 3aff 	movhi.w	sl, #4294967295
 8016a9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	9304      	str	r3, [sp, #16]
 8016aa2:	e077      	b.n	8016b94 <_strtod_l+0x60c>
 8016aa4:	f018 0f01 	tst.w	r8, #1
 8016aa8:	d006      	beq.n	8016ab8 <_strtod_l+0x530>
 8016aaa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8016aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ab2:	f7e9 fdb9 	bl	8000628 <__aeabi_dmul>
 8016ab6:	2301      	movs	r3, #1
 8016ab8:	3501      	adds	r5, #1
 8016aba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016abe:	e7cc      	b.n	8016a5a <_strtod_l+0x4d2>
 8016ac0:	d0ed      	beq.n	8016a9e <_strtod_l+0x516>
 8016ac2:	f1c8 0800 	rsb	r8, r8, #0
 8016ac6:	f018 020f 	ands.w	r2, r8, #15
 8016aca:	d00a      	beq.n	8016ae2 <_strtod_l+0x55a>
 8016acc:	4b12      	ldr	r3, [pc, #72]	; (8016b18 <_strtod_l+0x590>)
 8016ace:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016ad2:	4650      	mov	r0, sl
 8016ad4:	4659      	mov	r1, fp
 8016ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ada:	f7e9 fecf 	bl	800087c <__aeabi_ddiv>
 8016ade:	4682      	mov	sl, r0
 8016ae0:	468b      	mov	fp, r1
 8016ae2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8016ae6:	d0da      	beq.n	8016a9e <_strtod_l+0x516>
 8016ae8:	f1b8 0f1f 	cmp.w	r8, #31
 8016aec:	dd20      	ble.n	8016b30 <_strtod_l+0x5a8>
 8016aee:	2400      	movs	r4, #0
 8016af0:	46a0      	mov	r8, r4
 8016af2:	9407      	str	r4, [sp, #28]
 8016af4:	9405      	str	r4, [sp, #20]
 8016af6:	2322      	movs	r3, #34	; 0x22
 8016af8:	f04f 0a00 	mov.w	sl, #0
 8016afc:	f04f 0b00 	mov.w	fp, #0
 8016b00:	f8c9 3000 	str.w	r3, [r9]
 8016b04:	e765      	b.n	80169d2 <_strtod_l+0x44a>
 8016b06:	bf00      	nop
 8016b08:	0801a235 	.word	0x0801a235
 8016b0c:	0801a2bb 	.word	0x0801a2bb
 8016b10:	0801a23d 	.word	0x0801a23d
 8016b14:	0801a27c 	.word	0x0801a27c
 8016b18:	0801a2f8 	.word	0x0801a2f8
 8016b1c:	0801a2d0 	.word	0x0801a2d0
 8016b20:	7ff00000 	.word	0x7ff00000
 8016b24:	7ca00000 	.word	0x7ca00000
 8016b28:	fff80000 	.word	0xfff80000
 8016b2c:	7fefffff 	.word	0x7fefffff
 8016b30:	f018 0310 	ands.w	r3, r8, #16
 8016b34:	bf18      	it	ne
 8016b36:	236a      	movne	r3, #106	; 0x6a
 8016b38:	4da0      	ldr	r5, [pc, #640]	; (8016dbc <_strtod_l+0x834>)
 8016b3a:	9304      	str	r3, [sp, #16]
 8016b3c:	4650      	mov	r0, sl
 8016b3e:	4659      	mov	r1, fp
 8016b40:	2300      	movs	r3, #0
 8016b42:	f1b8 0f00 	cmp.w	r8, #0
 8016b46:	f300 810a 	bgt.w	8016d5e <_strtod_l+0x7d6>
 8016b4a:	b10b      	cbz	r3, 8016b50 <_strtod_l+0x5c8>
 8016b4c:	4682      	mov	sl, r0
 8016b4e:	468b      	mov	fp, r1
 8016b50:	9b04      	ldr	r3, [sp, #16]
 8016b52:	b1bb      	cbz	r3, 8016b84 <_strtod_l+0x5fc>
 8016b54:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016b58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	4659      	mov	r1, fp
 8016b60:	dd10      	ble.n	8016b84 <_strtod_l+0x5fc>
 8016b62:	2b1f      	cmp	r3, #31
 8016b64:	f340 8107 	ble.w	8016d76 <_strtod_l+0x7ee>
 8016b68:	2b34      	cmp	r3, #52	; 0x34
 8016b6a:	bfde      	ittt	le
 8016b6c:	3b20      	suble	r3, #32
 8016b6e:	f04f 32ff 	movle.w	r2, #4294967295
 8016b72:	fa02 f303 	lslle.w	r3, r2, r3
 8016b76:	f04f 0a00 	mov.w	sl, #0
 8016b7a:	bfcc      	ite	gt
 8016b7c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016b80:	ea03 0b01 	andle.w	fp, r3, r1
 8016b84:	2200      	movs	r2, #0
 8016b86:	2300      	movs	r3, #0
 8016b88:	4650      	mov	r0, sl
 8016b8a:	4659      	mov	r1, fp
 8016b8c:	f7e9 ffb4 	bl	8000af8 <__aeabi_dcmpeq>
 8016b90:	2800      	cmp	r0, #0
 8016b92:	d1ac      	bne.n	8016aee <_strtod_l+0x566>
 8016b94:	9b07      	ldr	r3, [sp, #28]
 8016b96:	9300      	str	r3, [sp, #0]
 8016b98:	9a05      	ldr	r2, [sp, #20]
 8016b9a:	9908      	ldr	r1, [sp, #32]
 8016b9c:	4623      	mov	r3, r4
 8016b9e:	4648      	mov	r0, r9
 8016ba0:	f001 fddd 	bl	801875e <__s2b>
 8016ba4:	9007      	str	r0, [sp, #28]
 8016ba6:	2800      	cmp	r0, #0
 8016ba8:	f43f af08 	beq.w	80169bc <_strtod_l+0x434>
 8016bac:	9a06      	ldr	r2, [sp, #24]
 8016bae:	9b06      	ldr	r3, [sp, #24]
 8016bb0:	2a00      	cmp	r2, #0
 8016bb2:	f1c3 0300 	rsb	r3, r3, #0
 8016bb6:	bfa8      	it	ge
 8016bb8:	2300      	movge	r3, #0
 8016bba:	930e      	str	r3, [sp, #56]	; 0x38
 8016bbc:	2400      	movs	r4, #0
 8016bbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016bc2:	9316      	str	r3, [sp, #88]	; 0x58
 8016bc4:	46a0      	mov	r8, r4
 8016bc6:	9b07      	ldr	r3, [sp, #28]
 8016bc8:	4648      	mov	r0, r9
 8016bca:	6859      	ldr	r1, [r3, #4]
 8016bcc:	f001 fd41 	bl	8018652 <_Balloc>
 8016bd0:	9005      	str	r0, [sp, #20]
 8016bd2:	2800      	cmp	r0, #0
 8016bd4:	f43f aef6 	beq.w	80169c4 <_strtod_l+0x43c>
 8016bd8:	9b07      	ldr	r3, [sp, #28]
 8016bda:	691a      	ldr	r2, [r3, #16]
 8016bdc:	3202      	adds	r2, #2
 8016bde:	f103 010c 	add.w	r1, r3, #12
 8016be2:	0092      	lsls	r2, r2, #2
 8016be4:	300c      	adds	r0, #12
 8016be6:	f001 fd29 	bl	801863c <memcpy>
 8016bea:	aa1e      	add	r2, sp, #120	; 0x78
 8016bec:	a91d      	add	r1, sp, #116	; 0x74
 8016bee:	ec4b ab10 	vmov	d0, sl, fp
 8016bf2:	4648      	mov	r0, r9
 8016bf4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016bf8:	f002 f86c 	bl	8018cd4 <__d2b>
 8016bfc:	901c      	str	r0, [sp, #112]	; 0x70
 8016bfe:	2800      	cmp	r0, #0
 8016c00:	f43f aee0 	beq.w	80169c4 <_strtod_l+0x43c>
 8016c04:	2101      	movs	r1, #1
 8016c06:	4648      	mov	r0, r9
 8016c08:	f001 fe35 	bl	8018876 <__i2b>
 8016c0c:	4680      	mov	r8, r0
 8016c0e:	2800      	cmp	r0, #0
 8016c10:	f43f aed8 	beq.w	80169c4 <_strtod_l+0x43c>
 8016c14:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8016c16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016c18:	2e00      	cmp	r6, #0
 8016c1a:	bfab      	itete	ge
 8016c1c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016c1e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016c20:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8016c22:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8016c24:	bfac      	ite	ge
 8016c26:	18f7      	addge	r7, r6, r3
 8016c28:	1b9d      	sublt	r5, r3, r6
 8016c2a:	9b04      	ldr	r3, [sp, #16]
 8016c2c:	1af6      	subs	r6, r6, r3
 8016c2e:	4416      	add	r6, r2
 8016c30:	4b63      	ldr	r3, [pc, #396]	; (8016dc0 <_strtod_l+0x838>)
 8016c32:	3e01      	subs	r6, #1
 8016c34:	429e      	cmp	r6, r3
 8016c36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016c3a:	f280 80af 	bge.w	8016d9c <_strtod_l+0x814>
 8016c3e:	1b9b      	subs	r3, r3, r6
 8016c40:	2b1f      	cmp	r3, #31
 8016c42:	eba2 0203 	sub.w	r2, r2, r3
 8016c46:	f04f 0101 	mov.w	r1, #1
 8016c4a:	f300 809b 	bgt.w	8016d84 <_strtod_l+0x7fc>
 8016c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8016c52:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c54:	2300      	movs	r3, #0
 8016c56:	930a      	str	r3, [sp, #40]	; 0x28
 8016c58:	18be      	adds	r6, r7, r2
 8016c5a:	9b04      	ldr	r3, [sp, #16]
 8016c5c:	42b7      	cmp	r7, r6
 8016c5e:	4415      	add	r5, r2
 8016c60:	441d      	add	r5, r3
 8016c62:	463b      	mov	r3, r7
 8016c64:	bfa8      	it	ge
 8016c66:	4633      	movge	r3, r6
 8016c68:	42ab      	cmp	r3, r5
 8016c6a:	bfa8      	it	ge
 8016c6c:	462b      	movge	r3, r5
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	bfc2      	ittt	gt
 8016c72:	1af6      	subgt	r6, r6, r3
 8016c74:	1aed      	subgt	r5, r5, r3
 8016c76:	1aff      	subgt	r7, r7, r3
 8016c78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016c7a:	b1bb      	cbz	r3, 8016cac <_strtod_l+0x724>
 8016c7c:	4641      	mov	r1, r8
 8016c7e:	461a      	mov	r2, r3
 8016c80:	4648      	mov	r0, r9
 8016c82:	f001 fe97 	bl	80189b4 <__pow5mult>
 8016c86:	4680      	mov	r8, r0
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	f43f ae9b 	beq.w	80169c4 <_strtod_l+0x43c>
 8016c8e:	4601      	mov	r1, r0
 8016c90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016c92:	4648      	mov	r0, r9
 8016c94:	f001 fdf8 	bl	8018888 <__multiply>
 8016c98:	900c      	str	r0, [sp, #48]	; 0x30
 8016c9a:	2800      	cmp	r0, #0
 8016c9c:	f43f ae92 	beq.w	80169c4 <_strtod_l+0x43c>
 8016ca0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016ca2:	4648      	mov	r0, r9
 8016ca4:	f001 fd09 	bl	80186ba <_Bfree>
 8016ca8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016caa:	931c      	str	r3, [sp, #112]	; 0x70
 8016cac:	2e00      	cmp	r6, #0
 8016cae:	dc7a      	bgt.n	8016da6 <_strtod_l+0x81e>
 8016cb0:	9b06      	ldr	r3, [sp, #24]
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	dd08      	ble.n	8016cc8 <_strtod_l+0x740>
 8016cb6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016cb8:	9905      	ldr	r1, [sp, #20]
 8016cba:	4648      	mov	r0, r9
 8016cbc:	f001 fe7a 	bl	80189b4 <__pow5mult>
 8016cc0:	9005      	str	r0, [sp, #20]
 8016cc2:	2800      	cmp	r0, #0
 8016cc4:	f43f ae7e 	beq.w	80169c4 <_strtod_l+0x43c>
 8016cc8:	2d00      	cmp	r5, #0
 8016cca:	dd08      	ble.n	8016cde <_strtod_l+0x756>
 8016ccc:	462a      	mov	r2, r5
 8016cce:	9905      	ldr	r1, [sp, #20]
 8016cd0:	4648      	mov	r0, r9
 8016cd2:	f001 febd 	bl	8018a50 <__lshift>
 8016cd6:	9005      	str	r0, [sp, #20]
 8016cd8:	2800      	cmp	r0, #0
 8016cda:	f43f ae73 	beq.w	80169c4 <_strtod_l+0x43c>
 8016cde:	2f00      	cmp	r7, #0
 8016ce0:	dd08      	ble.n	8016cf4 <_strtod_l+0x76c>
 8016ce2:	4641      	mov	r1, r8
 8016ce4:	463a      	mov	r2, r7
 8016ce6:	4648      	mov	r0, r9
 8016ce8:	f001 feb2 	bl	8018a50 <__lshift>
 8016cec:	4680      	mov	r8, r0
 8016cee:	2800      	cmp	r0, #0
 8016cf0:	f43f ae68 	beq.w	80169c4 <_strtod_l+0x43c>
 8016cf4:	9a05      	ldr	r2, [sp, #20]
 8016cf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016cf8:	4648      	mov	r0, r9
 8016cfa:	f001 ff17 	bl	8018b2c <__mdiff>
 8016cfe:	4604      	mov	r4, r0
 8016d00:	2800      	cmp	r0, #0
 8016d02:	f43f ae5f 	beq.w	80169c4 <_strtod_l+0x43c>
 8016d06:	68c3      	ldr	r3, [r0, #12]
 8016d08:	930c      	str	r3, [sp, #48]	; 0x30
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	60c3      	str	r3, [r0, #12]
 8016d0e:	4641      	mov	r1, r8
 8016d10:	f001 fef2 	bl	8018af8 <__mcmp>
 8016d14:	2800      	cmp	r0, #0
 8016d16:	da55      	bge.n	8016dc4 <_strtod_l+0x83c>
 8016d18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016d1a:	b9e3      	cbnz	r3, 8016d56 <_strtod_l+0x7ce>
 8016d1c:	f1ba 0f00 	cmp.w	sl, #0
 8016d20:	d119      	bne.n	8016d56 <_strtod_l+0x7ce>
 8016d22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016d26:	b9b3      	cbnz	r3, 8016d56 <_strtod_l+0x7ce>
 8016d28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016d2c:	0d1b      	lsrs	r3, r3, #20
 8016d2e:	051b      	lsls	r3, r3, #20
 8016d30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016d34:	d90f      	bls.n	8016d56 <_strtod_l+0x7ce>
 8016d36:	6963      	ldr	r3, [r4, #20]
 8016d38:	b913      	cbnz	r3, 8016d40 <_strtod_l+0x7b8>
 8016d3a:	6923      	ldr	r3, [r4, #16]
 8016d3c:	2b01      	cmp	r3, #1
 8016d3e:	dd0a      	ble.n	8016d56 <_strtod_l+0x7ce>
 8016d40:	4621      	mov	r1, r4
 8016d42:	2201      	movs	r2, #1
 8016d44:	4648      	mov	r0, r9
 8016d46:	f001 fe83 	bl	8018a50 <__lshift>
 8016d4a:	4641      	mov	r1, r8
 8016d4c:	4604      	mov	r4, r0
 8016d4e:	f001 fed3 	bl	8018af8 <__mcmp>
 8016d52:	2800      	cmp	r0, #0
 8016d54:	dc67      	bgt.n	8016e26 <_strtod_l+0x89e>
 8016d56:	9b04      	ldr	r3, [sp, #16]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d171      	bne.n	8016e40 <_strtod_l+0x8b8>
 8016d5c:	e63d      	b.n	80169da <_strtod_l+0x452>
 8016d5e:	f018 0f01 	tst.w	r8, #1
 8016d62:	d004      	beq.n	8016d6e <_strtod_l+0x7e6>
 8016d64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016d68:	f7e9 fc5e 	bl	8000628 <__aeabi_dmul>
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016d72:	3508      	adds	r5, #8
 8016d74:	e6e5      	b.n	8016b42 <_strtod_l+0x5ba>
 8016d76:	f04f 32ff 	mov.w	r2, #4294967295
 8016d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8016d7e:	ea03 0a0a 	and.w	sl, r3, sl
 8016d82:	e6ff      	b.n	8016b84 <_strtod_l+0x5fc>
 8016d84:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016d88:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8016d8c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016d90:	36e2      	adds	r6, #226	; 0xe2
 8016d92:	fa01 f306 	lsl.w	r3, r1, r6
 8016d96:	930a      	str	r3, [sp, #40]	; 0x28
 8016d98:	910f      	str	r1, [sp, #60]	; 0x3c
 8016d9a:	e75d      	b.n	8016c58 <_strtod_l+0x6d0>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8016da0:	2301      	movs	r3, #1
 8016da2:	930f      	str	r3, [sp, #60]	; 0x3c
 8016da4:	e758      	b.n	8016c58 <_strtod_l+0x6d0>
 8016da6:	4632      	mov	r2, r6
 8016da8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016daa:	4648      	mov	r0, r9
 8016dac:	f001 fe50 	bl	8018a50 <__lshift>
 8016db0:	901c      	str	r0, [sp, #112]	; 0x70
 8016db2:	2800      	cmp	r0, #0
 8016db4:	f47f af7c 	bne.w	8016cb0 <_strtod_l+0x728>
 8016db8:	e604      	b.n	80169c4 <_strtod_l+0x43c>
 8016dba:	bf00      	nop
 8016dbc:	0801a290 	.word	0x0801a290
 8016dc0:	fffffc02 	.word	0xfffffc02
 8016dc4:	465d      	mov	r5, fp
 8016dc6:	f040 8086 	bne.w	8016ed6 <_strtod_l+0x94e>
 8016dca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016dd0:	b32a      	cbz	r2, 8016e1e <_strtod_l+0x896>
 8016dd2:	4aaf      	ldr	r2, [pc, #700]	; (8017090 <_strtod_l+0xb08>)
 8016dd4:	4293      	cmp	r3, r2
 8016dd6:	d153      	bne.n	8016e80 <_strtod_l+0x8f8>
 8016dd8:	9b04      	ldr	r3, [sp, #16]
 8016dda:	4650      	mov	r0, sl
 8016ddc:	b1d3      	cbz	r3, 8016e14 <_strtod_l+0x88c>
 8016dde:	4aad      	ldr	r2, [pc, #692]	; (8017094 <_strtod_l+0xb0c>)
 8016de0:	402a      	ands	r2, r5
 8016de2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8016de6:	f04f 31ff 	mov.w	r1, #4294967295
 8016dea:	d816      	bhi.n	8016e1a <_strtod_l+0x892>
 8016dec:	0d12      	lsrs	r2, r2, #20
 8016dee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016df2:	fa01 f303 	lsl.w	r3, r1, r3
 8016df6:	4298      	cmp	r0, r3
 8016df8:	d142      	bne.n	8016e80 <_strtod_l+0x8f8>
 8016dfa:	4ba7      	ldr	r3, [pc, #668]	; (8017098 <_strtod_l+0xb10>)
 8016dfc:	429d      	cmp	r5, r3
 8016dfe:	d102      	bne.n	8016e06 <_strtod_l+0x87e>
 8016e00:	3001      	adds	r0, #1
 8016e02:	f43f addf 	beq.w	80169c4 <_strtod_l+0x43c>
 8016e06:	4ba3      	ldr	r3, [pc, #652]	; (8017094 <_strtod_l+0xb0c>)
 8016e08:	402b      	ands	r3, r5
 8016e0a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016e0e:	f04f 0a00 	mov.w	sl, #0
 8016e12:	e7a0      	b.n	8016d56 <_strtod_l+0x7ce>
 8016e14:	f04f 33ff 	mov.w	r3, #4294967295
 8016e18:	e7ed      	b.n	8016df6 <_strtod_l+0x86e>
 8016e1a:	460b      	mov	r3, r1
 8016e1c:	e7eb      	b.n	8016df6 <_strtod_l+0x86e>
 8016e1e:	bb7b      	cbnz	r3, 8016e80 <_strtod_l+0x8f8>
 8016e20:	f1ba 0f00 	cmp.w	sl, #0
 8016e24:	d12c      	bne.n	8016e80 <_strtod_l+0x8f8>
 8016e26:	9904      	ldr	r1, [sp, #16]
 8016e28:	4a9a      	ldr	r2, [pc, #616]	; (8017094 <_strtod_l+0xb0c>)
 8016e2a:	465b      	mov	r3, fp
 8016e2c:	b1f1      	cbz	r1, 8016e6c <_strtod_l+0x8e4>
 8016e2e:	ea02 010b 	and.w	r1, r2, fp
 8016e32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016e36:	dc19      	bgt.n	8016e6c <_strtod_l+0x8e4>
 8016e38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016e3c:	f77f ae5b 	ble.w	8016af6 <_strtod_l+0x56e>
 8016e40:	4a96      	ldr	r2, [pc, #600]	; (801709c <_strtod_l+0xb14>)
 8016e42:	2300      	movs	r3, #0
 8016e44:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016e48:	4650      	mov	r0, sl
 8016e4a:	4659      	mov	r1, fp
 8016e4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016e50:	f7e9 fbea 	bl	8000628 <__aeabi_dmul>
 8016e54:	4682      	mov	sl, r0
 8016e56:	468b      	mov	fp, r1
 8016e58:	2900      	cmp	r1, #0
 8016e5a:	f47f adbe 	bne.w	80169da <_strtod_l+0x452>
 8016e5e:	2800      	cmp	r0, #0
 8016e60:	f47f adbb 	bne.w	80169da <_strtod_l+0x452>
 8016e64:	2322      	movs	r3, #34	; 0x22
 8016e66:	f8c9 3000 	str.w	r3, [r9]
 8016e6a:	e5b6      	b.n	80169da <_strtod_l+0x452>
 8016e6c:	4013      	ands	r3, r2
 8016e6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016e72:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016e76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8016e7a:	f04f 3aff 	mov.w	sl, #4294967295
 8016e7e:	e76a      	b.n	8016d56 <_strtod_l+0x7ce>
 8016e80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e82:	b193      	cbz	r3, 8016eaa <_strtod_l+0x922>
 8016e84:	422b      	tst	r3, r5
 8016e86:	f43f af66 	beq.w	8016d56 <_strtod_l+0x7ce>
 8016e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016e8c:	9a04      	ldr	r2, [sp, #16]
 8016e8e:	4650      	mov	r0, sl
 8016e90:	4659      	mov	r1, fp
 8016e92:	b173      	cbz	r3, 8016eb2 <_strtod_l+0x92a>
 8016e94:	f7ff fb5c 	bl	8016550 <sulp>
 8016e98:	4602      	mov	r2, r0
 8016e9a:	460b      	mov	r3, r1
 8016e9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ea0:	f7e9 fa0c 	bl	80002bc <__adddf3>
 8016ea4:	4682      	mov	sl, r0
 8016ea6:	468b      	mov	fp, r1
 8016ea8:	e755      	b.n	8016d56 <_strtod_l+0x7ce>
 8016eaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016eac:	ea13 0f0a 	tst.w	r3, sl
 8016eb0:	e7e9      	b.n	8016e86 <_strtod_l+0x8fe>
 8016eb2:	f7ff fb4d 	bl	8016550 <sulp>
 8016eb6:	4602      	mov	r2, r0
 8016eb8:	460b      	mov	r3, r1
 8016eba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016ebe:	f7e9 f9fb 	bl	80002b8 <__aeabi_dsub>
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	2300      	movs	r3, #0
 8016ec6:	4682      	mov	sl, r0
 8016ec8:	468b      	mov	fp, r1
 8016eca:	f7e9 fe15 	bl	8000af8 <__aeabi_dcmpeq>
 8016ece:	2800      	cmp	r0, #0
 8016ed0:	f47f ae11 	bne.w	8016af6 <_strtod_l+0x56e>
 8016ed4:	e73f      	b.n	8016d56 <_strtod_l+0x7ce>
 8016ed6:	4641      	mov	r1, r8
 8016ed8:	4620      	mov	r0, r4
 8016eda:	f001 ff4a 	bl	8018d72 <__ratio>
 8016ede:	ec57 6b10 	vmov	r6, r7, d0
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016ee8:	ee10 0a10 	vmov	r0, s0
 8016eec:	4639      	mov	r1, r7
 8016eee:	f7e9 fe17 	bl	8000b20 <__aeabi_dcmple>
 8016ef2:	2800      	cmp	r0, #0
 8016ef4:	d077      	beq.n	8016fe6 <_strtod_l+0xa5e>
 8016ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d04a      	beq.n	8016f92 <_strtod_l+0xa0a>
 8016efc:	4b68      	ldr	r3, [pc, #416]	; (80170a0 <_strtod_l+0xb18>)
 8016efe:	2200      	movs	r2, #0
 8016f00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016f04:	4f66      	ldr	r7, [pc, #408]	; (80170a0 <_strtod_l+0xb18>)
 8016f06:	2600      	movs	r6, #0
 8016f08:	4b62      	ldr	r3, [pc, #392]	; (8017094 <_strtod_l+0xb0c>)
 8016f0a:	402b      	ands	r3, r5
 8016f0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016f0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016f10:	4b64      	ldr	r3, [pc, #400]	; (80170a4 <_strtod_l+0xb1c>)
 8016f12:	429a      	cmp	r2, r3
 8016f14:	f040 80ce 	bne.w	80170b4 <_strtod_l+0xb2c>
 8016f18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f20:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8016f24:	ec4b ab10 	vmov	d0, sl, fp
 8016f28:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016f2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016f30:	f001 fe5a 	bl	8018be8 <__ulp>
 8016f34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016f38:	ec53 2b10 	vmov	r2, r3, d0
 8016f3c:	f7e9 fb74 	bl	8000628 <__aeabi_dmul>
 8016f40:	4652      	mov	r2, sl
 8016f42:	465b      	mov	r3, fp
 8016f44:	f7e9 f9ba 	bl	80002bc <__adddf3>
 8016f48:	460b      	mov	r3, r1
 8016f4a:	4952      	ldr	r1, [pc, #328]	; (8017094 <_strtod_l+0xb0c>)
 8016f4c:	4a56      	ldr	r2, [pc, #344]	; (80170a8 <_strtod_l+0xb20>)
 8016f4e:	4019      	ands	r1, r3
 8016f50:	4291      	cmp	r1, r2
 8016f52:	4682      	mov	sl, r0
 8016f54:	d95b      	bls.n	801700e <_strtod_l+0xa86>
 8016f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016f5c:	4293      	cmp	r3, r2
 8016f5e:	d103      	bne.n	8016f68 <_strtod_l+0x9e0>
 8016f60:	9b08      	ldr	r3, [sp, #32]
 8016f62:	3301      	adds	r3, #1
 8016f64:	f43f ad2e 	beq.w	80169c4 <_strtod_l+0x43c>
 8016f68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8017098 <_strtod_l+0xb10>
 8016f6c:	f04f 3aff 	mov.w	sl, #4294967295
 8016f70:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016f72:	4648      	mov	r0, r9
 8016f74:	f001 fba1 	bl	80186ba <_Bfree>
 8016f78:	9905      	ldr	r1, [sp, #20]
 8016f7a:	4648      	mov	r0, r9
 8016f7c:	f001 fb9d 	bl	80186ba <_Bfree>
 8016f80:	4641      	mov	r1, r8
 8016f82:	4648      	mov	r0, r9
 8016f84:	f001 fb99 	bl	80186ba <_Bfree>
 8016f88:	4621      	mov	r1, r4
 8016f8a:	4648      	mov	r0, r9
 8016f8c:	f001 fb95 	bl	80186ba <_Bfree>
 8016f90:	e619      	b.n	8016bc6 <_strtod_l+0x63e>
 8016f92:	f1ba 0f00 	cmp.w	sl, #0
 8016f96:	d11a      	bne.n	8016fce <_strtod_l+0xa46>
 8016f98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016f9c:	b9eb      	cbnz	r3, 8016fda <_strtod_l+0xa52>
 8016f9e:	2200      	movs	r2, #0
 8016fa0:	4b3f      	ldr	r3, [pc, #252]	; (80170a0 <_strtod_l+0xb18>)
 8016fa2:	4630      	mov	r0, r6
 8016fa4:	4639      	mov	r1, r7
 8016fa6:	f7e9 fdb1 	bl	8000b0c <__aeabi_dcmplt>
 8016faa:	b9c8      	cbnz	r0, 8016fe0 <_strtod_l+0xa58>
 8016fac:	4630      	mov	r0, r6
 8016fae:	4639      	mov	r1, r7
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	4b3e      	ldr	r3, [pc, #248]	; (80170ac <_strtod_l+0xb24>)
 8016fb4:	f7e9 fb38 	bl	8000628 <__aeabi_dmul>
 8016fb8:	4606      	mov	r6, r0
 8016fba:	460f      	mov	r7, r1
 8016fbc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016fc0:	9618      	str	r6, [sp, #96]	; 0x60
 8016fc2:	9319      	str	r3, [sp, #100]	; 0x64
 8016fc4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016fc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016fcc:	e79c      	b.n	8016f08 <_strtod_l+0x980>
 8016fce:	f1ba 0f01 	cmp.w	sl, #1
 8016fd2:	d102      	bne.n	8016fda <_strtod_l+0xa52>
 8016fd4:	2d00      	cmp	r5, #0
 8016fd6:	f43f ad8e 	beq.w	8016af6 <_strtod_l+0x56e>
 8016fda:	2200      	movs	r2, #0
 8016fdc:	4b34      	ldr	r3, [pc, #208]	; (80170b0 <_strtod_l+0xb28>)
 8016fde:	e78f      	b.n	8016f00 <_strtod_l+0x978>
 8016fe0:	2600      	movs	r6, #0
 8016fe2:	4f32      	ldr	r7, [pc, #200]	; (80170ac <_strtod_l+0xb24>)
 8016fe4:	e7ea      	b.n	8016fbc <_strtod_l+0xa34>
 8016fe6:	4b31      	ldr	r3, [pc, #196]	; (80170ac <_strtod_l+0xb24>)
 8016fe8:	4630      	mov	r0, r6
 8016fea:	4639      	mov	r1, r7
 8016fec:	2200      	movs	r2, #0
 8016fee:	f7e9 fb1b 	bl	8000628 <__aeabi_dmul>
 8016ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ff4:	4606      	mov	r6, r0
 8016ff6:	460f      	mov	r7, r1
 8016ff8:	b933      	cbnz	r3, 8017008 <_strtod_l+0xa80>
 8016ffa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ffe:	9010      	str	r0, [sp, #64]	; 0x40
 8017000:	9311      	str	r3, [sp, #68]	; 0x44
 8017002:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017006:	e7df      	b.n	8016fc8 <_strtod_l+0xa40>
 8017008:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 801700c:	e7f9      	b.n	8017002 <_strtod_l+0xa7a>
 801700e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8017012:	9b04      	ldr	r3, [sp, #16]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d1ab      	bne.n	8016f70 <_strtod_l+0x9e8>
 8017018:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801701c:	0d1b      	lsrs	r3, r3, #20
 801701e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017020:	051b      	lsls	r3, r3, #20
 8017022:	429a      	cmp	r2, r3
 8017024:	465d      	mov	r5, fp
 8017026:	d1a3      	bne.n	8016f70 <_strtod_l+0x9e8>
 8017028:	4639      	mov	r1, r7
 801702a:	4630      	mov	r0, r6
 801702c:	f7e9 fdac 	bl	8000b88 <__aeabi_d2iz>
 8017030:	f7e9 fa90 	bl	8000554 <__aeabi_i2d>
 8017034:	460b      	mov	r3, r1
 8017036:	4602      	mov	r2, r0
 8017038:	4639      	mov	r1, r7
 801703a:	4630      	mov	r0, r6
 801703c:	f7e9 f93c 	bl	80002b8 <__aeabi_dsub>
 8017040:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017042:	4606      	mov	r6, r0
 8017044:	460f      	mov	r7, r1
 8017046:	b933      	cbnz	r3, 8017056 <_strtod_l+0xace>
 8017048:	f1ba 0f00 	cmp.w	sl, #0
 801704c:	d103      	bne.n	8017056 <_strtod_l+0xace>
 801704e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8017052:	2d00      	cmp	r5, #0
 8017054:	d06d      	beq.n	8017132 <_strtod_l+0xbaa>
 8017056:	a30a      	add	r3, pc, #40	; (adr r3, 8017080 <_strtod_l+0xaf8>)
 8017058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801705c:	4630      	mov	r0, r6
 801705e:	4639      	mov	r1, r7
 8017060:	f7e9 fd54 	bl	8000b0c <__aeabi_dcmplt>
 8017064:	2800      	cmp	r0, #0
 8017066:	f47f acb8 	bne.w	80169da <_strtod_l+0x452>
 801706a:	a307      	add	r3, pc, #28	; (adr r3, 8017088 <_strtod_l+0xb00>)
 801706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017070:	4630      	mov	r0, r6
 8017072:	4639      	mov	r1, r7
 8017074:	f7e9 fd68 	bl	8000b48 <__aeabi_dcmpgt>
 8017078:	2800      	cmp	r0, #0
 801707a:	f43f af79 	beq.w	8016f70 <_strtod_l+0x9e8>
 801707e:	e4ac      	b.n	80169da <_strtod_l+0x452>
 8017080:	94a03595 	.word	0x94a03595
 8017084:	3fdfffff 	.word	0x3fdfffff
 8017088:	35afe535 	.word	0x35afe535
 801708c:	3fe00000 	.word	0x3fe00000
 8017090:	000fffff 	.word	0x000fffff
 8017094:	7ff00000 	.word	0x7ff00000
 8017098:	7fefffff 	.word	0x7fefffff
 801709c:	39500000 	.word	0x39500000
 80170a0:	3ff00000 	.word	0x3ff00000
 80170a4:	7fe00000 	.word	0x7fe00000
 80170a8:	7c9fffff 	.word	0x7c9fffff
 80170ac:	3fe00000 	.word	0x3fe00000
 80170b0:	bff00000 	.word	0xbff00000
 80170b4:	9b04      	ldr	r3, [sp, #16]
 80170b6:	b333      	cbz	r3, 8017106 <_strtod_l+0xb7e>
 80170b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80170ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80170be:	d822      	bhi.n	8017106 <_strtod_l+0xb7e>
 80170c0:	a327      	add	r3, pc, #156	; (adr r3, 8017160 <_strtod_l+0xbd8>)
 80170c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170c6:	4630      	mov	r0, r6
 80170c8:	4639      	mov	r1, r7
 80170ca:	f7e9 fd29 	bl	8000b20 <__aeabi_dcmple>
 80170ce:	b1a0      	cbz	r0, 80170fa <_strtod_l+0xb72>
 80170d0:	4639      	mov	r1, r7
 80170d2:	4630      	mov	r0, r6
 80170d4:	f7e9 fd80 	bl	8000bd8 <__aeabi_d2uiz>
 80170d8:	2800      	cmp	r0, #0
 80170da:	bf08      	it	eq
 80170dc:	2001      	moveq	r0, #1
 80170de:	f7e9 fa29 	bl	8000534 <__aeabi_ui2d>
 80170e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80170e4:	4606      	mov	r6, r0
 80170e6:	460f      	mov	r7, r1
 80170e8:	bb03      	cbnz	r3, 801712c <_strtod_l+0xba4>
 80170ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80170ee:	9012      	str	r0, [sp, #72]	; 0x48
 80170f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80170f2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80170f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80170fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80170fe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8017102:	1a9b      	subs	r3, r3, r2
 8017104:	930b      	str	r3, [sp, #44]	; 0x2c
 8017106:	ed9d 0b08 	vldr	d0, [sp, #32]
 801710a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 801710e:	f001 fd6b 	bl	8018be8 <__ulp>
 8017112:	4650      	mov	r0, sl
 8017114:	ec53 2b10 	vmov	r2, r3, d0
 8017118:	4659      	mov	r1, fp
 801711a:	f7e9 fa85 	bl	8000628 <__aeabi_dmul>
 801711e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017122:	f7e9 f8cb 	bl	80002bc <__adddf3>
 8017126:	4682      	mov	sl, r0
 8017128:	468b      	mov	fp, r1
 801712a:	e772      	b.n	8017012 <_strtod_l+0xa8a>
 801712c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8017130:	e7df      	b.n	80170f2 <_strtod_l+0xb6a>
 8017132:	a30d      	add	r3, pc, #52	; (adr r3, 8017168 <_strtod_l+0xbe0>)
 8017134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017138:	f7e9 fce8 	bl	8000b0c <__aeabi_dcmplt>
 801713c:	e79c      	b.n	8017078 <_strtod_l+0xaf0>
 801713e:	2300      	movs	r3, #0
 8017140:	930d      	str	r3, [sp, #52]	; 0x34
 8017142:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8017144:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017146:	6013      	str	r3, [r2, #0]
 8017148:	f7ff ba61 	b.w	801660e <_strtod_l+0x86>
 801714c:	2b65      	cmp	r3, #101	; 0x65
 801714e:	f04f 0200 	mov.w	r2, #0
 8017152:	f43f ab4e 	beq.w	80167f2 <_strtod_l+0x26a>
 8017156:	2101      	movs	r1, #1
 8017158:	4614      	mov	r4, r2
 801715a:	9104      	str	r1, [sp, #16]
 801715c:	f7ff bacb 	b.w	80166f6 <_strtod_l+0x16e>
 8017160:	ffc00000 	.word	0xffc00000
 8017164:	41dfffff 	.word	0x41dfffff
 8017168:	94a03595 	.word	0x94a03595
 801716c:	3fcfffff 	.word	0x3fcfffff

08017170 <_strtod_r>:
 8017170:	4b05      	ldr	r3, [pc, #20]	; (8017188 <_strtod_r+0x18>)
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	b410      	push	{r4}
 8017176:	6a1b      	ldr	r3, [r3, #32]
 8017178:	4c04      	ldr	r4, [pc, #16]	; (801718c <_strtod_r+0x1c>)
 801717a:	2b00      	cmp	r3, #0
 801717c:	bf08      	it	eq
 801717e:	4623      	moveq	r3, r4
 8017180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017184:	f7ff ba00 	b.w	8016588 <_strtod_l>
 8017188:	2000000c 	.word	0x2000000c
 801718c:	20000070 	.word	0x20000070

08017190 <_strtol_l.isra.0>:
 8017190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017194:	4680      	mov	r8, r0
 8017196:	4689      	mov	r9, r1
 8017198:	4692      	mov	sl, r2
 801719a:	461e      	mov	r6, r3
 801719c:	460f      	mov	r7, r1
 801719e:	463d      	mov	r5, r7
 80171a0:	9808      	ldr	r0, [sp, #32]
 80171a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80171a6:	f001 fa0d 	bl	80185c4 <__locale_ctype_ptr_l>
 80171aa:	4420      	add	r0, r4
 80171ac:	7843      	ldrb	r3, [r0, #1]
 80171ae:	f013 0308 	ands.w	r3, r3, #8
 80171b2:	d132      	bne.n	801721a <_strtol_l.isra.0+0x8a>
 80171b4:	2c2d      	cmp	r4, #45	; 0x2d
 80171b6:	d132      	bne.n	801721e <_strtol_l.isra.0+0x8e>
 80171b8:	787c      	ldrb	r4, [r7, #1]
 80171ba:	1cbd      	adds	r5, r7, #2
 80171bc:	2201      	movs	r2, #1
 80171be:	2e00      	cmp	r6, #0
 80171c0:	d05d      	beq.n	801727e <_strtol_l.isra.0+0xee>
 80171c2:	2e10      	cmp	r6, #16
 80171c4:	d109      	bne.n	80171da <_strtol_l.isra.0+0x4a>
 80171c6:	2c30      	cmp	r4, #48	; 0x30
 80171c8:	d107      	bne.n	80171da <_strtol_l.isra.0+0x4a>
 80171ca:	782b      	ldrb	r3, [r5, #0]
 80171cc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80171d0:	2b58      	cmp	r3, #88	; 0x58
 80171d2:	d14f      	bne.n	8017274 <_strtol_l.isra.0+0xe4>
 80171d4:	786c      	ldrb	r4, [r5, #1]
 80171d6:	2610      	movs	r6, #16
 80171d8:	3502      	adds	r5, #2
 80171da:	2a00      	cmp	r2, #0
 80171dc:	bf14      	ite	ne
 80171de:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80171e2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80171e6:	2700      	movs	r7, #0
 80171e8:	fbb1 fcf6 	udiv	ip, r1, r6
 80171ec:	4638      	mov	r0, r7
 80171ee:	fb06 1e1c 	mls	lr, r6, ip, r1
 80171f2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80171f6:	2b09      	cmp	r3, #9
 80171f8:	d817      	bhi.n	801722a <_strtol_l.isra.0+0x9a>
 80171fa:	461c      	mov	r4, r3
 80171fc:	42a6      	cmp	r6, r4
 80171fe:	dd23      	ble.n	8017248 <_strtol_l.isra.0+0xb8>
 8017200:	1c7b      	adds	r3, r7, #1
 8017202:	d007      	beq.n	8017214 <_strtol_l.isra.0+0x84>
 8017204:	4584      	cmp	ip, r0
 8017206:	d31c      	bcc.n	8017242 <_strtol_l.isra.0+0xb2>
 8017208:	d101      	bne.n	801720e <_strtol_l.isra.0+0x7e>
 801720a:	45a6      	cmp	lr, r4
 801720c:	db19      	blt.n	8017242 <_strtol_l.isra.0+0xb2>
 801720e:	fb00 4006 	mla	r0, r0, r6, r4
 8017212:	2701      	movs	r7, #1
 8017214:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017218:	e7eb      	b.n	80171f2 <_strtol_l.isra.0+0x62>
 801721a:	462f      	mov	r7, r5
 801721c:	e7bf      	b.n	801719e <_strtol_l.isra.0+0xe>
 801721e:	2c2b      	cmp	r4, #43	; 0x2b
 8017220:	bf04      	itt	eq
 8017222:	1cbd      	addeq	r5, r7, #2
 8017224:	787c      	ldrbeq	r4, [r7, #1]
 8017226:	461a      	mov	r2, r3
 8017228:	e7c9      	b.n	80171be <_strtol_l.isra.0+0x2e>
 801722a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801722e:	2b19      	cmp	r3, #25
 8017230:	d801      	bhi.n	8017236 <_strtol_l.isra.0+0xa6>
 8017232:	3c37      	subs	r4, #55	; 0x37
 8017234:	e7e2      	b.n	80171fc <_strtol_l.isra.0+0x6c>
 8017236:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801723a:	2b19      	cmp	r3, #25
 801723c:	d804      	bhi.n	8017248 <_strtol_l.isra.0+0xb8>
 801723e:	3c57      	subs	r4, #87	; 0x57
 8017240:	e7dc      	b.n	80171fc <_strtol_l.isra.0+0x6c>
 8017242:	f04f 37ff 	mov.w	r7, #4294967295
 8017246:	e7e5      	b.n	8017214 <_strtol_l.isra.0+0x84>
 8017248:	1c7b      	adds	r3, r7, #1
 801724a:	d108      	bne.n	801725e <_strtol_l.isra.0+0xce>
 801724c:	2322      	movs	r3, #34	; 0x22
 801724e:	f8c8 3000 	str.w	r3, [r8]
 8017252:	4608      	mov	r0, r1
 8017254:	f1ba 0f00 	cmp.w	sl, #0
 8017258:	d107      	bne.n	801726a <_strtol_l.isra.0+0xda>
 801725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801725e:	b102      	cbz	r2, 8017262 <_strtol_l.isra.0+0xd2>
 8017260:	4240      	negs	r0, r0
 8017262:	f1ba 0f00 	cmp.w	sl, #0
 8017266:	d0f8      	beq.n	801725a <_strtol_l.isra.0+0xca>
 8017268:	b10f      	cbz	r7, 801726e <_strtol_l.isra.0+0xde>
 801726a:	f105 39ff 	add.w	r9, r5, #4294967295
 801726e:	f8ca 9000 	str.w	r9, [sl]
 8017272:	e7f2      	b.n	801725a <_strtol_l.isra.0+0xca>
 8017274:	2430      	movs	r4, #48	; 0x30
 8017276:	2e00      	cmp	r6, #0
 8017278:	d1af      	bne.n	80171da <_strtol_l.isra.0+0x4a>
 801727a:	2608      	movs	r6, #8
 801727c:	e7ad      	b.n	80171da <_strtol_l.isra.0+0x4a>
 801727e:	2c30      	cmp	r4, #48	; 0x30
 8017280:	d0a3      	beq.n	80171ca <_strtol_l.isra.0+0x3a>
 8017282:	260a      	movs	r6, #10
 8017284:	e7a9      	b.n	80171da <_strtol_l.isra.0+0x4a>
	...

08017288 <_strtol_r>:
 8017288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801728a:	4c06      	ldr	r4, [pc, #24]	; (80172a4 <_strtol_r+0x1c>)
 801728c:	4d06      	ldr	r5, [pc, #24]	; (80172a8 <_strtol_r+0x20>)
 801728e:	6824      	ldr	r4, [r4, #0]
 8017290:	6a24      	ldr	r4, [r4, #32]
 8017292:	2c00      	cmp	r4, #0
 8017294:	bf08      	it	eq
 8017296:	462c      	moveq	r4, r5
 8017298:	9400      	str	r4, [sp, #0]
 801729a:	f7ff ff79 	bl	8017190 <_strtol_l.isra.0>
 801729e:	b003      	add	sp, #12
 80172a0:	bd30      	pop	{r4, r5, pc}
 80172a2:	bf00      	nop
 80172a4:	2000000c 	.word	0x2000000c
 80172a8:	20000070 	.word	0x20000070

080172ac <_vsiprintf_r>:
 80172ac:	b500      	push	{lr}
 80172ae:	b09b      	sub	sp, #108	; 0x6c
 80172b0:	9100      	str	r1, [sp, #0]
 80172b2:	9104      	str	r1, [sp, #16]
 80172b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80172b8:	9105      	str	r1, [sp, #20]
 80172ba:	9102      	str	r1, [sp, #8]
 80172bc:	4905      	ldr	r1, [pc, #20]	; (80172d4 <_vsiprintf_r+0x28>)
 80172be:	9103      	str	r1, [sp, #12]
 80172c0:	4669      	mov	r1, sp
 80172c2:	f001 fed5 	bl	8019070 <_svfiprintf_r>
 80172c6:	9b00      	ldr	r3, [sp, #0]
 80172c8:	2200      	movs	r2, #0
 80172ca:	701a      	strb	r2, [r3, #0]
 80172cc:	b01b      	add	sp, #108	; 0x6c
 80172ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80172d2:	bf00      	nop
 80172d4:	ffff0208 	.word	0xffff0208

080172d8 <vsiprintf>:
 80172d8:	4613      	mov	r3, r2
 80172da:	460a      	mov	r2, r1
 80172dc:	4601      	mov	r1, r0
 80172de:	4802      	ldr	r0, [pc, #8]	; (80172e8 <vsiprintf+0x10>)
 80172e0:	6800      	ldr	r0, [r0, #0]
 80172e2:	f7ff bfe3 	b.w	80172ac <_vsiprintf_r>
 80172e6:	bf00      	nop
 80172e8:	2000000c 	.word	0x2000000c

080172ec <quorem>:
 80172ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172f0:	6903      	ldr	r3, [r0, #16]
 80172f2:	690c      	ldr	r4, [r1, #16]
 80172f4:	42a3      	cmp	r3, r4
 80172f6:	4680      	mov	r8, r0
 80172f8:	f2c0 8082 	blt.w	8017400 <quorem+0x114>
 80172fc:	3c01      	subs	r4, #1
 80172fe:	f101 0714 	add.w	r7, r1, #20
 8017302:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8017306:	f100 0614 	add.w	r6, r0, #20
 801730a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801730e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8017312:	eb06 030c 	add.w	r3, r6, ip
 8017316:	3501      	adds	r5, #1
 8017318:	eb07 090c 	add.w	r9, r7, ip
 801731c:	9301      	str	r3, [sp, #4]
 801731e:	fbb0 f5f5 	udiv	r5, r0, r5
 8017322:	b395      	cbz	r5, 801738a <quorem+0x9e>
 8017324:	f04f 0a00 	mov.w	sl, #0
 8017328:	4638      	mov	r0, r7
 801732a:	46b6      	mov	lr, r6
 801732c:	46d3      	mov	fp, sl
 801732e:	f850 2b04 	ldr.w	r2, [r0], #4
 8017332:	b293      	uxth	r3, r2
 8017334:	fb05 a303 	mla	r3, r5, r3, sl
 8017338:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801733c:	b29b      	uxth	r3, r3
 801733e:	ebab 0303 	sub.w	r3, fp, r3
 8017342:	0c12      	lsrs	r2, r2, #16
 8017344:	f8de b000 	ldr.w	fp, [lr]
 8017348:	fb05 a202 	mla	r2, r5, r2, sl
 801734c:	fa13 f38b 	uxtah	r3, r3, fp
 8017350:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8017354:	fa1f fb82 	uxth.w	fp, r2
 8017358:	f8de 2000 	ldr.w	r2, [lr]
 801735c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8017360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017364:	b29b      	uxth	r3, r3
 8017366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801736a:	4581      	cmp	r9, r0
 801736c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8017370:	f84e 3b04 	str.w	r3, [lr], #4
 8017374:	d2db      	bcs.n	801732e <quorem+0x42>
 8017376:	f856 300c 	ldr.w	r3, [r6, ip]
 801737a:	b933      	cbnz	r3, 801738a <quorem+0x9e>
 801737c:	9b01      	ldr	r3, [sp, #4]
 801737e:	3b04      	subs	r3, #4
 8017380:	429e      	cmp	r6, r3
 8017382:	461a      	mov	r2, r3
 8017384:	d330      	bcc.n	80173e8 <quorem+0xfc>
 8017386:	f8c8 4010 	str.w	r4, [r8, #16]
 801738a:	4640      	mov	r0, r8
 801738c:	f001 fbb4 	bl	8018af8 <__mcmp>
 8017390:	2800      	cmp	r0, #0
 8017392:	db25      	blt.n	80173e0 <quorem+0xf4>
 8017394:	3501      	adds	r5, #1
 8017396:	4630      	mov	r0, r6
 8017398:	f04f 0c00 	mov.w	ip, #0
 801739c:	f857 2b04 	ldr.w	r2, [r7], #4
 80173a0:	f8d0 e000 	ldr.w	lr, [r0]
 80173a4:	b293      	uxth	r3, r2
 80173a6:	ebac 0303 	sub.w	r3, ip, r3
 80173aa:	0c12      	lsrs	r2, r2, #16
 80173ac:	fa13 f38e 	uxtah	r3, r3, lr
 80173b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80173b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80173b8:	b29b      	uxth	r3, r3
 80173ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80173be:	45b9      	cmp	r9, r7
 80173c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80173c4:	f840 3b04 	str.w	r3, [r0], #4
 80173c8:	d2e8      	bcs.n	801739c <quorem+0xb0>
 80173ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80173ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80173d2:	b92a      	cbnz	r2, 80173e0 <quorem+0xf4>
 80173d4:	3b04      	subs	r3, #4
 80173d6:	429e      	cmp	r6, r3
 80173d8:	461a      	mov	r2, r3
 80173da:	d30b      	bcc.n	80173f4 <quorem+0x108>
 80173dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80173e0:	4628      	mov	r0, r5
 80173e2:	b003      	add	sp, #12
 80173e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173e8:	6812      	ldr	r2, [r2, #0]
 80173ea:	3b04      	subs	r3, #4
 80173ec:	2a00      	cmp	r2, #0
 80173ee:	d1ca      	bne.n	8017386 <quorem+0x9a>
 80173f0:	3c01      	subs	r4, #1
 80173f2:	e7c5      	b.n	8017380 <quorem+0x94>
 80173f4:	6812      	ldr	r2, [r2, #0]
 80173f6:	3b04      	subs	r3, #4
 80173f8:	2a00      	cmp	r2, #0
 80173fa:	d1ef      	bne.n	80173dc <quorem+0xf0>
 80173fc:	3c01      	subs	r4, #1
 80173fe:	e7ea      	b.n	80173d6 <quorem+0xea>
 8017400:	2000      	movs	r0, #0
 8017402:	e7ee      	b.n	80173e2 <quorem+0xf6>
 8017404:	0000      	movs	r0, r0
	...

08017408 <_dtoa_r>:
 8017408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801740c:	ec57 6b10 	vmov	r6, r7, d0
 8017410:	b097      	sub	sp, #92	; 0x5c
 8017412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017414:	9106      	str	r1, [sp, #24]
 8017416:	4604      	mov	r4, r0
 8017418:	920b      	str	r2, [sp, #44]	; 0x2c
 801741a:	9312      	str	r3, [sp, #72]	; 0x48
 801741c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017420:	e9cd 6700 	strd	r6, r7, [sp]
 8017424:	b93d      	cbnz	r5, 8017436 <_dtoa_r+0x2e>
 8017426:	2010      	movs	r0, #16
 8017428:	f001 f8ee 	bl	8018608 <malloc>
 801742c:	6260      	str	r0, [r4, #36]	; 0x24
 801742e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017432:	6005      	str	r5, [r0, #0]
 8017434:	60c5      	str	r5, [r0, #12]
 8017436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017438:	6819      	ldr	r1, [r3, #0]
 801743a:	b151      	cbz	r1, 8017452 <_dtoa_r+0x4a>
 801743c:	685a      	ldr	r2, [r3, #4]
 801743e:	604a      	str	r2, [r1, #4]
 8017440:	2301      	movs	r3, #1
 8017442:	4093      	lsls	r3, r2
 8017444:	608b      	str	r3, [r1, #8]
 8017446:	4620      	mov	r0, r4
 8017448:	f001 f937 	bl	80186ba <_Bfree>
 801744c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801744e:	2200      	movs	r2, #0
 8017450:	601a      	str	r2, [r3, #0]
 8017452:	1e3b      	subs	r3, r7, #0
 8017454:	bfbb      	ittet	lt
 8017456:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801745a:	9301      	strlt	r3, [sp, #4]
 801745c:	2300      	movge	r3, #0
 801745e:	2201      	movlt	r2, #1
 8017460:	bfac      	ite	ge
 8017462:	f8c8 3000 	strge.w	r3, [r8]
 8017466:	f8c8 2000 	strlt.w	r2, [r8]
 801746a:	4baf      	ldr	r3, [pc, #700]	; (8017728 <_dtoa_r+0x320>)
 801746c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8017470:	ea33 0308 	bics.w	r3, r3, r8
 8017474:	d114      	bne.n	80174a0 <_dtoa_r+0x98>
 8017476:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017478:	f242 730f 	movw	r3, #9999	; 0x270f
 801747c:	6013      	str	r3, [r2, #0]
 801747e:	9b00      	ldr	r3, [sp, #0]
 8017480:	b923      	cbnz	r3, 801748c <_dtoa_r+0x84>
 8017482:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8017486:	2800      	cmp	r0, #0
 8017488:	f000 8542 	beq.w	8017f10 <_dtoa_r+0xb08>
 801748c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801748e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801773c <_dtoa_r+0x334>
 8017492:	2b00      	cmp	r3, #0
 8017494:	f000 8544 	beq.w	8017f20 <_dtoa_r+0xb18>
 8017498:	f10b 0303 	add.w	r3, fp, #3
 801749c:	f000 bd3e 	b.w	8017f1c <_dtoa_r+0xb14>
 80174a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80174a4:	2200      	movs	r2, #0
 80174a6:	2300      	movs	r3, #0
 80174a8:	4630      	mov	r0, r6
 80174aa:	4639      	mov	r1, r7
 80174ac:	f7e9 fb24 	bl	8000af8 <__aeabi_dcmpeq>
 80174b0:	4681      	mov	r9, r0
 80174b2:	b168      	cbz	r0, 80174d0 <_dtoa_r+0xc8>
 80174b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80174b6:	2301      	movs	r3, #1
 80174b8:	6013      	str	r3, [r2, #0]
 80174ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80174bc:	2b00      	cmp	r3, #0
 80174be:	f000 8524 	beq.w	8017f0a <_dtoa_r+0xb02>
 80174c2:	4b9a      	ldr	r3, [pc, #616]	; (801772c <_dtoa_r+0x324>)
 80174c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80174c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80174ca:	6013      	str	r3, [r2, #0]
 80174cc:	f000 bd28 	b.w	8017f20 <_dtoa_r+0xb18>
 80174d0:	aa14      	add	r2, sp, #80	; 0x50
 80174d2:	a915      	add	r1, sp, #84	; 0x54
 80174d4:	ec47 6b10 	vmov	d0, r6, r7
 80174d8:	4620      	mov	r0, r4
 80174da:	f001 fbfb 	bl	8018cd4 <__d2b>
 80174de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80174e2:	9004      	str	r0, [sp, #16]
 80174e4:	2d00      	cmp	r5, #0
 80174e6:	d07c      	beq.n	80175e2 <_dtoa_r+0x1da>
 80174e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80174ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80174f0:	46b2      	mov	sl, r6
 80174f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80174f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80174fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80174fe:	2200      	movs	r2, #0
 8017500:	4b8b      	ldr	r3, [pc, #556]	; (8017730 <_dtoa_r+0x328>)
 8017502:	4650      	mov	r0, sl
 8017504:	4659      	mov	r1, fp
 8017506:	f7e8 fed7 	bl	80002b8 <__aeabi_dsub>
 801750a:	a381      	add	r3, pc, #516	; (adr r3, 8017710 <_dtoa_r+0x308>)
 801750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017510:	f7e9 f88a 	bl	8000628 <__aeabi_dmul>
 8017514:	a380      	add	r3, pc, #512	; (adr r3, 8017718 <_dtoa_r+0x310>)
 8017516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801751a:	f7e8 fecf 	bl	80002bc <__adddf3>
 801751e:	4606      	mov	r6, r0
 8017520:	4628      	mov	r0, r5
 8017522:	460f      	mov	r7, r1
 8017524:	f7e9 f816 	bl	8000554 <__aeabi_i2d>
 8017528:	a37d      	add	r3, pc, #500	; (adr r3, 8017720 <_dtoa_r+0x318>)
 801752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801752e:	f7e9 f87b 	bl	8000628 <__aeabi_dmul>
 8017532:	4602      	mov	r2, r0
 8017534:	460b      	mov	r3, r1
 8017536:	4630      	mov	r0, r6
 8017538:	4639      	mov	r1, r7
 801753a:	f7e8 febf 	bl	80002bc <__adddf3>
 801753e:	4606      	mov	r6, r0
 8017540:	460f      	mov	r7, r1
 8017542:	f7e9 fb21 	bl	8000b88 <__aeabi_d2iz>
 8017546:	2200      	movs	r2, #0
 8017548:	4682      	mov	sl, r0
 801754a:	2300      	movs	r3, #0
 801754c:	4630      	mov	r0, r6
 801754e:	4639      	mov	r1, r7
 8017550:	f7e9 fadc 	bl	8000b0c <__aeabi_dcmplt>
 8017554:	b148      	cbz	r0, 801756a <_dtoa_r+0x162>
 8017556:	4650      	mov	r0, sl
 8017558:	f7e8 fffc 	bl	8000554 <__aeabi_i2d>
 801755c:	4632      	mov	r2, r6
 801755e:	463b      	mov	r3, r7
 8017560:	f7e9 faca 	bl	8000af8 <__aeabi_dcmpeq>
 8017564:	b908      	cbnz	r0, 801756a <_dtoa_r+0x162>
 8017566:	f10a 3aff 	add.w	sl, sl, #4294967295
 801756a:	f1ba 0f16 	cmp.w	sl, #22
 801756e:	d859      	bhi.n	8017624 <_dtoa_r+0x21c>
 8017570:	4970      	ldr	r1, [pc, #448]	; (8017734 <_dtoa_r+0x32c>)
 8017572:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017576:	e9dd 2300 	ldrd	r2, r3, [sp]
 801757a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801757e:	f7e9 fae3 	bl	8000b48 <__aeabi_dcmpgt>
 8017582:	2800      	cmp	r0, #0
 8017584:	d050      	beq.n	8017628 <_dtoa_r+0x220>
 8017586:	f10a 3aff 	add.w	sl, sl, #4294967295
 801758a:	2300      	movs	r3, #0
 801758c:	930f      	str	r3, [sp, #60]	; 0x3c
 801758e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017590:	1b5d      	subs	r5, r3, r5
 8017592:	f1b5 0801 	subs.w	r8, r5, #1
 8017596:	bf49      	itett	mi
 8017598:	f1c5 0301 	rsbmi	r3, r5, #1
 801759c:	2300      	movpl	r3, #0
 801759e:	9305      	strmi	r3, [sp, #20]
 80175a0:	f04f 0800 	movmi.w	r8, #0
 80175a4:	bf58      	it	pl
 80175a6:	9305      	strpl	r3, [sp, #20]
 80175a8:	f1ba 0f00 	cmp.w	sl, #0
 80175ac:	db3e      	blt.n	801762c <_dtoa_r+0x224>
 80175ae:	2300      	movs	r3, #0
 80175b0:	44d0      	add	r8, sl
 80175b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80175b6:	9307      	str	r3, [sp, #28]
 80175b8:	9b06      	ldr	r3, [sp, #24]
 80175ba:	2b09      	cmp	r3, #9
 80175bc:	f200 8090 	bhi.w	80176e0 <_dtoa_r+0x2d8>
 80175c0:	2b05      	cmp	r3, #5
 80175c2:	bfc4      	itt	gt
 80175c4:	3b04      	subgt	r3, #4
 80175c6:	9306      	strgt	r3, [sp, #24]
 80175c8:	9b06      	ldr	r3, [sp, #24]
 80175ca:	f1a3 0302 	sub.w	r3, r3, #2
 80175ce:	bfcc      	ite	gt
 80175d0:	2500      	movgt	r5, #0
 80175d2:	2501      	movle	r5, #1
 80175d4:	2b03      	cmp	r3, #3
 80175d6:	f200 808f 	bhi.w	80176f8 <_dtoa_r+0x2f0>
 80175da:	e8df f003 	tbb	[pc, r3]
 80175de:	7f7d      	.short	0x7f7d
 80175e0:	7131      	.short	0x7131
 80175e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80175e6:	441d      	add	r5, r3
 80175e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80175ec:	2820      	cmp	r0, #32
 80175ee:	dd13      	ble.n	8017618 <_dtoa_r+0x210>
 80175f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80175f4:	9b00      	ldr	r3, [sp, #0]
 80175f6:	fa08 f800 	lsl.w	r8, r8, r0
 80175fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80175fe:	fa23 f000 	lsr.w	r0, r3, r0
 8017602:	ea48 0000 	orr.w	r0, r8, r0
 8017606:	f7e8 ff95 	bl	8000534 <__aeabi_ui2d>
 801760a:	2301      	movs	r3, #1
 801760c:	4682      	mov	sl, r0
 801760e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8017612:	3d01      	subs	r5, #1
 8017614:	9313      	str	r3, [sp, #76]	; 0x4c
 8017616:	e772      	b.n	80174fe <_dtoa_r+0xf6>
 8017618:	9b00      	ldr	r3, [sp, #0]
 801761a:	f1c0 0020 	rsb	r0, r0, #32
 801761e:	fa03 f000 	lsl.w	r0, r3, r0
 8017622:	e7f0      	b.n	8017606 <_dtoa_r+0x1fe>
 8017624:	2301      	movs	r3, #1
 8017626:	e7b1      	b.n	801758c <_dtoa_r+0x184>
 8017628:	900f      	str	r0, [sp, #60]	; 0x3c
 801762a:	e7b0      	b.n	801758e <_dtoa_r+0x186>
 801762c:	9b05      	ldr	r3, [sp, #20]
 801762e:	eba3 030a 	sub.w	r3, r3, sl
 8017632:	9305      	str	r3, [sp, #20]
 8017634:	f1ca 0300 	rsb	r3, sl, #0
 8017638:	9307      	str	r3, [sp, #28]
 801763a:	2300      	movs	r3, #0
 801763c:	930e      	str	r3, [sp, #56]	; 0x38
 801763e:	e7bb      	b.n	80175b8 <_dtoa_r+0x1b0>
 8017640:	2301      	movs	r3, #1
 8017642:	930a      	str	r3, [sp, #40]	; 0x28
 8017644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017646:	2b00      	cmp	r3, #0
 8017648:	dd59      	ble.n	80176fe <_dtoa_r+0x2f6>
 801764a:	9302      	str	r3, [sp, #8]
 801764c:	4699      	mov	r9, r3
 801764e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017650:	2200      	movs	r2, #0
 8017652:	6072      	str	r2, [r6, #4]
 8017654:	2204      	movs	r2, #4
 8017656:	f102 0014 	add.w	r0, r2, #20
 801765a:	4298      	cmp	r0, r3
 801765c:	6871      	ldr	r1, [r6, #4]
 801765e:	d953      	bls.n	8017708 <_dtoa_r+0x300>
 8017660:	4620      	mov	r0, r4
 8017662:	f000 fff6 	bl	8018652 <_Balloc>
 8017666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017668:	6030      	str	r0, [r6, #0]
 801766a:	f1b9 0f0e 	cmp.w	r9, #14
 801766e:	f8d3 b000 	ldr.w	fp, [r3]
 8017672:	f200 80e6 	bhi.w	8017842 <_dtoa_r+0x43a>
 8017676:	2d00      	cmp	r5, #0
 8017678:	f000 80e3 	beq.w	8017842 <_dtoa_r+0x43a>
 801767c:	ed9d 7b00 	vldr	d7, [sp]
 8017680:	f1ba 0f00 	cmp.w	sl, #0
 8017684:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017688:	dd74      	ble.n	8017774 <_dtoa_r+0x36c>
 801768a:	4a2a      	ldr	r2, [pc, #168]	; (8017734 <_dtoa_r+0x32c>)
 801768c:	f00a 030f 	and.w	r3, sl, #15
 8017690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017694:	ed93 7b00 	vldr	d7, [r3]
 8017698:	ea4f 162a 	mov.w	r6, sl, asr #4
 801769c:	06f0      	lsls	r0, r6, #27
 801769e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80176a2:	d565      	bpl.n	8017770 <_dtoa_r+0x368>
 80176a4:	4b24      	ldr	r3, [pc, #144]	; (8017738 <_dtoa_r+0x330>)
 80176a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80176aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80176ae:	f7e9 f8e5 	bl	800087c <__aeabi_ddiv>
 80176b2:	e9cd 0100 	strd	r0, r1, [sp]
 80176b6:	f006 060f 	and.w	r6, r6, #15
 80176ba:	2503      	movs	r5, #3
 80176bc:	4f1e      	ldr	r7, [pc, #120]	; (8017738 <_dtoa_r+0x330>)
 80176be:	e04c      	b.n	801775a <_dtoa_r+0x352>
 80176c0:	2301      	movs	r3, #1
 80176c2:	930a      	str	r3, [sp, #40]	; 0x28
 80176c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80176c6:	4453      	add	r3, sl
 80176c8:	f103 0901 	add.w	r9, r3, #1
 80176cc:	9302      	str	r3, [sp, #8]
 80176ce:	464b      	mov	r3, r9
 80176d0:	2b01      	cmp	r3, #1
 80176d2:	bfb8      	it	lt
 80176d4:	2301      	movlt	r3, #1
 80176d6:	e7ba      	b.n	801764e <_dtoa_r+0x246>
 80176d8:	2300      	movs	r3, #0
 80176da:	e7b2      	b.n	8017642 <_dtoa_r+0x23a>
 80176dc:	2300      	movs	r3, #0
 80176de:	e7f0      	b.n	80176c2 <_dtoa_r+0x2ba>
 80176e0:	2501      	movs	r5, #1
 80176e2:	2300      	movs	r3, #0
 80176e4:	9306      	str	r3, [sp, #24]
 80176e6:	950a      	str	r5, [sp, #40]	; 0x28
 80176e8:	f04f 33ff 	mov.w	r3, #4294967295
 80176ec:	9302      	str	r3, [sp, #8]
 80176ee:	4699      	mov	r9, r3
 80176f0:	2200      	movs	r2, #0
 80176f2:	2312      	movs	r3, #18
 80176f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80176f6:	e7aa      	b.n	801764e <_dtoa_r+0x246>
 80176f8:	2301      	movs	r3, #1
 80176fa:	930a      	str	r3, [sp, #40]	; 0x28
 80176fc:	e7f4      	b.n	80176e8 <_dtoa_r+0x2e0>
 80176fe:	2301      	movs	r3, #1
 8017700:	9302      	str	r3, [sp, #8]
 8017702:	4699      	mov	r9, r3
 8017704:	461a      	mov	r2, r3
 8017706:	e7f5      	b.n	80176f4 <_dtoa_r+0x2ec>
 8017708:	3101      	adds	r1, #1
 801770a:	6071      	str	r1, [r6, #4]
 801770c:	0052      	lsls	r2, r2, #1
 801770e:	e7a2      	b.n	8017656 <_dtoa_r+0x24e>
 8017710:	636f4361 	.word	0x636f4361
 8017714:	3fd287a7 	.word	0x3fd287a7
 8017718:	8b60c8b3 	.word	0x8b60c8b3
 801771c:	3fc68a28 	.word	0x3fc68a28
 8017720:	509f79fb 	.word	0x509f79fb
 8017724:	3fd34413 	.word	0x3fd34413
 8017728:	7ff00000 	.word	0x7ff00000
 801772c:	0801a3f4 	.word	0x0801a3f4
 8017730:	3ff80000 	.word	0x3ff80000
 8017734:	0801a2f8 	.word	0x0801a2f8
 8017738:	0801a2d0 	.word	0x0801a2d0
 801773c:	0801a2c1 	.word	0x0801a2c1
 8017740:	07f1      	lsls	r1, r6, #31
 8017742:	d508      	bpl.n	8017756 <_dtoa_r+0x34e>
 8017744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017748:	e9d7 2300 	ldrd	r2, r3, [r7]
 801774c:	f7e8 ff6c 	bl	8000628 <__aeabi_dmul>
 8017750:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017754:	3501      	adds	r5, #1
 8017756:	1076      	asrs	r6, r6, #1
 8017758:	3708      	adds	r7, #8
 801775a:	2e00      	cmp	r6, #0
 801775c:	d1f0      	bne.n	8017740 <_dtoa_r+0x338>
 801775e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017766:	f7e9 f889 	bl	800087c <__aeabi_ddiv>
 801776a:	e9cd 0100 	strd	r0, r1, [sp]
 801776e:	e01a      	b.n	80177a6 <_dtoa_r+0x39e>
 8017770:	2502      	movs	r5, #2
 8017772:	e7a3      	b.n	80176bc <_dtoa_r+0x2b4>
 8017774:	f000 80a0 	beq.w	80178b8 <_dtoa_r+0x4b0>
 8017778:	f1ca 0600 	rsb	r6, sl, #0
 801777c:	4b9f      	ldr	r3, [pc, #636]	; (80179fc <_dtoa_r+0x5f4>)
 801777e:	4fa0      	ldr	r7, [pc, #640]	; (8017a00 <_dtoa_r+0x5f8>)
 8017780:	f006 020f 	and.w	r2, r6, #15
 8017784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801778c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017790:	f7e8 ff4a 	bl	8000628 <__aeabi_dmul>
 8017794:	e9cd 0100 	strd	r0, r1, [sp]
 8017798:	1136      	asrs	r6, r6, #4
 801779a:	2300      	movs	r3, #0
 801779c:	2502      	movs	r5, #2
 801779e:	2e00      	cmp	r6, #0
 80177a0:	d17f      	bne.n	80178a2 <_dtoa_r+0x49a>
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d1e1      	bne.n	801776a <_dtoa_r+0x362>
 80177a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	f000 8087 	beq.w	80178bc <_dtoa_r+0x4b4>
 80177ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80177b2:	2200      	movs	r2, #0
 80177b4:	4b93      	ldr	r3, [pc, #588]	; (8017a04 <_dtoa_r+0x5fc>)
 80177b6:	4630      	mov	r0, r6
 80177b8:	4639      	mov	r1, r7
 80177ba:	f7e9 f9a7 	bl	8000b0c <__aeabi_dcmplt>
 80177be:	2800      	cmp	r0, #0
 80177c0:	d07c      	beq.n	80178bc <_dtoa_r+0x4b4>
 80177c2:	f1b9 0f00 	cmp.w	r9, #0
 80177c6:	d079      	beq.n	80178bc <_dtoa_r+0x4b4>
 80177c8:	9b02      	ldr	r3, [sp, #8]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	dd35      	ble.n	801783a <_dtoa_r+0x432>
 80177ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80177d2:	9308      	str	r3, [sp, #32]
 80177d4:	4639      	mov	r1, r7
 80177d6:	2200      	movs	r2, #0
 80177d8:	4b8b      	ldr	r3, [pc, #556]	; (8017a08 <_dtoa_r+0x600>)
 80177da:	4630      	mov	r0, r6
 80177dc:	f7e8 ff24 	bl	8000628 <__aeabi_dmul>
 80177e0:	e9cd 0100 	strd	r0, r1, [sp]
 80177e4:	9f02      	ldr	r7, [sp, #8]
 80177e6:	3501      	adds	r5, #1
 80177e8:	4628      	mov	r0, r5
 80177ea:	f7e8 feb3 	bl	8000554 <__aeabi_i2d>
 80177ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80177f2:	f7e8 ff19 	bl	8000628 <__aeabi_dmul>
 80177f6:	2200      	movs	r2, #0
 80177f8:	4b84      	ldr	r3, [pc, #528]	; (8017a0c <_dtoa_r+0x604>)
 80177fa:	f7e8 fd5f 	bl	80002bc <__adddf3>
 80177fe:	4605      	mov	r5, r0
 8017800:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8017804:	2f00      	cmp	r7, #0
 8017806:	d15d      	bne.n	80178c4 <_dtoa_r+0x4bc>
 8017808:	2200      	movs	r2, #0
 801780a:	4b81      	ldr	r3, [pc, #516]	; (8017a10 <_dtoa_r+0x608>)
 801780c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017810:	f7e8 fd52 	bl	80002b8 <__aeabi_dsub>
 8017814:	462a      	mov	r2, r5
 8017816:	4633      	mov	r3, r6
 8017818:	e9cd 0100 	strd	r0, r1, [sp]
 801781c:	f7e9 f994 	bl	8000b48 <__aeabi_dcmpgt>
 8017820:	2800      	cmp	r0, #0
 8017822:	f040 8288 	bne.w	8017d36 <_dtoa_r+0x92e>
 8017826:	462a      	mov	r2, r5
 8017828:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801782c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017830:	f7e9 f96c 	bl	8000b0c <__aeabi_dcmplt>
 8017834:	2800      	cmp	r0, #0
 8017836:	f040 827c 	bne.w	8017d32 <_dtoa_r+0x92a>
 801783a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801783e:	e9cd 2300 	strd	r2, r3, [sp]
 8017842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017844:	2b00      	cmp	r3, #0
 8017846:	f2c0 8150 	blt.w	8017aea <_dtoa_r+0x6e2>
 801784a:	f1ba 0f0e 	cmp.w	sl, #14
 801784e:	f300 814c 	bgt.w	8017aea <_dtoa_r+0x6e2>
 8017852:	4b6a      	ldr	r3, [pc, #424]	; (80179fc <_dtoa_r+0x5f4>)
 8017854:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017858:	ed93 7b00 	vldr	d7, [r3]
 801785c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801785e:	2b00      	cmp	r3, #0
 8017860:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017864:	f280 80d8 	bge.w	8017a18 <_dtoa_r+0x610>
 8017868:	f1b9 0f00 	cmp.w	r9, #0
 801786c:	f300 80d4 	bgt.w	8017a18 <_dtoa_r+0x610>
 8017870:	f040 825e 	bne.w	8017d30 <_dtoa_r+0x928>
 8017874:	2200      	movs	r2, #0
 8017876:	4b66      	ldr	r3, [pc, #408]	; (8017a10 <_dtoa_r+0x608>)
 8017878:	ec51 0b17 	vmov	r0, r1, d7
 801787c:	f7e8 fed4 	bl	8000628 <__aeabi_dmul>
 8017880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017884:	f7e9 f956 	bl	8000b34 <__aeabi_dcmpge>
 8017888:	464f      	mov	r7, r9
 801788a:	464e      	mov	r6, r9
 801788c:	2800      	cmp	r0, #0
 801788e:	f040 8234 	bne.w	8017cfa <_dtoa_r+0x8f2>
 8017892:	2331      	movs	r3, #49	; 0x31
 8017894:	f10b 0501 	add.w	r5, fp, #1
 8017898:	f88b 3000 	strb.w	r3, [fp]
 801789c:	f10a 0a01 	add.w	sl, sl, #1
 80178a0:	e22f      	b.n	8017d02 <_dtoa_r+0x8fa>
 80178a2:	07f2      	lsls	r2, r6, #31
 80178a4:	d505      	bpl.n	80178b2 <_dtoa_r+0x4aa>
 80178a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80178aa:	f7e8 febd 	bl	8000628 <__aeabi_dmul>
 80178ae:	3501      	adds	r5, #1
 80178b0:	2301      	movs	r3, #1
 80178b2:	1076      	asrs	r6, r6, #1
 80178b4:	3708      	adds	r7, #8
 80178b6:	e772      	b.n	801779e <_dtoa_r+0x396>
 80178b8:	2502      	movs	r5, #2
 80178ba:	e774      	b.n	80177a6 <_dtoa_r+0x39e>
 80178bc:	f8cd a020 	str.w	sl, [sp, #32]
 80178c0:	464f      	mov	r7, r9
 80178c2:	e791      	b.n	80177e8 <_dtoa_r+0x3e0>
 80178c4:	4b4d      	ldr	r3, [pc, #308]	; (80179fc <_dtoa_r+0x5f4>)
 80178c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80178ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80178ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d047      	beq.n	8017964 <_dtoa_r+0x55c>
 80178d4:	4602      	mov	r2, r0
 80178d6:	460b      	mov	r3, r1
 80178d8:	2000      	movs	r0, #0
 80178da:	494e      	ldr	r1, [pc, #312]	; (8017a14 <_dtoa_r+0x60c>)
 80178dc:	f7e8 ffce 	bl	800087c <__aeabi_ddiv>
 80178e0:	462a      	mov	r2, r5
 80178e2:	4633      	mov	r3, r6
 80178e4:	f7e8 fce8 	bl	80002b8 <__aeabi_dsub>
 80178e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80178ec:	465d      	mov	r5, fp
 80178ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178f2:	f7e9 f949 	bl	8000b88 <__aeabi_d2iz>
 80178f6:	4606      	mov	r6, r0
 80178f8:	f7e8 fe2c 	bl	8000554 <__aeabi_i2d>
 80178fc:	4602      	mov	r2, r0
 80178fe:	460b      	mov	r3, r1
 8017900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017904:	f7e8 fcd8 	bl	80002b8 <__aeabi_dsub>
 8017908:	3630      	adds	r6, #48	; 0x30
 801790a:	f805 6b01 	strb.w	r6, [r5], #1
 801790e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017912:	e9cd 0100 	strd	r0, r1, [sp]
 8017916:	f7e9 f8f9 	bl	8000b0c <__aeabi_dcmplt>
 801791a:	2800      	cmp	r0, #0
 801791c:	d163      	bne.n	80179e6 <_dtoa_r+0x5de>
 801791e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017922:	2000      	movs	r0, #0
 8017924:	4937      	ldr	r1, [pc, #220]	; (8017a04 <_dtoa_r+0x5fc>)
 8017926:	f7e8 fcc7 	bl	80002b8 <__aeabi_dsub>
 801792a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801792e:	f7e9 f8ed 	bl	8000b0c <__aeabi_dcmplt>
 8017932:	2800      	cmp	r0, #0
 8017934:	f040 80b7 	bne.w	8017aa6 <_dtoa_r+0x69e>
 8017938:	eba5 030b 	sub.w	r3, r5, fp
 801793c:	429f      	cmp	r7, r3
 801793e:	f77f af7c 	ble.w	801783a <_dtoa_r+0x432>
 8017942:	2200      	movs	r2, #0
 8017944:	4b30      	ldr	r3, [pc, #192]	; (8017a08 <_dtoa_r+0x600>)
 8017946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801794a:	f7e8 fe6d 	bl	8000628 <__aeabi_dmul>
 801794e:	2200      	movs	r2, #0
 8017950:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017954:	4b2c      	ldr	r3, [pc, #176]	; (8017a08 <_dtoa_r+0x600>)
 8017956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801795a:	f7e8 fe65 	bl	8000628 <__aeabi_dmul>
 801795e:	e9cd 0100 	strd	r0, r1, [sp]
 8017962:	e7c4      	b.n	80178ee <_dtoa_r+0x4e6>
 8017964:	462a      	mov	r2, r5
 8017966:	4633      	mov	r3, r6
 8017968:	f7e8 fe5e 	bl	8000628 <__aeabi_dmul>
 801796c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017970:	eb0b 0507 	add.w	r5, fp, r7
 8017974:	465e      	mov	r6, fp
 8017976:	e9dd 0100 	ldrd	r0, r1, [sp]
 801797a:	f7e9 f905 	bl	8000b88 <__aeabi_d2iz>
 801797e:	4607      	mov	r7, r0
 8017980:	f7e8 fde8 	bl	8000554 <__aeabi_i2d>
 8017984:	3730      	adds	r7, #48	; 0x30
 8017986:	4602      	mov	r2, r0
 8017988:	460b      	mov	r3, r1
 801798a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801798e:	f7e8 fc93 	bl	80002b8 <__aeabi_dsub>
 8017992:	f806 7b01 	strb.w	r7, [r6], #1
 8017996:	42ae      	cmp	r6, r5
 8017998:	e9cd 0100 	strd	r0, r1, [sp]
 801799c:	f04f 0200 	mov.w	r2, #0
 80179a0:	d126      	bne.n	80179f0 <_dtoa_r+0x5e8>
 80179a2:	4b1c      	ldr	r3, [pc, #112]	; (8017a14 <_dtoa_r+0x60c>)
 80179a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80179a8:	f7e8 fc88 	bl	80002bc <__adddf3>
 80179ac:	4602      	mov	r2, r0
 80179ae:	460b      	mov	r3, r1
 80179b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179b4:	f7e9 f8c8 	bl	8000b48 <__aeabi_dcmpgt>
 80179b8:	2800      	cmp	r0, #0
 80179ba:	d174      	bne.n	8017aa6 <_dtoa_r+0x69e>
 80179bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80179c0:	2000      	movs	r0, #0
 80179c2:	4914      	ldr	r1, [pc, #80]	; (8017a14 <_dtoa_r+0x60c>)
 80179c4:	f7e8 fc78 	bl	80002b8 <__aeabi_dsub>
 80179c8:	4602      	mov	r2, r0
 80179ca:	460b      	mov	r3, r1
 80179cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80179d0:	f7e9 f89c 	bl	8000b0c <__aeabi_dcmplt>
 80179d4:	2800      	cmp	r0, #0
 80179d6:	f43f af30 	beq.w	801783a <_dtoa_r+0x432>
 80179da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179de:	2b30      	cmp	r3, #48	; 0x30
 80179e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80179e4:	d002      	beq.n	80179ec <_dtoa_r+0x5e4>
 80179e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80179ea:	e04a      	b.n	8017a82 <_dtoa_r+0x67a>
 80179ec:	4615      	mov	r5, r2
 80179ee:	e7f4      	b.n	80179da <_dtoa_r+0x5d2>
 80179f0:	4b05      	ldr	r3, [pc, #20]	; (8017a08 <_dtoa_r+0x600>)
 80179f2:	f7e8 fe19 	bl	8000628 <__aeabi_dmul>
 80179f6:	e9cd 0100 	strd	r0, r1, [sp]
 80179fa:	e7bc      	b.n	8017976 <_dtoa_r+0x56e>
 80179fc:	0801a2f8 	.word	0x0801a2f8
 8017a00:	0801a2d0 	.word	0x0801a2d0
 8017a04:	3ff00000 	.word	0x3ff00000
 8017a08:	40240000 	.word	0x40240000
 8017a0c:	401c0000 	.word	0x401c0000
 8017a10:	40140000 	.word	0x40140000
 8017a14:	3fe00000 	.word	0x3fe00000
 8017a18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a1c:	465d      	mov	r5, fp
 8017a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a22:	4630      	mov	r0, r6
 8017a24:	4639      	mov	r1, r7
 8017a26:	f7e8 ff29 	bl	800087c <__aeabi_ddiv>
 8017a2a:	f7e9 f8ad 	bl	8000b88 <__aeabi_d2iz>
 8017a2e:	4680      	mov	r8, r0
 8017a30:	f7e8 fd90 	bl	8000554 <__aeabi_i2d>
 8017a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a38:	f7e8 fdf6 	bl	8000628 <__aeabi_dmul>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	460b      	mov	r3, r1
 8017a40:	4630      	mov	r0, r6
 8017a42:	4639      	mov	r1, r7
 8017a44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017a48:	f7e8 fc36 	bl	80002b8 <__aeabi_dsub>
 8017a4c:	f805 6b01 	strb.w	r6, [r5], #1
 8017a50:	eba5 060b 	sub.w	r6, r5, fp
 8017a54:	45b1      	cmp	r9, r6
 8017a56:	4602      	mov	r2, r0
 8017a58:	460b      	mov	r3, r1
 8017a5a:	d139      	bne.n	8017ad0 <_dtoa_r+0x6c8>
 8017a5c:	f7e8 fc2e 	bl	80002bc <__adddf3>
 8017a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a64:	4606      	mov	r6, r0
 8017a66:	460f      	mov	r7, r1
 8017a68:	f7e9 f86e 	bl	8000b48 <__aeabi_dcmpgt>
 8017a6c:	b9c8      	cbnz	r0, 8017aa2 <_dtoa_r+0x69a>
 8017a6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017a72:	4630      	mov	r0, r6
 8017a74:	4639      	mov	r1, r7
 8017a76:	f7e9 f83f 	bl	8000af8 <__aeabi_dcmpeq>
 8017a7a:	b110      	cbz	r0, 8017a82 <_dtoa_r+0x67a>
 8017a7c:	f018 0f01 	tst.w	r8, #1
 8017a80:	d10f      	bne.n	8017aa2 <_dtoa_r+0x69a>
 8017a82:	9904      	ldr	r1, [sp, #16]
 8017a84:	4620      	mov	r0, r4
 8017a86:	f000 fe18 	bl	80186ba <_Bfree>
 8017a8a:	2300      	movs	r3, #0
 8017a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017a8e:	702b      	strb	r3, [r5, #0]
 8017a90:	f10a 0301 	add.w	r3, sl, #1
 8017a94:	6013      	str	r3, [r2, #0]
 8017a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	f000 8241 	beq.w	8017f20 <_dtoa_r+0xb18>
 8017a9e:	601d      	str	r5, [r3, #0]
 8017aa0:	e23e      	b.n	8017f20 <_dtoa_r+0xb18>
 8017aa2:	f8cd a020 	str.w	sl, [sp, #32]
 8017aa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017aaa:	2a39      	cmp	r2, #57	; 0x39
 8017aac:	f105 33ff 	add.w	r3, r5, #4294967295
 8017ab0:	d108      	bne.n	8017ac4 <_dtoa_r+0x6bc>
 8017ab2:	459b      	cmp	fp, r3
 8017ab4:	d10a      	bne.n	8017acc <_dtoa_r+0x6c4>
 8017ab6:	9b08      	ldr	r3, [sp, #32]
 8017ab8:	3301      	adds	r3, #1
 8017aba:	9308      	str	r3, [sp, #32]
 8017abc:	2330      	movs	r3, #48	; 0x30
 8017abe:	f88b 3000 	strb.w	r3, [fp]
 8017ac2:	465b      	mov	r3, fp
 8017ac4:	781a      	ldrb	r2, [r3, #0]
 8017ac6:	3201      	adds	r2, #1
 8017ac8:	701a      	strb	r2, [r3, #0]
 8017aca:	e78c      	b.n	80179e6 <_dtoa_r+0x5de>
 8017acc:	461d      	mov	r5, r3
 8017ace:	e7ea      	b.n	8017aa6 <_dtoa_r+0x69e>
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	4b9b      	ldr	r3, [pc, #620]	; (8017d40 <_dtoa_r+0x938>)
 8017ad4:	f7e8 fda8 	bl	8000628 <__aeabi_dmul>
 8017ad8:	2200      	movs	r2, #0
 8017ada:	2300      	movs	r3, #0
 8017adc:	4606      	mov	r6, r0
 8017ade:	460f      	mov	r7, r1
 8017ae0:	f7e9 f80a 	bl	8000af8 <__aeabi_dcmpeq>
 8017ae4:	2800      	cmp	r0, #0
 8017ae6:	d09a      	beq.n	8017a1e <_dtoa_r+0x616>
 8017ae8:	e7cb      	b.n	8017a82 <_dtoa_r+0x67a>
 8017aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017aec:	2a00      	cmp	r2, #0
 8017aee:	f000 808b 	beq.w	8017c08 <_dtoa_r+0x800>
 8017af2:	9a06      	ldr	r2, [sp, #24]
 8017af4:	2a01      	cmp	r2, #1
 8017af6:	dc6e      	bgt.n	8017bd6 <_dtoa_r+0x7ce>
 8017af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017afa:	2a00      	cmp	r2, #0
 8017afc:	d067      	beq.n	8017bce <_dtoa_r+0x7c6>
 8017afe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017b02:	9f07      	ldr	r7, [sp, #28]
 8017b04:	9d05      	ldr	r5, [sp, #20]
 8017b06:	9a05      	ldr	r2, [sp, #20]
 8017b08:	2101      	movs	r1, #1
 8017b0a:	441a      	add	r2, r3
 8017b0c:	4620      	mov	r0, r4
 8017b0e:	9205      	str	r2, [sp, #20]
 8017b10:	4498      	add	r8, r3
 8017b12:	f000 feb0 	bl	8018876 <__i2b>
 8017b16:	4606      	mov	r6, r0
 8017b18:	2d00      	cmp	r5, #0
 8017b1a:	dd0c      	ble.n	8017b36 <_dtoa_r+0x72e>
 8017b1c:	f1b8 0f00 	cmp.w	r8, #0
 8017b20:	dd09      	ble.n	8017b36 <_dtoa_r+0x72e>
 8017b22:	4545      	cmp	r5, r8
 8017b24:	9a05      	ldr	r2, [sp, #20]
 8017b26:	462b      	mov	r3, r5
 8017b28:	bfa8      	it	ge
 8017b2a:	4643      	movge	r3, r8
 8017b2c:	1ad2      	subs	r2, r2, r3
 8017b2e:	9205      	str	r2, [sp, #20]
 8017b30:	1aed      	subs	r5, r5, r3
 8017b32:	eba8 0803 	sub.w	r8, r8, r3
 8017b36:	9b07      	ldr	r3, [sp, #28]
 8017b38:	b1eb      	cbz	r3, 8017b76 <_dtoa_r+0x76e>
 8017b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b3c:	2b00      	cmp	r3, #0
 8017b3e:	d067      	beq.n	8017c10 <_dtoa_r+0x808>
 8017b40:	b18f      	cbz	r7, 8017b66 <_dtoa_r+0x75e>
 8017b42:	4631      	mov	r1, r6
 8017b44:	463a      	mov	r2, r7
 8017b46:	4620      	mov	r0, r4
 8017b48:	f000 ff34 	bl	80189b4 <__pow5mult>
 8017b4c:	9a04      	ldr	r2, [sp, #16]
 8017b4e:	4601      	mov	r1, r0
 8017b50:	4606      	mov	r6, r0
 8017b52:	4620      	mov	r0, r4
 8017b54:	f000 fe98 	bl	8018888 <__multiply>
 8017b58:	9904      	ldr	r1, [sp, #16]
 8017b5a:	9008      	str	r0, [sp, #32]
 8017b5c:	4620      	mov	r0, r4
 8017b5e:	f000 fdac 	bl	80186ba <_Bfree>
 8017b62:	9b08      	ldr	r3, [sp, #32]
 8017b64:	9304      	str	r3, [sp, #16]
 8017b66:	9b07      	ldr	r3, [sp, #28]
 8017b68:	1bda      	subs	r2, r3, r7
 8017b6a:	d004      	beq.n	8017b76 <_dtoa_r+0x76e>
 8017b6c:	9904      	ldr	r1, [sp, #16]
 8017b6e:	4620      	mov	r0, r4
 8017b70:	f000 ff20 	bl	80189b4 <__pow5mult>
 8017b74:	9004      	str	r0, [sp, #16]
 8017b76:	2101      	movs	r1, #1
 8017b78:	4620      	mov	r0, r4
 8017b7a:	f000 fe7c 	bl	8018876 <__i2b>
 8017b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b80:	4607      	mov	r7, r0
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	f000 81d0 	beq.w	8017f28 <_dtoa_r+0xb20>
 8017b88:	461a      	mov	r2, r3
 8017b8a:	4601      	mov	r1, r0
 8017b8c:	4620      	mov	r0, r4
 8017b8e:	f000 ff11 	bl	80189b4 <__pow5mult>
 8017b92:	9b06      	ldr	r3, [sp, #24]
 8017b94:	2b01      	cmp	r3, #1
 8017b96:	4607      	mov	r7, r0
 8017b98:	dc40      	bgt.n	8017c1c <_dtoa_r+0x814>
 8017b9a:	9b00      	ldr	r3, [sp, #0]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d139      	bne.n	8017c14 <_dtoa_r+0x80c>
 8017ba0:	9b01      	ldr	r3, [sp, #4]
 8017ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d136      	bne.n	8017c18 <_dtoa_r+0x810>
 8017baa:	9b01      	ldr	r3, [sp, #4]
 8017bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017bb0:	0d1b      	lsrs	r3, r3, #20
 8017bb2:	051b      	lsls	r3, r3, #20
 8017bb4:	b12b      	cbz	r3, 8017bc2 <_dtoa_r+0x7ba>
 8017bb6:	9b05      	ldr	r3, [sp, #20]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	9305      	str	r3, [sp, #20]
 8017bbc:	f108 0801 	add.w	r8, r8, #1
 8017bc0:	2301      	movs	r3, #1
 8017bc2:	9307      	str	r3, [sp, #28]
 8017bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d12a      	bne.n	8017c20 <_dtoa_r+0x818>
 8017bca:	2001      	movs	r0, #1
 8017bcc:	e030      	b.n	8017c30 <_dtoa_r+0x828>
 8017bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017bd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017bd4:	e795      	b.n	8017b02 <_dtoa_r+0x6fa>
 8017bd6:	9b07      	ldr	r3, [sp, #28]
 8017bd8:	f109 37ff 	add.w	r7, r9, #4294967295
 8017bdc:	42bb      	cmp	r3, r7
 8017bde:	bfbf      	itttt	lt
 8017be0:	9b07      	ldrlt	r3, [sp, #28]
 8017be2:	9707      	strlt	r7, [sp, #28]
 8017be4:	1afa      	sublt	r2, r7, r3
 8017be6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017be8:	bfbb      	ittet	lt
 8017bea:	189b      	addlt	r3, r3, r2
 8017bec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017bee:	1bdf      	subge	r7, r3, r7
 8017bf0:	2700      	movlt	r7, #0
 8017bf2:	f1b9 0f00 	cmp.w	r9, #0
 8017bf6:	bfb5      	itete	lt
 8017bf8:	9b05      	ldrlt	r3, [sp, #20]
 8017bfa:	9d05      	ldrge	r5, [sp, #20]
 8017bfc:	eba3 0509 	sublt.w	r5, r3, r9
 8017c00:	464b      	movge	r3, r9
 8017c02:	bfb8      	it	lt
 8017c04:	2300      	movlt	r3, #0
 8017c06:	e77e      	b.n	8017b06 <_dtoa_r+0x6fe>
 8017c08:	9f07      	ldr	r7, [sp, #28]
 8017c0a:	9d05      	ldr	r5, [sp, #20]
 8017c0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017c0e:	e783      	b.n	8017b18 <_dtoa_r+0x710>
 8017c10:	9a07      	ldr	r2, [sp, #28]
 8017c12:	e7ab      	b.n	8017b6c <_dtoa_r+0x764>
 8017c14:	2300      	movs	r3, #0
 8017c16:	e7d4      	b.n	8017bc2 <_dtoa_r+0x7ba>
 8017c18:	9b00      	ldr	r3, [sp, #0]
 8017c1a:	e7d2      	b.n	8017bc2 <_dtoa_r+0x7ba>
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	9307      	str	r3, [sp, #28]
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8017c26:	6918      	ldr	r0, [r3, #16]
 8017c28:	f000 fdd7 	bl	80187da <__hi0bits>
 8017c2c:	f1c0 0020 	rsb	r0, r0, #32
 8017c30:	4440      	add	r0, r8
 8017c32:	f010 001f 	ands.w	r0, r0, #31
 8017c36:	d047      	beq.n	8017cc8 <_dtoa_r+0x8c0>
 8017c38:	f1c0 0320 	rsb	r3, r0, #32
 8017c3c:	2b04      	cmp	r3, #4
 8017c3e:	dd3b      	ble.n	8017cb8 <_dtoa_r+0x8b0>
 8017c40:	9b05      	ldr	r3, [sp, #20]
 8017c42:	f1c0 001c 	rsb	r0, r0, #28
 8017c46:	4403      	add	r3, r0
 8017c48:	9305      	str	r3, [sp, #20]
 8017c4a:	4405      	add	r5, r0
 8017c4c:	4480      	add	r8, r0
 8017c4e:	9b05      	ldr	r3, [sp, #20]
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	dd05      	ble.n	8017c60 <_dtoa_r+0x858>
 8017c54:	461a      	mov	r2, r3
 8017c56:	9904      	ldr	r1, [sp, #16]
 8017c58:	4620      	mov	r0, r4
 8017c5a:	f000 fef9 	bl	8018a50 <__lshift>
 8017c5e:	9004      	str	r0, [sp, #16]
 8017c60:	f1b8 0f00 	cmp.w	r8, #0
 8017c64:	dd05      	ble.n	8017c72 <_dtoa_r+0x86a>
 8017c66:	4639      	mov	r1, r7
 8017c68:	4642      	mov	r2, r8
 8017c6a:	4620      	mov	r0, r4
 8017c6c:	f000 fef0 	bl	8018a50 <__lshift>
 8017c70:	4607      	mov	r7, r0
 8017c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017c74:	b353      	cbz	r3, 8017ccc <_dtoa_r+0x8c4>
 8017c76:	4639      	mov	r1, r7
 8017c78:	9804      	ldr	r0, [sp, #16]
 8017c7a:	f000 ff3d 	bl	8018af8 <__mcmp>
 8017c7e:	2800      	cmp	r0, #0
 8017c80:	da24      	bge.n	8017ccc <_dtoa_r+0x8c4>
 8017c82:	2300      	movs	r3, #0
 8017c84:	220a      	movs	r2, #10
 8017c86:	9904      	ldr	r1, [sp, #16]
 8017c88:	4620      	mov	r0, r4
 8017c8a:	f000 fd2d 	bl	80186e8 <__multadd>
 8017c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c90:	9004      	str	r0, [sp, #16]
 8017c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	f000 814d 	beq.w	8017f36 <_dtoa_r+0xb2e>
 8017c9c:	2300      	movs	r3, #0
 8017c9e:	4631      	mov	r1, r6
 8017ca0:	220a      	movs	r2, #10
 8017ca2:	4620      	mov	r0, r4
 8017ca4:	f000 fd20 	bl	80186e8 <__multadd>
 8017ca8:	9b02      	ldr	r3, [sp, #8]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	4606      	mov	r6, r0
 8017cae:	dc4f      	bgt.n	8017d50 <_dtoa_r+0x948>
 8017cb0:	9b06      	ldr	r3, [sp, #24]
 8017cb2:	2b02      	cmp	r3, #2
 8017cb4:	dd4c      	ble.n	8017d50 <_dtoa_r+0x948>
 8017cb6:	e011      	b.n	8017cdc <_dtoa_r+0x8d4>
 8017cb8:	d0c9      	beq.n	8017c4e <_dtoa_r+0x846>
 8017cba:	9a05      	ldr	r2, [sp, #20]
 8017cbc:	331c      	adds	r3, #28
 8017cbe:	441a      	add	r2, r3
 8017cc0:	9205      	str	r2, [sp, #20]
 8017cc2:	441d      	add	r5, r3
 8017cc4:	4498      	add	r8, r3
 8017cc6:	e7c2      	b.n	8017c4e <_dtoa_r+0x846>
 8017cc8:	4603      	mov	r3, r0
 8017cca:	e7f6      	b.n	8017cba <_dtoa_r+0x8b2>
 8017ccc:	f1b9 0f00 	cmp.w	r9, #0
 8017cd0:	dc38      	bgt.n	8017d44 <_dtoa_r+0x93c>
 8017cd2:	9b06      	ldr	r3, [sp, #24]
 8017cd4:	2b02      	cmp	r3, #2
 8017cd6:	dd35      	ble.n	8017d44 <_dtoa_r+0x93c>
 8017cd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8017cdc:	9b02      	ldr	r3, [sp, #8]
 8017cde:	b963      	cbnz	r3, 8017cfa <_dtoa_r+0x8f2>
 8017ce0:	4639      	mov	r1, r7
 8017ce2:	2205      	movs	r2, #5
 8017ce4:	4620      	mov	r0, r4
 8017ce6:	f000 fcff 	bl	80186e8 <__multadd>
 8017cea:	4601      	mov	r1, r0
 8017cec:	4607      	mov	r7, r0
 8017cee:	9804      	ldr	r0, [sp, #16]
 8017cf0:	f000 ff02 	bl	8018af8 <__mcmp>
 8017cf4:	2800      	cmp	r0, #0
 8017cf6:	f73f adcc 	bgt.w	8017892 <_dtoa_r+0x48a>
 8017cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cfc:	465d      	mov	r5, fp
 8017cfe:	ea6f 0a03 	mvn.w	sl, r3
 8017d02:	f04f 0900 	mov.w	r9, #0
 8017d06:	4639      	mov	r1, r7
 8017d08:	4620      	mov	r0, r4
 8017d0a:	f000 fcd6 	bl	80186ba <_Bfree>
 8017d0e:	2e00      	cmp	r6, #0
 8017d10:	f43f aeb7 	beq.w	8017a82 <_dtoa_r+0x67a>
 8017d14:	f1b9 0f00 	cmp.w	r9, #0
 8017d18:	d005      	beq.n	8017d26 <_dtoa_r+0x91e>
 8017d1a:	45b1      	cmp	r9, r6
 8017d1c:	d003      	beq.n	8017d26 <_dtoa_r+0x91e>
 8017d1e:	4649      	mov	r1, r9
 8017d20:	4620      	mov	r0, r4
 8017d22:	f000 fcca 	bl	80186ba <_Bfree>
 8017d26:	4631      	mov	r1, r6
 8017d28:	4620      	mov	r0, r4
 8017d2a:	f000 fcc6 	bl	80186ba <_Bfree>
 8017d2e:	e6a8      	b.n	8017a82 <_dtoa_r+0x67a>
 8017d30:	2700      	movs	r7, #0
 8017d32:	463e      	mov	r6, r7
 8017d34:	e7e1      	b.n	8017cfa <_dtoa_r+0x8f2>
 8017d36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017d3a:	463e      	mov	r6, r7
 8017d3c:	e5a9      	b.n	8017892 <_dtoa_r+0x48a>
 8017d3e:	bf00      	nop
 8017d40:	40240000 	.word	0x40240000
 8017d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d46:	f8cd 9008 	str.w	r9, [sp, #8]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	f000 80fa 	beq.w	8017f44 <_dtoa_r+0xb3c>
 8017d50:	2d00      	cmp	r5, #0
 8017d52:	dd05      	ble.n	8017d60 <_dtoa_r+0x958>
 8017d54:	4631      	mov	r1, r6
 8017d56:	462a      	mov	r2, r5
 8017d58:	4620      	mov	r0, r4
 8017d5a:	f000 fe79 	bl	8018a50 <__lshift>
 8017d5e:	4606      	mov	r6, r0
 8017d60:	9b07      	ldr	r3, [sp, #28]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d04c      	beq.n	8017e00 <_dtoa_r+0x9f8>
 8017d66:	6871      	ldr	r1, [r6, #4]
 8017d68:	4620      	mov	r0, r4
 8017d6a:	f000 fc72 	bl	8018652 <_Balloc>
 8017d6e:	6932      	ldr	r2, [r6, #16]
 8017d70:	3202      	adds	r2, #2
 8017d72:	4605      	mov	r5, r0
 8017d74:	0092      	lsls	r2, r2, #2
 8017d76:	f106 010c 	add.w	r1, r6, #12
 8017d7a:	300c      	adds	r0, #12
 8017d7c:	f000 fc5e 	bl	801863c <memcpy>
 8017d80:	2201      	movs	r2, #1
 8017d82:	4629      	mov	r1, r5
 8017d84:	4620      	mov	r0, r4
 8017d86:	f000 fe63 	bl	8018a50 <__lshift>
 8017d8a:	9b00      	ldr	r3, [sp, #0]
 8017d8c:	f8cd b014 	str.w	fp, [sp, #20]
 8017d90:	f003 0301 	and.w	r3, r3, #1
 8017d94:	46b1      	mov	r9, r6
 8017d96:	9307      	str	r3, [sp, #28]
 8017d98:	4606      	mov	r6, r0
 8017d9a:	4639      	mov	r1, r7
 8017d9c:	9804      	ldr	r0, [sp, #16]
 8017d9e:	f7ff faa5 	bl	80172ec <quorem>
 8017da2:	4649      	mov	r1, r9
 8017da4:	4605      	mov	r5, r0
 8017da6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017daa:	9804      	ldr	r0, [sp, #16]
 8017dac:	f000 fea4 	bl	8018af8 <__mcmp>
 8017db0:	4632      	mov	r2, r6
 8017db2:	9000      	str	r0, [sp, #0]
 8017db4:	4639      	mov	r1, r7
 8017db6:	4620      	mov	r0, r4
 8017db8:	f000 feb8 	bl	8018b2c <__mdiff>
 8017dbc:	68c3      	ldr	r3, [r0, #12]
 8017dbe:	4602      	mov	r2, r0
 8017dc0:	bb03      	cbnz	r3, 8017e04 <_dtoa_r+0x9fc>
 8017dc2:	4601      	mov	r1, r0
 8017dc4:	9008      	str	r0, [sp, #32]
 8017dc6:	9804      	ldr	r0, [sp, #16]
 8017dc8:	f000 fe96 	bl	8018af8 <__mcmp>
 8017dcc:	9a08      	ldr	r2, [sp, #32]
 8017dce:	4603      	mov	r3, r0
 8017dd0:	4611      	mov	r1, r2
 8017dd2:	4620      	mov	r0, r4
 8017dd4:	9308      	str	r3, [sp, #32]
 8017dd6:	f000 fc70 	bl	80186ba <_Bfree>
 8017dda:	9b08      	ldr	r3, [sp, #32]
 8017ddc:	b9a3      	cbnz	r3, 8017e08 <_dtoa_r+0xa00>
 8017dde:	9a06      	ldr	r2, [sp, #24]
 8017de0:	b992      	cbnz	r2, 8017e08 <_dtoa_r+0xa00>
 8017de2:	9a07      	ldr	r2, [sp, #28]
 8017de4:	b982      	cbnz	r2, 8017e08 <_dtoa_r+0xa00>
 8017de6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017dea:	d029      	beq.n	8017e40 <_dtoa_r+0xa38>
 8017dec:	9b00      	ldr	r3, [sp, #0]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	dd01      	ble.n	8017df6 <_dtoa_r+0x9ee>
 8017df2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8017df6:	9b05      	ldr	r3, [sp, #20]
 8017df8:	1c5d      	adds	r5, r3, #1
 8017dfa:	f883 8000 	strb.w	r8, [r3]
 8017dfe:	e782      	b.n	8017d06 <_dtoa_r+0x8fe>
 8017e00:	4630      	mov	r0, r6
 8017e02:	e7c2      	b.n	8017d8a <_dtoa_r+0x982>
 8017e04:	2301      	movs	r3, #1
 8017e06:	e7e3      	b.n	8017dd0 <_dtoa_r+0x9c8>
 8017e08:	9a00      	ldr	r2, [sp, #0]
 8017e0a:	2a00      	cmp	r2, #0
 8017e0c:	db04      	blt.n	8017e18 <_dtoa_r+0xa10>
 8017e0e:	d125      	bne.n	8017e5c <_dtoa_r+0xa54>
 8017e10:	9a06      	ldr	r2, [sp, #24]
 8017e12:	bb1a      	cbnz	r2, 8017e5c <_dtoa_r+0xa54>
 8017e14:	9a07      	ldr	r2, [sp, #28]
 8017e16:	bb0a      	cbnz	r2, 8017e5c <_dtoa_r+0xa54>
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	ddec      	ble.n	8017df6 <_dtoa_r+0x9ee>
 8017e1c:	2201      	movs	r2, #1
 8017e1e:	9904      	ldr	r1, [sp, #16]
 8017e20:	4620      	mov	r0, r4
 8017e22:	f000 fe15 	bl	8018a50 <__lshift>
 8017e26:	4639      	mov	r1, r7
 8017e28:	9004      	str	r0, [sp, #16]
 8017e2a:	f000 fe65 	bl	8018af8 <__mcmp>
 8017e2e:	2800      	cmp	r0, #0
 8017e30:	dc03      	bgt.n	8017e3a <_dtoa_r+0xa32>
 8017e32:	d1e0      	bne.n	8017df6 <_dtoa_r+0x9ee>
 8017e34:	f018 0f01 	tst.w	r8, #1
 8017e38:	d0dd      	beq.n	8017df6 <_dtoa_r+0x9ee>
 8017e3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e3e:	d1d8      	bne.n	8017df2 <_dtoa_r+0x9ea>
 8017e40:	9b05      	ldr	r3, [sp, #20]
 8017e42:	9a05      	ldr	r2, [sp, #20]
 8017e44:	1c5d      	adds	r5, r3, #1
 8017e46:	2339      	movs	r3, #57	; 0x39
 8017e48:	7013      	strb	r3, [r2, #0]
 8017e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017e4e:	2b39      	cmp	r3, #57	; 0x39
 8017e50:	f105 32ff 	add.w	r2, r5, #4294967295
 8017e54:	d04f      	beq.n	8017ef6 <_dtoa_r+0xaee>
 8017e56:	3301      	adds	r3, #1
 8017e58:	7013      	strb	r3, [r2, #0]
 8017e5a:	e754      	b.n	8017d06 <_dtoa_r+0x8fe>
 8017e5c:	9a05      	ldr	r2, [sp, #20]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	f102 0501 	add.w	r5, r2, #1
 8017e64:	dd06      	ble.n	8017e74 <_dtoa_r+0xa6c>
 8017e66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017e6a:	d0e9      	beq.n	8017e40 <_dtoa_r+0xa38>
 8017e6c:	f108 0801 	add.w	r8, r8, #1
 8017e70:	9b05      	ldr	r3, [sp, #20]
 8017e72:	e7c2      	b.n	8017dfa <_dtoa_r+0x9f2>
 8017e74:	9a02      	ldr	r2, [sp, #8]
 8017e76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8017e7a:	eba5 030b 	sub.w	r3, r5, fp
 8017e7e:	4293      	cmp	r3, r2
 8017e80:	d021      	beq.n	8017ec6 <_dtoa_r+0xabe>
 8017e82:	2300      	movs	r3, #0
 8017e84:	220a      	movs	r2, #10
 8017e86:	9904      	ldr	r1, [sp, #16]
 8017e88:	4620      	mov	r0, r4
 8017e8a:	f000 fc2d 	bl	80186e8 <__multadd>
 8017e8e:	45b1      	cmp	r9, r6
 8017e90:	9004      	str	r0, [sp, #16]
 8017e92:	f04f 0300 	mov.w	r3, #0
 8017e96:	f04f 020a 	mov.w	r2, #10
 8017e9a:	4649      	mov	r1, r9
 8017e9c:	4620      	mov	r0, r4
 8017e9e:	d105      	bne.n	8017eac <_dtoa_r+0xaa4>
 8017ea0:	f000 fc22 	bl	80186e8 <__multadd>
 8017ea4:	4681      	mov	r9, r0
 8017ea6:	4606      	mov	r6, r0
 8017ea8:	9505      	str	r5, [sp, #20]
 8017eaa:	e776      	b.n	8017d9a <_dtoa_r+0x992>
 8017eac:	f000 fc1c 	bl	80186e8 <__multadd>
 8017eb0:	4631      	mov	r1, r6
 8017eb2:	4681      	mov	r9, r0
 8017eb4:	2300      	movs	r3, #0
 8017eb6:	220a      	movs	r2, #10
 8017eb8:	4620      	mov	r0, r4
 8017eba:	f000 fc15 	bl	80186e8 <__multadd>
 8017ebe:	4606      	mov	r6, r0
 8017ec0:	e7f2      	b.n	8017ea8 <_dtoa_r+0xaa0>
 8017ec2:	f04f 0900 	mov.w	r9, #0
 8017ec6:	2201      	movs	r2, #1
 8017ec8:	9904      	ldr	r1, [sp, #16]
 8017eca:	4620      	mov	r0, r4
 8017ecc:	f000 fdc0 	bl	8018a50 <__lshift>
 8017ed0:	4639      	mov	r1, r7
 8017ed2:	9004      	str	r0, [sp, #16]
 8017ed4:	f000 fe10 	bl	8018af8 <__mcmp>
 8017ed8:	2800      	cmp	r0, #0
 8017eda:	dcb6      	bgt.n	8017e4a <_dtoa_r+0xa42>
 8017edc:	d102      	bne.n	8017ee4 <_dtoa_r+0xadc>
 8017ede:	f018 0f01 	tst.w	r8, #1
 8017ee2:	d1b2      	bne.n	8017e4a <_dtoa_r+0xa42>
 8017ee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ee8:	2b30      	cmp	r3, #48	; 0x30
 8017eea:	f105 32ff 	add.w	r2, r5, #4294967295
 8017eee:	f47f af0a 	bne.w	8017d06 <_dtoa_r+0x8fe>
 8017ef2:	4615      	mov	r5, r2
 8017ef4:	e7f6      	b.n	8017ee4 <_dtoa_r+0xadc>
 8017ef6:	4593      	cmp	fp, r2
 8017ef8:	d105      	bne.n	8017f06 <_dtoa_r+0xafe>
 8017efa:	2331      	movs	r3, #49	; 0x31
 8017efc:	f10a 0a01 	add.w	sl, sl, #1
 8017f00:	f88b 3000 	strb.w	r3, [fp]
 8017f04:	e6ff      	b.n	8017d06 <_dtoa_r+0x8fe>
 8017f06:	4615      	mov	r5, r2
 8017f08:	e79f      	b.n	8017e4a <_dtoa_r+0xa42>
 8017f0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017f70 <_dtoa_r+0xb68>
 8017f0e:	e007      	b.n	8017f20 <_dtoa_r+0xb18>
 8017f10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017f74 <_dtoa_r+0xb6c>
 8017f16:	b11b      	cbz	r3, 8017f20 <_dtoa_r+0xb18>
 8017f18:	f10b 0308 	add.w	r3, fp, #8
 8017f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f1e:	6013      	str	r3, [r2, #0]
 8017f20:	4658      	mov	r0, fp
 8017f22:	b017      	add	sp, #92	; 0x5c
 8017f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f28:	9b06      	ldr	r3, [sp, #24]
 8017f2a:	2b01      	cmp	r3, #1
 8017f2c:	f77f ae35 	ble.w	8017b9a <_dtoa_r+0x792>
 8017f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f32:	9307      	str	r3, [sp, #28]
 8017f34:	e649      	b.n	8017bca <_dtoa_r+0x7c2>
 8017f36:	9b02      	ldr	r3, [sp, #8]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	dc03      	bgt.n	8017f44 <_dtoa_r+0xb3c>
 8017f3c:	9b06      	ldr	r3, [sp, #24]
 8017f3e:	2b02      	cmp	r3, #2
 8017f40:	f73f aecc 	bgt.w	8017cdc <_dtoa_r+0x8d4>
 8017f44:	465d      	mov	r5, fp
 8017f46:	4639      	mov	r1, r7
 8017f48:	9804      	ldr	r0, [sp, #16]
 8017f4a:	f7ff f9cf 	bl	80172ec <quorem>
 8017f4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017f52:	f805 8b01 	strb.w	r8, [r5], #1
 8017f56:	9a02      	ldr	r2, [sp, #8]
 8017f58:	eba5 030b 	sub.w	r3, r5, fp
 8017f5c:	429a      	cmp	r2, r3
 8017f5e:	ddb0      	ble.n	8017ec2 <_dtoa_r+0xaba>
 8017f60:	2300      	movs	r3, #0
 8017f62:	220a      	movs	r2, #10
 8017f64:	9904      	ldr	r1, [sp, #16]
 8017f66:	4620      	mov	r0, r4
 8017f68:	f000 fbbe 	bl	80186e8 <__multadd>
 8017f6c:	9004      	str	r0, [sp, #16]
 8017f6e:	e7ea      	b.n	8017f46 <_dtoa_r+0xb3e>
 8017f70:	0801a3f3 	.word	0x0801a3f3
 8017f74:	0801a2b8 	.word	0x0801a2b8

08017f78 <rshift>:
 8017f78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f7a:	6906      	ldr	r6, [r0, #16]
 8017f7c:	114b      	asrs	r3, r1, #5
 8017f7e:	429e      	cmp	r6, r3
 8017f80:	f100 0414 	add.w	r4, r0, #20
 8017f84:	dd30      	ble.n	8017fe8 <rshift+0x70>
 8017f86:	f011 011f 	ands.w	r1, r1, #31
 8017f8a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017f8e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017f92:	d108      	bne.n	8017fa6 <rshift+0x2e>
 8017f94:	4621      	mov	r1, r4
 8017f96:	42b2      	cmp	r2, r6
 8017f98:	460b      	mov	r3, r1
 8017f9a:	d211      	bcs.n	8017fc0 <rshift+0x48>
 8017f9c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017fa0:	f841 3b04 	str.w	r3, [r1], #4
 8017fa4:	e7f7      	b.n	8017f96 <rshift+0x1e>
 8017fa6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017faa:	f1c1 0c20 	rsb	ip, r1, #32
 8017fae:	40cd      	lsrs	r5, r1
 8017fb0:	3204      	adds	r2, #4
 8017fb2:	4623      	mov	r3, r4
 8017fb4:	42b2      	cmp	r2, r6
 8017fb6:	4617      	mov	r7, r2
 8017fb8:	d30c      	bcc.n	8017fd4 <rshift+0x5c>
 8017fba:	601d      	str	r5, [r3, #0]
 8017fbc:	b105      	cbz	r5, 8017fc0 <rshift+0x48>
 8017fbe:	3304      	adds	r3, #4
 8017fc0:	1b1a      	subs	r2, r3, r4
 8017fc2:	42a3      	cmp	r3, r4
 8017fc4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017fc8:	bf08      	it	eq
 8017fca:	2300      	moveq	r3, #0
 8017fcc:	6102      	str	r2, [r0, #16]
 8017fce:	bf08      	it	eq
 8017fd0:	6143      	streq	r3, [r0, #20]
 8017fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017fd4:	683f      	ldr	r7, [r7, #0]
 8017fd6:	fa07 f70c 	lsl.w	r7, r7, ip
 8017fda:	433d      	orrs	r5, r7
 8017fdc:	f843 5b04 	str.w	r5, [r3], #4
 8017fe0:	f852 5b04 	ldr.w	r5, [r2], #4
 8017fe4:	40cd      	lsrs	r5, r1
 8017fe6:	e7e5      	b.n	8017fb4 <rshift+0x3c>
 8017fe8:	4623      	mov	r3, r4
 8017fea:	e7e9      	b.n	8017fc0 <rshift+0x48>

08017fec <__hexdig_fun>:
 8017fec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017ff0:	2b09      	cmp	r3, #9
 8017ff2:	d802      	bhi.n	8017ffa <__hexdig_fun+0xe>
 8017ff4:	3820      	subs	r0, #32
 8017ff6:	b2c0      	uxtb	r0, r0
 8017ff8:	4770      	bx	lr
 8017ffa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017ffe:	2b05      	cmp	r3, #5
 8018000:	d801      	bhi.n	8018006 <__hexdig_fun+0x1a>
 8018002:	3847      	subs	r0, #71	; 0x47
 8018004:	e7f7      	b.n	8017ff6 <__hexdig_fun+0xa>
 8018006:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801800a:	2b05      	cmp	r3, #5
 801800c:	d801      	bhi.n	8018012 <__hexdig_fun+0x26>
 801800e:	3827      	subs	r0, #39	; 0x27
 8018010:	e7f1      	b.n	8017ff6 <__hexdig_fun+0xa>
 8018012:	2000      	movs	r0, #0
 8018014:	4770      	bx	lr

08018016 <__gethex>:
 8018016:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801801a:	b08b      	sub	sp, #44	; 0x2c
 801801c:	468a      	mov	sl, r1
 801801e:	9002      	str	r0, [sp, #8]
 8018020:	9816      	ldr	r0, [sp, #88]	; 0x58
 8018022:	9306      	str	r3, [sp, #24]
 8018024:	4690      	mov	r8, r2
 8018026:	f000 fadf 	bl	80185e8 <__localeconv_l>
 801802a:	6803      	ldr	r3, [r0, #0]
 801802c:	9303      	str	r3, [sp, #12]
 801802e:	4618      	mov	r0, r3
 8018030:	f7e8 f8e6 	bl	8000200 <strlen>
 8018034:	9b03      	ldr	r3, [sp, #12]
 8018036:	9001      	str	r0, [sp, #4]
 8018038:	4403      	add	r3, r0
 801803a:	f04f 0b00 	mov.w	fp, #0
 801803e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8018042:	9307      	str	r3, [sp, #28]
 8018044:	f8da 3000 	ldr.w	r3, [sl]
 8018048:	3302      	adds	r3, #2
 801804a:	461f      	mov	r7, r3
 801804c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8018050:	2830      	cmp	r0, #48	; 0x30
 8018052:	d06c      	beq.n	801812e <__gethex+0x118>
 8018054:	f7ff ffca 	bl	8017fec <__hexdig_fun>
 8018058:	4604      	mov	r4, r0
 801805a:	2800      	cmp	r0, #0
 801805c:	d16a      	bne.n	8018134 <__gethex+0x11e>
 801805e:	9a01      	ldr	r2, [sp, #4]
 8018060:	9903      	ldr	r1, [sp, #12]
 8018062:	4638      	mov	r0, r7
 8018064:	f001 fc40 	bl	80198e8 <strncmp>
 8018068:	2800      	cmp	r0, #0
 801806a:	d166      	bne.n	801813a <__gethex+0x124>
 801806c:	9b01      	ldr	r3, [sp, #4]
 801806e:	5cf8      	ldrb	r0, [r7, r3]
 8018070:	18fe      	adds	r6, r7, r3
 8018072:	f7ff ffbb 	bl	8017fec <__hexdig_fun>
 8018076:	2800      	cmp	r0, #0
 8018078:	d062      	beq.n	8018140 <__gethex+0x12a>
 801807a:	4633      	mov	r3, r6
 801807c:	7818      	ldrb	r0, [r3, #0]
 801807e:	2830      	cmp	r0, #48	; 0x30
 8018080:	461f      	mov	r7, r3
 8018082:	f103 0301 	add.w	r3, r3, #1
 8018086:	d0f9      	beq.n	801807c <__gethex+0x66>
 8018088:	f7ff ffb0 	bl	8017fec <__hexdig_fun>
 801808c:	fab0 f580 	clz	r5, r0
 8018090:	096d      	lsrs	r5, r5, #5
 8018092:	4634      	mov	r4, r6
 8018094:	f04f 0b01 	mov.w	fp, #1
 8018098:	463a      	mov	r2, r7
 801809a:	4616      	mov	r6, r2
 801809c:	3201      	adds	r2, #1
 801809e:	7830      	ldrb	r0, [r6, #0]
 80180a0:	f7ff ffa4 	bl	8017fec <__hexdig_fun>
 80180a4:	2800      	cmp	r0, #0
 80180a6:	d1f8      	bne.n	801809a <__gethex+0x84>
 80180a8:	9a01      	ldr	r2, [sp, #4]
 80180aa:	9903      	ldr	r1, [sp, #12]
 80180ac:	4630      	mov	r0, r6
 80180ae:	f001 fc1b 	bl	80198e8 <strncmp>
 80180b2:	b950      	cbnz	r0, 80180ca <__gethex+0xb4>
 80180b4:	b954      	cbnz	r4, 80180cc <__gethex+0xb6>
 80180b6:	9b01      	ldr	r3, [sp, #4]
 80180b8:	18f4      	adds	r4, r6, r3
 80180ba:	4622      	mov	r2, r4
 80180bc:	4616      	mov	r6, r2
 80180be:	3201      	adds	r2, #1
 80180c0:	7830      	ldrb	r0, [r6, #0]
 80180c2:	f7ff ff93 	bl	8017fec <__hexdig_fun>
 80180c6:	2800      	cmp	r0, #0
 80180c8:	d1f8      	bne.n	80180bc <__gethex+0xa6>
 80180ca:	b10c      	cbz	r4, 80180d0 <__gethex+0xba>
 80180cc:	1ba4      	subs	r4, r4, r6
 80180ce:	00a4      	lsls	r4, r4, #2
 80180d0:	7833      	ldrb	r3, [r6, #0]
 80180d2:	2b50      	cmp	r3, #80	; 0x50
 80180d4:	d001      	beq.n	80180da <__gethex+0xc4>
 80180d6:	2b70      	cmp	r3, #112	; 0x70
 80180d8:	d140      	bne.n	801815c <__gethex+0x146>
 80180da:	7873      	ldrb	r3, [r6, #1]
 80180dc:	2b2b      	cmp	r3, #43	; 0x2b
 80180de:	d031      	beq.n	8018144 <__gethex+0x12e>
 80180e0:	2b2d      	cmp	r3, #45	; 0x2d
 80180e2:	d033      	beq.n	801814c <__gethex+0x136>
 80180e4:	1c71      	adds	r1, r6, #1
 80180e6:	f04f 0900 	mov.w	r9, #0
 80180ea:	7808      	ldrb	r0, [r1, #0]
 80180ec:	f7ff ff7e 	bl	8017fec <__hexdig_fun>
 80180f0:	1e43      	subs	r3, r0, #1
 80180f2:	b2db      	uxtb	r3, r3
 80180f4:	2b18      	cmp	r3, #24
 80180f6:	d831      	bhi.n	801815c <__gethex+0x146>
 80180f8:	f1a0 0210 	sub.w	r2, r0, #16
 80180fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018100:	f7ff ff74 	bl	8017fec <__hexdig_fun>
 8018104:	1e43      	subs	r3, r0, #1
 8018106:	b2db      	uxtb	r3, r3
 8018108:	2b18      	cmp	r3, #24
 801810a:	d922      	bls.n	8018152 <__gethex+0x13c>
 801810c:	f1b9 0f00 	cmp.w	r9, #0
 8018110:	d000      	beq.n	8018114 <__gethex+0xfe>
 8018112:	4252      	negs	r2, r2
 8018114:	4414      	add	r4, r2
 8018116:	f8ca 1000 	str.w	r1, [sl]
 801811a:	b30d      	cbz	r5, 8018160 <__gethex+0x14a>
 801811c:	f1bb 0f00 	cmp.w	fp, #0
 8018120:	bf0c      	ite	eq
 8018122:	2706      	moveq	r7, #6
 8018124:	2700      	movne	r7, #0
 8018126:	4638      	mov	r0, r7
 8018128:	b00b      	add	sp, #44	; 0x2c
 801812a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801812e:	f10b 0b01 	add.w	fp, fp, #1
 8018132:	e78a      	b.n	801804a <__gethex+0x34>
 8018134:	2500      	movs	r5, #0
 8018136:	462c      	mov	r4, r5
 8018138:	e7ae      	b.n	8018098 <__gethex+0x82>
 801813a:	463e      	mov	r6, r7
 801813c:	2501      	movs	r5, #1
 801813e:	e7c7      	b.n	80180d0 <__gethex+0xba>
 8018140:	4604      	mov	r4, r0
 8018142:	e7fb      	b.n	801813c <__gethex+0x126>
 8018144:	f04f 0900 	mov.w	r9, #0
 8018148:	1cb1      	adds	r1, r6, #2
 801814a:	e7ce      	b.n	80180ea <__gethex+0xd4>
 801814c:	f04f 0901 	mov.w	r9, #1
 8018150:	e7fa      	b.n	8018148 <__gethex+0x132>
 8018152:	230a      	movs	r3, #10
 8018154:	fb03 0202 	mla	r2, r3, r2, r0
 8018158:	3a10      	subs	r2, #16
 801815a:	e7cf      	b.n	80180fc <__gethex+0xe6>
 801815c:	4631      	mov	r1, r6
 801815e:	e7da      	b.n	8018116 <__gethex+0x100>
 8018160:	1bf3      	subs	r3, r6, r7
 8018162:	3b01      	subs	r3, #1
 8018164:	4629      	mov	r1, r5
 8018166:	2b07      	cmp	r3, #7
 8018168:	dc49      	bgt.n	80181fe <__gethex+0x1e8>
 801816a:	9802      	ldr	r0, [sp, #8]
 801816c:	f000 fa71 	bl	8018652 <_Balloc>
 8018170:	9b01      	ldr	r3, [sp, #4]
 8018172:	f100 0914 	add.w	r9, r0, #20
 8018176:	f04f 0b00 	mov.w	fp, #0
 801817a:	f1c3 0301 	rsb	r3, r3, #1
 801817e:	4605      	mov	r5, r0
 8018180:	f8cd 9010 	str.w	r9, [sp, #16]
 8018184:	46da      	mov	sl, fp
 8018186:	9308      	str	r3, [sp, #32]
 8018188:	42b7      	cmp	r7, r6
 801818a:	d33b      	bcc.n	8018204 <__gethex+0x1ee>
 801818c:	9804      	ldr	r0, [sp, #16]
 801818e:	f840 ab04 	str.w	sl, [r0], #4
 8018192:	eba0 0009 	sub.w	r0, r0, r9
 8018196:	1080      	asrs	r0, r0, #2
 8018198:	6128      	str	r0, [r5, #16]
 801819a:	0147      	lsls	r7, r0, #5
 801819c:	4650      	mov	r0, sl
 801819e:	f000 fb1c 	bl	80187da <__hi0bits>
 80181a2:	f8d8 6000 	ldr.w	r6, [r8]
 80181a6:	1a3f      	subs	r7, r7, r0
 80181a8:	42b7      	cmp	r7, r6
 80181aa:	dd64      	ble.n	8018276 <__gethex+0x260>
 80181ac:	1bbf      	subs	r7, r7, r6
 80181ae:	4639      	mov	r1, r7
 80181b0:	4628      	mov	r0, r5
 80181b2:	f000 fe2b 	bl	8018e0c <__any_on>
 80181b6:	4682      	mov	sl, r0
 80181b8:	b178      	cbz	r0, 80181da <__gethex+0x1c4>
 80181ba:	1e7b      	subs	r3, r7, #1
 80181bc:	1159      	asrs	r1, r3, #5
 80181be:	f003 021f 	and.w	r2, r3, #31
 80181c2:	f04f 0a01 	mov.w	sl, #1
 80181c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80181ca:	fa0a f202 	lsl.w	r2, sl, r2
 80181ce:	420a      	tst	r2, r1
 80181d0:	d003      	beq.n	80181da <__gethex+0x1c4>
 80181d2:	4553      	cmp	r3, sl
 80181d4:	dc46      	bgt.n	8018264 <__gethex+0x24e>
 80181d6:	f04f 0a02 	mov.w	sl, #2
 80181da:	4639      	mov	r1, r7
 80181dc:	4628      	mov	r0, r5
 80181de:	f7ff fecb 	bl	8017f78 <rshift>
 80181e2:	443c      	add	r4, r7
 80181e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80181e8:	42a3      	cmp	r3, r4
 80181ea:	da52      	bge.n	8018292 <__gethex+0x27c>
 80181ec:	4629      	mov	r1, r5
 80181ee:	9802      	ldr	r0, [sp, #8]
 80181f0:	f000 fa63 	bl	80186ba <_Bfree>
 80181f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80181f6:	2300      	movs	r3, #0
 80181f8:	6013      	str	r3, [r2, #0]
 80181fa:	27a3      	movs	r7, #163	; 0xa3
 80181fc:	e793      	b.n	8018126 <__gethex+0x110>
 80181fe:	3101      	adds	r1, #1
 8018200:	105b      	asrs	r3, r3, #1
 8018202:	e7b0      	b.n	8018166 <__gethex+0x150>
 8018204:	1e73      	subs	r3, r6, #1
 8018206:	9305      	str	r3, [sp, #20]
 8018208:	9a07      	ldr	r2, [sp, #28]
 801820a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801820e:	4293      	cmp	r3, r2
 8018210:	d018      	beq.n	8018244 <__gethex+0x22e>
 8018212:	f1bb 0f20 	cmp.w	fp, #32
 8018216:	d107      	bne.n	8018228 <__gethex+0x212>
 8018218:	9b04      	ldr	r3, [sp, #16]
 801821a:	f8c3 a000 	str.w	sl, [r3]
 801821e:	3304      	adds	r3, #4
 8018220:	f04f 0a00 	mov.w	sl, #0
 8018224:	9304      	str	r3, [sp, #16]
 8018226:	46d3      	mov	fp, sl
 8018228:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801822c:	f7ff fede 	bl	8017fec <__hexdig_fun>
 8018230:	f000 000f 	and.w	r0, r0, #15
 8018234:	fa00 f00b 	lsl.w	r0, r0, fp
 8018238:	ea4a 0a00 	orr.w	sl, sl, r0
 801823c:	f10b 0b04 	add.w	fp, fp, #4
 8018240:	9b05      	ldr	r3, [sp, #20]
 8018242:	e00d      	b.n	8018260 <__gethex+0x24a>
 8018244:	9b05      	ldr	r3, [sp, #20]
 8018246:	9a08      	ldr	r2, [sp, #32]
 8018248:	4413      	add	r3, r2
 801824a:	42bb      	cmp	r3, r7
 801824c:	d3e1      	bcc.n	8018212 <__gethex+0x1fc>
 801824e:	4618      	mov	r0, r3
 8018250:	9a01      	ldr	r2, [sp, #4]
 8018252:	9903      	ldr	r1, [sp, #12]
 8018254:	9309      	str	r3, [sp, #36]	; 0x24
 8018256:	f001 fb47 	bl	80198e8 <strncmp>
 801825a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801825c:	2800      	cmp	r0, #0
 801825e:	d1d8      	bne.n	8018212 <__gethex+0x1fc>
 8018260:	461e      	mov	r6, r3
 8018262:	e791      	b.n	8018188 <__gethex+0x172>
 8018264:	1eb9      	subs	r1, r7, #2
 8018266:	4628      	mov	r0, r5
 8018268:	f000 fdd0 	bl	8018e0c <__any_on>
 801826c:	2800      	cmp	r0, #0
 801826e:	d0b2      	beq.n	80181d6 <__gethex+0x1c0>
 8018270:	f04f 0a03 	mov.w	sl, #3
 8018274:	e7b1      	b.n	80181da <__gethex+0x1c4>
 8018276:	da09      	bge.n	801828c <__gethex+0x276>
 8018278:	1bf7      	subs	r7, r6, r7
 801827a:	4629      	mov	r1, r5
 801827c:	463a      	mov	r2, r7
 801827e:	9802      	ldr	r0, [sp, #8]
 8018280:	f000 fbe6 	bl	8018a50 <__lshift>
 8018284:	1be4      	subs	r4, r4, r7
 8018286:	4605      	mov	r5, r0
 8018288:	f100 0914 	add.w	r9, r0, #20
 801828c:	f04f 0a00 	mov.w	sl, #0
 8018290:	e7a8      	b.n	80181e4 <__gethex+0x1ce>
 8018292:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018296:	42a0      	cmp	r0, r4
 8018298:	dd6a      	ble.n	8018370 <__gethex+0x35a>
 801829a:	1b04      	subs	r4, r0, r4
 801829c:	42a6      	cmp	r6, r4
 801829e:	dc2e      	bgt.n	80182fe <__gethex+0x2e8>
 80182a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80182a4:	2b02      	cmp	r3, #2
 80182a6:	d022      	beq.n	80182ee <__gethex+0x2d8>
 80182a8:	2b03      	cmp	r3, #3
 80182aa:	d024      	beq.n	80182f6 <__gethex+0x2e0>
 80182ac:	2b01      	cmp	r3, #1
 80182ae:	d115      	bne.n	80182dc <__gethex+0x2c6>
 80182b0:	42a6      	cmp	r6, r4
 80182b2:	d113      	bne.n	80182dc <__gethex+0x2c6>
 80182b4:	2e01      	cmp	r6, #1
 80182b6:	dc0b      	bgt.n	80182d0 <__gethex+0x2ba>
 80182b8:	9a06      	ldr	r2, [sp, #24]
 80182ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80182be:	6013      	str	r3, [r2, #0]
 80182c0:	2301      	movs	r3, #1
 80182c2:	612b      	str	r3, [r5, #16]
 80182c4:	f8c9 3000 	str.w	r3, [r9]
 80182c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80182ca:	2762      	movs	r7, #98	; 0x62
 80182cc:	601d      	str	r5, [r3, #0]
 80182ce:	e72a      	b.n	8018126 <__gethex+0x110>
 80182d0:	1e71      	subs	r1, r6, #1
 80182d2:	4628      	mov	r0, r5
 80182d4:	f000 fd9a 	bl	8018e0c <__any_on>
 80182d8:	2800      	cmp	r0, #0
 80182da:	d1ed      	bne.n	80182b8 <__gethex+0x2a2>
 80182dc:	4629      	mov	r1, r5
 80182de:	9802      	ldr	r0, [sp, #8]
 80182e0:	f000 f9eb 	bl	80186ba <_Bfree>
 80182e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80182e6:	2300      	movs	r3, #0
 80182e8:	6013      	str	r3, [r2, #0]
 80182ea:	2750      	movs	r7, #80	; 0x50
 80182ec:	e71b      	b.n	8018126 <__gethex+0x110>
 80182ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d0e1      	beq.n	80182b8 <__gethex+0x2a2>
 80182f4:	e7f2      	b.n	80182dc <__gethex+0x2c6>
 80182f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d1dd      	bne.n	80182b8 <__gethex+0x2a2>
 80182fc:	e7ee      	b.n	80182dc <__gethex+0x2c6>
 80182fe:	1e67      	subs	r7, r4, #1
 8018300:	f1ba 0f00 	cmp.w	sl, #0
 8018304:	d131      	bne.n	801836a <__gethex+0x354>
 8018306:	b127      	cbz	r7, 8018312 <__gethex+0x2fc>
 8018308:	4639      	mov	r1, r7
 801830a:	4628      	mov	r0, r5
 801830c:	f000 fd7e 	bl	8018e0c <__any_on>
 8018310:	4682      	mov	sl, r0
 8018312:	117a      	asrs	r2, r7, #5
 8018314:	2301      	movs	r3, #1
 8018316:	f007 071f 	and.w	r7, r7, #31
 801831a:	fa03 f707 	lsl.w	r7, r3, r7
 801831e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8018322:	4621      	mov	r1, r4
 8018324:	421f      	tst	r7, r3
 8018326:	4628      	mov	r0, r5
 8018328:	bf18      	it	ne
 801832a:	f04a 0a02 	orrne.w	sl, sl, #2
 801832e:	1b36      	subs	r6, r6, r4
 8018330:	f7ff fe22 	bl	8017f78 <rshift>
 8018334:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8018338:	2702      	movs	r7, #2
 801833a:	f1ba 0f00 	cmp.w	sl, #0
 801833e:	d048      	beq.n	80183d2 <__gethex+0x3bc>
 8018340:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018344:	2b02      	cmp	r3, #2
 8018346:	d015      	beq.n	8018374 <__gethex+0x35e>
 8018348:	2b03      	cmp	r3, #3
 801834a:	d017      	beq.n	801837c <__gethex+0x366>
 801834c:	2b01      	cmp	r3, #1
 801834e:	d109      	bne.n	8018364 <__gethex+0x34e>
 8018350:	f01a 0f02 	tst.w	sl, #2
 8018354:	d006      	beq.n	8018364 <__gethex+0x34e>
 8018356:	f8d9 3000 	ldr.w	r3, [r9]
 801835a:	ea4a 0a03 	orr.w	sl, sl, r3
 801835e:	f01a 0f01 	tst.w	sl, #1
 8018362:	d10e      	bne.n	8018382 <__gethex+0x36c>
 8018364:	f047 0710 	orr.w	r7, r7, #16
 8018368:	e033      	b.n	80183d2 <__gethex+0x3bc>
 801836a:	f04f 0a01 	mov.w	sl, #1
 801836e:	e7d0      	b.n	8018312 <__gethex+0x2fc>
 8018370:	2701      	movs	r7, #1
 8018372:	e7e2      	b.n	801833a <__gethex+0x324>
 8018374:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018376:	f1c3 0301 	rsb	r3, r3, #1
 801837a:	9315      	str	r3, [sp, #84]	; 0x54
 801837c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801837e:	2b00      	cmp	r3, #0
 8018380:	d0f0      	beq.n	8018364 <__gethex+0x34e>
 8018382:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8018386:	f105 0314 	add.w	r3, r5, #20
 801838a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801838e:	eb03 010a 	add.w	r1, r3, sl
 8018392:	f04f 0c00 	mov.w	ip, #0
 8018396:	4618      	mov	r0, r3
 8018398:	f853 2b04 	ldr.w	r2, [r3], #4
 801839c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80183a0:	d01c      	beq.n	80183dc <__gethex+0x3c6>
 80183a2:	3201      	adds	r2, #1
 80183a4:	6002      	str	r2, [r0, #0]
 80183a6:	2f02      	cmp	r7, #2
 80183a8:	f105 0314 	add.w	r3, r5, #20
 80183ac:	d138      	bne.n	8018420 <__gethex+0x40a>
 80183ae:	f8d8 2000 	ldr.w	r2, [r8]
 80183b2:	3a01      	subs	r2, #1
 80183b4:	42b2      	cmp	r2, r6
 80183b6:	d10a      	bne.n	80183ce <__gethex+0x3b8>
 80183b8:	1171      	asrs	r1, r6, #5
 80183ba:	2201      	movs	r2, #1
 80183bc:	f006 061f 	and.w	r6, r6, #31
 80183c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80183c4:	fa02 f606 	lsl.w	r6, r2, r6
 80183c8:	421e      	tst	r6, r3
 80183ca:	bf18      	it	ne
 80183cc:	4617      	movne	r7, r2
 80183ce:	f047 0720 	orr.w	r7, r7, #32
 80183d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80183d4:	601d      	str	r5, [r3, #0]
 80183d6:	9b06      	ldr	r3, [sp, #24]
 80183d8:	601c      	str	r4, [r3, #0]
 80183da:	e6a4      	b.n	8018126 <__gethex+0x110>
 80183dc:	4299      	cmp	r1, r3
 80183de:	f843 cc04 	str.w	ip, [r3, #-4]
 80183e2:	d8d8      	bhi.n	8018396 <__gethex+0x380>
 80183e4:	68ab      	ldr	r3, [r5, #8]
 80183e6:	4599      	cmp	r9, r3
 80183e8:	db12      	blt.n	8018410 <__gethex+0x3fa>
 80183ea:	6869      	ldr	r1, [r5, #4]
 80183ec:	9802      	ldr	r0, [sp, #8]
 80183ee:	3101      	adds	r1, #1
 80183f0:	f000 f92f 	bl	8018652 <_Balloc>
 80183f4:	692a      	ldr	r2, [r5, #16]
 80183f6:	3202      	adds	r2, #2
 80183f8:	f105 010c 	add.w	r1, r5, #12
 80183fc:	4683      	mov	fp, r0
 80183fe:	0092      	lsls	r2, r2, #2
 8018400:	300c      	adds	r0, #12
 8018402:	f000 f91b 	bl	801863c <memcpy>
 8018406:	4629      	mov	r1, r5
 8018408:	9802      	ldr	r0, [sp, #8]
 801840a:	f000 f956 	bl	80186ba <_Bfree>
 801840e:	465d      	mov	r5, fp
 8018410:	692b      	ldr	r3, [r5, #16]
 8018412:	1c5a      	adds	r2, r3, #1
 8018414:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8018418:	612a      	str	r2, [r5, #16]
 801841a:	2201      	movs	r2, #1
 801841c:	615a      	str	r2, [r3, #20]
 801841e:	e7c2      	b.n	80183a6 <__gethex+0x390>
 8018420:	692a      	ldr	r2, [r5, #16]
 8018422:	454a      	cmp	r2, r9
 8018424:	dd0b      	ble.n	801843e <__gethex+0x428>
 8018426:	2101      	movs	r1, #1
 8018428:	4628      	mov	r0, r5
 801842a:	f7ff fda5 	bl	8017f78 <rshift>
 801842e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018432:	3401      	adds	r4, #1
 8018434:	42a3      	cmp	r3, r4
 8018436:	f6ff aed9 	blt.w	80181ec <__gethex+0x1d6>
 801843a:	2701      	movs	r7, #1
 801843c:	e7c7      	b.n	80183ce <__gethex+0x3b8>
 801843e:	f016 061f 	ands.w	r6, r6, #31
 8018442:	d0fa      	beq.n	801843a <__gethex+0x424>
 8018444:	449a      	add	sl, r3
 8018446:	f1c6 0620 	rsb	r6, r6, #32
 801844a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801844e:	f000 f9c4 	bl	80187da <__hi0bits>
 8018452:	42b0      	cmp	r0, r6
 8018454:	dbe7      	blt.n	8018426 <__gethex+0x410>
 8018456:	e7f0      	b.n	801843a <__gethex+0x424>

08018458 <L_shift>:
 8018458:	f1c2 0208 	rsb	r2, r2, #8
 801845c:	0092      	lsls	r2, r2, #2
 801845e:	b570      	push	{r4, r5, r6, lr}
 8018460:	f1c2 0620 	rsb	r6, r2, #32
 8018464:	6843      	ldr	r3, [r0, #4]
 8018466:	6804      	ldr	r4, [r0, #0]
 8018468:	fa03 f506 	lsl.w	r5, r3, r6
 801846c:	432c      	orrs	r4, r5
 801846e:	40d3      	lsrs	r3, r2
 8018470:	6004      	str	r4, [r0, #0]
 8018472:	f840 3f04 	str.w	r3, [r0, #4]!
 8018476:	4288      	cmp	r0, r1
 8018478:	d3f4      	bcc.n	8018464 <L_shift+0xc>
 801847a:	bd70      	pop	{r4, r5, r6, pc}

0801847c <__match>:
 801847c:	b530      	push	{r4, r5, lr}
 801847e:	6803      	ldr	r3, [r0, #0]
 8018480:	3301      	adds	r3, #1
 8018482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018486:	b914      	cbnz	r4, 801848e <__match+0x12>
 8018488:	6003      	str	r3, [r0, #0]
 801848a:	2001      	movs	r0, #1
 801848c:	bd30      	pop	{r4, r5, pc}
 801848e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018492:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018496:	2d19      	cmp	r5, #25
 8018498:	bf98      	it	ls
 801849a:	3220      	addls	r2, #32
 801849c:	42a2      	cmp	r2, r4
 801849e:	d0f0      	beq.n	8018482 <__match+0x6>
 80184a0:	2000      	movs	r0, #0
 80184a2:	e7f3      	b.n	801848c <__match+0x10>

080184a4 <__hexnan>:
 80184a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184a8:	680b      	ldr	r3, [r1, #0]
 80184aa:	6801      	ldr	r1, [r0, #0]
 80184ac:	115f      	asrs	r7, r3, #5
 80184ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80184b2:	f013 031f 	ands.w	r3, r3, #31
 80184b6:	b087      	sub	sp, #28
 80184b8:	bf18      	it	ne
 80184ba:	3704      	addne	r7, #4
 80184bc:	2500      	movs	r5, #0
 80184be:	1f3e      	subs	r6, r7, #4
 80184c0:	4682      	mov	sl, r0
 80184c2:	4690      	mov	r8, r2
 80184c4:	9301      	str	r3, [sp, #4]
 80184c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80184ca:	46b1      	mov	r9, r6
 80184cc:	4634      	mov	r4, r6
 80184ce:	9502      	str	r5, [sp, #8]
 80184d0:	46ab      	mov	fp, r5
 80184d2:	784a      	ldrb	r2, [r1, #1]
 80184d4:	1c4b      	adds	r3, r1, #1
 80184d6:	9303      	str	r3, [sp, #12]
 80184d8:	b342      	cbz	r2, 801852c <__hexnan+0x88>
 80184da:	4610      	mov	r0, r2
 80184dc:	9105      	str	r1, [sp, #20]
 80184de:	9204      	str	r2, [sp, #16]
 80184e0:	f7ff fd84 	bl	8017fec <__hexdig_fun>
 80184e4:	2800      	cmp	r0, #0
 80184e6:	d143      	bne.n	8018570 <__hexnan+0xcc>
 80184e8:	9a04      	ldr	r2, [sp, #16]
 80184ea:	9905      	ldr	r1, [sp, #20]
 80184ec:	2a20      	cmp	r2, #32
 80184ee:	d818      	bhi.n	8018522 <__hexnan+0x7e>
 80184f0:	9b02      	ldr	r3, [sp, #8]
 80184f2:	459b      	cmp	fp, r3
 80184f4:	dd13      	ble.n	801851e <__hexnan+0x7a>
 80184f6:	454c      	cmp	r4, r9
 80184f8:	d206      	bcs.n	8018508 <__hexnan+0x64>
 80184fa:	2d07      	cmp	r5, #7
 80184fc:	dc04      	bgt.n	8018508 <__hexnan+0x64>
 80184fe:	462a      	mov	r2, r5
 8018500:	4649      	mov	r1, r9
 8018502:	4620      	mov	r0, r4
 8018504:	f7ff ffa8 	bl	8018458 <L_shift>
 8018508:	4544      	cmp	r4, r8
 801850a:	d944      	bls.n	8018596 <__hexnan+0xf2>
 801850c:	2300      	movs	r3, #0
 801850e:	f1a4 0904 	sub.w	r9, r4, #4
 8018512:	f844 3c04 	str.w	r3, [r4, #-4]
 8018516:	f8cd b008 	str.w	fp, [sp, #8]
 801851a:	464c      	mov	r4, r9
 801851c:	461d      	mov	r5, r3
 801851e:	9903      	ldr	r1, [sp, #12]
 8018520:	e7d7      	b.n	80184d2 <__hexnan+0x2e>
 8018522:	2a29      	cmp	r2, #41	; 0x29
 8018524:	d14a      	bne.n	80185bc <__hexnan+0x118>
 8018526:	3102      	adds	r1, #2
 8018528:	f8ca 1000 	str.w	r1, [sl]
 801852c:	f1bb 0f00 	cmp.w	fp, #0
 8018530:	d044      	beq.n	80185bc <__hexnan+0x118>
 8018532:	454c      	cmp	r4, r9
 8018534:	d206      	bcs.n	8018544 <__hexnan+0xa0>
 8018536:	2d07      	cmp	r5, #7
 8018538:	dc04      	bgt.n	8018544 <__hexnan+0xa0>
 801853a:	462a      	mov	r2, r5
 801853c:	4649      	mov	r1, r9
 801853e:	4620      	mov	r0, r4
 8018540:	f7ff ff8a 	bl	8018458 <L_shift>
 8018544:	4544      	cmp	r4, r8
 8018546:	d928      	bls.n	801859a <__hexnan+0xf6>
 8018548:	4643      	mov	r3, r8
 801854a:	f854 2b04 	ldr.w	r2, [r4], #4
 801854e:	f843 2b04 	str.w	r2, [r3], #4
 8018552:	42a6      	cmp	r6, r4
 8018554:	d2f9      	bcs.n	801854a <__hexnan+0xa6>
 8018556:	2200      	movs	r2, #0
 8018558:	f843 2b04 	str.w	r2, [r3], #4
 801855c:	429e      	cmp	r6, r3
 801855e:	d2fb      	bcs.n	8018558 <__hexnan+0xb4>
 8018560:	6833      	ldr	r3, [r6, #0]
 8018562:	b91b      	cbnz	r3, 801856c <__hexnan+0xc8>
 8018564:	4546      	cmp	r6, r8
 8018566:	d127      	bne.n	80185b8 <__hexnan+0x114>
 8018568:	2301      	movs	r3, #1
 801856a:	6033      	str	r3, [r6, #0]
 801856c:	2005      	movs	r0, #5
 801856e:	e026      	b.n	80185be <__hexnan+0x11a>
 8018570:	3501      	adds	r5, #1
 8018572:	2d08      	cmp	r5, #8
 8018574:	f10b 0b01 	add.w	fp, fp, #1
 8018578:	dd06      	ble.n	8018588 <__hexnan+0xe4>
 801857a:	4544      	cmp	r4, r8
 801857c:	d9cf      	bls.n	801851e <__hexnan+0x7a>
 801857e:	2300      	movs	r3, #0
 8018580:	f844 3c04 	str.w	r3, [r4, #-4]
 8018584:	2501      	movs	r5, #1
 8018586:	3c04      	subs	r4, #4
 8018588:	6822      	ldr	r2, [r4, #0]
 801858a:	f000 000f 	and.w	r0, r0, #15
 801858e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018592:	6020      	str	r0, [r4, #0]
 8018594:	e7c3      	b.n	801851e <__hexnan+0x7a>
 8018596:	2508      	movs	r5, #8
 8018598:	e7c1      	b.n	801851e <__hexnan+0x7a>
 801859a:	9b01      	ldr	r3, [sp, #4]
 801859c:	2b00      	cmp	r3, #0
 801859e:	d0df      	beq.n	8018560 <__hexnan+0xbc>
 80185a0:	f04f 32ff 	mov.w	r2, #4294967295
 80185a4:	f1c3 0320 	rsb	r3, r3, #32
 80185a8:	fa22 f303 	lsr.w	r3, r2, r3
 80185ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80185b0:	401a      	ands	r2, r3
 80185b2:	f847 2c04 	str.w	r2, [r7, #-4]
 80185b6:	e7d3      	b.n	8018560 <__hexnan+0xbc>
 80185b8:	3e04      	subs	r6, #4
 80185ba:	e7d1      	b.n	8018560 <__hexnan+0xbc>
 80185bc:	2004      	movs	r0, #4
 80185be:	b007      	add	sp, #28
 80185c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185c4 <__locale_ctype_ptr_l>:
 80185c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80185c8:	4770      	bx	lr
	...

080185cc <__locale_ctype_ptr>:
 80185cc:	4b04      	ldr	r3, [pc, #16]	; (80185e0 <__locale_ctype_ptr+0x14>)
 80185ce:	4a05      	ldr	r2, [pc, #20]	; (80185e4 <__locale_ctype_ptr+0x18>)
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	6a1b      	ldr	r3, [r3, #32]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	bf08      	it	eq
 80185d8:	4613      	moveq	r3, r2
 80185da:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80185de:	4770      	bx	lr
 80185e0:	2000000c 	.word	0x2000000c
 80185e4:	20000070 	.word	0x20000070

080185e8 <__localeconv_l>:
 80185e8:	30f0      	adds	r0, #240	; 0xf0
 80185ea:	4770      	bx	lr

080185ec <_localeconv_r>:
 80185ec:	4b04      	ldr	r3, [pc, #16]	; (8018600 <_localeconv_r+0x14>)
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	6a18      	ldr	r0, [r3, #32]
 80185f2:	4b04      	ldr	r3, [pc, #16]	; (8018604 <_localeconv_r+0x18>)
 80185f4:	2800      	cmp	r0, #0
 80185f6:	bf08      	it	eq
 80185f8:	4618      	moveq	r0, r3
 80185fa:	30f0      	adds	r0, #240	; 0xf0
 80185fc:	4770      	bx	lr
 80185fe:	bf00      	nop
 8018600:	2000000c 	.word	0x2000000c
 8018604:	20000070 	.word	0x20000070

08018608 <malloc>:
 8018608:	4b02      	ldr	r3, [pc, #8]	; (8018614 <malloc+0xc>)
 801860a:	4601      	mov	r1, r0
 801860c:	6818      	ldr	r0, [r3, #0]
 801860e:	f000 bc7b 	b.w	8018f08 <_malloc_r>
 8018612:	bf00      	nop
 8018614:	2000000c 	.word	0x2000000c

08018618 <__ascii_mbtowc>:
 8018618:	b082      	sub	sp, #8
 801861a:	b901      	cbnz	r1, 801861e <__ascii_mbtowc+0x6>
 801861c:	a901      	add	r1, sp, #4
 801861e:	b142      	cbz	r2, 8018632 <__ascii_mbtowc+0x1a>
 8018620:	b14b      	cbz	r3, 8018636 <__ascii_mbtowc+0x1e>
 8018622:	7813      	ldrb	r3, [r2, #0]
 8018624:	600b      	str	r3, [r1, #0]
 8018626:	7812      	ldrb	r2, [r2, #0]
 8018628:	1c10      	adds	r0, r2, #0
 801862a:	bf18      	it	ne
 801862c:	2001      	movne	r0, #1
 801862e:	b002      	add	sp, #8
 8018630:	4770      	bx	lr
 8018632:	4610      	mov	r0, r2
 8018634:	e7fb      	b.n	801862e <__ascii_mbtowc+0x16>
 8018636:	f06f 0001 	mvn.w	r0, #1
 801863a:	e7f8      	b.n	801862e <__ascii_mbtowc+0x16>

0801863c <memcpy>:
 801863c:	b510      	push	{r4, lr}
 801863e:	1e43      	subs	r3, r0, #1
 8018640:	440a      	add	r2, r1
 8018642:	4291      	cmp	r1, r2
 8018644:	d100      	bne.n	8018648 <memcpy+0xc>
 8018646:	bd10      	pop	{r4, pc}
 8018648:	f811 4b01 	ldrb.w	r4, [r1], #1
 801864c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018650:	e7f7      	b.n	8018642 <memcpy+0x6>

08018652 <_Balloc>:
 8018652:	b570      	push	{r4, r5, r6, lr}
 8018654:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018656:	4604      	mov	r4, r0
 8018658:	460e      	mov	r6, r1
 801865a:	b93d      	cbnz	r5, 801866c <_Balloc+0x1a>
 801865c:	2010      	movs	r0, #16
 801865e:	f7ff ffd3 	bl	8018608 <malloc>
 8018662:	6260      	str	r0, [r4, #36]	; 0x24
 8018664:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018668:	6005      	str	r5, [r0, #0]
 801866a:	60c5      	str	r5, [r0, #12]
 801866c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801866e:	68eb      	ldr	r3, [r5, #12]
 8018670:	b183      	cbz	r3, 8018694 <_Balloc+0x42>
 8018672:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018674:	68db      	ldr	r3, [r3, #12]
 8018676:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801867a:	b9b8      	cbnz	r0, 80186ac <_Balloc+0x5a>
 801867c:	2101      	movs	r1, #1
 801867e:	fa01 f506 	lsl.w	r5, r1, r6
 8018682:	1d6a      	adds	r2, r5, #5
 8018684:	0092      	lsls	r2, r2, #2
 8018686:	4620      	mov	r0, r4
 8018688:	f000 fbe1 	bl	8018e4e <_calloc_r>
 801868c:	b160      	cbz	r0, 80186a8 <_Balloc+0x56>
 801868e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8018692:	e00e      	b.n	80186b2 <_Balloc+0x60>
 8018694:	2221      	movs	r2, #33	; 0x21
 8018696:	2104      	movs	r1, #4
 8018698:	4620      	mov	r0, r4
 801869a:	f000 fbd8 	bl	8018e4e <_calloc_r>
 801869e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186a0:	60e8      	str	r0, [r5, #12]
 80186a2:	68db      	ldr	r3, [r3, #12]
 80186a4:	2b00      	cmp	r3, #0
 80186a6:	d1e4      	bne.n	8018672 <_Balloc+0x20>
 80186a8:	2000      	movs	r0, #0
 80186aa:	bd70      	pop	{r4, r5, r6, pc}
 80186ac:	6802      	ldr	r2, [r0, #0]
 80186ae:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80186b2:	2300      	movs	r3, #0
 80186b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80186b8:	e7f7      	b.n	80186aa <_Balloc+0x58>

080186ba <_Bfree>:
 80186ba:	b570      	push	{r4, r5, r6, lr}
 80186bc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80186be:	4606      	mov	r6, r0
 80186c0:	460d      	mov	r5, r1
 80186c2:	b93c      	cbnz	r4, 80186d4 <_Bfree+0x1a>
 80186c4:	2010      	movs	r0, #16
 80186c6:	f7ff ff9f 	bl	8018608 <malloc>
 80186ca:	6270      	str	r0, [r6, #36]	; 0x24
 80186cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186d0:	6004      	str	r4, [r0, #0]
 80186d2:	60c4      	str	r4, [r0, #12]
 80186d4:	b13d      	cbz	r5, 80186e6 <_Bfree+0x2c>
 80186d6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80186d8:	686a      	ldr	r2, [r5, #4]
 80186da:	68db      	ldr	r3, [r3, #12]
 80186dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80186e0:	6029      	str	r1, [r5, #0]
 80186e2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80186e6:	bd70      	pop	{r4, r5, r6, pc}

080186e8 <__multadd>:
 80186e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186ec:	690d      	ldr	r5, [r1, #16]
 80186ee:	461f      	mov	r7, r3
 80186f0:	4606      	mov	r6, r0
 80186f2:	460c      	mov	r4, r1
 80186f4:	f101 0c14 	add.w	ip, r1, #20
 80186f8:	2300      	movs	r3, #0
 80186fa:	f8dc 0000 	ldr.w	r0, [ip]
 80186fe:	b281      	uxth	r1, r0
 8018700:	fb02 7101 	mla	r1, r2, r1, r7
 8018704:	0c0f      	lsrs	r7, r1, #16
 8018706:	0c00      	lsrs	r0, r0, #16
 8018708:	fb02 7000 	mla	r0, r2, r0, r7
 801870c:	b289      	uxth	r1, r1
 801870e:	3301      	adds	r3, #1
 8018710:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8018714:	429d      	cmp	r5, r3
 8018716:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801871a:	f84c 1b04 	str.w	r1, [ip], #4
 801871e:	dcec      	bgt.n	80186fa <__multadd+0x12>
 8018720:	b1d7      	cbz	r7, 8018758 <__multadd+0x70>
 8018722:	68a3      	ldr	r3, [r4, #8]
 8018724:	42ab      	cmp	r3, r5
 8018726:	dc12      	bgt.n	801874e <__multadd+0x66>
 8018728:	6861      	ldr	r1, [r4, #4]
 801872a:	4630      	mov	r0, r6
 801872c:	3101      	adds	r1, #1
 801872e:	f7ff ff90 	bl	8018652 <_Balloc>
 8018732:	6922      	ldr	r2, [r4, #16]
 8018734:	3202      	adds	r2, #2
 8018736:	f104 010c 	add.w	r1, r4, #12
 801873a:	4680      	mov	r8, r0
 801873c:	0092      	lsls	r2, r2, #2
 801873e:	300c      	adds	r0, #12
 8018740:	f7ff ff7c 	bl	801863c <memcpy>
 8018744:	4621      	mov	r1, r4
 8018746:	4630      	mov	r0, r6
 8018748:	f7ff ffb7 	bl	80186ba <_Bfree>
 801874c:	4644      	mov	r4, r8
 801874e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018752:	3501      	adds	r5, #1
 8018754:	615f      	str	r7, [r3, #20]
 8018756:	6125      	str	r5, [r4, #16]
 8018758:	4620      	mov	r0, r4
 801875a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801875e <__s2b>:
 801875e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018762:	460c      	mov	r4, r1
 8018764:	4615      	mov	r5, r2
 8018766:	461f      	mov	r7, r3
 8018768:	2209      	movs	r2, #9
 801876a:	3308      	adds	r3, #8
 801876c:	4606      	mov	r6, r0
 801876e:	fb93 f3f2 	sdiv	r3, r3, r2
 8018772:	2100      	movs	r1, #0
 8018774:	2201      	movs	r2, #1
 8018776:	429a      	cmp	r2, r3
 8018778:	db20      	blt.n	80187bc <__s2b+0x5e>
 801877a:	4630      	mov	r0, r6
 801877c:	f7ff ff69 	bl	8018652 <_Balloc>
 8018780:	9b08      	ldr	r3, [sp, #32]
 8018782:	6143      	str	r3, [r0, #20]
 8018784:	2d09      	cmp	r5, #9
 8018786:	f04f 0301 	mov.w	r3, #1
 801878a:	6103      	str	r3, [r0, #16]
 801878c:	dd19      	ble.n	80187c2 <__s2b+0x64>
 801878e:	f104 0809 	add.w	r8, r4, #9
 8018792:	46c1      	mov	r9, r8
 8018794:	442c      	add	r4, r5
 8018796:	f819 3b01 	ldrb.w	r3, [r9], #1
 801879a:	4601      	mov	r1, r0
 801879c:	3b30      	subs	r3, #48	; 0x30
 801879e:	220a      	movs	r2, #10
 80187a0:	4630      	mov	r0, r6
 80187a2:	f7ff ffa1 	bl	80186e8 <__multadd>
 80187a6:	45a1      	cmp	r9, r4
 80187a8:	d1f5      	bne.n	8018796 <__s2b+0x38>
 80187aa:	eb08 0405 	add.w	r4, r8, r5
 80187ae:	3c08      	subs	r4, #8
 80187b0:	1b2d      	subs	r5, r5, r4
 80187b2:	1963      	adds	r3, r4, r5
 80187b4:	42bb      	cmp	r3, r7
 80187b6:	db07      	blt.n	80187c8 <__s2b+0x6a>
 80187b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80187bc:	0052      	lsls	r2, r2, #1
 80187be:	3101      	adds	r1, #1
 80187c0:	e7d9      	b.n	8018776 <__s2b+0x18>
 80187c2:	340a      	adds	r4, #10
 80187c4:	2509      	movs	r5, #9
 80187c6:	e7f3      	b.n	80187b0 <__s2b+0x52>
 80187c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80187cc:	4601      	mov	r1, r0
 80187ce:	3b30      	subs	r3, #48	; 0x30
 80187d0:	220a      	movs	r2, #10
 80187d2:	4630      	mov	r0, r6
 80187d4:	f7ff ff88 	bl	80186e8 <__multadd>
 80187d8:	e7eb      	b.n	80187b2 <__s2b+0x54>

080187da <__hi0bits>:
 80187da:	0c02      	lsrs	r2, r0, #16
 80187dc:	0412      	lsls	r2, r2, #16
 80187de:	4603      	mov	r3, r0
 80187e0:	b9b2      	cbnz	r2, 8018810 <__hi0bits+0x36>
 80187e2:	0403      	lsls	r3, r0, #16
 80187e4:	2010      	movs	r0, #16
 80187e6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80187ea:	bf04      	itt	eq
 80187ec:	021b      	lsleq	r3, r3, #8
 80187ee:	3008      	addeq	r0, #8
 80187f0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80187f4:	bf04      	itt	eq
 80187f6:	011b      	lsleq	r3, r3, #4
 80187f8:	3004      	addeq	r0, #4
 80187fa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80187fe:	bf04      	itt	eq
 8018800:	009b      	lsleq	r3, r3, #2
 8018802:	3002      	addeq	r0, #2
 8018804:	2b00      	cmp	r3, #0
 8018806:	db06      	blt.n	8018816 <__hi0bits+0x3c>
 8018808:	005b      	lsls	r3, r3, #1
 801880a:	d503      	bpl.n	8018814 <__hi0bits+0x3a>
 801880c:	3001      	adds	r0, #1
 801880e:	4770      	bx	lr
 8018810:	2000      	movs	r0, #0
 8018812:	e7e8      	b.n	80187e6 <__hi0bits+0xc>
 8018814:	2020      	movs	r0, #32
 8018816:	4770      	bx	lr

08018818 <__lo0bits>:
 8018818:	6803      	ldr	r3, [r0, #0]
 801881a:	f013 0207 	ands.w	r2, r3, #7
 801881e:	4601      	mov	r1, r0
 8018820:	d00b      	beq.n	801883a <__lo0bits+0x22>
 8018822:	07da      	lsls	r2, r3, #31
 8018824:	d423      	bmi.n	801886e <__lo0bits+0x56>
 8018826:	0798      	lsls	r0, r3, #30
 8018828:	bf49      	itett	mi
 801882a:	085b      	lsrmi	r3, r3, #1
 801882c:	089b      	lsrpl	r3, r3, #2
 801882e:	2001      	movmi	r0, #1
 8018830:	600b      	strmi	r3, [r1, #0]
 8018832:	bf5c      	itt	pl
 8018834:	600b      	strpl	r3, [r1, #0]
 8018836:	2002      	movpl	r0, #2
 8018838:	4770      	bx	lr
 801883a:	b298      	uxth	r0, r3
 801883c:	b9a8      	cbnz	r0, 801886a <__lo0bits+0x52>
 801883e:	0c1b      	lsrs	r3, r3, #16
 8018840:	2010      	movs	r0, #16
 8018842:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018846:	bf04      	itt	eq
 8018848:	0a1b      	lsreq	r3, r3, #8
 801884a:	3008      	addeq	r0, #8
 801884c:	071a      	lsls	r2, r3, #28
 801884e:	bf04      	itt	eq
 8018850:	091b      	lsreq	r3, r3, #4
 8018852:	3004      	addeq	r0, #4
 8018854:	079a      	lsls	r2, r3, #30
 8018856:	bf04      	itt	eq
 8018858:	089b      	lsreq	r3, r3, #2
 801885a:	3002      	addeq	r0, #2
 801885c:	07da      	lsls	r2, r3, #31
 801885e:	d402      	bmi.n	8018866 <__lo0bits+0x4e>
 8018860:	085b      	lsrs	r3, r3, #1
 8018862:	d006      	beq.n	8018872 <__lo0bits+0x5a>
 8018864:	3001      	adds	r0, #1
 8018866:	600b      	str	r3, [r1, #0]
 8018868:	4770      	bx	lr
 801886a:	4610      	mov	r0, r2
 801886c:	e7e9      	b.n	8018842 <__lo0bits+0x2a>
 801886e:	2000      	movs	r0, #0
 8018870:	4770      	bx	lr
 8018872:	2020      	movs	r0, #32
 8018874:	4770      	bx	lr

08018876 <__i2b>:
 8018876:	b510      	push	{r4, lr}
 8018878:	460c      	mov	r4, r1
 801887a:	2101      	movs	r1, #1
 801887c:	f7ff fee9 	bl	8018652 <_Balloc>
 8018880:	2201      	movs	r2, #1
 8018882:	6144      	str	r4, [r0, #20]
 8018884:	6102      	str	r2, [r0, #16]
 8018886:	bd10      	pop	{r4, pc}

08018888 <__multiply>:
 8018888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801888c:	4614      	mov	r4, r2
 801888e:	690a      	ldr	r2, [r1, #16]
 8018890:	6923      	ldr	r3, [r4, #16]
 8018892:	429a      	cmp	r2, r3
 8018894:	bfb8      	it	lt
 8018896:	460b      	movlt	r3, r1
 8018898:	4688      	mov	r8, r1
 801889a:	bfbc      	itt	lt
 801889c:	46a0      	movlt	r8, r4
 801889e:	461c      	movlt	r4, r3
 80188a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80188a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80188a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80188ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80188b0:	eb07 0609 	add.w	r6, r7, r9
 80188b4:	42b3      	cmp	r3, r6
 80188b6:	bfb8      	it	lt
 80188b8:	3101      	addlt	r1, #1
 80188ba:	f7ff feca 	bl	8018652 <_Balloc>
 80188be:	f100 0514 	add.w	r5, r0, #20
 80188c2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80188c6:	462b      	mov	r3, r5
 80188c8:	2200      	movs	r2, #0
 80188ca:	4573      	cmp	r3, lr
 80188cc:	d316      	bcc.n	80188fc <__multiply+0x74>
 80188ce:	f104 0214 	add.w	r2, r4, #20
 80188d2:	f108 0114 	add.w	r1, r8, #20
 80188d6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80188da:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80188de:	9300      	str	r3, [sp, #0]
 80188e0:	9b00      	ldr	r3, [sp, #0]
 80188e2:	9201      	str	r2, [sp, #4]
 80188e4:	4293      	cmp	r3, r2
 80188e6:	d80c      	bhi.n	8018902 <__multiply+0x7a>
 80188e8:	2e00      	cmp	r6, #0
 80188ea:	dd03      	ble.n	80188f4 <__multiply+0x6c>
 80188ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d05d      	beq.n	80189b0 <__multiply+0x128>
 80188f4:	6106      	str	r6, [r0, #16]
 80188f6:	b003      	add	sp, #12
 80188f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188fc:	f843 2b04 	str.w	r2, [r3], #4
 8018900:	e7e3      	b.n	80188ca <__multiply+0x42>
 8018902:	f8b2 b000 	ldrh.w	fp, [r2]
 8018906:	f1bb 0f00 	cmp.w	fp, #0
 801890a:	d023      	beq.n	8018954 <__multiply+0xcc>
 801890c:	4689      	mov	r9, r1
 801890e:	46ac      	mov	ip, r5
 8018910:	f04f 0800 	mov.w	r8, #0
 8018914:	f859 4b04 	ldr.w	r4, [r9], #4
 8018918:	f8dc a000 	ldr.w	sl, [ip]
 801891c:	b2a3      	uxth	r3, r4
 801891e:	fa1f fa8a 	uxth.w	sl, sl
 8018922:	fb0b a303 	mla	r3, fp, r3, sl
 8018926:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801892a:	f8dc 4000 	ldr.w	r4, [ip]
 801892e:	4443      	add	r3, r8
 8018930:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018934:	fb0b 840a 	mla	r4, fp, sl, r8
 8018938:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801893c:	46e2      	mov	sl, ip
 801893e:	b29b      	uxth	r3, r3
 8018940:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018944:	454f      	cmp	r7, r9
 8018946:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801894a:	f84a 3b04 	str.w	r3, [sl], #4
 801894e:	d82b      	bhi.n	80189a8 <__multiply+0x120>
 8018950:	f8cc 8004 	str.w	r8, [ip, #4]
 8018954:	9b01      	ldr	r3, [sp, #4]
 8018956:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801895a:	3204      	adds	r2, #4
 801895c:	f1ba 0f00 	cmp.w	sl, #0
 8018960:	d020      	beq.n	80189a4 <__multiply+0x11c>
 8018962:	682b      	ldr	r3, [r5, #0]
 8018964:	4689      	mov	r9, r1
 8018966:	46a8      	mov	r8, r5
 8018968:	f04f 0b00 	mov.w	fp, #0
 801896c:	f8b9 c000 	ldrh.w	ip, [r9]
 8018970:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018974:	fb0a 440c 	mla	r4, sl, ip, r4
 8018978:	445c      	add	r4, fp
 801897a:	46c4      	mov	ip, r8
 801897c:	b29b      	uxth	r3, r3
 801897e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018982:	f84c 3b04 	str.w	r3, [ip], #4
 8018986:	f859 3b04 	ldr.w	r3, [r9], #4
 801898a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801898e:	0c1b      	lsrs	r3, r3, #16
 8018990:	fb0a b303 	mla	r3, sl, r3, fp
 8018994:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018998:	454f      	cmp	r7, r9
 801899a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801899e:	d805      	bhi.n	80189ac <__multiply+0x124>
 80189a0:	f8c8 3004 	str.w	r3, [r8, #4]
 80189a4:	3504      	adds	r5, #4
 80189a6:	e79b      	b.n	80188e0 <__multiply+0x58>
 80189a8:	46d4      	mov	ip, sl
 80189aa:	e7b3      	b.n	8018914 <__multiply+0x8c>
 80189ac:	46e0      	mov	r8, ip
 80189ae:	e7dd      	b.n	801896c <__multiply+0xe4>
 80189b0:	3e01      	subs	r6, #1
 80189b2:	e799      	b.n	80188e8 <__multiply+0x60>

080189b4 <__pow5mult>:
 80189b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189b8:	4615      	mov	r5, r2
 80189ba:	f012 0203 	ands.w	r2, r2, #3
 80189be:	4606      	mov	r6, r0
 80189c0:	460f      	mov	r7, r1
 80189c2:	d007      	beq.n	80189d4 <__pow5mult+0x20>
 80189c4:	3a01      	subs	r2, #1
 80189c6:	4c21      	ldr	r4, [pc, #132]	; (8018a4c <__pow5mult+0x98>)
 80189c8:	2300      	movs	r3, #0
 80189ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80189ce:	f7ff fe8b 	bl	80186e8 <__multadd>
 80189d2:	4607      	mov	r7, r0
 80189d4:	10ad      	asrs	r5, r5, #2
 80189d6:	d035      	beq.n	8018a44 <__pow5mult+0x90>
 80189d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80189da:	b93c      	cbnz	r4, 80189ec <__pow5mult+0x38>
 80189dc:	2010      	movs	r0, #16
 80189de:	f7ff fe13 	bl	8018608 <malloc>
 80189e2:	6270      	str	r0, [r6, #36]	; 0x24
 80189e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80189e8:	6004      	str	r4, [r0, #0]
 80189ea:	60c4      	str	r4, [r0, #12]
 80189ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80189f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80189f4:	b94c      	cbnz	r4, 8018a0a <__pow5mult+0x56>
 80189f6:	f240 2171 	movw	r1, #625	; 0x271
 80189fa:	4630      	mov	r0, r6
 80189fc:	f7ff ff3b 	bl	8018876 <__i2b>
 8018a00:	2300      	movs	r3, #0
 8018a02:	f8c8 0008 	str.w	r0, [r8, #8]
 8018a06:	4604      	mov	r4, r0
 8018a08:	6003      	str	r3, [r0, #0]
 8018a0a:	f04f 0800 	mov.w	r8, #0
 8018a0e:	07eb      	lsls	r3, r5, #31
 8018a10:	d50a      	bpl.n	8018a28 <__pow5mult+0x74>
 8018a12:	4639      	mov	r1, r7
 8018a14:	4622      	mov	r2, r4
 8018a16:	4630      	mov	r0, r6
 8018a18:	f7ff ff36 	bl	8018888 <__multiply>
 8018a1c:	4639      	mov	r1, r7
 8018a1e:	4681      	mov	r9, r0
 8018a20:	4630      	mov	r0, r6
 8018a22:	f7ff fe4a 	bl	80186ba <_Bfree>
 8018a26:	464f      	mov	r7, r9
 8018a28:	106d      	asrs	r5, r5, #1
 8018a2a:	d00b      	beq.n	8018a44 <__pow5mult+0x90>
 8018a2c:	6820      	ldr	r0, [r4, #0]
 8018a2e:	b938      	cbnz	r0, 8018a40 <__pow5mult+0x8c>
 8018a30:	4622      	mov	r2, r4
 8018a32:	4621      	mov	r1, r4
 8018a34:	4630      	mov	r0, r6
 8018a36:	f7ff ff27 	bl	8018888 <__multiply>
 8018a3a:	6020      	str	r0, [r4, #0]
 8018a3c:	f8c0 8000 	str.w	r8, [r0]
 8018a40:	4604      	mov	r4, r0
 8018a42:	e7e4      	b.n	8018a0e <__pow5mult+0x5a>
 8018a44:	4638      	mov	r0, r7
 8018a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a4a:	bf00      	nop
 8018a4c:	0801a3c0 	.word	0x0801a3c0

08018a50 <__lshift>:
 8018a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a54:	460c      	mov	r4, r1
 8018a56:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018a5a:	6923      	ldr	r3, [r4, #16]
 8018a5c:	6849      	ldr	r1, [r1, #4]
 8018a5e:	eb0a 0903 	add.w	r9, sl, r3
 8018a62:	68a3      	ldr	r3, [r4, #8]
 8018a64:	4607      	mov	r7, r0
 8018a66:	4616      	mov	r6, r2
 8018a68:	f109 0501 	add.w	r5, r9, #1
 8018a6c:	42ab      	cmp	r3, r5
 8018a6e:	db32      	blt.n	8018ad6 <__lshift+0x86>
 8018a70:	4638      	mov	r0, r7
 8018a72:	f7ff fdee 	bl	8018652 <_Balloc>
 8018a76:	2300      	movs	r3, #0
 8018a78:	4680      	mov	r8, r0
 8018a7a:	f100 0114 	add.w	r1, r0, #20
 8018a7e:	461a      	mov	r2, r3
 8018a80:	4553      	cmp	r3, sl
 8018a82:	db2b      	blt.n	8018adc <__lshift+0x8c>
 8018a84:	6920      	ldr	r0, [r4, #16]
 8018a86:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018a8a:	f104 0314 	add.w	r3, r4, #20
 8018a8e:	f016 021f 	ands.w	r2, r6, #31
 8018a92:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018a96:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018a9a:	d025      	beq.n	8018ae8 <__lshift+0x98>
 8018a9c:	f1c2 0e20 	rsb	lr, r2, #32
 8018aa0:	2000      	movs	r0, #0
 8018aa2:	681e      	ldr	r6, [r3, #0]
 8018aa4:	468a      	mov	sl, r1
 8018aa6:	4096      	lsls	r6, r2
 8018aa8:	4330      	orrs	r0, r6
 8018aaa:	f84a 0b04 	str.w	r0, [sl], #4
 8018aae:	f853 0b04 	ldr.w	r0, [r3], #4
 8018ab2:	459c      	cmp	ip, r3
 8018ab4:	fa20 f00e 	lsr.w	r0, r0, lr
 8018ab8:	d814      	bhi.n	8018ae4 <__lshift+0x94>
 8018aba:	6048      	str	r0, [r1, #4]
 8018abc:	b108      	cbz	r0, 8018ac2 <__lshift+0x72>
 8018abe:	f109 0502 	add.w	r5, r9, #2
 8018ac2:	3d01      	subs	r5, #1
 8018ac4:	4638      	mov	r0, r7
 8018ac6:	f8c8 5010 	str.w	r5, [r8, #16]
 8018aca:	4621      	mov	r1, r4
 8018acc:	f7ff fdf5 	bl	80186ba <_Bfree>
 8018ad0:	4640      	mov	r0, r8
 8018ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ad6:	3101      	adds	r1, #1
 8018ad8:	005b      	lsls	r3, r3, #1
 8018ada:	e7c7      	b.n	8018a6c <__lshift+0x1c>
 8018adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8018ae0:	3301      	adds	r3, #1
 8018ae2:	e7cd      	b.n	8018a80 <__lshift+0x30>
 8018ae4:	4651      	mov	r1, sl
 8018ae6:	e7dc      	b.n	8018aa2 <__lshift+0x52>
 8018ae8:	3904      	subs	r1, #4
 8018aea:	f853 2b04 	ldr.w	r2, [r3], #4
 8018aee:	f841 2f04 	str.w	r2, [r1, #4]!
 8018af2:	459c      	cmp	ip, r3
 8018af4:	d8f9      	bhi.n	8018aea <__lshift+0x9a>
 8018af6:	e7e4      	b.n	8018ac2 <__lshift+0x72>

08018af8 <__mcmp>:
 8018af8:	6903      	ldr	r3, [r0, #16]
 8018afa:	690a      	ldr	r2, [r1, #16]
 8018afc:	1a9b      	subs	r3, r3, r2
 8018afe:	b530      	push	{r4, r5, lr}
 8018b00:	d10c      	bne.n	8018b1c <__mcmp+0x24>
 8018b02:	0092      	lsls	r2, r2, #2
 8018b04:	3014      	adds	r0, #20
 8018b06:	3114      	adds	r1, #20
 8018b08:	1884      	adds	r4, r0, r2
 8018b0a:	4411      	add	r1, r2
 8018b0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018b10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018b14:	4295      	cmp	r5, r2
 8018b16:	d003      	beq.n	8018b20 <__mcmp+0x28>
 8018b18:	d305      	bcc.n	8018b26 <__mcmp+0x2e>
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	bd30      	pop	{r4, r5, pc}
 8018b20:	42a0      	cmp	r0, r4
 8018b22:	d3f3      	bcc.n	8018b0c <__mcmp+0x14>
 8018b24:	e7fa      	b.n	8018b1c <__mcmp+0x24>
 8018b26:	f04f 33ff 	mov.w	r3, #4294967295
 8018b2a:	e7f7      	b.n	8018b1c <__mcmp+0x24>

08018b2c <__mdiff>:
 8018b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b30:	460d      	mov	r5, r1
 8018b32:	4607      	mov	r7, r0
 8018b34:	4611      	mov	r1, r2
 8018b36:	4628      	mov	r0, r5
 8018b38:	4614      	mov	r4, r2
 8018b3a:	f7ff ffdd 	bl	8018af8 <__mcmp>
 8018b3e:	1e06      	subs	r6, r0, #0
 8018b40:	d108      	bne.n	8018b54 <__mdiff+0x28>
 8018b42:	4631      	mov	r1, r6
 8018b44:	4638      	mov	r0, r7
 8018b46:	f7ff fd84 	bl	8018652 <_Balloc>
 8018b4a:	2301      	movs	r3, #1
 8018b4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b54:	bfa4      	itt	ge
 8018b56:	4623      	movge	r3, r4
 8018b58:	462c      	movge	r4, r5
 8018b5a:	4638      	mov	r0, r7
 8018b5c:	6861      	ldr	r1, [r4, #4]
 8018b5e:	bfa6      	itte	ge
 8018b60:	461d      	movge	r5, r3
 8018b62:	2600      	movge	r6, #0
 8018b64:	2601      	movlt	r6, #1
 8018b66:	f7ff fd74 	bl	8018652 <_Balloc>
 8018b6a:	692b      	ldr	r3, [r5, #16]
 8018b6c:	60c6      	str	r6, [r0, #12]
 8018b6e:	6926      	ldr	r6, [r4, #16]
 8018b70:	f105 0914 	add.w	r9, r5, #20
 8018b74:	f104 0214 	add.w	r2, r4, #20
 8018b78:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018b7c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018b80:	f100 0514 	add.w	r5, r0, #20
 8018b84:	f04f 0e00 	mov.w	lr, #0
 8018b88:	f852 ab04 	ldr.w	sl, [r2], #4
 8018b8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8018b90:	fa1e f18a 	uxtah	r1, lr, sl
 8018b94:	b2a3      	uxth	r3, r4
 8018b96:	1ac9      	subs	r1, r1, r3
 8018b98:	0c23      	lsrs	r3, r4, #16
 8018b9a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8018b9e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8018ba2:	b289      	uxth	r1, r1
 8018ba4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018ba8:	45c8      	cmp	r8, r9
 8018baa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8018bae:	4694      	mov	ip, r2
 8018bb0:	f845 3b04 	str.w	r3, [r5], #4
 8018bb4:	d8e8      	bhi.n	8018b88 <__mdiff+0x5c>
 8018bb6:	45bc      	cmp	ip, r7
 8018bb8:	d304      	bcc.n	8018bc4 <__mdiff+0x98>
 8018bba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8018bbe:	b183      	cbz	r3, 8018be2 <__mdiff+0xb6>
 8018bc0:	6106      	str	r6, [r0, #16]
 8018bc2:	e7c5      	b.n	8018b50 <__mdiff+0x24>
 8018bc4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018bc8:	fa1e f381 	uxtah	r3, lr, r1
 8018bcc:	141a      	asrs	r2, r3, #16
 8018bce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8018bd2:	b29b      	uxth	r3, r3
 8018bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018bd8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018bdc:	f845 3b04 	str.w	r3, [r5], #4
 8018be0:	e7e9      	b.n	8018bb6 <__mdiff+0x8a>
 8018be2:	3e01      	subs	r6, #1
 8018be4:	e7e9      	b.n	8018bba <__mdiff+0x8e>
	...

08018be8 <__ulp>:
 8018be8:	4b12      	ldr	r3, [pc, #72]	; (8018c34 <__ulp+0x4c>)
 8018bea:	ee10 2a90 	vmov	r2, s1
 8018bee:	401a      	ands	r2, r3
 8018bf0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	dd04      	ble.n	8018c02 <__ulp+0x1a>
 8018bf8:	2000      	movs	r0, #0
 8018bfa:	4619      	mov	r1, r3
 8018bfc:	ec41 0b10 	vmov	d0, r0, r1
 8018c00:	4770      	bx	lr
 8018c02:	425b      	negs	r3, r3
 8018c04:	151b      	asrs	r3, r3, #20
 8018c06:	2b13      	cmp	r3, #19
 8018c08:	f04f 0000 	mov.w	r0, #0
 8018c0c:	f04f 0100 	mov.w	r1, #0
 8018c10:	dc04      	bgt.n	8018c1c <__ulp+0x34>
 8018c12:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018c16:	fa42 f103 	asr.w	r1, r2, r3
 8018c1a:	e7ef      	b.n	8018bfc <__ulp+0x14>
 8018c1c:	3b14      	subs	r3, #20
 8018c1e:	2b1e      	cmp	r3, #30
 8018c20:	f04f 0201 	mov.w	r2, #1
 8018c24:	bfda      	itte	le
 8018c26:	f1c3 031f 	rsble	r3, r3, #31
 8018c2a:	fa02 f303 	lslle.w	r3, r2, r3
 8018c2e:	4613      	movgt	r3, r2
 8018c30:	4618      	mov	r0, r3
 8018c32:	e7e3      	b.n	8018bfc <__ulp+0x14>
 8018c34:	7ff00000 	.word	0x7ff00000

08018c38 <__b2d>:
 8018c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c3a:	6905      	ldr	r5, [r0, #16]
 8018c3c:	f100 0714 	add.w	r7, r0, #20
 8018c40:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018c44:	1f2e      	subs	r6, r5, #4
 8018c46:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018c4a:	4620      	mov	r0, r4
 8018c4c:	f7ff fdc5 	bl	80187da <__hi0bits>
 8018c50:	f1c0 0320 	rsb	r3, r0, #32
 8018c54:	280a      	cmp	r0, #10
 8018c56:	600b      	str	r3, [r1, #0]
 8018c58:	f8df c074 	ldr.w	ip, [pc, #116]	; 8018cd0 <__b2d+0x98>
 8018c5c:	dc14      	bgt.n	8018c88 <__b2d+0x50>
 8018c5e:	f1c0 0e0b 	rsb	lr, r0, #11
 8018c62:	fa24 f10e 	lsr.w	r1, r4, lr
 8018c66:	42b7      	cmp	r7, r6
 8018c68:	ea41 030c 	orr.w	r3, r1, ip
 8018c6c:	bf34      	ite	cc
 8018c6e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c72:	2100      	movcs	r1, #0
 8018c74:	3015      	adds	r0, #21
 8018c76:	fa04 f000 	lsl.w	r0, r4, r0
 8018c7a:	fa21 f10e 	lsr.w	r1, r1, lr
 8018c7e:	ea40 0201 	orr.w	r2, r0, r1
 8018c82:	ec43 2b10 	vmov	d0, r2, r3
 8018c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018c88:	42b7      	cmp	r7, r6
 8018c8a:	bf3a      	itte	cc
 8018c8c:	f1a5 0608 	subcc.w	r6, r5, #8
 8018c90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018c94:	2100      	movcs	r1, #0
 8018c96:	380b      	subs	r0, #11
 8018c98:	d015      	beq.n	8018cc6 <__b2d+0x8e>
 8018c9a:	4084      	lsls	r4, r0
 8018c9c:	f1c0 0520 	rsb	r5, r0, #32
 8018ca0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018ca4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018ca8:	42be      	cmp	r6, r7
 8018caa:	fa21 fc05 	lsr.w	ip, r1, r5
 8018cae:	ea44 030c 	orr.w	r3, r4, ip
 8018cb2:	bf8c      	ite	hi
 8018cb4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018cb8:	2400      	movls	r4, #0
 8018cba:	fa01 f000 	lsl.w	r0, r1, r0
 8018cbe:	40ec      	lsrs	r4, r5
 8018cc0:	ea40 0204 	orr.w	r2, r0, r4
 8018cc4:	e7dd      	b.n	8018c82 <__b2d+0x4a>
 8018cc6:	ea44 030c 	orr.w	r3, r4, ip
 8018cca:	460a      	mov	r2, r1
 8018ccc:	e7d9      	b.n	8018c82 <__b2d+0x4a>
 8018cce:	bf00      	nop
 8018cd0:	3ff00000 	.word	0x3ff00000

08018cd4 <__d2b>:
 8018cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018cd8:	460e      	mov	r6, r1
 8018cda:	2101      	movs	r1, #1
 8018cdc:	ec59 8b10 	vmov	r8, r9, d0
 8018ce0:	4615      	mov	r5, r2
 8018ce2:	f7ff fcb6 	bl	8018652 <_Balloc>
 8018ce6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018cea:	4607      	mov	r7, r0
 8018cec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018cf0:	bb34      	cbnz	r4, 8018d40 <__d2b+0x6c>
 8018cf2:	9301      	str	r3, [sp, #4]
 8018cf4:	f1b8 0300 	subs.w	r3, r8, #0
 8018cf8:	d027      	beq.n	8018d4a <__d2b+0x76>
 8018cfa:	a802      	add	r0, sp, #8
 8018cfc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018d00:	f7ff fd8a 	bl	8018818 <__lo0bits>
 8018d04:	9900      	ldr	r1, [sp, #0]
 8018d06:	b1f0      	cbz	r0, 8018d46 <__d2b+0x72>
 8018d08:	9a01      	ldr	r2, [sp, #4]
 8018d0a:	f1c0 0320 	rsb	r3, r0, #32
 8018d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8018d12:	430b      	orrs	r3, r1
 8018d14:	40c2      	lsrs	r2, r0
 8018d16:	617b      	str	r3, [r7, #20]
 8018d18:	9201      	str	r2, [sp, #4]
 8018d1a:	9b01      	ldr	r3, [sp, #4]
 8018d1c:	61bb      	str	r3, [r7, #24]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	bf14      	ite	ne
 8018d22:	2102      	movne	r1, #2
 8018d24:	2101      	moveq	r1, #1
 8018d26:	6139      	str	r1, [r7, #16]
 8018d28:	b1c4      	cbz	r4, 8018d5c <__d2b+0x88>
 8018d2a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018d2e:	4404      	add	r4, r0
 8018d30:	6034      	str	r4, [r6, #0]
 8018d32:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018d36:	6028      	str	r0, [r5, #0]
 8018d38:	4638      	mov	r0, r7
 8018d3a:	b003      	add	sp, #12
 8018d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018d44:	e7d5      	b.n	8018cf2 <__d2b+0x1e>
 8018d46:	6179      	str	r1, [r7, #20]
 8018d48:	e7e7      	b.n	8018d1a <__d2b+0x46>
 8018d4a:	a801      	add	r0, sp, #4
 8018d4c:	f7ff fd64 	bl	8018818 <__lo0bits>
 8018d50:	9b01      	ldr	r3, [sp, #4]
 8018d52:	617b      	str	r3, [r7, #20]
 8018d54:	2101      	movs	r1, #1
 8018d56:	6139      	str	r1, [r7, #16]
 8018d58:	3020      	adds	r0, #32
 8018d5a:	e7e5      	b.n	8018d28 <__d2b+0x54>
 8018d5c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018d60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018d64:	6030      	str	r0, [r6, #0]
 8018d66:	6918      	ldr	r0, [r3, #16]
 8018d68:	f7ff fd37 	bl	80187da <__hi0bits>
 8018d6c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018d70:	e7e1      	b.n	8018d36 <__d2b+0x62>

08018d72 <__ratio>:
 8018d72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d76:	4688      	mov	r8, r1
 8018d78:	4669      	mov	r1, sp
 8018d7a:	4681      	mov	r9, r0
 8018d7c:	f7ff ff5c 	bl	8018c38 <__b2d>
 8018d80:	a901      	add	r1, sp, #4
 8018d82:	4640      	mov	r0, r8
 8018d84:	ec57 6b10 	vmov	r6, r7, d0
 8018d88:	f7ff ff56 	bl	8018c38 <__b2d>
 8018d8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8018d90:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018d94:	eba3 0c02 	sub.w	ip, r3, r2
 8018d98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018d9c:	1a9b      	subs	r3, r3, r2
 8018d9e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8018da2:	ec5b ab10 	vmov	sl, fp, d0
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	bfce      	itee	gt
 8018daa:	463a      	movgt	r2, r7
 8018dac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8018db0:	465a      	movle	r2, fp
 8018db2:	4659      	mov	r1, fp
 8018db4:	463d      	mov	r5, r7
 8018db6:	bfd4      	ite	le
 8018db8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018dbc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8018dc0:	4630      	mov	r0, r6
 8018dc2:	ee10 2a10 	vmov	r2, s0
 8018dc6:	460b      	mov	r3, r1
 8018dc8:	4629      	mov	r1, r5
 8018dca:	f7e7 fd57 	bl	800087c <__aeabi_ddiv>
 8018dce:	ec41 0b10 	vmov	d0, r0, r1
 8018dd2:	b003      	add	sp, #12
 8018dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018dd8 <__copybits>:
 8018dd8:	3901      	subs	r1, #1
 8018dda:	b510      	push	{r4, lr}
 8018ddc:	1149      	asrs	r1, r1, #5
 8018dde:	6914      	ldr	r4, [r2, #16]
 8018de0:	3101      	adds	r1, #1
 8018de2:	f102 0314 	add.w	r3, r2, #20
 8018de6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8018dea:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018dee:	42a3      	cmp	r3, r4
 8018df0:	4602      	mov	r2, r0
 8018df2:	d303      	bcc.n	8018dfc <__copybits+0x24>
 8018df4:	2300      	movs	r3, #0
 8018df6:	428a      	cmp	r2, r1
 8018df8:	d305      	bcc.n	8018e06 <__copybits+0x2e>
 8018dfa:	bd10      	pop	{r4, pc}
 8018dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018e00:	f840 2b04 	str.w	r2, [r0], #4
 8018e04:	e7f3      	b.n	8018dee <__copybits+0x16>
 8018e06:	f842 3b04 	str.w	r3, [r2], #4
 8018e0a:	e7f4      	b.n	8018df6 <__copybits+0x1e>

08018e0c <__any_on>:
 8018e0c:	f100 0214 	add.w	r2, r0, #20
 8018e10:	6900      	ldr	r0, [r0, #16]
 8018e12:	114b      	asrs	r3, r1, #5
 8018e14:	4298      	cmp	r0, r3
 8018e16:	b510      	push	{r4, lr}
 8018e18:	db11      	blt.n	8018e3e <__any_on+0x32>
 8018e1a:	dd0a      	ble.n	8018e32 <__any_on+0x26>
 8018e1c:	f011 011f 	ands.w	r1, r1, #31
 8018e20:	d007      	beq.n	8018e32 <__any_on+0x26>
 8018e22:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018e26:	fa24 f001 	lsr.w	r0, r4, r1
 8018e2a:	fa00 f101 	lsl.w	r1, r0, r1
 8018e2e:	428c      	cmp	r4, r1
 8018e30:	d10b      	bne.n	8018e4a <__any_on+0x3e>
 8018e32:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018e36:	4293      	cmp	r3, r2
 8018e38:	d803      	bhi.n	8018e42 <__any_on+0x36>
 8018e3a:	2000      	movs	r0, #0
 8018e3c:	bd10      	pop	{r4, pc}
 8018e3e:	4603      	mov	r3, r0
 8018e40:	e7f7      	b.n	8018e32 <__any_on+0x26>
 8018e42:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018e46:	2900      	cmp	r1, #0
 8018e48:	d0f5      	beq.n	8018e36 <__any_on+0x2a>
 8018e4a:	2001      	movs	r0, #1
 8018e4c:	e7f6      	b.n	8018e3c <__any_on+0x30>

08018e4e <_calloc_r>:
 8018e4e:	b538      	push	{r3, r4, r5, lr}
 8018e50:	fb02 f401 	mul.w	r4, r2, r1
 8018e54:	4621      	mov	r1, r4
 8018e56:	f000 f857 	bl	8018f08 <_malloc_r>
 8018e5a:	4605      	mov	r5, r0
 8018e5c:	b118      	cbz	r0, 8018e66 <_calloc_r+0x18>
 8018e5e:	4622      	mov	r2, r4
 8018e60:	2100      	movs	r1, #0
 8018e62:	f7fc fca1 	bl	80157a8 <memset>
 8018e66:	4628      	mov	r0, r5
 8018e68:	bd38      	pop	{r3, r4, r5, pc}
	...

08018e6c <_free_r>:
 8018e6c:	b538      	push	{r3, r4, r5, lr}
 8018e6e:	4605      	mov	r5, r0
 8018e70:	2900      	cmp	r1, #0
 8018e72:	d045      	beq.n	8018f00 <_free_r+0x94>
 8018e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018e78:	1f0c      	subs	r4, r1, #4
 8018e7a:	2b00      	cmp	r3, #0
 8018e7c:	bfb8      	it	lt
 8018e7e:	18e4      	addlt	r4, r4, r3
 8018e80:	f000 fe30 	bl	8019ae4 <__malloc_lock>
 8018e84:	4a1f      	ldr	r2, [pc, #124]	; (8018f04 <_free_r+0x98>)
 8018e86:	6813      	ldr	r3, [r2, #0]
 8018e88:	4610      	mov	r0, r2
 8018e8a:	b933      	cbnz	r3, 8018e9a <_free_r+0x2e>
 8018e8c:	6063      	str	r3, [r4, #4]
 8018e8e:	6014      	str	r4, [r2, #0]
 8018e90:	4628      	mov	r0, r5
 8018e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018e96:	f000 be26 	b.w	8019ae6 <__malloc_unlock>
 8018e9a:	42a3      	cmp	r3, r4
 8018e9c:	d90c      	bls.n	8018eb8 <_free_r+0x4c>
 8018e9e:	6821      	ldr	r1, [r4, #0]
 8018ea0:	1862      	adds	r2, r4, r1
 8018ea2:	4293      	cmp	r3, r2
 8018ea4:	bf04      	itt	eq
 8018ea6:	681a      	ldreq	r2, [r3, #0]
 8018ea8:	685b      	ldreq	r3, [r3, #4]
 8018eaa:	6063      	str	r3, [r4, #4]
 8018eac:	bf04      	itt	eq
 8018eae:	1852      	addeq	r2, r2, r1
 8018eb0:	6022      	streq	r2, [r4, #0]
 8018eb2:	6004      	str	r4, [r0, #0]
 8018eb4:	e7ec      	b.n	8018e90 <_free_r+0x24>
 8018eb6:	4613      	mov	r3, r2
 8018eb8:	685a      	ldr	r2, [r3, #4]
 8018eba:	b10a      	cbz	r2, 8018ec0 <_free_r+0x54>
 8018ebc:	42a2      	cmp	r2, r4
 8018ebe:	d9fa      	bls.n	8018eb6 <_free_r+0x4a>
 8018ec0:	6819      	ldr	r1, [r3, #0]
 8018ec2:	1858      	adds	r0, r3, r1
 8018ec4:	42a0      	cmp	r0, r4
 8018ec6:	d10b      	bne.n	8018ee0 <_free_r+0x74>
 8018ec8:	6820      	ldr	r0, [r4, #0]
 8018eca:	4401      	add	r1, r0
 8018ecc:	1858      	adds	r0, r3, r1
 8018ece:	4282      	cmp	r2, r0
 8018ed0:	6019      	str	r1, [r3, #0]
 8018ed2:	d1dd      	bne.n	8018e90 <_free_r+0x24>
 8018ed4:	6810      	ldr	r0, [r2, #0]
 8018ed6:	6852      	ldr	r2, [r2, #4]
 8018ed8:	605a      	str	r2, [r3, #4]
 8018eda:	4401      	add	r1, r0
 8018edc:	6019      	str	r1, [r3, #0]
 8018ede:	e7d7      	b.n	8018e90 <_free_r+0x24>
 8018ee0:	d902      	bls.n	8018ee8 <_free_r+0x7c>
 8018ee2:	230c      	movs	r3, #12
 8018ee4:	602b      	str	r3, [r5, #0]
 8018ee6:	e7d3      	b.n	8018e90 <_free_r+0x24>
 8018ee8:	6820      	ldr	r0, [r4, #0]
 8018eea:	1821      	adds	r1, r4, r0
 8018eec:	428a      	cmp	r2, r1
 8018eee:	bf04      	itt	eq
 8018ef0:	6811      	ldreq	r1, [r2, #0]
 8018ef2:	6852      	ldreq	r2, [r2, #4]
 8018ef4:	6062      	str	r2, [r4, #4]
 8018ef6:	bf04      	itt	eq
 8018ef8:	1809      	addeq	r1, r1, r0
 8018efa:	6021      	streq	r1, [r4, #0]
 8018efc:	605c      	str	r4, [r3, #4]
 8018efe:	e7c7      	b.n	8018e90 <_free_r+0x24>
 8018f00:	bd38      	pop	{r3, r4, r5, pc}
 8018f02:	bf00      	nop
 8018f04:	200422f8 	.word	0x200422f8

08018f08 <_malloc_r>:
 8018f08:	b570      	push	{r4, r5, r6, lr}
 8018f0a:	1ccd      	adds	r5, r1, #3
 8018f0c:	f025 0503 	bic.w	r5, r5, #3
 8018f10:	3508      	adds	r5, #8
 8018f12:	2d0c      	cmp	r5, #12
 8018f14:	bf38      	it	cc
 8018f16:	250c      	movcc	r5, #12
 8018f18:	2d00      	cmp	r5, #0
 8018f1a:	4606      	mov	r6, r0
 8018f1c:	db01      	blt.n	8018f22 <_malloc_r+0x1a>
 8018f1e:	42a9      	cmp	r1, r5
 8018f20:	d903      	bls.n	8018f2a <_malloc_r+0x22>
 8018f22:	230c      	movs	r3, #12
 8018f24:	6033      	str	r3, [r6, #0]
 8018f26:	2000      	movs	r0, #0
 8018f28:	bd70      	pop	{r4, r5, r6, pc}
 8018f2a:	f000 fddb 	bl	8019ae4 <__malloc_lock>
 8018f2e:	4a21      	ldr	r2, [pc, #132]	; (8018fb4 <_malloc_r+0xac>)
 8018f30:	6814      	ldr	r4, [r2, #0]
 8018f32:	4621      	mov	r1, r4
 8018f34:	b991      	cbnz	r1, 8018f5c <_malloc_r+0x54>
 8018f36:	4c20      	ldr	r4, [pc, #128]	; (8018fb8 <_malloc_r+0xb0>)
 8018f38:	6823      	ldr	r3, [r4, #0]
 8018f3a:	b91b      	cbnz	r3, 8018f44 <_malloc_r+0x3c>
 8018f3c:	4630      	mov	r0, r6
 8018f3e:	f000 fc91 	bl	8019864 <_sbrk_r>
 8018f42:	6020      	str	r0, [r4, #0]
 8018f44:	4629      	mov	r1, r5
 8018f46:	4630      	mov	r0, r6
 8018f48:	f000 fc8c 	bl	8019864 <_sbrk_r>
 8018f4c:	1c43      	adds	r3, r0, #1
 8018f4e:	d124      	bne.n	8018f9a <_malloc_r+0x92>
 8018f50:	230c      	movs	r3, #12
 8018f52:	6033      	str	r3, [r6, #0]
 8018f54:	4630      	mov	r0, r6
 8018f56:	f000 fdc6 	bl	8019ae6 <__malloc_unlock>
 8018f5a:	e7e4      	b.n	8018f26 <_malloc_r+0x1e>
 8018f5c:	680b      	ldr	r3, [r1, #0]
 8018f5e:	1b5b      	subs	r3, r3, r5
 8018f60:	d418      	bmi.n	8018f94 <_malloc_r+0x8c>
 8018f62:	2b0b      	cmp	r3, #11
 8018f64:	d90f      	bls.n	8018f86 <_malloc_r+0x7e>
 8018f66:	600b      	str	r3, [r1, #0]
 8018f68:	50cd      	str	r5, [r1, r3]
 8018f6a:	18cc      	adds	r4, r1, r3
 8018f6c:	4630      	mov	r0, r6
 8018f6e:	f000 fdba 	bl	8019ae6 <__malloc_unlock>
 8018f72:	f104 000b 	add.w	r0, r4, #11
 8018f76:	1d23      	adds	r3, r4, #4
 8018f78:	f020 0007 	bic.w	r0, r0, #7
 8018f7c:	1ac3      	subs	r3, r0, r3
 8018f7e:	d0d3      	beq.n	8018f28 <_malloc_r+0x20>
 8018f80:	425a      	negs	r2, r3
 8018f82:	50e2      	str	r2, [r4, r3]
 8018f84:	e7d0      	b.n	8018f28 <_malloc_r+0x20>
 8018f86:	428c      	cmp	r4, r1
 8018f88:	684b      	ldr	r3, [r1, #4]
 8018f8a:	bf16      	itet	ne
 8018f8c:	6063      	strne	r3, [r4, #4]
 8018f8e:	6013      	streq	r3, [r2, #0]
 8018f90:	460c      	movne	r4, r1
 8018f92:	e7eb      	b.n	8018f6c <_malloc_r+0x64>
 8018f94:	460c      	mov	r4, r1
 8018f96:	6849      	ldr	r1, [r1, #4]
 8018f98:	e7cc      	b.n	8018f34 <_malloc_r+0x2c>
 8018f9a:	1cc4      	adds	r4, r0, #3
 8018f9c:	f024 0403 	bic.w	r4, r4, #3
 8018fa0:	42a0      	cmp	r0, r4
 8018fa2:	d005      	beq.n	8018fb0 <_malloc_r+0xa8>
 8018fa4:	1a21      	subs	r1, r4, r0
 8018fa6:	4630      	mov	r0, r6
 8018fa8:	f000 fc5c 	bl	8019864 <_sbrk_r>
 8018fac:	3001      	adds	r0, #1
 8018fae:	d0cf      	beq.n	8018f50 <_malloc_r+0x48>
 8018fb0:	6025      	str	r5, [r4, #0]
 8018fb2:	e7db      	b.n	8018f6c <_malloc_r+0x64>
 8018fb4:	200422f8 	.word	0x200422f8
 8018fb8:	200422fc 	.word	0x200422fc

08018fbc <__ssputs_r>:
 8018fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fc0:	688e      	ldr	r6, [r1, #8]
 8018fc2:	429e      	cmp	r6, r3
 8018fc4:	4682      	mov	sl, r0
 8018fc6:	460c      	mov	r4, r1
 8018fc8:	4690      	mov	r8, r2
 8018fca:	4699      	mov	r9, r3
 8018fcc:	d837      	bhi.n	801903e <__ssputs_r+0x82>
 8018fce:	898a      	ldrh	r2, [r1, #12]
 8018fd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018fd4:	d031      	beq.n	801903a <__ssputs_r+0x7e>
 8018fd6:	6825      	ldr	r5, [r4, #0]
 8018fd8:	6909      	ldr	r1, [r1, #16]
 8018fda:	1a6f      	subs	r7, r5, r1
 8018fdc:	6965      	ldr	r5, [r4, #20]
 8018fde:	2302      	movs	r3, #2
 8018fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018fe4:	fb95 f5f3 	sdiv	r5, r5, r3
 8018fe8:	f109 0301 	add.w	r3, r9, #1
 8018fec:	443b      	add	r3, r7
 8018fee:	429d      	cmp	r5, r3
 8018ff0:	bf38      	it	cc
 8018ff2:	461d      	movcc	r5, r3
 8018ff4:	0553      	lsls	r3, r2, #21
 8018ff6:	d530      	bpl.n	801905a <__ssputs_r+0x9e>
 8018ff8:	4629      	mov	r1, r5
 8018ffa:	f7ff ff85 	bl	8018f08 <_malloc_r>
 8018ffe:	4606      	mov	r6, r0
 8019000:	b950      	cbnz	r0, 8019018 <__ssputs_r+0x5c>
 8019002:	230c      	movs	r3, #12
 8019004:	f8ca 3000 	str.w	r3, [sl]
 8019008:	89a3      	ldrh	r3, [r4, #12]
 801900a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801900e:	81a3      	strh	r3, [r4, #12]
 8019010:	f04f 30ff 	mov.w	r0, #4294967295
 8019014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019018:	463a      	mov	r2, r7
 801901a:	6921      	ldr	r1, [r4, #16]
 801901c:	f7ff fb0e 	bl	801863c <memcpy>
 8019020:	89a3      	ldrh	r3, [r4, #12]
 8019022:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801902a:	81a3      	strh	r3, [r4, #12]
 801902c:	6126      	str	r6, [r4, #16]
 801902e:	6165      	str	r5, [r4, #20]
 8019030:	443e      	add	r6, r7
 8019032:	1bed      	subs	r5, r5, r7
 8019034:	6026      	str	r6, [r4, #0]
 8019036:	60a5      	str	r5, [r4, #8]
 8019038:	464e      	mov	r6, r9
 801903a:	454e      	cmp	r6, r9
 801903c:	d900      	bls.n	8019040 <__ssputs_r+0x84>
 801903e:	464e      	mov	r6, r9
 8019040:	4632      	mov	r2, r6
 8019042:	4641      	mov	r1, r8
 8019044:	6820      	ldr	r0, [r4, #0]
 8019046:	f000 fd34 	bl	8019ab2 <memmove>
 801904a:	68a3      	ldr	r3, [r4, #8]
 801904c:	1b9b      	subs	r3, r3, r6
 801904e:	60a3      	str	r3, [r4, #8]
 8019050:	6823      	ldr	r3, [r4, #0]
 8019052:	441e      	add	r6, r3
 8019054:	6026      	str	r6, [r4, #0]
 8019056:	2000      	movs	r0, #0
 8019058:	e7dc      	b.n	8019014 <__ssputs_r+0x58>
 801905a:	462a      	mov	r2, r5
 801905c:	f000 fd44 	bl	8019ae8 <_realloc_r>
 8019060:	4606      	mov	r6, r0
 8019062:	2800      	cmp	r0, #0
 8019064:	d1e2      	bne.n	801902c <__ssputs_r+0x70>
 8019066:	6921      	ldr	r1, [r4, #16]
 8019068:	4650      	mov	r0, sl
 801906a:	f7ff feff 	bl	8018e6c <_free_r>
 801906e:	e7c8      	b.n	8019002 <__ssputs_r+0x46>

08019070 <_svfiprintf_r>:
 8019070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019074:	461d      	mov	r5, r3
 8019076:	898b      	ldrh	r3, [r1, #12]
 8019078:	061f      	lsls	r7, r3, #24
 801907a:	b09d      	sub	sp, #116	; 0x74
 801907c:	4680      	mov	r8, r0
 801907e:	460c      	mov	r4, r1
 8019080:	4616      	mov	r6, r2
 8019082:	d50f      	bpl.n	80190a4 <_svfiprintf_r+0x34>
 8019084:	690b      	ldr	r3, [r1, #16]
 8019086:	b96b      	cbnz	r3, 80190a4 <_svfiprintf_r+0x34>
 8019088:	2140      	movs	r1, #64	; 0x40
 801908a:	f7ff ff3d 	bl	8018f08 <_malloc_r>
 801908e:	6020      	str	r0, [r4, #0]
 8019090:	6120      	str	r0, [r4, #16]
 8019092:	b928      	cbnz	r0, 80190a0 <_svfiprintf_r+0x30>
 8019094:	230c      	movs	r3, #12
 8019096:	f8c8 3000 	str.w	r3, [r8]
 801909a:	f04f 30ff 	mov.w	r0, #4294967295
 801909e:	e0c8      	b.n	8019232 <_svfiprintf_r+0x1c2>
 80190a0:	2340      	movs	r3, #64	; 0x40
 80190a2:	6163      	str	r3, [r4, #20]
 80190a4:	2300      	movs	r3, #0
 80190a6:	9309      	str	r3, [sp, #36]	; 0x24
 80190a8:	2320      	movs	r3, #32
 80190aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80190ae:	2330      	movs	r3, #48	; 0x30
 80190b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80190b4:	9503      	str	r5, [sp, #12]
 80190b6:	f04f 0b01 	mov.w	fp, #1
 80190ba:	4637      	mov	r7, r6
 80190bc:	463d      	mov	r5, r7
 80190be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80190c2:	b10b      	cbz	r3, 80190c8 <_svfiprintf_r+0x58>
 80190c4:	2b25      	cmp	r3, #37	; 0x25
 80190c6:	d13e      	bne.n	8019146 <_svfiprintf_r+0xd6>
 80190c8:	ebb7 0a06 	subs.w	sl, r7, r6
 80190cc:	d00b      	beq.n	80190e6 <_svfiprintf_r+0x76>
 80190ce:	4653      	mov	r3, sl
 80190d0:	4632      	mov	r2, r6
 80190d2:	4621      	mov	r1, r4
 80190d4:	4640      	mov	r0, r8
 80190d6:	f7ff ff71 	bl	8018fbc <__ssputs_r>
 80190da:	3001      	adds	r0, #1
 80190dc:	f000 80a4 	beq.w	8019228 <_svfiprintf_r+0x1b8>
 80190e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190e2:	4453      	add	r3, sl
 80190e4:	9309      	str	r3, [sp, #36]	; 0x24
 80190e6:	783b      	ldrb	r3, [r7, #0]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f000 809d 	beq.w	8019228 <_svfiprintf_r+0x1b8>
 80190ee:	2300      	movs	r3, #0
 80190f0:	f04f 32ff 	mov.w	r2, #4294967295
 80190f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80190f8:	9304      	str	r3, [sp, #16]
 80190fa:	9307      	str	r3, [sp, #28]
 80190fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019100:	931a      	str	r3, [sp, #104]	; 0x68
 8019102:	462f      	mov	r7, r5
 8019104:	2205      	movs	r2, #5
 8019106:	f817 1b01 	ldrb.w	r1, [r7], #1
 801910a:	4850      	ldr	r0, [pc, #320]	; (801924c <_svfiprintf_r+0x1dc>)
 801910c:	f7e7 f880 	bl	8000210 <memchr>
 8019110:	9b04      	ldr	r3, [sp, #16]
 8019112:	b9d0      	cbnz	r0, 801914a <_svfiprintf_r+0xda>
 8019114:	06d9      	lsls	r1, r3, #27
 8019116:	bf44      	itt	mi
 8019118:	2220      	movmi	r2, #32
 801911a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801911e:	071a      	lsls	r2, r3, #28
 8019120:	bf44      	itt	mi
 8019122:	222b      	movmi	r2, #43	; 0x2b
 8019124:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019128:	782a      	ldrb	r2, [r5, #0]
 801912a:	2a2a      	cmp	r2, #42	; 0x2a
 801912c:	d015      	beq.n	801915a <_svfiprintf_r+0xea>
 801912e:	9a07      	ldr	r2, [sp, #28]
 8019130:	462f      	mov	r7, r5
 8019132:	2000      	movs	r0, #0
 8019134:	250a      	movs	r5, #10
 8019136:	4639      	mov	r1, r7
 8019138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801913c:	3b30      	subs	r3, #48	; 0x30
 801913e:	2b09      	cmp	r3, #9
 8019140:	d94d      	bls.n	80191de <_svfiprintf_r+0x16e>
 8019142:	b1b8      	cbz	r0, 8019174 <_svfiprintf_r+0x104>
 8019144:	e00f      	b.n	8019166 <_svfiprintf_r+0xf6>
 8019146:	462f      	mov	r7, r5
 8019148:	e7b8      	b.n	80190bc <_svfiprintf_r+0x4c>
 801914a:	4a40      	ldr	r2, [pc, #256]	; (801924c <_svfiprintf_r+0x1dc>)
 801914c:	1a80      	subs	r0, r0, r2
 801914e:	fa0b f000 	lsl.w	r0, fp, r0
 8019152:	4318      	orrs	r0, r3
 8019154:	9004      	str	r0, [sp, #16]
 8019156:	463d      	mov	r5, r7
 8019158:	e7d3      	b.n	8019102 <_svfiprintf_r+0x92>
 801915a:	9a03      	ldr	r2, [sp, #12]
 801915c:	1d11      	adds	r1, r2, #4
 801915e:	6812      	ldr	r2, [r2, #0]
 8019160:	9103      	str	r1, [sp, #12]
 8019162:	2a00      	cmp	r2, #0
 8019164:	db01      	blt.n	801916a <_svfiprintf_r+0xfa>
 8019166:	9207      	str	r2, [sp, #28]
 8019168:	e004      	b.n	8019174 <_svfiprintf_r+0x104>
 801916a:	4252      	negs	r2, r2
 801916c:	f043 0302 	orr.w	r3, r3, #2
 8019170:	9207      	str	r2, [sp, #28]
 8019172:	9304      	str	r3, [sp, #16]
 8019174:	783b      	ldrb	r3, [r7, #0]
 8019176:	2b2e      	cmp	r3, #46	; 0x2e
 8019178:	d10c      	bne.n	8019194 <_svfiprintf_r+0x124>
 801917a:	787b      	ldrb	r3, [r7, #1]
 801917c:	2b2a      	cmp	r3, #42	; 0x2a
 801917e:	d133      	bne.n	80191e8 <_svfiprintf_r+0x178>
 8019180:	9b03      	ldr	r3, [sp, #12]
 8019182:	1d1a      	adds	r2, r3, #4
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	9203      	str	r2, [sp, #12]
 8019188:	2b00      	cmp	r3, #0
 801918a:	bfb8      	it	lt
 801918c:	f04f 33ff 	movlt.w	r3, #4294967295
 8019190:	3702      	adds	r7, #2
 8019192:	9305      	str	r3, [sp, #20]
 8019194:	4d2e      	ldr	r5, [pc, #184]	; (8019250 <_svfiprintf_r+0x1e0>)
 8019196:	7839      	ldrb	r1, [r7, #0]
 8019198:	2203      	movs	r2, #3
 801919a:	4628      	mov	r0, r5
 801919c:	f7e7 f838 	bl	8000210 <memchr>
 80191a0:	b138      	cbz	r0, 80191b2 <_svfiprintf_r+0x142>
 80191a2:	2340      	movs	r3, #64	; 0x40
 80191a4:	1b40      	subs	r0, r0, r5
 80191a6:	fa03 f000 	lsl.w	r0, r3, r0
 80191aa:	9b04      	ldr	r3, [sp, #16]
 80191ac:	4303      	orrs	r3, r0
 80191ae:	3701      	adds	r7, #1
 80191b0:	9304      	str	r3, [sp, #16]
 80191b2:	7839      	ldrb	r1, [r7, #0]
 80191b4:	4827      	ldr	r0, [pc, #156]	; (8019254 <_svfiprintf_r+0x1e4>)
 80191b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80191ba:	2206      	movs	r2, #6
 80191bc:	1c7e      	adds	r6, r7, #1
 80191be:	f7e7 f827 	bl	8000210 <memchr>
 80191c2:	2800      	cmp	r0, #0
 80191c4:	d038      	beq.n	8019238 <_svfiprintf_r+0x1c8>
 80191c6:	4b24      	ldr	r3, [pc, #144]	; (8019258 <_svfiprintf_r+0x1e8>)
 80191c8:	bb13      	cbnz	r3, 8019210 <_svfiprintf_r+0x1a0>
 80191ca:	9b03      	ldr	r3, [sp, #12]
 80191cc:	3307      	adds	r3, #7
 80191ce:	f023 0307 	bic.w	r3, r3, #7
 80191d2:	3308      	adds	r3, #8
 80191d4:	9303      	str	r3, [sp, #12]
 80191d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80191d8:	444b      	add	r3, r9
 80191da:	9309      	str	r3, [sp, #36]	; 0x24
 80191dc:	e76d      	b.n	80190ba <_svfiprintf_r+0x4a>
 80191de:	fb05 3202 	mla	r2, r5, r2, r3
 80191e2:	2001      	movs	r0, #1
 80191e4:	460f      	mov	r7, r1
 80191e6:	e7a6      	b.n	8019136 <_svfiprintf_r+0xc6>
 80191e8:	2300      	movs	r3, #0
 80191ea:	3701      	adds	r7, #1
 80191ec:	9305      	str	r3, [sp, #20]
 80191ee:	4619      	mov	r1, r3
 80191f0:	250a      	movs	r5, #10
 80191f2:	4638      	mov	r0, r7
 80191f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80191f8:	3a30      	subs	r2, #48	; 0x30
 80191fa:	2a09      	cmp	r2, #9
 80191fc:	d903      	bls.n	8019206 <_svfiprintf_r+0x196>
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d0c8      	beq.n	8019194 <_svfiprintf_r+0x124>
 8019202:	9105      	str	r1, [sp, #20]
 8019204:	e7c6      	b.n	8019194 <_svfiprintf_r+0x124>
 8019206:	fb05 2101 	mla	r1, r5, r1, r2
 801920a:	2301      	movs	r3, #1
 801920c:	4607      	mov	r7, r0
 801920e:	e7f0      	b.n	80191f2 <_svfiprintf_r+0x182>
 8019210:	ab03      	add	r3, sp, #12
 8019212:	9300      	str	r3, [sp, #0]
 8019214:	4622      	mov	r2, r4
 8019216:	4b11      	ldr	r3, [pc, #68]	; (801925c <_svfiprintf_r+0x1ec>)
 8019218:	a904      	add	r1, sp, #16
 801921a:	4640      	mov	r0, r8
 801921c:	f7fc fb60 	bl	80158e0 <_printf_float>
 8019220:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019224:	4681      	mov	r9, r0
 8019226:	d1d6      	bne.n	80191d6 <_svfiprintf_r+0x166>
 8019228:	89a3      	ldrh	r3, [r4, #12]
 801922a:	065b      	lsls	r3, r3, #25
 801922c:	f53f af35 	bmi.w	801909a <_svfiprintf_r+0x2a>
 8019230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019232:	b01d      	add	sp, #116	; 0x74
 8019234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019238:	ab03      	add	r3, sp, #12
 801923a:	9300      	str	r3, [sp, #0]
 801923c:	4622      	mov	r2, r4
 801923e:	4b07      	ldr	r3, [pc, #28]	; (801925c <_svfiprintf_r+0x1ec>)
 8019240:	a904      	add	r1, sp, #16
 8019242:	4640      	mov	r0, r8
 8019244:	f7fc fe02 	bl	8015e4c <_printf_i>
 8019248:	e7ea      	b.n	8019220 <_svfiprintf_r+0x1b0>
 801924a:	bf00      	nop
 801924c:	0801a3cc 	.word	0x0801a3cc
 8019250:	0801a3d2 	.word	0x0801a3d2
 8019254:	0801a3d6 	.word	0x0801a3d6
 8019258:	080158e1 	.word	0x080158e1
 801925c:	08018fbd 	.word	0x08018fbd

08019260 <_sungetc_r>:
 8019260:	b538      	push	{r3, r4, r5, lr}
 8019262:	1c4b      	adds	r3, r1, #1
 8019264:	4614      	mov	r4, r2
 8019266:	d103      	bne.n	8019270 <_sungetc_r+0x10>
 8019268:	f04f 35ff 	mov.w	r5, #4294967295
 801926c:	4628      	mov	r0, r5
 801926e:	bd38      	pop	{r3, r4, r5, pc}
 8019270:	8993      	ldrh	r3, [r2, #12]
 8019272:	f023 0320 	bic.w	r3, r3, #32
 8019276:	8193      	strh	r3, [r2, #12]
 8019278:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801927a:	6852      	ldr	r2, [r2, #4]
 801927c:	b2cd      	uxtb	r5, r1
 801927e:	b18b      	cbz	r3, 80192a4 <_sungetc_r+0x44>
 8019280:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019282:	4293      	cmp	r3, r2
 8019284:	dd08      	ble.n	8019298 <_sungetc_r+0x38>
 8019286:	6823      	ldr	r3, [r4, #0]
 8019288:	1e5a      	subs	r2, r3, #1
 801928a:	6022      	str	r2, [r4, #0]
 801928c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8019290:	6863      	ldr	r3, [r4, #4]
 8019292:	3301      	adds	r3, #1
 8019294:	6063      	str	r3, [r4, #4]
 8019296:	e7e9      	b.n	801926c <_sungetc_r+0xc>
 8019298:	4621      	mov	r1, r4
 801929a:	f000 fbc3 	bl	8019a24 <__submore>
 801929e:	2800      	cmp	r0, #0
 80192a0:	d0f1      	beq.n	8019286 <_sungetc_r+0x26>
 80192a2:	e7e1      	b.n	8019268 <_sungetc_r+0x8>
 80192a4:	6921      	ldr	r1, [r4, #16]
 80192a6:	6823      	ldr	r3, [r4, #0]
 80192a8:	b151      	cbz	r1, 80192c0 <_sungetc_r+0x60>
 80192aa:	4299      	cmp	r1, r3
 80192ac:	d208      	bcs.n	80192c0 <_sungetc_r+0x60>
 80192ae:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80192b2:	42a9      	cmp	r1, r5
 80192b4:	d104      	bne.n	80192c0 <_sungetc_r+0x60>
 80192b6:	3b01      	subs	r3, #1
 80192b8:	3201      	adds	r2, #1
 80192ba:	6023      	str	r3, [r4, #0]
 80192bc:	6062      	str	r2, [r4, #4]
 80192be:	e7d5      	b.n	801926c <_sungetc_r+0xc>
 80192c0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80192c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192c8:	6363      	str	r3, [r4, #52]	; 0x34
 80192ca:	2303      	movs	r3, #3
 80192cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80192ce:	4623      	mov	r3, r4
 80192d0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80192d4:	6023      	str	r3, [r4, #0]
 80192d6:	2301      	movs	r3, #1
 80192d8:	e7dc      	b.n	8019294 <_sungetc_r+0x34>

080192da <__ssrefill_r>:
 80192da:	b510      	push	{r4, lr}
 80192dc:	460c      	mov	r4, r1
 80192de:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80192e0:	b169      	cbz	r1, 80192fe <__ssrefill_r+0x24>
 80192e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192e6:	4299      	cmp	r1, r3
 80192e8:	d001      	beq.n	80192ee <__ssrefill_r+0x14>
 80192ea:	f7ff fdbf 	bl	8018e6c <_free_r>
 80192ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80192f0:	6063      	str	r3, [r4, #4]
 80192f2:	2000      	movs	r0, #0
 80192f4:	6360      	str	r0, [r4, #52]	; 0x34
 80192f6:	b113      	cbz	r3, 80192fe <__ssrefill_r+0x24>
 80192f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80192fa:	6023      	str	r3, [r4, #0]
 80192fc:	bd10      	pop	{r4, pc}
 80192fe:	6923      	ldr	r3, [r4, #16]
 8019300:	6023      	str	r3, [r4, #0]
 8019302:	2300      	movs	r3, #0
 8019304:	6063      	str	r3, [r4, #4]
 8019306:	89a3      	ldrh	r3, [r4, #12]
 8019308:	f043 0320 	orr.w	r3, r3, #32
 801930c:	81a3      	strh	r3, [r4, #12]
 801930e:	f04f 30ff 	mov.w	r0, #4294967295
 8019312:	e7f3      	b.n	80192fc <__ssrefill_r+0x22>

08019314 <__ssvfiscanf_r>:
 8019314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019318:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 801931c:	460c      	mov	r4, r1
 801931e:	2100      	movs	r1, #0
 8019320:	9144      	str	r1, [sp, #272]	; 0x110
 8019322:	9145      	str	r1, [sp, #276]	; 0x114
 8019324:	499f      	ldr	r1, [pc, #636]	; (80195a4 <__ssvfiscanf_r+0x290>)
 8019326:	91a0      	str	r1, [sp, #640]	; 0x280
 8019328:	f10d 0804 	add.w	r8, sp, #4
 801932c:	499e      	ldr	r1, [pc, #632]	; (80195a8 <__ssvfiscanf_r+0x294>)
 801932e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80195ac <__ssvfiscanf_r+0x298>
 8019332:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8019336:	4606      	mov	r6, r0
 8019338:	4692      	mov	sl, r2
 801933a:	91a1      	str	r1, [sp, #644]	; 0x284
 801933c:	9300      	str	r3, [sp, #0]
 801933e:	270a      	movs	r7, #10
 8019340:	f89a 3000 	ldrb.w	r3, [sl]
 8019344:	2b00      	cmp	r3, #0
 8019346:	f000 812a 	beq.w	801959e <__ssvfiscanf_r+0x28a>
 801934a:	4655      	mov	r5, sl
 801934c:	f7ff f93e 	bl	80185cc <__locale_ctype_ptr>
 8019350:	f815 bb01 	ldrb.w	fp, [r5], #1
 8019354:	4458      	add	r0, fp
 8019356:	7843      	ldrb	r3, [r0, #1]
 8019358:	f013 0308 	ands.w	r3, r3, #8
 801935c:	d01c      	beq.n	8019398 <__ssvfiscanf_r+0x84>
 801935e:	6863      	ldr	r3, [r4, #4]
 8019360:	2b00      	cmp	r3, #0
 8019362:	dd12      	ble.n	801938a <__ssvfiscanf_r+0x76>
 8019364:	f7ff f932 	bl	80185cc <__locale_ctype_ptr>
 8019368:	6823      	ldr	r3, [r4, #0]
 801936a:	781a      	ldrb	r2, [r3, #0]
 801936c:	4410      	add	r0, r2
 801936e:	7842      	ldrb	r2, [r0, #1]
 8019370:	0712      	lsls	r2, r2, #28
 8019372:	d401      	bmi.n	8019378 <__ssvfiscanf_r+0x64>
 8019374:	46aa      	mov	sl, r5
 8019376:	e7e3      	b.n	8019340 <__ssvfiscanf_r+0x2c>
 8019378:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801937a:	3201      	adds	r2, #1
 801937c:	9245      	str	r2, [sp, #276]	; 0x114
 801937e:	6862      	ldr	r2, [r4, #4]
 8019380:	3301      	adds	r3, #1
 8019382:	3a01      	subs	r2, #1
 8019384:	6062      	str	r2, [r4, #4]
 8019386:	6023      	str	r3, [r4, #0]
 8019388:	e7e9      	b.n	801935e <__ssvfiscanf_r+0x4a>
 801938a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801938c:	4621      	mov	r1, r4
 801938e:	4630      	mov	r0, r6
 8019390:	4798      	blx	r3
 8019392:	2800      	cmp	r0, #0
 8019394:	d0e6      	beq.n	8019364 <__ssvfiscanf_r+0x50>
 8019396:	e7ed      	b.n	8019374 <__ssvfiscanf_r+0x60>
 8019398:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 801939c:	f040 8082 	bne.w	80194a4 <__ssvfiscanf_r+0x190>
 80193a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80193a2:	9341      	str	r3, [sp, #260]	; 0x104
 80193a4:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80193a8:	2b2a      	cmp	r3, #42	; 0x2a
 80193aa:	d103      	bne.n	80193b4 <__ssvfiscanf_r+0xa0>
 80193ac:	2310      	movs	r3, #16
 80193ae:	9341      	str	r3, [sp, #260]	; 0x104
 80193b0:	f10a 0502 	add.w	r5, sl, #2
 80193b4:	46aa      	mov	sl, r5
 80193b6:	f815 1b01 	ldrb.w	r1, [r5], #1
 80193ba:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80193be:	2a09      	cmp	r2, #9
 80193c0:	d922      	bls.n	8019408 <__ssvfiscanf_r+0xf4>
 80193c2:	2203      	movs	r2, #3
 80193c4:	4879      	ldr	r0, [pc, #484]	; (80195ac <__ssvfiscanf_r+0x298>)
 80193c6:	f7e6 ff23 	bl	8000210 <memchr>
 80193ca:	b138      	cbz	r0, 80193dc <__ssvfiscanf_r+0xc8>
 80193cc:	eba0 0309 	sub.w	r3, r0, r9
 80193d0:	2001      	movs	r0, #1
 80193d2:	4098      	lsls	r0, r3
 80193d4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80193d6:	4318      	orrs	r0, r3
 80193d8:	9041      	str	r0, [sp, #260]	; 0x104
 80193da:	46aa      	mov	sl, r5
 80193dc:	f89a 3000 	ldrb.w	r3, [sl]
 80193e0:	2b67      	cmp	r3, #103	; 0x67
 80193e2:	f10a 0501 	add.w	r5, sl, #1
 80193e6:	d82b      	bhi.n	8019440 <__ssvfiscanf_r+0x12c>
 80193e8:	2b65      	cmp	r3, #101	; 0x65
 80193ea:	f080 809f 	bcs.w	801952c <__ssvfiscanf_r+0x218>
 80193ee:	2b47      	cmp	r3, #71	; 0x47
 80193f0:	d810      	bhi.n	8019414 <__ssvfiscanf_r+0x100>
 80193f2:	2b45      	cmp	r3, #69	; 0x45
 80193f4:	f080 809a 	bcs.w	801952c <__ssvfiscanf_r+0x218>
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d06c      	beq.n	80194d6 <__ssvfiscanf_r+0x1c2>
 80193fc:	2b25      	cmp	r3, #37	; 0x25
 80193fe:	d051      	beq.n	80194a4 <__ssvfiscanf_r+0x190>
 8019400:	2303      	movs	r3, #3
 8019402:	9347      	str	r3, [sp, #284]	; 0x11c
 8019404:	9742      	str	r7, [sp, #264]	; 0x108
 8019406:	e027      	b.n	8019458 <__ssvfiscanf_r+0x144>
 8019408:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801940a:	fb07 1303 	mla	r3, r7, r3, r1
 801940e:	3b30      	subs	r3, #48	; 0x30
 8019410:	9343      	str	r3, [sp, #268]	; 0x10c
 8019412:	e7cf      	b.n	80193b4 <__ssvfiscanf_r+0xa0>
 8019414:	2b5b      	cmp	r3, #91	; 0x5b
 8019416:	d06a      	beq.n	80194ee <__ssvfiscanf_r+0x1da>
 8019418:	d80c      	bhi.n	8019434 <__ssvfiscanf_r+0x120>
 801941a:	2b58      	cmp	r3, #88	; 0x58
 801941c:	d1f0      	bne.n	8019400 <__ssvfiscanf_r+0xec>
 801941e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8019420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8019424:	9241      	str	r2, [sp, #260]	; 0x104
 8019426:	2210      	movs	r2, #16
 8019428:	9242      	str	r2, [sp, #264]	; 0x108
 801942a:	2b6e      	cmp	r3, #110	; 0x6e
 801942c:	bf8c      	ite	hi
 801942e:	2304      	movhi	r3, #4
 8019430:	2303      	movls	r3, #3
 8019432:	e010      	b.n	8019456 <__ssvfiscanf_r+0x142>
 8019434:	2b63      	cmp	r3, #99	; 0x63
 8019436:	d065      	beq.n	8019504 <__ssvfiscanf_r+0x1f0>
 8019438:	2b64      	cmp	r3, #100	; 0x64
 801943a:	d1e1      	bne.n	8019400 <__ssvfiscanf_r+0xec>
 801943c:	9742      	str	r7, [sp, #264]	; 0x108
 801943e:	e7f4      	b.n	801942a <__ssvfiscanf_r+0x116>
 8019440:	2b70      	cmp	r3, #112	; 0x70
 8019442:	d04b      	beq.n	80194dc <__ssvfiscanf_r+0x1c8>
 8019444:	d826      	bhi.n	8019494 <__ssvfiscanf_r+0x180>
 8019446:	2b6e      	cmp	r3, #110	; 0x6e
 8019448:	d062      	beq.n	8019510 <__ssvfiscanf_r+0x1fc>
 801944a:	d84c      	bhi.n	80194e6 <__ssvfiscanf_r+0x1d2>
 801944c:	2b69      	cmp	r3, #105	; 0x69
 801944e:	d1d7      	bne.n	8019400 <__ssvfiscanf_r+0xec>
 8019450:	2300      	movs	r3, #0
 8019452:	9342      	str	r3, [sp, #264]	; 0x108
 8019454:	2303      	movs	r3, #3
 8019456:	9347      	str	r3, [sp, #284]	; 0x11c
 8019458:	6863      	ldr	r3, [r4, #4]
 801945a:	2b00      	cmp	r3, #0
 801945c:	dd68      	ble.n	8019530 <__ssvfiscanf_r+0x21c>
 801945e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019460:	0659      	lsls	r1, r3, #25
 8019462:	d407      	bmi.n	8019474 <__ssvfiscanf_r+0x160>
 8019464:	f7ff f8b2 	bl	80185cc <__locale_ctype_ptr>
 8019468:	6823      	ldr	r3, [r4, #0]
 801946a:	781a      	ldrb	r2, [r3, #0]
 801946c:	4410      	add	r0, r2
 801946e:	7842      	ldrb	r2, [r0, #1]
 8019470:	0712      	lsls	r2, r2, #28
 8019472:	d464      	bmi.n	801953e <__ssvfiscanf_r+0x22a>
 8019474:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8019476:	2b02      	cmp	r3, #2
 8019478:	dc73      	bgt.n	8019562 <__ssvfiscanf_r+0x24e>
 801947a:	466b      	mov	r3, sp
 801947c:	4622      	mov	r2, r4
 801947e:	a941      	add	r1, sp, #260	; 0x104
 8019480:	4630      	mov	r0, r6
 8019482:	f000 f897 	bl	80195b4 <_scanf_chars>
 8019486:	2801      	cmp	r0, #1
 8019488:	f000 8089 	beq.w	801959e <__ssvfiscanf_r+0x28a>
 801948c:	2802      	cmp	r0, #2
 801948e:	f47f af71 	bne.w	8019374 <__ssvfiscanf_r+0x60>
 8019492:	e01d      	b.n	80194d0 <__ssvfiscanf_r+0x1bc>
 8019494:	2b75      	cmp	r3, #117	; 0x75
 8019496:	d0d1      	beq.n	801943c <__ssvfiscanf_r+0x128>
 8019498:	2b78      	cmp	r3, #120	; 0x78
 801949a:	d0c0      	beq.n	801941e <__ssvfiscanf_r+0x10a>
 801949c:	2b73      	cmp	r3, #115	; 0x73
 801949e:	d1af      	bne.n	8019400 <__ssvfiscanf_r+0xec>
 80194a0:	2302      	movs	r3, #2
 80194a2:	e7d8      	b.n	8019456 <__ssvfiscanf_r+0x142>
 80194a4:	6863      	ldr	r3, [r4, #4]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	dd0c      	ble.n	80194c4 <__ssvfiscanf_r+0x1b0>
 80194aa:	6823      	ldr	r3, [r4, #0]
 80194ac:	781a      	ldrb	r2, [r3, #0]
 80194ae:	455a      	cmp	r2, fp
 80194b0:	d175      	bne.n	801959e <__ssvfiscanf_r+0x28a>
 80194b2:	3301      	adds	r3, #1
 80194b4:	6862      	ldr	r2, [r4, #4]
 80194b6:	6023      	str	r3, [r4, #0]
 80194b8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80194ba:	3a01      	subs	r2, #1
 80194bc:	3301      	adds	r3, #1
 80194be:	6062      	str	r2, [r4, #4]
 80194c0:	9345      	str	r3, [sp, #276]	; 0x114
 80194c2:	e757      	b.n	8019374 <__ssvfiscanf_r+0x60>
 80194c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80194c6:	4621      	mov	r1, r4
 80194c8:	4630      	mov	r0, r6
 80194ca:	4798      	blx	r3
 80194cc:	2800      	cmp	r0, #0
 80194ce:	d0ec      	beq.n	80194aa <__ssvfiscanf_r+0x196>
 80194d0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80194d2:	2800      	cmp	r0, #0
 80194d4:	d159      	bne.n	801958a <__ssvfiscanf_r+0x276>
 80194d6:	f04f 30ff 	mov.w	r0, #4294967295
 80194da:	e05c      	b.n	8019596 <__ssvfiscanf_r+0x282>
 80194dc:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80194de:	f042 0220 	orr.w	r2, r2, #32
 80194e2:	9241      	str	r2, [sp, #260]	; 0x104
 80194e4:	e79b      	b.n	801941e <__ssvfiscanf_r+0x10a>
 80194e6:	2308      	movs	r3, #8
 80194e8:	9342      	str	r3, [sp, #264]	; 0x108
 80194ea:	2304      	movs	r3, #4
 80194ec:	e7b3      	b.n	8019456 <__ssvfiscanf_r+0x142>
 80194ee:	4629      	mov	r1, r5
 80194f0:	4640      	mov	r0, r8
 80194f2:	f000 f9c7 	bl	8019884 <__sccl>
 80194f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80194f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194fc:	9341      	str	r3, [sp, #260]	; 0x104
 80194fe:	4605      	mov	r5, r0
 8019500:	2301      	movs	r3, #1
 8019502:	e7a8      	b.n	8019456 <__ssvfiscanf_r+0x142>
 8019504:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8019506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801950a:	9341      	str	r3, [sp, #260]	; 0x104
 801950c:	2300      	movs	r3, #0
 801950e:	e7a2      	b.n	8019456 <__ssvfiscanf_r+0x142>
 8019510:	9841      	ldr	r0, [sp, #260]	; 0x104
 8019512:	06c3      	lsls	r3, r0, #27
 8019514:	f53f af2e 	bmi.w	8019374 <__ssvfiscanf_r+0x60>
 8019518:	9b00      	ldr	r3, [sp, #0]
 801951a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801951c:	1d19      	adds	r1, r3, #4
 801951e:	9100      	str	r1, [sp, #0]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	07c0      	lsls	r0, r0, #31
 8019524:	bf4c      	ite	mi
 8019526:	801a      	strhmi	r2, [r3, #0]
 8019528:	601a      	strpl	r2, [r3, #0]
 801952a:	e723      	b.n	8019374 <__ssvfiscanf_r+0x60>
 801952c:	2305      	movs	r3, #5
 801952e:	e792      	b.n	8019456 <__ssvfiscanf_r+0x142>
 8019530:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019532:	4621      	mov	r1, r4
 8019534:	4630      	mov	r0, r6
 8019536:	4798      	blx	r3
 8019538:	2800      	cmp	r0, #0
 801953a:	d090      	beq.n	801945e <__ssvfiscanf_r+0x14a>
 801953c:	e7c8      	b.n	80194d0 <__ssvfiscanf_r+0x1bc>
 801953e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8019540:	3201      	adds	r2, #1
 8019542:	9245      	str	r2, [sp, #276]	; 0x114
 8019544:	6862      	ldr	r2, [r4, #4]
 8019546:	3a01      	subs	r2, #1
 8019548:	2a00      	cmp	r2, #0
 801954a:	6062      	str	r2, [r4, #4]
 801954c:	dd02      	ble.n	8019554 <__ssvfiscanf_r+0x240>
 801954e:	3301      	adds	r3, #1
 8019550:	6023      	str	r3, [r4, #0]
 8019552:	e787      	b.n	8019464 <__ssvfiscanf_r+0x150>
 8019554:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019556:	4621      	mov	r1, r4
 8019558:	4630      	mov	r0, r6
 801955a:	4798      	blx	r3
 801955c:	2800      	cmp	r0, #0
 801955e:	d081      	beq.n	8019464 <__ssvfiscanf_r+0x150>
 8019560:	e7b6      	b.n	80194d0 <__ssvfiscanf_r+0x1bc>
 8019562:	2b04      	cmp	r3, #4
 8019564:	dc06      	bgt.n	8019574 <__ssvfiscanf_r+0x260>
 8019566:	466b      	mov	r3, sp
 8019568:	4622      	mov	r2, r4
 801956a:	a941      	add	r1, sp, #260	; 0x104
 801956c:	4630      	mov	r0, r6
 801956e:	f000 f885 	bl	801967c <_scanf_i>
 8019572:	e788      	b.n	8019486 <__ssvfiscanf_r+0x172>
 8019574:	4b0e      	ldr	r3, [pc, #56]	; (80195b0 <__ssvfiscanf_r+0x29c>)
 8019576:	2b00      	cmp	r3, #0
 8019578:	f43f aefc 	beq.w	8019374 <__ssvfiscanf_r+0x60>
 801957c:	466b      	mov	r3, sp
 801957e:	4622      	mov	r2, r4
 8019580:	a941      	add	r1, sp, #260	; 0x104
 8019582:	4630      	mov	r0, r6
 8019584:	f7fc fd74 	bl	8016070 <_scanf_float>
 8019588:	e77d      	b.n	8019486 <__ssvfiscanf_r+0x172>
 801958a:	89a3      	ldrh	r3, [r4, #12]
 801958c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8019590:	bf18      	it	ne
 8019592:	f04f 30ff 	movne.w	r0, #4294967295
 8019596:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 801959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801959e:	9844      	ldr	r0, [sp, #272]	; 0x110
 80195a0:	e7f9      	b.n	8019596 <__ssvfiscanf_r+0x282>
 80195a2:	bf00      	nop
 80195a4:	08019261 	.word	0x08019261
 80195a8:	080192db 	.word	0x080192db
 80195ac:	0801a3d2 	.word	0x0801a3d2
 80195b0:	08016071 	.word	0x08016071

080195b4 <_scanf_chars>:
 80195b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195b8:	4615      	mov	r5, r2
 80195ba:	688a      	ldr	r2, [r1, #8]
 80195bc:	4680      	mov	r8, r0
 80195be:	460c      	mov	r4, r1
 80195c0:	b932      	cbnz	r2, 80195d0 <_scanf_chars+0x1c>
 80195c2:	698a      	ldr	r2, [r1, #24]
 80195c4:	2a00      	cmp	r2, #0
 80195c6:	bf14      	ite	ne
 80195c8:	f04f 32ff 	movne.w	r2, #4294967295
 80195cc:	2201      	moveq	r2, #1
 80195ce:	608a      	str	r2, [r1, #8]
 80195d0:	6822      	ldr	r2, [r4, #0]
 80195d2:	06d1      	lsls	r1, r2, #27
 80195d4:	bf5f      	itttt	pl
 80195d6:	681a      	ldrpl	r2, [r3, #0]
 80195d8:	1d11      	addpl	r1, r2, #4
 80195da:	6019      	strpl	r1, [r3, #0]
 80195dc:	6817      	ldrpl	r7, [r2, #0]
 80195de:	2600      	movs	r6, #0
 80195e0:	69a3      	ldr	r3, [r4, #24]
 80195e2:	b1db      	cbz	r3, 801961c <_scanf_chars+0x68>
 80195e4:	2b01      	cmp	r3, #1
 80195e6:	d107      	bne.n	80195f8 <_scanf_chars+0x44>
 80195e8:	682b      	ldr	r3, [r5, #0]
 80195ea:	6962      	ldr	r2, [r4, #20]
 80195ec:	781b      	ldrb	r3, [r3, #0]
 80195ee:	5cd3      	ldrb	r3, [r2, r3]
 80195f0:	b9a3      	cbnz	r3, 801961c <_scanf_chars+0x68>
 80195f2:	2e00      	cmp	r6, #0
 80195f4:	d132      	bne.n	801965c <_scanf_chars+0xa8>
 80195f6:	e006      	b.n	8019606 <_scanf_chars+0x52>
 80195f8:	2b02      	cmp	r3, #2
 80195fa:	d007      	beq.n	801960c <_scanf_chars+0x58>
 80195fc:	2e00      	cmp	r6, #0
 80195fe:	d12d      	bne.n	801965c <_scanf_chars+0xa8>
 8019600:	69a3      	ldr	r3, [r4, #24]
 8019602:	2b01      	cmp	r3, #1
 8019604:	d12a      	bne.n	801965c <_scanf_chars+0xa8>
 8019606:	2001      	movs	r0, #1
 8019608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801960c:	f7fe ffde 	bl	80185cc <__locale_ctype_ptr>
 8019610:	682b      	ldr	r3, [r5, #0]
 8019612:	781b      	ldrb	r3, [r3, #0]
 8019614:	4418      	add	r0, r3
 8019616:	7843      	ldrb	r3, [r0, #1]
 8019618:	071b      	lsls	r3, r3, #28
 801961a:	d4ef      	bmi.n	80195fc <_scanf_chars+0x48>
 801961c:	6823      	ldr	r3, [r4, #0]
 801961e:	06da      	lsls	r2, r3, #27
 8019620:	bf5e      	ittt	pl
 8019622:	682b      	ldrpl	r3, [r5, #0]
 8019624:	781b      	ldrbpl	r3, [r3, #0]
 8019626:	703b      	strbpl	r3, [r7, #0]
 8019628:	682a      	ldr	r2, [r5, #0]
 801962a:	686b      	ldr	r3, [r5, #4]
 801962c:	f102 0201 	add.w	r2, r2, #1
 8019630:	602a      	str	r2, [r5, #0]
 8019632:	68a2      	ldr	r2, [r4, #8]
 8019634:	f103 33ff 	add.w	r3, r3, #4294967295
 8019638:	f102 32ff 	add.w	r2, r2, #4294967295
 801963c:	606b      	str	r3, [r5, #4]
 801963e:	f106 0601 	add.w	r6, r6, #1
 8019642:	bf58      	it	pl
 8019644:	3701      	addpl	r7, #1
 8019646:	60a2      	str	r2, [r4, #8]
 8019648:	b142      	cbz	r2, 801965c <_scanf_chars+0xa8>
 801964a:	2b00      	cmp	r3, #0
 801964c:	dcc8      	bgt.n	80195e0 <_scanf_chars+0x2c>
 801964e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019652:	4629      	mov	r1, r5
 8019654:	4640      	mov	r0, r8
 8019656:	4798      	blx	r3
 8019658:	2800      	cmp	r0, #0
 801965a:	d0c1      	beq.n	80195e0 <_scanf_chars+0x2c>
 801965c:	6823      	ldr	r3, [r4, #0]
 801965e:	f013 0310 	ands.w	r3, r3, #16
 8019662:	d105      	bne.n	8019670 <_scanf_chars+0xbc>
 8019664:	68e2      	ldr	r2, [r4, #12]
 8019666:	3201      	adds	r2, #1
 8019668:	60e2      	str	r2, [r4, #12]
 801966a:	69a2      	ldr	r2, [r4, #24]
 801966c:	b102      	cbz	r2, 8019670 <_scanf_chars+0xbc>
 801966e:	703b      	strb	r3, [r7, #0]
 8019670:	6923      	ldr	r3, [r4, #16]
 8019672:	441e      	add	r6, r3
 8019674:	6126      	str	r6, [r4, #16]
 8019676:	2000      	movs	r0, #0
 8019678:	e7c6      	b.n	8019608 <_scanf_chars+0x54>
	...

0801967c <_scanf_i>:
 801967c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019680:	469a      	mov	sl, r3
 8019682:	4b74      	ldr	r3, [pc, #464]	; (8019854 <_scanf_i+0x1d8>)
 8019684:	460c      	mov	r4, r1
 8019686:	4683      	mov	fp, r0
 8019688:	4616      	mov	r6, r2
 801968a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801968e:	b087      	sub	sp, #28
 8019690:	ab03      	add	r3, sp, #12
 8019692:	68a7      	ldr	r7, [r4, #8]
 8019694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019698:	4b6f      	ldr	r3, [pc, #444]	; (8019858 <_scanf_i+0x1dc>)
 801969a:	69a1      	ldr	r1, [r4, #24]
 801969c:	4a6f      	ldr	r2, [pc, #444]	; (801985c <_scanf_i+0x1e0>)
 801969e:	2903      	cmp	r1, #3
 80196a0:	bf08      	it	eq
 80196a2:	461a      	moveq	r2, r3
 80196a4:	1e7b      	subs	r3, r7, #1
 80196a6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80196aa:	bf84      	itt	hi
 80196ac:	f240 135d 	movwhi	r3, #349	; 0x15d
 80196b0:	60a3      	strhi	r3, [r4, #8]
 80196b2:	6823      	ldr	r3, [r4, #0]
 80196b4:	9200      	str	r2, [sp, #0]
 80196b6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80196ba:	bf88      	it	hi
 80196bc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80196c0:	f104 091c 	add.w	r9, r4, #28
 80196c4:	6023      	str	r3, [r4, #0]
 80196c6:	bf8c      	ite	hi
 80196c8:	197f      	addhi	r7, r7, r5
 80196ca:	2700      	movls	r7, #0
 80196cc:	464b      	mov	r3, r9
 80196ce:	f04f 0800 	mov.w	r8, #0
 80196d2:	9301      	str	r3, [sp, #4]
 80196d4:	6831      	ldr	r1, [r6, #0]
 80196d6:	ab03      	add	r3, sp, #12
 80196d8:	2202      	movs	r2, #2
 80196da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80196de:	7809      	ldrb	r1, [r1, #0]
 80196e0:	f7e6 fd96 	bl	8000210 <memchr>
 80196e4:	9b01      	ldr	r3, [sp, #4]
 80196e6:	b330      	cbz	r0, 8019736 <_scanf_i+0xba>
 80196e8:	f1b8 0f01 	cmp.w	r8, #1
 80196ec:	d15a      	bne.n	80197a4 <_scanf_i+0x128>
 80196ee:	6862      	ldr	r2, [r4, #4]
 80196f0:	b92a      	cbnz	r2, 80196fe <_scanf_i+0x82>
 80196f2:	6822      	ldr	r2, [r4, #0]
 80196f4:	2108      	movs	r1, #8
 80196f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80196fa:	6061      	str	r1, [r4, #4]
 80196fc:	6022      	str	r2, [r4, #0]
 80196fe:	6822      	ldr	r2, [r4, #0]
 8019700:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8019704:	6022      	str	r2, [r4, #0]
 8019706:	68a2      	ldr	r2, [r4, #8]
 8019708:	1e51      	subs	r1, r2, #1
 801970a:	60a1      	str	r1, [r4, #8]
 801970c:	b19a      	cbz	r2, 8019736 <_scanf_i+0xba>
 801970e:	6832      	ldr	r2, [r6, #0]
 8019710:	1c51      	adds	r1, r2, #1
 8019712:	6031      	str	r1, [r6, #0]
 8019714:	7812      	ldrb	r2, [r2, #0]
 8019716:	701a      	strb	r2, [r3, #0]
 8019718:	1c5d      	adds	r5, r3, #1
 801971a:	6873      	ldr	r3, [r6, #4]
 801971c:	3b01      	subs	r3, #1
 801971e:	2b00      	cmp	r3, #0
 8019720:	6073      	str	r3, [r6, #4]
 8019722:	dc07      	bgt.n	8019734 <_scanf_i+0xb8>
 8019724:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8019728:	4631      	mov	r1, r6
 801972a:	4658      	mov	r0, fp
 801972c:	4798      	blx	r3
 801972e:	2800      	cmp	r0, #0
 8019730:	f040 8086 	bne.w	8019840 <_scanf_i+0x1c4>
 8019734:	462b      	mov	r3, r5
 8019736:	f108 0801 	add.w	r8, r8, #1
 801973a:	f1b8 0f03 	cmp.w	r8, #3
 801973e:	d1c8      	bne.n	80196d2 <_scanf_i+0x56>
 8019740:	6862      	ldr	r2, [r4, #4]
 8019742:	b90a      	cbnz	r2, 8019748 <_scanf_i+0xcc>
 8019744:	220a      	movs	r2, #10
 8019746:	6062      	str	r2, [r4, #4]
 8019748:	6862      	ldr	r2, [r4, #4]
 801974a:	4945      	ldr	r1, [pc, #276]	; (8019860 <_scanf_i+0x1e4>)
 801974c:	6960      	ldr	r0, [r4, #20]
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	1a89      	subs	r1, r1, r2
 8019752:	f000 f897 	bl	8019884 <__sccl>
 8019756:	9b01      	ldr	r3, [sp, #4]
 8019758:	f04f 0800 	mov.w	r8, #0
 801975c:	461d      	mov	r5, r3
 801975e:	68a3      	ldr	r3, [r4, #8]
 8019760:	6822      	ldr	r2, [r4, #0]
 8019762:	2b00      	cmp	r3, #0
 8019764:	d03a      	beq.n	80197dc <_scanf_i+0x160>
 8019766:	6831      	ldr	r1, [r6, #0]
 8019768:	6960      	ldr	r0, [r4, #20]
 801976a:	f891 c000 	ldrb.w	ip, [r1]
 801976e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8019772:	2800      	cmp	r0, #0
 8019774:	d032      	beq.n	80197dc <_scanf_i+0x160>
 8019776:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801977a:	d121      	bne.n	80197c0 <_scanf_i+0x144>
 801977c:	0510      	lsls	r0, r2, #20
 801977e:	d51f      	bpl.n	80197c0 <_scanf_i+0x144>
 8019780:	f108 0801 	add.w	r8, r8, #1
 8019784:	b117      	cbz	r7, 801978c <_scanf_i+0x110>
 8019786:	3301      	adds	r3, #1
 8019788:	3f01      	subs	r7, #1
 801978a:	60a3      	str	r3, [r4, #8]
 801978c:	6873      	ldr	r3, [r6, #4]
 801978e:	3b01      	subs	r3, #1
 8019790:	2b00      	cmp	r3, #0
 8019792:	6073      	str	r3, [r6, #4]
 8019794:	dd1b      	ble.n	80197ce <_scanf_i+0x152>
 8019796:	6833      	ldr	r3, [r6, #0]
 8019798:	3301      	adds	r3, #1
 801979a:	6033      	str	r3, [r6, #0]
 801979c:	68a3      	ldr	r3, [r4, #8]
 801979e:	3b01      	subs	r3, #1
 80197a0:	60a3      	str	r3, [r4, #8]
 80197a2:	e7dc      	b.n	801975e <_scanf_i+0xe2>
 80197a4:	f1b8 0f02 	cmp.w	r8, #2
 80197a8:	d1ad      	bne.n	8019706 <_scanf_i+0x8a>
 80197aa:	6822      	ldr	r2, [r4, #0]
 80197ac:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80197b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80197b4:	d1bf      	bne.n	8019736 <_scanf_i+0xba>
 80197b6:	2110      	movs	r1, #16
 80197b8:	6061      	str	r1, [r4, #4]
 80197ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80197be:	e7a1      	b.n	8019704 <_scanf_i+0x88>
 80197c0:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80197c4:	6022      	str	r2, [r4, #0]
 80197c6:	780b      	ldrb	r3, [r1, #0]
 80197c8:	702b      	strb	r3, [r5, #0]
 80197ca:	3501      	adds	r5, #1
 80197cc:	e7de      	b.n	801978c <_scanf_i+0x110>
 80197ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80197d2:	4631      	mov	r1, r6
 80197d4:	4658      	mov	r0, fp
 80197d6:	4798      	blx	r3
 80197d8:	2800      	cmp	r0, #0
 80197da:	d0df      	beq.n	801979c <_scanf_i+0x120>
 80197dc:	6823      	ldr	r3, [r4, #0]
 80197de:	05d9      	lsls	r1, r3, #23
 80197e0:	d50c      	bpl.n	80197fc <_scanf_i+0x180>
 80197e2:	454d      	cmp	r5, r9
 80197e4:	d908      	bls.n	80197f8 <_scanf_i+0x17c>
 80197e6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80197ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80197ee:	4632      	mov	r2, r6
 80197f0:	4658      	mov	r0, fp
 80197f2:	4798      	blx	r3
 80197f4:	1e6f      	subs	r7, r5, #1
 80197f6:	463d      	mov	r5, r7
 80197f8:	454d      	cmp	r5, r9
 80197fa:	d029      	beq.n	8019850 <_scanf_i+0x1d4>
 80197fc:	6822      	ldr	r2, [r4, #0]
 80197fe:	f012 0210 	ands.w	r2, r2, #16
 8019802:	d113      	bne.n	801982c <_scanf_i+0x1b0>
 8019804:	702a      	strb	r2, [r5, #0]
 8019806:	6863      	ldr	r3, [r4, #4]
 8019808:	9e00      	ldr	r6, [sp, #0]
 801980a:	4649      	mov	r1, r9
 801980c:	4658      	mov	r0, fp
 801980e:	47b0      	blx	r6
 8019810:	f8da 3000 	ldr.w	r3, [sl]
 8019814:	6821      	ldr	r1, [r4, #0]
 8019816:	1d1a      	adds	r2, r3, #4
 8019818:	f8ca 2000 	str.w	r2, [sl]
 801981c:	f011 0f20 	tst.w	r1, #32
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	d010      	beq.n	8019846 <_scanf_i+0x1ca>
 8019824:	6018      	str	r0, [r3, #0]
 8019826:	68e3      	ldr	r3, [r4, #12]
 8019828:	3301      	adds	r3, #1
 801982a:	60e3      	str	r3, [r4, #12]
 801982c:	eba5 0509 	sub.w	r5, r5, r9
 8019830:	44a8      	add	r8, r5
 8019832:	6925      	ldr	r5, [r4, #16]
 8019834:	4445      	add	r5, r8
 8019836:	6125      	str	r5, [r4, #16]
 8019838:	2000      	movs	r0, #0
 801983a:	b007      	add	sp, #28
 801983c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019840:	f04f 0800 	mov.w	r8, #0
 8019844:	e7ca      	b.n	80197dc <_scanf_i+0x160>
 8019846:	07ca      	lsls	r2, r1, #31
 8019848:	bf4c      	ite	mi
 801984a:	8018      	strhmi	r0, [r3, #0]
 801984c:	6018      	strpl	r0, [r3, #0]
 801984e:	e7ea      	b.n	8019826 <_scanf_i+0x1aa>
 8019850:	2001      	movs	r0, #1
 8019852:	e7f2      	b.n	801983a <_scanf_i+0x1be>
 8019854:	08019f94 	.word	0x08019f94
 8019858:	08017289 	.word	0x08017289
 801985c:	08019a01 	.word	0x08019a01
 8019860:	0801a3ed 	.word	0x0801a3ed

08019864 <_sbrk_r>:
 8019864:	b538      	push	{r3, r4, r5, lr}
 8019866:	4c06      	ldr	r4, [pc, #24]	; (8019880 <_sbrk_r+0x1c>)
 8019868:	2300      	movs	r3, #0
 801986a:	4605      	mov	r5, r0
 801986c:	4608      	mov	r0, r1
 801986e:	6023      	str	r3, [r4, #0]
 8019870:	f7ed ffc2 	bl	80077f8 <_sbrk>
 8019874:	1c43      	adds	r3, r0, #1
 8019876:	d102      	bne.n	801987e <_sbrk_r+0x1a>
 8019878:	6823      	ldr	r3, [r4, #0]
 801987a:	b103      	cbz	r3, 801987e <_sbrk_r+0x1a>
 801987c:	602b      	str	r3, [r5, #0]
 801987e:	bd38      	pop	{r3, r4, r5, pc}
 8019880:	20046c94 	.word	0x20046c94

08019884 <__sccl>:
 8019884:	b570      	push	{r4, r5, r6, lr}
 8019886:	780b      	ldrb	r3, [r1, #0]
 8019888:	2b5e      	cmp	r3, #94	; 0x5e
 801988a:	bf13      	iteet	ne
 801988c:	1c4a      	addne	r2, r1, #1
 801988e:	1c8a      	addeq	r2, r1, #2
 8019890:	784b      	ldrbeq	r3, [r1, #1]
 8019892:	2100      	movne	r1, #0
 8019894:	bf08      	it	eq
 8019896:	2101      	moveq	r1, #1
 8019898:	1e44      	subs	r4, r0, #1
 801989a:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801989e:	f804 1f01 	strb.w	r1, [r4, #1]!
 80198a2:	42ac      	cmp	r4, r5
 80198a4:	d1fb      	bne.n	801989e <__sccl+0x1a>
 80198a6:	b913      	cbnz	r3, 80198ae <__sccl+0x2a>
 80198a8:	3a01      	subs	r2, #1
 80198aa:	4610      	mov	r0, r2
 80198ac:	bd70      	pop	{r4, r5, r6, pc}
 80198ae:	f081 0401 	eor.w	r4, r1, #1
 80198b2:	54c4      	strb	r4, [r0, r3]
 80198b4:	1c51      	adds	r1, r2, #1
 80198b6:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80198ba:	2d2d      	cmp	r5, #45	; 0x2d
 80198bc:	f101 36ff 	add.w	r6, r1, #4294967295
 80198c0:	460a      	mov	r2, r1
 80198c2:	d006      	beq.n	80198d2 <__sccl+0x4e>
 80198c4:	2d5d      	cmp	r5, #93	; 0x5d
 80198c6:	d0f0      	beq.n	80198aa <__sccl+0x26>
 80198c8:	b90d      	cbnz	r5, 80198ce <__sccl+0x4a>
 80198ca:	4632      	mov	r2, r6
 80198cc:	e7ed      	b.n	80198aa <__sccl+0x26>
 80198ce:	462b      	mov	r3, r5
 80198d0:	e7ef      	b.n	80198b2 <__sccl+0x2e>
 80198d2:	780e      	ldrb	r6, [r1, #0]
 80198d4:	2e5d      	cmp	r6, #93	; 0x5d
 80198d6:	d0fa      	beq.n	80198ce <__sccl+0x4a>
 80198d8:	42b3      	cmp	r3, r6
 80198da:	dcf8      	bgt.n	80198ce <__sccl+0x4a>
 80198dc:	3301      	adds	r3, #1
 80198de:	429e      	cmp	r6, r3
 80198e0:	54c4      	strb	r4, [r0, r3]
 80198e2:	dcfb      	bgt.n	80198dc <__sccl+0x58>
 80198e4:	3102      	adds	r1, #2
 80198e6:	e7e6      	b.n	80198b6 <__sccl+0x32>

080198e8 <strncmp>:
 80198e8:	b510      	push	{r4, lr}
 80198ea:	b16a      	cbz	r2, 8019908 <strncmp+0x20>
 80198ec:	3901      	subs	r1, #1
 80198ee:	1884      	adds	r4, r0, r2
 80198f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80198f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80198f8:	4293      	cmp	r3, r2
 80198fa:	d103      	bne.n	8019904 <strncmp+0x1c>
 80198fc:	42a0      	cmp	r0, r4
 80198fe:	d001      	beq.n	8019904 <strncmp+0x1c>
 8019900:	2b00      	cmp	r3, #0
 8019902:	d1f5      	bne.n	80198f0 <strncmp+0x8>
 8019904:	1a98      	subs	r0, r3, r2
 8019906:	bd10      	pop	{r4, pc}
 8019908:	4610      	mov	r0, r2
 801990a:	e7fc      	b.n	8019906 <strncmp+0x1e>

0801990c <_strtoul_l.isra.0>:
 801990c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019910:	4680      	mov	r8, r0
 8019912:	4689      	mov	r9, r1
 8019914:	4692      	mov	sl, r2
 8019916:	461e      	mov	r6, r3
 8019918:	460f      	mov	r7, r1
 801991a:	463d      	mov	r5, r7
 801991c:	9808      	ldr	r0, [sp, #32]
 801991e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019922:	f7fe fe4f 	bl	80185c4 <__locale_ctype_ptr_l>
 8019926:	4420      	add	r0, r4
 8019928:	7843      	ldrb	r3, [r0, #1]
 801992a:	f013 0308 	ands.w	r3, r3, #8
 801992e:	d130      	bne.n	8019992 <_strtoul_l.isra.0+0x86>
 8019930:	2c2d      	cmp	r4, #45	; 0x2d
 8019932:	d130      	bne.n	8019996 <_strtoul_l.isra.0+0x8a>
 8019934:	787c      	ldrb	r4, [r7, #1]
 8019936:	1cbd      	adds	r5, r7, #2
 8019938:	2101      	movs	r1, #1
 801993a:	2e00      	cmp	r6, #0
 801993c:	d05c      	beq.n	80199f8 <_strtoul_l.isra.0+0xec>
 801993e:	2e10      	cmp	r6, #16
 8019940:	d109      	bne.n	8019956 <_strtoul_l.isra.0+0x4a>
 8019942:	2c30      	cmp	r4, #48	; 0x30
 8019944:	d107      	bne.n	8019956 <_strtoul_l.isra.0+0x4a>
 8019946:	782b      	ldrb	r3, [r5, #0]
 8019948:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801994c:	2b58      	cmp	r3, #88	; 0x58
 801994e:	d14e      	bne.n	80199ee <_strtoul_l.isra.0+0xe2>
 8019950:	786c      	ldrb	r4, [r5, #1]
 8019952:	2610      	movs	r6, #16
 8019954:	3502      	adds	r5, #2
 8019956:	f04f 32ff 	mov.w	r2, #4294967295
 801995a:	2300      	movs	r3, #0
 801995c:	fbb2 f2f6 	udiv	r2, r2, r6
 8019960:	fb06 fc02 	mul.w	ip, r6, r2
 8019964:	ea6f 0c0c 	mvn.w	ip, ip
 8019968:	4618      	mov	r0, r3
 801996a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801996e:	2f09      	cmp	r7, #9
 8019970:	d817      	bhi.n	80199a2 <_strtoul_l.isra.0+0x96>
 8019972:	463c      	mov	r4, r7
 8019974:	42a6      	cmp	r6, r4
 8019976:	dd23      	ble.n	80199c0 <_strtoul_l.isra.0+0xb4>
 8019978:	2b00      	cmp	r3, #0
 801997a:	db1e      	blt.n	80199ba <_strtoul_l.isra.0+0xae>
 801997c:	4282      	cmp	r2, r0
 801997e:	d31c      	bcc.n	80199ba <_strtoul_l.isra.0+0xae>
 8019980:	d101      	bne.n	8019986 <_strtoul_l.isra.0+0x7a>
 8019982:	45a4      	cmp	ip, r4
 8019984:	db19      	blt.n	80199ba <_strtoul_l.isra.0+0xae>
 8019986:	fb00 4006 	mla	r0, r0, r6, r4
 801998a:	2301      	movs	r3, #1
 801998c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019990:	e7eb      	b.n	801996a <_strtoul_l.isra.0+0x5e>
 8019992:	462f      	mov	r7, r5
 8019994:	e7c1      	b.n	801991a <_strtoul_l.isra.0+0xe>
 8019996:	2c2b      	cmp	r4, #43	; 0x2b
 8019998:	bf04      	itt	eq
 801999a:	1cbd      	addeq	r5, r7, #2
 801999c:	787c      	ldrbeq	r4, [r7, #1]
 801999e:	4619      	mov	r1, r3
 80199a0:	e7cb      	b.n	801993a <_strtoul_l.isra.0+0x2e>
 80199a2:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80199a6:	2f19      	cmp	r7, #25
 80199a8:	d801      	bhi.n	80199ae <_strtoul_l.isra.0+0xa2>
 80199aa:	3c37      	subs	r4, #55	; 0x37
 80199ac:	e7e2      	b.n	8019974 <_strtoul_l.isra.0+0x68>
 80199ae:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80199b2:	2f19      	cmp	r7, #25
 80199b4:	d804      	bhi.n	80199c0 <_strtoul_l.isra.0+0xb4>
 80199b6:	3c57      	subs	r4, #87	; 0x57
 80199b8:	e7dc      	b.n	8019974 <_strtoul_l.isra.0+0x68>
 80199ba:	f04f 33ff 	mov.w	r3, #4294967295
 80199be:	e7e5      	b.n	801998c <_strtoul_l.isra.0+0x80>
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	da09      	bge.n	80199d8 <_strtoul_l.isra.0+0xcc>
 80199c4:	2322      	movs	r3, #34	; 0x22
 80199c6:	f8c8 3000 	str.w	r3, [r8]
 80199ca:	f04f 30ff 	mov.w	r0, #4294967295
 80199ce:	f1ba 0f00 	cmp.w	sl, #0
 80199d2:	d107      	bne.n	80199e4 <_strtoul_l.isra.0+0xd8>
 80199d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199d8:	b101      	cbz	r1, 80199dc <_strtoul_l.isra.0+0xd0>
 80199da:	4240      	negs	r0, r0
 80199dc:	f1ba 0f00 	cmp.w	sl, #0
 80199e0:	d0f8      	beq.n	80199d4 <_strtoul_l.isra.0+0xc8>
 80199e2:	b10b      	cbz	r3, 80199e8 <_strtoul_l.isra.0+0xdc>
 80199e4:	f105 39ff 	add.w	r9, r5, #4294967295
 80199e8:	f8ca 9000 	str.w	r9, [sl]
 80199ec:	e7f2      	b.n	80199d4 <_strtoul_l.isra.0+0xc8>
 80199ee:	2430      	movs	r4, #48	; 0x30
 80199f0:	2e00      	cmp	r6, #0
 80199f2:	d1b0      	bne.n	8019956 <_strtoul_l.isra.0+0x4a>
 80199f4:	2608      	movs	r6, #8
 80199f6:	e7ae      	b.n	8019956 <_strtoul_l.isra.0+0x4a>
 80199f8:	2c30      	cmp	r4, #48	; 0x30
 80199fa:	d0a4      	beq.n	8019946 <_strtoul_l.isra.0+0x3a>
 80199fc:	260a      	movs	r6, #10
 80199fe:	e7aa      	b.n	8019956 <_strtoul_l.isra.0+0x4a>

08019a00 <_strtoul_r>:
 8019a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a02:	4c06      	ldr	r4, [pc, #24]	; (8019a1c <_strtoul_r+0x1c>)
 8019a04:	4d06      	ldr	r5, [pc, #24]	; (8019a20 <_strtoul_r+0x20>)
 8019a06:	6824      	ldr	r4, [r4, #0]
 8019a08:	6a24      	ldr	r4, [r4, #32]
 8019a0a:	2c00      	cmp	r4, #0
 8019a0c:	bf08      	it	eq
 8019a0e:	462c      	moveq	r4, r5
 8019a10:	9400      	str	r4, [sp, #0]
 8019a12:	f7ff ff7b 	bl	801990c <_strtoul_l.isra.0>
 8019a16:	b003      	add	sp, #12
 8019a18:	bd30      	pop	{r4, r5, pc}
 8019a1a:	bf00      	nop
 8019a1c:	2000000c 	.word	0x2000000c
 8019a20:	20000070 	.word	0x20000070

08019a24 <__submore>:
 8019a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a28:	460c      	mov	r4, r1
 8019a2a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019a2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a30:	4299      	cmp	r1, r3
 8019a32:	d11d      	bne.n	8019a70 <__submore+0x4c>
 8019a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019a38:	f7ff fa66 	bl	8018f08 <_malloc_r>
 8019a3c:	b918      	cbnz	r0, 8019a46 <__submore+0x22>
 8019a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8019a42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a4a:	63a3      	str	r3, [r4, #56]	; 0x38
 8019a4c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019a50:	6360      	str	r0, [r4, #52]	; 0x34
 8019a52:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019a56:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019a5a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019a5e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019a62:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019a66:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019a6a:	6020      	str	r0, [r4, #0]
 8019a6c:	2000      	movs	r0, #0
 8019a6e:	e7e8      	b.n	8019a42 <__submore+0x1e>
 8019a70:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019a72:	0077      	lsls	r7, r6, #1
 8019a74:	463a      	mov	r2, r7
 8019a76:	f000 f837 	bl	8019ae8 <_realloc_r>
 8019a7a:	4605      	mov	r5, r0
 8019a7c:	2800      	cmp	r0, #0
 8019a7e:	d0de      	beq.n	8019a3e <__submore+0x1a>
 8019a80:	eb00 0806 	add.w	r8, r0, r6
 8019a84:	4601      	mov	r1, r0
 8019a86:	4632      	mov	r2, r6
 8019a88:	4640      	mov	r0, r8
 8019a8a:	f7fe fdd7 	bl	801863c <memcpy>
 8019a8e:	f8c4 8000 	str.w	r8, [r4]
 8019a92:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019a96:	e7e9      	b.n	8019a6c <__submore+0x48>

08019a98 <__ascii_wctomb>:
 8019a98:	b149      	cbz	r1, 8019aae <__ascii_wctomb+0x16>
 8019a9a:	2aff      	cmp	r2, #255	; 0xff
 8019a9c:	bf85      	ittet	hi
 8019a9e:	238a      	movhi	r3, #138	; 0x8a
 8019aa0:	6003      	strhi	r3, [r0, #0]
 8019aa2:	700a      	strbls	r2, [r1, #0]
 8019aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8019aa8:	bf98      	it	ls
 8019aaa:	2001      	movls	r0, #1
 8019aac:	4770      	bx	lr
 8019aae:	4608      	mov	r0, r1
 8019ab0:	4770      	bx	lr

08019ab2 <memmove>:
 8019ab2:	4288      	cmp	r0, r1
 8019ab4:	b510      	push	{r4, lr}
 8019ab6:	eb01 0302 	add.w	r3, r1, r2
 8019aba:	d807      	bhi.n	8019acc <memmove+0x1a>
 8019abc:	1e42      	subs	r2, r0, #1
 8019abe:	4299      	cmp	r1, r3
 8019ac0:	d00a      	beq.n	8019ad8 <memmove+0x26>
 8019ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019ac6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019aca:	e7f8      	b.n	8019abe <memmove+0xc>
 8019acc:	4283      	cmp	r3, r0
 8019ace:	d9f5      	bls.n	8019abc <memmove+0xa>
 8019ad0:	1881      	adds	r1, r0, r2
 8019ad2:	1ad2      	subs	r2, r2, r3
 8019ad4:	42d3      	cmn	r3, r2
 8019ad6:	d100      	bne.n	8019ada <memmove+0x28>
 8019ad8:	bd10      	pop	{r4, pc}
 8019ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019ade:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8019ae2:	e7f7      	b.n	8019ad4 <memmove+0x22>

08019ae4 <__malloc_lock>:
 8019ae4:	4770      	bx	lr

08019ae6 <__malloc_unlock>:
 8019ae6:	4770      	bx	lr

08019ae8 <_realloc_r>:
 8019ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aea:	4607      	mov	r7, r0
 8019aec:	4614      	mov	r4, r2
 8019aee:	460e      	mov	r6, r1
 8019af0:	b921      	cbnz	r1, 8019afc <_realloc_r+0x14>
 8019af2:	4611      	mov	r1, r2
 8019af4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019af8:	f7ff ba06 	b.w	8018f08 <_malloc_r>
 8019afc:	b922      	cbnz	r2, 8019b08 <_realloc_r+0x20>
 8019afe:	f7ff f9b5 	bl	8018e6c <_free_r>
 8019b02:	4625      	mov	r5, r4
 8019b04:	4628      	mov	r0, r5
 8019b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b08:	f000 f814 	bl	8019b34 <_malloc_usable_size_r>
 8019b0c:	42a0      	cmp	r0, r4
 8019b0e:	d20f      	bcs.n	8019b30 <_realloc_r+0x48>
 8019b10:	4621      	mov	r1, r4
 8019b12:	4638      	mov	r0, r7
 8019b14:	f7ff f9f8 	bl	8018f08 <_malloc_r>
 8019b18:	4605      	mov	r5, r0
 8019b1a:	2800      	cmp	r0, #0
 8019b1c:	d0f2      	beq.n	8019b04 <_realloc_r+0x1c>
 8019b1e:	4631      	mov	r1, r6
 8019b20:	4622      	mov	r2, r4
 8019b22:	f7fe fd8b 	bl	801863c <memcpy>
 8019b26:	4631      	mov	r1, r6
 8019b28:	4638      	mov	r0, r7
 8019b2a:	f7ff f99f 	bl	8018e6c <_free_r>
 8019b2e:	e7e9      	b.n	8019b04 <_realloc_r+0x1c>
 8019b30:	4635      	mov	r5, r6
 8019b32:	e7e7      	b.n	8019b04 <_realloc_r+0x1c>

08019b34 <_malloc_usable_size_r>:
 8019b34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019b38:	1f18      	subs	r0, r3, #4
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	bfbc      	itt	lt
 8019b3e:	580b      	ldrlt	r3, [r1, r0]
 8019b40:	18c0      	addlt	r0, r0, r3
 8019b42:	4770      	bx	lr

08019b44 <_init>:
 8019b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b46:	bf00      	nop
 8019b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b4a:	bc08      	pop	{r3}
 8019b4c:	469e      	mov	lr, r3
 8019b4e:	4770      	bx	lr

08019b50 <_fini>:
 8019b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b52:	bf00      	nop
 8019b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019b56:	bc08      	pop	{r3}
 8019b58:	469e      	mov	lr, r3
 8019b5a:	4770      	bx	lr
